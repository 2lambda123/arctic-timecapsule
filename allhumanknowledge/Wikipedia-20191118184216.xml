<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.5</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>User:Emijrp/All Human Knowledge</title>
    <ns>2</ns>
    <id>28624763</id>
    <revision>
      <id>917568465</id>
      <parentid>917423887</parentid>
      <timestamp>2019-09-24T12:27:15Z</timestamp>
      <contributor>
        <username>Alex Devens</username>
        <id>35943801</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="317132">{{userpage}}
&lt;!--{{User:Emijrp/All human knowledge/begin}}
{{shortcut|WP:AHK}}--&gt;
&lt;gallery mode="packed-hover" heights="120px"&gt;
File:Ancientlibraryalex.jpg|The Great [[Library of Alexandria]] in [[Egypt]]
File:Naturalishistoria.jpg|''[[Natural History (Pliny)|Natural History]]'' by [[Pliny the Elder]]
File:Isidoro di siviglia, etimologie, fine VIII secolo MSII 4856 Bruxelles, Bibliotheque Royale Albert I, 20x31,50, pagina in scrittura onciale carolina.jpg|''[[Etymologiae]]'' by [[Isidore of Seville]]
File:BL Royal Vincent of Beauvais.jpg|''[[Speculum Maius]]'' by [[Vincent of Beauvais]]
File:Denis Diderot 111.PNG|[[Denis Diderot]] contributor to ''[[Encyclopédie]]''
File:EncycBrit1913.jpg|Advertisement for the [[Encyclopædia Britannica Eleventh Edition]]
File:Internet Archive Protected Petabox.jpeg|[[Internet Archive]] [[petabox]], designed to store one [[petabyte]] (a million gigabytes) of information&lt;ref&gt;{{cite web|url=http://blog.archive.org/2012/10/26/10000000000000000-bytes-archived/|title=10,000,000,000,000,000 bytes archived!|date=October 26, 2012|work=Collections Team blog|publisher=Internet Archive|accessdate=2012-10-27|quote=On Thursday, 25 October, hundreds of Internet Archive supporters, volunteers, and staff celebrated addition of the 10,000,000,000,000,000th [[byte]] to the Archive’s massive collections.|archiveurl=http://www.webcitation.org/6GkhcImyk|archivedate=2013-05-20|deadurl=no}}&lt;/ref&gt;
&lt;/gallery&gt;
[[File:Noahs Ark.jpg|thumb|right|Preserving ''all human knowledge'' for posterity. '''It is all-important'''.]]
[[File:Sdtpa wmf-8.jpg|thumb|right|[[meta:Wikimedia servers|Wikimedia servers]], holding [[terabytes]] of text and images.&lt;ref&gt;{{cite web|url=http://meta.wikimedia.org/wiki/Mirroring_Wikimedia_project_XML_dumps|title=Mirroring Wikimedia project XML dumps|date=2013-05-20|work=|publisher=Meta-Wiki|accessdate=2013-05-20|quote=All dumps currently hosted: about 27TB and growing, as of Jan 2012.|archiveurl=http://meta.wikimedia.org/w/index.php?title=Mirroring_Wikimedia_project_XML_dumps&amp;oldid=5275446|archivedate=2013-05-20|deadurl=no}}&lt;/ref&gt;]]
&lt;!--[[File:Brno - Masaryk University Campus VI.jpg|thumb|right|[[Masaryk University]], Czech Republic, is mirroring&lt;ref&gt;{{cite web |url=http://ftp.fi.muni.cz/pub/wikimedia/ |title= FTP server Fakulty informatiky  |date=2013-05-20 |work= |publisher=Fakulta informatiky Masarykovy univerzity |accessdate=2013-05-20 |quote= |archiveurl=http://wayback.archive.org/web/20140216231950/http://ftp.fi.muni.cz/pub/wikimedia |archivedate=16 February 2014 |deadurl=no}}&lt;/ref&gt; [[meta:Data dumps|Wikimedia dumps]].]]--&gt;
[[File:5.25"-Diskette.jpg|thumb|right|This page, a catalogue of catalogues of all human knowledge, is only {{PAGESIZE:User:Emijrp/All Human Knowledge}} bytes in size. It can be stored on a 5¼-inch [[floppy disk]].]]
[[File:Wikimedia projects edits counter 2010-04-16.png|thumb|right|The 1 billionth edit for all Wikimedia projects took place on April 16, 2010. (&lt;span class="plainlinks"&gt;[https://tools.wmflabs.org/wmcounter/ See counter]&lt;/span&gt;)]]
[[File:The Sounds of Earth - GPN-2000-001976.jpg|thumb|right|The [[Voyager Golden Record]]s are [[phonograph record]]s ([https://www.youtube.com/watch?v=qTpCD2Xvh_s&amp;list=PL960EB8506C0938C7 listen in YouTube]) which were included aboard both [[Voyager program|Voyager spacecraft]] launched in 1977. They contain sounds and images selected to portray the diversity of life and culture on Earth, and are intended for any intelligent [[extraterrestrial life]] form, or for future humans, who may find them.]]
[[File:Milky Way IR Spitzer.jpg|thumb|right|Imagine a [[universe]] in which [[List of potential habitable exoplanets|every planet]] shares in [[Encyclopædia Galactica|the sum of all knowledge]].]]
[[File:200908261632-Special event-Knowledge as a social good and the Library of Babel.ogg|thumb|right|&lt;span class="plainlinks"&gt;''[https://wikimania2009.wikimedia.org/wiki/El_conocimiento_como_bien_social_y_la_Biblioteca_de_Babel Knowledge as a social good and the Library of Babel]'' in Wikimanía 2009. ([https://www.youtube.com/watch?v=anSA7tqrwnM Watch in YouTube])&lt;/span&gt;]]

The idea of compiling '''all human knowledge''' in a [[Wikipedia|single work]], although [[User:Emijrp/Wikipedia Archive|not in a single place]],&lt;ref&gt;{{cite web|title=Editing will temporarily pause for a failover test|url=https://blog.wikimedia.org/2017/04/18/codfw-temporary-editing-pause/|publisher=Wikimedia Blog|date=2017-04-18|accessdate=2017-04-18}}&lt;/ref&gt; is highly seductive. In this project, we attempt to study how many articles are needed to cover the sum of all human knowledge. &lt;!-- wpenwdstats --&gt;As of {{CURRENTDAY}} {{CURRENTMONTHNAME}} {{CURRENTYEAR}}, English Wikipedia has {{NUMBEROFARTICLES}} articles and [[Wikidata]] includes {{formatnum:27721774}} items.&lt;ref&gt;{{cite web|url=https://www.wikidata.org/wiki/Special:Statistics | title=Special:Statistics | publisher=Wikidata | date=2017-07-03 | accessdate=2017-07-03 | quote=Content pages: {{formatnum:27721774}}}}&lt;/ref&gt;&lt;!-- /wpenwdstats --&gt; This page, still in expansion, estimates that the '''total notable articles''' figure is over '''[[#Summary|&lt;!-- ahk --&gt;{{formatnum:104701020}}&lt;!-- /ahk --&gt;]]'''. At current creation rate, 8,000 new items per day,&lt;ref&gt;{{cite web|title=Other Projects Statistics Wikidata|url=https://stats.wikimedia.org/wikispecial/EN/TablesWikipediaWIKIDATA.htm}}&lt;/ref&gt; '''Wikidata singularity''' will occur in the [[2040s]], in the same date range of [[technological singularity]].&lt;ref&gt;Despite [[#New knowledge|new knowledge]] is discovered or created every year and the total estimate increases, technology improvements, broad [[Internet penetration]] and [[artificial intelligence]] is expected to increase the item creation rate too.&lt;/ref&gt; It will be the first time in history that all human knowledge is stored in a [[Machine-readable data|machine-readable]] format and ready to be consumed, understood and used by computers or any device.

{{pull quote|This is a work that cannot be completed except by a society of men of letters and skilled workmen, each working separately on his own part, but all bound together solely by their zeal for the best interests of the human race and a feeling of mutual good will.|author=[[Denis Diderot]]|source=''[[Encyclopédie|L'Encyclopédie]]'' (1751–1766)}}

Many individuals devoted their lives to different efforts of knowledge compilation and preservation. Some inspiring cases are [[Vivian Maier]], a [[nanny]] that took [[Finding Vivian Maier|150,000 photographs]] during her lifetime primarily of people and architecture;&lt;ref&gt;{{cite web|title=Vivian Maier|url=http://www.vivianmaier.com}}&lt;/ref&gt; [[Paul Mawhinney]], who archived a copy of every sold album growing a 3 million vinyl collection;&lt;ref&gt;{{cite web|title=The Archive|url=https://vimeo.com/1546186|date=2009}}&lt;/ref&gt; [[Henry Spencer]], a computer scientist that preserved over 2 million [[Usenet]] messages onto magnetic tapes&lt;ref&gt;{{cite web|title=Usenet Archive of UTZOO Tapes|url=https://archive.org/details/utzoo-wiseman-usenet-archive|date=2001-12-11}}&lt;/ref&gt; or [[Marion Stokes]], who recorded hundreds of thousands of hours of television news footage spanning 35 years.&lt;ref&gt;{{cite web|title=A Dream to Preserve TV News, on the Road to Realization... with Your Help|url=https://blog.archive.org/2013/11/22/a-dream-to-preserve-tv-news-on-the-road-to-realization-with-your-help/|date=2013-11-22}}&lt;/ref&gt;

{{pull quote|Like all persons of the [[The Library of Babel|Library]], I have traveled in my youth; I have wandered in search of a book, perhaps the [[#Summary|catalogue of catalogues]]...|author=[[Jorge Luis Borges]]|source=''[[The Library of Babel]]'' (1941)}}

Before Wikipedia, there were many attemps to compile all human knowledge in a single work. Some examples sorted by date include:
{{div col|2}}
* [[Library of Alexandria]] (3rd century BC) in [[Egypt]]
* ''[[Natural History (Pliny)|Naturalis Historia]]'' (AD 77–79) by [[Pliny the Elder]]
* ''[[Etymologiae]]'' (7th century) by [[Isidore of Seville]]
* ''De universo'' (9th century) by [[Rabanus Maurus]]
* ''[[Speculum Maius]]'' (13th century) by [[Vincent of Beauvais]]
* ''[[Yongle Encyclopedia]]'' (1403–1408) by [[Ming dynasty]]
* ''[[Bibliotheca universalis]]'' (1545–1549) by [[Conrad Gessner]]
* The &lt;span class="plainlinks"&gt;[http://en.wikipedia.org/w/index.php?title=Gottfried_Leibniz&amp;oldid=444357698#Librarian abstracting and indexing]&lt;/span&gt; project (17th century) by [[Gottfried Leibniz]]
* ''[[L'Encyclopédie]]'' (1751–1772) by [[Denis Diderot|Diderot]] and [[Jean le Rond d'Alembert|d'Alembert]]
* &lt;!--''[[The Complete Compendium of Universal Knowledge]]'' (1895) by [[William Ralston Balch]], --&gt;
* [[Mundaneum]] (1910) by [[Paul Otlet]] and [[Henri La Fontaine]]
* ''[[Encyclopædia Britannica]]'' (1911)
* And more recently [[Interpedia]] (1993) by [[Rick Gates (Internet pioneer)|Rick Gates]], [[Internet Archive]] (1996) by [[Brewster Kahle]] and [[Wikidata]] (2012)
{{div col end}}

Also, hypothetical cases exist:
* ''[[Encyclopædia Galactica]]'' (1980) by [[Carl Sagan]] in ''[[Cosmos]]''
* [[World Brain|Permanent World Encyclopaedia]] (1936–1938) by [[H. G. Wells]]
* [[Memex]] (1945) by [[Vannevar Bush]].

There are imaginary examples:
* "The Universal Library" (1901) by [[Kurd Lasswitz]]
* "The Total Library" essay and ''[[The Library of Babel]]'' (1941) by [[Jorge Luis Borges]]
* ''[[Encyclopædia Galactica]]'' (1942) in "Foundation" by [[Isaac Asimov]]
* The [[Akashic records]].

Furthermore, there are thousands of [[List of national archives|archives]], [[List of national and state libraries|libraries]] and [[List of museums|museums]] all over the world preserving human knowledge in several formats: [[book]]s, [[manuscript]]s, [[journal]]s, [[newspaper]]s, [[magazine]]s, sound and music [[sound recording and reproduction|recordings]], [[video]]s, play-scripts, [[patent]]s, [[database]]s, [[map]]s, [[Postage stamp|stamps]], [[Printing|prints]], [[drawing]]s and more. Some of the [[List of largest libraries|largest ones]] are: the [[British Library]] in the [[United Kingdom]] (170 million items&lt;ref name="bl_ff"&gt;{{cite web | url=http://www.bl.uk/learning/cresearch/skills/using1/usingthebritishlibrary.html | title=Using the British Library | accessdate=2015-02-24 | quote=The British Library is the UK’s national library and one of the world’s leading research libraries. Our collection of around 170 million items includes some of the most iconic treasures from a variety of cultures and includes books, manuscripts, maps, newspapers, patents and sound recordings. | archiveurl=https://web.archive.org/web/20141018015328/http://www.bl.uk/learning/cresearch/skills/using1/usingthebritishlibrary.html | archivedate=2014-10-18 | deadurl=no}}&lt;/ref&gt;), the [[Library of Congress]] in the [[United States]] (155 million items&lt;ref&gt;[http://www.loc.gov/about/generalinfo.html#2012_at_a_glance 2012 At A Glance]&lt;/ref&gt;), the [[Russian State Library]] in [[Russia]] (43 million items&lt;ref name=rsl&gt;{{cite web |url=http://www.rsl.ru/en |title=Russian State Library |last1= |first1= |last2= |first2= |date= |work=Official library website |publisher= |accessdate=20 November 2010}}&lt;/ref&gt;), the [[National Diet Library]] in [[Japan]] (35 million items&lt;ref name="ndl"&gt;{{cite web|date=2008|url=http://www.ndl.go.jp/en/publication/annual/2008/2008trends.pdf|title=Annual Report of the National Diet Library. Trends of the past year|accessdate=2010-07-15 |archiveurl=http://www.webcitation.org/667v7EYXv|archivedate=2012-03-13}}&lt;/ref&gt;), the [[National Library of China]] (31 million items&lt;ref&gt;{{cite web|date=2010|url=http://www.nlc.gov.cn/newen/newVisitUs/nlcrs/|title=National Library of China - Visit Us. Overview of Library Collections|accessdate=2012-09-28}}&lt;/ref&gt;) and the [[Bibliothèque nationale de France]] (31 million items&lt;ref&gt;{{cite web | url=http://www.bnf.fr/en/bnf/presentation_space/a.abc_of_the_collections.html#SHDC__Attribute_BlocArticle7BnF | title=BnF - ABC of the collections: N for Numerous | date=2011-06-23 | accessdate=2015-02-24 | archiveurl=http://www.webcitation.org/65oi4Cksu | archivedate=2012-02-29}}&lt;/ref&gt;).

{{pull quote|There is no practical obstacle whatever now to the creation of an efficient index to all human knowledge, ideas and achievements, to the creation, that is, of a complete planetary memory for all mankind.|author=[[H. G. Wells]]|source=''[[World Brain|World Brain: The Idea of a Permanent World Encyclopaedia]]'' (1937)}}

This project is focused in those entities which are [[Wikipedia:Notability|notable]] and deserve an article in Wikipedia. For completeness of sister projects, see ''[[#Sister projects|§ Sister projects]]''. For an estimate about lost knowledge, see ''[[#Destroyed knowledge|§ Destroyed knowledge]]'' and [[Wikipedia:There is a deadline]]. There is available a userbox {{tl|User All Human Knowledge}} and a shortcut [[WP:AHK]].

'''You are welcome to improve this page; [[Wikipedia:Be bold|be bold]]!'''
&lt;!--
[[File:Size of English Wikipedia in August 2010 (L).svg|thumb|center|650px|[[English Wikipedia]] size in August 2010, if printed (15,887 MB of text). Now it is much bigger.]]
--&gt;
__TOC__
{{-}}

== Summary ==

&lt;!-- summary --&gt;{| class="wikitable sortable plainlinks"
! width="100px" | Topic
! width="150px" | Subtopic
! Wikidata
! Estimate
! Shortcuts
|-
| rowspan=8 | [[#Arts|Arts]]
|-
| &lt;li&gt;[[#Architecture|Architecture]]
{{User:Emijrp/AHKsummaryrow|wikidata=1002450|estimate=1330273}}
| [[#Aquaria|Aquaria]], [[#Aqueducts|Aqueducts]], [[#Bridges|Bridges]], [[#Bullrings|Bullrings]], [[#Castles|Castles]], [[#Cemeteries|Cemeteries]], [[#Fountains|Fountains]], [[#Gates|Gates]], [[#Horse racing venues|Horse racing venues]], [[#Hospitals|Hospitals]], [[#Hotels|Hotels]], [[#Houses|Houses]], [[#Lighthouses|Lighthouses]], [[#Military bases|Military bases]], [[#Movie theaters|Movie theaters]], [[#Mines|Mines]], [[#Observatories|Observatories]], [[#Palaces|Palaces]], [[#Places of worship|Places of worship]], [[#Power stations|Power stations]], [[#Prisons|Prisons]], [[#Research stations|Research stations]], [[#Reservoirs|Reservoirs]], [[#Dams|Dams]], [[#Schools|Schools]], [[#Shopping malls|Shopping malls]], [[#Skyscrapers|Skyscrapers]], [[#Stadiums|Stadiums]], [[#Towers|Towers]], [[#Urbanism|Urbanism]], [[#Theatres|Theatres]], [[#Tunnels|Tunnels]], [[#Universities|Universities]], [[#Watermills|Watermills]], [[#Weather stations|Weather stations]], [[#Windmills|Windmills]], [[#Zoos|Zoos]]
|-
| &lt;li&gt;[[#Monuments|Monuments]]
{{User:Emijrp/AHKsummaryrow|wikidata=961398|estimate=2048568}}
| [[#Monuments|See table]]
|-
| &lt;li&gt;[[#Cinema and television|Cinema and television]]
{{User:Emijrp/AHKsummaryrow|wikidata=437133|estimate=2832654}}
| [[#Cinema|Cinema]], [[#Television|Television]], [[#Radio|Radio]], [[#Films|Films]], [[#Documentaries|Documentaries]], [[#TV channels|TV channels]], [[#TV programs|TV programs]], [[#TV stations|TV stations]], [[#Episodes|Episodes]], [[#TV episodes|TV episodes]], [[#Radio stations|Radio stations]]
|-
| &lt;li&gt;[[#Crafts|Crafts]]
{{User:Emijrp/AHKsummaryrow|wikidata=1138|estimate=2138}}
| [[#Gardening|Gardening]], [[#Gemology|Gemology]], [[#Jewelry|Jewelry]], [[#Home improvement|Home improvement]], [[#Origami|Origami]], [[#Toys|Toys]]
|-
| &lt;li&gt;[[#Literature|Literature]]
{{User:Emijrp/AHKsummaryrow|wikidata=1509551|estimate=25606419}}
| [[#Codices|Codices]], [[#Incunabulas|Incunabulas]], [[#Manuscripts|Manuscripts]], [[#Speeches|Speeches]], [[#Academic literature|Academic literature]], [[#Bibliographies|Bibliographies]], [[#Comics|Comics]], [[#Dictionaries|Dictionaries]], [[#Encyclopedias|Encyclopedias]], [[#Fictional entities|Fictional entities]], [[#Magazines|Magazines]], [[#Newspapers|Newspapers]], [[#Novels|Novels]], [[#Poetry|Poetry]], [[#Theatre|Theatre]]
|-
| &lt;li&gt;[[#Performing arts|Performing arts]]
{{User:Emijrp/AHKsummaryrow|wikidata=305816|estimate=2010372}}
| [[#Dance|Dance]], [[#Music|Music]]
|-
| &lt;li&gt;[[#Visual arts|Visual arts]]
{{User:Emijrp/AHKsummaryrow|wikidata=366803|estimate=366803}}
| [[#Calligraphy|Calligraphy]], [[#Drawing|Drawing]], [[#Fashion|Fashion]], [[#Painting|Painting]], [[#Photography|Photography]], [[#Printmaking|Printmaking]], [[#Sculpture|Sculpture]], [[#Textile arts|Textile arts]]
|-
| rowspan=9 | [[#Geography|Geography]]
|-
| &lt;li&gt;[[#Africa|Africa]]
{{User:Emijrp/AHKsummaryrow|wikidata=16166|estimate=85071}}
| [[#Africa|See table]]
|-
| &lt;li&gt;[[#Asia|Asia]]
{{User:Emijrp/AHKsummaryrow|wikidata=820789|estimate=1121035}}
| [[#Asia|See table]]
|-
| &lt;li&gt;[[#Europe|Europe]]
{{User:Emijrp/AHKsummaryrow|wikidata=127531|estimate=230681}}
| [[#Europe|See table]]
|-
| &lt;li&gt;[[#North America|North America]]
{{User:Emijrp/AHKsummaryrow|wikidata=14603|estimate=170900}}
| [[#North America|See table]]
|-
| &lt;li&gt;[[#South America|South America]]
{{User:Emijrp/AHKsummaryrow|wikidata=12493|estimate=16570}}
| [[#South America|See table]]
|-
| &lt;li&gt;[[#Oceania|Oceania]]
{{User:Emijrp/AHKsummaryrow|wikidata=1282|estimate=1637}}
| [[#Oceania|See table]]
|-
| &lt;li&gt;[[#Antarctica|Antarctica]]
{{User:Emijrp/AHKsummaryrow|wikidata=0|estimate=20400}}
| [[#Antarctica|See table]]
|-
| &lt;li&gt;[[#Physical geography|Physical geography]]
{{User:Emijrp/AHKsummaryrow|wikidata=1247808|estimate=3255166}}
| [[#Continents|Continents]], [[#Canals|Canals]], [[#Caves|Caves]], [[#Deserts|Deserts]], [[#Forests|Forests]], [[#Glaciers|Glaciers]], [[#Islands|Islands]], [[#Lakes|Lakes]], [[#Mountains|Mountains]], [[#Rivers|Rivers]], [[#Seas|Seas]]
|-
| [[#History|History]]
| &lt;li&gt;[[#History|History]]
{{User:Emijrp/AHKsummaryrow|wikidata=204112|estimate=371888}}
| [[#Disasters|Disasters]], [[#Election|Election]], [[#Revolutions|Revolutions]], [[#Sites|Sites]]
|-
| [[#GLAM|GLAM]]
| &lt;li&gt;[[#GLAM|GLAM]]
{{User:Emijrp/AHKsummaryrow|wikidata=41195|estimate=129262}}
| [[#Archives|Archives]], [[#Libraries|Libraries]], [[#Museums|Museums]]
|-
| rowspan=7 | [[#Science|Science]]
|-
| &lt;li&gt;[[#Astronomy|Astronomy]]
{{User:Emijrp/AHKsummaryrow|wikidata=140997|estimate=13890833}}
| [[#Universes|Universes]], [[#Voids|Voids]], [[#Superclusters|Superclusters]], [[#Galaxy clusters|Galaxy clusters]], [[#Galaxies|Galaxies]], [[#Star clusters|Star clusters]], [[#Quasars|Quasars]], [[#Stars|Stars]], [[#Multiplanetary systems|Multiplanetary systems]], [[#Exoplanets|Exoplanets]], [[#Dwarf planets|Dwarf planets]], [[#Free-floating planets|Free-floating planets]], [[#Comets|Comets]], [[#Asteroids|Asteroids]], [[#Planet surface features|Planet surface features]], [[#Space exploration|Space exploration]]
|-
| &lt;li&gt;[[#Biology|Biology]]
{{User:Emijrp/AHKsummaryrow|wikidata=3443454|estimate=10882502}}
| [[#Bacteria|Bacteria]], [[#Human|Human]], [[#Genes|Genes]], [[#Individual animals|Individual animals]], [[#Proteins|Proteins]], [[#Species|Species]], [[#Viruses|Viruses]]
|-
| &lt;li&gt;[[#Chemistry and physics|Chemistry and physics]]
{{User:Emijrp/AHKsummaryrow|wikidata=711667|estimate=6007435}}
| [[#Chemistry|Chemistry]], [[#Physics|Physics]]
|-
| &lt;li&gt;[[#Health|Health]]
{{User:Emijrp/AHKsummaryrow|wikidata=14182|estimate=33000}}
| [[#Diseases|Diseases]], [[#Disorders|Disorders]], [[#Drugs|Drugs]]
|-
| &lt;li&gt;[[#Mathematics|Mathematics]]
{{User:Emijrp/AHKsummaryrow|wikidata=27524|estimate=227512}}
| [[#Areas|Areas]], [[#Numbers|Numbers]], [[#Prime numbers|Prime numbers]], [[#Integer sequences|Integer sequences]]
|-
| &lt;li&gt;[[#Planetary science|Planetary science]]
{{User:Emijrp/AHKsummaryrow|wikidata=11986|estimate=450935}}
| [[#Lithostratigraphy|Lithostratigraphy]], [[#Fossils|Fossils]], [[#Geologic Time Scale|Geologic Time Scale]], [[#Meteorites|Meteorites]], [[#Meteorology|Meteorology]], [[#Rocks types|Rocks types]]
|-
| [[#Society|Society]]
| &lt;li&gt;[[#Society|Society]]
{{User:Emijrp/AHKsummaryrow|wikidata=3999403|estimate=27486040}}
| [[#Biography|Biography]], [[#Business|Business]], [[#Culture|Culture]], [[#Education|Education]], [[#Gastronomy|Gastronomy]], [[#Law|Law]], [[#Language|Language]], [[#Organizations|Organizations]], [[#Philosophy|Philosophy]], [[#Politics|Politics]], [[#Religion|Religion]], [[#Mythology|Mythology]], [[#Sports|Sports]]
|-
| [[#Technology|Technology]]
| &lt;li&gt;[[#Technology|Technology]]
{{User:Emijrp/AHKsummaryrow|wikidata=577974|estimate=577875}}
| [[#Discoveries|Discoveries]], [[#Inventions|Inventions]], [[#Hardware|Hardware]], [[#Internet|Internet]], [[#Software|Software]], [[#Transport|Transport]], [[#Weapons|Weapons]]
|-
| [[#Special pages|Special pages]]
| &lt;li&gt;[[#Special pages|Special pages]]
{{User:Emijrp/AHKsummaryrow|wikidata=5545051|estimate=5545051}}
| [[#Categories|Categories]], [[#Disambiguations|Disambiguations]], [[#Lists|Lists]], [[#Portals|Portals]], [[#Templates|Templates]]
|-
{{User:Emijrp/AHKsummarytotal|wikidata=21542506|estimate=104701020}}
|}&lt;!-- /summary --&gt;
&lt;!--
This table compares coverage between Wikipedia editions using Wikidata as a central repository of "all" human knowledge.

{| class="wikitable sortable" style="font-size: 80%;"
! Site !! [[#People|People]] !! [[#Species|Species]] !! [[#Geography|Geography]] !! [[#Architecture|Architecture]] !! [[#History|History]] !! [[#Chemistry|Chemistry]] !! [[#Film|Film]] !! [[#Urbanism|Urbanism]] !! [[#Astronomy|Astronomy]] !! List !! Disamb !! Total !! Updated
|-
| [[Wikidata]] || 2,932,736 || 1,997,207 || 1,949,513 || 579,051 || 426,879 || 28,295 || 200,912 || 342,666 || 129,760 || 216,080 || 872,174 || 15,862,673 || [[d:Wikidata:Statistics/Wikipedia|2015-10-25]]
|-
| [[English Wikipedia|enwiki]] || 1,325,136 || 315,294 || 563,681 || 237,432 || 201,216 || 19,682 || 119,346 || 37,541 || 26,683 || 105,702 || 302,981 || 5,045,856 || [[d:Wikidata:Statistics/Wikipedia|2016-01-10]]
|-
| [[German Wikipedia|dewiki]] || 625,741 || 44,833 || 202,233 || 90,874 || 380,177 || 8,517 || 34,306 || 18,901 || 12,805 || 63,316 || 235,680 || 2,010,767 || [[d:Wikidata:Statistics/Wikipedia|2016-10-10]]
|-
| [[French Wikipedia|frwiki]] || 463,655 || 98,892 || 226,895 || 71,812 || 115,066 || 6,254 || 52,946 || 20,598 || 23,515 || 37,536 || 105,996 || 1 734 576 || [[d:Wikidata:Statistics/Wikipedia|2016-02-25]]
|}
--&gt;

== Arts ==

The '''[[arts]]''' are composed of many endeavors (or artforms) united by their employment of the human creative impulse.

{{main|Outline of arts|Elements of art|Principles of art}}

=== Architecture ===

'''[[Architecture]]'''  ([[Latin]] ''[[wikt:architectura#Latin|architectura]]'', from the Greek [[wikt:ἀρχιτέκτων|ἀρχιτέκτων]] – arkhitekton, from [[wikt:ἀρχι-|ἀρχι-]] "chief" and [[wikt:τέκτων|τέκτων]] "builder, carpenter, mason")  is both the process and product of [[planning]], [[Design|designing]] and [[construction]]. Architectural works, in the material form of [[Building|buildings]],  are often perceived as cultural and political symbols and as [[work of art|works of art]]. Historical civilizations are often identified with their surviving architectural achievements.

{{main|Outline of architecture|List of buildings and structures}}
{{category see also|Architecture lists|Lists of buildings and structures}}

&lt;gallery mode="packed-hover"&gt;
File:Aqueduct of Segovia 08.jpg|[[Aqueduct of Segovia]], {{flag|Spain}}
File:Castle Neuschwanstein.jpg|[[Neuschwanstein Castle|Neuschwanstein]], {{flag|Germany}}
File:Duomo Firenze.jpg|[[Florence Cathedral]], {{flag|Italy}}
File:Hoshi Ryokan.jpg|[[Hoshi Ryokan]], {{flag|Japan}}
File:A coruna torre de hercules sunset edit.jpg|[[Tower of Hercules]], {{flag|Spain}}
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="200px" | Related pages
! Wikidata
! Estimate
! References 
|-
| [[Aquaria]]{{anchor|Aquaria}}
| &lt;li&gt;[[List of aquaria]]
{{User:Emijrp/AHKrow|P31=Q2281788|wikidata=257|estimate=200}}
| According to [[Vancouver Aquarium]] there are 200+ aquaria worldwide.&lt;ref&gt;{{cite web |url=http://vanaqua.org/ask_us/aquariumhistory.html |title=History of the Aquarium |date=2013-05-20 |work= |publisher=Vancouver Aquarium |accessdate=2013-05-20 |quote=When the Vancouver Aquarium opened in 1956, there were five aquariums in North America, of which Vancouver was the fifth. Today, there are approximately 48, only two of which are in Canada. Worldwide, the number of aquariums has grown to over 200. |archiveurl=http://web.archive.org/web/20090123080448/http://vanaqua.org/ask_us/aquariumhistory.html |archivedate=2009-01-23 |deadurl=yes}}&lt;/ref&gt;
|-
| [[Aqueduct]]s{{anchor|Aqueducts}}
| &lt;li&gt;[[List of aqueducts]]
{{User:Emijrp/AHKrow|P31=Q474|wikidata=332|estimate=}}
| Total number of aqueducts is unknown.
|-
| [[Bridge]]s{{anchor|Bridges}}
| &lt;li&gt;[[List of bridges]]
{{User:Emijrp/AHKrow|P31=Q12280|wikidata=21835|estimate=}}
|  Total number of bridges is unknown. A quick estimate is one bridge per river.&lt;ref&gt;{{cite web |url=http://nationalbridges.com |title=National Bridge Inventory Database Search |date=2013-05-20 |work= |publisher=Alexander Svirsky |accessdate=2013-05-20 |quote= |archiveurl= |archivedate= |deadurl=no}}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=http://www.bridgeforum.org/dir/collapse/all.html|title=Bridge Failure Database |date=2013-05-20 |work= |publisher=BridgeForum |accessdate=2013-05-20 |quote= |archiveurl=http://www.webcitation.org/68DFhSNQg |archivedate=2012-06-06 |deadurl=no}}&lt;/ref&gt;
|-
| [[Bullring]]s{{anchor|Bullrings}}
| &lt;li&gt;[[List of bullrings]]
{{User:Emijrp/AHKrow|P31=Q1193438|wikidata=148|estimate=}}
| Total number of bullrings is unknown.
|-
| [[Castle]]s{{anchor|Castles}}
| &lt;li&gt;[[List of castles]]
{{User:Emijrp/AHKrow|P31=Q23413|wikidata=17614|estimate=}}
| Total number of castles is unknown.
|-
| [[Cemetery|Cemeteries]]{{anchor|Cemeteries}}
| &lt;li&gt;[[List of cemeteries]]
{{User:Emijrp/AHKrow|P31=Q39614|wikidata=101173|estimate=}}
| Total number of cemeteries is unknown.
|-
| [[Fountain]]s{{anchor|Fountains}}
| &lt;li&gt;[[List of fountains]]
{{User:Emijrp/AHKrow|P31=Q483453|wikidata=1925|estimate=}}
| Total number of fountains is unknown.
|-
| [[Gate|Gates]]{{anchor|Gates}}
| &lt;li&gt;[[List of gates]]
{{User:Emijrp/AHKrow|P31=Q53060|wikidata=1446|estimate=}}
| Total number of gates is unknown.
|-
| [[Horse racing venue]]s{{anchor|Horse racing venues}}
| &lt;li&gt;[[List of horse racing venues]]
{{User:Emijrp/AHKrow|P31=Q11822917|wikidata=336|estimate=}}
| Total number of horse racing venues is unknown.
|-
| [[Hospital]]s{{anchor|Hospitals}}
| &lt;li&gt;[[Lists of hospitals]]
{{User:Emijrp/AHKrow|P31=Q16917|wikidata=9610|estimate=16500}}
| According to [[Cybermetrics Lab]] there are 16,500 hospitals worldwide.&lt;ref&gt;{{cite web |url=http://hospitals.webometrics.info |title=Ranking Web of World Hospitals |date=2015 |work= |publisher=Cybermetrics Lab |accessdate=2015-02-24 |quote=The new edition is built from data collected in January 2015 for more than 16 500 Hospitals websites from all over the World.}}&lt;/ref&gt;
|-
| [[Hotel]]s{{anchor|Hotels}}
| &lt;li&gt;[[List of hotels]]
{{User:Emijrp/AHKrow|P31=Q27686|wikidata=11606|estimate=180000}}
| According to sources there are 180,000-400,000+ hotels worldwide.&lt;ref&gt;{{cite web |url=http://www.tnooz.com/2012/03/26/news/how-many-hotels-in-the-world-are-there-anyway-booking-com-keeps-adding-them/ |title=How many hotels in the world are there anyway? Booking.com keeps adding them |date=2013-05-22 |work= |publisher=Dennis Schaal |accessdate=2013-05-22 |quote=Booking.com says it offers 202,842 hotels globally. STR Global estimates that there are 187,000 hotels, offering 17.5 million guest rooms, around the globe. Other less-than-scientific guesstimates put the number of hotels around the world at around 400,000, with an additional 100,000 or so if you include B&amp;Bs and hostels etc. In a similar vein, one of the global distribution systems informally uses 500,000 as a guide to the number of hotels in the world, although this number would exclude hostels, guest houses and motels. |archiveurl=http://www.webcitation.org/6GnpKQ41m |archivedate=2013-05-22 |deadurl=no}}&lt;/ref&gt;
|-
| [[House]]s{{anchor|Houses}}
| &lt;li&gt;[[List of houses]] ([[:Category:Houses|cat]])
{{User:Emijrp/AHKrow|P31=Q3947|wikidata=174252|estimate=}}
| Total number of notable houses is unknown.
|-
| [[Lighthouse]]s{{anchor|Lighthouses}}
| &lt;li&gt;[[List of lighthouses]]
{{User:Emijrp/AHKrow|P31=Q39715|wikidata=4822|estimate=16300}}
| According to [[Lighthouse Directory]] there are 16,300+ lighthouses worldwide.&lt;ref&gt;{{cite web |url=http://www.unc.edu/~rowlett/lighthouse/ |title=The Lighthouse Directory |date=2013-05-20 |work= |publisher=Russ Rowlett and the University of North Carolina at Chapel Hill |accessdate=2013-05-20 |quote=Welcome to the Lighthouse Directory, providing information and links for more than 16,300 of the world's lighthouses. |archiveurl=http://www.webcitation.org/6GkkfKnkt |archivedate=2013-05-20 |deadurl=no}}&lt;/ref&gt;
|-
| [[Military base]]s{{anchor|Military bases}}
| &lt;li&gt;[[Lists of military bases]]
{{User:Emijrp/AHKrow|P31=Q245016|wikidata=2747|estimate=}}
| Total number of military bases is unknown.
|-
| [[Movie theater]]s{{anchor|Movie theaters}}
| &lt;li&gt;[[List of movie theaters]] ([[:Category:Lists of cinemas|cat]]) 
{{User:Emijrp/AHKrow|P31=Q41253|wikidata=1277|estimate=}}
| Total number of movie theaters is unknown.
|-
| [[Mining|Mines]]{{anchor|Mines}}
| &lt;li&gt;[[List of mines]]
{{User:Emijrp/AHKrow|P31=Q820477|wikidata=6628|estimate=}}
| Total number of mines is unknown.
|-
| [[Observatory|Observatories]]{{anchor|Observatories}}
| &lt;li&gt;[[List of observatories]]
{{User:Emijrp/AHKrow|P31=Q62832|wikidata=1302|estimate=}}
| Total number of observatories is unknown.
|-
| [[Palace]]s{{anchor|Palaces}}
| &lt;li&gt;[[List of palaces]]
{{User:Emijrp/AHKrow|P31=Q16560|wikidata=8109|estimate=}}
| Total number of palaces is unknown.
|-
| [[Place of worship|Places of worship]]{{anchor|Places of worship}}
| &lt;li&gt;[[List of places of worship]]
{{User:Emijrp/AHKrow|P31=Q1370598|wikidata=160250|estimate=}}
| Total number of places of worship is unknown. A quick estimate is one place of worship per settlement.

As of 2011, the Catholic Church had 3,068 churches of cathedral and co-cathedral status around the world.&lt;ref&gt;[[Lists of cathedrals]]&lt;/ref&gt; Estimations of churches worldwide range from 250,000&lt;ref&gt;{{cite web|url=http://www.quora.com/Catholicism/How-many-physical-Catholic-churches-are-there-in-the-world|title=Catholicism: How many physical Catholic churches are there in the world?}}&lt;/ref&gt; to 3,700,000,&lt;ref&gt;{{cite web|url=http://wiki.answers.com/Q/How_many_churches_are_there_in_the_world|title=How many churches are there in the world?}}&lt;/ref&gt; with 450,000 only in USA.&lt;ref&gt;{{cite web|url=http://www.reddit.com/r/atheism/comments/1i4k23/fun_fact_there_are_more_churches_450000_in_the/|title=Fun Fact: There are more churches (450,000) in the USA than there are convenience stores (146,341), fast food restaurants (160,000), and hotels/motels (46,295, not counting casino hotels) combined (352,636 total).}}&lt;/ref&gt; There are 2.5 million mosques in the world.&lt;ref&gt;{{cite web|url=http://www.ask.com/question/how-many-mosques-are-there-in-the-world|title=How Many Mosques Are There in the World?|accessdate=2014-08-06}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://wiki.answers.com/Q/How_many_Mosques_are_there_in_the_world|title=How many Mosques are there in the world?|accessdate=2014-08-06}}&lt;/ref&gt;
|-
| [[Power station]]s{{anchor|Power stations}}
| &lt;li&gt;[[List of power stations]] ([[:Category:Lists of power stations|cat]])
{{User:Emijrp/AHKrow|P31=Q159719|wikidata=6486|estimate=}}
| Total number of power stations is unknown.
|-
| [[Prison]]s{{anchor|Prisons}}
| &lt;li&gt;[[List of prisons]]
{{User:Emijrp/AHKrow|P31=Q40357|wikidata=2099|estimate=10000}}
| Total number of prisons is unknown. According to sources, there are 4,575 prisons in the United States and 1,029 in Russia.&lt;ref&gt;{{cite web|url=http://www.salon.com/2012/10/15/us_has_more_prisoners_prisons_than_any_other_country/|title=US has more prisoners, prisons than any other country|accessdate=2014-01-18}}&lt;/ref&gt; A rough estimate is 10,000 prisons worldwide.
|-
| [[Research station]]s{{anchor|Research stations}}
| &lt;li&gt;[[List of research stations]]
{{User:Emijrp/AHKrow|P31=Q195339|wikidata=183|estimate=}}
| Total number of research stations is unknown. (See [[Research stations in Antarctica]])
|-
| [[Reservoir]]s and [[dams]]{{anchor|Reservoirs|Dams}}
| &lt;li&gt;[[List of reservoirs and dams]]
{{User:Emijrp/AHKrow|P31=Q12323|wikidata=4903|estimate=40000}}
| According to [[International Rivers]], by 1997 there were 800,000 dams worldwide, 40,000 over {{convert|15|m|abbr=on}} high.&lt;ref&gt;{{cite web | url=http://ehp.niehs.nih.gov/qa/105-10focus/focus.html | title=Is it Worth a Dam? | publisher=Environmental Health Perspectives | date=1997 | accessdate=2013-05-20 | archiveurl=http://web.archive.org/web/20060517113007/http://www.ehponline.org/qa/105-10focus/focus.html | archivedate=2006-05-17 | deadurl=yes | quote=Worldwide, some 40,000 "large" dams (over 15 m high, according to the International Commission on Large Dams) and about 800,000 smaller ones have been constructed.}}&lt;/ref&gt; (See also [[User:Emijrp/Geonames/Reservoirs and dams|GeoNames database]])
|-
| [[School]]s{{anchor|Schools}}
| &lt;li&gt;[[List of schools by country]]
{{User:Emijrp/AHKrow|P31=Q3914|wikidata=110453|estimate=}}
| Total number of schools is unknown.
|-
| [[Shopping mall]]s{{anchor|Shopping malls}}
| &lt;li&gt;[[Lists of shopping malls]]
{{User:Emijrp/AHKrow|P31=Q11315|wikidata=4276|estimate=}}
| Total number of shopping malls is unknown.
|-
| [[Skyscraper]]s{{anchor|Skyscrapers}}
| &lt;li&gt;[[List of skyscrapers]]
{{User:Emijrp/AHKrow|P31=Q11303|wikidata=4054|estimate=94000}}
| According to [[SkyscraperPage]] there are 94,000+ skyscrapers worldwide.&lt;ref&gt;{{cite web |url=http://skyscraperpage.com |title=SkyscraperPage.com |date=2013-05-20 |work= |publisher= |accessdate=2013-05-20 |quote=93,962 Structures (2013), 89,160 Structures (2012), 72,609 Structures (2010) |archiveurl=http://www.webcitation.org/6GklNaQWL |archivedate=2013-05-20 |deadurl=no}}&lt;/ref&gt;
|-
| [[Stadium]]s{{anchor|Stadiums}}
| &lt;li&gt;[[List of lists of stadiums]]
{{User:Emijrp/AHKrow|P31=Q483110|wikidata=8430|estimate=11500}}
| According to [[World Stadiums]] there are 11,500+ stadiums worldwide. 689 in Africa, 1,200 in Asia, 286 in Central America, 4,268 in Europe, 527 in Middle East, 2,869 in North America, 284 in Oceania and 1,417 in South America.&lt;ref name="worldstadiums"&gt;{{cite web |url=http://www.worldstadiums.com/north_america/countries/united_states.shtml |title=Stadiums in the United States |date=2013-05-20 |work= |publisher=World Stadiums |accessdate=2013-05-20 |quote= |archiveurl=http://www.webcitation.org/680QBOITV |archivedate=2012-05-28 |deadurl=no}}&lt;/ref&gt;
|-
| [[Tower]]s{{anchor|Towers}}
| &lt;li&gt;[[List of towers]]
{{User:Emijrp/AHKrow|P31=Q12518|wikidata=12353|estimate=}}
| Total number of towers is unknown.
|-
| rowspan=3 | Urbanism{{anchor|Urbanism}}
| &lt;li&gt;[[List of streets]]
{{User:Emijrp/AHKrow|P31=Q79007|wikidata=273260|estimate=}}
| rowspan=3 | Total number of streets, squares and parks is unknown.
|-
| &lt;li&gt;[[List of squares]]
{{User:Emijrp/AHKrow|P31=Q174782|wikidata=6653|estimate=}}
|-
| &lt;li&gt;[[List of parks]]
{{User:Emijrp/AHKrow|P31=Q22698|wikidata=14835|estimate=}}
|-
| [[Theatre]]s{{anchor|Theatres}}
| &lt;li&gt;[[Lists of theatres]] ([[:Category:Lists of theatres|cat]]) 
{{User:Emijrp/AHKrow|P31=Q24354|wikidata=5159|estimate=}}
| Total number of theatres is unknown.
|-
| [[Tunnel]]s{{anchor|Tunnels}}
| &lt;li&gt;[[List of tunnels by location]]
{{User:Emijrp/AHKrow|P31=Q44377|wikidata=3470|estimate=}}
| Total number of tunnels is unknown. According to [[:es:Anexo:Túneles de España]], in Spain there are 400 road tunnels and 1700 railway tunnels.
|-
| [[University|Universities]]{{anchor|Universities}}
| &lt;li&gt;[[List of universities]]
{{User:Emijrp/AHKrow|P31=Q3918|wikidata=15054|estimate=20000}}
| According to [[Webometrics]] there are 20,000+ universities worldwide.&lt;ref&gt;{{cite web | url=http://www.webometrics.info | title=Ranking Web of World Universities | archiveurl=http://www.webcitation.org/68DbqsI7B | archivedate=2012-06-06 | deadurl=no}}&lt;/ref&gt;
|-
| [[Watermill]]s{{anchor|Watermills}}
| &lt;li&gt;[[List of watermills]]
{{User:Emijrp/AHKrow|P31=Q185187|wikidata=1325|estimate=}}
| Total number of watermills is unknown.
|-
| [[Weather station]]s{{anchor|Weather stations}}
| &lt;li&gt;[[List of weather stations]] ([[:Category:Meteorological stations|cat]])
{{User:Emijrp/AHKrow|P31=Q190107|wikidata=100|estimate=}}
| Total number of weather stations is unknown.
|-
| [[Windmill]]s{{anchor|Windmills}}
| &lt;li&gt;[[List of windmills]]
{{User:Emijrp/AHKrow|P31=Q38720|wikidata=2346|estimate=}}
| Total number of windmills is unknown.
|-
| [[Zoo]]s{{anchor|Zoos}}
| &lt;li&gt;[[List of zoos]]
{{User:Emijrp/AHKrow|P31=Q43501|wikidata=1342|estimate=1500}}
| According to sources there are 1,500+ zoos worldwide.&lt;ref&gt;{{cite web |url=http://www.greatbluemarble.com/Zoos.htm |title=Direct Links to Forty of the World's Great Zoos |date=2013-05-20 |work= |publisher= |accessdate=2013-05-20 |quote=It is estimated there are currently over 1,500 zoos worldwide. |archiveurl=http://www.webcitation.org/69hDyoxNV |archivedate=2012-08-05 |deadurl=no}}&lt;/ref&gt;
|-
| [[List of building types|Building types]]
| &lt;li&gt;[[List of building types]] 
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of building types is unknown.
|-
| [[Architectural style|Styles]] 
| &lt;li&gt;[[List of architectural styles]] 
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of architectural styles is unknown.
|-
| [[List of architecture awards|Awards]] 
| &lt;li&gt;[[List of architecture awards]] 
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of architecture awards is unknown.
|-
{{User:Emijrp/AHKrowtotal|wikidata=1002450|estimate=1330273}}
|}

Note: some of these items may overlap

{{for|libraries, museums, archives|#GLAM}}
{{for|transport infrastructure|#Transport}}

==== Monuments ====

A '''[[monument]]''' is a type of structure either explicitly created to commemorate a person or important event or which has become important to a social group as a part of their remembrance of historic times or cultural heritage, or simply as an example of historic architecture. 

{{see also|List of heritage registers|List of Sites of Community Importance by country|Wikipedia:WikiProject Historic sites}}
{{see also category|Heritage registers by country}}

&lt;gallery mode="packed-hover"&gt;
File:Theatre, Sabratha.JPG|[[Archaeological Site of Sabratha]], {{flag|Libya}}
File:SantaCruz-CuevaManos-P2210651b.jpg|[[Cueva de las Manos]], {{flag|Argentina}}
File:Angkor Wat.jpg|[[Angkor]], {{flag|Cambodia}}
File:The Castle and Charles Bridge, Prague - 7982.jpg|[[Historic Centre of Prague]], {{flag|Czech Republic}}
File:AhuTongariki.jpg|[[Rapa Nui National Park]], {{flag|Chile}}
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width=120px | Country 
! width=300px | Related pages
! Wikidata
! Estimate
! References 
|-
| {{flag|United Nations|name=Earth}}
| &lt;li&gt;[[Lists of World Heritage Sites]]
{{User:Emijrp/AHKrow|P1435=Q9259|wikidata=1672|estimate=1052}}
| As of July 2016, [[Table of World Heritage Sites by country|1052 sites are listed]]: 814 cultural, 203 natural, and 35 mixed properties, in 165 states parties.&lt;ref name="list"&gt;[http://whc.unesco.org/en/list//en/news/1049/en/list World Heritage List], UNESCO World Heritage Sites official sites.&lt;/ref&gt;&lt;ref name="New sites"&gt;[http://whc.unesco.org/en/news/1049 Sites in Germany and Italy bring to 19 the number of sites inscribed on the World Heritage List this year], UNESCO World Heritage Sites official sites.&lt;/ref&gt; According to the [[Table of World Heritage Sites by country|sites ranked by country]], [[Italy]] is home to the greatest number of World Heritage Sites with [[List of World Heritage Sites in Italy|51 sites]], followed by [[List of World Heritage Sites in China|China]] (50), [[List of World Heritage Sites in Spain|Spain]] (45), [[List of World Heritage Sites in France|France]] (42), [[List of World Heritage Sites in Germany|Germany]] (41), [[List of World Heritage Sites in India|India]] (35) and [[List of World Heritage Sites in Mexico|Mexico]] (34). UNESCO references each World Heritage Site with an identification number; however, new inscriptions often include previous sites now listed as part of larger descriptions. Consequently, the identification numbers exceed 1,200, even though there are fewer on the list.
|-
| {{flag|Albania}} 
| &lt;li&gt;[[List of Religious Cultural Monuments of Albania|Religious Cultural Monuments]] ([[:Category:Cultural Monuments of Albania|cat]]) 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=200}}
| According to sources there are 200 monuments.&lt;ref&gt;{{cite web|url=http://kshk.gov.al/index.php?fq=brenda&amp;gj=gj2&amp;kid=19|title=Religious buildings with the "Culture Monument" status|publisher=Republic of Albania National Committee for Cult|language=|accessdate=October 28, 2010|archiveurl=https://web.archive.org/web/20131023055927/http://kshk.gov.al/index.php?fq=brenda&amp;gj=gj2&amp;kid=19|archivedate=2013-10-23|deadurl=yes}}&lt;/ref&gt;
|-
| {{flag|Algeria}} 
| &lt;li&gt;[[List of monuments of Algeria|List of monuments]] ([[:fr:Liste des sites et monuments classés en Algérie|fr]]) 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=382}}
| According to WLM database there are 382 monuments.&lt;ref name="erfgoed-stats"&gt;[[commons:Commons:Monuments database/Statistics|Commons:Monuments database/Statistics]]&lt;/ref&gt;
|-
| {{flag|Andorra}} 
| &lt;li&gt;[[List of monuments of Andorra|List of monuments]] ([[:ca:Llista de monuments d'Andorra|ca]]) 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=126}}
| According to WLM database there are 126 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Antarctica}} 
| &lt;li&gt;[[List of monuments of Antarctica|List of monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=166}}
| According to WLM database there are 166 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Argentina}} 
| &lt;li&gt;[[List of National Historic Monuments of Argentina|List of Nat. Hist. Monuments]] ([[:Category:National Historic Monuments of Argentina|cat]]) 
{{User:Emijrp/AHKrow|P1435=Q1847467|wikidata=83|estimate=400}}
| According to WLM database there are 2,217 monuments.&lt;ref name="erfgoed-stats" /&gt; 400 are NHM.
|-
| {{flag|Armenia}} 
| &lt;li&gt;[[List of monuments in Armenia|List of monuments]] ([[:commons:Commons:Lists of European Monuments/Armenia|commons]]) 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=24254}}
| According to WLM database there are 24,254 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Aruba}} 
| &lt;li&gt;[[List of monuments of Aruba|List of monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| rowspan=2 | {{flag|Australia}} 
| &lt;li&gt;[[Register of the National Estate]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=13000}}
| rowspan=2 | Total number of monuments is unknown. According to sources there are 6,000 war memorials.&lt;ref&gt;{{cite web |url=http://www.msk.id.au/memorials2/default.htm |title= War Memorials in Australia |date=2006 |work= |publisher=Michael Southwell-Keely |accessdate=2013-05-20 |quote= |archiveurl=https://web.archive.org/web/20130424133340/http://www.msk.id.au/memorials2/default.htm |archivedate=2013-04-24 |deadurl=yes}}&lt;/ref&gt;
|-
| &lt;li&gt;[[List of war memorials in Australia|War memorials]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=6000}}
|-
| {{flag|Austria}} 
| &lt;li&gt;[[Denkmalgeschütztes Objekt]] ([[:de:Denkmalgeschützte Objekte in Österreich|de]]) 
{{User:Emijrp/AHKrow|P1435=Q1188447|wikidata=5661|estimate=37589}}
| According to WLM database there are 37,589 monuments.&lt;ref name="erfgoed-stats" /&gt;&lt;ref&gt;{{cite web |url=http://de.wikipedia.org/wiki/Wikipedia:WikiProjekt_Denkmalpflege/%C3%96sterreich |title=Wikipedia:WikiProjekt Denkmalpflege/Österreich |date=2013-05-20 |work= |publisher=German Wikipedia |accessdate=2013-05-20 |quote=Die Gesamtzahl der denkmalgeschützten Objekte lag 2010 bei 36.363 in mehr als 2300 Gemeinden. |archiveurl=https://de.wikipedia.org/w/index.php?title=Wikipedia:WikiProjekt_Denkmalpflege/%C3%96sterreich&amp;oldid=93581038 |archivedate=2011-09-13 |deadurl=no}}&lt;/ref&gt;
|-
| {{flag|Azerbaijan}} 
| &lt;li&gt;[[List of monuments of Azerbaijan|List of monuments]] ([[:az:Vikipediya:Viki Abidələri Sevir/Abidələrin siyahısı|az]]) 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=5472}}
| According to WLM database there are 5,472 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Belarus}} 
| &lt;li&gt;[[Cultural Properties of Belarus|Cultural Properties]] 
{{User:Emijrp/AHKrow|P1435=Q2079150|wikidata=1062|estimate=4811}}
| According to sources there are 4,811 monuments.&lt;ref&gt;{{cite web |url=http://www.president.gov.by/by/press10640.html |title=Гісторыка-культурны патэнцыял Беларусі |trans_title=Historical and cultural capacity of Belarus |language=Belarusian |publisher=Official Internet Portal of the President of the Republic of Belarus |accessdate=7 May 2012|archiveurl=https://web.archive.org/web/20130208162423/http://www.president.gov.by/by/press10640.html|archivedate=2013-02-08|deadurl=yes}}&lt;/ref&gt;
|-
| {{flag|Belgium}} 
| &lt;li&gt;[[Heritage registers in Belgium|Heritage registers]] ([[:nl:Categorie:Lijsten van cultureel erfgoed|nl]]) 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=77000}}
| According to unknown sources there are 77,000 monuments.
|-
| {{flag|Bolivia}} 
| &lt;li&gt;[[List of monuments of Bolivia|List of monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=970}}
| According to WLM database there are 970 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Brazil}} 
| &lt;li&gt;[[List of National Historic Heritage of Brazil|List of Nat. Hist. Heritage]] ([[:pt:Categoria:Listas de patrimônio do Brasil|pt]]) 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=1047}}
| According to unknown sources there are 1,047 monuments.
|-
| {{flag|Burma}} 
| &lt;li&gt;[[Yangon City Heritage List]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=200}}
| According to sources there are 200 monuments.
|-
| {{flag|Cameroon}} 
| &lt;li&gt;[[List of monuments of Cameroon|List of monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=100}}
| Total number of monuments is unknown.
|-
| rowspan=2 | {{flag|Canada}} 
| &lt;li&gt;[[Canadian Register of Historic Places]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=17000}}
| rowspan=2 | According to WLM database there are 12,487 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| &lt;li&gt;[[National Historic Sites of Canada|National Historic Sites]] 
{{User:Emijrp/AHKrow|P1435=Q1568567|wikidata=984|estimate=958}}
|-
| {{flag|Chile}} 
| &lt;li&gt;[[National Monuments of Chile|National Monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=837}}
| According to WLM database there are 837 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| rowspan=4 | {{flag|China}} 
| &lt;li&gt;[[Major Historical and Cultural Site Protected at the National Level|Sites Protected (national level)]]
{{User:Emijrp/AHKrow|P1435=Q1188574|wikidata=1983|estimate=2351}}
| rowspan=4 | According to unknown sources there are 350,000+ immovable cultural properties and 10,000,000 movable. According to WLM database there are 2,283 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| &lt;li&gt;[[Historical and Cultural Sites Protected at the Provincial Level|Sites Protected (provincial level)]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[Historical and Cultural Sites Protected at the County Level|Sites Protected (county level)]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[Historical and Cultural Sites Protected at the City Level|Sites Protected (city level)]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
|-
| {{flag|Colombia}} 
| &lt;li&gt;[[National Monuments of Colombia|National monuments]] ([[:es:Categoría:Anexo:Monumentos nacionales de Colombia|es]]) 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=1024}}
| According to WLM database there are 1,024 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Croatia}} 
| &lt;li&gt;[[Register of Cultural Goods of Croatia|Register of Cultural Goods]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| rowspan=2 | {{flag|Cuba}} 
| &lt;li&gt;[[List of national monuments of Cuba|List of national monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=180}}
| rowspan=2 | According to sources there are 200 national monuments.&lt;ref&gt;{{cite web|url=http://www.oei.es/cultura2/cuba/07.htm|title=Consejo Nacional de Patrimonio Cultural (CNPC)|archiveurl=http://www.webcitation.org/6RPC1goyK|archivedate=2014-07-28|deadurl=no}}&lt;/ref&gt;
|-
| &lt;li&gt;[[List of local monuments of Cuba|List of local monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=200}}
|-
| {{flag|Czech Republic}} 
| &lt;li&gt;[[List of national monuments of Czech Republic|National monuments]] ([[:cs:Seznam národních kulturních památek České republiky|cs]]) 
{{User:Emijrp/AHKrow|P1435=Q385405|wikidata=12595|estimate=40762}}
| According to WLM database there are 40,762 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| rowspan=2 | {{flag|Denmark}} 
| &lt;li&gt;[[List of Denmark national sites and monuments|National sites and monuments]] ([[:da:Fredede fortidsminder i Danmark|da]])
{{User:Emijrp/AHKrow|P1435=Q21436546|wikidata=583|estimate=165000}}
| rowspan=2 | 7,000 are shipwrecks and submarine Stone Age settlements. According to WLM database there are 31,320 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| &lt;li&gt;Buildings ([[:da:Fredede bygninger i Danmark|da]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=7000}}
|-
| {{flag|Egypt}} 
| &lt;li&gt;[[List of monuments of Egypt|List of monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| {{flag|El Salvador}} 
| &lt;li&gt;[[List of monuments of El Salvador|List of monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=641}}
| According to WLM database there are 641 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Estonia}} 
| &lt;li&gt;[[List of monuments of Estonia|List of monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=24552}}
| According to WLM database there are 24,552 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|France}} 
| &lt;li&gt;[[List of French historic monuments by comune|List of historic monuments]] ([[:fr:Liste des monuments historiques par commune|fr]]) 
{{User:Emijrp/AHKrow|P1435=Q10387575|wikidata=73991|estimate=44453}}
| More than 200,000 on the [[:fr:Base Mérimée]] and much more on other regional databases of the [[:fr:Inventaire général du patrimoine culturel]].&lt;ref&gt;{{cite web |url=http://www2.culture.gouv.fr/culture/deps/chiffres-cles2010/04-patrimoine-architecture-2010.pdf |title=Patrimoine et architecture - Chiffres clés 2010 |date=2013-05-20 |work= |publisher=Ministère de la Culture et de la Communication |accessdate=2013-05-20 |quote= |archiveurl=http://www.webcitation.org/68DZPlZxf |archivedate=2012-06-06 |deadurl=no}}&lt;/ref&gt; According to WLM database there are 44,453 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| rowspan=2 | {{flag|Germany}} 
| &lt;li&gt;[[Deutsche Stiftung Denkmalschutz]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=112005}}
| rowspan=2 | According to WLM database there are 112,005 monuments.&lt;ref name="erfgoed-stats" /&gt; According to unknown sources there are 700,000+ monuments.
|-
| &lt;li&gt;Baudenkmal
{{User:Emijrp/AHKrow|P1435=Q811165|wikidata=15362|estimate=}}
|-
| {{flag|Ghana}} 
| &lt;li&gt;[[List of monuments of Ghana|List of monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=52}}
| According to WLM database there are 52 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| rowspan=4 | {{flag|Hong Kong}} 
| &lt;li&gt;[[Declared monuments of Hong Kong|Declared monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=108}}
| rowspan=4 | According to WLM database there are 108 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| &lt;li&gt;[[List of Grade I historic buildings in Hong Kong|Grade I historic buildings]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[List of Grade II historic buildings in Hong Kong|Grade II historic buildings]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[List of Grade III historic buildings in Hong Kong|Grade III historic buildings]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
|-
| {{flag|Hungary}} 
| &lt;li&gt;[[List of monuments of Hungary|List of monuments]] 
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=1174}}
| According to WLM database there are 1,174 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|India}} 
| &lt;li&gt;[[List of monuments of India|List of monuments]]
{{User:Emijrp/AHKrow|P1435=Q17047615|wikidata=412|estimate=7459}}
| According to WLM database there are 7,459 monuments.&lt;ref name="erfgoed-stats" /&gt; [[Wikipedia:WikiProject India/Wiki Loves Monuments]]
|-
| {{flag|Indonesia}} 
| &lt;li&gt;[[Cultural Properties of Indonesia|Cultural Properties]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=8232}}
| According to sources there are 8,232 monuments.&lt;ref&gt;{{cite web |url=http://kppo.bappenas.go.id/files/-15-Situs-Benda%20Cagar%20Budaya%20Tidak%20Bergerak,%20Situs-BCB%20Dipelihara,%20dan%20Juru%20Pelihara%20Seluruh%20Indonesia.pdf |title=Situs/Benda Cagar Budaya Tidak Bergerak, Situs/BCB Dipelihara, dan Juru Pelihara Seluruh Indonesia |trans_title=Heritage Sites and Immovable Cultural Properties |language=Indonesian |publisher=[[:id:Badan Perencanaan Pembangunan Nasional|National Development Planning Agency]] |accessdate=6 May 2012|archiveurl=https://web.archive.org/web/20130522090649/http://kppo.bappenas.go.id/files/-15-Situs-Benda%20Cagar%20Budaya%20Tidak%20Bergerak,%20Situs-BCB%20Dipelihara,%20dan%20Juru%20Pelihara%20Seluruh%20Indonesia.pdf|archivedate=2013-05-22|deadurl=yes}}&lt;/ref&gt;
|-
| {{flag|Iran}} 
| &lt;li&gt;Iranian National Heritage
{{User:Emijrp/AHKrow|P1435=Q5958900|wikidata=21455|estimate=26643}}
| According to WLM database there are 26,643 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Ireland}} 
| &lt;li&gt;[[List of monuments in Ireland|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=622}}
| According to WLM database there are 622 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Israel}}
| &lt;li&gt;[[List of monuments in Israel|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=1126}}
| According to WLM database there are 1,126 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Italia}}
| &lt;li&gt;[[List of monuments in Italy|List of monuments]] ([[:it:Progetto:Wiki Loves Monuments 2013/Monumenti|it]])
{{User:Emijrp/AHKrow|P1435=Q26971668|wikidata=4739|estimate=5143}}
| According to WLM database there are 5,143 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Jamaica}}
| &lt;li&gt;[[List of National Heritage Sites in Jamaica|List of National Heritage Sites]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| {{flag|Japan}}
| &lt;li&gt;[[Lists of National Treasures of Japan|Lists of National Treasures]]
{{User:Emijrp/AHKrow|P1435=Q1139795|wikidata=162|estimate=1079}}
| According to WLM database there are 988 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Jordan}}
| &lt;li&gt;[[List of monuments of Jordan|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=85}}
| According to WLM database there are 85 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Kenya}}
| &lt;li&gt;[[List of monuments of Kenya|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=208}}
| According to WLM database there are 208 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Latvia}}
| &lt;li&gt;[[List of monuments of Latvia|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=7131}}
| According to sources there are 7,131 monuments.&lt;ref&gt;{{cite web | url=http://www.mantojums.lv/?cat=742&amp;lang=lv | title=Valsts aizsargājamo nekustamo kultūras pieminekļu saraksts | accessdate=2015-02-24 | archiveurl=https://web.archive.org/web/20140106165825/http://www.mantojums.lv/?cat=742&amp;lang=lv | archivedate=2014-01-06 | deadurl=yes}}&lt;/ref&gt;
|-
| {{flag|Luxembourg}}
| &lt;li&gt;[[List of monuments of Luxembourg|List of monuments]] ([[:lb:Lëscht vun de klasséierte Monumenter|lb]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=808}}
| According to WLM database there are 808 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Macedonia}}
| &lt;li&gt;[[List of monuments of Macedonia|List of monuments]] ([[:fr:Patrimoine culturel de la République de Macédoine|fr]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=12556}}
| According to unknown sources there are 12,556 monuments.
|-
| rowspan=6 | {{flag|Malta}}
| &lt;li&gt;Grade 1
{{User:Emijrp/AHKrow|P1435=Q19718195|wikidata=169|estimate=}}
| rowspan=6 | According to WLM database there are 115 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| &lt;li&gt;Grade 2
{{User:Emijrp/AHKrow|P1435=Q20012790|wikidata=17|estimate=}}
|-
| &lt;li&gt;Grade 3
{{User:Emijrp/AHKrow|P1435=Q20012792|wikidata=2|estimate=}}
|-
| &lt;li&gt;Class A
{{User:Emijrp/AHKrow|P1435=Q21585062|wikidata=6|estimate=}}
|-
| &lt;li&gt;Class B
{{User:Emijrp/AHKrow|P1435=Q21585095|wikidata=1|estimate=}}
|-
| &lt;li&gt;Class C
{{User:Emijrp/AHKrow|P1435=Q21585106|wikidata=0|estimate=}}
|-
| {{flag|Mexico}}
| &lt;li&gt;[[List of monuments of Mexico|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=9952}}
| According to WLM database there are 9,952 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Morocco}}
| &lt;li&gt;[[Historic Monuments and Sites of Morocco|Historic Monuments and Sites]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| {{flag|Mozambique}}
| &lt;li&gt;[[Cultural Properties of Mozambique|Cultural Properties]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| {{flag|Namibia}}
| &lt;li&gt;[[List of national monuments of Namibia|List of national monuments]] ([[:de:Liste der National Monuments of Namibia|de]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| {{flag|Nepal}}
| &lt;li&gt;[[List of monuments of Nepal|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=2362}}
| According to WLM database there are 2,362 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| rowspan=2 | {{flag|Netherlands}}
| &lt;li&gt;[[List of Rijksmonuments]] ([[:nl:Rijksmonumenten#Plaatsen met de meeste monumenten|nl]])
{{User:Emijrp/AHKrow|P1435=Q916333|wikidata=66917|estimate=63052}}
| rowspan=2 | According to WLM database there are 63,052 monuments.&lt;ref name="erfgoed-stats" /&gt;&lt;ref&gt;{{cite web |url=http://www.cultureelerfgoed.nl/node/1830 |title=Aantal rijksmonumenten en beschermde stads- en dorpsgezichten in 2010 |date=2010-12-31 |work= |publisher= |accessdate=2013-05-20 |quote=Rijksmonumenten totaal: 52.215 (2008), 52.158 (2009), 52.151 (2010) |archiveurl=http://www.webcitation.org/67ydySipU |archivedate=2012-05-27 |deadurl=no}}&lt;/ref&gt;
|-
| &lt;li&gt;Municipal monuments ([[:nl:Gemeentelijk monument|nl]])
{{User:Emijrp/AHKrow|P1435=Q2650048|wikidata=1268|estimate=}}
|-
| {{flag|New Zealand}}
| &lt;li&gt;[[List of New Zealand Historic Places|New Zealand Historic Places]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| rowspan=2 | {{flag|North Korea}}
| &lt;li&gt;[[National Treasures of North Korea|National Treasures]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=200}}
| rowspan=2 | According to wiki pages there are 200 national treasures and about 2,000 cultural assets.
|-
| &lt;li&gt;[[Cultural assets of North Korea|Cultural assets]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=2000}}
|-
| {{flag|Norway}}
| &lt;li&gt;[[List of monuments in Norway|List of monuments]] ([[:no:Lister over kulturminner i Norge|no]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=115000}}
| According to unknown sources there are 115,000 monuments. According to WLM database there are 16,585 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Pakistan}}
| &lt;li&gt;[[List of monuments of Pakistan|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=1112}}
| According to WLM database there are 1,112 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Panama}}
| &lt;li&gt;[[List of monuments in Panama|List of monuments]] ([[:es:Anexo:Monumentos Históricos de Panamá|es]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=220}}
| According to WLM database there are 220 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Paraguay}}
| &lt;li&gt;[[List of monuments of Paraguay|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| {{flag|Philippines}}
| &lt;li&gt;[[List of monuments of Philippines|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=516}}
| According to WLM database there are 516 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Poland}}
| &lt;li&gt;[[List of monuments in Poland|List of monuments]] ([[:pl:Wikiprojekt:Wiki Lubi Zabytki/wykazy|pl]])
{{User:Emijrp/AHKrow|P1435=Q21438156|wikidata=54835|estimate=77162}}
| According to WLM database there are 77,162 monuments.&lt;ref name="erfgoed-stats" /&gt;&lt;ref name="wlmdatabase"&gt;{{cite web |url=http://commons.wikimedia.org/wiki/Commons:Monuments_database/Statistics |title=Commons:Monuments database/Statistics |date=2013-05-20 |work= |publisher=Wikimedia Commons |accessdate=2013-05-20 |quote= |archiveurl=http://commons.wikimedia.org/w/index.php?title=Commons:Monuments_database/Statistics&amp;oldid=96566181 |archivedate=2013-05-20 |deadurl=no}}&lt;/ref&gt;
|-
| rowspan=2 | {{flag|Portugal}}
| &lt;li&gt;[[National monuments of Portugal|National monuments]] ([[:pt:Anexo:Lista de património edificado em Portugal|pt]])
{{User:Emijrp/AHKrow|P1435=Q908411|wikidata=346|estimate=}}
| rowspan=2 | According to WLM database there are 4,493 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| &lt;li&gt;Heritage sites or buildings
{{User:Emijrp/AHKrow|P1435=Q15697324|wikidata=695|estimate=4493}}
|-
| {{flag|Romania}}
| &lt;li&gt;[[List of historical monuments in Romania|List of monuments]] ([[:ro:Lista monumentelor istorice din România|ro]])
{{User:Emijrp/AHKrow|P1435=Q916620|wikidata=2744|estimate=29717}}
| According to WLM database there are 29,717 monuments.&lt;ref name="erfgoed-stats" /&gt;&lt;ref&gt;{{cite web |url=http://www.monumenteistorice.ro/legislatie/LMI/LMI2010.pdf |title=2010 List of Historical Monuments |date=2013-05-20 |work= |publisher= |accessdate=2013-05-20 |quote= |archiveurl=http://www.webcitation.org/67yiBsiiX |archivedate=2012-05-27 |deadurl=yes}}&lt;/ref&gt;
|-
| {{flag|Russia}}
| &lt;li&gt;[[Russian cultural heritage register]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=116884}}
| According to WLM database there are 116,884 monuments.&lt;ref name="erfgoed-stats" /&gt; Of these 42,000 are rated as national landmarks, while the rest are of regional or local significance.
|-
| {{flag|Senegal}}
| &lt;li&gt;[[List of monuments of Senegal|List of monuments]] ([[:fr:Liste des monuments et sites historiques au Sénégal|fr]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| rowspan=2 | {{flag|Serbia}}
| &lt;li&gt;[[Cultural Heritage of Serbia]]
{{User:Emijrp/AHKrow|P1435=Q3323469|wikidata=264|estimate=2442}}
| rowspan=2 | According to WLM database there are 2,442 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| &lt;li&gt;[[Monuments of Kosovo]]
{{User:Emijrp/AHKrow|P1435=Q6906963|wikidata=1251|estimate=}}
|-
| {{flag|Sierra Leone}}
| &lt;li&gt;[[National Monuments of Sierra Leone|National Monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| {{flag|Singapore}}
| &lt;li&gt;[[National Monuments of Singapore|National Monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=69}}
| According to [[National Heritage Board (Singapore)|National Heritage Board]] there are 69 national monuments.
|-
| {{flag|Slovakia}}
| &lt;li&gt;[[Cultural Heritage Monuments of Slovakia|Cultural Heritage Monuments]] ([[:de:Kategorie:Liste (Kulturdenkmale in der Slowakei)|de]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=14622}}
| According to WLM database there are 14,622 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| rowspan=3 | {{flag|Slovenia}}
| &lt;li&gt;[[List of cultural heritage sites of Slovenia|List of cultural heritage sites]]
{{User:Emijrp/AHKrow|P1435=Q18519893|wikidata=1061|estimate=21643}}
| rowspan=3 | According to sources there are 30,022 registered sites of cultural heritage, of which 8379 are protected monuments.&lt;ref&gt;{{cite web |url=http://rkd.situla.org/ |title=Register nepremične kulturne dediščine |publisher=Ministry of Culture, Republic of Slovenia |accessdate=2013-05-27}}&lt;/ref&gt;
|-
| &lt;li&gt;Monuments of National Significance
{{User:Emijrp/AHKrow|P1435=Q18363603|wikidata=116|estimate=319}}
|-
| &lt;li&gt;Monuments of Local Significance
{{User:Emijrp/AHKrow|P1435=Q18363639|wikidata=605|estimate=8006}}
|-
| {{flag|Spain}} 
| &lt;li&gt;[[Lists of Bienes de Interés Cultural|Bienes de Interés Cultural]] ([[:es:Categoría:Anexos:Bienes de interés cultural en España|es]]) 
{{User:Emijrp/AHKrow|P1435=Q23712|wikidata=8007|estimate=50000}}
| According to WLM database there are 50,000+ monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|South Africa}}
| &lt;li&gt;[[List of heritage sites in South Africa|List of heritage sites]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=3936}}
| According to WLM database there are 3,936 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| rowspan=2 | {{flag|South Korea}}
| &lt;li&gt;[[National Treasures of South Korea|National Treasures]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=307}}
| rowspan=2 | According to [[Cultural Heritage Administration of Korea]] there are 307 national treasures and 526 historic sites.
|-
| &lt;li&gt;[[Historic Sites of South Korea|Historic Sites]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=526}}
|-
| {{flag|Swaziland}}
| &lt;li&gt;[[National Monuments of Swaziland|National Monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
| Total number of monuments is unknown.
|-
| rowspan=3 | {{flag|Sweden}}
| &lt;li&gt;[[Listed buildings in Sweden|Listed buildings]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=2000}}
| rowspan=2 | According to WLM database there are 145,232 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| &lt;li&gt;Historical ships in Sweden
{{User:Emijrp/AHKrow|P1435=Q16501309|wikidata=137|estimate=130}}
|-
| &lt;li&gt;Monuments in Fornminnesregistret 
{{User:Emijrp/AHKrow|P1435=Q21287602|wikidata=145514|estimate=145232}}
|-
| {{flag|Switzerland}}
| &lt;li&gt;[[Swiss Inventory of Cultural Property]]
{{User:Emijrp/AHKrow|P1435=Q8274529|wikidata=3232|estimate=20120}}
| According to WLM database there are 20,120 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Thailand}}
| &lt;li&gt;[[List of monuments of Thailand|List of monuments]] ([[:th:หมวดหมู่:รายชื่อโบราณสถานที่ขึ้นทะเบียนโดยกรมศิลปากร|th]])
{{User:Emijrp/AHKrow|P1435=Q16438244|wikidata=270|estimate=8578}}
| According to WLM database there are 8,578 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Tunisia}}
| &lt;li&gt;[[List of monuments of Tunisia|List of monuments]] ([[:fr:Liste des monuments classés de Tunisie|fr]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=926}}
| According to WLM database there are 926 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Ukraine}}
| &lt;li&gt;[[List of monuments of Ukraine|List of monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=75503}}
| According to WLM database there are 75,503 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| rowspan=11 | {{flag|United Kingdom}}
| &lt;li&gt;[[Grade I listed buildings]] ([[:Category:Grade I listed buildings|cat]])
{{User:Emijrp/AHKrow|P1435=Q15700818|wikidata=9951|estimate=}}
| rowspan=11 | According to WLM database there are 31,651 monuments.&lt;ref name="erfgoed-stats" /&gt; According to [[Statutory List of Buildings of Special Architectural or Historic Interest]] there are 376,099 [[listed building]]s.&lt;ref&gt;{{cite web |url= http://www.english-heritage.org.uk/caring/listing/listed-buildings/ |title=Listed Buildings |publisher=English Heritage |accessdate=7 June 2011}}&lt;/ref&gt;
|-
| &lt;li&gt;[[Grade II* listed buildings]] ([[:Category:Grade II* listed buildings|cat]])
{{User:Emijrp/AHKrow|P1435=Q15700831|wikidata=23604|estimate=}}
|-
| &lt;li&gt;[[Grade II listed buildings]] ([[:Category:Grade II listed buildings|cat]])
{{User:Emijrp/AHKrow|P1435=Q15700834|wikidata=371096|estimate=|format=count}}
|-
| &lt;li&gt;[[Grade A listed buildings]] ([[:Category:Grade A listed buildings|cat]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[Grade B+ listed buildings]] ([[:Category:Grade B+ listed buildings|cat]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[Grade B1 listed buildings]] ([[:Category:Grade B1 listed buildings|cat]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[Category A listed buildings]] ([[:Category:Category A listed buildings in Scotland|cat]])
{{User:Emijrp/AHKrow|P1435=Q10729054|wikidata=6626|estimate=}}
|-
| &lt;li&gt;[[Category B listed buildings]] ([[:Category:Category B listed buildings in Scotland|cat]])
{{User:Emijrp/AHKrow|P1435=Q10729125|wikidata=34849|estimate=}}
|-
| &lt;li&gt;[[Category C(S) listed buildings]] ([[:Category:Category C listed buildings in Scotland|cat]])
{{User:Emijrp/AHKrow|P1435=Q10729142|wikidata=31|estimate=}}
|-
| &lt;li&gt;[[Scheduled monument]]
{{User:Emijrp/AHKrow|P1435=Q219538|wikidata=20016|estimate=20000}}
|-
| &lt;li&gt;[[Site of Special Scientific Interest]]
{{User:Emijrp/AHKrow|P1435=Q422211|wikidata=1932|estimate=}}
|-
| rowspan=3 | {{flag|United States}}
| &lt;li&gt;[[U.S. National Register of Historic Places]]
{{User:Emijrp/AHKrow|P1435=Q19558910|wikidata=58593|estimate=90111}}
| rowspan=3 | According to WLM database there are 90,111 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| &lt;li&gt;[[U.S. National Register Historic District]]
{{User:Emijrp/AHKrow|P1435=Q20856087|wikidata=4144|estimate=}}
|-
| &lt;li&gt;[[U.S. National Historic Landmark]]
{{User:Emijrp/AHKrow|P1435=Q624232|wikidata=2355|estimate=2450}}
|-
| {{flag|Uruguay}}
| &lt;li&gt;[[List of monuments of Uruguay]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=1333}}
| According to WLM database there are 1,333 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Venezuela}}
| &lt;li&gt;[[List of national monuments of Venezuela|List of national monuments]] ([[:es:Categoría:Anexo:Monumentos nacionales de Venezuela|es]])
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=7149}}
| According to WLM database there are 7,149 monuments.&lt;ref name="erfgoed-stats" /&gt;
|-
| {{flag|Zambia}}
| &lt;li&gt;[[Monuments and Historic Sites of Zambia|Monuments and Historic Sites]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=3000}}
| According to [[National Heritage Conservation Commission]] there are 3,000 monuments and historic sites.
|-
| rowspan=2 | {{flag|Zimbabwe}}
| &lt;li&gt;[[National Monuments of Zimbabwe|National Monuments]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=169}}
| rowspan=2 | According to [[National Museums and Monuments of Zimbabwe]] there are 14,000 historic sites.
|-
| &lt;li&gt;[[List of historic sites in Zimbabwe|List of historic sites]]
{{User:Emijrp/AHKrow|P1435=|wikidata=|estimate=14000}}
|-
{{User:Emijrp/AHKrowtotal|wikidata=961398|estimate=2048568}}
|}

For more monuments figures, see [[:commons:Commons:Monuments database/Statistics|Commons:Monuments database/Statistics]]. For a map, see [https://tools.wmflabs.org/wlm-maps/ Wiki Loves Monuments map].

=== Cinema and television ===
{{anchor|Cinema|Television|Radio}}
&lt;!--[[File:BolexH16.jpg|right|thumb|This [[16 mm film|16 mm]] spring-wound [[Bolex]] "H16" Reflex camera is a popular entry level camera used in [[film school]]s.]]--&gt;
&lt;!--[[File:Le Voyage dans la lune.jpg|thumb|right|A shot from [[Georges Méliès]] ''[[Le Voyage dans la Lune]] (A Trip to the Moon)'' (1902), an early narrative film.]]--&gt;
A '''[[film]]''' is a series of still or moving images. It is produced by [[recording]] photographic images with [[camera]]s, or by creating images using [[animation]] techniques or [[visual effects]].  The process of [[filmmaking]] has developed into an [[art]] form and [[film industry|industry]]. See also [[:Category:Film-related lists]].

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="200px" | Related pages
! Wikidata
! Estimate
! References 
|-
| [[Film]]s{{anchor|Films}}
| &lt;li&gt;[[List of films]]
{{User:Emijrp/AHKrow|P31=Q11424|wikidata=249142|estimate=366000|format=count}}
| According to [[IMDb]] there are 366,000+ feature films.&lt;ref name="imdbstats"&gt;{{cite web |url=http://www.imdb.com/stats |title=IMDb Database Statistics |date=2017-02-04 |work= |publisher=IMDb |accessdate=2017-02-04 |quote=Titles: 4,107,863 (Year Range: 1874 - 2115); People: 7,717,456 (Credits: 82,270,949) |archiveurl=http://web.archive.org/web/*/http://www.imdb.com/stats |archivedate=2017-02-04 |deadurl=no}}&lt;/ref&gt;&lt;!-- (See [[User:Emijrp/List of African films]])--&gt;
|-
| [[Documentaries]]{{anchor|Documentaries}}
| &lt;li&gt;[[List of documentaries]]
{{User:Emijrp/AHKrow|P31=Q93204|wikidata=125|estimate=162000}}
| According to IMDb there are 77,000+ documentary films and 85,000+ short.&lt;ref name="imdbstats"/&gt;
|-
| [[Television channel|TV channels]]{{anchor|TV channels}}
| &lt;li&gt;[[Lists of television channels|List of TV channels]]
{{User:Emijrp/AHKrow|P31=Q2001305|wikidata=4129|estimate=}}
| Total number of TV channels is unknown. According to sources there are 700+ in India,&lt;ref name="indianmedia"/&gt; 7,200 in Europe as of 2009 (UE 27 + Croatia and Turkey).&lt;ref&gt;{{cite web |url=http://www.obs.coe.int/about/oea/pr/mavise_end2009.html |title=Croissance du nombre de chaînes et de plates-formes de télévision européennes malgré la crise |date=2010-01-13 |work= |publisher=Observatoire européen de l'audiovisuel |accessdate=2013-05-21 |quote=Plus de 245 nouvelles chaînes de télévision ont été lancées en Europe en 2009 ; ce qui mène à la fin de l’année 2009 à un total de 7 200 chaînes de télévision européennes. |archiveurl=http://www.webcitation.org/6GmCO5omE |archivedate=2013-05-21 |deadurl=no}}&lt;/ref&gt; Total number of defunct channels is unknown.
|-
| [[Television program|TV programs]]{{anchor|TV programs}}
| &lt;li&gt;[[Lists of television programs|List of TV programs]]
{{User:Emijrp/AHKrow|P31=Q15416|wikidata=134286|estimate=}}
| Total number of TV programs is unknown.&lt;br/&gt;Example: [[List of Spanish television series]] contains 800+ series and miniseries.
|-
| [[Television station|TV stations]]{{anchor|TV stations}}
| &lt;li&gt;[[List of television stations|List of TV stations]]
{{User:Emijrp/AHKrow|P31=Q1616075|wikidata=7039|estimate=}}
| According to [[Federal Communications Commission]] there are 1,700+ television stations (and 2,100+ low power) in USA.&lt;ref name="fccstats"&gt;{{cite web | url=http://benton.org/node/65435 | title=How Many TV and Radio Stations are There? | publisher=Federal Communications Commission | date=2011 | accessdate=2013-05-21 | archiveurl=http://www.webcitation.org/68DFa5cW6 | archivedate=2012-06-06 | deadurl=no | quote=As on March 2011: 14,728 full power radio stations:  4,778 AM, 6533 FM, and 3,417 educational FM. There are 859 Low Power FM stations. 1,774 full power TV stations: 1,022 UHF commercial, 360 VHF commercial, 285 UHF educational, and 107 VHF educational. 10,595 translators and booster stations. 2,172 low power TV stations.}}&lt;/ref&gt;
|-
| [[TV episode]]s{{anchor|Episodes|TV episodes}}
| &lt;li&gt;[[List of TV episodes]]
{{User:Emijrp/AHKrow|P31=Q21191270|wikidata=19856|estimate=2115000}}
| According to IMDb there are 2,115,000 TV episodes.&lt;ref name="imdbstats"/&gt;
|-
| [[Radio station]]s{{anchor|Radio stations}}
| &lt;li&gt;[[List of radio stations]]
{{User:Emijrp/AHKrow|P31=Q14350|wikidata=22356|estimate=44000}}
| According to [[CIA Factbook]] there are 44,000 radio stations worldwide&lt;ref&gt;{{cite web |url=http://wiki.answers.com/Q/How_many_radio_stations_are_there_in_the_world |title=How many radio stations are there in the world? |date=2013-05-21 |work= |publisher=Wiki Answers |accessdate=2013-05-21 |quote=There are about 44,000 radio stations worldwide. |archiveurl=http://www.webcitation.org/6GmCx9X31 |archivedate=2013-05-21 |deadurl=no}}&lt;/ref&gt; and according to [[Federal Communications Commission]] 14,000+ are in USA.&lt;ref name="fccstats"/&gt;
|-
| Awards
| &lt;li&gt;[[List of television awards]]
{{User:Emijrp/AHKrow|P31=Q1407225|wikidata=200|estimate=}}
| Total number of televison awards is unknown.
|-
{{User:Emijrp/AHKrowtotal|wikidata=437133|estimate=2832654}}
|}

This section excludes [[#Biographies|biographies]].

{{for|a list of [[film archives]]|#Archives}}
&lt;!--{{Filmsbygenre}}--&gt;

=== Crafts ===
&lt;!--[[File:Swanson_Shoe_Repair_18.jpg|thumb|right|[[Shoes]] are repaired by a skilled [[shoemaker]], here he evaluates a pair of shoes with a [[customer]] watching.]]--&gt;
A '''[[craft]]''' is a branch of a [[profession]] that requires some particular kind of [[Skilled worker|skilled work]]. In historical sense, particularly as pertinent to the [[Middle Ages|Medieval history]] and earlier, the term is usually applied towards people occupied in small-scale production of [[Good (economics)|goods]]. See also [[Outline of crafts]] and [[:Category:Glossaries of crafts]].

{| class="wikitable sortable plainlinks"
! Topic 
! Related pages
! Wikidata
! Estimate
! References 
|-
| [[Crafts]]
| &lt;li&gt;[[List of crafts]] ([[:Category:Crafts|cat]])
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1000}}
| According to unknown sources there are over 1,000 crafts.
|-
| [[Gardening]]{{anchor|Gardening}}
| 
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of gardening articles is unknown.
|-
| [[Gemology]] and [[Jewelry]]{{anchor|Gemology|Jewelry}}
| &lt;li&gt;[[List of jewellery types]]
{{User:Emijrp/AHKrow|P31=Q161439|wikidata=702|estimate=}}
| Total number of jewelry articles is unknown.
|-
| [[Home improvement]]{{anchor|Home improvement}}
| 
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of home improvement articles is unknown.
|-
| [[Origami]]{{anchor|Origami}}
| 
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of origami articles is unknown.
|-
| [[Toy]]s{{anchor|Toys}}
| 
{{User:Emijrp/AHKrow|P31=Q11422|wikidata=436|estimate=}}
| Total number of toys is unknown.
|-
{{User:Emijrp/AHKrowtotal|wikidata=1138|estimate=2138}}
|}

=== Literature ===

'''[[Literature]]''' (from [[Latin]] ''litterae''  (plural); [[Letter (alphabet)|letter]]) is the [[art]] of [[write|written works]]. The word literature literally means: "things made from letters". Literature is commonly classified as having two major forms—fiction and non-fiction—and two major techniques—poetry and prose.

* An '''[[academic journal]]''' is a [[peer review|peer-reviewed]] [[periodical publication|periodical]] in which scholarship relating to a particular [[list of academic disciplines|academic discipline]] is published. Estimates suggest that around 50 million journal articles&lt;ref name="50Mjournalarticles"&gt;{{Cite journal | last1 = Jinha | first1 = A. E. | title = Article 50 million: An estimate of the number of scholarly articles in existence | doi = 10.1087/20100308 | journal = Learned Publishing | volume = 23 | issue = 3 | pages = 258–263 | year = 2010 | pmid =  | url = http://www.stratongina.net/files/50millionArifJinhaFinal.pdf| pmc = | archiveurl = http://www.webcitation.org/67sSymMQy| archivedate = 2012-05-23| deadurl = no}}&lt;/ref&gt; have been published since the first appearance of the [[Philosophical Transactions of the Royal Society]] in 1665.
* An '''[[encyclopedia]]''' is a type of [[reference work]], a [[compendium]] holding a summary of [[information]] from either [[List of encyclopedias by language|all branches]] of [[knowledge]] or a particular [[List of encyclopedias by branch of knowledge|branch of knowledge]].
* A '''[[novel]]''' is a long prose narrative that describes fictional characters and events in the form of a sequential story.
* '''[[Poetry]]''' is a form of [[literature|literary]] [[art]] in which [[language]] is used for its [[aesthetics|aesthetic]] and evocative qualities in addition to, or in lieu of, its apparent [[meaning (linguistics)|meaning]]. See also [[Outline of poetry]].
* '''[[Theatre]]''' is a collaborative form of [[fine art]] that uses live performers to present the experience of a real or imagined  event before a live audience in a specific place. See also [[Outline of theatre]].

&lt;gallery mode="packed-hover"&gt;
File:Old book bindings.jpg|Old book bindings at the [[Merton College, Oxford]] library
File:JohannesVermeer-TheAstronomer(1668).jpg|''[[The Astronomer (painting)|The Astronomer]]'' by [[Johannes Vermeer]]
File:EncycBrit1913.jpg|thumb|right|Advertisement for the 1911 ''[[Encyclopædia Britannica]]'' ("The Sum of Human Knowledge"), from the May 1913 issue of ''National Geographic Magazine''
File:Bernhardt Hamlet2.jpg|[[Sarah Bernhardt]] as [[Hamlet]], in 1899
File:GilgameshTablet.jpg|The [[deluge (mythology)|Deluge]] tablet, carved in stone, of the [[Gilgamesh epic]] in [[Akkadian language|Akkadian]], circa [[2nd millennium BC]]
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="250px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=1 | By country and period
| &lt;li&gt;[[World literature]]&lt;li&gt;[[History of literature]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=4000}}
| Assuming 200 countries and 20 centuries, there could be 4,000 articles. See also [[List of literary movements]] and [[:Category:Literature lists]].
|-
| rowspan=5 | By medium
| &lt;li&gt;[[List of books]]
{{User:Emijrp/AHKrow|P31=Q571|wikidata=175044|estimate=20000000}}
| According to [[Google]] there are 129,864,880 books (considering all editions separately).&lt;ref&gt;{{cite web |url=http://booksearch.blogspot.com.es/2010/08/books-of-world-stand-up-and-be-counted.html |title=Books of the world, stand up and be counted! All 129,864,880 of you |date=2013-05-21 |work= |publisher=Google Books |accessdate=2013-05-21 |quote=After we exclude serials, we can finally count all the books in the world. There are 129,864,880 of them. At least until Sunday. |archiveurl=http://www.webcitation.org/68DZKPL8L |archivedate=2012-06-06 |deadurl=no}}&lt;/ref&gt; Excluding non-notable books and editions of the same books it could be over 20,000,000.
|-
| &lt;li&gt;[[List of codices]]{{anchor|Codices}}
{{User:Emijrp/AHKrow|P31=Q213924|wikidata=94|estimate=}}
| Total number of codices is unknown.
|-
| &lt;li&gt;[[List of incunabulas]]{{anchor|Incunabulas}}
{{User:Emijrp/AHKrow|P31=Q216665|wikidata=36|estimate=350000}}
| According to sources there are 350,000 editions, around 1.5 million surviving copies, located in over 5,000 libraries worldwide.&lt;ref&gt;{{cite web |url=http://www.bl.uk/catalogues/istc/index.html |title=Incunabula Short Title Catalogue |date=2013-05-21 |work= |publisher= |accessdate=2013-05-21 |quote=The database records nearly every item printed from movable type before 1501, but not material printed entirely from woodblocks or engraved plates. 29,777 editions are listed as at January 8th 2008, including some 16th-century items previously assigned incorrectly to the 15th century. |archiveurl=http://www.webcitation.org/6GmDOwKm2 |archivedate=2013-05-21 |deadurl=no}}&lt;/ref&gt;&lt;ref&gt;[http://wayback.archive.org/web/20120331011215/http://www.ustc.ac.uk/cicero/search.php Universal Short Title Catalogue]&lt;/ref&gt; See also [[Incunabula Short Title Catalogue]] (29,777) and [[Universal Short Title Catalogue]] (350,000).
|-
| &lt;li&gt;[[List of manuscripts]]{{anchor|Manuscripts}}
{{User:Emijrp/AHKrow|P31=Q87167|wikidata=5170|estimate=}}
| Total number of manuscripts is unknown.
|-
| &lt;li&gt;[[List of speeches]]{{anchor|Speeches}}
{{User:Emijrp/AHKrow|P31=Q190539|wikidata=648|estimate=}}
| Total number of speeches is unknown. See also [[Oral literature]].
|-
| rowspan=4 | [[Academic literature]]{{anchor|Academic literature}}
| &lt;li&gt;[[Lists of academic journals]] ([[:Category:Lists of academic journals|cat]])
{{User:Emijrp/AHKrow|P31=Q737498|wikidata=3393|estimate=}}
| Total number of academic journals is unknown. See also [[Wikipedia:WikiProject Academic Journals/Journals cited by Wikipedia/Missing1|Journals cited by Wikipedia]].
|-
| &lt;li&gt;[[List of conference papers]]
{{User:Emijrp/AHKrow|P31=Q23927052|wikidata=4278|estimate=}}
| Total number of conference papers is unknown.
|-
| &lt;li&gt;[[List of journal articles]]
{{User:Emijrp/AHKrow|P31=Q18918145|wikidata=1131312|estimate=5000000}}
| According to sources, over 50 million journal articles have been published since 1665.&lt;ref name="50Mjournalarticles" /&gt; Assuming only 10% are notable, it could be 5,000,000.

Number of records in different academic databases:
{{div col|2}}
* [[Inspec]] (11,000,000)
* [[Compendex]] (9,000,000)
* [[Elsevier BIOBASE]] (4,100,000)
* [[Academic Search]] (3,000,000)
* [[IEEE Xplore]] (2,400,000)
* [[arXiv]] (1,243,375)&lt;ref&gt;{{cite web|title=arXiv.org|url=https://arxiv.org|quote=Open access to 1,243,375 e-prints in Physics, Mathematics, Computer Science, Quantitative Biology, Quantitative Finance and Statistics}}&lt;/ref&gt;
* [[SciELO]] (230,000)
{{div col end}}

See also [[Lists of important publications in science]].
|-
| &lt;li&gt;[[List of theses]]
{{User:Emijrp/AHKrow|P31=Q1266946|wikidata=3517|estimate=}}
| Total number of theses is unknown.
|-
| [[Bibliography|Bibliographies]]{{anchor|Bibliographies}}
| &lt;li&gt;[[:Category:Bibliographies by writer|Bibliographies by writer]]
{{User:Emijrp/AHKrow|P31=Q1631107|wikidata=8068|estimate=}}
| Total number of bibliographies is unknown.
|-
| [[Comics]]{{anchor|Comics}}
| &lt;li&gt;[[Lists of comics]]
{{User:Emijrp/AHKrow|P31=Q1004|wikidata=25766|estimate=}}
| Total number of comics is unknown.
|-
| [[Dictionary|Dictionaries]]{{anchor|Dictionaries}}
| &lt;li&gt;[[List of dictionaries]]
{{User:Emijrp/AHKrow|P31=Q23622|wikidata=880|estimate=38000}}
| According to sources, there are 38,000 dictionaries.&lt;ref&gt;[http://openlibrary.org/search?title=dictionary "Dictionary" search] on [[OpenLibrary]]&lt;/ref&gt;
|-
| [[Encyclopedia]]s{{anchor|Encyclopedias}}
| &lt;li&gt;[[List of encyclopedias]]
{{User:Emijrp/AHKrow|P31=Q5292|wikidata=860|estimate=13000}}
| According to sources, there are 13,000 encyclopedias.&lt;ref&gt;[http://openlibrary.org/search?title=encyclopedia "Encyclopedia" search] on [[OpenLibrary]]&lt;/ref&gt;

Some of the most complete enciclopedias are ''[[Enciclopedia universal ilustrada europeo-americana]]'' (800,000 articles), ''[[Encyclopædia Britannica]]'' (100,000 articles), ''[[L'Encyclopédie]]'' (72,000 articles&lt;ref&gt;http://encyclopedie.uchicago.edu/&lt;/ref&gt;) and ''[http://wayback.archive.org/web/20120418220919/http://www.oxfordreference.com/pages/premium Oxford Reference Online]'' (1,400,000 articles).

* [[Wikipedia:WikiProject Missing encyclopedic articles]]
* [[Wikipedia:Size comparisons#Comparison of encyclopedias]]
* [[s:Portal:Reference Works]]

See more encyclopedias in [http://www.google.es/search?tbs=bks:1&amp;tbo=p&amp;q=encyclopedia&amp;num=10&amp;lr=lang_en#q=encyclopedia&amp;hl=es&amp;lr=lang_en&amp;sa=X&amp;ei=9fYyTcW7AoyL4gaT0fisCg&amp;ved=0CBsQpwUoBA&amp;source=lnt&amp;tbs=bks:1%2Clr%3Alang_1en%2Cbkv%3Af%2Ccdr%3A1%2Ccd_min%3A1%2F1%2F1000%2Ccd_max%3A31%2F12%2F1899&amp;fp=f808df3a6890de68 Google Books] and [https://archive.org/search.php?query=subject%3A%22Encyclopedias%20and%20dictionaries%22&amp;sort=-date Internet Archive].

See also [[List of encyclopedias by language]], [[List of encyclopedias by branch of knowledge]] and [[List of online encyclopedias]].
|-
| rowspan=3 | Fictional entities{{anchor|Fictional entities}}
| &lt;li&gt;[[List of fictional characters]]
{{User:Emijrp/AHKrow|P31=Q95074|wikidata=41604|estimate=}}
| rowspan=3 | Total number of fictional entities is unknown.
|-
| &lt;li&gt;[[List of fictional locations]]
{{User:Emijrp/AHKrow|P31=Q3895768|wikidata=2749|estimate=}}
|-
| &lt;li&gt;[[List of fictional events]]
{{User:Emijrp/AHKrow|P31=Q14136353|wikidata=169|estimate=}}
|-
| [[Magazine]]s{{anchor|Magazines}}
| &lt;li&gt;[[List of magazines]]
{{User:Emijrp/AHKrow|P31=Q41298|wikidata=21799|estimate=}}
| Total number of magazines is unknown. According to sources by country:
* [[List of magazines in China|China]] (9,000)&lt;ref name="chinaorgcnmassmedia"&gt;[http://www.china.org.cn/english/features/Brief/193358.htm China.org.cn] - Mass Media ({{webarchive |url=http://www.webcitation.org/67vEVyWzi?url=http://www.china.org.cn/english/features/Brief/193358.htm |date=May 25, 2012 }})&lt;/ref&gt;
|-
| [[Newspaper]]s{{anchor|Newspapers}}
| &lt;li&gt;[[List of newspapers]]
{{User:Emijrp/AHKrow|P31=Q11032|wikidata=16824|estimate=}}
| Total number of newspapers is unknown. According to sources by country:
* [[List of newspapers in India|India]] (72,000)&lt;ref name="indianmedia"&gt;{{cite web |url=http://businesstoday.intoday.in/story/india-in-2020-paranjoy-guha-thakurta-on-media-industry/1/21057.html |title=The wonder that is media |date=2013-05-21 |work= |publisher=Paranjoy Guha Thakurta |accessdate=2013-05-21 |quote=There are over 72,000 publications currently registered with the Registrar of Newspapers of India. At present, over 700 TV channels have been permitted by the Ministry of Information and Broadcasting to uplink or downlink from the country. |archiveurl=http://www.webcitation.org/67vE8gAH5 |archivedate=2012-05-25 |deadurl=no}}&lt;/ref&gt;
* [[List of newspapers in China|China]] (2,000)&lt;ref name="chinaorgcnmassmedia"/&gt;
|-
| [[Novel]]{{anchor|Novels}}
| &lt;li&gt;[[List of novels]]
{{User:Emijrp/AHKrow|P31=Q8261|wikidata=3743|estimate=}}
| Total number of novels is unknown.
|-
| rowspan=3 | [[Poetry]]{{anchor|Poetry}}
| &lt;li&gt;[[List of poems]]
{{User:Emijrp/AHKrow|P31=Q5185279|wikidata=44747|estimate=}}
| Total number of poems is unknown.
|-
| &lt;li&gt;[[List of poetic forms]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of poetic forms is unknown.
|-
| &lt;li&gt;[[List of poetry groups and movements]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of poetry groups and movements is unknown.
|-
| [[Theatre]]{{anchor|Theatre}}
| &lt;li&gt;[[List of plays]]
{{User:Emijrp/AHKrow|P31=Q25379|wikidata=16932|estimate=}}
| Total number of plays is unknown.
|-
| Awards
| &lt;li&gt;[[List of literature awards]]
{{User:Emijrp/AHKrow|P31=Q378427|wikidata=1918|estimate=}}
| Total number of literature awards is unknown.
|-
{{User:Emijrp/AHKrowtotal|wikidata=1509551|estimate=25606419}}
|}

{| class="wikitable sortable plainlinks"
|-
! rowspan="2" | Database
! colspan="2" | Estimate 
! rowspan="2" | References
|-
! Articles
! Progress 
|-
| [[WorldCat]] ||  || style="text-align: center;" data-sort-value=264000000 | '''?/264000000''' || Bibliographic records about books, journals and more
|-
| [[Open Library]] ||  || style="text-align: center;" data-sort-value=20000000 | '''164/20000000''' || Open Library goal is to provide a page on the web for every book ever published. They have 20 million edition records and provide access to 1.7 million scanned versions of books.&lt;br/&gt;AutoList: [https://tools.wmflabs.org/autolist/index.php?language=en&amp;project=wikipedia&amp;wdq=claim%5B648%5D%20claim%5B31%3A571,3331189%5D&amp;run=Run 164] ([[d:Q648|Q648]])
|-
| [[Harvard Bibliographic Dataset]] ||  || style="text-align: center;" data-sort-value=12000000 | '''?/12000000''' || Bibliographic records for materials held by the Harvard Library, including books, journals, manuscripts, archival materials, electronic resources, scores, audio, video and other materials&lt;ref&gt;[http://openmetadata.lib.harvard.edu/sites/default/files/Harvard_Library_Bibliographic_Dataset_Documentation.pdf Harvard Library Bibliographic Dataset Documentation] ({{webarchive |url=http://www.webcitation.org/68DZcNFG0?url=http://openmetadata.lib.harvard.edu/sites/default/files/Harvard_Library_Bibliographic_Dataset_Documentation.pdf |date=June 6, 2012 }})&lt;/ref&gt;
|-
| [[Internet Archive]] ||  || style="text-align: center;" data-sort-value=3000000 | '''?/3000000''' || E-books and texts&lt;ref&gt;[http://www.archive.org/details/texts Free Books : Download &amp; Streaming : eBooks and Texts : Internet Archive&lt;!-- Bot generated title --&gt;]&lt;/ref&gt;
|-
| [[Project Gutenberg]] ||  || style="text-align: center;" data-sort-value=42000 | '''?/42000''' || E-books and documents
|}

Theatres are counted in [[#Architecture]].

This section excludes [[#Biographies|biographies]] and [[#Libraries|libraries]].

=== Performing arts ===

'''[[Performing arts]]''' are a form of [[art]] in which artists use their voices and/or their bodies, often in relation to other objects, to convey artistic expression.  It is different from [[visual arts]], which is when artists use paint/canvas or various materials to create physical or static [[works of art|art objects]]. Performing arts include several disciplines, each performed in front of a live audience.

* '''[[Dance]]''' is an [[art form]] that generally refers to [[Motion (physics)|movement]] of the body, usually rhythmic and to music, used as a form of [[Emotional expression|expression]], [[social]] [[Interpersonal relationship|interaction]] or presented in a [[spirituality|spiritual]] or [[performance]] setting. See also [[Index of dance articles]] and [[Outline of dance]].
* '''[[Music]]''' is an [[art]] form whose [[media (arts)|medium]] is [[sound]] and silence. Its common elements are [[pitch (music)|pitch]] (which governs [[melody]] and [[harmony]]), [[rhythm]] (and its associated concepts [[tempo]], [[meter (music)|meter]], and [[articulation (music)|articulation]]), [[dynamics (music)|dynamics]], and the sonic qualities of [[timbre]] and [[texture (music)|texture]]. See also [[Index of music articles]], [[Outline of music]] and [[:Category:Music-related lists]].
&lt;!--
&lt;gallery mode="packed-hover"&gt;
File:Two dancers.jpg|thumb|right|Example of modern dance
&lt;/gallery&gt;
--&gt;
{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=4 | [[Dance]]{{anchor|Dance}}
| &lt;li&gt;[[List of dances]] ([[:Category:Dance related lists|cat]])
{{User:Emijrp/AHKrow|P31=Q11639|wikidata=988|estimate=}}
| Total number of dances is unknown.
|-
| &lt;li&gt;[[List of dance style categories]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of dance styles is unknown.
|-
| &lt;li&gt;[[List of ethnic, regional, and folk dances by origin|List of dances by origin]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=200}}
| A quick and low estimate is one dance style per country.
|-
| &lt;li&gt;[[List of dance awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of dance awards is unknown.
|-
| rowspan=10 | [[Music]]{{anchor|Music}}
| &lt;li&gt;[[List of instruments]]
{{User:Emijrp/AHKrow|P31=Q34379|wikidata=8037|estimate=500}}
| According to unknown sources there are 500 instruments.
|-
| &lt;li&gt;[[List of albums]]
{{User:Emijrp/AHKrow|P31=Q482994|wikidata=240928|estimate=1000000}}
| Total number of albums is over 1,000,000.

The [[freeDB]] database holds information for around 1.5 million [[compact disc]]s (many are duplicates), [[All Music Guide]] database contains entries for 800,000 unique albums, [[Discogs]] database contains over 890,000 master releases (several versions of releases) and nearly 6.5 million unique individual versions of releases,&lt;ref name="Discogs releases"&gt;{{cite web|url=http://www.discogs.com/search|title=Discogs - search|publisher=[[Discogs]]|date=|accessdate=4 November 2015}}&lt;/ref&gt; [[Jamendo]] project contains over 50,000 free and open albums. [[Record-Rama]] collection holds 3 million albums and singles.

New albums in USA: 75,000 (2010), 96,100 (2009), 106,000 (2008), 76,000 (2006)&lt;ref name="newusalbums"&gt;[http://www.billboard.com/biz/articles/news/1179201/business-matters-75000-albums-released-in-us-in-2010-down-22-from-2009 Business Matters: 75,000 Albums Released In U.S. In 2010 -- Down 22% From 2009]&lt;/ref&gt;

See also [[List of online music databases]].
|-
| &lt;li&gt;[[List of songs]]
{{User:Emijrp/AHKrow|P31=Q7366|wikidata=46670|estimate=1000000}}
| According to sources there are 97 million songs.&lt;ref&gt;[http://www.digitalmusicnews.com/stories/100611supersaturation There Are 97,000,000 Songs In This World...]{{dead link|date=September 2015}}&lt;/ref&gt; Estimate of notable songs is 1,000,000.
|-
| &lt;li&gt;[[List of musicals]]
{{User:Emijrp/AHKrow|P31=Q2743|wikidata=1940|estimate=}}
| Total number of musicals is unknown.
|-
| &lt;li&gt;[[List of concertos]]
{{User:Emijrp/AHKrow|P31=Q9748|wikidata=446|estimate=}}
| Total number of concertos is unknown.
|-
| &lt;li&gt;[[List of operas]]
{{User:Emijrp/AHKrow|P31=Q1344|wikidata=4509|estimate=4000}}
| Total number of operas is unknown. According to sources 3,603 operas performed between 1597 and 1940.&lt;ref&gt;[http://archive.org/details/AnnalesOfOpera1597-1940 Annales of Opera 1597-1940]&lt;/ref&gt;&lt;ref&gt;[http://listserv.bccls.org/cgi-bin/wa?A2=OPERA-L;IXc2OA;20051120165659-0500C Re: How Many Operas ARE there?] Opera-l archives&lt;/ref&gt;
|-
| &lt;li&gt;[[List of symphonies]]
{{User:Emijrp/AHKrow|P31=Q9734|wikidata=986|estimate=}}
| Total number of symphonies is unknown.
|-
| &lt;li&gt;[[List of canons]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of canons is unknown.
|-
| &lt;li&gt;[[List of music styles]]
{{User:Emijrp/AHKrow|P31=Q188451|wikidata=1312|estimate=}}
| Total number of music styles is unknown.
|-
| &lt;li&gt;[[List of music awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of awards is unknown.
|-
{{User:Emijrp/AHKrowtotal|wikidata=305816|estimate=2010372}}
|}

=== Visual arts ===

'''[[Visual arts]]''' are a form of [[art]] in which artists use paint, canvas or various materials to create physical or static [[works of art|art objects]].

* '''[[Calligraphy]]''' is the design and execution of lettering with a broad tip instrument, brush, among other writing instruments.
* '''[[Drawing]]''' makes use of any number of drawing instruments to mark a two-dimensional medium. See also [[Outline of drawing and drawings]].
* '''[[Fashion]]''' is a general term for a popular style or practice, especially in clothing, foot wear, or accessories. Fashion references to anything that is the current trend in look and dress up of a person.
* '''[[Textile arts]]''' are those arts and crafts that use plant, animal, or synthetic fibers to construct practical or decorative objects. See also [[Index of fashion articles]].
* '''[[Painting]]''' is the practice of applying [[paint]], [[pigment]], [[color]] or other medium to a [[surface]] (support base).  The application of the medium is commonly applied to the base with a [[brush]] but other objects can be used. See also [[Index of painting-related articles]] and [[Outline of painting]].
* '''[[Photography]]''' is the [[art]], [[science]] and practice of creating durable [[image]]s by recording [[light]] or other [[electromagnetic radiation]], either electronically by means of an [[image sensor]] or chemically by means of a light-sensitive material such as [[photographic film]]. See also [[Outline of photography]].
* '''[[Printmaking]]''' is the process of making artworks by printing, normally on paper. Printmaking normally covers only the process of creating prints with an element of originality, rather than just being a photographic reproduction of a painting.
* '''[[Sculpture]]''' is [[Three-dimensional space|three-dimensional]] artwork created by shaping or combining hard materials—typically [[Stone sculpture|stone]] such as [[marble]]—or metal, glass, or wood. See also [[Outline of sculpture]].

&lt;gallery mode="packed-hover"&gt;
File:Ijazah3.jpg|An [[Ottoman Empire|Ottoman]] [[ijazah]] written in [[Arabic language|Arabic]] certifying competence in calligraphy, 1206 [[Islamic calendar|AH]]/1791 [[AD]]
File:Rembrandt-A-Lion-Lying-Down-207063 detail.jpg|Pen and wash lion by [[Rembrandt]] in the [[Louvre]]
File:Meisje met de parel.jpg|''[[Girl with a Pearl Earring]]'' (1665) by [[Johannes Vermeer]]
File:Hokusai-fuji7.png|[[Mount Fuji]], from the ''[[36 Views of Mount Fuji (Hokusai)|Thirty-six Views of Mount Fuji]]'', color [[woodcut]] by [[Katsushika Hokusai]]
File:Latticed window at lacock abbey 1835.jpg|A latticed window in [[Lacock Abbey]], England, photographed by [[William Fox Talbot]] in 1835
File:Dying gaul.jpg|''[[The Dying Gaul]]'', a Roman marble copy of a [[Hellenistic]] work of the late 3rd century BCE [[Capitoline Museums]], Rome
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="150px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=3 | [[Calligraphy]]{{anchor|Calligraphy}}
| &lt;li&gt;[[:Category:Calligraphy]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of calligraphy articles is unknown.
|-
| &lt;li&gt;[[List of typefaces]]
{{User:Emijrp/AHKrow|P31=Q17451|wikidata=584|estimate=}}
| Total number of typefaces is unknown.
|-
| &lt;li&gt;[[List of typographic features]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of typographic features is unknown.
|-
| rowspan=4 | [[Drawing]]{{anchor|Drawing}}
| &lt;li&gt;[[List of drawings]]
{{User:Emijrp/AHKrow|P31=Q93184|wikidata=38854|estimate=}}
| Total number of drawings is unknown.
|-
| &lt;li&gt;[[List of drawing genres]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of drawing genres is unknown.
|-
| &lt;li&gt;[[List of drawing techniques]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of drawing techniques is unknown.
|-
| &lt;li&gt;[[List of drawing awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of drawing awards is unknown.
|-
| rowspan=2 | [[Fashion]]{{anchor|Fashion}}
| &lt;li&gt;[[List of fashion styles]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of fashion styles is unknown.
|-
| &lt;li&gt;[[List of fashion awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of fashion awards is unknown.
|-
| rowspan=6 | [[Painting]]{{anchor|Painting}}
| &lt;li&gt;[[List of paintings]]
{{User:Emijrp/AHKrow|P31=Q3305213|wikidata=263418|estimate=}}
| Total number of paintings is unknown.

According to [[BBC Your Paintings]] database there are 213,000 artworks contained within the UK's national collection.&lt;ref name="BBC your paintings"&gt;{{cite web|url=http://www.bbc.co.uk/arts/yourpaintings/paintings/search|title=BBC - Your Paintings|publisher=[[BBC]]|work=[[BBC online]]|date=|accessdate=4 November 2015}}&lt;/ref&gt;

See also [[:d:Wikidata:WikiProject sum of all paintings]]
|-
| &lt;li&gt;[[List of painting genres]]
{{User:Emijrp/AHKrow|P31=Q16743958|wikidata=44|estimate=}}
| Total number of painting genres is unknown.
|-
| &lt;li&gt;[[List of painting styles]]
{{User:Emijrp/AHKrow|P31=Q968159|wikidata=495|estimate=}}
| Total number of movements and styles is unknown.
|-
| &lt;li&gt;[[List of painting techniques]] ([[:Category:Painting techniques|cat]])
{{User:Emijrp/AHKrow|P31=Q1231896|wikidata=32|estimate=}}
| Total number of painting techniques is unknown.
|-
| &lt;li&gt;[[List of painting materials and tools]]
{{User:Emijrp/AHKrow|P31=Q3300034|wikidata=94|estimate=}}
| Total number of materials and tools is unknown.
|-
| &lt;li&gt;[[List of painting awards]] 
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of awards is unknown.
|-
| rowspan=4 | [[Photography]]{{anchor|Photography}}
| &lt;li&gt;[[List of photographs]] ([[:Category:Photographs|cat]])
{{User:Emijrp/AHKrow|P31=Q125191|wikidata=4124|estimate=}}
| Total number of photographs is unknown. See also [[Largest photographs in the world]].
|-
| &lt;li&gt;[[List of photographic styles]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of photograph styles is unknown.
|-
| &lt;li&gt;[[List of photographic techniques]] ([[:Category:Photographic techniques|cat]])
{{User:Emijrp/AHKrow|P31=Q1439691|wikidata=20|estimate=}}
| Total number of photograph techniques is unknown.
|-
| &lt;li&gt;[[List of photography awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of photograph awards is unknown.
|-
| rowspan=2 | [[Printmaking]]{{anchor|Printmaking}}
| &lt;li&gt;[[List of printmaking techniques]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of printmaking techniques is unknown.
|-
| &lt;li&gt;[[List of printmaking awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of printmaking awards is unknown.
|-
| rowspan=3 | [[Sculpture]]{{anchor|Sculpture}}
| &lt;li&gt;[[List of sculptures]]
{{User:Emijrp/AHKrow|P31=Q860861|wikidata=59115|estimate=}}
| Total number of sculptures is unknown.
|-
| &lt;li&gt;[[List of sculpture styles]]
{{User:Emijrp/AHKrow|P31=Q18783400|wikidata=23|estimate=}}
| Total number of sculpture styles is unknown.
|-
| &lt;li&gt;[[List of sculpture awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of sculpture awards is unknown.
|-
| rowspan=1 | [[Textile arts]]{{anchor|Textile arts}}
| &lt;li&gt;
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of textile arts articles is unknown.
|-
{{User:Emijrp/AHKrowtotal|wikidata=366803|estimate=366803}}
|}

== Geography ==

'''[[Geography]]''' is the [[science]] that studies the lands, features, inhabitants, and phenomena of [[Earth]]. This section covers every human geography settlement and every physical geography location in the world.

See also [[:Category:Geography-related lists]], [[:Category:Lists of places]], [[GEOnet Names Server]]&lt;ref&gt;{{cite web | url=http://earth-info.nga.mil/gns/html/cntry_files.html | title=Complete Files of Geographic Names for Geopolitical Areas from GNS | archiveurl=http://wayback.archive.org/web/20120823004343/http://earth-info.nga.mil/gns/html/cntry_files.html | archivedate=2012-08-23 | deadurl=yes}} [[User:Emijrp/GNS]]&lt;/ref&gt; and [[Geonames]].&lt;ref&gt;{{cite web|url=http://geonames.org|title=Geonames}} [[User:Emijrp/Geonames]]&lt;/ref&gt;

&lt;gallery mode="packed-hover"&gt;
File:Imageworld-artphp3.png|Worldwide density of geotagged [[Wikipedia]] entries
File:Geonames4.png|Worldwide density of [[GeoNames]] entries
&lt;/gallery&gt;

=== Human geography ===

&lt;!--&lt;div style="width: 300px;float: right;"&gt;
{{divbox|radius=10px|1=grayh|2=Soundtrack for this section:|3=&lt;li&gt;[https://www.youtube.com/watch?v=Pwe-pA6TaZk Where the Hell is Matt? 2012]&lt;li&gt;[https://www.youtube.com/watch?v=zlfKdbWwruY Where the Hell is Matt? 2008]}}
&lt;/div&gt;--&gt;
[[File:OrteliusWorldMap.jpeg|thumb|200px|1570 world map by [[Abraham Ortelius]].]]
'''[[Human geography]]''' is the branch of the [[social science]]s that deals with the study of people and their communities,
cultures, economies and interaction with the environment by noticing their relations with and across space and place.&lt;ref name="HGDICT"&gt;{{Cite encyclopedia|last=Johnston|first=Ron|editor1-last=Johnston|editor1-first=Ron|editor2-last=Gregory|editor2-first=Derek|editor3-last=Pratt|editor3-first=Geraldine|display-editors = 3 |editor4-last=Watts|editor4-first=Michael|title=Human Geography|encyclopedia=The Dictionary of Human Geography| pages=353–60|publisher=Blackwell|location=Oxford|year=2000}}&lt;/ref&gt; As an intellectual discipline, [[geography]] is divided into the sub-fields of [[physical geography]] and human geography, the latter concentrating upon the study of human activities, by the application of [[Qualitative research|qualitative]] and [[Quantitative research|quantitative]] research methods.

{{main|List of sovereign states|Table of administrative divisions by country|Municipality|Village}}
{{see also|Template:Articles on third-level administrative divisions of countries|Template:Articles on fourth-level administrative divisions of countries}}
{{category see also|Lists of countries|Lists by country|Bibliographies of countries or regions|Outlines of countries}}

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="200px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=2 | {{flag|United Nations|name=Earth}}
| &lt;li&gt;[[List of sovereign states]]
{{User:Emijrp/AHKrow|P31=Q3624078|wikidata=654|estimate=206}}
| Membership within the United Nations system divides 206 listed sovereign states into three categories: 193 member states, two observer states, and 11 other states.&lt;ref name="unms"&gt;{{cite web|title=United Nations Member States|url=http://www.un.org/en/members/index.shtml|publisher=United Nations|author=Press Release ORG/1469|accessdate=28 February 2011|date=3 July 2006}}&lt;/ref&gt; If we count former states ([[Roman Empire]], etc) we get up to 400. 
|-
| &lt;li&gt;[[List of micronations]] ([[:Category:Micronations|cat]])
{{User:Emijrp/AHKrow|P31=Q188443|wikidata=123|estimate=100}}
| Notable micronations are probably over 100.
|}

==== Africa ====
[[File:Africa (orthographic projection).svg|thumb|right|200px|Africa]]
'''[[Africa]]''' is the world's second-largest and second-most-populous [[continent]]. At about 30.3 million km² (11.7 million square&amp;nbsp;miles) including adjacent islands, it covers six per cent of [[Earth]]'s total surface area and 20.4 per cent of its total land area. With 1.1 billion people as of 2013, it accounts for about 15% of the world's human population. The continent is surrounded by the [[Mediterranean Sea]] to the north, both the [[Suez Canal]] and the [[Red Sea]] along the [[Sinai Peninsula]] to the northeast, the [[Indian Ocean]] to the southeast, and the [[Atlantic Ocean]] to the west. The continent includes [[Madagascar]] and various [[archipelago]]s. It contains 54 [[diplomatic recognition|fully recognized]] [[sovereign state]]s ([[country|countries]]), nine [[Territory (country subdivision)|territories]] and two ''de facto'' independent [[List of states with limited recognition|states with limited or no recognition]].

Africa hosts a large diversity of ethnicities, cultures and languages. In the late 19th century European countries [[new imperialism|colonized most of Africa]]. Africa also varies greatly with regard to environments, economics, historical ties and government systems. However, most present states in Africa originate from a process of [[decolonization]] in the 20th century.

{{main|List of sovereign states and dependent territories in Africa|List of cities in Africa}}
{{see also|Template:Articles on first-level administrative divisions of African countries|Template:Articles on second-level administrative divisions of African countries}}

&lt;gallery mode="packed-hover"&gt;
File:Lagos Island.jpg|[[Lagos]], {{flag|Nigeria}}
File:View from Cairo Tower 31march2007.jpg|[[Cairo]], {{flag|Egypt}}
File:Isbaheysiga Mosque in Mogadishu (2).jpg|[[Mogadishu]], {{flag|Somalia}}
File:Khartoum.jpg|[[Khartoum]]-[[Omdurman]], {{flag|Sudan}}
File:NBO5.jpg|[[Nairobi]], {{flag|Kenya}}
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="150px" | Country 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=3 | {{flag|Algeria}}
| &lt;li&gt;[[Provinces of Algeria]]
{{User:Emijrp/AHKrow|P31=Q240601|wikidata=48|estimate=48}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Algeria]]
{{User:Emijrp/AHKrow|P31=Q2614970|wikidata=534|estimate=553}}
|-
| &lt;li&gt;[[Communes of Algeria]]
{{User:Emijrp/AHKrow|P31=Q2989398|wikidata=1503|estimate=1541}}
|-
| rowspan=3 | {{flag|Angola}}
| &lt;li&gt;[[Provinces of Angola]]
{{User:Emijrp/AHKrow|P31=Q329028|wikidata=18|estimate=18}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Municipalities of Angola]]
{{User:Emijrp/AHKrow|P31=Q378508|wikidata=571|estimate=162}}
|-
| &lt;li&gt;[[Communes of Angola]]
{{User:Emijrp/AHKrow|P31=Q1841580|wikidata=35|estimate=559}}
|-
| rowspan=4 | {{flag|Benin}}
| &lt;li&gt;[[Departments of Benin]]
{{User:Emijrp/AHKrow|P31=Q792929|wikidata=12|estimate=12}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Communes of Benin]]
{{User:Emijrp/AHKrow|P31=Q1780506|wikidata=78|estimate=77}}
|-
| &lt;li&gt;[[Arrondissements of Benin]]
{{User:Emijrp/AHKrow|P31=Q3623867|wikidata=491|estimate=546}}
|-
| &lt;li&gt;[[Villages of Benin]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=2 | {{flag|Botswana}}
| &lt;li&gt;[[Districts of Botswana]]
{{User:Emijrp/AHKrow|P31=Q57368|wikidata=9|estimate=16}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Sub-districts of Botswana]]
{{User:Emijrp/AHKrow|P31=Q58017|wikidata=2|estimate=19}}
|-
| rowspan=3 | {{flag|Burkina Faso}}
| &lt;li&gt;[[Regions of Burkina Faso]]
{{User:Emijrp/AHKrow|P31=Q867094|wikidata=13|estimate=13}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Provinces of Burkina Faso]]
{{User:Emijrp/AHKrow|P31=Q852151|wikidata=45|estimate=45}}
|-
| &lt;li&gt;[[Departments of Burkina Faso]]
{{User:Emijrp/AHKrow|P31=Q2566190|wikidata=359|estimate=351}}
|-
| rowspan=3 | {{flag|Burundi}}
| &lt;li&gt;[[Provinces of Burundi]]
{{User:Emijrp/AHKrow|P31=Q476075|wikidata=18|estimate=17}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Communes of Burundi]]
{{User:Emijrp/AHKrow|P31=Q1577513|wikidata=129|estimate=117}}
|-
| &lt;li&gt;[[Collines of Burundi]]
{{User:Emijrp/AHKrow|P31=Q2904674|wikidata=0|estimate=2639}}
|-
| rowspan=4 | {{flag|Cameroon}}
| &lt;li&gt;[[Regions of Cameroon]]
{{User:Emijrp/AHKrow|P31=Q869042|wikidata=10|estimate=10}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Departments of Cameroon]]
{{User:Emijrp/AHKrow|P31=Q2306813|wikidata=58|estimate=58}}
|-
| &lt;li&gt;[[Communes of Cameroon]]
{{User:Emijrp/AHKrow|P31=Q3076994|wikidata=315|estimate=300}}
|-
| &lt;li&gt;[[Subdistricts of Cameroon]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=2 | {{flag|Cape Verde}}
| &lt;li&gt;Concelhos of Cape Verde
{{User:Emijrp/AHKrow|P31=Q12712989|wikidata=24|estimate=22}}
| rowspan=2 | 
|-
| &lt;li&gt;Freguesias of Cape Verde
{{User:Emijrp/AHKrow|P31=Q12712991|wikidata=31|estimate=32}}
|-
| rowspan=3 | {{flag|Central African Republic}}
| &lt;li&gt;[[Prefectures of the Central African Republic|Prefectures]]
{{User:Emijrp/AHKrow|P31=Q843886|wikidata=15|estimate=14}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Sub-prefectures of the Central African Republic|Sub-prefectures]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=71}}
|-
| &lt;li&gt;[[Communes of the Central African Republic|Communes]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=170}}
|-
| rowspan=4 | {{flag|Chad}}
| &lt;li&gt;[[Regions of Chad]]
{{User:Emijrp/AHKrow|P31=Q640262|wikidata=24|estimate=22}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Departments of Chad]]
{{User:Emijrp/AHKrow|P31=Q2711758|wikidata=63|estimate=53}}
|-
| &lt;li&gt;[[Sub-prefectures of Chad]]
{{User:Emijrp/AHKrow|P31=Q7630629|wikidata=0|estimate=348}}
|-
| &lt;li&gt;[[Rural communities of Chad]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=3 | {{flag|Comoros}}
| &lt;li&gt;[[List of islands of Comoros|Mayor islands of Comoros]]
{{User:Emijrp/AHKrow|P31=Q21073990|wikidata=3|estimate=3}}
| rowspan=3 | Three islands under the control of the Comoros ([[Mwali]], [[Ngazidja]], [[Nzwani]]) have the status of autonomous islands (formerly governorates). A fourth island, Mahoré (Mayotte), is administered by France but claimed by the Comoros.
|-
| &lt;li&gt;[[List of islands of Comoros|Minor islands of Comoros]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=20}}
|-
| &lt;li&gt;[[Municipalities of Comoros]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=4 | {{flag|Democratic Republic of the Congo}}
| &lt;li&gt;[[Provinces of the Democratic Republic of the Congo|Provinces of the D. R. Congo]]
{{User:Emijrp/AHKrow|P31=Q5283559|wikidata=24|estimate=26}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Territories of the Democratic Republic of the Congo|Territories of the D. R. Congo]]
{{User:Emijrp/AHKrow|P31=Q7703797|wikidata=60|estimate=192}}
|-
| &lt;li&gt;[[Chiefdoms and sectors of the Democratic Republic of the Congo|Chiefdoms and sectors of the D. R. Congo]]
{{User:Emijrp/AHKrow|P31=Q5097099|wikidata=0|estimate=}}
|-
| &lt;li&gt;[[Districts of the Democratic Republic of the Congo|Districts of the D. R. Congo]]
{{User:Emijrp/AHKrow|P31=Q5283559|wikidata=24|estimate=26}}
|-
| rowspan=3 | {{flag|Republic of the Congo}}
| &lt;li&gt;[[Departments of the Republic of the Congo]]
{{User:Emijrp/AHKrow|P31=Q868893|wikidata=11|estimate=12}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of the Republic of the Congo]]
{{User:Emijrp/AHKrow|P31=Q1958165|wikidata=46|estimate=86}}
|-
| &lt;li&gt;[[Communes of the Republic of the Congo]]
{{User:Emijrp/AHKrow|P31=Q5154054|wikidata=0|estimate=7}}
|-
| rowspan=5 | {{flag|Côte d'Ivoire}}
| &lt;li&gt;[[Regions of Côte d'Ivoire]]
{{User:Emijrp/AHKrow|P31=Q851830|wikidata=21|estimate=31}}
| rowspan=5 | Prior to 2011 there were over 1300 communes. In March 2012, the government abolished 1126 communes. As a result of the reorganisation, there are now 197 communes in Ivory Coast.
|-
| &lt;li&gt;[[Departments of Côte d'Ivoire]]
{{User:Emijrp/AHKrow|P31=Q617807|wikidata=77|estimate=81}}
|-
| &lt;li&gt;[[Sub-prefectures of Côte d'Ivoire]]
{{User:Emijrp/AHKrow|P31=Q20981165|wikidata=0|estimate=510}}
|-
| &lt;li&gt;[[Districts of Ivory Coast]]
{{User:Emijrp/AHKrow|P31=Q20717263|wikidata=12|estimate=12}}
|-
| &lt;li&gt;[[Communes of Ivory Coast]]
{{User:Emijrp/AHKrow|P31=Q2679157|wikidata=1014|estimate=1300}}
|-
| rowspan=2 | {{flag|Djibouti}}
| &lt;li&gt;[[Regions of Djibouti]]
{{User:Emijrp/AHKrow|P31=Q1202812|wikidata=6|estimate=5}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of Djibouti]]
{{User:Emijrp/AHKrow|P31=Q2982272|wikidata=12|estimate=11}}
|-
| rowspan=3 | {{flag|Egypt}}
| &lt;li&gt;[[Governorates of Egypt]]
{{User:Emijrp/AHKrow|P31=Q204910|wikidata=27|estimate=27}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Regions of Egypt]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=232}}
|-
| &lt;li&gt;[[Villages of Egypt]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=4617}}
|-
| rowspan=2 | {{flag|Equatorial Guinea}}
| &lt;li&gt;[[Provinces of Equatorial Guinea]]
{{User:Emijrp/AHKrow|P31=Q867597|wikidata=7|estimate=7}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of Equatorial Guinea]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=30}}
|-
| rowspan=2 | {{flag|Eritrea}}
| &lt;li&gt;[[Regions of Eritrea]]
{{User:Emijrp/AHKrow|P31=Q874223|wikidata=6|estimate=6}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Subregions of Eritrea]]
{{User:Emijrp/AHKrow|P31=Q3729800|wikidata=60|estimate=}}
|-
| rowspan=4 | {{flag|Ethiopia}}
| &lt;li&gt;[[Regions of Ethiopia]]
{{User:Emijrp/AHKrow|P31=Q1057504|wikidata=10|estimate=9}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Zones of Ethiopia]]
{{User:Emijrp/AHKrow|P31=Q219875|wikidata=72|estimate=68}}
|-
| &lt;li&gt;[[Districts of Ethiopia]]
{{User:Emijrp/AHKrow|P31=Q690840|wikidata=368|estimate=770}}
|-
| &lt;li&gt;[[Kebeles of Ethiopia]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=2 | {{flag|Gabon}}
| &lt;li&gt;[[Provinces of Gabon]]
{{User:Emijrp/AHKrow|P31=Q653596|wikidata=9|estimate=9}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Departments of Gabon]]
{{User:Emijrp/AHKrow|P31=Q655851|wikidata=50|estimate=49}}
|-
| rowspan=3 | {{flag|Gambia}}
| &lt;li&gt;[[Divisions of the Gambia|Regions of the Gambia]]
{{User:Emijrp/AHKrow|P31=Q15646510|wikidata=7|estimate=}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of the Gambia]]
{{User:Emijrp/AHKrow|P31=Q1504917|wikidata=34|estimate=37}}
|-
| &lt;li&gt;Local government areas
{{User:Emijrp/AHKrow|P31=Q2054441|wikidata=7|estimate=}}
|-
| rowspan=6 | {{flag|Ghana}}
| &lt;li&gt;[[Regions of Ghana]]
{{User:Emijrp/AHKrow|P31=Q1052743|wikidata=10|estimate=10}}
| rowspan=6 | 
|-
| &lt;li&gt;[[Districts of Ghana]]
{{User:Emijrp/AHKrow|P31=Q545769|wikidata=170|estimate=138}}
|-
| &lt;li&gt;[[Town or area councils of Ghana]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=58}}
|-
| &lt;li&gt;[[Zonal councils of Ghana]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=108}}
|-
| &lt;li&gt;[[Area councils of Ghana]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=626}}
|-
| &lt;li&gt;[[Unit committees of Ghana]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=16000}}
|-
| rowspan=4 | {{flag|Guinea}}
| &lt;li&gt;[[Regions of Guinea]]
{{User:Emijrp/AHKrow|P31=Q1067116|wikidata=8|estimate=8}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Prefectures of Guinea]]
{{User:Emijrp/AHKrow|P31=Q1394653|wikidata=33|estimate=33}}
|-
| &lt;li&gt;[[Sub-prefectures of Guinea]]
{{User:Emijrp/AHKrow|P31=Q1853398|wikidata=169|estimate=303}}
|-
| &lt;li&gt;[[Urban communes of Guinea]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=38}}
|-
| rowspan=2 | {{flag|Guinea-Bissau}}
| &lt;li&gt;[[Regions of Guinea-Bissau]]
{{User:Emijrp/AHKrow|P31=Q1054403|wikidata=6|estimate=8}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Sectors of Guinea-Bissau]]
{{User:Emijrp/AHKrow|P31=Q7444736|wikidata=11|estimate=37}}
|-
| rowspan=5 | {{flag|Kenya}}
| &lt;li&gt;[[Provinces of Kenya]]
{{User:Emijrp/AHKrow|P31=Q70252|wikidata=8|estimate=8}}
| rowspan=5 | 
|-
| &lt;li&gt;[[Districts of Kenya]]
{{User:Emijrp/AHKrow|P31=Q3239205|wikidata=4|estimate=46}}
|-
| &lt;li&gt;[[Divisions of Kenya]]
{{User:Emijrp/AHKrow|P31=Q4893522|wikidata=0|estimate=262}}
|-
| &lt;li&gt;[[Locations of Kenya]]
{{User:Emijrp/AHKrow|P31=Q269218|wikidata=47|estimate=2427}}
|-
| &lt;li&gt;[[Sublocations of Kenya]]
{{User:Emijrp/AHKrow|P31=Q7630574|wikidata=0|estimate=6612}}
|-
| rowspan=3 | {{flag|Lesotho}}
| &lt;li&gt;[[Districts of Lesotho]]
{{User:Emijrp/AHKrow|P31=Q844531|wikidata=10|estimate=10}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Constituencies of Lesotho]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=80}}
|-
| &lt;li&gt;[[Community councils of Lesotho]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=129}}
|-
| rowspan=3 | {{flag|Liberia}}
| &lt;li&gt;[[Counties of Liberia]]
{{User:Emijrp/AHKrow|P31=Q874821|wikidata=15|estimate=15}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Liberia]]
{{User:Emijrp/AHKrow|P31=Q2421044|wikidata=110|estimate=50}}
|-
| &lt;li&gt;[[Clans of Liberia]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=3 | {{flag|Libya}}
| &lt;li&gt;[[Districts of Libya]]
{{User:Emijrp/AHKrow|P31=Q48242|wikidata=21|estimate=22}}
| rowspan=3 |
|-
| &lt;li&gt;[[Provinces of Libya]]
{{User:Emijrp/AHKrow|P31=Q7252591|wikidata=3|estimate=}}
|-
| &lt;li&gt;[[Governorates of Libya]]
{{User:Emijrp/AHKrow|P31=Q15630943|wikidata=10|estimate=}}
|-
| rowspan=5 | {{flag|Madagascar}}
| &lt;li&gt;[[Provinces of Madagascar]]
{{User:Emijrp/AHKrow|P31=Q864133|wikidata=6|estimate=6}}
| rowspan=5 |
|-
| &lt;li&gt;[[Regions of Madagascar]]
{{User:Emijrp/AHKrow|P31=Q971831|wikidata=22|estimate=22}}
|-
| &lt;li&gt;[[Departments of Madagascar]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=110}}
|-
| &lt;li&gt;[[Districts of Madagascar]]
{{User:Emijrp/AHKrow|P31=Q3556789|wikidata=41|estimate=}}
|-
| &lt;li&gt;[[Communes of Madagascar]]
{{User:Emijrp/AHKrow|P31=Q3192808|wikidata=1262|estimate=}}
&lt;!--
|-
| &lt;li&gt;[[Firaisana of Madagascar]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1200}}
|-
| &lt;li&gt;[[Fokontany of Madagascar]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=11000}}
--&gt;
|-
| rowspan=4 | {{flag|Malawi}}
| &lt;li&gt;[[Regions of Malawi]]
{{User:Emijrp/AHKrow|P31=Q3271886|wikidata=3|estimate=3}}
| rowspan=4 |
|-
| &lt;li&gt;[[Districts of Malawi]]
{{User:Emijrp/AHKrow|P31=Q1058387|wikidata=28|estimate=28}}
|-
| &lt;li&gt;[[Traditional authorities of Malawi]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=130}}
|-
| &lt;li&gt;[[Subchiefdoms of Malawi]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=60}}
|-
| rowspan=4 | {{flag|Mali}}
| &lt;li&gt;[[Regions of Mali]]
{{User:Emijrp/AHKrow|P31=Q743074|wikidata=8|estimate=8}}
| rowspan=4 |
|-
| &lt;li&gt;[[Cercles of Mali]]
{{User:Emijrp/AHKrow|P31=Q2115792|wikidata=50|estimate=49}}
|-
| &lt;li&gt;[[Arrondissements of Mali]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1400}}
|-
| &lt;li&gt;[[Communes of Mali]]
{{User:Emijrp/AHKrow|P31=Q1758856|wikidata=669|estimate=703}}
|-
| rowspan=3 | {{flag|Mauritania}}
| &lt;li&gt;[[Regions of Mauritania]]
{{User:Emijrp/AHKrow|P31=Q846327|wikidata=15|estimate=12}}
| rowspan=3 |
|-
| &lt;li&gt;[[Departments of Mauritania]]
{{User:Emijrp/AHKrow|P31=Q3263368|wikidata=43|estimate=44}}
|-
| &lt;li&gt;[[Communes of Mauritania]]
{{User:Emijrp/AHKrow|P31=Q2989470|wikidata=230|estimate=200}}
|-
| rowspan=2 | {{flag|Mauritius}}
| &lt;li&gt;[[Districts of Mauritius]]
{{User:Emijrp/AHKrow|P31=Q1139753|wikidata=9|estimate=9}}
| rowspan=2 |
|-
| &lt;li&gt;[[List of places in Mauritius]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=124}}
|-
| rowspan=4 | {{flag|Morocco}}
| &lt;li&gt;[[Regions of Morocco]]
{{User:Emijrp/AHKrow|P31=Q845643|wikidata=35|estimate=12}}
| rowspan=4 |
|-
| &lt;li&gt;[[Administrative divisions of Morocco]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=13}}
|-
| &lt;li&gt;[[Provinces of Morocco]]
{{User:Emijrp/AHKrow|P31=Q15623950|wikidata=15|estimate=48}}
|-
| &lt;li&gt;[[Municipalities of Morocco]]
{{User:Emijrp/AHKrow|P31=Q2989400|wikidata=1562|estimate=}}
|-
| rowspan=3 | {{flag|Mozambique}}
| &lt;li&gt;[[Provinces of Mozambique]]
{{User:Emijrp/AHKrow|P31=Q695469|wikidata=10|estimate=10}}
| rowspan=3 |
|-
| &lt;li&gt;[[Districts of Mozambique]]
{{User:Emijrp/AHKrow|P31=Q2068214|wikidata=138|estimate=128}}
|-
| &lt;li&gt;[[Postos of Mozambique]]
{{User:Emijrp/AHKrow|P31=Q179233|wikidata=1|estimate=400}}
|-
| rowspan=2 | {{flag|Namibia}}
| &lt;li&gt;[[Regions of Namibia]]
{{User:Emijrp/AHKrow|P31=Q608843|wikidata=14|estimate=13}}
| rowspan=2 |
|-
| &lt;li&gt;[[Constituencies of Namibia]]
{{User:Emijrp/AHKrow|P31=Q1853630|wikidata=121|estimate=107}}
|-
| rowspan=3 | {{flag|Niger}}
| &lt;li&gt;[[Regions of Niger]]
{{User:Emijrp/AHKrow|P31=Q859869|wikidata=7|estimate=7}}
| rowspan=3 |
|-
| &lt;li&gt;[[Departments of Niger]]
{{User:Emijrp/AHKrow|P31=Q2914501|wikidata=62|estimate=63}}
|-
| &lt;li&gt;[[Communes of Niger]]
{{User:Emijrp/AHKrow|P31=Q605291|wikidata=263|estimate=265}}
|-
| rowspan=2 | {{flag|Nigeria}}
| &lt;li&gt;[[States of Nigeria]]
{{User:Emijrp/AHKrow|P31=Q465842|wikidata=46|estimate=36}}
| rowspan=2 |
|-
| &lt;li&gt;[[Local Government Areas of Nigeria]]
{{User:Emijrp/AHKrow|P31=Q1639634|wikidata=756|estimate=774}}
|-
| rowspan=4 | {{flag|Rwanda}}
| &lt;li&gt;[[Provinces of Rwanda]]
{{User:Emijrp/AHKrow|P31=Q871217|wikidata=16|estimate=5}}
| rowspan=4 |
|-
| &lt;li&gt;[[Districts of Rwanda]]
{{User:Emijrp/AHKrow|P31=Q1841634|wikidata=31|estimate=30}}
|-
| &lt;li&gt;[[Imirenge of Rwanda]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=410}}
|-
| &lt;li&gt;[[Utugari of Rwanda]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=9100}}
|-
| rowspan=2 | {{flag|São Tomé and Príncipe}}
| &lt;li&gt;[[Provinces of São Tomé and Príncipe]]
{{User:Emijrp/AHKrow|P31=Q1051411|wikidata=2|estimate=2}}
| rowspan=2 |
|-
| &lt;li&gt;[[Districts of São Tomé and Príncipe]]
{{User:Emijrp/AHKrow|P31=Q911736|wikidata=7|estimate=7}}
|-
| rowspan=4 | {{flag|Senegal}}
| &lt;li&gt;[[Regions of Senegal]]
{{User:Emijrp/AHKrow|P31=Q847667|wikidata=14|estimate=14}}
| rowspan=4 |
|-
| &lt;li&gt;[[Departments of Senegal]]
{{User:Emijrp/AHKrow|P31=Q751030|wikidata=45|estimate=45}}
|-
| &lt;li&gt;[[Arrondissements of Senegal]]
{{User:Emijrp/AHKrow|P31=Q2424478|wikidata=153|estimate=103}}
|-
| &lt;li&gt;[[Rural communities of Senegal]]
{{User:Emijrp/AHKrow|P31=Q369385|wikidata=380|estimate=340}}
|-
| rowspan=1 | {{flag|Seychelles}}
| &lt;li&gt;[[Districts of Seychelles]]
{{User:Emijrp/AHKrow|P31=Q1149621|wikidata=25|estimate=25}}
| rowspan=1 |
|-
| rowspan=3 | {{flag|Sierra Leone}}
| &lt;li&gt;[[Provinces of Sierra Leone]]
{{User:Emijrp/AHKrow|P31=Q1145005|wikidata=3|estimate=3}}
| rowspan=3 |
|-
| &lt;li&gt;[[Districts of Sierra Leone]]
{{User:Emijrp/AHKrow|P31=Q1298632|wikidata=12|estimate=14}}
|-
| &lt;li&gt;[[Chiefdoms of Sierra Leone]]
{{User:Emijrp/AHKrow|P31=Q5097104|wikidata=34|estimate=149}}
|-
| rowspan=2 | {{flag|Somalia}}
| &lt;li&gt;[[Administrative divisions of Somalia]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=18}}
| rowspan=2 |
|-
| &lt;li&gt;[[Districts of Somalia]]
{{User:Emijrp/AHKrow|P31=Q18555638|wikidata=130|estimate=75}}
|-
| rowspan=1 | {{flag|Somaliland}}
| &lt;li&gt;[[Regions of Somaliland]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=13}}
| rowspan=1 |
|-
| rowspan=4 | {{flag|South Africa}}
| &lt;li&gt;[[Provinces of South Africa]]
{{User:Emijrp/AHKrow|P31=Q191093|wikidata=10|estimate=9}}
| rowspan=4 |
|-
| &lt;li&gt;[[Districts of South Africa]]
{{User:Emijrp/AHKrow|P31=Q1589568|wikidata=45|estimate=52}}
|-
| &lt;li&gt;[[Local municipalities of South Africa]]
{{User:Emijrp/AHKrow|P31=Q1500352|wikidata=230|estimate=226}}
|-
| &lt;li&gt;[[Wards of South Africa]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=4277}}
|-
| rowspan=2 | {{flag|South Sudan}}
| &lt;li&gt;[[States of South Sudan]]
{{User:Emijrp/AHKrow|P31=Q496539|wikidata=52|estimate=10}}
| rowspan=2 |
|-
| &lt;li&gt;[[Counties of South Sudan]]
{{User:Emijrp/AHKrow|P31=Q279479|wikidata=28|estimate=86}}
|-
| rowspan=3 | {{flag|Sudan}}
| &lt;li&gt;[[States of Sudan]]
{{User:Emijrp/AHKrow|P31=Q746290|wikidata=18|estimate=17}}
| rowspan=3 |
|-
| &lt;li&gt;[[Districts of Sudan]]
{{User:Emijrp/AHKrow|P31=Q505830|wikidata=55|estimate=133}}
|-
| &lt;li&gt;[[Villages of Sudan]]
{{User:Emijrp/AHKrow|P31=Q23827730|wikidata=199|estimate=}}
|-
| rowspan=3 | {{flag|Swaziland}}
| &lt;li&gt;[[Districts of Swaziland]]
{{User:Emijrp/AHKrow|P31=Q1069042|wikidata=4|estimate=4}}
| rowspan=3 |
|-
| &lt;li&gt;[[Tinkhundla of Swaziland]]
{{User:Emijrp/AHKrow|P31=Q2280192|wikidata=4|estimate=55}}
|-
| &lt;li&gt;[[Imiphakatsi of Swaziland]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=360}}
|-
| rowspan=4 | {{flag|Tanzania}}
| &lt;li&gt;[[Regions of Tanzania]]
{{User:Emijrp/AHKrow|P31=Q845820|wikidata=30|estimate=30}}
| rowspan=4 |
|-
| &lt;li&gt;[[Districts of Tanzania]]
{{User:Emijrp/AHKrow|P31=Q2409750|wikidata=121|estimate=129}}
|-
| &lt;li&gt;[[Wards of Tanzania]]
{{User:Emijrp/AHKrow|P31=Q18691601|wikidata=728|estimate=}}
|-
| &lt;li&gt;[[Villages of Tanzania]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=2 | {{flag|Togo}}
| &lt;li&gt;[[Regions of Togo]]
{{User:Emijrp/AHKrow|P31=Q139228|wikidata=5|estimate=5}}
| rowspan=2 |
|-
| &lt;li&gt;[[Prefectures of Togo]]
{{User:Emijrp/AHKrow|P31=Q828485|wikidata=13|estimate=30}}
|-
| rowspan=3 | {{flag|Tunisia}}
| &lt;li&gt;[[Governorates of Tunisia]]
{{User:Emijrp/AHKrow|P31=Q690084|wikidata=24|estimate=24}}
| rowspan=3 |
|-
| &lt;li&gt;[[Delegations of Tunisia]]
{{User:Emijrp/AHKrow|P31=Q1184072|wikidata=263|estimate=264}}
|-
| &lt;li&gt;[[Sectors of Tunisia]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=2073}}
|-
| rowspan=5 | {{flag|Uganda}}
| &lt;li&gt;[[Districts of Uganda]]
{{User:Emijrp/AHKrow|P31=Q3539870|wikidata=114|estimate=111}}
| rowspan=5 |
|-
| &lt;li&gt;[[Counties of Uganda]]
{{User:Emijrp/AHKrow|P31=Q5177124|wikidata=4|estimate=146}}
|-
| &lt;li&gt;[[Sub-counties of Uganda]]
{{User:Emijrp/AHKrow|P31=Q7630601|wikidata=11|estimate=1106}}
|-
| &lt;li&gt;[[Parishes of Uganda]]
{{User:Emijrp/AHKrow|P31=Q22683078|wikidata=8|estimate=}}
|-
| &lt;li&gt;[[Villages of Uganda]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=2 | {{flag|Zambia}}
| &lt;li&gt;[[Provinces of Zambia]]
{{User:Emijrp/AHKrow|P31=Q15313730|wikidata=10|estimate=9}}
| rowspan=2 |
|-
| &lt;li&gt;[[Districts of Zambia]]
{{User:Emijrp/AHKrow|P31=Q2744064|wikidata=74|estimate=72}}
|-
| rowspan=3 | {{flag|Zimbabwe}}
| &lt;li&gt;[[Provinces of Zimbabwe]]
{{User:Emijrp/AHKrow|P31=Q492042|wikidata=10|estimate=10}}
| rowspan=3 |
|-
| &lt;li&gt;[[Districts of Zimbabwe]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=59}}
|-
| &lt;li&gt;[[Wards of Zimbabwe]]
{{User:Emijrp/AHKrow|P31=Q3444249|wikidata=54|estimate=1200}}
|-
{{User:Emijrp/AHKrowtotal|wikidata=16166|estimate=85071}}
|}

==== Asia ====
[[File:Asia (orthographic projection).svg|thumb|right|200px|Asia]]
'''[[Asia]]''' is [[Earth]]'s largest and most populous [[continent]], located primarily in the [[eastern hemisphere|eastern]] and [[northern hemisphere|northern]] hemispheres and sharing the continental landmass of [[Eurasia]] with the continent of [[Europe]]. Asia covers an area of {{convert|44,579,000|km2|sqmi}}, about 30% of Earth's total land area and 8.7% of the Earth's total surface area. The continent, which has long been home to the majority of the [[human population]],&lt;ref&gt;{{cite web|title=The World at Six Billion|url=http://www.un.org/esa/population/publications/sixbillion/sixbillion.htm|publisher=UN Population Division|archiveurl=https://web.archive.org/web/20160305042434/http://www.un.org/esa/population/publications/sixbillion/sixbillion.htm |archivedate=March 5, 2016 |deadurl=no}}, [http://web.archive.org/web/20160101220025/http://www.un.org/esa/population/publications/sixbillion/sixbilpart1.pdf Table 2]&lt;/ref&gt; was the site of many of the [[cradle of civilization|first civilizations]]. Asia is notable for not only its overall large size and population, but also dense and large settlements as well as vast barely populated regions within the continent of 4.4 billion people. Asia has 49 recognized states, 5 partially recognized and unrecognized states and 6 dependent territories and other territories.

Given its size and diversity, the concept of Asia—a [[toponymy|name]] dating back to [[classical antiquity]]—may actually have more to do with [[human geography]] than [[physical geography]].&lt;ref name=McG-H&gt;{{cite web | title=Asia | url=http://accessscience.com/abstract.aspx?id=054800&amp;referURL=http%3a%2f%2faccessscience.com%2fcontent.aspx%3fid%3d054800 | work=AccessScience | publisher=McGraw-Hill | accessdate=26 July 2011 | archivedate=27 November 2011 | archiveurl=https://web.archive.org/web/20111127141127/http://accessscience.com/abstract.aspx?id=054800&amp;referURL=http%3a%2f%2faccessscience.com%2fcontent.aspx%3fid%3d054800}}&lt;/ref&gt; Asia varies greatly across and within [[Regions of Asia|its regions]] with regard to ethnic groups, cultures, environments, economics, historical ties and government systems. It also has a mix of many different climates ranging from the equatorial south via the hot desert in the [[Middle East]], temperate areas in the east and the extremely continental centre to vast subarctic and polar areas in [[Siberia]].

{{main|List of sovereign states and dependent territories in Asia|List of cities in Asia}}
{{see also|Template:Articles on first-level administrative divisions of Asian countries|Template:Articles on second-level administrative divisions of Asian countries}}

&lt;gallery mode="packed-hover"&gt;
File:Vista de Ciudad Ho Chi Minh desde Bitexco Financial Tower, Vietnam, 2013-08-14, DD 13.JPG|[[Ho Chi Minh City]], {{flag|Vietnam}}
File:Victorious Fatherland Liberation War Museum and Ryugyong Hotel (11342673725).jpg|[[Pyongyang]], {{flag|North Korea}}
File:2012 Pudong.jpg|[[Shanghai]], {{flag|China}}
File:Tehran Skyline.jpg|[[Tehran]], {{flag|Iran}}
File:Skyscrapers of Shinjuku 2009 January.jpg|[[Tokyo]], {{flag|Japan}}
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="150px" | Country 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=2 | {{flag|Afghanistan}}
| &lt;li&gt;[[Provinces of Afghanistan]]
{{User:Emijrp/AHKrow|P31=Q158683|wikidata=34|estimate=38}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of Afghanistan]]
{{User:Emijrp/AHKrow|P31=Q496825|wikidata=425|estimate=398}}
|-
| rowspan=4 | {{flag|Armenia}}
| &lt;li&gt;[[Administrative divisions of Armenia|Provinces of Armenia]]
{{User:Emijrp/AHKrow|P31=Q514860|wikidata=10|estimate=10}}
| rowspan=4 | 
|-
| &lt;li&gt;[[List of municipalities of Armenia]]
{{User:Emijrp/AHKrow|P31=Q3685430|wikidata=870|estimate=915}}
|-
| &lt;li&gt;[[Towns of Armenia]]
{{User:Emijrp/AHKrow|P31=Q20724701|wikidata=72|estimate=}}
|-
| &lt;li&gt;[[Villages of Armenia]]
{{User:Emijrp/AHKrow|P31=Q28328984|wikidata=796|estimate=}}
|-
| rowspan=3 | {{flag|Azerbaijan}}
| &lt;li&gt;[[Regions of Azerbaijan]]
{{User:Emijrp/AHKrow|P31=Q2610712|wikidata=1|estimate=}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Regions of Azerbaijan|Districts of Azerbaiyan]]
{{User:Emijrp/AHKrow|P31=Q13417250|wikidata=65|estimate=59}}
|-
| &lt;li&gt;[[Regions of Azerbaijan|Municipalities of Azerbaijan]]
{{User:Emijrp/AHKrow|P31=Q15129871|wikidata=17|estimate=11}}
|-
| rowspan=1 | {{flag|Bahrain}}
| &lt;li&gt;[[Governorates of Bahrain]]
{{User:Emijrp/AHKrow|P31=Q867606|wikidata=5|estimate=5}}
| rowspan=1 | 
|-
| rowspan=4 | {{flag|Bangladesh}}
| &lt;li&gt;[[Divisions of Bangladesh]]
{{User:Emijrp/AHKrow|P31=Q878040|wikidata=8|estimate=7}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Districts of Bangladesh]]
{{User:Emijrp/AHKrow|P31=Q152732|wikidata=64|estimate=64}}
|-
| &lt;li&gt;[[Upazilas of Bangladesh]]
{{User:Emijrp/AHKrow|P31=Q620471|wikidata=488|estimate=500}}
|-
| &lt;li&gt;[[Union Councils of Bangladesh]]
{{User:Emijrp/AHKrow|P31=Q3812392|wikidata=4539|estimate=}}
|-
| rowspan=2 | {{flag|Bhutan}}
| &lt;li&gt;[[Districts of Bhutan]]
{{User:Emijrp/AHKrow|P31=Q1229776|wikidata=1|estimate=20}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Gewogs of Bhutan]]
{{User:Emijrp/AHKrow|P31=Q1352019|wikidata=250|estimate=205}}
|-
| rowspan=2 | {{flag|Brunei}}
| &lt;li&gt;[[Districts of Brunei]]
{{User:Emijrp/AHKrow|P31=Q50427|wikidata=4|estimate=4}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Mukims of Brunei]]
{{User:Emijrp/AHKrow|P31=Q60047|wikidata=39|estimate=38}}
|-
| rowspan=3 | {{flag|Burma}}
| &lt;li&gt;[[Administrative divisions of Burma]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=21}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Burma]]
{{User:Emijrp/AHKrow|P31=Q5283500|wikidata=68|estimate=67}}
|-
| &lt;li&gt;[[Townships of Burma]]
{{User:Emijrp/AHKrow|P31=Q7830262|wikidata=256|estimate=325}}
|-
| rowspan=5 | {{flag|Cambodia}}
| &lt;li&gt;[[Administrative divisions of Cambodia|Provinces of Cambodia]]
{{User:Emijrp/AHKrow|P31=Q7252589|wikidata=24|estimate=23}}
| rowspan=5 | 
|-
| &lt;li&gt;[[List of Cambodian districts and sections]]
{{User:Emijrp/AHKrow|P31=Q14846918|wikidata=188|estimate=171}}
|-
| &lt;li&gt;[[Municipalities of Cambodia]]
{{User:Emijrp/AHKrow|P31=Q14846916|wikidata=2|estimate=26}}
|-
| &lt;li&gt;[[Communes of Cambodia]]
{{User:Emijrp/AHKrow|P31=Q5154047|wikidata=190|estimate=1621}}
|-
| &lt;li&gt;[[Villages of Cambodia]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=14073}}
|-
| rowspan=7 | {{flag|People's Republic of China}}
| &lt;li&gt;[[Administrative divisions of the People's Republic of China|Administrative divisions of the PRC]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| rowspan=7 | 
|-
| &lt;li&gt;Provincial level
{{User:Emijrp/AHKrow|P31=Q1615742|wikidata=23|estimate=33}}
|-
| &lt;li&gt;Prefectural level
{{User:Emijrp/AHKrow|P31=Q9316670|wikidata=360|estimate=333}}
|-
| &lt;li&gt;County level
{{User:Emijrp/AHKrow|P31=Q16755104|wikidata=2005|estimate=2858}}
|-
| &lt;li&gt;Township level
{{User:Emijrp/AHKrow|P31=Q16725943|wikidata=40516|estimate=40858}}
|-
| &lt;li&gt;Village committees
{{User:Emijrp/AHKrow|P31=Q13100073|wikidata=588487|estimate=623669}}
|-
| &lt;li&gt;Neighborhood level
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=80717}}
|-
| rowspan=2 | {{flag|Cyprus}}
| &lt;li&gt;[[Districts of Cyprus]]
{{User:Emijrp/AHKrow|P31=Q59136|wikidata=6|estimate=6}}
| rowspan=2 | 
|-
| &lt;li&gt;[[List of cities, towns and villages in Cyprus|Municipalities of Cyprus]]
{{User:Emijrp/AHKrow|P31=Q16739079|wikidata=39|estimate=39}}
|-
| rowspan=4 | {{flag|East Timor}}
| &lt;li&gt;[[Districts of East Timor]]
{{User:Emijrp/AHKrow|P31=Q741821|wikidata=14|estimate=13}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Subdistricts of East Timor]]
{{User:Emijrp/AHKrow|P31=Q1512109|wikidata=64|estimate=65}}
|-
| &lt;li&gt;[[Sucos of East Timor]] (villages)
{{User:Emijrp/AHKrow|P31=Q13479533|wikidata=0|estimate=442}}
|-
| &lt;li&gt;Aldeias of East Timor (hamlets)
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=2336}}
|-
| rowspan=3 | {{flag|Egypt}}
| &lt;li&gt;[[Governorates of Egypt]]
{{User:Emijrp/AHKrow|P31=Q204910|wikidata=27|estimate=27}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Regions of Egypt]]
{{User:Emijrp/AHKrow|P31=Q3312607|wikidata=1|estimate=232}}
|-
| &lt;li&gt;[[Municipalities of Egypt]]
{{User:Emijrp/AHKrow|P31=Q109088|wikidata=0|estimate=4617}}
|-
| rowspan=1 | {{flag|Gaza Strip}}
| &lt;li&gt;[[Governorates of the Gaza Strip]]
{{User:Emijrp/AHKrow|P31=Q50495|wikidata=16|estimate=5}}
| rowspan=1 | 
|-
| rowspan=2 | {{flag|Georgia}}
| &lt;li&gt;[[Administrative divisions of Georgia (country)|Administrative divisions of Georgia]]
{{User:Emijrp/AHKrow|P31=Q244339|wikidata=39|estimate=9}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of Georgia (country)|Districts of Georgia]]
{{User:Emijrp/AHKrow|P31=Q2655841|wikidata=16|estimate=67}}
|-
| rowspan=1 | {{flag|Hong Kong}}
| &lt;li&gt;[[Districts of Hong Kong]]
{{User:Emijrp/AHKrow|P31=Q50256|wikidata=17|estimate=18}}
| rowspan=1 | 
|-
| rowspan=3 | {{flag|India}}
| &lt;li&gt;[[States and union territories of India]]
{{User:Emijrp/AHKrow|P31=Q131541|wikidata=43|estimate=28}}
| rowspan=3 | 
|-
| &lt;li&gt;[[List of districts of India]]
{{User:Emijrp/AHKrow|P31=Q1149652|wikidata=651|estimate=640}}
|-
| &lt;li&gt;Tehsils
{{User:Emijrp/AHKrow|P31=Q7694920|wikidata=54|estimate=5564}}
|-
| rowspan=4 | {{flag|Indonesia}}
| &lt;li&gt;[[Provinces of Indonesia]]
{{User:Emijrp/AHKrow|P31=Q5098|wikidata=34|estimate=34}}
| rowspan=4 | 
|-
| &lt;li&gt;[[List of regencies and cities of Indonesia|Regencies of Indonesia]]
{{User:Emijrp/AHKrow|P31=Q3191695|wikidata=744|estimate=403}}
|-
| &lt;li&gt;[[List of regencies and cities of Indonesia|Cities of Indonesia]]
{{User:Emijrp/AHKrow|P31=Q3199141|wikidata=94|estimate=98}}
|-
| &lt;li&gt;[[Villages of Indonesia]]
{{User:Emijrp/AHKrow|P31=Q2225692|wikidata=110135|estimate=35000}}
|-
| rowspan=4 | {{flag|Iran}}
| &lt;li&gt;[[Provinces of Iran]]
{{User:Emijrp/AHKrow|P31=Q1344695|wikidata=32|estimate=31}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Counties of Iran]]
{{User:Emijrp/AHKrow|P31=Q137535|wikidata=417|estimate=324}}
|-
| &lt;li&gt;[[Districts of Iran]]
{{User:Emijrp/AHKrow|P31=Q11353|wikidata=1041|estimate=}}
|-
| &lt;li&gt;[[Rural districts of Iran]]
{{User:Emijrp/AHKrow|P31=Q15125752|wikidata=2438|estimate=}}
|-
| rowspan=2 | {{flag|Iraq}}
| &lt;li&gt;[[Governorates of Iraq]]
{{User:Emijrp/AHKrow|P31=Q841753|wikidata=20|estimate=18}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of Iraq]]
{{User:Emijrp/AHKrow|P31=Q4117798|wikidata=95|estimate=111}}
|-
| rowspan=3 | {{flag|Israel}}
| &lt;li&gt;[[Districts of Israel]]
{{User:Emijrp/AHKrow|P31=Q193560|wikidata=8|estimate=6}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Regional council (Israel)|Regional councils of Israel]]
{{User:Emijrp/AHKrow|P31=Q1022469|wikidata=55|estimate=}}
|-
| &lt;li&gt;[[Local council (Israel)|Local councils of Israel]]
{{User:Emijrp/AHKrow|P31=Q1288520|wikidata=40|estimate=265}}
|-
| rowspan=5 | {{flag|Japan}}
| &lt;li&gt;[[Prefectures of Japan]]
{{User:Emijrp/AHKrow|P31=Q50337|wikidata=516|estimate=47}}
| rowspan=5 | 
|-
| &lt;li&gt;[[Subprefectures of Japan]]
{{User:Emijrp/AHKrow|P31=Q850450|wikidata=24|estimate=}}
|-
| &lt;li&gt;[[Districts of Japan]]
{{User:Emijrp/AHKrow|P31=Q1122846|wikidata=440|estimate=}}
|-
| &lt;li&gt;[[List of towns in Japan]]
{{User:Emijrp/AHKrow|P31=Q1059478|wikidata=0|estimate=}}
|-
| &lt;li&gt;[[Villages of Japan]]
{{User:Emijrp/AHKrow|P31=Q4174776|wikidata=202|estimate=}}
|-
| rowspan=3 | {{flag|Jordan}}
| &lt;li&gt;[[Governorates of Jordan]]
{{User:Emijrp/AHKrow|P31=Q867567|wikidata=12|estimate=12}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Nahias of Jordan]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=52}}
|-
| &lt;li&gt;[[Villages of Jordan]]
{{User:Emijrp/AHKrow|P31=Q23828031|wikidata=154|estimate=}}
|-
| rowspan=2 | {{flag|Kazakhstan}}
| &lt;li&gt;[[Provinces of Kazakhstan]]
{{User:Emijrp/AHKrow|P31=Q836672|wikidata=15|estimate=14}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of Kazakhstan]]
{{User:Emijrp/AHKrow|P31=Q2643128|wikidata=215|estimate=170}}
|-
| rowspan=6 | {{flag|North Korea}}
| &lt;li&gt;[[Provinces of North Korea]]
{{User:Emijrp/AHKrow|P31=Q15620174|wikidata=9|estimate=9}}
| rowspan=6 | 
|-
| &lt;li&gt;[[List of second-level administrative divisions of North Korea|Cities of North Korea]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[List of second-level administrative divisions of North Korea|Counties of North Korea]]
{{User:Emijrp/AHKrow|P31=Q18534049|wikidata=147|estimate=150}}
|-
| &lt;li&gt;[[Worker's districts of North Korea]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[Districts of North Korea]]
{{User:Emijrp/AHKrow|P31=Q18544917|wikidata=34|estimate=}}
|-
| &lt;li&gt;[[Wards of North Korea]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=2 | {{flag|South Korea}}
| &lt;li&gt;[[Provinces of South Korea]]
{{User:Emijrp/AHKrow|P31=Q4925355|wikidata=13|estimate=9}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of South Korea]]
{{User:Emijrp/AHKrow|P31=Q15901936|wikidata=71|estimate=}}
|-
| rowspan=2 | {{flag|Kuwait}}
| &lt;li&gt;[[Governorates of Kuwait]]
{{User:Emijrp/AHKrow|P31=Q842876|wikidata=6|estimate=6}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of Kuwait]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=5}}
|-
| rowspan=2 | {{flag|Kyrgyzstan}}
| &lt;li&gt;[[Provinces of Kyrgyzstan]]
{{User:Emijrp/AHKrow|P31=Q693039|wikidata=7|estimate=}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of Kyrgyzstan]]
{{User:Emijrp/AHKrow|P31=Q4389100|wikidata=40|estimate=}}
|-
| rowspan=2 | {{flag|Laos}}
| &lt;li&gt;[[Provinces of Laos]]
{{User:Emijrp/AHKrow|P31=Q15673297|wikidata=18|estimate=16}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of Laos]]
{{User:Emijrp/AHKrow|P31=Q5283521|wikidata=150|estimate=}}
|-
| rowspan=4 | {{flag|Lebanon}}
| &lt;li&gt;[[Governorates of Lebanon]]
{{User:Emijrp/AHKrow|P31=Q844713|wikidata=7|estimate=6}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Districts of Lebanon]]
{{User:Emijrp/AHKrow|P31=Q2693910|wikidata=25|estimate=25}}
|-
| &lt;li&gt;[[Municipalities of Lebanon]]
{{User:Emijrp/AHKrow|P31=Q6936383|wikidata=5|estimate=}}
|-
| &lt;li&gt;[[Villages of Lebanon]]
{{User:Emijrp/AHKrow|P31=Q23828039|wikidata=976|estimate=}}
|-
| rowspan=4 | {{flag|Malaysia}}
| &lt;li&gt;[[States and federal territories of Malaysia]]
{{User:Emijrp/AHKrow|P31=Q50464|wikidata=16|estimate=16}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Districts of Malaysia]]
{{User:Emijrp/AHKrow|P31=Q1994931|wikidata=62|estimate=139}}
|-
| &lt;li&gt;[[Subdistricts of Malaysia]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1000}}
|-
| &lt;li&gt;[[Villages of Malaysia]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=8000}}
|-
| rowspan=3 | {{flag|Maldives}}
| &lt;li&gt;[[Administrative divisions of the Maldives|Islands of the Maldives]]
{{User:Emijrp/AHKrow|P31=Q15623253|wikidata=94|estimate=189}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Administrative divisions of the Maldives|Atolls of the Maldives]]
{{User:Emijrp/AHKrow|P31=Q11774746|wikidata=19|estimate=19}}
|-
| &lt;li&gt;[[Administrative divisions of the Maldives|Cities of the Maldives]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=2}}
|-
| rowspan=3 | {{flag|Mongolia}}
| &lt;li&gt;[[Provinces of Mongolia]]
{{User:Emijrp/AHKrow|P31=Q50399|wikidata=21|estimate=21}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Mongolia]]
{{User:Emijrp/AHKrow|P31=Q1518096|wikidata=325|estimate=329}}
|-
| &lt;li&gt;[[Bags of Mongolia]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1538}}
|-
| rowspan=3 | {{flag|Nepal}}
| &lt;li&gt;[[Zones of Nepal]]
{{User:Emijrp/AHKrow|P31=Q876102|wikidata=14|estimate=14}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Nepal]]
{{User:Emijrp/AHKrow|P31=Q2537537|wikidata=74|estimate=75}}
|-
| &lt;li&gt;[[Village development committee]]
{{User:Emijrp/AHKrow|P31=Q1530705|wikidata=3388|estimate=3913}}
|-
| rowspan=2 | {{flag|Oman}}
| &lt;li&gt;[[Governorates of Oman]]
{{User:Emijrp/AHKrow|P31=Q641078|wikidata=11|estimate=11}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Provinces of Oman]]
{{User:Emijrp/AHKrow|P31=Q3250615|wikidata=61|estimate=61}}
|-
| rowspan=5 | {{flag|Pakistan}}
| &lt;li&gt;[[Administrative units of Pakistan|Provinces of Pakistan]]
{{User:Emijrp/AHKrow|P31=Q15058985|wikidata=4|estimate=4}}
| rowspan=5 | 
|-
| &lt;li&gt;[[Divisions of Pakistan]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=27}}
|-
| &lt;li&gt;[[List of districts of Pakistan|Districts of Pakistan]]
{{User:Emijrp/AHKrow|P31=Q2379075|wikidata=133|estimate=100}}
|-
| &lt;li&gt;[[Union Councils of Pakistan]]
{{User:Emijrp/AHKrow|P31=Q2592651|wikidata=779|estimate=6000}}
|-
| &lt;li&gt;[[Tehsils of Pakistan]]
{{User:Emijrp/AHKrow|P31=Q18670606|wikidata=134|estimate=}}
|-
| rowspan=1 | {{flag|Palestine}}
| &lt;li&gt;[[Governorates of the Palestinian National Authority|Governorates of Palestina]]
{{User:Emijrp/AHKrow|P31=Q50495|wikidata=16|estimate=16}}
| rowspan=1 | 
|-
| rowspan=4 | {{flag|Philippines}}
| &lt;li&gt;[[Regions of the Philippines]]
{{User:Emijrp/AHKrow|P31=Q24698|wikidata=18|estimate=17}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Provinces of the Philippines]]
{{User:Emijrp/AHKrow|P31=Q24746|wikidata=81|estimate=80}}
|-
| &lt;li&gt;[[Municipalities of the Philippines]]
{{User:Emijrp/AHKrow|P31=Q24764|wikidata=1489|estimate=1491}}
|-
| &lt;li&gt;[[Barangay]] of the Philippines
{{User:Emijrp/AHKrow|P31=Q61878|wikidata=2750|estimate=42028}}
|-
| rowspan=3 | {{flag|Qatar}}
| &lt;li&gt;[[Municipalities of Qatar]]
{{User:Emijrp/AHKrow|P31=Q685320|wikidata=4|estimate=}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Zones of Qatar]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=87}}
|-
| &lt;li&gt;[[Blocks of Qatar]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=3 | {{flag|Russia}}
| &lt;li&gt;[[Federal subjects of Russia]]
{{User:Emijrp/AHKrow|P31=Q43263|wikidata=94|estimate=}}
| rowspan=3 | Each federal subject has its own divisions
|-
| &lt;li&gt;[[Rural settlements of Russia]]
{{User:Emijrp/AHKrow|P31=Q634099|wikidata=19141|estimate=}}
|-
| &lt;li&gt;[[Urban settlements of Russia]]
{{User:Emijrp/AHKrow|P31=Q2661988|wikidata=1582|estimate=}}
|-
| rowspan=2 | {{flag|Saudi Arabia}}
| &lt;li&gt;[[Provinces of Saudi Arabia]]
{{User:Emijrp/AHKrow|P31=Q74063|wikidata=13|estimate=13}}
| rowspan=2 | 
|-
| &lt;li&gt;[[List of governorates of Saudi Arabia]]
{{User:Emijrp/AHKrow|P31=Q3247681|wikidata=7|estimate=118}}
|-
| rowspan=2 | {{flag|Singapore}}
| &lt;li&gt;[[Regions of Singapore]]
{{User:Emijrp/AHKrow|P31=Q2091262|wikidata=5|estimate=}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Administrative divisions of Singapore|Community Development Council Districts]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=5}}
|-
| rowspan=3 | {{flag|Sri Lanka}}
| &lt;li&gt;[[Provinces of Sri Lanka]]
{{User:Emijrp/AHKrow|P31=Q861559|wikidata=10|estimate=9}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Sri Lanka]]
{{User:Emijrp/AHKrow|P31=Q1230110|wikidata=25|estimate=25}}
|-
| &lt;li&gt;[[Divisional Secretariats of Sri Lanka]]
{{User:Emijrp/AHKrow|P31=Q1990968|wikidata=306|estimate=}}
|-
| rowspan=4 | {{flag|Syria}}
| &lt;li&gt;[[Governorates of Syria]]
{{User:Emijrp/AHKrow|P31=Q517351|wikidata=14|estimate=14}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Districts of Syria]]
{{User:Emijrp/AHKrow|P31=Q2915776|wikidata=60|estimate=64}}
|-
| &lt;li&gt;[[Subdistricts of Syria]]
{{User:Emijrp/AHKrow|P31=Q12249051|wikidata=278|estimate=206}}
|-
| &lt;li&gt;[[List of towns and villages in Syria]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=6432}}
|-
| rowspan=4 | {{flag|Taiwan}}
| &lt;li&gt;[[Districts of Taiwan]]
{{User:Emijrp/AHKrow|P31=Q705296|wikidata=113|estimate=}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Counties of Taiwan]]
{{User:Emijrp/AHKrow|P31=Q706447|wikidata=17|estimate=}}
|-
| &lt;li&gt;[[Urban townships of Taiwan]]
{{User:Emijrp/AHKrow|P31=Q12039044|wikidata=40|estimate=}}
|-
| &lt;li&gt;[[Rural townships of Taiwan]]
{{User:Emijrp/AHKrow|P31=Q12039539|wikidata=153|estimate=}}
|-
| rowspan=3 | {{flag|Tajikistan}}
| &lt;li&gt;[[Provinces of Tajikistan]]
{{User:Emijrp/AHKrow|P31=Q867545|wikidata=4|estimate=3}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Tajikistan]]
{{User:Emijrp/AHKrow|P31=Q7482775|wikidata=0|estimate=58}}
|-
| &lt;li&gt;[[Jamoats of Tajikistan]]
{{User:Emijrp/AHKrow|P31=Q6148126|wikidata=29|estimate=406}}
|-
| rowspan=4 | {{flag|Thailand}}
| &lt;li&gt;[[Provinces of Thailand]]
{{User:Emijrp/AHKrow|P31=Q50198|wikidata=93|estimate=76}}
| rowspan=4 | 
|-
| &lt;li&gt;[[List of districts of Thailand]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=878}}
|-
| &lt;li&gt;[[Tambon]] of Thailand
{{User:Emijrp/AHKrow|P31=Q1077097|wikidata=6479|estimate=7255}}
|-
| &lt;li&gt;[[Muban]] of Thailand
{{User:Emijrp/AHKrow|P31=Q1368879|wikidata=97|estimate=74944}}
|-
| rowspan=5 | {{flag|Turkey}}
| &lt;li&gt;[[Provinces of Turkey]]
{{User:Emijrp/AHKrow|P31=Q48336|wikidata=81|estimate=81}}
| rowspan=5 | 
|-
| &lt;li&gt;[[List of districts of Turkey]]
{{User:Emijrp/AHKrow|P31=Q1147395|wikidata=1248|estimate=900}}
|-
| &lt;li&gt;[[Belediye]] of Turkey
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=3200}}
|-
| &lt;li&gt;[[Villages of Turkey]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=41000}}
|-
| &lt;li&gt;[[Mahalles of Turkey]]
{{User:Emijrp/AHKrow|P31=Q17051044|wikidata=8304|estimate=}}
|-
| rowspan=2 | {{flag|Turkmenistan}}
| &lt;li&gt;[[Provinces of Turkmenistan]]
{{User:Emijrp/AHKrow|P31=Q17309773|wikidata=5|estimate=6}}
| rowspan=2 |
|-
| &lt;li&gt;[[Districts of Turkmenistan]]
{{User:Emijrp/AHKrow|P31=Q5283544|wikidata=55|estimate=}}
|-
| rowspan=2 | {{flag|United Arab Emirates}}
| &lt;li&gt;[[Emirates of the United Arab Emirates]]
{{User:Emijrp/AHKrow|P31=Q19833031|wikidata=7|estimate=7}}
| rowspan=2 |
|-
| &lt;li&gt;[[Municipalities of the United Arab Emirates]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=3 | {{flag|Uzbekistan}}
| &lt;li&gt;[[Provinces of Uzbekistan]]
{{User:Emijrp/AHKrow|P31=Q842420|wikidata=12|estimate=12}}
| rowspan=3 |
|-
| &lt;li&gt;[[Districts of Uzbekistan]]
{{User:Emijrp/AHKrow|P31=Q2631599|wikidata=155|estimate=170}}
|-
| &lt;li&gt;[[Mahallas of Uzbekistan]]
{{User:Emijrp/AHKrow|P31=Q7551583|wikidata=0|estimate=}}
|-
| rowspan=5 | {{flag|Vietnam}}
| &lt;li&gt;[[Provinces of Vietnam]]
{{User:Emijrp/AHKrow|P31=Q2824648|wikidata=85|estimate=58}}
| rowspan=5 |
|-
| &lt;li&gt;[[List of districts of Vietnam]]
{{User:Emijrp/AHKrow|P31=Q2582669|wikidata=573|estimate=548}}
|-
| &lt;li&gt;[[Communes of Vietnam]]
{{User:Emijrp/AHKrow|P31=Q1070942|wikidata=288|estimate=9000}}
|-
| &lt;li&gt;[[Wards of Vietnam]]
{{User:Emijrp/AHKrow|P31=Q687188|wikidata=546|estimate=}}
|-
| &lt;li&gt;[[Rural communes of Vietnam]]
{{User:Emijrp/AHKrow|P31=Q2389082|wikidata=10020|estimate=}}
|-
| rowspan=4 | {{flag|Yemen}}
| &lt;li&gt;[[Governorates of Yemen]]
{{User:Emijrp/AHKrow|P31=Q331130|wikidata=21|estimate=20}}
| rowspan=4 |
|-
| &lt;li&gt;[[List of districts of Yemen]]
{{User:Emijrp/AHKrow|P31=Q6617100|wikidata=345|estimate=333}}
|-
| &lt;li&gt;[[Sub-districts of Yemen]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=2210}}
|-
| &lt;li&gt;[[Villages of Yemen]]
{{User:Emijrp/AHKrow|P31=Q12225020|wikidata=1982|estimate=38284}}
|-
{{User:Emijrp/AHKrowtotal|wikidata=820789|estimate=1121035}}
|}

==== Europe ====
[[File:Europe orthographic Caucasus Urals boundary.svg|thumb|right|200px|Europe]]
'''[[Europe]]''' is a [[continent]] that comprises the westernmost part of [[Eurasia]]. Europe is bordered by the [[Arctic Ocean]] to the north, the [[Atlantic Ocean]] to the west, and the [[Mediterranean Sea]] to the south. The eastern boundary with Asia is a historical and cultural construct, as there is no clear physical and geographical separation between them; Europe is generally considered as [[Borders of the continents#Europe and Asia|separated from Asia]] by the [[drainage divide|watershed divides]] of the [[Ural Mountains|Ural]] and [[Caucasus Mountains]], the [[Ural River]], the [[Caspian Sea|Caspian]] and [[Black Sea|Black]] Seas, and the waterways of the [[Turkish Straits]].

Europe, in particular [[ancient Greece]], was the birthplace of [[Western civilization]]. The fall of the [[Western Roman Empire]], during the [[migration period]], marked the end of [[ancient history]] and the beginning of an era known as the [[Middle Ages]]. [[Renaissance]] [[Renaissance Humanism|humanism]], [[Renaissance exploration|exploration]], [[Renaissance art|art]], and [[Renaissance science|science]] led to the [[modern era]]. From the [[Age of Discovery]] onwards, Europe played a predominant role in global affairs. Between the 16th and 20th centuries, European powers controlled at various times the [[Americas]], most of [[Africa]], [[Oceania]], and the majority of Asia.

Europe has 50 recognised states, 6 partially recognised states, 6 dependent territories and 2 special areas of internal sovereignty.

{{main|Europe|List of sovereign states and dependent territories in Europe|List of cities in Europe}}
{{see also|Template:Articles on first-level administrative divisions of European countries|Template:Articles on second-level administrative divisions of European countries|User:Physchim62/Europa}}

&lt;gallery mode="packed-hover"&gt;
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="150px" | Country 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=5 | {{flag|Albania}}
| &lt;li&gt;[[Counties of Albania]]
{{User:Emijrp/AHKrow|P31=Q104251|wikidata=12|estimate=12}}
| rowspan=5 | &lt;ref&gt;{{cite web|url=http://www.statoids.com/yal.html|title=Communes of Albania}}&lt;/ref&gt;
|-
| &lt;li&gt;[[Districts of Albania]]
{{User:Emijrp/AHKrow|P31=Q123266|wikidata=36|estimate=36}}
|-
| &lt;li&gt;Communes
{{User:Emijrp/AHKrow|P31=Q1781058|wikidata=2|estimate=309}}
|-
| &lt;li&gt;[[Municipalities of Albania]]
{{User:Emijrp/AHKrow|P31=Q2008050|wikidata=356|estimate=65}}
|-
| &lt;li&gt;[[Villages of Albania]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=2834}}
|-
| rowspan=3 | {{flag|Andorra}}
| &lt;li&gt;[[Parishes of Andorra]]
{{User:Emijrp/AHKrow|P31=Q24279|wikidata=7|estimate=7}}
| rowspan=3 | 
|-
| &lt;li&gt;Quarts
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| &lt;li&gt;Veïnats
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=5 | {{flag|Austria}}
| &lt;li&gt;[[States of Austria]]
{{User:Emijrp/AHKrow|P31=Q261543|wikidata=9|estimate=9}}
| rowspan=5 | 
|-
| &lt;li&gt;[[Districts of Austria]]
{{User:Emijrp/AHKrow|P31=Q871419|wikidata=100|estimate=84}}
|-
| &lt;li&gt;[[Statutarstädte]]
{{User:Emijrp/AHKrow|P31=Q262882|wikidata=15|estimate=15}}
|-
| &lt;li&gt;Gemeinden
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=2342}}
|-
| &lt;li&gt;Katastralgemeinden
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=7800}}
|-
| rowspan=3 | {{flag|Belarus}}
| &lt;li&gt;[[Regions of Belarus]]
{{User:Emijrp/AHKrow|P31=Q209325|wikidata=6|estimate=6}}
| rowspan=3 | 
|-
| &lt;li&gt;Raions or districts
{{User:Emijrp/AHKrow|P31=Q2043199|wikidata=197|estimate=127}}
|-
| &lt;li&gt;Selsoviets
{{User:Emijrp/AHKrow|P31=Q15071808|wikidata=1527|estimate=1448}}
|-
| rowspan=5 | {{flag|Belgium}}
| &lt;li&gt;Regions of Belgium
{{User:Emijrp/AHKrow|P31=Q83057|wikidata=4|estimate=3}}
| rowspan=5 | 
|-
| &lt;li&gt;[[Provinces of Belgium]]
{{User:Emijrp/AHKrow|P31=Q83116|wikidata=11|estimate=10}}
|-
| &lt;li&gt;[[Arrondissements of Belgium]]
{{User:Emijrp/AHKrow|P31=Q91028|wikidata=43|estimate=43}}
|-
| &lt;li&gt;Judicial arrondissements
{{User:Emijrp/AHKrow|P31=Q94524|wikidata=19|estimate=27}}
|-
| &lt;li&gt;[[Municipalities of Belgium]]
{{User:Emijrp/AHKrow|P31=Q493522|wikidata=728|estimate=589}}
|-
| rowspan=2 | {{flag|Bosnia and Herzegovina}}
| &lt;li&gt;[[Cantons of the Federation of Bosnia and Herzegovina|Cantons]]
{{User:Emijrp/AHKrow|P31=Q18279|wikidata=10|estimate=10}}
| rowspan=2 | 
|-
| &lt;li&gt;Municipalities
{{User:Emijrp/AHKrow|P31=Q2706302|wikidata=249|estimate=63}}
|-
| rowspan=2 | {{flag|Bulgaria}}
| &lt;li&gt;[[Provinces of Bulgaria]]
{{User:Emijrp/AHKrow|P31=Q209824|wikidata=30|estimate=27}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of Bulgaria]]
{{User:Emijrp/AHKrow|P31=Q1906268|wikidata=275|estimate=264}}
|-
| rowspan=4 | {{flag|Croatia}}
| &lt;li&gt;[[Counties of Croatia]]
{{User:Emijrp/AHKrow|P31=Q57053|wikidata=20|estimate=21}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Municipalities of Croatia]]
{{User:Emijrp/AHKrow|P31=Q57058|wikidata=943|estimate=429}}
|-
| &lt;li&gt;Local communities
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=4117}}
|-
| &lt;li&gt;Settlements
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=6749}}
|-
| {{flag|Cyprus}}
| 
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| See [[#Asia]]
|-
| rowspan=3 | {{flag|Czech Republic}}
| &lt;li&gt;[[Regions of the Czech Republic]]
{{User:Emijrp/AHKrow|P31=Q38911|wikidata=14|estimate=13}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of the Czech Republic]]
{{User:Emijrp/AHKrow|P31=Q548611|wikidata=77|estimate=76}}
|-
| &lt;li&gt;Municipalities
{{User:Emijrp/AHKrow|P31=Q5153359|wikidata=6891|estimate=6252}}
|-
| rowspan=3 | {{flag|Denmark}}
| &lt;li&gt;[[Regions of Denmark]]
{{User:Emijrp/AHKrow|P31=Q62326|wikidata=5|estimate=5}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Counties of Denmark]]
{{User:Emijrp/AHKrow|P31=Q876730|wikidata=19|estimate=}}
|-
| &lt;li&gt;[[Municipalities of Denmark]]
{{User:Emijrp/AHKrow|P31=Q2177636|wikidata=356|estimate=98}}
|-
| rowspan=2 | {{flag|Estonia}}
| &lt;li&gt;[[Counties of Estonia]]
{{User:Emijrp/AHKrow|P31=Q189672|wikidata=16|estimate=15}}
| rowspan=2 | 33 of them being urban and 193 rural
|-
| &lt;li&gt;[[Municipalities of Estonia]]
{{User:Emijrp/AHKrow|P31=Q612229|wikidata=239|estimate=226}}
|-
| rowspan=4 | {{flag|Finland}}
| &lt;li&gt;[[Regional State Administrative Agencies of Finland]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=6}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Regions of Finland]]
{{User:Emijrp/AHKrow|P31=Q193512|wikidata=19|estimate=19}}
|-
| &lt;li&gt;[[Sub-regions of Finland]]
{{User:Emijrp/AHKrow|P31=Q762882|wikidata=75|estimate=72}}
|-
| &lt;li&gt;[[Municipalities of Finland]]
{{User:Emijrp/AHKrow|P31=Q856076|wikidata=2793|estimate=342}}
|-
| rowspan=5 | {{flag|France}}
| &lt;li&gt;[[Regions of France]]
{{User:Emijrp/AHKrow|P31=Q36784|wikidata=37|estimate=22}}
| rowspan=5 | 
|-
| &lt;li&gt;[[Departments of France]]
{{User:Emijrp/AHKrow|P31=Q6465|wikidata=101|estimate=101}}
|-
| &lt;li&gt;[[Arrondissements of France]]
{{User:Emijrp/AHKrow|P31=Q194203|wikidata=437|estimate=342}}
|-
| &lt;li&gt;[[Cantons of France]]
{{User:Emijrp/AHKrow|P31=Q184188|wikidata=4756|estimate=4032}}
|-
| &lt;li&gt;[[Communes of France]]
{{User:Emijrp/AHKrow|P31=Q484170|wikidata=38998|estimate=36680}}
|-
| rowspan=3 | {{flag|Germany}}
| &lt;li&gt;[[Regierungsbezirke]]
{{User:Emijrp/AHKrow|P31=Q22721|wikidata=61|estimate=22}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Germany]]
{{User:Emijrp/AHKrow|P31=Q106658|wikidata=650|estimate=403}}
|-
| &lt;li&gt;[[Municipalities of Germany]]
{{User:Emijrp/AHKrow|P31=Q262166|wikidata=11370|estimate=12300}}
|-
| rowspan=2 | {{flag|Greece}}
| &lt;li&gt;[[Modern regions of Greece]]
{{User:Emijrp/AHKrow|P31=Q207299|wikidata=91|estimate=13}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of Greece]]
{{User:Emijrp/AHKrow|P31=Q1349648|wikidata=304|estimate=325}}
|-
| rowspan=5 | {{flag|Hungary}}
| &lt;li&gt;[[Regions of Hungary]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=173}}
| rowspan=5 | 
|-
| &lt;li&gt;[[Subregions of Hungary]]
{{User:Emijrp/AHKrow|P31=Q715398|wikidata=159|estimate=}}
|-
| &lt;li&gt;[[Counties of Hungary]]
{{User:Emijrp/AHKrow|P31=Q188604|wikidata=20|estimate=19}}
|-
| &lt;li&gt;[[Districts of Hungary]]
{{User:Emijrp/AHKrow|P31=Q1162835|wikidata=217|estimate=}}
|-
| &lt;li&gt;[[Municipalities of Hungary]]
{{User:Emijrp/AHKrow|P31=Q1162835|wikidata=217|estimate=}}
|-
| rowspan=4 | {{flag|Iceland}}
| &lt;li&gt;[[Regions of Iceland]]
{{User:Emijrp/AHKrow|P31=Q842100|wikidata=8|estimate=8}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Constituencies of Iceland]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=6}}
|-
| &lt;li&gt;[[Counties of Iceland]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=23}}
|-
| &lt;li&gt;[[Municipalities of Iceland]]
{{User:Emijrp/AHKrow|P31=Q955655|wikidata=78|estimate=50}}
|-
| rowspan=2 | {{flag|Ireland}}
| &lt;li&gt;[[Counties of Ireland]]
{{User:Emijrp/AHKrow|P31=Q179872|wikidata=30|estimate=32}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Townlands of Ireland]]
{{User:Emijrp/AHKrow|P31=Q2151232|wikidata=98|estimate=}}
|-
| rowspan=4 | {{flag|Italy}}
| &lt;li&gt;[[Regions of Italy]]
{{User:Emijrp/AHKrow|P31=Q16110|wikidata=51|estimate=20}}
| rowspan=4 |
|-
| &lt;li&gt;[[Provinces of Italy]]
{{User:Emijrp/AHKrow|P31=Q15089|wikidata=112|estimate=110}}
|-
| &lt;li&gt;[[Communes of Italy]]
{{User:Emijrp/AHKrow|P31=Q747074|wikidata=8140|estimate=8092}}
|-
| &lt;li&gt;Fractions 
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=37000}}
|-
| rowspan=3 | {{flag|Latvia}}
| &lt;li&gt;[[Districts of Latvia]]
{{User:Emijrp/AHKrow|P31=Q840019|wikidata=44|estimate=}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Parishes of Latvia]]
{{User:Emijrp/AHKrow|P31=Q2577184|wikidata=644|estimate=}}
|-
| &lt;li&gt;[[Municipalities of Latvia]]
{{User:Emijrp/AHKrow|P31=Q3345345|wikidata=112|estimate=}}
|-
| rowspan=1 | {{flag|Liechtenstein}}
| &lt;li&gt;[[Municipalities of Liechtenstein]]
{{User:Emijrp/AHKrow|P31=Q203300|wikidata=11|estimate=11}}
| rowspan=1 | 
|-
| rowspan=3 | {{flag|Lithuania}}
| &lt;li&gt;[[Counties of Lithuania]]
{{User:Emijrp/AHKrow|P31=Q273789|wikidata=10|estimate=10}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Municipalities of Lithuania]]
{{User:Emijrp/AHKrow|P31=Q1363145|wikidata=66|estimate=60}}
|-
| &lt;li&gt;[[Elderships of Lithuania]]
{{User:Emijrp/AHKrow|P31=Q2298305|wikidata=610|estimate=500}}
|-
| rowspan=3 | {{flag|Luxembourg}}
| &lt;li&gt;[[Districts of Luxembourg]]
{{User:Emijrp/AHKrow|P31=Q216888|wikidata=3|estimate=3}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Cantons of Luxembourg]]
{{User:Emijrp/AHKrow|P31=Q1146429|wikidata=12|estimate=12}}
|-
| &lt;li&gt;[[Communes of Luxembourg]]
{{User:Emijrp/AHKrow|P31=Q2919801|wikidata=114|estimate=106}}
|-
| rowspan=2 | {{flag|Republic of Macedonia}}
| &lt;li&gt;[[Statistical regions of the Republic of Macedonia|Statistical regions]]
{{User:Emijrp/AHKrow|P31=Q1416863|wikidata=2|estimate=8}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of the Republic of Macedonia|Municipalities]]
{{User:Emijrp/AHKrow|P31=Q646793|wikidata=89|estimate=123}}
|-
| rowspan=2 | {{flag|Malta}}
| &lt;li&gt;[[Regions of Malta]]
{{User:Emijrp/AHKrow|P31=Q7309296|wikidata=7|estimate=}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Local councils of Malta]]
{{User:Emijrp/AHKrow|P31=Q719592|wikidata=70|estimate=68}}
|-
| rowspan=3 | {{flag|Moldova}}
| &lt;li&gt;[[Districts of Moldova]]
{{User:Emijrp/AHKrow|P31=Q15068450|wikidata=32|estimate=}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Counties of Moldavia]]
{{User:Emijrp/AHKrow|P31=Q15068469|wikidata=1|estimate=}}
|-
| &lt;li&gt;[[Communes of Moldavia]]
{{User:Emijrp/AHKrow|P31=Q4229812|wikidata=413|estimate=}}
|-
| rowspan=2 | {{flag|Montenegro}}
| &lt;li&gt;[[Municipalities of Montenegro]]
{{User:Emijrp/AHKrow|P31=Q838549|wikidata=21|estimate=21}}
| rowspan=2 | 
|-
| &lt;li&gt;Populated places
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1256}}
|-
| rowspan=2 | {{flag|Netherlands}}
| &lt;li&gt;[[Provinces of the Netherlands]]
{{User:Emijrp/AHKrow|P31=Q134390|wikidata=13|estimate=12}}
| rowspan=2 | 
|-
| &lt;li&gt;[[List of municipalities of the Netherlands|Municipalities]]
{{User:Emijrp/AHKrow|P31=Q2039348|wikidata=902|estimate=415}}
|-
| rowspan=3 | {{flag|Norway}}
| &lt;li&gt;[[Regions of Norway]]
{{User:Emijrp/AHKrow|P31=Q369639|wikidata=6|estimate=}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Counties of Norway]]
{{User:Emijrp/AHKrow|P31=Q192299|wikidata=18|estimate=20}}
|-
| &lt;li&gt;[[List of municipalities of Norway]]
{{User:Emijrp/AHKrow|P31=Q755707|wikidata=569|estimate=430}}
|-
| rowspan=4 | {{flag|Poland}}
| &lt;li&gt;[[Voivodeships of Poland]]
{{User:Emijrp/AHKrow|P31=Q150093|wikidata=43|estimate=16}}
| rowspan=4 | [http://www.stat.gov.pl/broker/access/prefile/listPreFiles.jspa;jsessionid=E47AB3C167885126EBF11E07EB969B45 TERYT database] (all kinds of settlements) contains more than 100,000 entries (settlements, etc) and over 200,000 streets.
|-
| &lt;li&gt;[[List of counties in Poland]]
{{User:Emijrp/AHKrow|P31=Q247073|wikidata=387|estimate=379}}
|-
| &lt;li&gt;[[List of Polish gminas]]
{{User:Emijrp/AHKrow|P31=Q3504085|wikidata=1572|estimate=2478}}
|-
| &lt;li&gt;Rural
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=40000}}
|-
| rowspan=3 | {{flag|Portugal}}
| &lt;li&gt;[[Districts of Portugal]]
{{User:Emijrp/AHKrow|P31=Q3032141|wikidata=18|estimate=}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Municipalities of Portugal]]
{{User:Emijrp/AHKrow|P31=Q13217644|wikidata=320|estimate=308}}
|-
| &lt;li&gt;[[List of parishes of Portugal]]
{{User:Emijrp/AHKrow|P31=Q1131296|wikidata=4571|estimate=4261}}
|-
| rowspan=4 | {{flag|Romania}}
| &lt;li&gt;[[Counties of Romania]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=41}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Municipiu]]
{{User:Emijrp/AHKrow|P31=Q640364|wikidata=103|estimate=}}
|-
| &lt;li&gt;[[Communes of Romania]]
{{User:Emijrp/AHKrow|P31=Q659103|wikidata=2861|estimate=2856}}
|-
| &lt;li&gt;Villages of Romania
{{User:Emijrp/AHKrow|P31=Q16858213|wikidata=217|estimate=12955}}
|-
| rowspan=1 | {{flag|San Marino}}
| &lt;li&gt;[[Municipalities of San Marino]]
{{User:Emijrp/AHKrow|P31=Q14292916|wikidata=10|estimate=9}}
| rowspan=1 | 
|-
| rowspan=2 | {{flag|Serbia}}
| &lt;li&gt;[[List of districts of Serbia]]
{{User:Emijrp/AHKrow|P31=Q648681|wikidata=27|estimate=29}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities and cities of Serbia|Municipalities of Serbia]]
{{User:Emijrp/AHKrow|P31=Q783930|wikidata=261|estimate=150}}
|-
| rowspan=3 | {{flag|Slovakia}}
| &lt;li&gt;[[Regions of Slovakia]]
{{User:Emijrp/AHKrow|P31=Q15057583|wikidata=8|estimate=}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Slovakia]]
{{User:Emijrp/AHKrow|P31=Q2264478|wikidata=80|estimate=}}
|-
| &lt;li&gt;[[List of municipalities and towns in Slovakia|Municipalities and towns]]
{{User:Emijrp/AHKrow|P31=Q6784672|wikidata=2840|estimate=2891}}
|-
| rowspan=2 | {{flag|Slovenia}}
| &lt;li&gt;[[Municipalities of Slovenia]]
{{User:Emijrp/AHKrow|P31=Q328584|wikidata=201|estimate=212}}
| rowspan=2 | &lt;ref&gt;{{cite book |url=http://www.stat.si/letopis/2011/MP/02-11.pdf |chapter=Upravna in druge členitve ozemlja RS |language=Slovene, English |trans_chapter=Administrative and Other Territorial Breakdowns of the Republic of Slovenia |title=Statistični letopis Republike Slovenije |trans_title=Statistical Yearbook of the Republic of Slovenia |year=2011 |publisher=Statistical Office of the Republic of Slovenia |issn=1318-5403}}&lt;/ref&gt;
|-
| &lt;li&gt;[[List of cities and towns in Slovenia|Cities and towns]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=67}}
|-
| rowspan=6 | {{flag|Spain}}
| &lt;li&gt;[[Autonomous communities of Spain]]
{{User:Emijrp/AHKrow|P31=Q10742|wikidata=16|estimate=17}}
| rowspan=6 | Links to articles and redirects: [[User:Emijrp/Municipalities of Spain]].
|-
| &lt;li&gt;Autonomous cities
{{User:Emijrp/AHKrow|P31=Q17352050|wikidata=0|estimate=2}}
|-
| &lt;li&gt;[[Provinces of Spain]]
{{User:Emijrp/AHKrow|P31=Q162620|wikidata=54|estimate=50}}
|-
| &lt;li&gt;[[Comarcas of Spain]]
{{User:Emijrp/AHKrow|P31=Q1345234|wikidata=369|estimate=}}
|-
| &lt;li&gt;[[List of municipalities of Spain]]
{{User:Emijrp/AHKrow|P31=Q2074737|wikidata=8221|estimate=8112}}
|-
| &lt;li&gt;[[List of parishes of Spain]]
{{User:Emijrp/AHKrow|P31=Q3333265|wikidata=783|estimate=}}
|-
| rowspan=3 | {{flag|Sweden}}
| &lt;li&gt;[[Counties of Sweden]]
{{User:Emijrp/AHKrow|P31=Q200547|wikidata=59|estimate=21}}
| rowspan=3 | 
|-
| &lt;li&gt;[[List of municipalities of Sweden]]
{{User:Emijrp/AHKrow|P31=Q127448|wikidata=2632|estimate=290}}
|-
| &lt;li&gt;Parishes of Sweden
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=3 | {{flag|Switzerland}}
| &lt;li&gt;[[Cantons of Switzerland]]
{{User:Emijrp/AHKrow|P31=Q23058|wikidata=29|estimate=26}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Switzerland]]
{{User:Emijrp/AHKrow|P31=Q662914|wikidata=205|estimate=}}
|-
| &lt;li&gt;[[List of municipalities of Switzerland|Municipalities of Switzerland]] 
{{User:Emijrp/AHKrow|P31=Q70208|wikidata=4470|estimate=2551}}
|-
| {{flag|Turkey}} ||  || style="text-align: center;" |  || See [[#Asia]]
|-
| rowspan=3 | {{flag|Ukraine}}
| &lt;li&gt;[[Raions of Ukraine]]
{{User:Emijrp/AHKrow|P31=Q1267632|wikidata=501|estimate=490}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Raions of cities in Ukraine]]
{{User:Emijrp/AHKrow|P31=Q3565075|wikidata=48|estimate=111}}
|-
| &lt;li&gt;[[List of urban-type settlements in Ukraine by subdivision|Urban-type settlements of Ukraine]] 
{{User:Emijrp/AHKrow|P31=Q7216840|wikidata=865|estimate=886}}
|-
| rowspan=2 | {{flag|United Kingdom}}
| &lt;li&gt;[[Counties of England]]
{{User:Emijrp/AHKrow|P31=Q171809|wikidata=61|estimate=}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Civil parishes in England]]
{{User:Emijrp/AHKrow|P31=Q1115575|wikidata=10993|estimate=10479}}
|-
{{User:Emijrp/AHKrowtotal|wikidata=127531|estimate=230681}}
|}

==== North America ====
[[File:Location North America.svg|thumb|right|200px|North America]]
'''[[North America]]''' is a [[continent]] entirely within the [[Northern Hemisphere]] and almost all within the [[Western Hemisphere]]. It can also be considered a northern [[subcontinent]] of the [[Americas]]. It is bordered to the north by the [[Arctic Ocean]], to the east by the [[Atlantic Ocean]], to the west and south by the [[Pacific Ocean]], and to the southeast by [[South America]] and the [[Caribbean Sea]].

North America has 23 sovereign states, 11 dependent territories and 16 other areas.

{{main|List of sovereign states and dependent territories in North America|List of cities in North America}}
{{see also|Template:Articles on first-level administrative divisions of North American countries|Template:Articles on second-level administrative divisions of North American countries}}

&lt;gallery mode="packed-hover"&gt;
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="150px" | Country 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=1 | {{flag|Antigua and Barbuda}}
| &lt;li&gt;[[Parishes and dependencies of Antigua and Barbuda|Parishes and dependencies]]
{{User:Emijrp/AHKrow|P31=Q1647142|wikidata=8|estimate=8}}
| rowspan=1 |
|-
| rowspan=2 | {{flag|Bahamas}}
| &lt;li&gt;[[Local government in the Bahamas|Districts in the Bahamas]]
{{User:Emijrp/AHKrow|P31=Q1230132|wikidata=31|estimate=32}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Townships in the Bahamas]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=42}}
|-
| rowspan=1 | {{flag|Barbados}}
| &lt;li&gt;[[Parishes of Barbados]]
{{User:Emijrp/AHKrow|P31=Q1631888|wikidata=11|estimate=11}}
| rowspan=1 | 
|-
| rowspan=3 | {{flag|Belize}}
| &lt;li&gt;[[Districts of Belize]]
{{User:Emijrp/AHKrow|P31=Q765865|wikidata=6|estimate=6}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Constituencies of Belize]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=31}}
|-
| &lt;li&gt;[[Local councils of Belize]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=180}}
|-
| rowspan=2 | {{flag|Canada}}
| &lt;li&gt;[[Provinces and territories of Canada]]
{{User:Emijrp/AHKrow|P31=Q2879|wikidata=14|estimate=10}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipal government in Canada]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=3700}}
|-
| rowspan=3 | {{flag|Costa Rica}}
| &lt;li&gt;[[Provinces of Costa Rica]]
{{User:Emijrp/AHKrow|P31=Q1075520|wikidata=7|estimate=7}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Cantons of Costa Rica]]
{{User:Emijrp/AHKrow|P31=Q953822|wikidata=80|estimate=81}}
|-
| &lt;li&gt;[[Districts of Costa Rica]]
{{User:Emijrp/AHKrow|P31=Q2292572|wikidata=494|estimate=421}}
|-
| rowspan=2 | {{flag|Cuba}}
| &lt;li&gt;[[Provinces of Cuba]]
{{User:Emijrp/AHKrow|P31=Q115291|wikidata=18|estimate=15}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of Cuba]]
{{User:Emijrp/AHKrow|P31=Q558330|wikidata=69|estimate=169}}
|-
| rowspan=1 | {{flag|Dominica}}
| &lt;li&gt;[[Parishes of Dominica]]
{{User:Emijrp/AHKrow|P31=Q1405085|wikidata=10|estimate=10}}
| rowspan=1 | 
|-
| rowspan=2 | {{flag|Dominican Republic}}
| &lt;li&gt;[[Provinces of the Dominican Republic]]
{{User:Emijrp/AHKrow|P31=Q913337|wikidata=31|estimate=31}}
| rowspan=2 | 
|-
| &lt;li&gt;[[List of municipalities of the Dominican Republic|Municipalities of the Dominican Republic]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=156}}
|-
| rowspan=2 | {{flag|El Salvador}}
| &lt;li&gt;[[Departments of El Salvador]]
{{User:Emijrp/AHKrow|P31=Q475214|wikidata=14|estimate=14}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of El Salvador]]
{{User:Emijrp/AHKrow|P31=Q3556889|wikidata=261|estimate=262}}
|-
| rowspan=1 | {{flag|Grenada}}
| &lt;li&gt;[[Parishes of Grenada]]
{{User:Emijrp/AHKrow|P31=Q531645|wikidata=6|estimate=6}}
| rowspan=1 | 
|-
| rowspan=2 | {{flag|Guatemala}}
| &lt;li&gt;[[Departments of Guatemala]]
{{User:Emijrp/AHKrow|P31=Q27448|wikidata=25|estimate=22}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of Guatemala]]
{{User:Emijrp/AHKrow|P31=Q1872284|wikidata=333|estimate=334}}
|-
| rowspan=3 | {{flag|Haiti}}
| &lt;li&gt;[[Departments of Haiti]]
{{User:Emijrp/AHKrow|P31=Q62127|wikidata=10|estimate=10}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Arrondissements of Haiti]]
{{User:Emijrp/AHKrow|P31=Q1665357|wikidata=43|estimate=42}}
|-
| &lt;li&gt;[[List of communes of Haiti]]
{{User:Emijrp/AHKrow|P31=Q3685462|wikidata=141|estimate=140}}
|-
| rowspan=2 | {{flag|Honduras}}
| &lt;li&gt;[[Departments of Honduras]]
{{User:Emijrp/AHKrow|P31=Q728145|wikidata=19|estimate=18}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of Honduras]]
{{User:Emijrp/AHKrow|P31=Q2602693|wikidata=19|estimate=299}}
|-
| rowspan=1 | {{flag|Jamaica}}
| &lt;li&gt;[[Parishes of Jamaica]]
{{User:Emijrp/AHKrow|P31=Q936955|wikidata=14|estimate=14}}
| rowspan=1 | 
|-
| rowspan=2 | {{flag|Mexico}}
| &lt;li&gt;[[States of Mexico]]
{{User:Emijrp/AHKrow|P31=Q15149663|wikidata=31|estimate=31}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of Mexico]]
{{User:Emijrp/AHKrow|P31=Q1952852|wikidata=2122|estimate=2438}}
|-
| rowspan=2 | {{flag|Nicaragua}}
| &lt;li&gt;[[Departments of Nicaragua]]
{{User:Emijrp/AHKrow|P31=Q822715|wikidata=16|estimate=15}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of Nicaragua]]
{{User:Emijrp/AHKrow|P31=Q318727|wikidata=85|estimate=153}}
|-
| rowspan=3 | {{flag|Panama}}
| &lt;li&gt;[[Provinces of Panama]]
{{User:Emijrp/AHKrow|P31=Q1382893|wikidata=10|estimate=9}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Districts of Panama]]
{{User:Emijrp/AHKrow|P31=Q3710488|wikidata=78|estimate=50}}
|-
| &lt;li&gt;[[Corregimientos of Panama]]
{{User:Emijrp/AHKrow|P31=Q3685463|wikidata=630|estimate=}}
|-
| rowspan=1 | {{flag|St. Kitts and Nevis}}
| &lt;li&gt;[[Parishes of Saint Kitts and Nevis]]
{{User:Emijrp/AHKrow|P31=Q1750854|wikidata=14|estimate=14}}
| rowspan=1 | 
|-
| rowspan=1 | {{flag|St. Lucia}}
| &lt;li&gt;[[Quarters of Saint Lucia]]
{{User:Emijrp/AHKrow|P31=Q1753792|wikidata=15|estimate=11}}
| rowspan=1 | 
|-
| rowspan=1 | {{flag|St. Vincent and the Grenadines}}
| &lt;li&gt;[[Parishes of Saint Vincent and the Grenadines]]
{{User:Emijrp/AHKrow|P31=Q1870831|wikidata=7|estimate=6}}
| rowspan=1 | 
|-
| rowspan=1 | {{flag|Trinidad and Tobago}}
| &lt;li&gt;[[Regional corporations and municipalities of Trinidad and Tobago|Regional corporations and municipalities]]
{{User:Emijrp/AHKrow|P31=Q1996198|wikidata=0|estimate=9}}
| rowspan=1 | 
|-
| rowspan=4 | {{flag|United States}}
| &lt;li&gt;[[List of states of the United States]]
{{User:Emijrp/AHKrow|P31=Q35657|wikidata=50|estimate=62}}
| rowspan=4 | 
|-
| &lt;li&gt;[[List of counties of the United States]]
{{User:Emijrp/AHKrow|P31=Q47168|wikidata=3127|estimate=6372}}
|-
| &lt;li&gt;[[List of cities of the United States]]
{{User:Emijrp/AHKrow|P31=Q15127012|wikidata=6075|estimate=147410}}
|-
| &lt;li&gt;[[List of congressional districts]] 
{{User:Emijrp/AHKrow|P31=Q17166756|wikidata=679|estimate=7619}}
|-
{{User:Emijrp/AHKrowtotal|wikidata=14603|estimate=170900}}
|}

==== South America ====
[[File:South America (orthographic projection).svg|thumb|right|200px|South America]]
'''[[South America]]''' is a [[continent]] located in the [[western hemisphere]], mostly in the [[southern hemisphere]], with a relatively small portion in the [[northern hemisphere]]. It is bordered on the west by the [[Pacific Ocean]] and on the north and east by the [[Atlantic Ocean]]; [[North America]] and the [[Caribbean Sea]] lie to the northwest.

Most of the population lives near the continent's western or eastern coasts while the interior and the [[patagonia|far south]] are sparsely populated. The geography of western South America is dominated by the [[Andes]] mountains; in contrast, the eastern part contains both highland regions and large lowlands where rivers such as the [[Amazon River|Amazon]], [[Orinoco]], and [[Paraná River|Paraná]] flow. Most of the continent lies in the [[tropics]].

The continent's cultural and ethnic outlook has its origin with the interaction of [[indigenous peoples of the Americas|indigenous peoples]] with European conquerors and immigrants and, more locally, with African slaves. Given a long [[European colonization of the Americas|history of colonialism]], the overwhelming majority of South Americans speak [[Portuguese language|Portuguese]] or [[Spanish language|Spanish]], and societies and states commonly reflect [[Western culture|Western traditions]].

South America has 13 sovereign states, 2 dependent territories and 1 integral territories of states outside of South America.

{{main|List of sovereign states and dependent territories in South America|List of cities in South America}}
{{see also|Template:Articles on first-level administrative divisions of South American countries|Template:Articles on second-level administrative divisions of South American countries}}

&lt;gallery mode="packed-hover"&gt;
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="150px" | Country 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=3 | {{flag|Argentina}}
| &lt;li&gt;[[Provinces of Argentina]]
{{User:Emijrp/AHKrow|P31=Q44753|wikidata=23|estimate=}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Departments of Argentina]]
{{User:Emijrp/AHKrow|P31=Q952274|wikidata=379|estimate=}}
|-
| &lt;li&gt;[[Municipalities of Argentina]] 
{{User:Emijrp/AHKrow|P31=Q3243765|wikidata=78|estimate=}}
|-
| rowspan=4 | {{flag|Bolivia}}
| &lt;li&gt;[[Departments of Bolivia]]
{{User:Emijrp/AHKrow|P31=Q250050|wikidata=10|estimate=9}}
| rowspan=4 | 
|-
| &lt;li&gt;[[Provinces of Bolivia]]
{{User:Emijrp/AHKrow|P31=Q1062593|wikidata=112|estimate=112}}
|-
| &lt;li&gt;[[Municipalities of Bolivia]]
{{User:Emijrp/AHKrow|P31=Q1062710|wikidata=310|estimate=314}}
|-
| &lt;li&gt;[[Cantons of Bolivia]]
{{User:Emijrp/AHKrow|P31=Q824650|wikidata=103|estimate=1374}}
|-
| rowspan=2 | {{flag|Brazil}}
| &lt;li&gt;[[States of Brazil]]
{{User:Emijrp/AHKrow|P31=Q485258|wikidata=27|estimate=26}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of Brazil]]
{{User:Emijrp/AHKrow|P31=Q3184121|wikidata=5568|estimate=5564}}
|-
| rowspan=3 | {{flag|Chile}}
| &lt;li&gt;[[Regions of Chile]]
{{User:Emijrp/AHKrow|P31=Q590080|wikidata=15|estimate=15}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Provinces of Chile]]
{{User:Emijrp/AHKrow|P31=Q1153408|wikidata=58|estimate=54}}
|-
| &lt;li&gt;[[Communes of Chile]]
{{User:Emijrp/AHKrow|P31=Q1840161|wikidata=347|estimate=346}}
|-
| rowspan=3 | {{flag|Colombia}}
| &lt;li&gt;[[Departments of Colombia]]
{{User:Emijrp/AHKrow|P31=Q215655|wikidata=32|estimate=32}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Municipalities of Colombia]]
{{User:Emijrp/AHKrow|P31=Q2555896|wikidata=1105|estimate=1119}}
|-
| &lt;li&gt;[[Corregimientos of Colombia]]
{{User:Emijrp/AHKrow|P31=Q5172823|wikidata=124|estimate=2000}}
|-
| rowspan=3 | {{flag|Ecuador}}
| &lt;li&gt;[[Provinces of Ecuador]]
{{User:Emijrp/AHKrow|P31=Q719987|wikidata=24|estimate=24}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Cantons of Ecuador]]
{{User:Emijrp/AHKrow|P31=Q1724017|wikidata=218|estimate=226}}
|-
| &lt;li&gt;[[Parishes of Ecuador]]
{{User:Emijrp/AHKrow|P31=Q2579179|wikidata=14|estimate=1000}}
|-
| rowspan=2 | {{flag|Guyana}}
| &lt;li&gt;[[Regions of Guyana]]
{{User:Emijrp/AHKrow|P31=Q2087773|wikidata=11|estimate=10}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Neighbourhood Councils of Guyana]]
{{User:Emijrp/AHKrow|P31=Q3075872|wikidata=0|estimate=27}}
|-
| {{flag|Panama}} ||  ||  ||  || See [[#North America]]
|-
| rowspan=2 | {{flag|Paraguay}}
| &lt;li&gt;[[Departments of Paraguay]]
{{User:Emijrp/AHKrow|P31=Q815068|wikidata=19|estimate=17}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Districts of Paraguay]]
{{User:Emijrp/AHKrow|P31=Q917092|wikidata=238|estimate=230}}
|-
| rowspan=3 | {{flag|Peru}}
| &lt;li&gt;[[Regions of Peru]]
{{User:Emijrp/AHKrow|P31=Q861184|wikidata=26|estimate=25}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Provinces of Peru]]
{{User:Emijrp/AHKrow|P31=Q509686|wikidata=196|estimate=195}}
|-
| &lt;li&gt;[[Districts of Peru]]
{{User:Emijrp/AHKrow|P31=Q2179958|wikidata=1883|estimate=1833}}
|-
| rowspan=2 | {{flag|Suriname}}
| &lt;li&gt;[[Districts of Suriname]]
{{User:Emijrp/AHKrow|P31=Q1649296|wikidata=10|estimate=10}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Resorts of Suriname]]
{{User:Emijrp/AHKrow|P31=Q1539014|wikidata=63|estimate=62}}
|-
| {{flag|Trinidad and Tobago}} ||  ||  ||  || See [[#North America]]
|-
| rowspan=2 | {{flag|Uruguay}}
| &lt;li&gt;[[Departments of Uruguay]]
{{User:Emijrp/AHKrow|P31=Q56059|wikidata=19|estimate=19}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Municipalities of Uruguay]]
{{User:Emijrp/AHKrow|P31=Q3685434|wikidata=61|estimate=89}}
|-
| rowspan=3 | {{flag|Venezuela}}
| &lt;li&gt;[[States of Venezuela]]
{{User:Emijrp/AHKrow|P31=Q501094|wikidata=23|estimate=23}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Municipalities of Venezuela]]
{{User:Emijrp/AHKrow|P31=Q3327920|wikidata=342|estimate=335}}
|-
| &lt;li&gt;[[Parishes of Venezuela]] 
{{User:Emijrp/AHKrow|P31=Q6063801|wikidata=1055|estimate=1000}}
|-
{{User:Emijrp/AHKrowtotal|wikidata=12493|estimate=16570}}
|}

==== Oceania ====
[[File:Oceania (orthographic projection).svg|thumb|right|200px|Oceania]]
'''[[Oceania]]''' is a [[region]] centred on the [[Pacific Islands|islands of the tropical Pacific Ocean]]. The term was coined as ''Océanie'' circa 1812 by geographer [[Conrad Malte-Brun]]. The history of Oceania in the medieval period was synonymous with the history of the indigenous peoples of Australasia, Micronesia, Melanesia, Polynesia. The arrival of European settlers in subsequent centuries resulted in a significant alteration in the social and political landscape of Oceania.

Opinions of what constitutes Oceania range from its three [[subregion]]s of [[Melanesia]], [[Micronesia]], and [[Polynesia]] to, more broadly, the entire insular region between [[Southeast Asia]] and the [[Americas]], including [[Australasia]] and the [[Malay Archipelago]].

Oceania has 14 sovereign states, 2 states not members of the United Nations and 26 other territories.

{{main|List of sovereign states and dependent territories in Oceania|List of cities in Oceania}}
{{see also|Template:Articles on first-level administrative divisions of Oceanian countries|Template:Articles on second-level administrative divisions of Oceanian countries}}

&lt;gallery mode="packed-hover"&gt;
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="150px" | Country 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=2 | {{flag|Australia}}
| &lt;li&gt;[[States and territories of Australia]]
{{User:Emijrp/AHKrow|P31=Q178712|wikidata=19|estimate=16}}
| rowspan=2 | 
|-
| &lt;li&gt;[[Local government in Australia]] 
{{User:Emijrp/AHKrow|P31=Q1867183|wikidata=1058|estimate=564}}
|-
| rowspan=1 | {{flag|Cook Islands}}
| &lt;li&gt;[[Cook Islands#Administrative subdivisions|Administrative subdivisions]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=10}}
| rowspan=1 | 
|-
| {{flag|East Timor}} ||  ||  ||  || See [[#Asia]]
|-
| rowspan=2 | {{flag|Fiji}}
| &lt;li&gt;[[Local government in Fiji|Divisions of Fiji]]
{{User:Emijrp/AHKrow|P31=Q15646524|wikidata=4|estimate=4}}
| rowspan=2 | Links to articles and redirects: [[User:Emijrp/Provinces of Fiji]].
|-
| &lt;li&gt;[[Provinces of Fiji]]
{{User:Emijrp/AHKrow|P31=Q3064474|wikidata=14|estimate=14}}
|-
| rowspan=1 | {{flag|Kiribati}}
| &lt;li&gt;[[Subdivisions of Kiribati]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| rowspan=1 | 21 inhabited islands have their own council. 6 districts until independence.
|-
| rowspan=1 | {{flag|Marshall Islands}}
| &lt;li&gt;[[List of islands of the Marshall Islands]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=24}}
| rowspan=1 |
|-
| rowspan=3 | {{flag|Nauru}}
| &lt;li&gt;Administrative districts of Nauru
{{User:Emijrp/AHKrow|P31=Q319796|wikidata=14|estimate=14}}
| rowspan=3 | 
|-
| &lt;li&gt;Electoral constituencies of Nauru
{{User:Emijrp/AHKrow|P31=Q2712218|wikidata=8|estimate=8}}
|-
| &lt;li&gt;[[List of settlements in Nauru]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=169}}
|-
| rowspan=3 | {{flag|New Zealand}}
| &lt;li&gt;[[Regions of New Zealand]]
{{User:Emijrp/AHKrow|P31=Q216712|wikidata=16|estimate=16}}
| rowspan=3 | See [[List of former territorial authorities in New Zealand|former territorial authorities]].
|-
| &lt;li&gt;[[City councils of New Zealand]]
{{User:Emijrp/AHKrow|P31=Q3154693|wikidata=1|estimate=13}}
|-
| &lt;li&gt;[[District councils of New Zealand]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=53}}
|-
| rowspan=1 | {{flag|Niue}}
| &lt;li&gt;[[List of villages in Niue]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=14}}
| rowspan=1 | 
|-
| rowspan=1 | {{flag|Palau}}
| &lt;li&gt;[[States of Palau]]
{{User:Emijrp/AHKrow|P31=Q1044181|wikidata=16|estimate=16}}
| rowspan=1 | 
|-
| rowspan=3 | {{flag|Papua New Guinea}}
| &lt;li&gt;[[Provinces of Papua New Guinea]]
{{User:Emijrp/AHKrow|P31=Q1053630|wikidata=21|estimate=18}}
| rowspan=3 | Links to articles and redirects:&lt;li&gt;[[User:Emijrp/List of cities and towns in Papua New Guinea]]&lt;li&gt;[[User:Emijrp/Provinces of Papua New Guinea]].
|-
| &lt;li&gt;Autonomous region
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1}}
|-
| &lt;li&gt;[[Districts and LLGs of Papua New Guinea]] 
{{User:Emijrp/AHKrow|P31=Q3032144|wikidata=95|estimate=}}
|-
| rowspan=3 | {{flag|Samoa}}
| &lt;li&gt;[[Districts of Samoa]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=11}}
| rowspan=3 | 
|-
| &lt;li&gt;[[Electoral districts of Samoa]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=41}}
|-
| &lt;li&gt;[[Villages of Samoa]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=265}}
|-
| rowspan=1 | {{flag|Solomon Islands}}
| &lt;li&gt;[[Provinces of the Solomon Islands]]
{{User:Emijrp/AHKrow|P31=Q1025116|wikidata=10|estimate=10}}
| rowspan=1 | 
|-
| rowspan=3 | {{flag|Tonga}}
| &lt;li&gt;[[Divisions of Tonga]]
{{User:Emijrp/AHKrow|P31=Q20740204|wikidata=5|estimate=5}}
| rowspan=3 | [http://www.pmo.gov.to/tongastats/pdf/cen06_latestResult(21Dec07)Preliminary.pdf]{{dead link|date=September 2015}} [http://www.geohive.com/cntry/tonga.aspx]
|-
| &lt;li&gt;[[Districts of Tonga]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=23}}
|-
| &lt;li&gt;[[List of cities in Tonga]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=2 | {{flag|Tuvalu}}
| &lt;li&gt;[[List of islands of Tuvalu]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=9}}
| rowspan=2 | 
|-
| &lt;li&gt;Island and islets
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=124}}
|-
| rowspan=3 | {{flag|Vanuatu}}
| &lt;li&gt;[[Provinces of Vanuatu]]
{{User:Emijrp/AHKrow|P31=Q847299|wikidata=6|estimate=6}}
| rowspan=3 | 
|-
| &lt;li&gt;Island regions
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=11}}
|-
| &lt;li&gt;[[List of islands of Vanuatu]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=83}}
|-
{{User:Emijrp/AHKrowtotal|wikidata=1282|estimate=1637}}
|}

==== Antarctica ====
[[File:Antarctica (orthographic projection).svg|thumb|right|200px|Antarctica]]
'''[[Antarctica]]''' is [[Earth]]'s southernmost [[continent]]. It contains the geographic [[South Pole]] and is situated in the [[Antarctic]] region of the [[Southern Hemisphere]], almost entirely south of the [[Antarctic Circle]], and is surrounded by the [[Southern Ocean]].
{{main|Antarctic field camps|Research stations in Antarctica|Territorial claims in Antarctica}}

&lt;gallery mode="packed-hover"&gt;
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="150px" | Country 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=4 | {{flag|Antarctica}}
| &lt;li&gt;[[Antarctic field camps]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=100}}
| &lt;ref&gt;Numbers vary from year to year and not all may be notable.&lt;/ref&gt;
|-
| &lt;li&gt;[[Research stations in Antarctica]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=200}}
| &lt;ref&gt;Around 100 permanent stations (including summer-only camps) in 2014; perhaps as many again have been operated but since closed down.&lt;/ref&gt;
|-
| &lt;li&gt;Antarctic programs and expeditions
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=100}}
| &lt;ref&gt;Up to 50 national programs plus other notable expeditions.&lt;/ref&gt;
|-
| &lt;li&gt;Named locations in Antarctica
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=20000}}
| &lt;ref&gt;There are [https://www1.data.antarctica.gov.au/aadc/gaz/scar/ 19,254] identified locations/physical features in the SCAR Composite Gazetteer as of early 2015. Allowing for a small rate of increase, 20,000 is a reasonable estimate.&lt;/ref&gt;
|-
{{User:Emijrp/AHKrowtotal|wikidata=0|estimate=20400}}
|}

&lt;!-- table of territorial claims commented out, as this isn't really a very useful way to divide things. three overlap, and a large chunk of the continent is not covered by any of the ten claims
{| class="wikitable sortable"
! rowspan="2" | Territory
! colspan="2" | Estimate 
! rowspan="2" | References
|-
! Articles
! Progress 
|-
| [[British Antarctic Territory]] || ? || style="text-align: center;" data-sort-value=0 | '''?/?''' || 
|-
| [[Ross Dependency]] || ? || style="text-align: center;" data-sort-value=0 | '''?/?''' || 
|-
| [[Adélie Land]] || ? || style="text-align: center;" data-sort-value=0 | '''?/?''' || 
|-
| [[Peter I Island]] || ? || style="text-align: center;" data-sort-value=0 | '''?/?''' || 
|-
| [[Australian Antarctic Territory]] || ? || style="text-align: center;" data-sort-value=0 | '''?/?''' || 
|-
| [[Queen Maud Land]] || ? || style="text-align: center;" data-sort-value=0 | '''?/?''' || 
|-
| [[Chilean Antarctic Territory]] || ? || style="text-align: center;" data-sort-value=0 | '''?/?''' || 
|-
| [[Argentine Antarctica]] || ? || style="text-align: center;" data-sort-value=0 | '''?/?''' || 
|-
| [[Marie Byrd Land]] || ? || style="text-align: center;" data-sort-value=0 | '''?/?''' || 
|}

--&gt;

=== Physical geography ===

'''[[Physical geography]]''' is that branch of natural science which deals with the study of processes and patterns in the natural environment like the atmosphere, hydrosphere, biosphere, and geosphere, as opposed to the cultural or built environment, the domain of human geography.

* '''[[Canal]]s''' and '''navigations''' are human-made [[Channel (geography)|channels]] for water conveyance (supply), or to service [[water transport]] [[vehicle]]s.
* A '''[[cave]]''' or '''cavern''' is a natural underground space large enough for a human to enter.
* A '''[[desert]]''' is a [[landscape]] or [[region]] that receives an extremely low amount of [[precipitation (meteorology)|precipitation]], less than enough to support growth of most plants.
* A '''[[forest]]''', also referred to as a '''wood''' or the '''woods''', is an area with a high density of [[trees]].
* A '''[[glacier]]''' is a large persistent body of [[ice]] that forms where the accumulation of [[snow]] exceeds its [[ablation]] (melting and [[sublimation (phase transition)|sublimation]]) over many years, often centuries.
* An '''[[island]]''' is any piece of [[continent|sub-continental]] land that is surrounded by [[water]].
* A '''[[lake]]''' is a body of relatively still fresh or salt [[water]] of considerable size, localized in a [[Depression (geology)|basin]], that is surrounded by land.
* A '''[[mountain]]''' is a large [[landform]] that stretches above the surrounding land in a limited area usually in the form of a peak.
* A '''[[river]]'''  is a natural [[watercourse]], usually [[freshwater]], flowing towards an [[ocean]],  a [[lake]],  a [[sea]], or another river. There are 17 [[List of countries without rivers|countries without rivers]].
* A '''[[sea]]''' generally refers to a large [[body of water|body]] of salt water.

&lt;gallery mode="packed-hover" heights=100px&gt;
File:Alter Strom.jpg|The Alter Strom, in the sea resort of [[Warnemünde]], Germany
File:Lechuguilla Cave Pearlsian Gulf.jpg|[[Lechuguilla Cave]], [[New Mexico]]
File:Rub al Khali 002.JPG|[[Sand dunes]] in the [[Rub' al Khali]] ("Empty quarter") of [[Saudi Arabia]]
File:Swiss National Park 131.JPG||A [[Pinophyta|conifer forest]] in the [[Swiss Alps]] ([[Swiss National Park|National Park]])
File:Baltoro glacier from air.jpg|The [[Baltoro Glacier]] in the [[Karakoram]], [[Kashmir]], Northern [[Pakistan]]
File:Island near Fiji.jpg|A small [[Fiji]]an island
File:Oeschinen.jpg|[[Oeschinen Lake]] in the [[Swiss Alps]]
|Mount Fuji with a [[Shinkansen]] and [[Sakura]] blossoms in the foreground
File:Nile03(js).jpg|Dhows on the [[Nile]]
File:Waves lajolla.jpg|The sea at [[La Jolla, California]]
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="150px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=2 | [[Continent]]s{{anchor|Continents}}
| &lt;li&gt;[[List of continents]]
{{User:Emijrp/AHKrow|P31=Q5107|wikidata=38|estimate=7}}
| rowspan=2 | 
|-
| &lt;li&gt;[[List of supercontinents]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=10}}
|-
| [[Canal]]s{{anchor|Canals}}
| &lt;li&gt;[[List of canals]] ([[:Category:Lists of canals|cat]])
{{User:Emijrp/AHKrow|P31=Q12284|wikidata=23635|estimate=}}
| Total number of canals is unknown.
|-
| [[Cave]]s{{anchor|Caves}}
| &lt;li&gt;[[List of caves]]
{{User:Emijrp/AHKrow|P31=Q35509|wikidata=3754|estimate=2400}}
| [[World Caves Database]] includes 2,424 caves deeper than 300m (total height) or longer than 3km.&lt;ref&gt;{{cite web |url=http://www-sop.inria.fr/agos/sis/DB/countries.html |title=Caves of the world |date=2013-05-26 |work= |publisher= |accessdate=2013-05-26 |quote= Number of caves = 2424; Caves deeper than 300m = 1075; Caves longer than 3kms = 1628 |archiveurl=http://www.webcitation.org/6GtsJQQrw |archivedate=2013-05-26 |deadurl=no}}&lt;/ref&gt;

* [[:pl:Ojcowski Park Narodowy]] - over 400 caves (sometimes very small, it includes caves no longer than 2m) on area of 21,46 km²
|-
| rowspan=2 | [[Desert]]s{{anchor|Deserts}}
| &lt;li&gt;[[List of deserts]]
{{User:Emijrp/AHKrow|P31=Q8514|wikidata=2266|estimate=}}
| Total number of deserts is unknown.
|-
| &lt;li&gt;[[List of oases]]
{{User:Emijrp/AHKrow|P31=Q43742|wikidata=59|estimate=}}
| Total number of oases is unknown.
|-
| [[Forest]]s{{anchor|Forests}}
| &lt;li&gt;[[List of forests]] ([[:Category:Lists of forests|cat]])
{{User:Emijrp/AHKrow|P31=Q4421|wikidata=4257|estimate=}}
| Total number of forests is unknown.
|-
| [[Glacier]]s{{anchor|Glaciers}}
| &lt;li&gt;[[List of glaciers]]
{{User:Emijrp/AHKrow|P31=Q35666|wikidata=5090|estimate=100000}}
| Total number of glaciers is unknown. According to sources by country:
{{div col|1}}
* [[List of glaciers in Kyrgyzstan|Kyrgyzstan]] (8,000)&lt;ref&gt;{{cite web | url=http://www.advantour.com/kyrgyzstan/glaciers.htm | title=Kyrgyzstan Glaciers | archiveurl=http://www.webcitation.org/6IhRlgRqQ | archivedate=2013-08-07 | deadurl=no | quote=Glaciers, (8000 of them – one source says 8208), and permanent snow cover some 8100 square kilometers - about 30% of the total land area of the Kyrgyz Republic. The glaciers themselves cover about 4% of the surface area of the country.}}&lt;/ref&gt;
* [[List of glaciers in Alaska|United States]] (100,000)&lt;ref&gt;{{cite web | url=http://www.adn.com/2011/06/18/1923654/how-many-alaska-glaciers-no-easy.html | title=How many Alaska glaciers? No easy answer | accessdate=2014-07-27 | quote=Not long ago, a glaciologist wrote that the number of glaciers in Alaska "is estimated at (greater than) 100,000." That fuzzy number, perhaps written in passive voice for a reason, might be correct. But it depends upon how you count. | archiveurl=http://www.webcitation.org/6RNK5Bwg7 | archivedate=2014-07-27 | deadurl=no}}&lt;/ref&gt;&lt;ref&gt;{{cite web | url=http://www.library.state.ak.us/asp/alaska_glaciers.html | title=Alaska's Glaciers | archiveurl=http://www.webcitation.org/6IhRyozjG | archivedate=2013-08-07 | deadurl=no | quote=745 Feature records have been selected from GNIS.}}&lt;/ref&gt;
{{div col end}}
|-
| rowspan=3 | [[Island]]s{{anchor|Islands}}
| &lt;li&gt;[[List of islands]] ([[:Category:Lists of islands|cat]])
{{User:Emijrp/AHKrow|P31=Q23442|wikidata=97832|estimate=100000}}
| Total number of islands is unknown. According to sources are approximately 45,000 tropical islands.&lt;ref&gt;[[Island]]&lt;/ref&gt;
|-
| &lt;li&gt;[[List of islands in rivers]]
{{User:Emijrp/AHKrow|P31=Q162602|wikidata=846|estimate=}}
| Total number of islands in rivers is unknown.
|-
| &lt;li&gt;[[List of islands in lakes]]
{{User:Emijrp/AHKrow|P31=Q863974|wikidata=24|estimate=}}
| Total number of islands in lakes is unknown.
|-
| [[Lake]]s{{anchor|Lakes}}
| &lt;li&gt;[[List of lakes]] ([[:Category:Lists of lakes|cat]])
{{User:Emijrp/AHKrow|P31=Q23397|wikidata=207659|estimate=1000000}}
| Total number of lakes is unknown.&lt;ref&gt;{{cite web | url=http://www.funtrivia.com/askft/Question5761.html | title=Which country has the most lakes?}}&lt;/ref&gt; According to sources by country:
{{div col|2}}
* [[List of lakes in Belarus|Belarus]] (11,000)&lt;ref name="belaruswater"&gt;{{cite web | url=http://www.development.by/belarus/ | title=Belarus Overview | archiveurl=http://www.webcitation.org/6IiUCBR5X | archivedate=2013-08-08 | deadurl=no | quote=There are more than 20,000 rivers and creeks and about 11,000 lakes in Belarus.}}&lt;/ref&gt;
* [[List of lakes of Canada|Canada]] (31,752)&lt;ref&gt;{{cite web | url=http://atlas.nrcan.gc.ca/site/english/learningresources/facts/lakes.html | title=The Atlas of Canada | archiveurl=http://wayback.archive.org/web/20120415102959/http://atlas.nrcan.gc.ca/site/english/learningresources/facts/lakes.html | archivedate=2012-04-15 | deadurl=yes | quote=31,752+larger than 3 km² (2-3 million in total)}}&lt;/ref&gt;
* [[List of lakes of Estonia|Estonia]] (1,000)&lt;ref name="estoniawater" /&gt;
* [[List of lakes of Finland|Finland]] (187,888)&lt;ref&gt;{{cite web | url=http://www.ymparisto.fi/default.asp?node=12335&amp;lan=en | title=Lakes in Finland | archiveurl=http://www.webcitation.org/6Ggcra2BV | archivedate=2013-05-17 | deadurl=no | quote=There are 187,888 lakes in Finland. Lake is here defined as a body of standing water larger than 5 ares (500 m2). 56,000 over 10,000 m²}}&lt;/ref&gt;
* [[List of lakes in Iceland|Iceland]] (67)
* [[List of lakes of Latvia|Latvia]] (3,000)&lt;ref name="latviawater" /&gt;
* [[List of lakes of Lithuania|Lithuania]] (3,000)&lt;ref name="lithuaniawater" /&gt;
* [[List of lakes in New Zealand|New Zealand]] (229)&lt;ref&gt;41 lakes &gt;10 km² (1000 ha), 229 lakes &gt;0.5 km² (50 ha), 3820 lakes &gt;0.01 km² (1 ha)&lt;/ref&gt;
* [[List of lakes of Norway|Norway]] (450,000)
* [[List of lakes in Russia|Russia]] (???)
* [[List of lakes of Sweden|Sweden]] (150,000)&lt;ref&gt;Data available for 150,000, only 75,000 with name, 57,000 in [[:sv:Kategori:Listor över Sveriges insjöar]]&lt;/ref&gt;
* [[List of lakes of the United States|United States]] (???)&lt;ref&gt;[[Masurian Lake District]] alone contains more than 2,000 lakes.&lt;/ref&gt;
{{div col end}}
|-
| rowspan=3 | [[Mountain]]s{{anchor|Mountains}}
| &lt;li&gt;[[List of mountains]] ([[:Category:Lists of mountains|cat]])
{{User:Emijrp/AHKrow|P31=Q8502|wikidata=649285|estimate=1000000}}
| rowspan=2 | Total number of mountains is unknown. [[Mountains Mount]] includes info over 100,000 mountains.&lt;ref&gt;{{cite web |url=http://www.mountainsmounts.com |title=Mountains Mount |date=2012-05-30 |work= |publisher= |accessdate=2013-05-26 |quote= |archiveurl=http://wayback.archive.org/web/20120530104621/http://www.mountainsmounts.com/ |archivedate=2012-05-30 |deadurl=yes}}&lt;/ref&gt; According to sources [[List of mountains by elevation|by elevation]]:
{{div col|2}}
* [[Eight-thousander|Above 8,000 m]] (14)
* Above 7,000 m (???)
* Above 6,000 m (???)
* Above 5,000 m (???)
{{div col end}}
|-
| &lt;li&gt;[[List of mountain ranges]]
{{User:Emijrp/AHKrow|P31=Q46831|wikidata=19993|estimate=}}
|-
| &lt;li&gt;[[List of volcanoes]]
{{User:Emijrp/AHKrow|P31=Q8072|wikidata=1406|estimate=1500}}
| According to sources there are over 1,500 volcanoes worldwide.&lt;ref&gt;{{cite web | url=http://www.volcanodiscovery.com/volcanoes/faq/how_many_volcanoes.html | title=How many volcanoes are there in the world? | archiveurl=http://www.webcitation.org/67vAwTCPF | archivedate=2012-05-25 | deadurl=no}}&lt;/ref&gt;
|-
| [[River]]s{{anchor|Rivers}}
| &lt;li&gt;[[List of rivers]] ([[:Category:Lists of rivers|cat]])
{{User:Emijrp/AHKrow|P31=Q4022|wikidata=231380|estimate=1000000}}
| Total number of rivers is unknown. According to sources, there are 146,000+ in Africa&lt;ref&gt;{{cite web | url=http://www.fao.org/docrep/008/a0118e/a0118e07.htm | title=Cartographic river drainage databases | archiveurl=http://www.webcitation.org/6Ghy4zX15 | archivedate=2013-05-18 | deadurl=no}}&lt;/ref&gt; and 104,000+ in Europe.&lt;ref&gt;{{cite web|url=http://www.clickgreen.org.uk/analysis/general-analysis/123752-more-than-half-of-europe%5Cs-rivers-fail-ecological-targets,-report-finds.html|title=More than half of Europe's rivers fail ecological targets, report finds}}&lt;/ref&gt; According to sources by country:
{{div col|2}}
* [[List of rivers of Azerbaijan|Azerbaijan]] (8,359)&lt;ref&gt;According to unknown sources there are 8,188 rivers less than 25 km, only 24 rivers over 100 km.&lt;/ref&gt;
* [[List of rivers of Bangladesh|Bangladesh]] (700)&lt;ref&gt;{{cite web|url=http://countrystudies.us/bangladesh/25.htm|title=River Systems}}&lt;/ref&gt;
* [[List of rivers of Belarus|Belarus]] (20,000)&lt;ref name="belaruswater" /&gt;
* [[List of rivers of Brazil|Brazil]] (25,000)&lt;ref&gt;{{cite web|url=http://www.fao.org/fishery/countrysector/naso_brazil/en|title=National Aquaculture Sector Overview - Brazil}}&lt;/ref&gt;
* [[List of rivers of China|China]] (20,000)&lt;ref&gt;{{cite web|url=http://www.fao.org/nr/water/espim/country/china/print1.stm|title=China - Geography and population|publisher=FAO}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.theatlantic.com/china/archive/2013/04/28-000-rivers-disappeared-in-china-what-happened/275365/|title=28,000 Rivers Disappeared in China: What Happened?}}&lt;/ref&gt;
* [[List of rivers of El Salvador|El Salvador]] (300)&lt;ref&gt;{{cite web|url=http://countrystudies.us/el-salvador/18.htm|title=El Salvador - Physical Features}}&lt;/ref&gt;
* [[List of rivers of Estonia|Estonia]] (7,000)&lt;ref name="estoniawater"&gt;{{cite web|url=http://www.wwoof.ee/index.php?page=about-estonia&amp;hl=en_US|title=About Estonia}}&lt;/ref&gt;
* [[List of rivers of Georgia|Georgia]] (26,000)&lt;ref&gt;{{cite web|url=http://www.aen.ge/index.php?page=hydro|title=HYDRO ENERGY}}&lt;/ref&gt;
* [[List of rivers of Guatemala|Guatemala]] (3,000)&lt;ref&gt;{{cite web|url=http://fivas.org/fivas/vedlegg/Power-to-the-people_FIVAS_2010.pdf|title=Hydropower, indigenous peoples’ rights and popular resistance in Guatemala}}{{dead link|date=September 2015}}&lt;/ref&gt;
* [[List of rivers of Kyrgyzstan|Kyrgyzstan]] (25,000)&lt;ref&gt;{{cite web|url=http://caresd.net/iwp/water.html|title=Water and hydropower Resources of the Kyrgyz Republic}}&lt;/ref&gt;&lt;ref&gt;{{cite web | url=http://www.welcome.kg/ru/kyrgyzstan/nature/wot/ | title=Воды | archiveurl=http://www.webcitation.org/6GhcI8wOB | archivedate=2013-05-18 | deadurl=no | quote= 2,044 over 10 km}}&lt;/ref&gt;
* [[List of rivers of Latvia|Latvia]] (12,000)&lt;ref name="latviawater"&gt;{{cite web|url=http://www.blbc.lv/business/business-environment|title=Latvia - General information Geography}}&lt;/ref&gt;
* [[List of rivers of Lithuania|Lithuania]] (22,000)&lt;ref name="lithuaniawater"&gt;{{cite web|url=http://www.lietuva.lt/en/about_lithuania/geography_climate|title=Lithuania - Geography &amp; Climate}}&lt;/ref&gt;
* [[List of rivers of Nepal|Nepal]] (6,000)&lt;ref&gt;{{cite web | url=http://www.nepalrivers.org.np/Article/the-karnali-river-article.php | title=Nepal River Conservation Trust | archiveurl=http://wayback.archive.org/web/20120305094920/http://www.nepalrivers.org.np/Article/the-karnali-river-article.php | archivedate=2012-03-05 | deadurl=yes | quote=The latest data shows that Nepal has got over 6000 rivers and streams which have got hydropower potential.}}&lt;/ref&gt;
* [[List of rivers of Panama|Panama]] (500)&lt;ref&gt;{{cite web | url=http://countrystudies.us/panama/24.htm | title=Panama - Geography | quote=Nearly 500 rivers lace Panama's rugged landscape. Mostly unnavigable, many originate as swift highland streams, meander in valleys, and form coastal deltas.}}&lt;/ref&gt;
* [[List of rivers of Romania|Romania]] (4,000)&lt;ref&gt;{{cite web | url=http://www.fao.org/docrep/009/t0798e/T0798E09.htm | title=Inland fisheries of Europe | quote=In addition to the dominating Danube, Romania has over 4,000 rivers having watersheds larger than 10 km2 and a total length exceeding 60,000 km.}}&lt;/ref&gt;
* [[List of rivers of Russia|Russia]] (120,000)&lt;ref&gt;{{cite web | url=http://kids.britannica.com/comptons/article-207540/Russia | title=Russia:: Rivers and Lakes | quote=Among its 100,000 rivers, Russia contains some of the world's longest. Four of the country's five longest rivers—the Ob-Irtysh, Amur, Lena, and Yenisey—are in Siberia.}}&lt;/ref&gt;&lt;ref&gt;{{cite web | url=http://www.fao.org/docrep/W6240E/w6240e16.htm | title=Russia - Water report | quote=There are 120,000 rivers over 10 km long. Their total length within the Russian Federation equals 2.3 million km | archiveurl=http://www.webcitation.org/6Kx8rpNPc | archivedate=2013-11-07 | deadurl=no}}&lt;/ref&gt;
* [[List of rivers of Spain|Spain]] (1,800)&lt;ref&gt;{{cite web | url=http://countrystudies.us/spain/31.htm | title=Spain - Rivers | quote=Of the roughly 1,800 rivers and streams in Spain, only the Tagus is more than 960 kilometers long; all but 90 extend less than 96 kilometers.}}&lt;/ref&gt;
* [[List of rivers of Ukraine|Ukraine]] (71,000)&lt;ref&gt;{{cite web | url=http://www.fao.org/fi/oldsite/FCP/en/UKR/profile.htm | title=FAO Fishery Country Profile - UKRAINE | quote=Ukraine has about 71,000 rivers, with a total length of 248,000 km. Among them, 3,212 rivers have a length of more than 10 km and total 73,700 km in length.}}&lt;/ref&gt;
* [[List of rivers of the United States|United States]] (250,000)&lt;ref&gt;{{cite web|url=http://www.americanrivers.org/library/river-facts/river-facts.html|title=River Facts|archiveurl=http://web.archive.org/web/20110807132400/http://www.americanrivers.org/library/river-facts/river-facts.html|archivedate=2011-08-07}})&lt;/ref&gt;&lt;ref&gt;{{cite web|url=https://en.wikipedia.org/w/index.php?title=Wikipedia_talk:WikiProject_Rivers&amp;oldid=470687140#Estimate|title=Wikipedia talk:WikiProject Rivers|quote=2,000,000+ including small streams}}&lt;/ref&gt;
* [[List of rivers of Venezuela|Venezuela]] (1,000)&lt;ref&gt;{{cite web | url=http://countrystudies.us/venezuela/10.htm | title=Venezuela - Rivers | quote=The Orinoco is by far the most important of the more than 1,000 rivers in the country.}}&lt;/ref&gt;
{{div col end}}
|-
| rowspan=3 | [[Sea]]s{{anchor|Seas}}
| &lt;li&gt;[[List of seas]]
{{User:Emijrp/AHKrow|P31=Q165|wikidata=227|estimate=150}}
| rowspan=3 | 
|-
| &lt;li&gt;[[List of oceans]]
{{User:Emijrp/AHKrow|P31=Q9430|wikidata=32|estimate=5}}
|-
| &lt;li&gt;[[List of ancient oceans]]
{{User:Emijrp/AHKrow|P31=Q11802343|wikidata=25|estimate=14}}
|-
{{User:Emijrp/AHKrowtotal|wikidata=1247808|estimate=3255166}}
|}

== History ==

'''[[History]]''' (from [[Greek language|Greek]] ''[[wikt:ἱστορία|ίστορία]]'' - ''historia'', meaning "inquiry, knowledge acquired by investigation") is the discovery, collection, organization, and presentation of information about past events. See also [[Outline of history]].

* A '''[[coup d'état]]''', also known as a coup, a putsch, or an overthrow, is the sudden deposition of a government, usually by a small group of the existing state establishment—typically the military—to depose the extant government and replace it with another body, civil or military.
* A '''[[disaster]]''' is a natural or man-made (or technological) hazard resulting in an event of substantial extent causing significant physical damage or destruction, loss of life, or drastic change to the environment. See also [[Lists of disasters]] and [[List of disasters by cost]].
* An '''[[election]]''' is a formal decision-making process by which a population chooses an individual to hold public office. Elections have been the usual mechanism by which modern representative democracy has operated since the 17th century. Elections may fill offices in the legislature, sometimes in the executive and judiciary, and for regional and local government.
* '''[[Military history]]''' is a [[humanities]] [[List of academic disciplines|discipline]] within the scope of [[History|general historical]] recording of [[War|armed conflict]] in the [[Human history|history of humanity]], and its impact on the societies, their cultures, economies and changing [[Politics|intra]] and [[international relations]]hips. [[WP:MHA#Statistics]] has over 127,000 articles as of this listing.
* A '''[[revolution]]''' (from the Latin revolutio, "a turn around") is a fundamental change in power or organizational structures that takes place in a relatively short period of time. 

&lt;gallery mode="packed-hover"&gt;
File:Gyzis 006 (Ηistoria).jpeg|Historia (Allegory of History) by [[Nikolaos Gysis]] (1892)
File:2004-tsunami.jpg|Taken at [[Ao Nang]], [[Krabi Province]], [[Thailand]], during the [[2004 Indian Ocean earthquake and tsunami]]
File:Election MG 3455.JPG|A [[ballot box]]
|[[Soviet]] soldier waving the [[Red Banner]] over the central plaza of [[Battle of Stalingrad|Stalingrad]] in 1943
File:Eugène Delacroix - La liberté guidant le peuple.jpg|''[[Liberty Leading the People]]'' in [[French Revolution]], painting by [[Eugène Delacroix]]
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| [[Universe]]
| &lt;li&gt;[[Chronology of the universe]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| See also [[Lunar geologic timescale]].
|-
| [[Earth]]
| &lt;li&gt;[[List of archaeological periods]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| See also [[Geologic time scale]]
|-
| rowspan=5 | By country and period
| &lt;li&gt;[[World history]]
{{User:Emijrp/AHKrow|P31=Q18340514|wikidata=33034|estimate=200000}}
| rowspan=5 | Assuming [[:Category:Years by country|200 countries and 1,000 years]], there could be 200,000 articles. See also [[List of time periods]], [[History by period]], [[:Category:Year lists]] and [[List of calendars]].
|-
| &lt;li&gt;[[List of years]]
{{User:Emijrp/AHKrow|P31=Q577|wikidata=9642|estimate=10000}}
|-
| &lt;li&gt;[[List of decades]]
{{User:Emijrp/AHKrow|P31=Q39911|wikidata=470|estimate=1000}}
|-
| &lt;li&gt;[[List of centuries]]
{{User:Emijrp/AHKrow|P31=Q578|wikidata=153|estimate=100}}
|-
| &lt;li&gt;[[List of millennia]]
{{User:Emijrp/AHKrow|P31=Q36507|wikidata=75|estimate=50}}
|-
| rowspan=1 | By format
| &lt;li&gt;[[List of timelines]]
{{User:Emijrp/AHKrow|P31=Q186117|wikidata=34970|estimate=}}
| rowspan=1 | Total number of timelines is unknown. See also [[Timelines of world history]].
|-
| By topic
| &lt;li&gt;[[:Category:History by topic]]&lt;li&gt;[[:Category:History-related lists]]
{{User:Emijrp/AHKrow|P31=Q17524420|wikidata=36746|estimate=}}
| Total number of topics is unknown.
|-
| [[Coups d'état]]
| &lt;li&gt;[[List of coups d'état and coup attempts|Coups d'état and coup attempts]]
{{User:Emijrp/AHKrow|P31=Q45382|wikidata=245|estimate=}}
| Total number of coups d'état is unknown.
|-
| rowspan=9 | [[Disaster]]s ([[natural disaster|natural]]){{anchor|Disasters}}
| &lt;li&gt;[[List of earthquakes]]
{{User:Emijrp/AHKrow|P31=Q7944|wikidata=1569|estimate=}}
| Total number of earthquakes is unknown.
|-
| &lt;li&gt;[[List of epidemics]]
{{User:Emijrp/AHKrow|P31=Q44512|wikidata=86|estimate=}}
| Total number of epidemics is unknown.
|-
| &lt;li&gt;[[List of fires]]
{{User:Emijrp/AHKrow|P31=Q168983|wikidata=329|estimate=}}
| Total number of fires is unknown.
|-
| &lt;li&gt;[[List of floods]]
{{User:Emijrp/AHKrow|P31=Q8068|wikidata=210|estimate=}}
| Total number of floods is unknown.
|-
| &lt;li&gt;[[List of landslides]]
{{User:Emijrp/AHKrow|P31=Q167903|wikidata=34|estimate=}}
| Total number of landslides is unknown.
|-
| &lt;li&gt;[[List of tornadoes and tornado outbreaks|List of tornadoes]]
{{User:Emijrp/AHKrow|P31=Q8081|wikidata=103|estimate=}}
| Total number of tornadoes is unknown.
|-
| &lt;li&gt;[[List of tornadoes and tornado outbreaks|List of tornado outbreaks]]
{{User:Emijrp/AHKrow|P31=Q2696963|wikidata=173|estimate=}}
| Total number of tornado outbreaks is unknown.
|-
| &lt;li&gt;[[List of tsunamis]]
{{User:Emijrp/AHKrow|P31=Q8070|wikidata=8|estimate=}}
| Total number of tsunamis is unknown.
|-
| &lt;li&gt;[[List of volcanic eruptions]]
{{User:Emijrp/AHKrow|P31=Q7692360|wikidata=57|estimate=}}
| Total number of volcanic eruptions is unknown.
|-
| rowspan=11 | [[Disaster]]s ([[man-made disaster|man-made]])
| &lt;li&gt;[[List of airship accidents]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of airship accidents is unknown.
|-
| &lt;li&gt;[[List of accidents and incidents involving commercial aircraft]]
{{User:Emijrp/AHKrow|P31=Q3002150|wikidata=159|estimate=}}
| Total number of accidents involving commercial aircraft is unknown.
|-
| &lt;li&gt;[[List of famines]]
{{User:Emijrp/AHKrow|P31=Q168247|wikidata=32|estimate=}}
| Total number of famines is unknown.
|-
| &lt;li&gt;[[List of industrial disasters]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of industrial disasters is unknown.
|-
| &lt;li&gt;[[List of maritime disasters]]
{{User:Emijrp/AHKrow|P31=Q2620513|wikidata=56|estimate=}}
| Total number of maritime disasters is unknown.
|-
| &lt;li&gt;[[Nuclear and radiation accidents]]
{{User:Emijrp/AHKrow|P31=Q1620824|wikidata=15|estimate=}}
| Total number of nuclear accidents is unknown.
|-
|  &lt;li&gt;[[List of oil spills]]
{{User:Emijrp/AHKrow|P31=Q220187|wikidata=27|estimate=}}
| Total number of oil spills is unknown.
|-
| &lt;li&gt;[[List of road accidents]]
{{User:Emijrp/AHKrow|P31=Q9687|wikidata=114|estimate=}}
| Total number of road accidents is unknown.
|-
| &lt;li&gt;[[List of rail accidents]]
{{User:Emijrp/AHKrow|P31=Q1078765|wikidata=913|estimate=}}
| Total number of rail accidents is unknown.
|-
| &lt;li&gt;&lt;li&gt;[[List of spaceflight-related accidents and incidents|Spaceflight-related accidents and incidents]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of spaceflight-related accidents is unknown.
|-
| &lt;li&gt;[[List of structural failures and collapses|Structural failures and collapses]]
{{User:Emijrp/AHKrow|P31=Q1309431|wikidata=44|estimate=}}
| Total number of structural failures is unknown.
|-
| rowspan=1 | [[Election]]{{anchor|Election}}
| &lt;li&gt;[[Elections by country]]
{{User:Emijrp/AHKrow|P31=Q40231|wikidata=21256|estimate=}}
| Total number of elections is unknown.
|-
| rowspan=4 | [[Military history]]
| &lt;li&gt;[[List of battles]]
{{User:Emijrp/AHKrow|P31=Q178561|wikidata=11420|estimate=}}
| Total number of battles is unknown.
|-
| &lt;li&gt;[[List of wars]] 
{{User:Emijrp/AHKrow|P31=Q198|wikidata=991|estimate=}}
| Total number of wars is unknown.
|-
| &lt;li&gt;[[List of treaties]] 
{{User:Emijrp/AHKrow|P31=Q131569|wikidata=2230|estimate=}}
| Total number of treaties is unknown.
|-
| &lt;li&gt;[[:Category:Naval ships]]
{{User:Emijrp/AHKrow|P31=Q3114762|wikidata=9338|estimate=}}
| Total number of warships is unknown.
|-
| rowspan=2 | [[Revolution]]s and [[rebellion]]s{{anchor|Revolutions}}
| &lt;li&gt;[[List of revolutions and rebellions]]
{{User:Emijrp/AHKrow|P31=Q10931|wikidata=57|estimate=}}
| Total number of revolutions and rebellions is unknown. See also [[List of uprisings led by women]].
|-
| &lt;li&gt;[[List of strikes]]
{{User:Emijrp/AHKrow|P31=Q49776|wikidata=158|estimate=}}
| Total number of strikes is unknown.
|-
| rowspan=2 | Sites{{anchor|Sites}}
| &lt;li&gt;[[List of archaeological sites]]
{{User:Emijrp/AHKrow|P31=Q839954|wikidata=34911|estimate=}}
| Total number of archaeological sites.
|-
| &lt;li&gt;[[List of ruins]]
{{User:Emijrp/AHKrow|P31=Q109607|wikidata=4487|estimate=}}
| Total number of ruins is unknown.
|-
{{User:Emijrp/AHKrowtotal|wikidata=204112|estimate=371888}}
|}

== GLAM ==
'''[[GLAM]]''' is an acronym for "galleries, libraries, archives, and museums", although other versions of the acronym exist, such as LAM, which incorporates only libraries, archives, and museums. More generally, GLAMs are publicly funded, publicly accountable institutions collecting [[cultural heritage]] materials.

* An '''[[archive]]''' is an accumulation of historical records, or the physical place they are located. Archives contain primary source documents that have accumulated over the course of an individual or organization's lifetime, and are kept to show the function of that person or organization.

* A '''[[library]]''' is an organized collection of information resources made accessible to a defined community for reference or borrowing. It provides physical or digital access to material, and may be a physical building or room, or a virtual space, or both.

* A '''[[museum]]''' is an institution that cares for (conserves) a collection of artifacts and other objects of scientific, artistic, cultural, or historical importance and makes them available for public viewing through exhibits that may be permanent or temporary.

&lt;gallery mode="packed-hover"&gt;
File:LOC Main Reading Room Highsmith.jpg|Main reading room at the [[Library of Congress]]
File:Fondos archivo.jpg|Shelved record boxes of an archive
File:Museo del Prado 2016 (25185969599).jpg|[[Museo del Prado]] in Spain
File:Melk - Abbey - Library.jpg|Library at [[Melk Abbey]] in Austria
File:Louvre at night centered.jpg|thumb|right|The [[Musée du Louvre|Louvre Museum]] in [[Paris]], one of the largest and most famous museums in the world
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="200px" | Related pages
! Wikidata
! Estimate
! References 
|-
| [[Archive]]s{{anchor|Archives}}
| &lt;li&gt;[[List of archives]] ([[:Category:Archives by country|cat]])
{{User:Emijrp/AHKrow|P31=Q166118|wikidata=2262|estimate=}}
| Total number of archives is unknown. According to sources by country:
{{div col|2}}
* [[List of archives in Spain|Spain]] (34,000)&lt;ref&gt;{{cite web | url=http://censoarchivos.mcu.es/CensoGuia/contenido.htm | title=Censo-Guía de Archivos de España e Iberoamérica | archiveurl=http://www.webcitation.org/6Ih8CrB5V | archivedate=2013-08-07 | deadurl=no}}&lt;/ref&gt;
* [[List of archives in the United Kingdom|United Kingdom]] (2,389)&lt;ref name="ukglam" /&gt;
{{div col end}}

See also [[List of national archives]], [[List of film archives]] and [[List of sound archives]].
|-
| [[Library|Libraries]]{{anchor|Libraries}}
| &lt;li&gt;[[List of libraries]] ([[:Category:Libraries by country|cat]])
{{User:Emijrp/AHKrow|P31=Q7075|wikidata=9428|estimate=72000}}
| According to OCLC, there are 72,000+ libraries in 170 countries.&lt;ref&gt;{{cite web | url=http://www.oclc.org/multimedia/2011/files/emearc/Jay_Jordan_EMEARC2011.pdf | title=OCLC President’s Report | archiveurl=http://www.webcitation.org/68wzCbnDp | archivedate=2013-08-07 | deadurl=no}}&lt;/ref&gt; According to sources by country:
{{div col|3}}
* [[List of libraries in Burundi|Burundi]] (60)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Africa/Burundi-LIBRARIES-AND-MUSEUMS.html | title=Burundi - Libraries and museums | quote=There are 60 public libraries in Burundi, with the largest in and around the capital. Libraries in Bujumbura include the Public Library, which has 27,000 volumes; the library of the University of Burundi, with 192,000 volumes; and a specialized collection at the Department of Geology and Mines. The French Cultural Center in Bujumbura holds 33,000 volumes.}}&lt;/ref&gt;
* [[List of libraries in Canada|Canada]] (4,154)&lt;ref&gt;{{cite web | url=http://wiki.answers.com/Q/How_many_libraries_are_in_Canada | title=How many libraries are in Canada? | archiveurl=http://www.webcitation.org/6Ih9eAQUj | archivedate=2013-08-07 | deadurl=no}}&lt;/ref&gt;
* [[List of libraries in Croatia|Croatia]] (232)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Croatia-LIBRARIES-AND-MUSEUMS.html | title=Croatia - Libraries and museums | quote=In 1995, the country reported having 232 public libraries with a combined collection of 4.6 million volumes.}}&lt;/ref&gt;
* [[List of libraries in Cuba|Cuba]] (400)&lt;ref&gt;{{cite web|url=http://www.granma.cu/multimedia/imagenes/6552|title=Cuba cuenta con más de 400 bibliotecas públicas en todo el territorio nacional, incluidas las situadas en las montañas}}&lt;/ref&gt;
* [[List of libraries in the Czech Republic|Czech Republic]] (6,245)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Czech-Republic-LIBRARIES-AND-MUSEUMS.html | title=Czech Republic - Libraries and museums | quote=In 1997, the Czech Republic had 6,245 public libraries with 53.7 million volumes and 1.4 million registered users.}}&lt;/ref&gt;
* [[List of libraries in Denmark|Denmark]] (250)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Denmark-LIBRARIES-AND-MUSEUMS.html | title=Denmark - Libraries and museums | quote=As of 2002, there were 250 free public libraries throughout the country with 892 points of service. That year, the public libraries had a total of more than 31.4 million volumes.}}&lt;/ref&gt;
* [[List of libraries in Finland|Finland]] (1,471)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Finland-LIBRARIES-AND-MUSEUMS.html | title=Finland - Libraries and museums | quote=There are about 400 research and university libraries in Finland, most of which are small. In 1997 there were 436 central public libraries and 1,202 branch libraries.}}&lt;/ref&gt;&lt;ref name="finlandcordis"&gt;{{cite web | url=http://cordis.europa.eu/libraries/en/nfp/finland.html | title=Report on the situation of libraries, museums and archive | archiveurl=http://www.webcitation.org/6Ih7YZPWq | archivedate=2013-08-07 | deadurl=no | quote=In Finland there were 439 public libraries having 1006 branches and 370 research libraries with 465 branches in 1996. The total number of library units was 1471. The total number of museums in Finland is 280, of which 139 are cultural history museums, 71 special museums, 55 art museums and 17 natural history museums.}}&lt;/ref&gt;
* [[List of libraries in France|France]] (1,620)&lt;ref name="francenations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/France-LIBRARIES-AND-MUSEUMS.html | title=France - Libraries and museums | quote=In 1997 there were 1,620 central public libraries with a combined total of more than 89.8 million volumes. There are more than 1,000 museums in France.}}&lt;/ref&gt;&lt;ref&gt;{{cite web | url=http://www.fyifrance.com | title=FYI France}}&lt;/ref&gt;
* [[List of libraries in Germany|Germany]] (6,313)&lt;ref name="germanynations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Germany-LIBRARIES-AND-MUSEUMS.html | title=Germany - Libraries and museums | quote=As of 1997, Germany had 6,313 public libraries with 149 million volumes in total. Germany has more than 4,500 state, municipal, association, private, residential, castle, palace, and church and cathedral treasures museums, which annually attract over 100 million visitors.}}&lt;/ref&gt;
* [[List of libraries in Greece|Greece]] (672)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Greece-LIBRARIES-AND-MUSEUMS.html | title=Greece - Libraries and museums | quote=In 1997, there were 672 public libraries with a total of 9.1 million volumes}}&lt;/ref&gt;
* [[List of libraries in Hungary|Hungary]] (3,518)&lt;ref name="hungarynations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Hungary-LIBRARIES-AND-MUSEUMS.html | title=Hungary - Libraries and museums | quote=As of 1997, there were 3,518 regional public libraries located throughout the country. There were over 500 museums (about 70 in Budapest) and many zoological and botanical gardens.}}&lt;/ref&gt;
* [[List of libraries in Iceland|Iceland]] (187)&lt;ref name="icelandnations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Iceland-LIBRARIES-AND-MUSEUMS.html | title=Iceland - Libraries and museums | quote=There were a total of 187 public libraries with combined holdings of 1.9 million volumes in 1997. Iceland has more than 50 museums.}}&lt;/ref&gt;
* [[List of libraries in Latvia|Latvia]] (998)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Latvia-LIBRARIES-AND-MUSEUMS.html | title=Latvia - Libraries and museums | quote=In 1997, the country counted 998 public libraries housing 14.9 million volumes.}}&lt;/ref&gt;
* [[List of libraries in Lithuania|Lithuania]] (1,478)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Lithuania-LIBRARIES-AND-MUSEUMS.html | title=Lithuania - Libraries and museums | quote=In 1997, there were 1,478 public libraries in the country.}}&lt;/ref&gt;
* [[List of libraries in Morocco|Morocco]] (18)&lt;ref name="morocconations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Africa/Morocco-LIBRARIES-AND-MUSEUMS.html | title=Morocco - Libraries and museums | quote=Of the 18 public libraries in Morocco, the largest is in Casablanca, with almost 360,000 volumes.}}&lt;/ref&gt;
* [[List of libraries in the Netherlands|Netherlands]] (579)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Netherlands-LIBRARIES-AND-MUSEUMS.html | title=Netherlands - Libraries and museums | quote=In 1997 there were 579 main public libraries with a combined collection of 41.5 million books.}}&lt;/ref&gt;
* [[List of libraries in North Korea|North Korea]] (200)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Asia-and-Oceania/Korea-Democratic-People-s-Republic-of-DPRK-LIBRARIES-AND-MUSEUMS.html | title=Korea, Democratic People's Republic of (DPRK) - Libraries and museums | quote=The DPRK has more than 200 public libraries, the largest being the Grand People's Study House in P'yongyang, with 20 million volumes.}}&lt;/ref&gt;
* [[List of libraries in Norway|Norway]] (1,108)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Norway-LIBRARIES-AND-MUSEUMS.html | title=Norway - Libraries and museums | quote=Norway's 1,108 public libraries had 20.5 million volumes in 1997.}}&lt;/ref&gt;
* [[List of libraries in Panama|Panama]] (40)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Americas/Panama-LIBRARIES-AND-MUSEUMS.html | title=Panama - Libraries and museums | quote=There are more than 40 other public libraries and branches.}}&lt;/ref&gt;
* [[List of libraries in Peru|Peru]] (200)&lt;ref name="perunations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Americas/Peru-LIBRARIES-AND-MUSEUMS.html | title=Peru - Libraries and museums | quote=There are nearly 200 public libraries in Peru, the largest of them in Callao, Arequipa, and Lima. More than 250 public and private museums.}}&lt;/ref&gt;
* [[List of libraries in Poland|Poland]] (9,230)&lt;ref name="polandnations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Poland-LIBRARIES-AND-MUSEUMS.html | title=Poland - Libraries and museums | quote=In 1997 there were 9,230 public libraries, jointly holding almost 135 million volumes. Of the more than 500 museums in Poland...}}&lt;/ref&gt;
* [[List of libraries in Portugal|Portugal]] (168)&lt;ref name="portugalnations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Portugal-LIBRARIES-AND-MUSEUMS.html | title=Portugal - Libraries and museums | quote=In 1997 the country had 168 public libraries with 4.8 million volumes. There are some 300 museums in Portugal.}}&lt;/ref&gt;
* [[List of libraries in Romania|Romania]] (2,950)&lt;ref name="romanianations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Romania-LIBRARIES-AND-MUSEUMS.html | title=Romania - Libraries and museums | quote=In 1997, the country had over 2,950 public libraries holding a total collection of 50.5 million volumes. Romania has some 400 museums.}}&lt;/ref&gt;
* [[List of libraries in Russia|Russia]] (50,032)&lt;ref name="russianations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Russia-LIBRARIES-AND-MUSEUMS.html | title=Russia - Libraries and museums | quote=In 1995, the country counted 50,032 public libraries, holding in total 983.4 million volumes. Russia has over 1,000 museums.}}&lt;/ref&gt;
* [[List of libraries in Sweden|Sweden]] (324)&lt;ref name="swedennations"&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Sweden-LIBRARIES-AND-MUSEUMS.html | title=Sweden - Libraries and museums | quote=In 1997, Sweden had 324 public libraries. Sweden has about 200 museums.}}&lt;/ref&gt;
* [[List of libraries in Tanzania|Tanzania]] (16)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Africa/Tanzania-LIBRARIES-AND-MUSEUMS.html | title=Tanzania - Libraries and museums | quote=The Tanzania Library Service was established in 1964. It maintains the National Central Library in Dar es Salaam (656,000 volumes), 16 public libraries, school library service, and a rural extension service.}}&lt;/ref&gt;
* [[List of libraries in Tunisia|Tunisia]] (200)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Africa/Tunisia-LIBRARIES-AND-MUSEUMS.html | title=Tunisia - Libraries and museums | quote=The collections of Tunisia's approximately 250 public libraries hold over 2.7 million volumes.}}&lt;/ref&gt;
* [[List of libraries in Ukraine|Ukraine]] (21,857)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Europe/Ukraine-LIBRARIES-AND-MUSEUMS.html | title=Ukraine - Libraries and museums | quote=In 1995, there were reported to be 21,857 public libraries operating in Ukraine with an overall stock of 336.7 million books.}}&lt;/ref&gt;
* [[List of libraries in the United Kingdom|United Kingdom]] (5,500)&lt;ref name="ukglam"&gt;{{cite web|url=http://www.lboro.ac.uk/microsites/infosci/lisu/lampost10/inst10.html|title=Libraries, Archives, Museums and Publishing Online Statistics Tables|archiveurl=http://www.webcitation.org/6Ih8uUvQo|archivedate=2013-08-07|deadurl=no}}&lt;/ref&gt;
* [[List of libraries in the United States|United States]] (139,000)&lt;ref&gt;{{cite web | url=http://www.librarycopyrightalliance.org/bm~doc/lca-sopa-8nov11.pdf | title=Library Copyright Alliance | archiveurl=http://www.webcitation.org/67sUGbrT2 | archivedate=2012-05-23 | deadurl=no}}&lt;/ref&gt;
* [[List of libraries in Zimbabwe|Zimbabwe]] (76)&lt;ref&gt;{{cite web | url=http://www.nationsencyclopedia.com/Africa/Zimbabwe-LIBRARIES-AND-MUSEUMS.html | title=Zimbabwe - Libraries and museums | quote=There were more than 150,000 registered public library users using 76 public libraries holding 1.1 million volumes in 1989. In 1990, 100,000 people visited Zimbabwe's 11 museums.}}&lt;/ref&gt;
{{div col end}}

According to sources by size:

* [[British Library]] (150,000,000 items)&lt;ref&gt;Books, manuscripts, journals, newspapers, magazines, sound and music recordings, videos, play-scripts, patents, databases, maps, stamps, prints, drawings. 14 million are books, 3 million recordings. See also [[British Library Sound Archive]].&lt;/ref&gt;
* [[Smithsonian Institution]] (137,000,000 items)&lt;ref&gt;{{cite web|title = About the Smithsonian|url=http://www.si.edu/about/|archiveurl=http://www.webcitation.org/68Dc49yEu|archivedate=2012-06-06|deadurl=no}}&lt;/ref&gt;
* [[Library of Congress]] (32,000,000 items)&lt;ref&gt;{{cite web | url=http://yro.slashdot.org/story/12/01/23/1725231/carl-malamud-answers-goading-the-government-to-make-public-data-public | title=Carl Malamud Answers: Goading the Government To Make Public Data Public | archiveurl=http://www.webcitation.org/68DcC8RlI | archivedate=2012-06-06 | deadurl=no}}&lt;/ref&gt;

See also [[List of national libraries]], [[List of the largest libraries in the United States]], [[List of libraries in the ancient world]], [[List of destroyed libraries]] and [[List of digital library projects]].
|-
| [[Museum]]s{{anchor|Museums}}
| &lt;li&gt;[[List of museums]] ([[:Category:Museums by country|cat]])
{{User:Emijrp/AHKrow|P31=Q33506|wikidata=29505|estimate=55000}}
| According to [[The World Museum Community]], there are 55,000+ museums in 202 countries.&lt;ref&gt;{{cite web | url=http://icom.museum/resources/frequently-asked-questions/ | title=Frequently Asked Questions | publisher=The World Museum Community | archiveurl=http://www.webcitation.org/6IhHkPHDe | archivedate=2013-08-07 | deadurl=no}}&lt;/ref&gt; About 17,673 museums in Europe, based on 2003 and 2008 figures.&lt;ref&gt;{{cite web | url=http://ec.europa.eu/information_society/activities/digital_libraries/doc/refgroup/annexes/digiti_report.pdf | title=The Cost of Digitising Europe's Cultural Heritage | quote=There are approximately 17,673 museums in Europe, based on figures submitted between 2003 and 2008 | archiveurl=http://www.webcitation.org/6L05FCome | archivedate=2013-11-09 | deadurl=no }}&lt;/ref&gt; According to sources by country:
{{div col|3}}
* [[List of museums in Australia|Australia]] (1,019)&lt;ref&gt;{{cite web | url=http://www.abs.gov.au/ausstats/abs@.nsf/Previousproducts/4172.0Feature%20Article32010?opendocument&amp;tabname=Summary&amp;prodno=4172.0&amp;issue=2010&amp;num=&amp;view= | title=Arts and Culture in Australia: A Statistical Overview, 2010 | quote=According to Museums, Australia, 2007-08 (cat. no. 8560.0) there were 1,019 museums operating from 1,276 locations in Australia at the end of June 2008. These locations included 768 social history museums, 425 historic properties and sites, and 83 other museums.}}&lt;/ref&gt;
* [[List of museums in Canada|Canada]] (2,400)&lt;ref&gt;{{cite web | url=http://wayback.archive.org/web/20140305085626/http://pch.gc.ca/eng/1373476498303/1373476746145 | title=Interesting Facts About Canadian Museums | quote=Canada has more than 2,400 museums, which have more than 24,000 paid employees and 55,000 volunteers, and receive nearly 54 million visits annually.}}&lt;/ref&gt;
* [[List of museums in Cuba|Cuba]] ([[User:Emijrp/List of museums in Cuba|???]])
* [[List of museums in Finland|Finland]] (280)&lt;ref name="finlandcordis" /&gt;
* [[List of museums in France|France]] (1,000)&lt;ref name="francenations" /&gt;
* [[List of museums in Germany|Germany]] (4,000)&lt;ref&gt;{{cite web | url=http://www.germany.travel/en/towns-cities-culture/museums/museums.html | title=Museums in Germany – where history and culture are brought to life | quote=The 4,000 or so museums in Germany serve as worlds of discovery and use exciting concepts to explore art and history, technology and architecture, literature and the natural world. | archiveurl=http://www.webcitation.org/6IhHptEBZ | archivedate=2013-08-07 | deadurl=no}}&lt;/ref&gt;&lt;ref name="germanynations"/&gt;
* [[List of museums in Hungary|Hungary]] (500)&lt;ref name="hungarynations" /&gt;
* [[List of museums in Iceland|Iceland]] (50)&lt;ref name="icelandnations" /&gt;
* [[List of museums in Morocco|Morocco]] (11)&lt;ref name="morocconations" /&gt;
* [[List of museums in Pakistan|Pakistan]] (27)&lt;ref&gt;{{cite web | url=http://www.localyte.com/info/64329--Pakistan--How-many-museums-in-Pakistan | title=How many museums in Pakistan? }}&lt;/ref&gt;
* [[List of museums in Peru|Peru]] (250)&lt;ref name="perunations" /&gt;
* [[List of museums in Poland|Poland]] (500)&lt;ref name="polandnations" /&gt;
* [[List of museums in Portugal|Portugal]] (300)&lt;ref name="portugalnations" /&gt;
* [[List of museums in Romania|Romania]] (400)&lt;ref name="romanianations" /&gt;
* [[List of museums in Russia|Russia]] (1,000)&lt;ref name="russianations" /&gt;
* [[List of museums in Spain|Spain]] (1,400)&lt;ref&gt;{{cite web | url=http://www.spain.info/en/conoce/museo/ | title=Visit museums in Spain}}&lt;/ref&gt;
* [[List of museums in Sweden|Sweden]] (200)&lt;ref name="swedennations" /&gt;
* [[List of museums in the United Kingdom|United Kingdom]] (2,500)&lt;ref name="ukglam" /&gt;&lt;ref&gt;{{cite web | url=http://www.museumsassociation.org/about/frequently-asked-questions | title=Frequently asked questions | publisher=Museums Association | quote=It is estimated that there are about 2,500 museums in the UK, depending on what you include. Over 1,800 museums have been accredited by the Museums, Libraries and Archives Council (MLA). | archiveurl=http://www.webcitation.org/6IhI6wftF | archivedate=2013-08-07 | deadurl=no}}&lt;/ref&gt;
* [[List of museums in the United States|United States]] (17,500)&lt;ref&gt;{{cite web | url=http://www.aam-us.org/aboutmuseums/abc.cfm#how_many | title=How many museums are there in the United States? | publisher=American Association of Museums | archiveurl=http://www.webcitation.org/693Qzdy15 | archivedate=2012-07-10 | deadurl=no}}&lt;/ref&gt;
{{div col end}}

According to sources by size:
* [[Metropolitan Museum of Art]] (2,000,000 items)
* [[Tokyo National Museum]] (110,000 items)
* [[Louvre museum]] (30,000 items)&lt;ref&gt;{{cite web | url=http://cartelen.louvre.fr/cartelen/visite?srv=crt_frm_rs&amp;langue=en&amp;initCritere=true | title=Atlas database | publisher=Louvre museum | archiveurl=http://www.webcitation.org/68DcI05Nz | archivedate=2012-06-06 | deadurl=no}}&lt;/ref&gt;

See also [[List of national museums]].
|-
{{User:Emijrp/AHKrowtotal|wikidata=41195|estimate=129262}}
|}

{{for|books and publications|#Literature}}
&lt;!--* [[List of repositories|Repositories]]: ?&lt;ref&gt;{{cite web | url=http://repositories.webometrics.info | title=Ranking web of repositories}}&lt;/ref&gt;--&gt;

{{World topic|title=Lists of archives worldwide|prefix=List of archives in}}
{{World topic|title=List of national archives worldwide|prefix=National Archives of}}
{{World topic|title=Lists of libraries worldwide|prefix=List of libraries in}}
{{World topic|title=List of national libraries worldwide|prefix=National Library of}}
{{World topic|title=Lists of museums worldwide|prefix=List of museums in}}
{{World topic|title=List of national museums worldwide|prefix=National Museum of}}
&lt;!--
See also
* [[Book burning]] and [[List of book burning incidents]]

Bibliography
:''For resources about damaged heritage, see [[User:Emijrp/Damaged heritage#Resources]].''
* Africa Research Central: [http://web.archive.org/web/20080829001128/http://www.africa-research.org/templates/results_all.cfm] [http://web.archive.org/web/20081007040116/http://www.africa-research.org/res.html]
* African Higher Education Institutions: http://africa.isp.msu.edu/AUP/search-form.htm
* African Libraries and Archives: http://library.stanford.edu/depts/ssrg/africa/libaf.html
* https://sites.google.com/site/africaandalbion/home/archives-and-museums-in-africa
* International Council of African Museums: http://www.africom.museum/museums/museums.html ({{webarchive |url=https://web.archive.org/web/20120216085545/http://www.africom.museum/museums/museums.html |date=February 16, 2012 }})
* Major Libraries in Africa: http://www.uneca.org/Library/Library_associations.htm
* [http://www.inasp.info/file/b1b457c23fabf55f06e591b27254acc1/book-public-libraries-in-africa.html Public Libraries in Africa: A Report and Annotated Bibliography]
* [[Algeria]]: [http://www.nationsencyclopedia.com/Africa/Algeria-LIBRARIES-AND-MUSEUMS.html], [http://www.world66.com/africa/algeria], [http://www.university-directory.eu/Algeria/Algeria-Universities.html], [http://www.museum.com/ja/museum/id=23551&amp;show=9&amp;country=DZ], [[:fr:Catégorie:Musée algérien]]
* [[Aruba]]: [http://www.webcitation.org/64ActJXAA]
* Bibliotecacivallero: http://sites.google.com/site/bibliotecacivallero/
* Bishop Library Index: http://members.multimania.co.uk/kbishoplib/
* Censura a los libros y las bibliotecas durante el Proceso de Reorganización Nacional: http://www.filo.uba.ar/contenidos/secretarias/seube/revistaespacios/PDF/38/38.13.pdf ({{webarchive |url=http://www.webcitation.org/64GaoJcNZ?url=http://www.filo.uba.ar/contenidos/secretarias/seube/revistaespacios/PDF/38/38.13.pdf |date=December 28, 2011 }})
* Country Studies, Federal Research Division, Library of Congress: http://lcweb2.loc.gov/frd/cs/cshome.html
* Directorios Internacionales: http://exlibris.usal.es/bibesp/inter/index.htm
* Europeana: http://www.europeana.eu
* ICArchives: http://www.ica.org/
* Libcat: A Guide to Library Resources on the Internet: http://www.librarysites.info/other-libraries.htm
* Libdex: http://www.libdex.com/country.html
* Library directories Dmoz: http://www.dmoz.org/Reference/Libraries/Directories/
* Libweb: http://lists.webjunction.org/libweb/
* lib-web-cats: http://www.librarytechnology.org/libwebcats/ ([http://www.librarytechnology.org/libraries.pl?Type=National national])
* Memórias de Africa e do Oriente: http://memoria-africa.ua.pt/introduction/tabid/83/language/pt-PT/Default.aspx
* Museum.com: http://www.museum.com/jb/show_maps?action=1&amp;show=0
* Nations Encyclopedia: [http://www.nationsencyclopedia.com/Africa/index.html Museums and archives] in Africa
* Online repositories: http://repositories.webometrics.info
* Penrose Press: [http://www.penrose-press.com/schools.idd] [http://www.penrose-press.com/libraries.idd] [http://www.penrose-press.com/museums.idd]
* Ranking Web of World Repositories: http://repositories.webometrics.info
* Repositories of Primary Sources: http://www.uiweb.uidaho.edu/special-collections/Other.Repositories.html
* SIMBAS: [http://www.sibmas.org/idpac/africa/index.html International Directory of Performing Arts Collections and Institutions]
* UNESCO Archives Portal: http://www.unesco-ci.org/cgi-bin/portals/archives/page.cgi?d=1
* University directory worldwide: http://www.university-directory.eu/Universities-directory.html
* U.S. Restitution of Nazi-Looted Cultural Treasures to the USSR, 1945-1959: http://www.archives.gov.ua/Eng/NB/USRestitution.php ({{webarchive |url=http://www.webcitation.org/64JYLL3La?url=http://www.archives.gov.ua/Eng/NB/USRestitution.php |date=December 30, 2011 }})
* World66 Travel Guide: http://www.world66.com
* World Encyclopedia of Library and Information Services: http://books.google.es/books?id=HSFu99FCJwQC&amp;printsec=frontcover
* [http://www.worlib.org/ World Libraries]
* http://www.collectionsaustralia.net/pima/
* http://www.booksforwallsproject.org/2010/05/antarcticas-library-and-walking-in.html
* [[Spain]]: [http://www.nationsencyclopedia.com/Europe/Spain-LIBRARIES-AND-MUSEUMS.html], [http://www.juntadeandalucia.es/cultura/web/areas/biblioteca/directorio_centros?nombreDirectorio=&amp;tipos_plain=BIBL,CCDD&amp;provinciaDirectorio=&amp;municipio=&amp;x=24&amp;y=12], [http://www.mcu.es/bibliotecas/MC/CBPE/CatalogosCCAA.html]
* [[Iraq]]: [https://eprints.soas.ac.uk/7245/1/Masters_Thesis.pdf], [http://www.ideals.illinois.edu/bitstream/handle/2142/3697/AlTikriti553.pdf?sequence=2], [http://www.nationsencyclopedia.com/Asia-and-Oceania/Iraq-LIBRARIES-AND-MUSEUMS.html]
* Libraries of Asia Pacific Directory: http://www.nla.gov.au/apps/lapsdir?action=LapsBrowse
* Angola: [http://www.nationsencyclopedia.com/Africa/Angola-LIBRARIES-AND-MUSEUMS.html], [http://www.museum.com/jb/show_results?action=1&amp;country=AO&amp;continent=1&amp;map=1]

--&gt;

== Science ==
{{main|Science|Outline of science}}
'''[[Science]]''' &amp;ndash; systematic effort of acquiring knowledge&amp;mdash;through observation and experimentation coupled with logic and reasoning to find out what can be proved or not proved&amp;mdash;and the knowledge thus acquired. The word "science" comes from the Latin word "scientia" meaning [[knowledge]].

=== Astronomy ===
&lt;!--&lt;div style="width: 300px;float: right;"&gt;
{{divbox|radius=10px|1=grayh|2=Soundtrack for this section:|3=&lt;li&gt;[https://www.youtube.com/watch?v=rwnpXll_A_E The Neptune's sounds]}}
&lt;/div&gt;--&gt;
'''[[Astronomy]]''' is a [[natural science]] that deals with the study of [[Astronomical object|celestial objects]] (such as [[star]]s, [[planet]]s, [[comet]]s, [[nebula]]e, [[star cluster]]s and [[galaxy|galaxies]]) and [[Phenomenon|phenomena]] that originate outside the [[atmosphere of Earth]] (such as the [[Cosmic microwave background radiation|cosmic background radiation]]). It is concerned with the evolution, [[physics]], [[chemistry]], [[meteorology]], and [[motion (physics)|motion]] of celestial objects, as well as the [[physical cosmology|formation and development of the universe]].

'''[[Space exploration]]''' is the [[discovery]] and [[exploration]] of [[outer space]] by means of [[space technology]]. Physical [[exploration]] of space is conducted both by [[human spaceflight]]s and by  [[robotic spacecraft]].

{{main|Outline of astronomy|List of astronomical catalogues}}
{{category see also|Astronomy lists|Lists of astronomical objects|Lists of stars by constellation}}

&lt;gallery mode="packed-hover"&gt;
File:Ilc 9yr moll4096.png|[[Observable universe]]
File:Starsinthesky.jpg|A [[star]]-forming region in the [[Large Magellanic Cloud]], an [[irregular galaxy]].
File:Merging galaxies NGC 4676 (captured by the Hubble Space Telescope).jpg|[[Mice Galaxies]] in the process of [[Interacting galaxy|colliding and merging]]
File:Sputnik asm.jpg|[[Sputnik 1]], the first artificial satellite to orbit Earth.
File:Pale Blue Dot.png|[[Earth]] seen by [[Voyager]] from 6 billion kilometers as a "[[pale blue dot]]" (the blueish-white speck in the brown band to the right)
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| [[Universe]]s{{anchor|Universes}}
| &lt;li&gt;[[Observable universe]]
{{User:Emijrp/AHKrow|P31=Q1|wikidata=2|estimate=1}}
| According to the [[multiverse]] hypothesis, there could be more than 1 universe, but it hasn't been demonstrated yet.
|-
| [[Void (astronomy)|Voids]]{{anchor|Voids}}
| &lt;li&gt;[[List of voids]]
{{User:Emijrp/AHKrow|P31=Q845371|wikidata=7|estimate=}}
| Total number of voids is unknown.
|-
| [[Supercluster]]s{{anchor|Superclusters}}
| &lt;li&gt;[[List of superclusters]]
{{User:Emijrp/AHKrow|P31=Q27521|wikidata=45|estimate=}}
| Total number of superclusters is unknown.
|-
| [[Galaxy cluster]]s{{anchor|Galaxy clusters}}
| &lt;li&gt;[[List of galaxy clusters]]
{{User:Emijrp/AHKrow|P31=Q204107|wikidata=87|estimate=}}
| Total number of galaxy clusters is unknown.
|-
| [[Galaxy|Galaxies]]{{anchor|Galaxies}}
| &lt;li&gt;[[List of galaxies]]
{{User:Emijrp/AHKrow|P31=Q318|wikidata=11244|estimate=12500000}}
| According to sources, there are 125,000,000,000 galaxies.&lt;ref&gt;[http://imagine.gsfc.nasa.gov/docs/ask_astro/answers/021127a.html Ask an Astrophysicist - How many galaxies are there?] ({{webarchive |url=http://www.webcitation.org/67ydKJ7Xc?url=http://imagine.gsfc.nasa.gov/docs/ask_astro/answers/021127a.html |date=May 27, 2012 }})&lt;/ref&gt; Assuming there are data for 10% of them, and making lists of 1,000 galaxies, we would need 12,500,000 lists.
|-
| [[Star cluster]]s{{anchor|Star clusters}}
| &lt;li&gt;[[List of globular clusters|List of globular]] and [[List of open clusters|open clusters]]
{{User:Emijrp/AHKrow|P31=Q168845|wikidata=918|estimate=10000}}
| According to astronomical catalogues, there are over 10,000 star clusters and nebulae:
* [[Index Catalogue]] (5386)
* [[Messier Catalogue]] (100)
* [[New General Catalogue]] (7840)
|-
| [[Quasar]]s{{anchor|Quasars}}
| &lt;li&gt;[[List of quasars]]
{{User:Emijrp/AHKrow|P31=Q83373|wikidata=71|estimate=47853}}
| According to sources, there are 47,853 quasars.&lt;ref&gt;{{cite web|title=How many quasars are there?|url=https://spacemath.gsfc.nasa.gov/Calculus/6Page107.pdf|quote=The combined quasar density is  0.63 + 1.53 = 1.16 quasars/deg2, so over the entire sky, there are about 1.16 x 41,253 = 47,853 quasars in this magnitude range.}}&lt;/ref&gt;
|-
| [[Star]]s{{anchor|Stars}}
| &lt;li&gt;[[Lists of stars]]
{{User:Emijrp/AHKrow|P31=Q523|wikidata=23780|estimate=1000000}}
| According to [[Guide Star Catalog II]], there are 20,000,000 stars with apparent magnitudes of 6 to 15, and 945,592,683 stars out to magnitude 21. Making lists of 1,000 stars, we would need 1,000,000 lists.
|-
| [[Multiplanetary system]]s{{anchor|Multiplanetary systems}}
| &lt;li&gt;[[List of multiplanetary systems]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=603}}
| According to sources, there are [[List of multiplanetary systems|603 multiplanetary systems]].
|-
| [[Exoplanet]]s{{anchor|Exoplanets}}
| &lt;li&gt;[[List of exoplanets]]
{{User:Emijrp/AHKrow|P31=Q44559|wikidata=3024|estimate=3560}}
| According to sources, there are [[List of exoplanets|3,560 exoplanets]].
|-
| [[Dwarf planet]]s{{anchor|Dwarf planets}}
| &lt;li&gt;[[List of possible dwarf planets]]
{{User:Emijrp/AHKrow|P31=Q2199|wikidata=6|estimate=10000}}
| &lt;ref&gt;{{cite web|title=|url=http://wayback.archive.org/web/20141113225430/http://pluto.jhuapl.edu/overview/piPerspective.php?page=piPerspective_08_24_2012 The PI's Perspective|quote=Today we know of more than a dozen dwarf planets in the solar system [and] it is estimated that the ultimate number of dwarf planets we will discover in the Kuiper Belt and beyond may well exceed 10,000.}}&lt;/ref&gt;
|-
| [[Free-floating planet]]s{{anchor|Free-floating planets}}
| &lt;li&gt;[[List of free-floating planets]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of free-floating planets is unknown.&lt;ref&gt;[http://www.astronomy.com/en/News-Observing/News/2011/05/Free-floating%20planets%20may%20be%20more%20common%20than%20stars.aspx Free-floating planets may be more common than stars] ({{webarchive |url=http://www.webcitation.org/68DbevEXv?url=http://www.astronomy.com/en/News-Observing/News/2011/05/Free-floating%20planets%20may%20be%20more%20common%20than%20stars.aspx |date=June 6, 2012 }})&lt;/ref&gt;
|-
| [[Comet]]s{{anchor|Comets}}
| &lt;li&gt;[[Lists of comets]]
{{User:Emijrp/AHKrow|P31=Q3559|wikidata=1022|estimate=}}
| Total number of comets is unknown.
|-
| [[Asteroid]]s{{anchor|Asteroids}}
| &lt;li&gt;[[List of asteroids]]
{{User:Emijrp/AHKrow|P31=Q3863|wikidata=96752|estimate=310376}}
| As of December 2011, there are 310,376 numbered minor planets, and about as many yet unnumbered. Only some 16,000 minor planets have been given names.
|-
| rowspan=5 | [[:Category:Surface features of bodies of the Solar System|Planet surface features]]{{anchor|Planet surface features}}
| &lt;li&gt;[[List of impact craters on Earth]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| rowspan=5 | Total number of planet surface features is unknown.

Hundreds of thousands of craters in Mars, only 1,000 with names. See also [[List of mountains on Mars]], [[List of montes on Venus]], [[Glaciers#Glaciers on Mars]] and [[List of geological features on Titan]].
|-
| &lt;li&gt;[[List of craters on Mars]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[List of craters on Mercury]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[List of craters on the Moon]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| &lt;li&gt;[[List of craters on Venus]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
|-
| rowspan=6 | [[Space exploration]]{{anchor|Space exploration}}
| &lt;li&gt;[[List of human spaceflights]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=250}}
| According to sources, there have been 250 human spaceflights.
|-
| &lt;li&gt;[[:Category:Lists of satellites]]
{{User:Emijrp/AHKrow|P31=Q26540|wikidata=3804|estimate=6800}}
| According to sources, there are 6,800 artificial satellites.&lt;ref&gt;[http://nssdc.gsfc.nasa.gov/nmc/spacecraftSearch.do Spacecraft Query Results]&lt;/ref&gt;
|-
| &lt;li&gt;[[List of space agencies]]
{{User:Emijrp/AHKrow|P31=Q17505024|wikidata=24|estimate=}}
| Total number of space agencies is unknown.
|-
| &lt;li&gt;[[List of space probes]]
{{User:Emijrp/AHKrow|P31=Q26529|wikidata=194|estimate=}}
| Total number of space probes is unknown.
|-
| &lt;li&gt;[[List of space stations]]
{{User:Emijrp/AHKrow|P31=Q25956|wikidata=17|estimate=6}}
| According to sources, there have existed 6 space stations.
|-
| &lt;li&gt;[[List of artificial objects escaping from the Solar System]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=5}}
| According to sources, there are 5 artificial objects escaping from the Solar System.
|-
{{User:Emijrp/AHKrowtotal|wikidata=140997|estimate=13890833}}
|}

=== Biology ===

'''[[Biology]]''' is a [[natural science]] concerned with the study of [[life]] and living [[organism]]s, including their structure, function, growth, origin, evolution, distribution, and taxonomy. See also [[:Category:Biology lists]].

* The '''[[human body]]''' is the entire structure of a [[human]] [[organism]], and consists of a [[human head|head]], [[neck]], [[torso]], two [[arm]]s and two [[human leg|leg]]s. By the time the human reaches [[adulthood]], the body consists of close to 100 [[10^12|trillion]] [[Cell (biology)|cells]],&lt;ref name=Greg_Roza&gt;[http://books.google.com/books?id=vhO8Ia2ik7oC&amp;dq=human+body+cells+trillion&amp;source=gbs_navlinks_s Page 21] Inside the human body: using scientific and exponential notation. Author: Greg Roza. Edition: Illustrated. Publisher: The Rosen Publishing Group, 2007. {{ISBN|1-4042-3362-8}}, {{ISBN|978-1-4042-3362-1}}. Length: 32pages&lt;/ref&gt; the basic unit of [[life]]. These cells are [[biological organisation|organised biologically]] to eventually form the whole body.
* A '''[[species]]''' is one of the basic units of [[biological classification]] and a [[taxonomic rank]]. A species is often defined as a group of [[organisms]] capable of [[interbreeding]] and [[reproduction|producing]] [[fertile]] [[offspring]]. While in many cases this definition is adequate, the difficulty of defining species is known as the [[species problem]].

&lt;gallery mode="packed-hover"&gt;
File:Ruwenpflanzen.jpg|thumb|right|Plants in the [[Rwenzori Mountains]], [[Uganda]]
File:Carcar.jpg|thumb|right|[[European Goldfinch]]
File:Anterior view of human female and male, with labels.jpg|[[Human body]] features
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=2 | [[Bacteria]]{{anchor|Bacteria}}
| &lt;li&gt;[[List of bacteria genera]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of bacteria genera is unknown.
|-
| &lt;li&gt;[[List of bacteria species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1000000}}
| Total number of bacteria species ranges between 100,000 and 10,000,000.&lt;ref&gt;{{cite web |url=http://www.newscientist.com/blog/shortsharpscience/2008/06/counting-in-bacterial-world.html |title=Counting in a bacterial world  |date=2008-06-10 |work= |publisher=Short Sharp Science |accessdate=2013-05-23 |quote=An informal survey of 24 microbiologists at a conference in Spain last year tried to reach a consensus. Two people guessed that the Earth was home to between 10,000 and 100,000 species of bacteria; another five said between 100,000 and 1,000,000; while nine microbiologists put the put the upper limit at ten million species; eight guessed there were even more. |archiveurl=http://wayback.archive.org/web/20121015185451/http://www.newscientist.com/blog/shortsharpscience/2008/06/counting-in-bacterial-world.html |archivedate=2012-10-15 |deadurl=no}}&lt;/ref&gt;
|-
| rowspan=1 | [[Human]]{{anchor|Human}}
| &lt;li&gt;[[List of human organs]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1000}}
| 850 [[List of muscles of the human body|muscles]], 206 [[List of bones of the human skeleton|bones]].
|-
| [[Genes]]{{anchor|Genes}}
| &lt;li&gt;[[List of genes]]
{{User:Emijrp/AHKrow|P31=Q7187|wikidata=725006|estimate=}}
| Total number of genes is unknown. According to sources, there are [[List of human genes|85,000 human genes]].&lt;ref&gt;[http://www.nsti.org/procs/MSM2002/1/T11.02 The Number of Human Genes and Proteins] ({{webarchive |url=http://www.webcitation.org/68PXocTCK?url=http://www.nsti.org/procs/MSM2002/1/T11.02 |date=June 14, 2012 }})&lt;/ref&gt;
|-
| Individual animals{{anchor|Individual animals}}
| &lt;li&gt;[[:Category:Lists of individual animals]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of notable individual animals is unknown.
|-
| [[Protein]]s{{anchor|Proteins}}
| &lt;li&gt;[[List of proteins]]
{{User:Emijrp/AHKrow|P31=Q8054|wikidata=450496|estimate=}}
| Total number of proteins is unknown. According to sources, there are [[List of human proteins|200,000 human proteins]].&lt;ref&gt;[http://www.askabiologist.org.uk/answers/viewtopic.php?id=1221 Number of genes and proteins in the body] ({{webarchive |url=http://www.webcitation.org/68PXsrOAX?url=http://www.askabiologist.org.uk/answers/viewtopic.php?id%3D1221 |date=June 14, 2012 }})&lt;/ref&gt;
|-
| rowspan=16 | [[Species]]{{anchor|Species}}
| &lt;li&gt;[[List of species]]
{{User:Emijrp/AHKrow|P31=Q16521|wikidata=2267952|estimate=8700000|format=count}}
| rowspan=16 | According to sources, there are 1,552,319 animalia species.&lt;ref name="zootaxa"&gt;{{cite web |url=http://www.mapress.com/zootaxa/list/2011/3148.html |title=Animal biodiversity: An outline of higher-level classification and survey of taxonomic richness |date=2013-05-26 |work= |publisher=ZOOTAXA |accessdate=2013-05-26 |quote= |archiveurl=http://www.webcitation.org/6GtqtnEhr |archivedate=2013-05-26 |deadurl=no}}&lt;/ref&gt;

Recent studies indicate there are [[List of lists of species|8,700,000 species]] with an error of ±1,300,000 (6,500,000 land species, 2,200,000 marine species). Only 1,233,500 species (14%) have been described though.&lt;ref&gt;[http://www.rtve.es/noticias/20110823/calculo-mas-preciso-historia-cifra-87-millones-especies-habitan-tierra/456588.shtml El cálculo más preciso de la historia cifra las especies que viven en la Tierra en 8,7 millones] {{es}}&lt;/ref&gt;

Other estimates range between 2 and 100 million species. (See also [[Wikipedia:WikiProject Missing encyclopedic articles/Global Names Index]])

More than 99 percent of all species, amounting to over five billion species,&lt;ref name="Book-Biology"&gt;{{cite book |editor1=Kunin, W.E. |editor2=Gaston, Kevin |title=The Biology of Rarity: Causes and consequences of rare—common differences 
|url=https://books.google.com/books?id=4LHnCAAAQBAJ&amp;pg=PA110&amp;lpg=PA110&amp;dq#v=onepage&amp;q&amp;f=false|date=31 December 1996 |ISBN=978-0412633805 |accessdate=26 May 2015 }}&lt;/ref&gt; that ever lived on Earth are estimated to be [[Lists of extinct species|extinct]].&lt;ref name="StearnsStearns2000"&gt;{{cite book |last=Stearns |first=Beverly Peterson |last2=Stearns |first2=S. C. |last3=Stearns |first3=Stephen C. |title=Watching, from the Edge of Extinction |url=https://books.google.com/books?id=0BHeC-tXIB4C&amp;q=99%20percent#v=onepage&amp;q=99%20percent&amp;f=false |year=2000 |publisher=[[Yale University Press]] |isbn=978-0-300-08469-6|page=preface x |accessdate=30 May 2017 }}&lt;/ref&gt;&lt;ref name="NYT-20141108-MJN"&gt;{{cite news |last=Novacek |first=Michael J. |title=Prehistory’s Brilliant Future |url=http://www.nytimes.com/2014/11/09/opinion/sunday/prehistorys-brilliant-future.html |date=8 November 2014 |work=[[New York Times]] |accessdate=2014-12-25 }}&lt;/ref&gt;&lt;ref name="Newman"&gt;Newman, Mark. [http://arxiv.org/abs/adap-org/9702003 ''A model of mass extinction'']. 1997. Journal of Theoretical Biology 189: 235–252&lt;/ref&gt;

Projects counting species:
* [[All Species Foundation]] (???)&lt;ref&gt;On-going project to catalog all species on Earth by 2025, by [[Long Now Foundation]]&lt;/ref&gt;
* [[Catalogue of Life]] (1,404,038)&lt;ref&gt;{{cite web|title=|url=http://wayback.archive.org/web/20120618223324/http://www.catalogueoflife.org/services/res/2011AC_26July.zip|quote=Species for all kingdoms as of May 2012, with coverage of 74% of the estimated 1.9 million species known to science}}&lt;/ref&gt;
* [[Tara Research Vessel]] (1,000,000)&lt;ref&gt;[http://www.huffingtonpost.co.uk/2012/09/26/tara-research-vessel-discovers-one-million-new-species_n_1915814.html Tara Research Vessel Discovers One Million New Species Of Microscopic Sea Life (PICTURES)]&lt;/ref&gt;
* [[World Resources Institute]] (1,400,000)

See also [[Lists of fictional species]].
|-
| &lt;li&gt;[[List of animalia species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1552319|exclude=yes}}
|-
| &lt;li&gt;[[List of arthropoda species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1242040|exclude=yes}}
|-
| &lt;li&gt;[[List of insecta species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=1020007|exclude=yes}}
|-
| &lt;li&gt;[[List of coleoptera species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=387100|exclude=yes}}
|-
| &lt;li&gt;[[List of diptera species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=159294|exclude=yes}}
|-
| &lt;li&gt;[[List of lepidoptera species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=157424|exclude=yes}}
|-
| &lt;li&gt;[[List of chelicerata species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=113894|exclude=yes}}
|-
| &lt;li&gt;[[List of arachnida species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=112201|exclude=yes}} 
|-
| &lt;li&gt;[[List of crustacea species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=66914|exclude=yes}}
|-
| &lt;li&gt;[[List of acari species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=54617|exclude=yes}}
|-
| &lt;li&gt;[[List of araneae species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=43579|exclude=yes}}
|-
| &lt;li&gt;[[List of nematoda species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=24783|exclude=yes}}
|-
| &lt;li&gt;[[List of orthoptera species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=24276|exclude=yes}}
|-
| &lt;li&gt;[[List of trilobita species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=19606|exclude=yes}}
|-
| &lt;li&gt;[[List of myriapoda species]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=11885|exclude=yes}}
|-
| rowspan=2 | [[Virus]]es{{anchor|Viruses}}
| &lt;li&gt;[[List of genera of viruses]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of genera of viruses is unknown.
|-
| &lt;li&gt;[[List of viruses]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=6000}}
| According to sources, there are over 6,000 viruses.&lt;ref name="virusesspecies"&gt;{{cite web |url=http://www.ncbi.nlm.nih.gov/pmc/articles/PMC1208960/ |title=International Committee on Taxonomy of Viruses and the 3,142 unassigned species |date=2005-08-16 |work= |publisher=C.M. Fauquet and D. Fargette | doi=10.1186/1743-422X-2-64 |accessdate=2013-05-23 |quote=The book lists more than 6,000 viruses classified in 1,950 species and in more than 391 different higher taxa. However, GenBank contains a staggering additional 3,142 "species" unaccounted for by the ICTV report. |archiveurl= |archivedate= |deadurl=no}}&lt;/ref&gt;
|-
{{User:Emijrp/AHKrowtotal|wikidata=3443454|estimate=10882502}}
|}

{{for|zoos and aquaria|#Architecture}}

=== Chemistry and physics ===
{{anchor|Chemistry|Physics}}
&lt;!--
[[File:Chemicals in flasks.jpg|thumb|right|Chemicals in flasks.]]
[[File:CollageFisica.jpg|thumb|right|Various examples of physical phenomena.]]
--&gt;
'''[[Chemistry]]''' is the [[science]] of [[matter]], especially its [[chemical reaction]]s, but also its composition, structure and properties. See also [[:Category:Chemistry lists]].

'''[[Physics]]''' is a [[natural science]] that involves the study of [[matter]]. See also [[Index of physics articles]], [[Outline of physics]] and [[:Category:Physics-related lists]].

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=3 | [[Chemistry]]
| &lt;li&gt;[[List of chemical elements]]
{{User:Emijrp/AHKrow|P31=Q11344|wikidata=2567|estimate=118}}
| According to sources, there are 118 chemical elements.
|-
| &lt;li&gt;[[List of chemical compounds]] 
{{User:Emijrp/AHKrow|P31=Q11173|wikidata=702216|estimate=6000000}}
| According to [[CAS registry number|CAS database]], there are 60 million chemical compounds&lt;ref&gt;{{cite web|title=|url=http://www.cas.org/newsevents/releases/60millionth052011.html}}&lt;/ref&gt; (with a growth of 10 million in less than two years). Assuming 10% is notable. See also [[List of minerals (complete)|List of minerals]].
|-
| &lt;li&gt;[[List of chemical reactions]]
{{User:Emijrp/AHKrow|P31=Q36534|wikidata=2497|estimate=}}
| Total number of chemical reactions is unknown.
|-
| rowspan=2 | [[Physics]]
| &lt;li&gt;[[List of particles]]
{{User:Emijrp/AHKrow|P31=Q1621273|wikidata=1820|estimate=}}
| Total number of particles is unknown.
|-
| &lt;li&gt;[[List of nuclides]]
{{User:Emijrp/AHKrow|P31=Q108149|wikidata=2567|estimate=3000}}
| According to sources, there are 3,000 nuclides.&lt;ref name="Live Chart of Nuclides"&gt;{{cite web|title=Live Chart of Nuclides|url=http://www-nds.iaea.org/relnsd/vcharthtml/VChartHTML.html|publisher=nds.iaea.org}}&lt;/ref&gt;
|-
{{User:Emijrp/AHKrowtotal|wikidata=711667|estimate=6007435}}
|}

=== Health ===
&lt;!--[[File:The Anatomy Lesson.jpg|thumb|right|''[[The Anatomy Lesson of Dr Nicolaes Tulp]]''  by [[Rembrandt]]]]--&gt;
'''[[Health]]''' is the level of functional or metabolic efficiency of a living being. In [[human]]s, it is the general condition of a [[person]]'s mind and body, usually meaning to be free from [[illness]], [[injury]] or [[pain]]. See also [[:Category:Health-related lists]].

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| [[Disease]]s{{anchor|Diseases}}
| &lt;li&gt;[[List of diseases]]
{{User:Emijrp/AHKrow|P31=Q12136|wikidata=10017|estimate=12000}}
| According to sources, there are 12,000 diseases.&lt;ref&gt;[http://www.ncbi.nlm.nih.gov/pmc/articles/PMC1361216/ Measuring Diagnoses: ICD Code Accuracy]&lt;/ref&gt; See also [[:Category:Animal diseases]] and [[Lists of plant diseases]].
|-
| [[Disorder]]s{{anchor|Disorders}}
| &lt;li&gt;[[List of disorders]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of disorders is unknown.
|-
| [[Drug]]s{{anchor|Drugs}}
| &lt;li&gt;[[List of drugs]]
{{User:Emijrp/AHKrow|P31=Q8386|wikidata=4165|estimate=21000}}
| According to sources, there are 21,000 drugs.&lt;ref&gt;{{cite web|title=How many drug targets are there?|url=http://www.nature.com/nrd/journal/v5/n12/full/nrd2199.html|quote=1,357 unique drugs: 1,204 are 'small-molecule drugs' and 166 are 'biological' drugs}}&lt;/ref&gt;
|-
{{User:Emijrp/AHKrowtotal|wikidata=14182|estimate=33000}}
|}

Hospitals are counted in [[User:Emijrp/All human knowledge#Architecture|#Architecture]].

=== Mathematics ===
&lt;!--[[File:Euclid.jpg|thumb |[[Euclid]], Greek mathematician, 3rd century BC, as imagined by [[Raphael]] in this detail from ''[[The School of Athens]]''.]]--&gt;
'''[[Mathematics]]''' (from [[Greek language|Greek]] μάθημα ''máthēma'' "knowledge, study, learning") is the study of [[quantity]], [[space]], [[structure]], and [[calculus|change]]. See also [[Outline of mathematics]] and [[Lists of mathematics topics]].

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| [[Areas of mathematics|Areas]]{{anchor|Areas}}
| &lt;li&gt;[[Areas of mathematics]]
{{User:Emijrp/AHKrow|P31=Q1936384|wikidata=1725|estimate=}}
| 
|-
| [[Number]]s{{anchor|Numbers}}
| &lt;li&gt;[[List of numbers]]
{{User:Emijrp/AHKrow|P31=Q11563|wikidata=24514|estimate=}}
| According to maths, there are ℵ&lt;sub&gt;0&lt;/sub&gt; integers and even more reals.
|-
| [[Prime number]]s{{anchor|Prime numbers}}
| &lt;li&gt;[[List of prime numbers]]
{{User:Emijrp/AHKrow|P31=Q49008|wikidata=1273|estimate=}}
| According to maths, there are ℵ&lt;sub&gt;0&lt;/sub&gt; prime numbers.
|-
| [[Integer sequence]]s{{anchor|Integer sequences}}
| &lt;li&gt;[[List of integer sequences]]
{{User:Emijrp/AHKrow|P31=Q2297602|wikidata=12|estimate=200000}}
| According to sources, there are over 200,000 integer sequences.&lt;ref&gt;[http://oeis.org/wiki/Welcome#Description_of_OEIS_entries_.28or.2C_What_is_the_Next_Term.3F.29 Approximate number of entries] in the [[On-line Encyclopedia of Integer Sequences]]&lt;/ref&gt;
|-
{{User:Emijrp/AHKrowtotal|wikidata=27524|estimate=227512}}
|}

=== Planetary science ===
&lt;!--[[File:Atlantic hurricane tracks.jpg|thumb|300px|right|Tracks of all known Atlantic tropical cyclones from 1851 to 2005]]--&gt;
'''Earth and [[planetary sciences]]''' are the sciences that study the material and dynamics of Earth and other celestial bodies.

'''[[Meteorology]]''' is the [[interdisciplinary]] scientific study of the [[atmosphere]]. See also [[Index of meteorology articles]].

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| [[Lithostratigraphy]]{{anchor|Lithostratigraphy}}
| &lt;li&gt;[[Lithostratigraphic units]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=100000}}
| Total number of lithostratigraphic units is unknown.
|-
| [[Fossil]]s{{anchor|Fossils}}
| &lt;li&gt;[[List of fossils]]
{{User:Emijrp/AHKrow|P31=Q40614|wikidata=108|estimate=300000}}
| According to sources, there are 300,000 fossils.&lt;ref name="Paleobiology Database"&gt;{{cite web|title=Paleobiology Database|url=http://paleodb.org/}}&lt;/ref&gt;
|-
| [[Geologic Time Scale]]{{anchor|Geologic Time Scale}}
| &lt;li&gt;[[List of Global Boundary Stratotype Sections and Points|Global Boundary Stratotype Sections]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of geologic time scales is unknown.
|-
| [[Meteorite]]s{{anchor|Meteorites}}
| &lt;li&gt;[[List of meteorites]]
{{User:Emijrp/AHKrow|P31=Q60186|wikidata=502|estimate=50000}}
| According to sources, there are 50,000 meteorites.&lt;ref name=MBD&gt;{{cite web|title=Meteoritical Bulletin Database|url=http://www.lpi.usra.edu/meteor/}}&lt;/ref&gt;
|-
| rowspan=3 | [[Meteorology]]{{anchor|Meteorology}}
| &lt;li&gt;[[List of meteorological phenomena]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of meteorological phenomena is unknown.
|-
| &lt;li&gt;[[List of weather instruments]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of weather instruments is unknown.
|-
| &lt;li&gt;Seasons
{{User:Emijrp/AHKrow|P31=Q27491541|wikidata=435|estimate=}}
| See also [[List of Category 5 Atlantic hurricanes]] and [[List of Category 5 Pacific hurricanes]].
|-
| [[Rock type|Rocks types]]{{anchor|Rocks types}}
| &lt;li&gt;[[List of rock types]]
{{User:Emijrp/AHKrow|P31=Q8063|wikidata=10941|estimate=500}}
| According to sources, there are 500 rock types.
|-
{{User:Emijrp/AHKrowtotal|wikidata=11986|estimate=450935}}
|}

== Society ==

A '''[[society]]''' is a group of people [[Interpersonal relationship|related]] to each other through persistent relations, or a large social grouping sharing the same geographical or virtual territory, subject to the same political authority and dominant cultural expectations. See also [[Index of sociology articles]] and [[:Category:Society-related lists]].

* A '''[[biography]]''' is a detailed description of a person's life. It involves more than just the basic facts like education, work, relationships, and death; it portrays a person's experience of these life events.
* A '''[[business]]''' is an [[organization]] involved in the [[trade]] of [[Good (economics)|goods]], [[Service (economics)|services]], or both to [[consumer]]s. See also [[Outline of business]].
* '''[[Culture]]''' is the range of human phenomena that cannot be attributed to genetic inheritance.
* '''[[Education]]''' is the process of facilitating learning, or the acquisition of knowledge, skills, values, beliefs, and habits.
* '''[[Gastronomy]]''' is the art or science of food [[eating]]. See also [[Outline of cuisines]] and [[Outline of food preparation]].
* '''[[Law]]''' is a [[system]] of rules and guidelines which are enforced through [[social]] [[institution]]s to govern behavior, wherever possible. See also [[Outline of law]] and [[Index of law articles]].
* '''[[Language]]''' may refer either to the specifically [[human]] capacity for acquiring and using complex systems of [[communication]], or to a specific instance of such a system of complex communication. The scientific study of language in any of its senses is called [[linguistics]]. See also [[Outline of linguistics]].
* An '''[[organization]]''' is a social entity that has a collective goal and is linked to an external environment.
* '''[[Philosophy]]''' is the study of general and fundamental problems, such as those connected with [[Ontology|existence]], [[Epistemology|knowledge]], values, reason, [[Philosophy of mind|mind]], and language. See also [[Outline of philosophy]] and [[Index of philosophy]].
* '''[[Politics]]''' is the art or science of influencing people on a civic, or individual level, when there are more than two people involved. See also [[Index of politics articles]], [[Outline of political science]] and [[Political lists]].
* '''[[Religion]]''' is a collection of [[cultural systems]], [[belief systems]], and [[worldviews]] that establishes symbols that relate humanity to [[spirituality]] and, sometimes, to moral values. See also [[:Category:Religion-related lists]].
* '''[[Sports]]''' are all forms of [[Competition|competitive]] [[physical activity]] which, through casual or organised participation, aim to use, maintain or improve physical fitness and provide [[entertainment]] to participants. A '''game''' is structured [[play (activity)|playing]], usually undertaken for [[enjoyment]] and sometimes used as an [[education]]al tool.

&lt;gallery mode="packed-hover"&gt;
File:Akha cropped hires.JPG|An adult human male and female
File:Produits régionaux - photo CPPR.jpg|Fine food, the principal study of [[gastronomy]]
File:JMR-Memphis1.jpg|[[Lady Justice]] is the symbol of the judiciary
File:Lakhovsky Conversation.jpg|[[Arnold Lakhovsky]], ''The Conversation'' (circa 1935)
&lt;!--File:David - The Death of Socrates.jpg|''[[The Death of Socrates]]'' by [[Jacques-Louis David]] (1787)--&gt;
File:Puertadelsol2011.jpg|The [[Puerta del Sol]] square in Madrid during the [[2011–2013 Spanish protests]]
File:RELIGIONES.png|Religious symbols in clock-wise order: [[Judaism]], [[Christianity]], [[Islam]], [[Baha'i]], [[Hinduism]], [[Taoism]], [[Buddhism]], [[Sikhism]], [[Slavic neopaganism|Rodnoveri]], [[Celtic pagan]], [[Heathenism]], [[Semitic Neopaganism|Semitic pagan]], [[Wicca]], [[Kemetism]], [[Hellenic Polytheistic Reconstructionism|Hellenic pagan]], [[Roman polytheistic reconstructionism|Roman pagan]]
File:Youth-soccer-indiana.jpg|Sport in [[childhood]]
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=1 | [[Biography]]{{anchor|Biography}}
| &lt;li&gt;[[List of people]] ([[:Category:Lists of people|cat]])
{{User:Emijrp/AHKrow|P31=Q5|wikidata=3498669|estimate=17000000|format=count}}
| rowspan=1 | [[File:Human gender gap.png|thumb|right|150px|5:1 gender gap.]]
Total number of notable biographies is unknown. As of March 2017, Wikidata includes &lt;!-- wdbiomale --&gt;{{formatnum:2653023}}&lt;!-- /wdbiomale --&gt; male biographies and [[User:Emijrp/All Human Knowledge/Women|&lt;!-- wdbiofemale --&gt;{{formatnum:530490}}&lt;!-- /wdbiofemale --&gt; female]] biographies.&lt;ref&gt;[https://query.wikidata.org/#SELECT%20%3Fgender%20%28COUNT%28%3Fitem%29%20AS%20%3Fcount%29%0AWHERE%20%7B%0A%09%3Fitem%20wdt%3AP31%20wd%3AQ5.%0A%20%20%20%20%3Fitem%20wdt%3AP21%20%3Fgender.%0A%7D%0AGROUP%20BY%20%3Fgender%0AORDER%20BY%20DESC%28%3Fcount%29 Biographies by gender] in Wikidata&lt;/ref&gt; That is a [[Gender bias on Wikipedia|gender ratio]] of 5:1. {{As of|2017|03}} English Wikipedia contains [[User:WP 1.0 bot/Tables/Project/Biography|1,486,208 biographies]].

We could assume that in an average city with a population of 100,000 inhabitants there are 100 notable people: artists, scientists, writers, politicians, sportspeople and [[:Category:People by occupation|many more]]. Setting a notability rate of 1000:1. If the [[world population]] is about 7,000,000,000, we would have 7,000,000,000/1,000 = 7,000,000 notable biographies of living people (BLP). Given the fact that there are about 360,000 births per day&lt;ref&gt;{{cite web|title=World Birth and Death Rates|url=http://www.ecology.com/birth-death-rates/}}&lt;/ref&gt;&lt;ref name="worldometers"&gt;{{cite web|title=Worldometers - real time world statistics|url=http://www.worldometers.info}}&lt;/ref&gt; this means about 360 notable people are born each day.

But we have to [[User:Emijrp/Systemic bias/Contemporary bias|look into the past centuries]] too. The number of people who have ever been born is around 100,000,000,000.&lt;ref&gt;[http://www.prb.org/Articles/2002/HowManyPeopleHaveEverLivedonEarth.aspx How Many People Have Ever Lived on Earth?] ({{webarchive |url=http://www.webcitation.org/68DcfH1ST?url=http://www.prb.org/Articles/2002/HowManyPeopleHaveEverLivedonEarth.aspx |date=June 6, 2012 }})&lt;/ref&gt; This gives us an estimate of 10,000,000 notable biographies (excluding the 7,000,000 BLP). So, a rough estimate is over 17,000,000 notable biographies.

Lists of [[Lists of people by occupation|people by occupation]] ([[:Category:Lists of people by occupation|cat]]) and [[List of people by nationality|nationality]] are desirable too. According to Wikidata, there are over 4,300 occupations (over 2,500 with an English label).&lt;ref&gt;[https://query.wikidata.org/#SELECT%20DISTINCT%20%3Fitem%20%3FitemLabel%0AWHERE%20%7B%0A%09%3Fitem%20wdt%3AP31%20wd%3AQ28640.%0A%20%20%20%20%3Fitem%20rdfs%3Alabel%20%3Flabel.%0A%20%20%20%20FILTER%28LANG%28%3Flabel%29%20%3D%20%22en%22%29.%0A%20%20%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22%20.%20%7D%0A%7D%0AORDER%20BY%20%3FitemLabel Occupations] in Wikidata&lt;/ref&gt; See also [[:Category:Obsolete occupations]].
|-
| [[Business]]{{anchor|Business}}
| &lt;li&gt;[[List of companies]]
{{User:Emijrp/AHKrow|P31=Q4830453|wikidata=234673|estimate=}}
| Total number of bussiness is unknown.
|-
| rowspan=5 | [[Culture]]{{anchor|Culture}}
| &lt;li&gt;[[List of cultures]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of cultures is unknown.
|-
| &lt;li&gt;[[Uncontacted peoples]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of uncontacted peoples is unknown.
|-
| &lt;li&gt;[[List of flags]] ([[:Category:Lists of flags|cat]])
{{User:Emijrp/AHKrow|P31=Q14660|wikidata=6173|estimate=}}
| Total number of flags is unknown.
|-
| &lt;li&gt;[[List of symbols]] ([[:Category:Lists of symbols|cat]])
{{User:Emijrp/AHKrow|P31=Q80071|wikidata=54606|estimate=}}
| Total number of symbols is unknown.
|-
| &lt;li&gt;[[List of currencies]] ([[:Category:Currency lists|cat]])
{{User:Emijrp/AHKrow|P31=Q8142|wikidata=957|estimate=}}
| Total number of currencies is unknown.
|-
| [[Education]]{{anchor|Education}}
| &lt;li&gt;[[Educational theory|Educational theories]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| 
|-
| rowspan=6 | [[Gastronomy]]{{anchor|Gastronomy}}
| &lt;li&gt;[[List of cuisines]]
{{User:Emijrp/AHKrow|P31=Q1968435|wikidata=172|estimate=}}
| 
|-
| &lt;li&gt;[[List of dishes]]
{{User:Emijrp/AHKrow|P31=Q746549|wikidata=2302|estimate=}}
| Total number of dishes is unknown.
|-
| &lt;li&gt;[[List of beverages]]
{{User:Emijrp/AHKrow|P31=Q40050|wikidata=6110|estimate=}}
| Total number of beverages is unknown.
|-
| &lt;li&gt;[[List of cheeses]]
{{User:Emijrp/AHKrow|P31=Q10943|wikidata=41|estimate=}}
| According to the [[Guide to Cheeses of the World]], there are 1200 cheeses.&lt;ref&gt;Roland Barthelemy and Arnaud Sperat-Czar: Guide to Cheeses of the World: 1200 Cheeses of the World. Hachette Food &amp; Wine, 2006, ISBN-13: 978-1844301515.&lt;/ref&gt;
|-
| &lt;li&gt;[[List of apple cultivars]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=7500}}
| According to sources, there are 7,500+ cultivars.&lt;ref name="Elzebroek"&gt;{{cite book|last=Elzebroek|first=A.T.G.|author2=Wind, K. |title=Guide to Cultivated Plants|publisher=CAB International|location=Wallingford|year=2008|page=27|isbn=1-84593-356-7|url=http://books.google.co.uk/books?id=YvU1XnUVxFQC&amp;lpg=PT39&amp;dq=apple%20cultivars%207%2C500&amp;pg=PT39#v=onepage&amp;q=&amp;f=false}}&lt;/ref&gt;
|-
| &lt;li&gt;[[List of gastronomy awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| 
|-
| rowspan=5 | [[Law]]{{anchor|Law}}
| &lt;li&gt;[[List of country legal systems]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=200}}
| See also [[List of Roman laws]].
|-
| &lt;li&gt;[[Lists of case law]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| 
|-
| &lt;li&gt;[[List of treaties]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=500}}
| According to sources, there are 507 international treaties.&lt;ref&gt;{{cite web|url=http://treaties.un.org/pages/DB.aspx?path=DB/MTDSGStatus/pageIntro_en.xml|title=United Nations Treaty Collection}}&lt;/ref&gt;
|-
| &lt;li&gt;[[Human rights]]&lt;li&gt;By [[:Category:Human rights by issue‎|issue]]&lt;li&gt;By [[:Category:Human rights by region‎|country]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| 
|-
| &lt;li&gt;[[List of licenses]]
{{User:Emijrp/AHKrow|P31=Q79719|wikidata=211|estimate=}}
| See also [[List of software licenses]] and [[List of free content licenses]].
|-
| rowspan=6 | [[Language]]{{anchor|Language}}
| &lt;li&gt;[[List of languages]]
{{User:Emijrp/AHKrow|P31=Q34770|wikidata=23049|estimate=6900}}
| According to sources, there are 6,900 languages.&lt;ref name="baines"&gt;{{cite web|url=http://web.ebscohost.com.ezproxy.kwantlen.ca:2080/ehost/pdfviewer/pdfviewer?sid=74c5b7a2-ba74-40f4-98b8-b5b324ad421e%40sessionmgr111&amp;vid=1&amp;hid=110|title =A Future of Fewer Words|author=Lawrence Baines|date=2012|accessdate=4 April 2012| quote=K. David Harrison, author of "When Languages Die", estimates 6,900 or so languages are spoken on the planet and that more than half of these languages are likely to become extinct over the next century.}}&lt;/ref&gt;

[[Rosetta Project]] is a permanent archive 1,500 languages (13,000 microscopic pages of text) in a contemporary version of the historic [[Rosetta Stone]] to last from 2000 to 12,000 AD.

See also [[List of constructed languages]], [[List of extinct languages]] and [[List of fictional languages]]. And [[:wiktionary:Category:All languages]] for words in all languages.
|-
| &lt;li&gt;[[:Category:Animal communication]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| 
|-
| &lt;li&gt;[[Exolinguistics]] and [[Alien language]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| 
|-
| &lt;li&gt;[[List of writing systems]]
{{User:Emijrp/AHKrow|P31=Q8192|wikidata=19035|estimate=3866}}
| According to sources, there are 3,866 writing systems.&lt;ref&gt;{{cite web|title=How many languages in the world are unwritten?|url=https://www.ethnologue.com/enterprise-faq/how-many-languages-world-are-unwritten-0|quote=The exact number of unwritten languages is hard to determine. Ethnologue (20th edition) has data to indicate that of the currently listed 7,099 living languages, 3,866 have a developed writing system. We don't always know, however, if the existing writing systems are widely used. That is, while an alphabet may exist there may not be very many people who are literate and actually using the alphabet. The remaining 3,233 are likely unwritten.}}&lt;/ref&gt; See also [[List of constructed scripts]] and [[Undeciphered writing systems]].
|-
| &lt;li&gt;[[Letter]]s/[[character]]s/[[symbol]]s
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| 
|-
| &lt;li&gt;[[Index of phonetics articles]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| 
|-
| rowspan=2 | [[Organization]]s{{anchor|Organizations}}
| &lt;li&gt;[[List of organizations]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| 
|-
| &lt;li&gt;[[List of non-governmental organizations]]
{{User:Emijrp/AHKrow|P31=Q79913|wikidata=15344|estimate=10000000}}
| Total number of non-governmental organizations is unknown.

According to sources by country:
* [[List of non-governmental organizations in India|India]] (3,300,000)&lt;ref&gt;{{cite web|title=India: More NGOs, than schools and health centres|work=OneWorld.net|date=July 7, 2010|url=http://southasia.oneworld.net/todaysheadlines/india-more-ngos-than-schools-and-health-centres|accessdate=2011-10-07}}&lt;/ref&gt;&lt;ref&gt;{{cite news
|title=First official estimate: An NGO for every 400 people in India|work=The Indian Express|date=July 7, 2010|url=http://www.indianexpress.com/news/first-official-estimate-an-ngo-for-every-400-people-in-india/643302/}}&lt;/ref&gt;
* [[List of non-governmental organizations in Russia|Russia]] (277,000)&lt;ref&gt;{{cite news|title=Hobbled NGOs wary of Medvedev|date=May 7, 2008|work=Chicago Tribune|url=http://articles.chicagotribune.com/2008-05-07/news/0805060608_1_civil-society-russian-authorities-russian-president-vladimir-putin}}&lt;/ref&gt;
* [[List of non-governmental organizations in the United States|United States]] (1,500,000)&lt;ref&gt;[http://www.humanrights.gov/2012/01/12/fact-sheet-non-governmental-organizations-ngos-in-the-united-states/ Fact Sheet: Non-Governmental Organizations (NGOs) in the United States]&lt;/ref&gt;
|-
| rowspan=1 | [[Philosophy]]{{anchor|Philosophy}}
| &lt;li&gt;[[List of philosophies]] ([[:Category:Philosophy by period|by period]], [[:Category:Philosophy by field|by field]], [[:Category:Philosophy by region|by region]])
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of philosophies is unknown. See also [[List of philosophical concepts]] and [[:Category:Philosophy-related lists]].&lt;!--{{Philosophy topics}}--&gt;
|-
| rowspan=3 | [[Politics]]{{anchor|Politics}}
| &lt;li&gt;[[List of political ideologies]]
{{User:Emijrp/AHKrow|P31=Q14934048|wikidata=279|estimate=}}
| Total number of political ideologies is unknown.
|-
| &lt;li&gt;[[List of political parties]]
{{User:Emijrp/AHKrow|P31=Q7278|wikidata=15842|estimate=}}
| Total number of political parties is unknown.
|-
| &lt;li&gt;[[List of demonstrations]]
{{User:Emijrp/AHKrow|P31=Q175331|wikidata=433|estimate=}}
| Total number of demonstrations is unknown.
|-
| rowspan=3 | [[Religion]]{{anchor|Religion|Mythology}}
| &lt;li&gt;[[List of religions]]
{{User:Emijrp/AHKrow|P31=Q9174|wikidata=225|estimate=4200}}
| According to sources, there are 4,200 religions.&lt;ref&gt;{{cite web |url=http://www.adherents.com |title=Adherents.com |date=2013-05-23 |work= |publisher= |accessdate=2013-05-24 |quote=Adherents.com is a growing collection of over 43,870 adherent statistics and religious geography citations: references to published membership/adherent statistics and congregation statistics for over 4,200 religions, churches, denominations, religious bodies, faith groups, tribes, cultures, movements, ultimate concerns, etc. |archiveurl=http://www.webcitation.org/6GqniTzRf |archivedate=2013-05-24 |deadurl=no}}&lt;/ref&gt;

[[:pl:Encyklopedia Katolicka]] has over 40,000 definitions (it includes things like [[Fire in religion]]).
|-
| &lt;li&gt;[[List of mythologies]]
{{User:Emijrp/AHKrow|P31=Q9134|wikidata=62|estimate=}}
| Total number of mythologies is unknown.
|-
| &lt;li&gt;[[List of creation myths]]
{{User:Emijrp/AHKrow|P31=Q215304|wikidata=5|estimate=}}
| Total number of creation myths is unknown.
|-
| rowspan=5 | [[Sports]]{{anchor|Sports}}
| &lt;li&gt;[[List of sports]]
{{User:Emijrp/AHKrow|P31=Q31629|wikidata=4778|estimate=}}
| According to sourcers, there are over 8,000 indigeneous sports and sporting games.&lt;ref&gt;[http://www.sportencyclopedia.com/index.php?mod=book How many sports are there in the world?] ({{webarchive |url=https://web.archive.org/web/20100723160638/http://www.sportencyclopedia.com/index.php?mod=book |date=July 23, 2010 }})&lt;/ref&gt;

{{for|virtual games|#Videogames}}
|-
| &lt;li&gt;[[List of professional sports teams]]
{{User:Emijrp/AHKrow|P31=Q847017|wikidata=61554|estimate=}}
|-
| &lt;li&gt;[[List of sports leagues]]
{{User:Emijrp/AHKrow|P31=Q27020041|wikidata=15731|estimate=}}
|-
| &lt;li&gt;[[List of martial arts]]
{{User:Emijrp/AHKrow|P31=Q11417|wikidata=45|estimate=}}
|-
| &lt;li&gt;[[List of games]]
{{User:Emijrp/AHKrow|P31=Q11410|wikidata=39107|estimate=58900}}
| According to [[Board Game Geek]], there are over 58,900 games.&lt;ref&gt;[http://boardgamegeek.com/browse/boardgame/page/1 Board Game Geek] ({{webarchive |url=http://www.webcitation.org/68DcQWLM6?url=http://boardgamegeek.com/browse/boardgame/page/1 |date=June 6, 2012 }})&lt;/ref&gt;
|-
{{User:Emijrp/AHKrowtotal|wikidata=3999403|estimate=27486040}}
|}

== Technology ==

'''[[Technology]]''' is the making, modification, usage, and knowledge of [[tool]]s, [[machine]]s, techniques, [[craft]]s, [[system]]s, methods of organization, in order to solve a problem, improve a preexisting solution to a problem, achieve a goal or perform a specific function. It can also refer to the collection of such tools, machinery, modifications, arrangements and procedures. Technologies significantly affect human as well as other animal species' ability to control and adapt to their natural environments. See also [[:Category:Technology-related lists]].

* A '''[[patent]]''' is a form of [[intellectual property]]. It consists of a set of [[exclusive right]]s granted by a [[sovereign state]] to an inventor or their assignee for a limited period of time, in exchange for the public disclosure of the [[invention]].
* '''[[Software]]''' is a collection of [[computer program]]s and related [[data]] that provide the instructions for telling a [[computer]] what to do and how to do it. A '''[[video game]]''' is an [[electronic game]] that involves human interaction with a [[user interface]] to generate visual feedback on a [[video|video device]].
* '''[[Transport]]''' or transportation is the movement of people, animals and [[cargo|goods]] from one location to another. [[Modes of transport]] include [[aviation|air]], [[rail transport|rail]], [[road transport|road]], [[ship transport|water]], [[cable transport|cable]], [[pipeline transport|pipeline]], and [[space transport|space]]. The field can be divided into [[infrastructure]], [[vehicle]]s, and [[business operations|operations]]. Transport is important since it enables trade between peoples, which in turn establishes civilizations. See also [[:Category:Transport lists]].
* A '''[[weapon]]''' is a [[tool]] or instrument used in order to inflict damage or harm.
* A '''[[website]]''' is a set of related [[webpage]]s containing [[content (media)]], including [[Written language|text]], [[video]], [[music]], [[Sound|audio]], [[image]]s, etc.

&lt;gallery mode="packed-hover"&gt;
File:Astronaut-EVA.jpg|By the mid 20th century, humans had achieved a mastery of technology sufficient to [[space exploration|explore space]]
File:HuC6260A 01.jpg|A Japanese manufactured microprocessor]]
File:Internet map 1024 - transparent, inverted.png|An [[Opte Project]] visualization of [[Internet]] [[Routing|routing path]]s
File:Hwscreen.png|[[Hedgewars]], a free video game, similar to [[Worms (series)|Worms]]
File:BW Fjord an Glameyer Stack 2007-12-15.JPG|People walking in front of the [[bulk carrier]] ''[[BW Group|BW]] Fjord''
File:Replica catapult.jpg|Replica of a [[Petraria Arcatinus|medieval catapult]]
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| rowspan=2 | [[Discovery|Discoveries]]{{anchor|Discoveries}}
| &lt;li&gt;[[List of discoveries]]
{{User:Emijrp/AHKrow|P31=Q753297|wikidata=4|estimate=}}
| rowspan=2 | Redundant as all invented and discovered by humans are in other tables? See also [[:Category:Lists of inventions or discoveries]].

Patents databases:
* [[Espacenet]] (70,000,000)
* [[Japan Patent Office]] (???)&lt;ref&gt;In 2005, it received 427,078 patent applications, 11,386 utility model applications, 39,254 design applications, and 125,807 trademark applications; it registered 122,944 patents, 10,573 utility model rights, 32,633 design rights, and 97,939 trademark rights in the same year.&lt;/ref&gt;
* [[United States Patent and Trademark Office]] (7,950,000)

|-
| &lt;li&gt;[[List of inventions]]{{anchor|Inventions}}
{{User:Emijrp/AHKrow|P31=Q18119757|wikidata=3|estimate=}}
|-
| rowspan=2 | [[Hardware]]{{anchor|Hardware}}
| &lt;li&gt;[[List of microprocessors]]
{{User:Emijrp/AHKrow|P31=Q5297|wikidata=100|estimate=}}
| Total number of microprocessors is unknown. See also [[:Category:Lists of computer hardware]].
|-
| &lt;li&gt;[[List of common microcontrollers]]
{{User:Emijrp/AHKrow|P31=Q165678|wikidata=15|estimate=}}
| Total number of microcontrollers is unknown.
|-
| rowspan=5 | [[Internet]]{{anchor|Internet}}
| &lt;li&gt;[[List of websites]]
{{User:Emijrp/AHKrow|P31=Q35127|wikidata=9678|estimate=}}
| According to sources, there are 420,000,000-600,000,000 websites.&lt;ref&gt;[http://wayback.archive.org/web/20150629001532/http://people.lis.illinois.edu/~wrayward/otlet/otletpage.htm Rayward's Otlet Page: Paul Otlet and Documentation]&lt;/ref&gt;&lt;ref&gt;[http://news.netcraft.com/archives/category/web-server-survey/ September 2015 Web Server Survey]&lt;/ref&gt; We could assume only 100,000 are notable. [[Alexa ranking]] offers a list of 1,000,000 most visited websites&lt;ref&gt;[http://www.alexa.com/topsites Alexa Top 500 Global Sites] ([http://s3.amazonaws.com/alexa-static/top-1m.csv.zip Top 1,000,000 Sites])&lt;/ref&gt; See also [[List of web directories]].
|-
| &lt;li&gt;[[List of wikis]] 
{{User:Emijrp/AHKrow|P31=Q171|wikidata=585|estimate=}}
| According to [[WikiApiary]], there are 25,000 wikis.&lt;ref&gt;[https://wikiapiary.com/wiki/Main_Page WikiApiary]&lt;/ref&gt; Probably only 1,000 are notable.
|-
| &lt;li&gt;[[List of newsgroups]]
{{User:Emijrp/AHKrow|P31=Q657881|wikidata=15|estimate=}}
| Total number of newsgroups is unknown.
|-
| &lt;li&gt;[[List of virtual communities]]
{{User:Emijrp/AHKrow|P31=Q210980|wikidata=147|estimate=}}
| Total number of virtual communities.
|-
| &lt;li&gt;[[List of Internet awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of Internet awards.
|-
| rowspan=8 | [[Software]]{{anchor|Software}}
| &lt;li&gt;[[List of application software|Application software]] ([[:Category:Lists of software|cat]])
{{User:Emijrp/AHKrow|P31=Q166142|wikidata=36730|estimate=}}
| Total number of application software is unknown. According to repositories:
* [[App Store (iOS)|App Store]] (550,000)&lt;ref name="25Billion"&gt;{{cite web|publisher=MacRumors|title=App Store's 25 Billionth Download Comes From China with 'Where's My Water? Free'|url=http://www.macrumors.com/2012/03/05/app-stores-25-billionth-download-comes-from-china-with-wheres-my-water-free/|archiveurl=http://www.webcitation.org/68DaUnwBX|archivedate=2012-06-06|deadurl=no}}&lt;/ref&gt;
* [[Google play]] (500,000)&lt;ref name="Google Play About To Pass 15 Billion App Downloads"&gt;{{cite web |url=http://techcrunch.com/2012/05/07/google-play-about-to-pass-15-billion-downloads-pssht-it-did-that-weeks-ago/ |title=Google Play About To Pass 15 Billion App Downloads? Pssht! It Did That Weeks Ago |date=7 May 2012 |publisher=[[techcrunch]] |accessdate=22 May 2012|archiveurl=http://www.webcitation.org/68DaHJIRw|archivedate=2012-06-06|deadurl=no}}&lt;/ref&gt;
* [[Ubuntu Software Center]] (30,000)
|-
| &lt;li&gt;[[List of file formats|File formats]] ([[:Category:Lists of file formats|cat]])
{{User:Emijrp/AHKrow|P31=Q235557|wikidata=2691|estimate=}}
| Total number of file formats is unknown.
|-
| &lt;li&gt;[[List of free software repositories|Free software repositories]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of free software repositories is unknown.
|-
| &lt;li&gt;[[Comparison of computer viruses|Malware, viruses, trojans]]
{{User:Emijrp/AHKrow|P31=Q14001|wikidata=83|estimate=}}
| According to sources, there are over 1,000,000 computer viruses.&lt;ref&gt;Darren Pauli, [http://www.pcworld.com/article/144181/viruses_expected_to_hit_1_million_this_year.html Viruses Expected to Hit 1 Million This Year], Computerworld-Australia, Apr 6, 2008. ({{webarchive |url=http://www.webcitation.org/68DabKhWC?url=https://www.pcworld.com/article/144181/viruses_expected_to_hit_1_million_this_year.html |date=June 6, 2012 }})&lt;/ref&gt;
|-
| &lt;li&gt;[[List of programming languages|Programming languages]] ([[:Category:Lists of computer languages|cat]])
{{User:Emijrp/AHKrow|P31=Q9143|wikidata=2099|estimate=2000}}
| According to sources, there are over 2,000 programming languages.&lt;ref&gt;[http://www.cs.man.ac.uk/~pjj/cs1001/software/node3.html Computer Languages] ({{webarchive |url=http://www.webcitation.org/67yDzUGV6?url=http://www.cs.man.ac.uk/%7Epjj/cs1001/software/node3.html |date=May 27, 2012 }})&lt;/ref&gt;
|-
| &lt;li&gt;[[List of software awards|Software awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of software awards is unknown.
|-
| &lt;li&gt;[[Lists of video games]] ([[:Category:Video game lists by platform|cat]])
{{User:Emijrp/AHKrow|P31=Q7889|wikidata=33639|estimate=}}
| [[MobyGames]], as of June 2019, lists over 100,000 unique game titles &lt;ref&gt;{{webarchive |url=https://web.archive.org/web/20190626140410/https://www.mobygames.com/browse/games/list-games/ |date=26 June 2019 |title=MobyGames: Game Browser}}&lt;/ref&gt; with over 40,000 of titles marked as Commercial.&lt;ref&gt;{{webarchive |url=https://web.archive.org/web/20190626141519/https://www.mobygames.com/attribute/sheet/attributeId,124/ |date=26 June 2019 |title=MobyGames: Business Model : Commercial}}&lt;/ref&gt;

A spreadsheet compiled by MobyGames volunteers gives a very rough assessment of the number of games on many platforms, based on databases around the web. As of June 2019, it reports 1,250,000 games (note that games ported to multiple platforms are counted several times.) &lt;ref&gt;[https://docs.google.com/spreadsheets/d/1CXt2BGbjZ80_sLKsyRBTORnpBcsBxnHogJgiFCMN5XQ/edit#gid=0 MobyProgress - Google Sheets]&lt;/ref&gt; 

According to Fupa there are 50,000+ free [[List of flash games|flash games]] ([[:Category:Flash games|cat]]).&lt;ref&gt;[http://www.fupa.com/ Fupa Games]&lt;/ref&gt;
|-
| &lt;li&gt;[[List of video game awards]]
{{User:Emijrp/AHKrow|P31=|wikidata=|estimate=}}
| Total number of video game awards is unknown.
|-
| rowspan=9 | [[Transport]]{{anchor|Transport}}
| &lt;li&gt;Infrastructure
{{User:Emijrp/AHKrow|P31=Q376799|wikidata=422718|estimate=}}
| Total number of transport infrastructure is unknown.
|-
| &lt;li&gt;[[List of airports]]
{{User:Emijrp/AHKrow|P31=Q1248784|wikidata=16851|estimate=43982|exclude=yes}}
| According to sources, there are 43,982 airports.&lt;ref&gt;[http://chartsbin.com/view/1395 Total Number of Airports by Country] on ChartsBin (2010 data)&lt;/ref&gt;
|-
| &lt;li&gt;[[List of bus stations]]
{{User:Emijrp/AHKrow|P31=Q494829|wikidata=343|estimate=|exclude=yes}}
| Total number of bus stations is unknown.
|-
| &lt;li&gt;[[List of parkings]]
{{User:Emijrp/AHKrow|P31=Q267917|wikidata=15|estimate=|exclude=yes}}
| Total number of parkings is unknown.
|-
| &lt;li&gt;[[List of railway stations]]
{{User:Emijrp/AHKrow|P31=Q55488|wikidata=84071|estimate=|exclude=yes}}
| Total number of railway stations is unknown.
|-
| &lt;li&gt;[[List of roads and highways]]
{{User:Emijrp/AHKrow|P31=Q34442|wikidata=337473|estimate=36118087 |exclude=yes}}
| According to the CIA World Factbook, there are 36,118,087 roads in the world&lt;ref&gt;{{Cite web|url=https://www.cia.gov/library/publications/the-world-factbook/rankorder/2085rank.html|title=The World Factbook — COUNTRY COMPARISON :: ROADWAYS|last=|first=|date=|website=www.cia.gov|language=en|archive-url=|archive-date=|dead-url=|access-date=2017-08-23}}&lt;/ref&gt;.
|-
| &lt;li&gt;[[List of seaports]]
{{User:Emijrp/AHKrow|P31=Q15310171|wikidata=43|estimate=|exclude=yes}}
| Total number of seaports is unknown.
|-
| &lt;li&gt;[[List of subway stations]]
{{User:Emijrp/AHKrow|P31=Q928830|wikidata=8481|estimate=|exclude=yes}}
| Total number of subway stations is unknown.
|-
| &lt;li&gt;[[List of vehicles]]
{{User:Emijrp/AHKrow|P31=Q42889|wikidata=64659|estimate=}}
| Total number of vehicles is unknown.
|-
| rowspan=2 | [[Weapon]]s{{anchor|Weapons}}
| &lt;li&gt;[[List of weapons]]
{{User:Emijrp/AHKrow|P31=Q728|wikidata=3813|estimate=}}
| Total number of weapons is unknown.
|-
| &lt;li&gt;[[List of ammunition]]
{{User:Emijrp/AHKrow|P31=Q185785|wikidata=995|estimate=}}
| Total number of ammunition is unknown.
|-
{{User:Emijrp/AHKrowtotal|wikidata=577974|estimate=577875}}
|}

== Special pages ==

{| class="wikitable sortable plainlinks"
! width="100px" | Topic 
! width="300px" | Related pages
! Wikidata
! Estimate
! References 
|-
| [[Wikipedia:Categorization|Categories]]{{anchor|Categories}}
| &lt;li&gt;[[:Category:Contents]]
{{User:Emijrp/AHKrow|P31=Q4167836|wikidata=3111758|estimate=}}
| Total number of required categories is unknown.
|-
| [[Wikipedia:Disambiguation|Disambiguations]]{{anchor|Disambiguations}}
| &lt;li&gt;[[:Category:Disambiguation pages]]
{{User:Emijrp/AHKrow|P31=Q4167410|wikidata=1227450|estimate=}}
| Total number of required disambiguation pages is unknown.
|-
| [[Wikipedia:Lists|Lists]]{{anchor|Lists}}
| &lt;li&gt;[[:Category:Lists]]
{{User:Emijrp/AHKrow|P31=Q13406463|wikidata=298500|estimate=}}
| Total number of required lists is unknown.
|-
| [[Wikipedia:Portals|Portals]]{{anchor|Portals}}
| &lt;li&gt;[[:Category:Portals]]
{{User:Emijrp/AHKrow|P31=Q4663903|wikidata=6866|estimate=}}
| Total number of required portals is unknown.
|-
| [[Wikipedia:Templates|Templates]]{{anchor|Templates}}
| &lt;li&gt;[[:Category:Wikipedia templates]]
{{User:Emijrp/AHKrow|P31=Q11266439|wikidata=900477|estimate=}}
| Total number of required template pages is unknown.
|-
{{User:Emijrp/AHKrowtotal|wikidata=5545051|estimate=5545051}}
|}

== Further knowledge ==
Some '''further knowledge''' and estimates.

=== Destroyed knowledge ===
{{anchor|Destroyed|destroyed}}
[[File:Evstafiev-bosnia-cello.jpg|thumb|right|A cello player in the destroyed [[National and University Library of Bosnia and Herzegovina|National Library of Bosnia and Herzegovina]], Sarajevo.]]

Practically every day, distinct forms of [[knowledge]] are lost forever and no copies are available. When a [[natural disaster]] hits a region or a [[List of ongoing military conflicts|war breaks out]], [[libraries]], [[archives]], [[museums]], [[monuments]] and other artifacts of heritage, valuable buildings, [[incunable|incunabula]] and unique objects are destroyed or face the threat of destruction. These events usually remove pieces of human knowledge and sometimes entire cultures.

Furthermore, hundreds of websites are closed every day on the [[Internet]]. [[:Category:Web archiving initiatives|Web archiving initiatives]] like [[Internet Archive]] or [[WebCitation]] and volunteers groups like [[Archive Team]] save copies of some of them, but much others [[Digital preservation|are lost forever]].

'''[[Wikipedia:There is a deadline|There ''is'' a deadline]]. This is a battle against time.'''

See also [[book burning]] ([[List of book burning incidents|incidents]]), [[List of lost films|lost films]], [[:Category:Lost objects|lost objects]], [[lost work]] ([[:Category:Lost works|cat]]), [[lost artworks]], [[List of destroyed libraries]] ([[List of libraries damaged during World War II|WWII]]), the [[Digital dark age]] and [[Historical revisionism (negationism)]]. And finally [[Deletionpedia]] ([[User:Emijrp/Deletionism|deletionism]]).

=== Knowledge organization ===
{{anchor|Ontologies|ontologies}}
{{main|Authority control|Ontology (information science)|Branches of science|Knowledge organization|Information science|Library catalog|Library science|Library classification|Upper ontology}}
[[File:ENC SYSTEME FIGURE.jpeg|right|200px|thumb|The original "figurative system of human knowledge" tree, in French.]]

* [[Dewey Decimal Classification]]
* [[Figurative system of human knowledge]] (the tree of Diderot and d'Alembert)
* [[Library of Congress Classification]]
* [[Universal Decimal Classification]]
* [[Virtual International Authority File]]

{{clear}}

=== Lists of missing articles ===
{{main|Wikipedia:Articles for creation|Wikipedia:WikiProject Missing encyclopedic articles|Wikipedia:WikiProject Intertranswiki}}
{{see also|Wikipedia:Requested articles|Wikipedia:Requested lists|Wikipedia:Requested pictures|Wikipedia:Requested recordings|Wikipedia:Articles for creation/Redirects|Wikipedia:Requested templates|Wikipedia:Templates with red links}}
{{see also category|Wikipedia missing topics|Wikipedia red link lists}}

Many users compile huge lists of missing encyclopedic and notable articles to be developed ([http://en.wikipedia.org/w/index.php?title=Special%3ASearch&amp;profile=advanced&amp;search=intitle%3Amissing+articles&amp;fulltext=Search&amp;ns2=1&amp;redirs=1&amp;profile=advanced search results for intitle:missing articles]). If you have any list plenty of red links, please add yourself:

{{div col|3}}
* [[User:Agne27/French wine project]]
* [[User:Calliopejen1/Morocco]]
* [[User:Dominic/Chile politics]]
* [[User:Dsp13/Redlinks]]
* [[User:Emijrp/Outlines]]
* [[User:Gobonobo/Gender Gap red list]]
* [[User:Ham/250 paintings]]
* [[User:Ipigott/Sandbox3|User:Ipigott/French painters]]
* [[User:JackofOz/Redlinks]]
* [[User:Magnus Manske/Baker's Biographical Dictionary of Musicians (A – D)|Baker's Biographical Dictionary of Musicians (A – D)]]
* [[User:Magnus Manske/Women in science]]
* [[User:T. Anthony/Women in Red]]
* [[User:Yupik/Redlinks/Indigenous Women]]
* [[Wikipedia:List of missing Africa topics]]
* [[Wikipedia:WikiProject Missing encyclopedic articles/Skysmith's list of missing articles|Skysmith's list of missing articles]]
* [[Wikipedia:WikiProject Missing encyclopedic articles/Thompson-Reuters most cited scientists]]
{{div col end}}

See [[Wikipedia:WikiProject Missing encyclopedic articles/Progress|progress]] for [[Wikipedia:WikiProject Missing encyclopedic articles|WikiProject Missing encyclopedic articles]].

{{clear}}

=== New knowledge ===

These are some estimations of '''new knowledge''' generated every year:

* New [[#Music|albums]] in US: 75,000 (2010), 96,100 (2009), 106,000 (2008), 76,000 (2006)&lt;ref name="newusalbums" /&gt;
* New [[#Literature|books]] globally: 2.2 million approx&lt;ref&gt;{{cite web | url=https://en.wikipedia.org/wiki/Books_published_per_country_per_year | title=Books published per country per year | publisher=Wikipedia | accessdate=2013-12-30}}&lt;/ref&gt; (See [[Books published per country per year]])
* New notable persons, people in office, etc.
* New events: some recurring (elections, awards, sports competitions, etc.), some spontaneous (disasters, wars, etc.)
* New scientific discoveries: species, astronomical objects (planets, stars, solar systems, asteroids, comets), particles, mathematical principles, etc.
* New inventions
* New institutions, campaigns, and organizations
* New social trends, cultural movements, theories, philosophies, and perspectives
* New discoveries of human and natural history: pre-history of the universe, decoding of old languages (e.g. [[Linear A]] and [[Linear B]]), archaeological discovery of artifacts and manuscripts, fossils of extinct species, geological insight into the Earth's formation, etc.
* ''Please, add more''

{{clear}}

=== Preservation ===

Wikimedia projects aims to compile all human knowledge, they are focused in the quantity and quality of the contents, but what about preservation? How are we going to preserve all the knowledge for the future generations? There are several organizations working on the preservation of information and weak heritage, some of them are the following:

* [[Internet Archive]]
* [[The Long Now Foundation]]
** [[All Species Foundation]]
** [[Rosetta Project]]

=== Sister projects ===
{{anchor|Wikibooks|Commons|Wikinews|Wikiquote|Wikisource|Wikispecies|Wikiversity|Wikidata|Wiktionary|Wikivoyage}}
Sections aboved are focused in those entities which are notable for Wikipedia. Sister projects include the following ones.

* TODO: stats by sister project, langs, wikidata sitelinks, structure data for commons, wikidata wiktionary lemmas, etc, the future!

&lt;gallery mode="packed-hover"&gt;
File:Wikimedia logo family 2013.svg
File:Geolocated images in Wikimedia Commons 2015-01-07.png|5.3M geolocated images in [[Wikimedia Commons]]. As you can see, some areas coverage is highly biased
&lt;/gallery&gt;

{| class="wikitable sortable plainlinks"
! Topic 
! Related pages
|-
| {{icon+link|Wikibooks|Wikibooks}}
| &lt;li&gt;Textbooks for every course at every level of study
&lt;li&gt;Childrens' books for an introduction to every branch of knowledge (Wikijunior)
|-
| {{icon+link|Commons|Wikimedia Commons}}
| &lt;li&gt;Hundred images of every municipality in the world?
&lt;li&gt;See [[Geograph Britain and Ireland]] (http://www.geograph.org.uk) project which aims to collect geographically representative photographs and information for every square kilometre of Great Britain and Ireland
&lt;li&gt;[[Earth]] land surface area is 148,940,000 km&lt;sup&gt;2&lt;/sup&gt; (minimum 1 image per km&lt;sup&gt;2&lt;/sup&gt;?)
&lt;li&gt;Images, sounds and videos for every animal [[#Species|species]]. Imagine a category with sounds for every bird species
|-
| {{icon+link|Wikinews|Wikinews}}
| &lt;li&gt;Local and national news?
|-
| {{icon+link|Wikiquote|Wikiquote}}
| &lt;li&gt;quotes by all biographies? (1 page per biography)
&lt;li&gt;quotes on all basic topics
&lt;li&gt;quotes from every major piece of literature
|-
| {{icon+link|Wikisource|Wikisource}}
| &lt;li&gt;every book in public domain? (in Wikisource every page is a book page). [[Internet Archive]] hosts about 3 million public domain books.&lt;ref&gt;[http://www.archive.org/details/texts Ebook and Texts Archive]&lt;/ref&gt;
&lt;li&gt;every law, public proclamation, etc
&lt;li&gt;every speech, letter to the editor
&lt;li&gt;every newspaper
&lt;li&gt;pamphlets, magazines, zines
|-
| {{icon+link|Wikispecies|Wikispecies}}
| &lt;li&gt;range between 2 to 100 million (see [[#Biology]])
|-
| {{icon+link|Wikiversity|Wikiversity}}
| &lt;li&gt;courses for every knowledge branch
|-
| {{icon+link|Wiktionary|Wiktionary}}
| &lt;li&gt;All [[Lemma (morphology)|lemma]]s of all languages? The Spanish [[Diccionario de la lengua española|DRAE]] has 80,000 lemmas* over 500 languages would be 40 million providing Spanish case is typical.
&lt;li&gt;All [[idiom]]s? [http://www.casadellibro.com/libro-diccionario-de-dichos-y-frases-hechas/9788467025019/1133312 this] dictionary has 5000+ Spanish idioms. Again 5000*500 = 2,500 000 idioms if Spanish case is typical.
|-
| {{icon+link|Wikivoyage|Wikivoyage}}
| &lt;li&gt;Guides to every place (en.voy: A "place" is somewhere you can sleep)
&lt;li&gt;Phrasebooks for every (majority?) language
|}

=== Some examples ===
{{anchor|Examples|examples}}
If you don't think that there are still millions of missing topics, here you have some odd examples. Add yours!

{{Div col|cols=3}}
* [[Coin Compendium]]
* [[Cotton production in Samarkand Province]]
* [[Economic development in Caracas]]
* [[Fire in religion]]
* [[Rice production in Mandalay District]]
* [[Scientific properties of Andromeda]]
{{Div col end}}

{{clear}}

=== Special:Newpages ===
{{main|Special:Newpages}}
{{Special:Newpages/5}}

== References ==
{{reflist|2}}

== Bibliography ==

;Academia
* Mehdi, Mohamad et al. (2016). Excavating the mother lode of human-generated text: A systematic review of research that uses the Wikipedia corpus
* Nielsen, Finn (2010). [http://img.readtiger.com/wkp/en/Finn_%C3%85rup_Nielsen_-_Wikipedia_is_not_the_sum_of_all_human_knowledge_-_Wikimania_2010.pdf Wikipedia is not the sum of all human knowledge: do we need a wiki for open data?]
* Nielsen, Finn et al. (2017). [https://arxiv.org/pdf/1703.04222.pdf Scholia and scientometrics with Wikidata]

;Documentaries
* [[Alain Resnais|Resnais, Alain]] (1956). ''[[Toute la mémoire du monde]]''. ([https://www.youtube.com/watch?v=i0RVSZ_yDjs Available online])
* Deepspeed media (2013). ''Internet Archive''. ([https://www.youtube.com/watch?v=ec_-fgy3EGY Available online])
* Haak, Bregtje van der (2014). ''[[Digital Amnesia]]''. ([https://archive.org/details/DigitalAmnesiaDocumentary Available online])
* [[Leonardo Moledo|Moledo, Leonardo]] (2009). ''El conocimiento como bien social y la Biblioteca de Babel'' ([https://www.youtube.com/watch?v=eDZ6vxpom8o Available online])

;Essays
* [http://history-computer.com/Library/WorldBrain.pdf World Brain: The Idea of a Permanent World Encyclopaedia] ({{webarchive|url=http://www.webcitation.org/6rfIXAYFr?url=http://history-computer.com/Library/WorldBrain.pdf|date=July 2, 2017}})
* [http://pavlopoulos.wordpress.com/2009/10/18/lasswitz-and-borges-indexing-the-library-of-everything/ Lasswitz and Borges: Indexing the Library of Everything] ({{webarchive |url=http://www.webcitation.org/69lG77xS5?url=http://pavlopoulos.wordpress.com/2009/10/18/lasswitz-and-borges-indexing-the-library-of-everything/ |date=August 8, 2012 }})
* [http://baroqueetfatigue.wordpress.com/2011/03/11/quun-milliard-darticles-sepanouissent/ Qu’un milliard d’articles s’épanouissent] ({{webarchive |url=http://www.webcitation.org/6BhXDEXgZ?url=http://baroqueetfatigue.wordpress.com/2011/03/11/quun-milliard-darticles-sepanouissent/ |date=October 26, 2012 }})
* [http://wikitrekk.blogspot.fr/2012/11/ou-sarretera-wikipedia.html Où s'arrêtera Wikipédia?] ({{webarchive |url=http://www.webcitation.org/6G61ir250?url=http://wikitrekk.blogspot.fr/2012/11/ou-sarretera-wikipedia.html |date=April 23, 2013 }})

;News
* [http://www.theatlantic.com/technology/archive/2012/10/surmounting-the-insurmountable-wikipedia-is-nearing-completion-in-a-sense/264111/ Surmounting the Insurmountable: Wikipedia Is Nearing Completion, in a Sense] (The Atlantic) ({{webarchive |url=http://www.webcitation.org/6RNILt1k5?url=http://www.theatlantic.com/technology/archive/2012/10/surmounting-the-insurmountable-wikipedia-is-nearing-completion-in-a-sense/264111/ |date=July 27, 2014 }})
* [http://news.slashdot.org/story/12/10/26/1335241/wikipedia-is-nearing-completion Wikipedia Is Nearing "Completion"] (Slashdot) ({{webarchive |url=http://www.webcitation.org/6RNIWuQJg?url=http://news.slashdot.org/story/12/10/26/1335241/wikipedia-is-nearing-completion |date=July 27, 2014 }})
* [http://www.telegraph.co.uk/technology/wikipedia/11969459/Wikipedias-5-million-articles-still-cover-less-than-5-per-cent-of-all-human-knowledge.html Wikipedia's 5 million articles still cover less than 5 per cent of all human knowledge] ({{webarchive |url=http://www.webcitation.org/6dECLVFNK?url=http://www.telegraph.co.uk/technology/wikipedia/11969459/Wikipedias-5-million-articles-still-cover-less-than-5-per-cent-of-all-human-knowledge.html |date=November 22, 2015 }})

;Other
* [http://slashdot.org/story/13/07/03/196210/ask-slashdot-permanent-preservation-of-human-knowledge Ask Slashdot: Permanent Preservation of Human Knowledge?] ({{webarchive |url=http://www.webcitation.org/6RNIakwwB?url=http://slashdot.org/story/13/07/03/196210/ask-slashdot-permanent-preservation-of-human-knowledge |date=July 27, 2014 }})
* [http://www.oii.ox.ac.uk/research/projects/?id=128 Does Wikipedia represent ‘the sum of all human knowledge’? Examining the geographical scope of a peer-produced encyclopedia]
* [http://cii.oii.ox.ac.uk/can-we-count-the-sum-of-all-human-knowledge/ Can we count the sum of all human knowledge?]

== See also ==

{{div col|cols=2}}
* [[List of academic disciplines]]
* [[Knowledge]], [[Encyclopedia]], [[Dictionary]] and [[Database]]
* [[Information science]], [[Library science]] and [[Archival science]]
* [[Knowledge organization]], [[Library classification]], [[Branches of science]], [[List of academic disciplines]], and [[Universal library]]
* [[Figurative system of human knowledge]]
* [[Universal Decimal Classification]]
* [[Encyclopedism]] and [[New encyclopedism]]
* [[Information capacity of the universe]]
* [[Deletionism and inclusionism in Wikipedia]]

* [[Portal:Contents]], [[Portal:Contents/Lists|Lists]], [[Portal:Contents/Outlines|Outlines]], [[Portal:Contents/Portals|Portals]], [[Portal:Contents/Categories|Categories]], [[Portal:Contents/Glossaries|Glossaries]], [[Portal:Contents/Indexes|Indexes]]
* [[List of lists of lists]], [[:Category:Lists of lists]], [[List of topics]]
* [[List of digital library projects]]
* [[List of online databases]]
* [[List of online encyclopedias]]
* [[List of academic databases and search engines]]
* [[Wikipedia:List of online reference desks]]

* [[meta:List of Wikipedias]] and [[meta:List of Wikimedia projects by size]]
* [[meta:Botopedia]] and [[meta:Mass content adding]]

;Essays
* [[Wikipedia:There is a deadline]]
* [[v:User:KYPark/Encyclopaedism/Timeline]]
* [[User:Alan Liefting/Essays/The sum of all human knowledge]]
* [[User:Dr. Blofeld/Stub and development philosophy]]
* [[User:Facing the Sky/Wikipedia is not done]]
* [[User:Piotrus/Wikipedia interwiki and specialized knowledge test]]
* [[User:Emijrp/Wikipedia Archive]]
* [[User:Emijrp/Systemic bias]]
* [[User:Emijrp/Deletionism]]
* [[Wikipedia: The sum of human knowledge]]

* [[Wikipedia:Not paper]] and [[Wikipedia:Preserve]]
* [[Wikipedia:Wikipedia is failing]] and [[Wikipedia:Wikipedia is succeeding]]
* [[Wikipedia:Evaluating Wikipedia as an encyclopedia]]
* [[Wikipedia:Expert retention]]
* [[Wikipedia:Size comparisons]]
* [[Wikipedia:Wikipedia Signpost/2008-08-11/Growth study]]
* [[Wikipedia:All high schools can be notable]]
* [[Wikipedia:Modelling Wikipedia's growth]]
* [[Wikipedia:Modelling Wikipedia extended growth]]
* [[:Category:Reference works in the public domain]]

;Users creating articles massively ([[Special:Newpages]]):
* {{user|‎Dr. Blofeld}}
* {{user|Ser Amantio di Nicolao}}
* {{user|Kotbot}}
* {{user|Starzynka}}
* {{user|Ruigeroeland}}
* {{user|Carlossuarez46}}
* {{user|Geschichte}}
* {{user|BOTijo}}
* {{user|emijrp}}
* More prolific users: [[Wikipedia:List of Wikipedians by article count]], [[User:Bryan/List of users by pages created]] and [http://en.wikipedia.org/w/index.php?title=Encyclop%C3%A9distes&amp;oldid=403079689#Number_of_articles Encyclopédistes#Number of articles]

{{portal|Contents}}
;WikiProjects
* [[Wikipedia:WikiProject Missing encyclopedic articles]]
{{div col end}}

== External links ==
&lt;!--
Please, only links discussing the topic "all human knowledge". Include any links to databases or lists in the sections above. Publications and documentaries in Bibliography section. Thanks.
--&gt;
* [https://tools.wmflabs.org/wmcounter/ Wikimedia projects edits counter]
* [https://www.wikidata.org Wikidata project] and its [https://query.wikidata.org query service]
* [http://prezi.com/szjdvdbtl0j_/is-wikipedia-done/ Is Wikipedia Done?] – Answer: No.
* [[Deletionpedia]] and [[wikia:speedydeletion:Speedy deletion Wiki|Speedy deletion Wiki]]
&lt;!--
Counters offline
* [http://www.oclc.org/worldcat/newgrow.htm Watch WorldCat Grow] – Total number of holdings in libraries worldwide
* [http://statusboard.archive.org/ Live at the Internet Archive] – This page shows scanned books from the Internet Archive
--&gt;
{{User:Emijrp/All human knowledge/end}}
&lt;!--
:''Discuss about this topic and help with estimations on the [[Freenode]] IRC channel: &lt;span class="plainlinks"&gt;'''[http://webchat.freenode.net/?channels=allhumanknowledge&amp;uio=d4 #allhumanknowledge]'''&lt;/span&gt;.''--&gt;&lt;!--{{Brainstorming}}--&gt;&lt;!--{{Project missing articles}}--&gt;

[[Category:Wikipedia statistics]]</text>
      <sha1>074t5t3i18jn76ukwv59crfqjcpbi9a</sha1>
    </revision>
  </page>
  <page>
    <title>User:Emijrp/AHKrow</title>
    <ns>2</ns>
    <id>52786000</id>
    <revision>
      <id>764352425</id>
      <parentid>764352336</parentid>
      <timestamp>2017-02-08T12:31:12Z</timestamp>
      <contributor>
        <username>Emijrp</username>
        <id>363486</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2142">| style="text-align: center;" data-sort-value={{{wikidata|}}} | &lt;!--
--&gt;{{#if:{{{P31|}}}|'''[{{#switch:{{{format|}}}
|count=https://query.wikidata.org/#SELECT%20%28COUNT%28%3Fitem%29%20AS%20%3Fcount%29%20%23%20%3FitemLabel%0AWHERE%20{%0A%20%20%3Fitem%20wdt%3AP31%2Fwdt%3AP279*%20wd%3A{{{P31|}}}.%0A%20%20SERVICE%20wikibase%3Alabel%20{%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22%20}%0A}%0A
|#default=https://query.wikidata.org/#SELECT%20%3Fitem%20%3FitemLabel%0AWHERE%20{%0A%20%20%3Fitem%20wdt%3AP31%2Fwdt%3AP279*%20wd%3A{{{P31|}}}.%0A%20%20SERVICE%20wikibase%3Alabel%20{%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22%20}%0A}%0A
}} {{formatnum:{{{wikidata|}}}}}]'''|&lt;!--
--&gt;{{#if:{{{P1435|}}}|'''[{{#switch:{{{format|}}}
|count=https://query.wikidata.org/#SELECT%20%28COUNT%28%3Fitem%29%20AS%20%3Fcount%29%20%23%20%3FitemLabel%0AWHERE%20%7B%0A%20%20%3Fitem%20wdt%3AP1435%20wd%3A{{{P1435}}}.%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22%20%7D%0A%7D%0A
|#default=https://query.wikidata.org/#SELECT%20%3Fitem%20%3FitemLabel%0AWHERE%20%7B%0A%20%20%3Fitem%20wdt%3AP1435%20wd%3A{{{P1435}}}.%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22en%22%20%7D%0A%7D%0A
}} {{formatnum:{{{wikidata|}}}}}]'''|-}}}}
| style="text-align: center;{{#if:{{{estimate|}}}|padding: 10px 0px 0px 0px;}}" data-sort-value={{#if:{{{estimate|}}}|{{{estimate}}}|{{#if:{{{wikidata|}}}|{{{wikidata}}}|0}}}} | {{#if:{{{estimate|}}}|&lt;div style="margin: 0px 5px 0px 5px;"&gt;{{formatnum:{{{estimate|}}}}}&lt;/div&gt;&lt;div style="position: relative; background-color:gold; width: {{#if:{{{wikidata|}}}|{{#ifexpr:{{{wikidata}}}&gt;={{{estimate}}}|100|{{#expr:floor({{{wikidata}}}/({{{estimate}}}/100))}}}}|0}}%;height: 10px;font-size: 50%;" title="{{#if:{{{wikidata|}}}|{{#ifexpr:{{{wikidata}}}&gt;{{{estimate}}}|&amp;gt;100|{{#expr:floor({{{wikidata}}}/({{{estimate}}}/100))}}}}|0}}% in Wikidata"&gt;{{#if:{{{wikidata|}}}|{{#ifexpr:{{{wikidata}}}&gt;{{{estimate}}}|&gt;100|{{#expr:floor({{{wikidata}}}/({{{estimate}}}/100))}}}}|0}}%&lt;/div&gt;|{{#if:{{{wikidata|}}}|{{grey|{{formatnum:{{{wikidata}}}}}}}|-}}}}</text>
      <sha1>leqvu2tn934jlg4hewz0bzyj6fj2k7h</sha1>
    </revision>
  </page>
  <page>
    <title>User:Emijrp/AHKrowtotal</title>
    <ns>2</ns>
    <id>53120240</id>
    <revision>
      <id>770348843</id>
      <parentid>764254985</parentid>
      <timestamp>2017-03-14T21:46:57Z</timestamp>
      <contributor>
        <username>Emijrp</username>
        <id>363486</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="150">! colspan=2 | Total !! {{#if:{{{wikidata|}}}|{{formatnum:{{{wikidata}}}}}|Unknown}} !! {{#if:{{{estimate|}}}|{{formatnum:{{{estimate}}}}}|Unknown}} !!</text>
      <sha1>dtmia1396d82jr0v6mis089by87dobe</sha1>
    </revision>
  </page>
  <page>
    <title>User:Emijrp/AHKsummaryrow</title>
    <ns>2</ns>
    <id>53502955</id>
    <revision>
      <id>770610734</id>
      <timestamp>2017-03-16T14:09:15Z</timestamp>
      <contributor>
        <username>Emijrp</username>
        <id>363486</id>
      </contributor>
      <comment>[[WP:AES|←]]Created page with '| style="text-align: center;" data-sort-value={{{wikidata|}}} | {{formatnum:{{{wikidata|}}}}} | style="text-align: center;{{#if:{{{estimate|}}}|padding: 10px 0px...'</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="934">| style="text-align: center;" data-sort-value={{{wikidata|}}} | {{formatnum:{{{wikidata|}}}}}
| style="text-align: center;{{#if:{{{estimate|}}}|padding: 10px 0px 0px 0px;}}" data-sort-value={{#if:{{{estimate|}}}|{{{estimate}}}|{{#if:{{{wikidata|}}}|{{{wikidata}}}|0}}}} | {{#if:{{{estimate|}}}|&lt;div style="margin: 0px 5px 0px 5px;"&gt;{{formatnum:{{{estimate|}}}}}&lt;/div&gt;&lt;div style="position: relative; background-color:gold; width: {{#if:{{{wikidata|}}}|{{#ifexpr:{{{wikidata}}}&gt;={{{estimate}}}|100|{{#expr:floor({{{wikidata}}}/({{{estimate}}}/100))}}}}|0}}%;height: 10px;font-size: 50%;" title="{{#if:{{{wikidata|}}}|{{#ifexpr:{{{wikidata}}}&gt;{{{estimate}}}|&amp;gt;100|{{#expr:floor({{{wikidata}}}/({{{estimate}}}/100))}}}}|0}}% in Wikidata"&gt;{{#if:{{{wikidata|}}}|{{#ifexpr:{{{wikidata}}}&gt;{{{estimate}}}|&gt;100|{{#expr:floor({{{wikidata}}}/({{{estimate}}}/100))}}}}|0}}%&lt;/div&gt;|{{#if:{{{wikidata|}}}|{{grey|{{formatnum:{{{wikidata}}}}}}}|-}}}}</text>
      <sha1>6rks7y8q1zpxbb69uzqs3autjiltqh4</sha1>
    </revision>
  </page>
  <page>
    <title>User:Emijrp/AHKsummarytotal</title>
    <ns>2</ns>
    <id>53502961</id>
    <revision>
      <id>770806492</id>
      <parentid>770623676</parentid>
      <timestamp>2017-03-17T18:14:09Z</timestamp>
      <contributor>
        <username>Emijrp</username>
        <id>363486</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="150">! colspan=2 | Total !! {{#if:{{{wikidata|}}}|{{formatnum:{{{wikidata}}}}}|Unknown}} !! {{#if:{{{estimate|}}}|{{formatnum:{{{estimate}}}}}|Unknown}} !!</text>
      <sha1>dtmia1396d82jr0v6mis089by87dobe</sha1>
    </revision>
  </page>
  <page>
    <title>User:Emijrp/All Human Knowledge/navbox</title>
    <ns>2</ns>
    <id>40150312</id>
    <revision>
      <id>770669162</id>
      <parentid>770666970</parentid>
      <timestamp>2017-03-16T21:20:26Z</timestamp>
      <contributor>
        <username>Emijrp</username>
        <id>363486</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="910">{{anchor|ahknavbox}}{{Navbox
| name  = User:Emijrp/All Human Knowledge/navbox
| title = [[User:Emijrp/All Human Knowledge|All Human Knowledge]]
| listclass = hlist
| state = expanded 

| group1 = 
| list1 = 
* [[User:Emijrp/All Human Knowledge#Arts|Arts]]
* [[User:Emijrp/All Human Knowledge#Geography|Geography]]
* [[User:Emijrp/All Human Knowledge#History|History]]
* [[User:Emijrp/All Human Knowledge#GLAM|GLAM]]
* [[User:Emijrp/All Human Knowledge#Science|Science]]
* [[User:Emijrp/All Human Knowledge#Society|Society]]
* [[User:Emijrp/All Human Knowledge#Technology|Technology]]

| group2 =
| list2 = 
* [[User:Emijrp/All Human Knowledge#Summary|Summary]]
* [[User:Emijrp/All Human Knowledge#Further_knowledge|Further knowledge]]
* [[Wikipedia:There is a deadline|There is a deadline]]
* [[User:Emijrp/Wikipedia Archive|Wikipedia Archive]]
* [[User:Emijrp/Wikipedia to the Moon|Wikipedia to the Moon]]

}}</text>
      <sha1>ewh6qrugkk8kfjsh6wtvve92vydi347</sha1>
    </revision>
  </page>
  <page>
    <title>User:Emijrp/All human knowledge/end</title>
    <ns>2</ns>
    <id>39501559</id>
    <revision>
      <id>567098773</id>
      <parentid>567098518</parentid>
      <timestamp>2013-08-04T10:56:17Z</timestamp>
      <contributor>
        <username>Emijrp</username>
        <id>363486</id>
      </contributor>
      <comment>[[WP:AES|←]]Replaced content with '{{User:Emijrp/All human knowledge/navbox}}&lt;includeonly&gt;{{nobots}} [[Category:Wikipedia missing topics]] [[Category:Wikipedia red link lists]]&lt;/includeonly&gt;'</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="155">{{User:Emijrp/All human knowledge/navbox}}&lt;includeonly&gt;{{nobots}}
[[Category:Wikipedia missing topics]]
[[Category:Wikipedia red link lists]]&lt;/includeonly&gt;</text>
      <sha1>b88govyy8i6dkdv5rqvs0gsva7b0mig</sha1>
    </revision>
  </page>
  <page>
    <title>User:Emijrp/All human knowledge/navbox</title>
    <ns>2</ns>
    <id>53506103</id>
    <redirect title="User:Emijrp/All Human Knowledge/navbox" />
    <revision>
      <id>770661773</id>
      <timestamp>2017-03-16T20:26:27Z</timestamp>
      <contributor>
        <username>Emijrp</username>
        <id>363486</id>
      </contributor>
      <comment>Emijrp moved page [[User:Emijrp/All human knowledge/navbox]] to [[User:Emijrp/All Human Knowledge/navbox]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="69">#REDIRECT [[User:Emijrp/All Human Knowledge/navbox]]

{{R from move}}</text>
      <sha1>3q4ryl74whs72z336m107wjk88s0svh</sha1>
    </revision>
  </page>
  <page>
    <title>Template:-</title>
    <ns>10</ns>
    <id>1011446</id>
    <redirect title="Template:Clear" />
    <revision>
      <id>769942854</id>
      <parentid>769932535</parentid>
      <timestamp>2017-03-12T14:41:31Z</timestamp>
      <contributor>
        <username>Paine Ellsworth</username>
        <id>9092818</id>
      </contributor>
      <comment>add [[WP:RCAT|rcat]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="112">#REDIRECT [[Template:Clear]]

{{Redirect category shell|
{{R from modification}}
{{R from template shortcut}}
}}</text>
      <sha1>7ftw22ju220o4mhfryrhdhdanb4vzun</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Anchor</title>
    <ns>10</ns>
    <id>2236346</id>
    <revision>
      <id>629642299</id>
      <parentid>586910254</parentid>
      <timestamp>2014-10-14T23:35:24Z</timestamp>
      <contributor>
        <username>Frietjes</username>
        <id>13791031</id>
      </contributor>
      <comment>add {{{|safesubst:}}} per talk</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="157">{{{{{|safesubst:}}}#invoke:anchor|main}}&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>cjfgfxc6tpjgpyvzhnbfkngu6u3spzc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:As of</title>
    <ns>10</ns>
    <id>16011254</id>
    <revision>
      <id>890110284</id>
      <parentid>821852440</parentid>
      <timestamp>2019-03-30T04:25:22Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2299">&lt;!--{{As of}} begin--&gt;&lt;includeonly&gt;&lt;!--

## param 1 is the year
## optional param 2 is the month
## optional param 3 is the day of the month
## optional named parameter alt=[text] is alternative display text (may include wiki markup)
## optional named parameter df=US produces American date format in displayed text
## optional named parameter lc=on gives lower-case-first output
## optional named parameter url=[URL] gives statement reference

## displayed text ([A/a]s of [Start date] by default)
--&gt;{{#if: {{{alt|}}} | {{{alt}}} | {{#if:{{{since|}}}|{{#ifeq: {{{lc}}} | {{{lc|}}} | s | S }}ince | {{#ifeq: {{{lc}}} | {{{lc|}}} | a | A }}s of}} {{#if:{{{pre|}}}|{{{pre}}}&amp;#32;}}{{#if: {{{3|}}} | {{#ifeq:{{lc:{{{df|}}}}}|us|{{MONTHNAME|{{{2}}}}}&amp;nbsp;{{#expr:{{{3}}}}},&amp;#32;|{{#expr:{{{3}}}}}&amp;nbsp;{{MONTHNAME|{{{2}}}}}&amp;nbsp;}}{{{1}}}|{{#if: {{{2|}}} |{{MONTHNAME|{{{2}}}}}&amp;nbsp;}}{{{1}}}}}}}{{#if:{{{post|}}}|&lt;nowiki /&gt;{{{post}}}}}&lt;!--
#### That nowiki is required or, various characters (:, ;, #, and *} will be parsed as wikisyntax for list items.
## ref/update inline banner (hidden by default)
--&gt;&lt;sup class="plainlinks noexcerpt noprint asof-tag {{#if:{{{url|}}}|ref|update}}" style="display:none;"&gt;[{{#if:{{{url|}}}|{{{url}}} &amp;#91;ref&amp;#93;|{{fullurl:{{PAGENAME}}|action=edit}} &amp;#91;update&amp;#93;}}]&lt;/sup&gt;&lt;!--

## categorisation disabled outside main namespace
--&gt;{{DMCA|Articles containing potentially dated statements|from|&lt;!--

## temporal category for template (word method)
--&gt;{{#if: {{#ifexpr: {{{1}}} = 1 }} | {{#ifexpr: {{#time:Y|{{{1}}}}} &gt; 2004 | {{{1}}} | {{#ifexpr: {{#time:Y|{{{1}}}}} &gt; 1989 | {{#time:Y|{{{1}}}}} | before 1990 }}}} | &lt;!--

## temporal category for template (parameter method)
--&gt;{{#ifexpr: {{{1}}} &gt; 2004 | {{#if:{{{2|}}} | {{MONTHNAME|{{{2}}}}} }} {{{1}}} | {{#ifexpr:{{{1}}} &gt; 1989 | {{{1}}} | before 1990 }}}}}}|&lt;!--

## global category for template
--&gt;All articles containing potentially dated statements}}&lt;/includeonly&gt;&lt;!--{{As of}} end--&gt;&lt;noinclude&gt;&lt;!-- 

## dynamic example (as of today, self ref)

--&gt;{{As of|{{CURRENTYEAR}}|{{CURRENTMONTH}}|{{CURRENTDAY}}}}&lt;sup class="plainlinks"&gt;[https://en.wikipedia.org/wiki/Template:As_of &amp;#91;ref&amp;#93;]&lt;/sup&gt;

{{documentation}}

&lt;!-- Add categories and inter-wikis to the /doc subpage, not here! --&gt; 

&lt;/noinclude&gt;</text>
      <sha1>o3vp7nxdu9qzd56niljzf79a9qke132</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Bots</title>
    <ns>10</ns>
    <id>19620337</id>
    <revision>
      <id>884948136</id>
      <parentid>882608858</parentid>
      <timestamp>2019-02-25T00:59:10Z</timestamp>
      <contributor>
        <username>JJMC89</username>
        <id>24812038</id>
      </contributor>
      <comment>Replace [[Module:Bots]] per TfD</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="170">{{#if:{{#invoke:String|match|{{{optout}}}|MassMessage|ignore_errors=1}}|[[Category:Wikipedians who opt out of message delivery]]}}&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>tumq6m7ne2n7kp4e247jvyuev2aogcc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Catalog lookup link</title>
    <ns>10</ns>
    <id>50392128</id>
    <revision>
      <id>862301591</id>
      <parentid>855471681</parentid>
      <timestamp>2018-10-03T13:51:48Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>Undid revision 855471681 by [[Special:Contributions/Trappist the monk|Trappist the monk]] ([[User talk:Trappist the monk|talk]]) restore the change now that the cs1|2 modules have been updated;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="133">&lt;templatestyles src="Module:Citation/CS1/styles.css" /&gt;{{#invoke:Catalog lookup link|main}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>464h1jyus0m20p4x31lf2k2pqgseen5</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Category handler</title>
    <ns>10</ns>
    <id>25084818</id>
    <revision>
      <id>874046584</id>
      <parentid>577959188</parentid>
      <timestamp>2018-12-16T20:13:00Z</timestamp>
      <contributor>
        <username>Amorymeltzer</username>
        <id>141948</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Category handler]]": [[WP:High-risk templates|Highly visible template]] ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="148">{{#invoke:Category handler|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories to the /doc subpage, and interwikis to Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>og6fhyj2ssd4fmzpqzuodk12q3cms0z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Category see also</title>
    <ns>10</ns>
    <id>5955472</id>
    <revision>
      <id>838689373</id>
      <parentid>822579262</parentid>
      <timestamp>2018-04-28T17:31:03Z</timestamp>
      <contributor>
        <username>BrownHairedGirl</username>
        <id>754619</id>
      </contributor>
      <comment>use [[Template:Category see also/Category pair check]], as tested in sandbox</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="153">&lt;includeonly&gt;{{#invoke:Category see also|main}}{{Category see also/Category pair check|{{{1|}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>2fhno4da2131p25wgalditkdt9k52zs</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Category see also/Category pair check</title>
    <ns>10</ns>
    <id>57263975</id>
    <revision>
      <id>872445690</id>
      <parentid>872445685</parentid>
      <timestamp>2018-12-07T07:07:34Z</timestamp>
      <contributor>
        <username>Mifter</username>
        <id>6362721</id>
      </contributor>
      <comment>Adding {{pp-template}} ([[WP:TW|TW]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1205">&lt;noinclude&gt;{{pp-template|small=yes}}&lt;/noinclude&gt;&lt;includeonly&gt;{{#ifeq: {{NAMESPACE}} | Category |&lt;!--
 --&gt;{{#if: {{#invoke:String|match|{{BASEPAGENAME}}|%d+[snrt][tdh]%-century.+$|ignore_errors=true}}&lt;!--
    --&gt;|&lt;!-- it's on a century category
        --&gt;{{#if: {{#invoke:String|match|{{{1|}}}|{{#invoke:String|match|{{BASEPAGENAME}}|-century.+$|ignore_errors=true}}|ignore_errors=true|plain=true}}&lt;!--
            --&gt;|&lt;!-- the link is to a similar century category
                --&gt;[[Category:Template Category see also used when Template Category pair probably should be]]&lt;!--
        --&gt;}}&lt;!--
    --&gt;}}&lt;!--
--&gt;}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{doc|content=
Check whether [[Template:Category see also]] has been used when [[Template:Category pair]] probably should be use.

The test is:
#Is this page in the Category namespace?
#Does this page's title end in "nn(st|nd|rd|th))-century something"
#does the first linked cat's title end in the same "-century something" as the title of the page it is used on?

If the answer to all 3 is yes, then categorise the page in the hidden tracking category [[:Category:Template Category see also used when Template Category pair probably should be]]
}}&lt;/noinclude&gt;</text>
      <sha1>ptliehx5sts0zxq5v6zuyco7ehvw8xt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite book</title>
    <ns>10</ns>
    <id>4086375</id>
    <revision>
      <id>810449908</id>
      <parentid>810433573</parentid>
      <timestamp>2017-11-15T09:11:45Z</timestamp>
      <contributor>
        <username>Salix alba</username>
        <id>212526</id>
      </contributor>
      <comment>put TD in a collapse top / bottom section</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="200">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=book
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
{{collapse top|TemplateData}}
{{Cite book/TemplateData}}
{{collapse bottom}}
&lt;/noinclude&gt;</text>
      <sha1>my4yy07itdv4e2t5sc1x4l3pzgpmzo7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite encyclopedia</title>
    <ns>10</ns>
    <id>1664277</id>
    <revision>
      <id>690395481</id>
      <parentid>579832446</parentid>
      <timestamp>2015-11-13T02:17:24Z</timestamp>
      <contributor>
        <username>Fuhghettaboutit</username>
        <id>665998</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Cite encyclopedia: when I changed this to add template editors, I didn't realize it had cascding protection—so all my change did was make it appear as if it could be edited by them ([Edit=Allow only administrators...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="166">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=encyclopaedia
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}

[[Category:Lua-based templates]]
&lt;/noinclude&gt;</text>
      <sha1>jdzpxvlfcwjuua45ovk7i5lcp6qre48</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite journal</title>
    <ns>10</ns>
    <id>4740319</id>
    <revision>
      <id>690395473</id>
      <parentid>579832342</parentid>
      <timestamp>2015-11-13T02:17:24Z</timestamp>
      <contributor>
        <username>Fuhghettaboutit</username>
        <id>665998</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Cite journal: when I changed this to add template editors, I didn't realize it had cascding protection—so all my change did was make it appear as if it could be edited by them ([Edit=Allow only administrators] (in...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="126">&lt;includeonly&gt;{{#invoke:Citation/CS1|citation
|CitationClass=journal
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>9fcytsszanq7xbwi3p28zsneear9938</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite news</title>
    <ns>10</ns>
    <id>4321630</id>
    <revision>
      <id>828626614</id>
      <parentid>828404709</parentid>
      <timestamp>2018-03-03T19:19:37Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <comment>Per edit request on [[Help talk:Citation Style 1]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="123">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=news
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>pbjnspfej5gxihr9izxrzkow3f1uf3i</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite web</title>
    <ns>10</ns>
    <id>1252907</id>
    <revision>
      <id>753103437</id>
      <parentid>753063659</parentid>
      <timestamp>2016-12-05T05:36:52Z</timestamp>
      <contributor>
        <username>Anthony Appleyard</username>
        <id>119438</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Cite web]]": restore old protection ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="122">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=web
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>rcgmbcxu7hvs583g1f3rzz4c4dkizda</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Clear</title>
    <ns>10</ns>
    <id>1239772</id>
    <revision>
      <id>684162145</id>
      <parentid>683948339</parentid>
      <timestamp>2015-10-04T23:53:36Z</timestamp>
      <contributor>
        <username>Nyttend</username>
        <id>1960810</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Clear: Enable access by template editors; NeilN is okay with this move ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="81">&lt;div style="clear:{{{1|both}}};"&gt;&lt;/div&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>6mk3e4afot6hzu6tzbljxxk83e14xv6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Column-width</title>
    <ns>10</ns>
    <id>29216399</id>
    <revision>
      <id>638540885</id>
      <parentid>579832996</parentid>
      <timestamp>2014-12-17T20:09:33Z</timestamp>
      <contributor>
        <username>Edokter</username>
        <id>1624037</id>
      </contributor>
      <minor/>
      <comment>redundant</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="165">&lt;includeonly&gt;-moz-column-width: {{{1|30em}}}; -webkit-column-width: {{{1|30em}}}; column-width: {{{1|30em}}};&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>sum88q311kc02222mb4cgzbikcx7fqy</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Convert</title>
    <ns>10</ns>
    <id>8387047</id>
    <revision>
      <id>585529792</id>
      <parentid>577834328</parentid>
      <timestamp>2013-12-11T02:15:54Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>Upgrade to Lua module;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="116">&lt;includeonly&gt;{{{{{♥|safesubst:}}}#invoke:convert|convert}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>81befqhh89lu562bonqr8252bepuvfp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Afghanistan</title>
    <ns>10</ns>
    <id>8894275</id>
    <revision>
      <id>878744353</id>
      <parentid>846365106</parentid>
      <timestamp>2019-01-16T18:15:27Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Changed variants per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2173">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Afghanistan
| flag alias = Flag of Afghanistan.svg
| flag alias-1880 = Flag of Afghanistan (1880–1901).svg
| flag alias-1901 = Flag of Afghanistan (1901–1919).svg
| flag alias-1919 = Flag of Afghanistan (1919–1921).svg
| flag alias-1926 = Flag of Afghanistan (1926–1928).svg
| flag alias-1928a = Flag of Afghanistan (1928).svg
| flag alias-1928 = Flag of Afghanistan (1928–1929).svg
| flag alias-1929a = Flag of Afghanistan (1929).svg
| flag alias-1929 = Flag of Afghanistan (1929–1931).svg
| flag alias-1930 = Flag of Afghanistan (1931–1973).svg
| flag alias-1973 = Flag of Afghanistan (1973–1974).svg
| flag alias-1974 = Flag of Afghanistan (1974–1978).svg
| flag alias-1978a = Flag of Afghanistan (1978).svg
| flag alias-1978 = Flag of Afghanistan (1978–1980).svg
| flag alias-1980 = Flag of Afghanistan (1980–1987).svg
| flag alias-1987 = Flag of Afghanistan (1987–1992).svg
| flag alias-1992a = Flag of Afghanistan (1992).svg
| flag alias-1992 = Flag of Afghanistan (1992–2001).svg
| flag alias-1996 = Flag of Taliban (original).svg
| flag alias-1997 = Flag of Taliban.svg
| flag alias-2001 = Flag of Afghanistan (2001–2002).svg
| flag alias-2002 = Flag of Afghanistan (2002–2004).svg
| flag alias-2004 = Flag of Afghanistan (2004–2013).svg
| flag alias-2013 = Flag of Afghanistan.svg
| flag alias-Taliban = Flag of Taliban.svg
| link alias-army = Afghan National Army
| flag alias-naval=Flag of the Afghan National Police (English).svg
| link alias-naval = Afghan National Police
| flag alias-air force=Flag of the Afghan Air Force.svg
| link alias-air force = Afghan Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1880
| var2 = 1901
| var3 = 1919
| var4 = 1926
| var5 = 1928a
| var6 = 1928
| var7 = 1929a
| var8 = 1929
| var9 = 1930
| var10 = 1973
| var11 = 1974
| var12 = 1978
| var13 = 1978a
| var14 = 1980
| var15 = 1987
| var16 = 1992a
| var17 = 1992
| var18 = 1996
| var19 = 1997
| var20 = 2001
| var21 = 2002
| var22 = 2004
| var23 = 2013
| var24 = Taliban
| redir1 = AFG
&lt;/noinclude&gt;
}}</text>
      <sha1>q9qi010pmi1wnemi1naqmwzibwj7vys</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Albania</title>
    <ns>10</ns>
    <id>8872386</id>
    <revision>
      <id>897902546</id>
      <parentid>897828509</parentid>
      <timestamp>2019-05-20T02:39:43Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <comment>adding flags (TPER)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1395">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Albania
| flag alias = Flag of Albania.svg
| flag alias-1914 = Flag of Albania (1914–1920).svg
| flag alias-1914a= Regentaschapalbanievlag.gif
| flag alias-1920 = Flag of Albania (1920–1926).svg
| flag alias-1926 = Flag of Albania (1926–1928).svg
| flag alias-1928 = Flag of Albania (1934–1939).svg
| flag alias-1939 = Flag of Albania (1939–1943).svg
| flag alias-1943 = Flag of Albania (1943–1944).svg
| flag alias-1944 = Flag of Albania 1944.svg
| flag alias-1946 = Flag of Albania (1946–1992).svg
| flag alias-1992 = Flag of Albania (1992–2002).svg
| flag alias-civil = Civil Ensign of Albania.svg
| flag alias-naval = Naval Ensign of Albania.svg
| link alias-naval = Albanian Naval Force
| link alias-army = Albanian Land Force
| flag alias-army=Albanian Land Forces insignia.svg
| border-army=
| flag alias-air force=Albanian Air Forces insignia.svg
| link alias-air force=Albanian Air Force
| border-air force=
| flag alias-navy=Albanian Naval Forces insignia.svg
| link alias-navy=Albanian Naval Force
| border-navy=
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = civil
| var2 = 1914
| var3 = 1914a
| var4 = 1920
| var5 = 1926
| var6 = 1928
| var7 = 1939
| var8 = 1943
| var9 = 1944
| var10= 1946
| var11= 1992
| redir1 = ALB
&lt;/noinclude&gt;
}}</text>
      <sha1>echgelvpbn6aw68bdzfxpbobvgtmwbf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Algeria</title>
    <ns>10</ns>
    <id>8894350</id>
    <revision>
      <id>848820023</id>
      <parentid>796076924</parentid>
      <timestamp>2018-07-04T15:08:46Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="598">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Algeria
| flag alias = Flag of Algeria.svg
| flag alias-1830 = Flag of France (1794-1815).svg
| flag alias-1958 = Flag of Algeria (1958-1962).svg
| flag alias-1962 = Flag of Algeria (WFB 2004).gif
| flag alias-naval = Naval Ensign of Algeria.svg
| link alias-naval = Algerian National Navy
| link alias-army = Algerian People's National Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1830
| var2 = 1958
| var3 = 1962
| redir1 = DZA
| redir2 = ALG
&lt;/noinclude&gt;
}}</text>
      <sha1>i9bcuy1jri9g7js8lirhqis2k6ten02</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Andorra</title>
    <ns>10</ns>
    <id>8894403</id>
    <revision>
      <id>792914383</id>
      <parentid>610080781</parentid>
      <timestamp>2017-07-29T15:01:48Z</timestamp>
      <contributor>
        <username>Sodacan</username>
        <id>8272776</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="301">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Andorra
| flag alias = Flag of Andorra.svg
| flag alias-1806 = Flag of Andorra 1806.svg
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| var1 = 1806
| redir1 = AND
&lt;/noinclude&gt;
}}</text>
      <sha1>2sdsyg24zoouqfg7fnzxjx85q9is2cj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Angola</title>
    <ns>10</ns>
    <id>8894431</id>
    <revision>
      <id>848925040</id>
      <parentid>577610544</parentid>
      <timestamp>2018-07-05T08:38:14Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="295">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Angola
| flag alias = Flag of Angola.svg
| link alias-naval = Angolan Navy
| link alias-army = Angolan Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = AGO
| redir2 = ANG
&lt;/noinclude&gt;
}}</text>
      <sha1>r1i48fhpjtc78wb2rb0uy15vl69qho3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Antarctica</title>
    <ns>10</ns>
    <id>8894511</id>
    <revision>
      <id>577610531</id>
      <parentid>177483265</parentid>
      <timestamp>2013-10-17T19:03:24Z</timestamp>
      <contributor>
        <username>Courcelles</username>
        <id>1004750</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Antarctica: Not quite high-risk enough now that we have a trusted template editor right. ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="285">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Antarctica
| flag alias = Flag of Antarctica.svg
| flag alias-alt  = Flag of Antarctica (Smith).svg
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = alt
| redir1 = ATA
&lt;/noinclude&gt;
}}</text>
      <sha1>4fv28buq8t46w5sfjyq85eple6o3xme</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Antigua and Barbuda</title>
    <ns>10</ns>
    <id>8894525</id>
    <revision>
      <id>846885722</id>
      <parentid>793188238</parentid>
      <timestamp>2018-06-21T13:38:18Z</timestamp>
      <contributor>
        <username>RexxS</username>
        <id>6112901</id>
      </contributor>
      <comment>more specific display for navy</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="483">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Antigua and Barbuda
| flag alias = Flag of Antigua and Barbuda.svg
| flag alias-colonial = Colonial ensigns of Antigua and Barbuda (1956-1962).svg
| flag alias-naval = Coastguard Ensign of Antigua and Barbuda.svg
| link alias-naval = Antigua and Barbuda Coast Guard
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| redir1 = ATG
&lt;/noinclude&gt;
}}</text>
      <sha1>o9iag7iros1fc8ztzaa9ussw1jc2quz</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Argentina</title>
    <ns>10</ns>
    <id>8894556</id>
    <revision>
      <id>879877166</id>
      <parentid>848820176</parentid>
      <timestamp>2019-01-23T23:34:20Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1256">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Argentina
| flag alias = Flag of Argentina.svg
| flag alias-alt  = Flag of Argentina (alternative).svg
| flag alias-1812 = Flag of Belgrano (1812).svg
| flag alias-1816 = Flag of Argentina (alternative).svg
| flag alias-1818 = Flag of Argentina.svg
| flag alias-1819 = Flag of Argentina (1818).svg
| flag alias-1820 = Flag of Argentina.svg
| flag alias-1829 = Flag of Liga Federal.svg
| flag alias-1835 = Flag of Argentina (1840).svg
| flag alias-1850 = Flag of the Argentine Confederation.svg
| flag alias-1861 = Flag of Argentina.svg
| link alias-naval = {{#ifeq:{{{variant|}}}|coast guard|Argentine Naval Prefecture|Argentine Navy}}
| link alias-coast guard = Argentine Naval Prefecture
| flag alias-marines = Naval Jack of Argentina.svg
| link alias-marines = Argentine Naval Infantry Command
| flag alias-army = Flag of Argentina (3-2).svg
| link alias-army = Argentine Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = alt
| var2 = 1812
| var3 = 1816
| var4 = 1818
| var5 = 1819
| var6 = 1820
| var7 = 1829
| var8 = 1835
| var9 = 1850
| var10 = 1861
| redir1 = ARG
| related1 = Argentine Confederation
&lt;/noinclude&gt;
}}</text>
      <sha1>d7gk2jmnnwsj51diq7h3i83w21de0tv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Armenia</title>
    <ns>10</ns>
    <id>8894572</id>
    <revision>
      <id>775915736</id>
      <parentid>578235260</parentid>
      <timestamp>2017-04-17T20:59:34Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_the_Democratic_Republic_of_Armenia.svg with [[File:Flag_of_the_First_Republic_of_Armenia.svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: [[:c:COM:FR#reasons|File renaming criterion #3]]: To</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="344">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Armenia
| flag alias = Flag of Armenia.svg
| flag alias-1918 = Flag of the First Republic of Armenia.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1918
| redir1 = ARM
| related1 = Armenian SSR
&lt;/noinclude&gt;
}}</text>
      <sha1>hxakhrvoy1n5tz4npx3lzbx1jzq432p</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Aruba</title>
    <ns>10</ns>
    <id>8894608</id>
    <revision>
      <id>577610451</id>
      <parentid>177485022</parentid>
      <timestamp>2013-10-17T19:02:45Z</timestamp>
      <contributor>
        <username>Courcelles</username>
        <id>1004750</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Aruba: Not quite high-risk enough now that we have a trusted template editor right. ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="226">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Aruba
| flag alias = Flag of Aruba.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = ABW
| redir2 = ARU
&lt;/noinclude&gt;
}}</text>
      <sha1>giyophkl14aq815gggpa8fvolcnulo4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Australia</title>
    <ns>10</ns>
    <id>8894633</id>
    <revision>
      <id>882140895</id>
      <parentid>878003628</parentid>
      <timestamp>2019-02-07T02:41:12Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1230">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Australia
| flag alias = Flag of Australia (converted).svg
| flag alias-1901 = Flag of Australia (1901-1903).svg
| flag alias-1903 = Flag of Australia (1903-1908).svg
| flag alias-union = Flag of the United Kingdom.svg
| flag alias-colonial = Australian Colonial Flag.svg
| flag alias-civil = Civil Ensign of Australia.svg
| flag alias-naval = Naval Ensign of Australia.svg
| flag alias-naval-1913 = Naval Ensign of the United Kingdom.svg
| link alias-naval = Royal Australian Navy
| link alias-army = Australian Army
| flag alias-air force = Air Force Ensign of Australia.svg
| link alias-air force = Royal Australian Air Force
| link alias-basketball = Australia {{{mw|men's}}} national {{{age|}}} basketball team
| link alias-football = Australia {{{mw|}}} national {{{age|}}} soccer team
| flag alias-marines=INF1002 - UCP - 2RAR.png
| link alias-marines=2nd Battalion, Royal Australian Regiment
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1901
| var2 = 1903
| var3 = colonial
| var4 = civil
| var5 = naval-1913
| redir1 = AUS
| related1 = Australasia
&lt;/noinclude&gt;
}}</text>
      <sha1>l4lxokzeifaogu9675c8ckk10qlysie</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Austria</title>
    <ns>10</ns>
    <id>8872494</id>
    <revision>
      <id>816368366</id>
      <parentid>816368315</parentid>
      <timestamp>2017-12-20T22:27:11Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="812">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Austria
| flag alias = Flag of Austria.svg
| flag alias-empire = Flag of the Habsburg Monarchy.svg
| flag alias-state = Flag of Austria (state).svg
| flag alias-war  = Austria-Hungary-flag-1869-1914-naval-1786-1869-merchant.svg
| flag alias-army = Flag of Austria (state).svg
| flag alias-air force = Flag of Austria (state).svg
| link alias-army = Austrian Land Forces
| flag alias-naval = Flag of Austria (state).svg
| link alias-naval = Austrian Federal Police
| link alias-air force = Austrian Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = empire
| var2 = state
| var3 = war
| redir1 = AUT
| redir2 = Archduchy of Austria
| related1 = Austria-Hungary
&lt;/noinclude&gt;
}}</text>
      <sha1>3vrz2bka3yirvg1fxiznzyrtihucxid</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Azerbaijan</title>
    <ns>10</ns>
    <id>8894653</id>
    <revision>
      <id>848822070</id>
      <parentid>578186213</parentid>
      <timestamp>2018-07-04T15:29:55Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="540">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Azerbaijan
| flag alias = Flag of Azerbaijan.svg
| flag alias-1918 = Flag of the Democratic Republic of Azerbaijan.svg
| flag alias-naval = Naval Flag of Azerbaijan.svg
| link alias-naval = Azerbaijani Navy
| flag alias-army = Army Flag of Azerbaijan.png
| link alias-army = Azerbaijani Land Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1918
| redir1 = AZE
| related1 = Azerbaijan SSR
&lt;/noinclude&gt;
}}</text>
      <sha1>hgy6ffg9synwxwjdlsroq9ccpchtujv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Bahamas</title>
    <ns>10</ns>
    <id>8900598</id>
    <revision>
      <id>841336163</id>
      <parentid>792915244</parentid>
      <timestamp>2018-05-15T06:47:50Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <comment>Fixing image issue</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="946">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = The Bahamas
| shortname alias = Bahamas
| flag alias = Flag of the Bahamas.svg
| flag alias-colonial = Flag of the Bahamas (1953–1964).svg
| flag alias-1869 = Flag of the Bahamas (1953–1964).svg
| flag alias-1904 = Flag of the Bahamas (1904–1923).svg
| flag alias-1923 = Flag of the Bahamas (1923–1953).svg
| flag alias-1953 = Flag of the Bahamas (1953–1964).svg
| flag alias-army = Flag of the Bahamas.svg
| flag alias-naval = Naval Ensign of the Bahamas.svg
| flag alias-civil = Civil Ensign of the Bahamas.svg
| link alias-army = Royal Bahamas Defence Force
| link alias-naval = Royal Bahamas Defence Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| var2 = 1869
| var3 = 1904
| var4 = 1923
| var5 = 1953
| var6 = civil
| redir1 = BHS
| redir2 = BAH
| redir3 = The Bahamas
&lt;/noinclude&gt;
}}</text>
      <sha1>ril2uepnghuostqm076pm9bojjcosn4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Bahrain</title>
    <ns>10</ns>
    <id>8900608</id>
    <revision>
      <id>848818186</id>
      <parentid>737182323</parentid>
      <timestamp>2018-07-04T14:51:15Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="652">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Bahrain
| flag alias = Flag of Bahrain.svg
| flag alias-old = Flag of Bahrain (before 1820).svg
| flag alias-1820 = Flag of Bahrain (1820-1932).svg
| flag alias-1932 = Flag of Bahrain (1932 to 1972).svg
| flag alias-1972 = Flag of Bahrain (1972-2002).svg
| link alias-naval = Royal Bahrain Naval Force
| flag alias-army = Flag of the Royal Bahraini Army.svg
| link alias-army = Royal Bahraini Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1972
| var2 = 1932
| var3 = 1820
| var4 = old
| redir1 = BHR
&lt;/noinclude&gt;
}}</text>
      <sha1>gx7ujk4rn1nruyftsgkmt62930asctq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Bangladesh</title>
    <ns>10</ns>
    <id>8900652</id>
    <revision>
      <id>868400886</id>
      <parentid>773786461</parentid>
      <timestamp>2018-11-11T23:41:05Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="624">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Bangladesh
| flag alias = Flag of Bangladesh.svg
| flag alias-1971 = Flag of Bangladesh (1971).svg
| flag alias-naval = Naval Ensign of Bangladesh.svg
| flag alias-civil = Civil Ensign of Bangladesh.svg
| flag alias-coast guard=Ensign of the Bangladesh Coast Guard.svg
| flag alias-army = Flag of the Bangladesh Army.svg
| flag alias-air force = Air Force Ensign of Bangladesh.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1971
| var2 = civil
| redir1 = BGD
| redir2 = BAN
&lt;/noinclude&gt;
}}</text>
      <sha1>0kjho9qzgqz4ld4kpdpzkgsglyzua76</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Barbados</title>
    <ns>10</ns>
    <id>8900661</id>
    <revision>
      <id>805281819</id>
      <parentid>617492632</parentid>
      <timestamp>2017-10-14T09:11:42Z</timestamp>
      <contributor>
        <username>Sodacan</username>
        <id>8272776</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="420">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Barbados
| flag alias = Flag of Barbados.svg
| flag alias-1885 = Flag of Barbados (1870–1966).svg
| flag alias-naval = Naval Ensign of Barbados.svg
| link alias-naval = Barbados Coast Guard
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1885
| redir1 = BRB
| redir2 = BAR
&lt;/noinclude&gt;
}}</text>
      <sha1>529twtsj7xkxj5yghh7c4p8gzkqts60</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Belarus</title>
    <ns>10</ns>
    <id>8900669</id>
    <revision>
      <id>638763735</id>
      <parentid>577610313</parentid>
      <timestamp>2014-12-19T10:47:30Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>File renamed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="452">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Belarus
| flag alias = Flag of Belarus.svg
| flag alias-1991 = Flag of Belarus (1918, 1991-1995).svg
| flag alias-1995 = Flag of Belarus (1995-2012).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1991
| var2 = 1995
| redir1 = BLR
| related1 = Byelorussian SSR
| related2 = Belarusian People's Republic
&lt;/noinclude&gt;
}}</text>
      <sha1>kcc9bj57zpz2jtfll60zqyhbjzgb5yx</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Belgium</title>
    <ns>10</ns>
    <id>8873110</id>
    <revision>
      <id>869066668</id>
      <parentid>869066308</parentid>
      <timestamp>2018-11-16T05:15:04Z</timestamp>
      <contributor>
        <username>Jonesey95</username>
        <id>9755426</id>
      </contributor>
      <comment>comment for future editors</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1002">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Belgium
| flag alias = Flag of Belgium (civil).svg &lt;!-- Not the official flag of Belgium, but see talk page for objections to using the state flag as the default --&gt;
| flag alias-government = Government Ensign of Belgium.svg
| flag alias-state = Flag of Belgium.svg&lt;!-- The official flag of Belgium. See talk page for why it is not the default. --&gt;
| flag alias-1830 = Flag of Belgium (1830).svg
| flag alias-1858 = Royal ensign of Belgium (1858).svg
| flag alias-army = Flag of the Belgian Land Component.svg
| link alias-army = Belgian Land Component
| flag alias-naval = Naval Ensign of Belgium.svg
| link alias-naval = Belgian Navy
| flag alias-air force = Air Force Ensign of Belgium.svg
| link alias-air force = Belgian Air Component
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = state
| var2 = government
| var3 = 1830
| var4 = 1858
| redir1 = BEL
&lt;/noinclude&gt;
}}</text>
      <sha1>nv8dasaeqoy7iw2jvt9aolinu3pk5qy</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Belize</title>
    <ns>10</ns>
    <id>8900679</id>
    <revision>
      <id>848840554</id>
      <parentid>577850063</parentid>
      <timestamp>2018-07-04T18:17:20Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="383">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Belize
| flag alias = Flag of Belize.svg
| flag alias-army = Flag of the Belize Defence Force.svg
| link alias-army = Belize Defence Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = BLZ
| redir2 = BIZ
| related1 = British Honduras
&lt;/noinclude&gt;
}}</text>
      <sha1>dlm2el5f5qc926a0bafm843d5anxsx8</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Benin</title>
    <ns>10</ns>
    <id>8900694</id>
    <revision>
      <id>577850069</id>
      <parentid>177486198</parentid>
      <timestamp>2013-10-19T14:48:10Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Benin: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="323">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Benin
| flag alias = Flag of Benin.svg
| flag alias-1975 = Flag of Benin (1975-1990).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1975
| redir1 = BEN
| related1 = Dahomey
&lt;/noinclude&gt;
}}</text>
      <sha1>6s3ugloni9hcci0ql4fd02bqbwtse51</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Bhutan</title>
    <ns>10</ns>
    <id>8901080</id>
    <revision>
      <id>848824807</id>
      <parentid>577850080</parentid>
      <timestamp>2018-07-04T15:56:02Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="473">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Bhutan
| flag alias = Flag of Bhutan.svg
| flag alias-1949 = Flag of Bhutan (1949-1956).svg
| flag alias-1956 = Flag of Bhutan (1956-1969).svg
| flag alias-army = Flag of Royal Bhutan Army.gif
| link alias-army = Royal Bhutan Army
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| var1 = 1949
| var2 = 1956
| redir1 = BTN
| redir2 = BHU
&lt;/noinclude&gt;
}}</text>
      <sha1>gqdcr9kjpkzu3ueem5kb6t2yjrddzjp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Bolivia</title>
    <ns>10</ns>
    <id>8901087</id>
    <revision>
      <id>923239456</id>
      <parentid>868687744</parentid>
      <timestamp>2019-10-27T08:13:24Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>add variants</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="858">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Bolivia
| flag alias = Flag of Bolivia.svg
| flag alias-state = Flag of Bolivia (state).svg
| flag alias-army=Flag of Bolivia (military).svg
| link alias-army=Bolivian Army
| flag alias-air force=Flag of Bolivia (military).svg
| link alias-air force=Bolivian Air Force
| flag alias-naval = Naval Ensign of Bolivia.svg
| link alias-naval = Bolivian Naval Force
| flag alias-military = Flag of Bolivia (military).svg
| link alias-military = Bolivian Armed Forces
| flag alias-football = Flag of Bolivia (state).svg
| flag alias-beach soccer = Flag of Bolivia (state).svg
| flag alias-futsal = Flag of Bolivia (state).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
| altvar = {{{altvar|}}}
&lt;noinclude&gt;
| var1 = state
| redir1 = BOL
&lt;/noinclude&gt;
}}</text>
      <sha1>s5gqkf6wbvg304n5dshu203nbbcocxm</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Bosnia and Herzegovina</title>
    <ns>10</ns>
    <id>8873177</id>
    <revision>
      <id>878869995</id>
      <parentid>848821952</parentid>
      <timestamp>2019-01-17T13:34:43Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Removed WFB flags per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="546">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Bosnia and Herzegovina
| flag alias = Flag of Bosnia and Herzegovina.svg
| flag alias-1992 = Flag of Bosnia and Herzegovina (1992–1998).svg
| link alias-army = Bosnian Ground Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1992
| redir1 = BIH
| redir2 = Bosnia-Herzegovina
| related1 = SR Bosnia and Herzegovina
| related2 = Republika Srpska
| related3 = Federation of Bosnia and Herzegovina
&lt;/noinclude&gt;
}}</text>
      <sha1>ntjomainzs9n1s6sy0ou6wh7dbccfy4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Botswana</title>
    <ns>10</ns>
    <id>8901092</id>
    <revision>
      <id>738541008</id>
      <parentid>738540968</parentid>
      <timestamp>2016-09-09T15:42:53Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="426">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Botswana
| flag alias = Flag of Botswana.svg
| flag alias-air force=Ensign of the Botswana Defence Force Air Wing.svg
| link alias-air force=Botswana Defence Force Air Wing
| variant = {{{variant|}}}
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = BWA
| redir2 = BOT
| related1 = Bechuanaland Protectorate
&lt;/noinclude&gt;
}}</text>
      <sha1>plg9fn7vafrmcmu4wppn2tbuk5xwzal</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Brazil</title>
    <ns>10</ns>
    <id>8869563</id>
    <revision>
      <id>878015794</id>
      <parentid>868051849</parentid>
      <timestamp>2019-01-12T12:23:37Z</timestamp>
      <contributor>
        <username>Cabayi</username>
        <id>6561336</id>
      </contributor>
      <comment>Per [[Special:Permalink/878002926#Template-protected edit request on 7 January 2019|request]] by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1377">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Brazil
| flag alias-1692 = Flag of the Princes of Brazil.svg
| flag alias-1816 = Flag of the United Kingdom of Portugal, Brazil, and the Algarves.svg
| flag alias-1822 = Flag of Brazil (1822–1870).svg
| flag alias-1870 = Flag of Brazil (1870–1889).svg
| flag alias = Flag of Brazil.svg
| flag alias-1889 = Flag of Brazil (1889–1960).svg
| flag alias-1960 = Flag of Brazil (1960–1968).svg
| flag alias-1968 = Flag of Brazil (1968–1992).svg
| flag alias-army = Flag of the Brazilian Army.png
| link alias-army = Brazilian Army
| flag alias-air force = Brazilian Air Force fin flash.svg
| link alias-air force = Brazilian Air Force
| link alias-naval = Brazilian Navy
| flag alias-marines=Flag of the Brazilian Marine Corps.svg
| link alias-marines=Brazilian Marine Corps
| link alias-navy = Brazilian Navy
| flag alias-navy = Flag of the Brazilian Navy.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1692
| var2 = 1816
| var3 = 1822
| var4 = 1870
| var5 = 1889
| var6 = 1960
| var7 = 1968
| redir1 = BRA
| redir2 = Federative Republic of Brazil
| related1 = Empire of Brazil
| related2 = Brazilian military government
| related3 = First Brazilian Republic
| related4 = Second Brazilian Republic
| related5 = Vargas Era
&lt;/noinclude&gt;
}}</text>
      <sha1>c7ezjnpa727orki7ptftglkohw9106l</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Brunei</title>
    <ns>10</ns>
    <id>8901248</id>
    <revision>
      <id>848834066</id>
      <parentid>577850140</parentid>
      <timestamp>2018-07-04T17:19:18Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="534">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Brunei
| flag alias = Flag of Brunei.svg
| flag alias-old = Old Flag of Brunei.svg
| flag alias-1906 = Flag of Brunei 1906-1959.svg
| flag alias-naval = Naval Ensign of Brunei.svg
| link alias-naval = Royal Brunei Navy
| link alias-army = Royal Brunei Land Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = old
| var2 = 1906
| redir1 = BRN
| redir2 = BRU
| redir3 = Brunei Darussalam
&lt;/noinclude&gt;
}}</text>
      <sha1>mzt7e2ycu8d3ex6jc74i9pzz4rrngxc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Bulgaria</title>
    <ns>10</ns>
    <id>8873893</id>
    <revision>
      <id>848820319</id>
      <parentid>615744087</parentid>
      <timestamp>2018-07-04T15:11:40Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="796">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Bulgaria
| flag alias = Flag of Bulgaria.svg
| flag alias-1878 = Flag of Bulgaria.svg
| flag alias-1944 = Flag of the Bulgarian Homeland Front.svg
| flag alias-1946 = Flag of Bulgaria (1948-1967).svg
| flag alias-1967 = Flag of Bulgaria (1967-1971).svg
| flag alias-1971 = Flag of Bulgaria (1971-1990).svg
| flag alias-naval = Naval Ensign of Bulgaria.svg
| link alias-naval = Bulgarian Navy
| flag alias-army = War flag of Bulgaria.svg
| link alias-army = Bulgarian Land Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1878
| var2 = 1944
| var3 = 1946
| var4 = 1967
| var5 = 1971
| redir1 = BGR
| redir2 = BUL
| related1 = Kingdom of Bulgaria
&lt;/noinclude&gt;
}}</text>
      <sha1>rnk72v2271nrr0tw3w353z1x4xfqh7v</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Burkina Faso</title>
    <ns>10</ns>
    <id>8901265</id>
    <revision>
      <id>577850147</id>
      <parentid>177487967</parentid>
      <timestamp>2013-10-19T14:48:55Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Burkina Faso: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="265">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Burkina Faso
| flag alias = Flag of Burkina Faso.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = BFA
| redir2 = BUR
| related1 = Upper Volta
&lt;/noinclude&gt;
}}</text>
      <sha1>pn4aix03ig1gduvlwnk0ibl62rggyj6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Burma</title>
    <ns>10</ns>
    <id>9025797</id>
    <revision>
      <id>714070897</id>
      <parentid>680056034</parentid>
      <timestamp>2016-04-07T13:01:11Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Includeonly code</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="311">&lt;includeonly&gt;{{Country data Myanmar
|1={{{1}}}
|shortname alias={{#if:{{{altlink|}}}|Myanmar|Burma}}
|size={{{size|}}}
|name={{#if:{{{name|}}}|{{{name}}}|{{#if:{{{altlink|}}}|Burma}}}}
|altlink={{{altlink|}}}
|altvar={{{altvar|}}}
|variant={{{variant|}}}
}}&lt;/includeonly&gt;&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>351iy0z0yhfuuy5mt5nqnpldn3anpb2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Burundi</title>
    <ns>10</ns>
    <id>8901272</id>
    <revision>
      <id>916602385</id>
      <parentid>687603666</parentid>
      <timestamp>2019-09-19T18:14:57Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Burundi_(1962-1966).svg with [[File:Flag_of_Burundi_(1962–1966).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: Correct hyphen to dash.).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="376">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Burundi
| flag alias = Flag of Burundi.svg
| flag alias-1962 = Flag of Burundi (1962–1966).svg
| flag alias-1966 = Flag of Burundi (1966-1967).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1962
| var2 = 1966
| redir1 = BDI
&lt;/noinclude&gt;
}}</text>
      <sha1>qq67zmzfjnqtgst3koy1surdg00yu41</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Cambodia</title>
    <ns>10</ns>
    <id>8901290</id>
    <revision>
      <id>848834249</id>
      <parentid>830538332</parentid>
      <timestamp>2018-07-04T17:20:54Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="878">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Cambodia
| flag alias = Flag of Cambodia.svg
| flag alias-1863 = Flag of Cambodia under French protection.svg
| flag alias-1942 = Flag of Cambodia under Japanese occupation.svg
| flag alias-1970 = Flag of the Khmer Republic.svg
| flag alias-1975 = Flag of Democratic Kampuchea.svg
| flag alias-1979 = Flag of the People's Republic of Kampuchea.svg
| flag alias-1989 = Flag of the State of Cambodia.svg
| flag alias-1992 = Flag of Cambodia under UNTAC.svg
| link alias-naval = Royal Cambodian Navy
| link alias-army = Royal Cambodian Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1863
| var2 = 1942
| var3 = 1970
| var4 = 1975
| var5 = 1979
| var6 = 1989
| var7 = 1992
| redir1 = KHM
| redir2 = CAM
| related1 = Khmer Republic
&lt;/noinclude&gt;
}}</text>
      <sha1>7fgd1a23pgasrkxqabyneq4qmrdp92p</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Cameroon</title>
    <ns>10</ns>
    <id>8905160</id>
    <revision>
      <id>581042299</id>
      <parentid>577850362</parentid>
      <timestamp>2013-11-10T14:00:37Z</timestamp>
      <contributor>
        <username>Billinghurst</username>
        <id>3596390</id>
      </contributor>
      <comment>file replacement @ commons</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="374">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Cameroon
| flag alias = Flag of Cameroon.svg
| flag alias-1957 = Flag of Cameroon (1957).svg
| flag alias-1961 = Flag of Cameroon (1961-1975).svg 
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1957
| var2 = 1961
| redir1 = CMR
&lt;/noinclude&gt;
}}</text>
      <sha1>i1xi3nr2nal7hksger83sqtt2njjtcg</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Canada</title>
    <ns>10</ns>
    <id>8905177</id>
    <revision>
      <id>879877003</id>
      <parentid>862816306</parentid>
      <timestamp>2019-01-23T23:32:55Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2675">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Canada
| flag alias = Flag of Canada (Pantone).svg
| flag alias-1867-official = Flag of the United Kingdom.svg
| flag alias-1868 = Canadian Red Ensign (1868–1921).svg
| flag alias-1905 = Canadian Red Ensign (1905–1922).svg
| flag alias-1907 = Canadian Red Ensign (1907–1921).png
| flag alias-1921 = Canadian Red Ensign (1921–1957).svg
| flag alias-1957 = Canadian Red Ensign (1957–1965).svg
| flag alias-1964 = Flag of Canada (1964).svg
| flag alias-1965 = Flag of Canada (WFB 2000).png
| flag alias-2004 = Flag of Canada (WFB 2004).gif
| flag alias-armed forces = Canadian Forces Flag.svg
| link alias-armed forces = Canadian Armed Forces
| flag alias-naval = Naval ensign of Canada; Naval jack of Canada (1968–2013).svg
| link alias-naval = Royal Canadian Navy
| flag alias-naval-1868 = Canadian Blue Ensign (1868–1921).svg
| flag alias-naval-1911 = Naval Ensign of the United Kingdom.svg
| flag alias-naval-1921 = Canadian Blue Ensign (1921–1957).svg
| flag alias-naval-1957 = Canadian Blue Ensign (1957–1965).svg
| flag alias-naval-1965 = Flag of Canada (Pantone).svg
| flag alias-coast guard = Coastguard Flag of Canada.svg
| link alias-coast guard = Canadian Coast Guard
| flag alias-air force = Royal Canadian Air Force ensign.svg
| flag alias-air force-1924 = Ensign of the Royal Canadian Air Force.svg
| link alias-air force = Royal Canadian Air Force
| flag alias-army-1939 = Flag of the Canadian Army (1939–1944).svg
| flag alias-army-1968 = Flag of the Canadian Army (1968–1998).gif
| flag alias-army-1989 = Flag of the Canadian Army (1968–1998).svg
| flag alias-army-2013 = Flag of the Canadian Army (2013–2016).png
| flag alias-army = Flag of the Canadian Army.svg
| link alias-army = Canadian Army
| link alias-football = Canada {{{mw|men's}}} national {{{age|}}} soccer team
| link alias-basketball = Canada {{{mw|men's}}} national {{{age|}}} basketball team
| link alias-field hockey = Canada {{{mw|men's}}} national field hockey team
| flag alias-military=Flag of the Canadian Forces.svg
| link alias-military=Canadian Armed Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1867-official
| var2 = 1868
| var3 = 1905
| var4 = 1907
| var5 = 1921
| var6 = 1957
| var7 = 1964
| var8 = naval-1868
| var9 = naval-1911
| var10 = naval-1921
| var11 = naval-1957
| var12 = naval-1965
| var13 = air force-1924
| var14 = army-1939
| var15 = army-1968
| var16 = army-1989
| var17 = army-2013
| redir1 = CAN
| redir2 = Province of Canada
| redir3 = Dominion of Canada
&lt;/noinclude&gt;
}}</text>
      <sha1>ru6h29udv4x5lksbnepnzde6t1m7u1p</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Cape Verde</title>
    <ns>10</ns>
    <id>8906966</id>
    <revision>
      <id>643668655</id>
      <parentid>588821811</parentid>
      <timestamp>2015-01-22T14:08:37Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Cape_Verde_1975.svg with [[File:Flag_of_Cape_Verde_(1975-1992).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:commons:COM:FR|File renamed]]: usage dates).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="340">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Cape Verde
| flag alias = Flag of Cape Verde.svg
| flag alias-1975 = Flag of Cape Verde (1975-1992).svg 
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1975
| redir1 = CPV
| redir2 = Cabo Verde
&lt;/noinclude&gt;
}}</text>
      <sha1>hxqrn82uaako79urvb45tlqjhvyxdus</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Central African Republic</title>
    <ns>10</ns>
    <id>8909743</id>
    <revision>
      <id>610094471</id>
      <parentid>577850324</parentid>
      <timestamp>2014-05-25T17:26:18Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Removed interwiki that is already on Wikidata</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="268">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Central African Republic
| flag alias = Flag of the Central African Republic.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = CAF
| redir2 = CTA
&lt;/noinclude&gt;
}}</text>
      <sha1>c8huj1z666icyyxt5dnxrf8sjcslwpf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Chad</title>
    <ns>10</ns>
    <id>8909770</id>
    <revision>
      <id>848834510</id>
      <parentid>577850309</parentid>
      <timestamp>2018-07-04T17:23:06Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="336">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Chad
| flag alias = Flag of Chad.svg
| link alias-air force = Chadian Air Force
| link alias-army = Chadian ground forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = TCD
| redir2 = CHA
&lt;/noinclude&gt;
}}</text>
      <sha1>qkdab41etfpm4xsd2u7ep42dmbzghn9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Chile</title>
    <ns>10</ns>
    <id>8909786</id>
    <revision>
      <id>886197540</id>
      <parentid>848821509</parentid>
      <timestamp>2019-03-04T20:00:14Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>air force</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="490">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Chile
| flag alias = Flag of Chile.svg
| flag alias-1812 = Flag of Chile (1812-1814).svg
| flag alias-1817 = Flag of Chile (1817-1818).svg
| link alias-naval = Chilean Navy
| link alias-air force =Chilean Air Force
| link alias-army = Chilean Army
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| var1 = 1812
| var2 = 1817
| redir1 = CHL
| redir2 = CHI
&lt;/noinclude&gt;
}}</text>
      <sha1>l3idynkrz6o9iewnpfnsvja2wvxetd3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data China</title>
    <ns>10</ns>
    <id>9020711</id>
    <revision>
      <id>903972430</id>
      <parentid>903645118</parentid>
      <timestamp>2019-06-29T04:33:08Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>restoring, probably better to discuss the matter at [[WT:FOOTY]] prior to changing the output</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1720">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = China
| flag alias = Flag of the People's Republic of China.svg
| flag alias-1862 = Flag of the Qing Dynasty (1862-1889).svg
| border-1862 =
| flag alias-1889 = Flag of the Qing Dynasty (1889-1912).svg
| flag alias-Qing = Flag of the Qing Dynasty (1889-1912).svg
| flag alias-1912 = Flag of China (1912–1928).svg
| flag alias-1928 = Flag of the Republic of China.svg
| flag alias-military = People's Liberation Army Flag of the People's Republic of China.svg
| link alias-military = People's Liberation Army
| flag alias-coast guard=Flag of China.svg
| link alias-coast guard=China Coast Guard
| flag alias-army = Ground Force Flag of the People's Republic of China.svg
| link alias-army = People's Liberation Army Ground Force
| flag alias-marines=Naval ensign of China.svg
| link alias-marines=People's Liberation Army Navy Marine Corps
| flag alias-navy = Naval ensign of China.svg
| link alias-navy = People's Liberation Army Navy
| flag alias-naval = Naval ensign of China.svg
| link alias-naval = People's Liberation Army Navy
| flag alias-air force = Air Force Flag of the People's Republic of China.svg
| link alias-air force = People's Liberation Army Air Force
| name alias-football = China PR
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1862
| var2 = 1889
| var3 = 1912
| var4 = 1928
| redir1 = CHN
| redir2 = People's Republic of China
| redir3 = China, People's Republic of
| redir4 = China (People's Republic of)
| redir5 = PRC
| related1 = Qing dynasty
| related2 = Republic of China
| related3 = Republic of China (1912–1949)
&lt;/noinclude&gt;
}}</text>
      <sha1>rcxvceit38kf3xgoi4sy4d876v74jhj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Colombia</title>
    <ns>10</ns>
    <id>8909880</id>
    <revision>
      <id>825396983</id>
      <parentid>825396958</parentid>
      <timestamp>2018-02-13T04:17:14Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="941">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Colombia
| flag alias = Flag of Colombia.svg
| flag alias-1861 = Flag of Colombia (WFB 2013).gif
| flag alias-2004 = Flag of Colombia (WFB 2004).gif
| flag alias-civil = Civil Ensign of Colombia.svg
| flag alias-naval = Naval Ensign of Colombia.svg
| link alias-naval = Colombian National Navy
| flag alias-army = Flag of the Colombian Army.svg
| link alias-army = Colombian National Army
| flag alias-air force = Flag of the Colombian Air Force.svg
| link alias-air force = Colombian Air Force
| flag alias-marines=Flag of the Colombian Naval Infantry.png
| link alias-marines=Colombian Naval Infantry
| link alias-navy = Colombian National Navy 
| flag alias-navy = Flag of the Colombian Navy.png
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1861
| var2 = 2004
| var3 = civil
| redir1 = COL
&lt;/noinclude&gt;
}}</text>
      <sha1>3hebmalcgb8j2yasrgmzlwfmlfckhwk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Comoros</title>
    <ns>10</ns>
    <id>8909903</id>
    <revision>
      <id>846890428</id>
      <parentid>577850269</parentid>
      <timestamp>2018-06-21T14:15:11Z</timestamp>
      <contributor>
        <username>RexxS</username>
        <id>6112901</id>
      </contributor>
      <comment>alias for [[Comorian Navy]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="557">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Comoros
| flag alias = Flag of the Comoros.svg
| flag alias-1975 = Flag of Comoros (1975-1978).svg
| flag alias-1978 = Flag of the Comoros (1978-1992).svg
| flag alias-1992 = Flag of the Comoros (1992-1996).svg
| flag alias-1996 = Flag of the Comoros (1996-2001).svg
| link alias-naval = Comorian Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1975
| var2 = 1978
| var3 = 1992
| var4 = 1996
| redir1 = COM
&lt;/noinclude&gt;
}}</text>
      <sha1>kxhrrnqts6kgnebh24uurcm5cd1ddme</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Cook Islands</title>
    <ns>10</ns>
    <id>8910014</id>
    <revision>
      <id>577850260</id>
      <parentid>353259403</parentid>
      <timestamp>2013-10-19T14:49:58Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Cook Islands: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="324">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Cook Islands
| flag alias = Flag of the Cook Islands.svg
| flag alias-1973 = Flag of the Cook Islands 1973.svg
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = COK
| var1 = 1973
&lt;/noinclude&gt;
}}</text>
      <sha1>3vkubpbkrjix2dm55gedugffaw3d3m2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Costa Rica</title>
    <ns>10</ns>
    <id>8910056</id>
    <revision>
      <id>739689835</id>
      <parentid>632007184</parentid>
      <timestamp>2016-09-16T10:09:40Z</timestamp>
      <contributor>
        <username>Cabayi</username>
        <id>6561336</id>
      </contributor>
      <comment>Civil Guard (Costa Rica), per request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="513">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Costa Rica
| flag alias = Flag of Costa Rica.svg
| flag alias-1839 = Flag of Costa Rica (1839-1848).svg
| flag alias-1848 = Bandera de Costa Rica de 1848.svg
| flag alias-state = Flag of Costa Rica (state).svg
| link alias-naval = Civil Guard (Costa Rica)
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1839
| var2 = 1848
| var3 = state
| redir1 = CRI
| redir2 = CRC
&lt;/noinclude&gt;
}}</text>
      <sha1>92jeybkwl3k8gjgmfx5kac0nfm3zvv4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Croatia</title>
    <ns>10</ns>
    <id>8873946</id>
    <revision>
      <id>846888305</id>
      <parentid>577850243</parentid>
      <timestamp>2018-06-21T13:59:03Z</timestamp>
      <contributor>
        <username>RexxS</username>
        <id>6112901</id>
      </contributor>
      <comment>add link for [[Croatian Army]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="609">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Croatia
| flag alias = Flag of Croatia.svg
| flag alias-civil = Civil Ensign of Croatia.svg
| flag alias-1990 = Flag of Croatia (1990).svg
| flag alias-naval = Naval Ensign of Croatia.svg
| link alias-naval = Croatian Navy
| link alias-army = Croatian Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = civil
| var2 = 1990
| redir1 = HRV
| redir2 = CRO
| related1 = Independent State of Croatia
| related2 = SR Croatia
| related3 = Kingdom of Croatia (Habsburg)
&lt;/noinclude&gt;
}}</text>
      <sha1>bhn0ji6v2xci3uxw122b2j67esaak0b</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Cuba</title>
    <ns>10</ns>
    <id>8910113</id>
    <revision>
      <id>916161703</id>
      <parentid>915397743</parentid>
      <timestamp>2019-09-17T11:01:03Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <comment>missed one</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="484">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Cuba
| flag alias = Flag of Cuba.svg
| flag alias-naval =  Naval Jack of Cuba.svg
| link alias-naval = Cuban Revolutionary Navy
| flag alias-1902 = Flag of Cuba sky blue.svg
| link alias-army = Cuban Revolutionary Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant= {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1902
| redir1 = CUB
| redir2 = Republic of Cuba
&lt;/noinclude&gt;
}}</text>
      <sha1>iva99en78uwa0akbv07x2zq66ol0ykq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Cyprus</title>
    <ns>10</ns>
    <id>8874042</id>
    <revision>
      <id>848822913</id>
      <parentid>617600904</parentid>
      <timestamp>2018-07-04T15:38:22Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="494">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Cyprus
| flag alias = Flag of Cyprus.svg
| flag alias-colonial = Blue Ensign of Cyprus (1922).svg
| flag alias-April 1960 = Flag of Cyprus (1960).svg
| flag alias-1960 = Flag of Cyprus (1960-2006).svg
| link alias-army = Cypriot Ground Forces
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = CYP
| var1 = colonial
| var2 = April 1960
| var3 = 1960
&lt;/noinclude&gt;
}}</text>
      <sha1>3ven0lrinsfp8m7a6j9fqdrrlnf5ccc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Czech Republic</title>
    <ns>10</ns>
    <id>8874089</id>
    <revision>
      <id>914145914</id>
      <parentid>877998143</parentid>
      <timestamp>2019-09-05T13:28:18Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <minor/>
      <comment>fix wikilink to basketball team</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2764">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Czech Republic
| flag alias = Flag of the Czech Republic.svg
| link alias-air force = Czech Air Force
| link alias-army = Czech Land Forces
| link alias-baseball      = Czech Republic {{{mw|}}} national {{{age|}}} baseball team
| name alias-baseball      = Czech Republic
| link alias-basketball    = Czech Republic {{{mw|}}} national {{{age|}}} basketball team
| name alias-basketball    = Czech Republic
| link alias-cricket       = Czech {{{mw|}}} national {{{age|}}} cricket team
| name alias-cricket       = Czech Republic
| link alias-field hockey  = Czech Republic {{{mw|}}} national {{{age|}}} field hockey team
| name alias-field hockey  = Czech Republic
| link alias-football      = Czech Republic {{{mw|}}} national {{{age|}}} football team
| name alias-football      = Czech Republic
| link alias-handball      = Czech Republic {{{mw|}}} national {{{age|}}} handball team
| name alias-handball      = Czech Republic
| link alias-ice hockey    = Czech Republic {{{mw|}}} national {{{age|}}} ice hockey team
| name alias-ice hockey    = Czech Republic
| link alias-inline hockey = Czech Republic {{{mw|}}} national {{{age|}}} inline hockey team
| name alias-inline hockey = Czech Republic
| link alias-rugby union   = Czech Republic {{{mw|}}} national {{{age|}}} rugby union team
| name alias-rugby union   = Czech Republic
| link alias-rugby sevens  = Czech Republic {{{mw|}}} national {{{age|}}} rugby sevens team
| name alias-rugby sevens  = Czech Republic
| link alias-softball      = Czech Republic {{{mw|}}} national {{{age|}}} softball team
| name alias-softball      = Czech Republic
| link alias-squash        = Czech Republic {{{mw|}}} national {{{age|}}} squash team
| name alias-squash        = Czech Republic
| link alias-volleyball    = Czech Republic {{{mw|}}} national {{{age|}}} volleyball team
| name alias-volleyball    = Czech Republic
| link alias-tennis        = Czech Republic {{{mw|}}} Cup team
| name alias-tennis        = Czech Republic
| link alias-bandy         = Czech Republic {{{mw|}}} national {{{age|}}} bandy team
| name alias-bandy         = Czech Republic
| link alias-korfball      = Czech Republic {{{mw|}}} national {{{age|}}} korfball team
| name alias-korfball      = Czech Republic
| link alias-speedway      = Czech Republic {{{mw|}}} national {{{age|}}} speedway team
| name alias-speedway      = Czech Republic
| link alias-eurovision    = Czech Republic {{{altlink|}}}
| name alias-eurovision    = Czech Republic
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
&lt;noinclude&gt;
| redir1 = CZE
| related1 = Czechoslovakia
| related2 = Bohemia
| related3 = Slovakia
&lt;/noinclude&gt;
}}</text>
      <sha1>fhasne2t3vs1lfmik07kvm41bvg03no</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Côte d'Ivoire</title>
    <ns>10</ns>
    <id>39292802</id>
    <redirect title="Template:Country data Ivory Coast" />
    <revision>
      <id>597732642</id>
      <parentid>577861366</parentid>
      <timestamp>2014-03-01T22:56:04Z</timestamp>
      <contributor>
        <username>Technical 13</username>
        <id>14450599</id>
      </contributor>
      <comment>Per edit request on talk page.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="97">#REDIRECT [[Template:Country data Ivory Coast]]
[[Category:Country data redirects|Cote d'Ivoire]]</text>
      <sha1>b68hvsiztf594z1sxti5ixfkry4fg49</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Democratic Republic of the Congo</title>
    <ns>10</ns>
    <id>8909972</id>
    <revision>
      <id>848818381</id>
      <parentid>801883082</parentid>
      <timestamp>2018-07-04T14:53:02Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>Corrected army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1711">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Democratic Republic of the Congo
| flag alias = Flag of the Democratic Republic of the Congo.svg
| flag alias-1960 = Flag of Congo-Léopoldville (1960-1963).svg
| flag alias-1963 = Flag of Congo-Léopoldville (1963-1966).svg
| flag alias-1966 = Flag of Congo-Kinshasa (1966-1971).svg
| flag alias-1997 = Flag of the Democratic Republic of the Congo.svg (1997-2003).svg
| flag alias-2003 = Flag of the Democratic Republic of the Congo.svg (2003-2006).svg
| link alias-football = DR Congo {{{mw|}}} national {{{age|}}} football team
| name alias-football = DR Congo
| link alias-basketball = DR Congo {{{mw|}}} national {{{age|}}} basketball team
| name alias-basketball = DR Congo
| link alias-volleyball = DR Congo {{{mw|}}} national volleyball team
| name alias-volleyball = DR Congo
| link alias-handball = DR Congo {{{mw|}}} national {{{age|}}} handball team
| name alias-handball = DR Congo
| link alias-rugby union = DR Congo {{{mw|}}} national rugby union team
| name alias-rugby union = DR Congo
| link alias-army = Land Forces of the Democratic Republic of the Congo
| link alias-naval = Navy of the Democratic Republic of the Congo
| link alias-air force = Air Force of the Democratic Republic of the Congo
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1960
| var2 = 1963
| var3 = 1966
| var4 = 1997
| var5 = 2003
| redir1 = COD
| redir2 = DR Congo
| redir3 = Congo, Democratic Republic of the
| redir4 = Congo-Kinshasa
| related1 = Zaire
| related2 = Belgian Congo
| related3 = Congo Free State
| cat = Congo democratic republic
&lt;/noinclude&gt;
}}</text>
      <sha1>2h89ukh7mrc3nevoasvqehv2mf0zizf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Denmark</title>
    <ns>10</ns>
    <id>8874123</id>
    <revision>
      <id>904449840</id>
      <parentid>830725956</parentid>
      <timestamp>2019-07-02T07:50:34Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <comment>Per talk page request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="698">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Denmark
| flag alias = Flag of Denmark.svg
| flag alias-state = Flag of Denmark (state).svg
| border-state =
| flag alias-naval = Naval Ensign of Denmark.svg
| border-naval =
| link alias-naval = Royal Danish Navy
| link alias-army = Royal Danish Army
| flag alias-army = Flag of Denmark (state).svg
| link alias-air force = Royal Danish Air Force
| flag alias-air force = Flag of Denmark (state).svg
| border-army =
| border-air force = 
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = state
| redir1 = DNK
| redir2 = DEN
| redir3 = Kingdom of Denmark
&lt;/noinclude&gt;
}}</text>
      <sha1>scuo2huw5cz43umdelgm59tq27y8e1c</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Djibouti</title>
    <ns>10</ns>
    <id>8910279</id>
    <revision>
      <id>848833732</id>
      <parentid>577850193</parentid>
      <timestamp>2018-07-04T17:16:41Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army and navy</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="317">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Djibouti
| flag alias = Flag of Djibouti.svg
| link alias-naval = Djiboutian Navy
| link alias-army = Djiboutian Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = DJI
&lt;/noinclude&gt;
}}</text>
      <sha1>7pf0xttrigumls9rvyc2uurpdqw107u</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Dominica</title>
    <ns>10</ns>
    <id>8910305</id>
    <revision>
      <id>736711607</id>
      <parentid>705464119</parentid>
      <timestamp>2016-08-29T10:13:06Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <minor/>
      <comment>([[c:GR|GR]]) [[c:COM:FR|File renamed]]: [[File:Flag of Dominica, 1965-1978.svg]] → [[File:Flag of Dominica (1965-1978).svg]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="557">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Dominica
| flag alias = Flag of Dominica.svg
| flag alias-1955 = Missing Blue Ensign.svg &lt;!-- Flag of Dominica 1955-1965.png deleted from Commons --&gt;
| flag alias-1965 = Flag of Dominica (1965-1978).svg
| flag alias-1978 = Flag of Dominica (1978-1981).svg
| flag alias-1981 = Flag of Dominica 1981.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1978
| var2 = 1981
| var3 = 1955
| var4 = 1965
| redir1 = DMA
&lt;/noinclude&gt;
}}</text>
      <sha1>5sm53o3julz7c3xnwg9natb05h2i9fd</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Dominican Republic</title>
    <ns>10</ns>
    <id>8910341</id>
    <revision>
      <id>802312766</id>
      <parentid>789245923</parentid>
      <timestamp>2017-09-25T10:59:56Z</timestamp>
      <contributor>
        <username>Mjroots</username>
        <id>408438</id>
      </contributor>
      <comment>+ civil ensign</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="818">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Dominican Republic
| flag alias = Flag of the Dominican Republic.svg
| flag alias-1844  = Flag of the Dominican Republic (up to 1844).svg
| flag alias-1863  = Flag of the Dominican Republic (WFB 2004).gif
| flag alias-naval = Naval Ensign of the Dominican Republic.svg
| link alias-naval = Dominican Navy
| flag alias-army = Army flag of Dominican Republic.svg
| link alias-army = Dominican Army
| flag alias-air force =Air Force Ensign of the Dominican Republic.svg
| flag alias-civil = Civil Ensign of the Dominican Republic.svg
| link alias-air force = Dominican Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1844
| var2 = 1863
| var3 = civil
| redir1 = DOM
&lt;/noinclude&gt;
}}</text>
      <sha1>lnxd145s44qh8ati8x07zngdnci8djn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data East Timor</title>
    <ns>10</ns>
    <id>8986346</id>
    <revision>
      <id>907903317</id>
      <parentid>907903240</parentid>
      <timestamp>2019-07-26T02:13:23Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>fixing football link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="539">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = East Timor
| flag alias = Flag of East Timor.svg
| flag alias-1975=Flag of East Timor (3-2).svg
| flag alias-2002=Flag of East Timor (WFB 2004).gif
| name alias-football = Timor-Leste
| link alias-football = Timor-Leste {{{mw|}}} national {{{age|}}} football team
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1975
| var2 = 2002
| redir1 = TLS
| redir2 = Timor-Leste
&lt;/noinclude&gt;
}}</text>
      <sha1>q0tgmsih5exry3exc2nhi2ain96rweh</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Ecuador</title>
    <ns>10</ns>
    <id>8910389</id>
    <revision>
      <id>898073057</id>
      <parentid>856294818</parentid>
      <timestamp>2019-05-21T06:31:30Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Ecuador_(1900-2009).svg with [[File:Flag_of_Ecuador_(1900–2009).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]:).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="849">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Ecuador
| flag alias = Flag of Ecuador.svg
| flag alias-civil = Civil Flag and Ensign of Ecuador.svg
| flag alias-1830 = Flag of Ecuador (1830-1845).gif
| flag alias-1845 = Flag of Ecuador (1845-1860).svg
| flag alias-1900 = Flag of Ecuador (1900–2009).svg
| flag alias-municipal = Municipal Flag_of Ecuador.svg
| flag alias-army = Flag of Ecuador Army.svg
| link alias-army = Ecuadorian Army
| flag alias-naval = Flag of Ecuador.svg
| link alias-naval = Ecuadorian Navy
| flag alias-marines= Naval Jack of Ecuador.svg
| link alias-marines=Ecuadorian Naval Infantry Corps
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1830
| var2 = 1845
| var3 = 1900
| var4 = civil
| var5 = municipal
| redir1 = ECU
&lt;/noinclude&gt;
}}</text>
      <sha1>jkwxr3f0twycvway0nae18cy0d9yswt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Egypt</title>
    <ns>10</ns>
    <id>8910417</id>
    <revision>
      <id>853015675</id>
      <parentid>737905609</parentid>
      <timestamp>2018-08-01T21:25:33Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="998">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Egypt
| flag alias = Flag of Egypt.svg
| flag alias-Ottoman = Flag of Egypt (1793-1844).svg
| flag alias-1882 = Flag of Egypt (1882-1922).svg
| flag alias-1922 = Flag of Egypt (1922–1958).svg
| flag alias-1952 = Flag of Egypt (1952-1958).svg
| flag alias-1958 = Flag of the United Arab Republic.svg
| flag alias-1972 = Flag of Egypt (1972-1984).svg
| flag alias-army = Flag of the Army of Egypt.svg
| link alias-army = Egyptian Army
| flag alias-naval = Naval Ensign of Egypt.svg
| link alias-naval = Egyptian Navy
| flag alias-navy=Flag of the Egyptian Navy.svg
| link alias-navy=Egyptian Navy
| flag alias-air force = Eafflag.svg
| link alias-air force = Egyptian Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = Ottoman
| var2 = 1882
| var3 = 1922
| var4 = 1952
| var5 = 1958
| var6 = 1972
| redir1 = EGY
| related1 = United Arab Republic
&lt;/noinclude&gt;
}}</text>
      <sha1>th9otio719956q3bgjl2307qzaiwztu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data El Salvador</title>
    <ns>10</ns>
    <id>8910454</id>
    <revision>
      <id>848822667</id>
      <parentid>712342638</parentid>
      <timestamp>2018-07-04T15:36:01Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="550">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = El Salvador
| flag alias = Flag of El Salvador.svg
| flag alias-1839 = Flag of El Salvador (1839-1865).svg
| flag alias-1869 = Flag of El Salvador (1869-1873).svg
| flag alias-civil = Civil Ensign of El Salvador.svg
| link alias-naval = Navy of El Salvador
| link alias-army = Salvadoran Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1839
| var2 = 1869
| var3 = civil
| redir1 = SLV
| redir2 = ESA
&lt;/noinclude&gt;
}}</text>
      <sha1>lbyjyrc3b57nfc5vgtr5gffja4e4qio</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Equatorial Guinea</title>
    <ns>10</ns>
    <id>8910482</id>
    <revision>
      <id>830724486</id>
      <parentid>577850869</parentid>
      <timestamp>2018-03-16T15:39:41Z</timestamp>
      <contributor>
        <username>Muhandes</username>
        <id>5630772</id>
      </contributor>
      <comment>talk page request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="312">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Equatorial Guinea
| flag alias = Flag of Equatorial Guinea.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| link alias-naval = Navy of Equatorial Guinea
&lt;noinclude&gt;
| redir1 = GNQ
| redir2 = EQG
| redir3 = GEQ
&lt;/noinclude&gt;
}}</text>
      <sha1>bym52szj2g7ysxjyq4miozsxpxgukx6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Eritrea</title>
    <ns>10</ns>
    <id>8910499</id>
    <revision>
      <id>917364101</id>
      <parentid>639895917</parentid>
      <timestamp>2019-09-23T14:02:56Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Eritrea_(1993-1995).svg with [[File:Flag_of_Eritrea_(1993–1995).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: Correct hyphen to dash.).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="411">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Eritrea
| flag alias = Flag of Eritrea.svg
| flag alias-1952 = Flag of Eritrea (1952-1961).svg
| flag alias-1993 = Flag of Eritrea (1993–1995).svg
| link alias-naval = Eritrean Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = ERI
| var1 = 1952
| var2 = 1993
&lt;/noinclude&gt;
}}</text>
      <sha1>fmbd4yw79oi4m4cndyl5i372genv79g</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Estonia</title>
    <ns>10</ns>
    <id>8874224</id>
    <revision>
      <id>848834671</id>
      <parentid>793877528</parentid>
      <timestamp>2018-07-04T17:24:28Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>Changed to SVG file</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="561">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Estonia
| flag alias = Flag of Estonia.svg
| flag alias-naval = Naval Ensign of Estonia.svg
| link alias-naval = Estonian Navy
| flag alias-army=Flag of Estonian Land Forces.svg
| link alias-army=Estonian Land Forces
| flag alias-air force =Flag of the Estonia Air Force.png
| link alias-air force = Estonian Air Force
| border-naval =
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = EST
| related1 = Estonian SSR
&lt;/noinclude&gt;
}}</text>
      <sha1>6fxafb9laim5ua0x105498hgbblopbn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Eswatini</title>
    <ns>10</ns>
    <id>8953465</id>
    <revision>
      <id>893310544</id>
      <parentid>888937747</parentid>
      <timestamp>2019-04-20T13:50:33Z</timestamp>
      <contributor>
        <username>Cabayi</username>
        <id>6561336</id>
      </contributor>
      <comment>Per [[Special:Permalink/893187483#Template-protected edit request on 19 April 2019|request]] by [[User:S.A. Julio]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="343">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Eswatini
| flag alias = Flag of Eswatini.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
| shortname alias = {{{shortname alias|Eswatini}}}
| altvar = {{{altvar|}}}
&lt;noinclude&gt;
| redir1 = SWZ
| related1 = Swaziland
&lt;/noinclude&gt;
}}</text>
      <sha1>eek184pdyuzhlkx9jc99xuqskyff5wz</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Ethiopia</title>
    <ns>10</ns>
    <id>8910522</id>
    <revision>
      <id>861743236</id>
      <parentid>634906240</parentid>
      <timestamp>2018-09-29T18:02:50Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Ethiopia_(1987–1991).svg with [[File:Flag_of_Ethiopia_(1987-1991).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: [[:c:COM:FR#FR4|Criterion 4]] (harmonizing names of file set) · or other fl</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="744">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Ethiopia
| flag alias = Flag of Ethiopia.svg
| flag alias-1897 = Flag of Ethiopia (1897-1936; 1941-1974).svg
| flag alias-1975 = Flag of Ethiopia (1975–1987).svg
| flag alias-1975-state = Flag of Ethiopia (1975–1987) (02).svg
| flag alias-1987 = Flag of Ethiopia (1987-1991).svg
| flag alias-1991 = Flag of Ethiopia (1991-1996).svg
| flag alias-1996 = Flag of Ethiopia (1996-2009).svg
| link alias-naval = Ethiopian Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1897
| var2 = 1975
| var3 = 1975-state
| var4 = 1987
| var5 = 1991
| var6 = 1996
| redir1 = ETH
| related1 = Ethiopian Empire
&lt;/noinclude&gt;
}}</text>
      <sha1>5s3fx2c19qcpzxjf0xx5m7psljrgq29</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Fiji</title>
    <ns>10</ns>
    <id>8918961</id>
    <revision>
      <id>858510600</id>
      <parentid>853506333</parentid>
      <timestamp>2018-09-07T18:09:10Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_the_United_Kingdom_of_Fiji_1871-1874.svg with [[File:Flag_of_the_Kingdom_of_Fiji_(1871-1874).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: [[:c:COM:FR#FR2|Criterion 2]] (meaningless or am</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="679">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Fiji
| flag alias = Flag of Fiji.svg
| flag alias-1871 = Flag of the Kingdom of Fiji (1871-1874).svg
| flag alias-1908 = Flag of Fiji (1908-1924).svg
| flag alias-colonial = Flag of Fiji (1924-1970).svg
| flag alias-naval = Naval Ensign of Fiji.svg
| link alias-naval = Fijian Navy
| flag alias-civil = Civil Ensign of Fiji.svg
| flag alias-government = Government Ensign of Fiji.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1871
| var2 = 1908
| var3 = colonial
| var4 = civil
| var5 = government
| redir1 = FJI
| redir2 = FIJ
&lt;/noinclude&gt;
}}</text>
      <sha1>7g7w4bwk590teniuuidjxkkfst5458h</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Finland</title>
    <ns>10</ns>
    <id>8874261</id>
    <revision>
      <id>878732201</id>
      <parentid>868617462</parentid>
      <timestamp>2019-01-16T16:50:50Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Historical variants per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1233">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Finland
| flag alias = Flag of Finland.svg
| flag alias-grand duchy = Flag of Russia.svg
| flag alias-1809 = Flag of Russia.svg
| flag alias-1917 = Flag of Finland 1918 (state).svg
| flag alias-1918 = Flag of Finland (1918-1920).svg
| flag alias-1920 = Flag of Finland.svg
| flag alias-state = Flag of Finland (state).svg
| flag alias-state-1918 = Flag of Finland 1918-1920 (State).svg
| flag alias-state-1920 = Flag of Finland 1920-1978 (State).svg
| flag alias-naval = Military Flag of Finland.svg | border-naval =
| flag alias-naval-1918 = Flag of Finland 1918-1920 (Military).svg | border-naval-1918 =
| flag alias-naval-1920 = Flag of Finland 1920-1978 (Military).svg | border-naval-1920 =
| link alias-naval = Finnish Navy
| flag alias-navy = Naval Jack of Finland.svg
| link alias-navy = Finnish Navy
| link alias-army = Finnish Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = grand duchy
| var2 = 1809
| var3 = 1917
| var4 = 1918
| var5 = 1920
| var6 = state
| var7 = state-1918
| var8 = state-1920
| var9 = naval-1918
| var10 = naval-1920
| redir1 = FIN
| related1 = Åland
&lt;/noinclude&gt;
}}</text>
      <sha1>liziozf54hmykq13z8ss8jikozjx5wd</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data France</title>
    <ns>10</ns>
    <id>8819754</id>
    <revision>
      <id>879311631</id>
      <parentid>877483363</parentid>
      <timestamp>2019-01-20T11:53:40Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Changed variants per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1017">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = France
| flag alias = Flag of France.svg
| flag alias-1790 = Flag of France (1790–1794).svg
| flag alias-1794 = Flag of France (1794–1815, 1830–1958).svg
| flag alias-1814 = Flag of the Kingdom of France (1814-1830).svg
| flag alias-1830 = Flag of France (1794–1815, 1830–1958).svg
| flag alias-1848 = Drapeau france 1848.svg
| flag alias-naval = Civil and Naval Ensign of France.svg
| flag alias-naval-1790 = Flag of French-Navy-Revolution.svg
| flag alias-coast guard = French Maritime Gendarmerie racing stripe.svg | border-coast guard = 
| link alias-coast guard = French Maritime Gendarmerie
| link alias-army = French Army
| link alias-naval = French Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1790
| var2 = 1794
| var3 = 1814
| var4 = 1830
| var5 = 1848
| var6 = naval-1790
| redir1 = FRA
| related1 = Kingdom of France
| related2 = Free France
&lt;/noinclude&gt;
}}</text>
      <sha1>bxsnquonrd2uv0szn4k5u9toen5kund</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Gabon</title>
    <ns>10</ns>
    <id>8919010</id>
    <revision>
      <id>913971057</id>
      <parentid>577851010</parentid>
      <timestamp>2019-09-04T10:31:48Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added navy link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="333">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Gabon
| flag alias = Flag of Gabon.svg
| flag alias-1959 = Flag of Gabon 1959-1960.svg
| link alias-naval=Gabonese Navy
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = GAB
| var1 = 1959
&lt;/noinclude&gt;
}}</text>
      <sha1>fl39zwpyol96j2in6db4raj9yru4aru</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Gambia</title>
    <ns>10</ns>
    <id>8919022</id>
    <revision>
      <id>881635686</id>
      <parentid>849068580</parentid>
      <timestamp>2019-02-03T21:08:35Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_The_Gambia_(1889-1965).svg with [[File:Flag_of_The_Gambia_(1889–1965).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: File name harmonisation.).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="467">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = The Gambia
| shortname alias = Gambia
| flag alias = Flag of The Gambia.svg
| flag alias-colonial = Flag of The Gambia (1889–1965).svg
| link alias-naval = Gambian Navy
| link alias-army = Gambian National Army
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| var1 = colonial
| redir1 = GMB
| redir2 = GAM
| redir3 = The Gambia
&lt;/noinclude&gt;
}}</text>
      <sha1>lapu91928rek17uj0htr55a1zdcbqxx</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Gaza Strip</title>
    <ns>10</ns>
    <id>15565042</id>
    <revision>
      <id>546683751</id>
      <parentid>495589294</parentid>
      <timestamp>2013-03-24T06:07:29Z</timestamp>
      <contributor>
        <username>Addbot</username>
        <id>6569922</id>
      </contributor>
      <minor/>
      <comment>[[User:Addbot|Bot:]] Migrating 2 interwiki links, now provided by [[Wikipedia:Wikidata|Wikidata]] on [[d:q7665747]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="248">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Gaza Strip
| flag alias = Flag of Palestine.svg
| size = {{{size|}}}
| name = {{{name|}}}
&lt;noinclude&gt;
| related1 = Palestine
| related2 = West Bank
&lt;/noinclude&gt;
}}&lt;noinclude&gt;
&lt;/noinclude&gt;</text>
      <sha1>4zlsm0umjlj64zbaqy06vaz5u3o4jqq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Georgia</title>
    <ns>10</ns>
    <id>50536551</id>
    <redirect title="Template:Country data Georgia (country)" />
    <revision>
      <id>720169015</id>
      <timestamp>2016-05-14T04:27:56Z</timestamp>
      <contributor>
        <username>Anthony Appleyard</username>
        <id>119438</id>
      </contributor>
      <comment>Anthony Appleyard moved page [[Template:Country data Georgia]] to [[Template:Country data Georgia (country)]]: Requested at [[WP:RM]] as uncontroversial ([[Special:Permalink/720168663|permalink]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="69">#REDIRECT [[Template:Country data Georgia (country)]]
{{R from move}}</text>
      <sha1>ifvhbyw66z0qww14iwzb184gntz06dq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Georgia (country)</title>
    <ns>10</ns>
    <id>8919033</id>
    <revision>
      <id>922464294</id>
      <parentid>868207817</parentid>
      <timestamp>2019-10-22T08:46:01Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>not a unique variant</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1592">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Georgia (country)
| shortname alias = Georgia
| flag alias = Flag of Georgia.svg
| flag alias-1008 = Sakartvelo_-_drosha.svg
| flag alias-1762 = Flag_of_Kingdom_of_Kartli-Kakheti.svg
| flag alias-1918 = Flag of Georgia (1918–1921).svg
| flag alias-1921 = Flag of the Georgian Soviet Socialist Republic (1921–1922).svg
| flag alias-1937 = Flag of the Georgian Soviet Socialist Republic (1937–1951).svg
| flag alias-1951 = Flag of the Georgian Soviet Socialist Republic.svg
| flag alias-1990 = Flag of Georgia (1990-2004).svg
| flag alias-army  = Army Flag of Georgia.svg
| link alias-army  = Georgian Land Forces
| flag alias-coast guard=Flag of the Georgian Coast Guard.png
| link alias-coast guard=Coast Guard of Georgia
| flag alias-military = Flag of the Georgian Armed Forces.svg
| link alias-military = Georgian Armed Forces
| flag alias-navy=Georgian Border Police flag.png
| link alias-navy=Border Police of Georgia
| flag alias-air force=Flag of the Georgian Air Force.svg
| link alias-air force=Georgian Air Force
| flag alias-naval = Naval Ensign of Georgia.svg
| link alias-naval = {{#ifeq:{{{variant|}}}|coast guard|Coast Guard of Georgia|Georgian Navy}}
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1008
| var2 = 1762
| var3 = 1918
| var4 = 1921
| var5 = 1937
| var6 = 1951
| var7 = 1990
| redir1 = GEO
| redir2 = Georgia (country)
| related1 = Georgian SSR
| related2 = Georgia (U.S. state)
| related3 = Republic of Georgia
&lt;/noinclude&gt;
}}</text>
      <sha1>gliu7rduj0ceg174tz16fvsm1a1j424</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Germany</title>
    <ns>10</ns>
    <id>8874317</id>
    <revision>
      <id>879768412</id>
      <parentid>876990668</parentid>
      <timestamp>2019-01-23T07:42:51Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1920">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Germany
| flag alias = Flag of Germany.svg
| flag alias-1866 = Flag of the German Empire.svg
| link alias-1866 = German Empire
| flag alias-empire = Flag of the German Empire.svg
| link alias-empire = German Empire
| flag alias-1919 = Flag of Germany (3-2 aspect ratio).svg
| link alias-1919 = Weimar Republic
| flag alias-Weimar = Flag of Germany (3-2 aspect ratio).svg
| link alias-Weimar = Weimar Republic
| flag alias-1933 = Flag of Germany (1933-1935).svg
| flag alias-1935 = Flag of Germany (1935–1945).svg
| link alias-1935 = Nazi Germany
| flag alias-Nazi = Flag of Germany (1935–1945).svg
| link alias-Nazi = Nazi Germany
| flag alias-1946 = Merchant flag of Germany (1946–1949).svg
| border-1946 =
| flag alias-1949 = Flag of Germany.svg
| flag alias-EUA = German Olympic flag (1959-1968).svg
| flag alias-gold = Flag of West Germany; Flag of Germany (1990–1996).svg
| flag alias-state = Flag of Germany (state).svg
| flag alias-naval = Naval Ensign of Germany.svg
| border-naval =
| link alias-naval = German Navy
| flag alias-coast guard=German Federal Coast Guard racing stripe.svg
| border-coast guard=
| link alias-coast guard=German Federal Coast Guard
| flag alias-army = Colour of Germany.svg
| flag alias-air force =Flag of Germany (state).svg
| link alias-air force = German Air Force
| link alias-army = German Army
| border-army=
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1866
| var2 = empire
| var3 = 1919
| var4 = Weimar
| var5 = 1933
| var6 = 1935
| var7 = Nazi
| var8 = 1946
| var9 = 1949
| var10 = EUA
| var11 = gold
| var12 = state
| redir1 = DEU
| redir2 = GER
| related1 = German Empire
| related2 = Weimar Republic
| related3 = Nazi Germany
| related4 = Allied-occupied Germany
| related5 = East Germany
| related6 = West Germany
&lt;/noinclude&gt;
}}</text>
      <sha1>8yhfk9zai6qinos05btbwlj43rzvy8a</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Ghana</title>
    <ns>10</ns>
    <id>8919085</id>
    <revision>
      <id>773711592</id>
      <parentid>712343555</parentid>
      <timestamp>2017-04-03T22:54:53Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Ensign_of_the_Ghana_Air_Force.svg with [[File:Air_Force_Ensign_of_Ghana.svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: Common naming convention.).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="480">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Ghana
| flag alias = Flag of Ghana.svg
| flag alias-1964 = Ghana flag 1964.svg
| flag alias-civil = Civil Ensign of Ghana.svg
| flag alias-naval = Naval Ensign of Ghana.svg
| flag alias-air force = Air Force Ensign of Ghana.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1964
| var2 = civil
| redir1 = GHA
| related1 = Gold Coast
&lt;/noinclude&gt;
}}</text>
      <sha1>r40cukq0ppwoi6xul11c2hawb8yxhcu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Greece</title>
    <ns>10</ns>
    <id>8874637</id>
    <revision>
      <id>922295972</id>
      <parentid>773850357</parentid>
      <timestamp>2019-10-21T06:43:15Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>update Otto to use [[:File:Flag of Greece (1822-1978).svg]], per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="835">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Greece
| flag alias = Flag of Greece.svg
| flag alias-old = Flag of Greece (1822-1978).svg
| flag alias-1970 = Flag of Greece (1970-1975).svg
| flag alias-royal = State flag of Greece (1863–1924;1935–73).svg
| flag alias-otto = Flag of Greece (1822-1978).svg
| flag alias-army = Hellenic Army War Flag.svg
| link alias-army = Hellenic Army
| border-army=
| flag alias-air force=Fin Flash of Greece.svg
| link alias-air force=Hellenic Air Force
| flag alias-royalnavy = Naval Ensign of Kingdom of Greece.svg
| link alias-naval = Hellenic Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = old
| var2 = 1970
| var3 = royal
| var4 = otto
| var5 = royalnavy
| redir1 = GRC
| redir2 = GRE
&lt;/noinclude&gt;
}}</text>
      <sha1>fy44b3lofh3pl7rzjjlpd7fq04rjiex</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Grenada</title>
    <ns>10</ns>
    <id>8919151</id>
    <revision>
      <id>862098222</id>
      <parentid>854292818</parentid>
      <timestamp>2018-10-02T04:53:28Z</timestamp>
      <contributor>
        <username>Sodacan</username>
        <id>8272776</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="548">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Grenada
| flag alias = Flag of Grenada.svg
| flag alias-1903 = Flag of Grenada (1903–1967).svg
| flag alias-1967 = Flag of Grenada (1967-1974).svg
| flag alias-civil = Civil Ensign of Grenada.svg
| flag alias-naval = Naval Ensign of Grenada.svg
| link alias-naval = Coast Guard of Grenada
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1903
| var2 = 1967
| var3 = civil
| redir1 = GRD
| redir2 = GRN
&lt;/noinclude&gt;
}}</text>
      <sha1>hf1nttwcxw0el5uq2ryky4drabno7x1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Guatemala</title>
    <ns>10</ns>
    <id>8919381</id>
    <revision>
      <id>853233559</id>
      <parentid>712342111</parentid>
      <timestamp>2018-08-03T09:15:31Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added navy</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="432">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Guatemala
| flag alias = Flag of Guatemala.svg
| flag alias-1839 = Flag of Guatemala (1839-1843).svg
| flag alias-civil = Civil Ensign of Guatemala.svg
| link alias-naval = Guatemalan Navy
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| var1 = 1839
| var2 = civil
| redir1 = GTM
| redir2 = GUA
&lt;/noinclude&gt;
}}</text>
      <sha1>j33lw8m1skq75dq89mbt7l4h9ymvpmo</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Guinea</title>
    <ns>10</ns>
    <id>8919395</id>
    <revision>
      <id>577851788</id>
      <parentid>177502675</parentid>
      <timestamp>2013-10-19T15:04:32Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Guinea: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="228">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Guinea
| flag alias = Flag of Guinea.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = GIN
| redir2 = GUI
&lt;/noinclude&gt;
}}</text>
      <sha1>6099sqcpkqqiwsrb6jcn5z0iouk2g0d</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Guinea-Bissau</title>
    <ns>10</ns>
    <id>8923070</id>
    <revision>
      <id>577851786</id>
      <parentid>177502689</parentid>
      <timestamp>2013-10-19T15:04:29Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Guinea-Bissau: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="242">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Guinea-Bissau
| flag alias = Flag of Guinea-Bissau.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = GNB
| redir2 = GBS
&lt;/noinclude&gt;
}}</text>
      <sha1>6hkap0llpishfb76ta7oa2vz6bppwj8</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Guyana</title>
    <ns>10</ns>
    <id>8923095</id>
    <revision>
      <id>718353385</id>
      <parentid>610231744</parentid>
      <timestamp>2016-05-03T01:00:05Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="418">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Guyana
| flag alias = Flag of Guyana.svg
| flag alias-1966 = Flag of Guyana (2004).png
| flag alias-naval = Naval Ensign of Guyana.svg
| link alias-naval = Guyana Defence Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = GUY
| related1 = British Guiana
| var1 = 1966
&lt;/noinclude&gt;
}}</text>
      <sha1>r19iamvutidbae5gvwvmi8pq12ea797</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Haiti</title>
    <ns>10</ns>
    <id>8926324</id>
    <revision>
      <id>848294015</id>
      <parentid>848294002</parentid>
      <timestamp>2018-07-01T01:33:18Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1212">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Haiti
| flag alias = Flag of Haiti.svg
| flag alias-1791 = Flag of Haiti (1791-1789).svg
| flag alias-1798 = Flag of France (1794-1815).svg
| flag alias-1803 = Flag of Haiti (1803-1804).svg
| flag alias-1806 = Flag of Haiti (1806-1811).svg
| flag alias-1811 = Flag of Haiti (1811–1814).png
| flag alias-1814 = Flag of Haiti (1814–1820).svg
| flag alias-1849 = Flag of Haiti (1849-1859).png
| flag alias-1859 = Flag of Haiti (1859–1964).svg
| flag alias-1964 = Flag of Haiti (1964–1986).svg
| flag alias-1986 = Flag of Haiti (WFB 2004).gif
| flag alias-2013 = Flag of Haiti (WFB 2013).gif
| flag alias-civil = Flag of Haiti (civil).svg
| link alias-army = Haitian National Police
| link alias-military=Defence Force of Haiti
| link alias-naval = Haitian National Police
| link alias-air force = Haitian National Police
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1791
| var2 = 1798
| var3 = 1803
| var4 = 1806
| var5 = 1811
| var6 = 1814
| var7 = 1849
| var8 = 1859
| var9 = 1964
| var10 = 1986
| var11 = 2013
| var12 = civil
| redir1 = HTI
| redir2 = HAI
&lt;/noinclude&gt;
}}</text>
      <sha1>89ungekagb3eufcxgf5uojrcemr2yns</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Honduras</title>
    <ns>10</ns>
    <id>8926444</id>
    <revision>
      <id>792827918</id>
      <parentid>615185568</parentid>
      <timestamp>2017-07-28T23:33:33Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="544">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Honduras
| flag alias = Flag of Honduras.svg
| flag alias-1839 = Flag of Honduras (1839-1866).svg
| flag alias-1866 = Flag of Honduras (1866-1898).svg
| flag alias-1898 = Flag of Honduras (WFB 2004).gif
| flag alias-naval = Naval Ensign of Honduras.svg
| link alias-naval = Honduran Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1839
| var2 = 1866
| var3 = 1898
| redir1 = HND
| redir2 = HON
&lt;/noinclude&gt;
}}</text>
      <sha1>6brah3m53fsmzi0bmjv0aggb4an2not</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Hong Kong</title>
    <ns>10</ns>
    <id>8926461</id>
    <revision>
      <id>802498779</id>
      <parentid>802189131</parentid>
      <timestamp>2017-09-26T15:02:53Z</timestamp>
      <contributor>
        <username>Sodacan</username>
        <id>8272776</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="889">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Hong Kong
| flag alias = Flag of Hong Kong.svg
| flag alias-colonial = Flag of Hong Kong 1959.svg  &lt;!-- deprecate the "colonial" varname --&gt;
| flag alias-1959 = Flag of Hong Kong 1959.svg
| flag alias-1955 = Flag of Hong Kong 1955.svg
| flag alias-1910 = Flag of Hong Kong 1876.svg
| flag alias-1876 = Flag of Hong Kong 1876.svg
| flag alias-1871 = Flag of Hong Kong 1871.svg
| flag alias-red = Flag of Hong Kong 1959 (unofficial Red Ensign).svg
| link alias-naval = Hong Kong Marine Police
| link alias-korfball = Hong Kong China national korfball team
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1959
| var2 = 1955
| var3 = 1910
| var4 = 1876
| var5 = 1871
| var6 = red
| redir1 = HKG
| redir2 = Hong Kong, China
&lt;/noinclude&gt;
}}</text>
      <sha1>9dmdo3kqnah33nkgrmrls770t7hq64h</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Hungary</title>
    <ns>10</ns>
    <id>8874681</id>
    <revision>
      <id>880762984</id>
      <parentid>880735562</parentid>
      <timestamp>2019-01-29T09:44:47Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Temporarily re-adding &amp; tracking 1940 variant</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1927">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Hungary
| flag alias = Flag of Hungary.svg
| flag alias-1848 = Flag of Hungary (1848-1849, 1867-1869).svg
| flag alias-1849 = Flag of the Habsburg Monarchy.svg
| flag alias-1867 = Flag of Hungary (1848-1849, 1867-1869).svg
| flag alias-1869 = Flag of Hungary (1869-1874).svg
| flag alias-1874 = Flag of Hungary (1874-1896).svg
| flag alias-1896 = Flag of Hungary (1896-1915; angels).svg
| flag alias-1915 = Flag of Hungary (1915-1918; angels).svg
| flag alias-1918 = Flag of Hungary (1918-1919).svg
| flag alias-1919 = Flag of Hungary (1919).svg
| flag alias-1920 = Flag of Hungary (1915-1918, 1919-1946).svg
| flag alias-1946 = Flag of Hungary (1946-1949, 1956-1957; 1-2 aspect ratio).svg
| flag alias-1949 = Flag of Hungary (1949-1956; 1-2 aspect ratio).svg
| flag alias-1956 = Flag of Hungary (1946-1949, 1956-1957; 1-2 aspect ratio).svg
| flag alias-1957 = Flag of Hungary.svg
| flag alias-1940 = Flag of Hungary 1940.svg
| flag alias-state = Flag of Hungary with arms (state).svg
| flag alias-civil = Civil Ensign of Hungary.svg
| flag alias-naval = Naval Ensign of Hungary.svg
| link alias-naval=Hungarian Defence Forces
| flag alias-military=Flag of the Hungarian Defence Forces.svg
| link alias-military=Hungarian Defence Forces
| flag alias-army=War Flag of Hungary.svg
| link alias-army=Hungarian Army
| link alias-air force=Hungarian Air Force
| border-army=
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1848
| var2 = 1849
| var3 = 1867
| var4 = 1869
| var5 = 1874
| var6 = 1896
| var7 = 1915
| var8 = 1918
| var9 = 1919
| var10 = 1920
| var11 = 1946
| var12 = 1949
| var13 = 1956
| var14 = 1957
| var15 = state
| var16 = civil
| redir1 = HUN
| related1 = Austria-Hungary
&lt;/noinclude&gt;
}}{{#ifeq:{{{variant|}}}|1940|[[Category:Pages with tracked country data flag variants|Hungary]]}}</text>
      <sha1>3coueuxcovpbwiktnjaxenrj0n25yxw</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Iceland</title>
    <ns>10</ns>
    <id>8926529</id>
    <revision>
      <id>825424480</id>
      <parentid>825396242</parentid>
      <timestamp>2018-02-13T09:20:13Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Light_Blue_Flag_of_Iceland.svg with [[File:Flag_of_Iceland_(1918-1944).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]:).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="699">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Iceland
| flag alias = Flag of Iceland.svg
| flag alias-old  = Hvítbláinn.svg
| flag alias-coast guard = Flag of Iceland (state).svg
| flag alias-naval = Flag of Iceland (state).svg
| flag alias-1918 = Flag of Iceland (1918-1944).svg
| border-naval =
| flag alias-navy = Flag of Iceland (state).svg
| link alias-naval = Icelandic Coast Guard
| border-navy =
| link alias-navy = Icelandic Coast Guard
| border-coast guard=
| link alias-coast guard = Icelandic Coast Guard
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = old
| var2 = 1918
| redir1 = ISL
&lt;/noinclude&gt;
}}</text>
      <sha1>81zuujc8ku1sg6t43f1oci2etkz2h6w</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data India</title>
    <ns>10</ns>
    <id>8926564</id>
    <revision>
      <id>878869578</id>
      <parentid>868400237</parentid>
      <timestamp>2019-01-17T13:30:37Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Removed WFB flag per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="803">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = India
| flag alias = Flag of India.svg
| flag alias-British = British Raj Red Ensign.svg
| flag alias-1931 = 1931 Flag of India.svg
| flag alias-civil = Civil Ensign of India.svg
| flag alias-army = Flag of Indian Army.svg
| link alias-army = Indian Army
| flag alias-naval = Naval Ensign of India.svg
| flag alias-air force = Air Force Ensign of India.svg
| flag alias-coast guard = Indian Coast Guard flag.svg
| link alias-coast guard = Indian Coast Guard
| link alias-naval = Indian Navy
| link alias-air force = Indian Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = British
| var2 = 1931
| var4 = civil
| redir1 = IND
| related1 = British Raj
&lt;/noinclude&gt;
}}</text>
      <sha1>kexhi1qwn91ghqnkz4lrzthnxqtu7dj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Indonesia</title>
    <ns>10</ns>
    <id>8926590</id>
    <revision>
      <id>848818618</id>
      <parentid>610622812</parentid>
      <timestamp>2018-07-04T14:55:10Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="353">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Indonesia
| flag alias = Flag of Indonesia.svg
| link alias-naval = Indonesian Navy
| link alias-air force = Indonesian Air Force
| link alias-army = Indonesian Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = IDN
| redir2 = INA
&lt;/noinclude&gt;
}}</text>
      <sha1>skkrz6pkg8l23q6q6r6kimmyr7rfx3n</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Iran</title>
    <ns>10</ns>
    <id>8926619</id>
    <revision>
      <id>879877329</id>
      <parentid>868135204</parentid>
      <timestamp>2019-01-23T23:35:33Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1719">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Iran
| flag alias = Flag of Iran.svg
| flag alias-1502 = Flag of Persia (1502-1524).svg
| flag alias-1576 = Safavid Flag.svg
| flag alias-1665 = Flag of Persia (1665).svg
| flag alias-1736 = Nadir Shah Flag.svg
| flag alias-1760 = Zand Dynasty flag.svg
| border-1760 =
| flag alias-1796 = Qajar Naval Ensign.svg
| flag alias-1849 = Amir Kabir Flag.svg
| flag alias-1907 = Flag of Persia (1907).svg
| flag alias-1910 = Flag of Persia (1910-1925).svg
| flag alias-1925 = State Flag of Iran (1925).svg
| flag alias-1964 = State Flag of Iran (1964).svg
| flag alias-air force = Flag of the Islamic Republic of Iran Air Force.svg
| flag alias-army = Flag of the Islamic Republic of Iran Army Ground Forces.svg
| link alias-army = Islamic Republic of Iran Army Ground Forces
| flag alias-coast guard=Flag of the Army of the Guardians of the Islamic Revolution.svg
| link alias-coast guard=Navy of the Islamic Revolutionary Guard Corps
| flag alias-navy=Flag of the Islamic Republic of Iran Navy.svg
| link alias-navy=Islamic Republic of Iran Navy
| link alias-naval = Islamic Republic of Iran Navy
| flag alias-military=Flag of the Islamic Republic of Iran Army.svg
| link alias-military=Islamic Republic of Iran Army
| link alias-air force = Islamic Republic of Iran Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1502
| var2 = 1576
| var3 = 1665
| var4 = 1736
| var5 = 1760
| var6 = 1796
| var7 = 1849
| var8 = 1907
| var9 = 1910
| var10 = 1925
| var11 = 1964
| redir1 = IRN
| redir2 = IRI
&lt;/noinclude&gt;
| related1 = Persia
| related2 = Pahlavi dynasty
| related3 = Qajar dynasty

}}</text>
      <sha1>pmrgiaskj0ljhujacwkfnd28vn6dpjk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Iraq</title>
    <ns>10</ns>
    <id>8926645</id>
    <revision>
      <id>878769622</id>
      <parentid>865384013</parentid>
      <timestamp>2019-01-16T20:36:37Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Historical variants &amp; removed WFB flags per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1178">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Iraq
| flag alias = Flag of Iraq.svg
| flag alias-1921 = Flag of the Arab Federation.svg
| flag alias-1924 = Flag of Iraq (1924–1959).svg
| flag alias-1958 = Flag of the Arab Federation.svg
| flag alias-1959 = Flag of Iraq (1959–1963).svg
| flag alias-1963 = Flag of Iraq (1963–1991); Flag of Syria (1963–1972).svg
| flag alias-1991 = Flag of Iraq (1991–2004).svg
| flag alias-2004 = Flag of Iraq (2004–2008).svg
| flag alias-air force = Flag of the Iraqi Air Force.svg
| link alias-air force = Iraqi Air Force
| flag alias-army = Flag of the Iraqi Ground Forces.svg
| link alias-army = Iraqi Ground Forces
| flag alias-navy=Flag of the Iraqi Navy.svg
| link alias-naval = Iraqi Navy
| link alias-navy = Iraqi Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1921
| var2 = 1924
| var3 = 1958
| var4 = 1959
| var5 = 1963
| var6 = 1991
| var7 = 2004
| redir1 = IRQ
| redir2 = Republic of Iraq
| related1 = Ba'athist Iraq
| related2 = Iraqi Republic (1958–68)
| related3 = Kingdom of Iraq
| related4 = Arab Federation
&lt;/noinclude&gt;
}}</text>
      <sha1>ezw5rbumij8i182z11czrekqq8omdhu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Ireland</title>
    <ns>10</ns>
    <id>8874769</id>
    <revision>
      <id>878005931</id>
      <parentid>868397295</parentid>
      <timestamp>2019-01-12T10:15:19Z</timestamp>
      <contributor>
        <username>Cabayi</username>
        <id>6561336</id>
      </contributor>
      <comment>Per [[Special:Permalink/877492508#Template-protected edit request on 7 January 2019|request]] by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1845">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = {{#if:{{{altvar|}}}|Ireland|{{#if:{{{variant|}}}|Ireland|Republic of Ireland}}}}
| shortname alias = Ireland
| flag alias = Flag of Ireland.svg
| flag alias-1783 = Saint Patrick's Saltire.svg
| flag alias-4prov = Four Provinces Flag.svg
| flag alias-green = Green harp flag of Ireland.svg
| flag alias-football = Saint Patrick's Saltire.svg
| link alias-football = Ireland national football team (1882–1950)
| flag alias-hockey = Flag of Ireland hockey team.svg
| flag alias-field hockey = Flag of Ireland hockey team.svg
| flag alias-rugby union = IRFU flag.svg
| flag alias-rugby sevens = IRFU flag.svg
| flag alias-rugby league = Four Provinces Flag.svg
| flag alias-cricket = Cricket Ireland flag.svg
| link alias-cricket = Ireland {{{mw|}}} {{{age|}}} cricket team
| flag alias-quidditch = Flag of Quidditch Ireland.svg
| flag alias-air force=Flag of the Irish Air Corps.svg
| link alias-air force=Irish Air Corps
| link alias-naval=Irish Naval Service
| flag alias-military=Flag_of_the_Irish_Defence_Forces.svg
| link alias-military=Irish Defence Forces
| flag alias-army=Flag of the Irish Defence Forces.svg
| link alias-army=Irish Army
| flag alias-navy=Irish Naval Service Colour.svg
| link alias-navy=Irish Naval Service
| flag alias-coast guard=Coast Guard Flag (Ireland).svg
| link alias-coast guard=Irish Coast Guard
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1783
| var2 = green
| var3 = 4prov
| var4 = football
| var5 = rugby union
| var6 = hockey
| var7 = cricket
| redir1 = IRE
| redir2 = EIR
| related1 = Republic of Ireland
| related2 = Southern Ireland
| related3 = Kingdom of Ireland
| related4 = Lordship of Ireland
| related5 = Irish Free State
&lt;/noinclude&gt;
}}</text>
      <sha1>45wy0ag7e018o1wakxwk2jl9ql21cib</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Israel</title>
    <ns>10</ns>
    <id>8926665</id>
    <revision>
      <id>868196724</id>
      <parentid>868191261</parentid>
      <timestamp>2018-11-10T17:07:04Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="885">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Israel
| flag alias = Flag of Israel.svg
| flag alias-1948 = Flag of Israel (WFB 2004).gif
| flag alias-civil = Civil Ensign of Israel.svg
| flag alias-army=Flag of the Israeli Army (Land Arm).svg
| link alias-army=Israeli Army
| flag alias-tsahal = Flag of the Israel Defense Forces.svg
| flag alias-marines=Flag givati.svg
| link alias-marines=Givati Brigade
| flag alias-military=Flag of the Israel Defense Forces.svg
| link alias-military=Israel Defense Forces
| flag alias-naval = Naval Ensign of Israel.svg
| link alias-naval = Israeli Navy
| flag alias-air force = Israel Air Force Flag.svg
| link alias-air force = Israeli Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = ISR
| var1 = 1948
| var2 = civil
| var3 = tsahal
&lt;/noinclude&gt;
}}</text>
      <sha1>lg8vfzqs7zafqy1e7nibxfdjy19ssno</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Italia</title>
    <ns>10</ns>
    <id>41318286</id>
    <redirect title="Template:Country data Italy" />
    <revision>
      <id>597676872</id>
      <parentid>585329433</parentid>
      <timestamp>2014-03-01T15:27:00Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Add redirect category using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="84">#REDIRECT [[Template:Country data Italy]]
[[Category:Country data redirects|Italia]]</text>
      <sha1>ncp0ptpfl3mde5uu6kitedl4kb4tu7b</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Italy</title>
    <ns>10</ns>
    <id>8874885</id>
    <revision>
      <id>879768503</id>
      <parentid>861831183</parentid>
      <timestamp>2019-01-23T07:43:59Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="916">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Italy
| flag alias = Flag of Italy.svg
| flag alias-1861 = Flag of Italy (1861–1946).svg
| flag alias-1943 = War flag of the Italian Social Republic.svg
| flag alias-1946 = Flag of Italy.svg
| flag alias-2003 = Flag of Italy (2003–2006).svg
| flag alias-civil = Civil Ensign of Italy.svg
| flag alias-naval = Naval Ensign of Italy.svg
| link alias-naval = Marina Militare
| link alias-air force = Italian Air Force
| link alias-army = Italian Army
| link alias-roller hockey = Italy {{{mw}}} national roller hockey team
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
&lt;noinclude&gt;
| var1 = 1861
| var2 = 1943
| var3 = 1946
| var4 = 2003
| var5 = civil
| redir1 = ITA
| related1 = Kingdom of Italy
| related2 = Italian Social Republic
| related3 = Napoleonic Italy
&lt;/noinclude&gt;
}}</text>
      <sha1>91655lzf023pn5cry73idpw3q60u6wa</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Ivory Coast</title>
    <ns>10</ns>
    <id>8910088</id>
    <revision>
      <id>790818659</id>
      <parentid>790818587</parentid>
      <timestamp>2017-07-16T08:42:57Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <minor/>
      <comment>([[c:GR|GR]]) [[c:COM:FR|File renamed]]: [[File:Flag of the Ivory Coast (WFB 2009).gif]] → [[File:Flag of Côte d'Ivoire (WFB 2009).gif]] uploader requested</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="422">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Ivory Coast
| flag alias = Flag of Côte d'Ivoire.svg
| flag alias-1959 = Flag of Côte d'Ivoire (WFB 2009).gif
| flag alias-2004 = Flag of Cote d'Ivoire (WFB 2004).gif
| size = {{{size|}}}
| variant = {{{variant|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| var1 = 1959
| var2 = 2004
| redir1 = CIV
| redir2 = Côte d'Ivoire
&lt;/noinclude&gt;
}}</text>
      <sha1>ozz1zuui08layumgr5nuo3izlev6pc2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Jamaica</title>
    <ns>10</ns>
    <id>8926730</id>
    <revision>
      <id>874402150</id>
      <parentid>868135329</parentid>
      <timestamp>2018-12-19T01:11:54Z</timestamp>
      <contributor>
        <username>Jonesey95</username>
        <id>9755426</id>
      </contributor>
      <comment>files moved. See talk page.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="853">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Jamaica
| flag alias = Flag of Jamaica.svg
| flag alias-1906 = Flag of Jamaica (1906–1957).svg
| flag alias-1957 = Flag of Jamaica (1957–1962).svg
| flag alias-army = Flag of the Jamaica Defence Force.svg
| link alias-army = Jamaica Defence Force
| link alias-air force = Jamaica Defence Force Air Wing
| flag alias-air force = Ensign of the Jamaica Defence Force Air Wing.svg
| flag alias-coast guard = Naval Ensign of Jamaica.svg
| link alias-coast guard = Jamaica Defence Force Coast Guard
| flag alias-naval = Naval Ensign of Jamaica.svg
| link alias-naval = Jamaica Defence Force Coast Guard
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1906
| var2 = 1957
| redir1 = JAM
&lt;/noinclude&gt;
}}</text>
      <sha1>ri96nid1tomukfzepbv8rnsfe9j85e0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Japan</title>
    <ns>10</ns>
    <id>8926743</id>
    <revision>
      <id>868615698</id>
      <parentid>865217147</parentid>
      <timestamp>2018-11-13T10:32:12Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1691">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Japan
| flag alias = Flag of Japan.svg
| flag alias-1870 = Flag of Japan (1870-1999).svg
| link alias-1870 = Empire of Japan
| flag alias-1945 = Flag of Allied Occupied Japan.svg
| border-1945 =
| flag alias-1947 = Flag of Japan (1870-1999).svg
| flag alias-ryukyu = Flag of US Occupied Ryukyu Islands.svg
| border-ryukyu =
| flag alias-naval = Naval Ensign of Japan.svg
| flag alias-coast guard = Ensign of the Japanese Coast Guard.svg
| link alias-coast guard = Japan Coast Guard
| link alias-naval = Japan Maritime Self-Defense Force
| flag alias-army = Flag of JSDF.svg
| link alias-army  = Japan Ground Self-Defense Force
| flag alias-air force = Flag of the Japan Air Self-Defense Force.svg
| link alias-air force = Japan Air Self-Defense Force
| flag alias-air force-1955 = Flag of the Japan Air Self-Defense Force (1955-1957).png
| link alias-air force-1955 = Japan Air Self-Defense Force
| flag alias-air force-1957 = Flag of the Japan Air Self-Defense Force (1957-1972).png
| link alias-air force-1957 = Japan Air Self-Defense Force
| flag alias-air force-1972 = Flag of the Japan Air Self-Defense Force (1972-2001).png
| link alias-air force-1972 = Japan Air Self-Defense Force
| flag alias-military=Flag of the Japan Self-Defense Forces.svg
| link alias-military=Japan Self-Defense Forces
| flag alias-marines=Flag of JSDF.svg
| link alias-marines=Japanese Amphibious Rapid Deployment Brigade
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1870
| var2 = 1945
| var3 = 1947
| var4 = ryukyu
| redir1 = JPN
| related1 = Empire of Japan
&lt;/noinclude&gt;
}}</text>
      <sha1>aeedf1bk32jr5sykg0zw7fgqtz6pal6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Jordan</title>
    <ns>10</ns>
    <id>8926757</id>
    <revision>
      <id>793089579</id>
      <parentid>773841959</parentid>
      <timestamp>2017-07-30T15:33:25Z</timestamp>
      <contributor>
        <username>Sodacan</username>
        <id>8272776</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="516">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Jordan
| flag alias = Flag of Jordan.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
| flag alias-army=Royal Jordanian Army Flag.svg
| link alias-army=Royal Jordanian Army
| flag alias-air force=Air Force Ensign of Jordan.svg
| link alias-air force=Royal Jordanian Air Force
| flag alias-naval=Naval Ensign of Jordan.svg
| link alias-naval=Royal Jordanian Navy
&lt;noinclude&gt;
| redir1 = JOR
&lt;/noinclude&gt;
}}</text>
      <sha1>lrsm66rlxwbr3m1d6db3vncx47yyjjc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Kazakhstan</title>
    <ns>10</ns>
    <id>8926783</id>
    <revision>
      <id>895276064</id>
      <parentid>878869625</parentid>
      <timestamp>2019-05-03T04:20:51Z</timestamp>
      <contributor>
        <username>Jonesey95</username>
        <id>9755426</id>
      </contributor>
      <comment>add army flag</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="607">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Kazakhstan
| flag alias = Flag of Kazakhstan.svg
| flag alias-1991 = Flag of the Kazakh SSR.svg
| flag alias-1992 = Flag of Kazakhstan (1992).svg 
| flag alias-naval = Naval Ensign of Kazakhstan.svg
| link alias-naval = Kazakh Naval Forces
| flag alias-army = Flag of Armed Forces of the Republic of Kazakhstan.gif
| link alias-army = Kazakh Ground Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
| var1 = 1991
| var2 = 1992
&lt;noinclude&gt;
| redir1 = KAZ
| related1 = Kazakh SSR
&lt;/noinclude&gt;
}}</text>
      <sha1>pvdwjrer2vyoxnjhgad1rf4g1hq4bw0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Kenya</title>
    <ns>10</ns>
    <id>8926799</id>
    <revision>
      <id>882140999</id>
      <parentid>868133376</parentid>
      <timestamp>2019-02-07T02:42:13Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Fry1989]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="892">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Kenya
| flag alias = Flag of Kenya.svg
| flag alias-colonial = Flag of Kenya (1921–1963).svg
| flag alias-kdf = Flag of the Kenya Defence Forces.svg
| flag alias-1895 = Flag of Kenya (1895–1921).svg
| flag alias-naval = Naval Ensign of Kenya.svg
| link alias-naval = Kenya Navy
| flag alias-military=Flag of the Kenya Defence Forces.svg
| link alias-military=Kenya Defence Forces
| flag alias-navy=Presidential Colour of the Kenyan Navy.svg
| link alias-navy=Kenya Navy
| flag alias-air force = Air Force Ensign of Kenya.svg
| link alias-air force= Kenya Air Force
| flag alias-army = Flag of the Kenyan Army.png
| link alias-army = Kenya Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| var2 = kdf
| var3 = 1895
| redir1 = KEN
&lt;/noinclude&gt;
}}</text>
      <sha1>7ovnonte3kwanlz42zfb1qz4rpilr1a</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Kiribati</title>
    <ns>10</ns>
    <id>8926811</id>
    <revision>
      <id>577855862</id>
      <parentid>177505160</parentid>
      <timestamp>2013-10-19T15:46:01Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Kiribati: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="217">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Kiribati
| flag alias = Flag of Kiribati.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = KIR
&lt;/noinclude&gt;
}}</text>
      <sha1>7u91sxbkcwqmi9izwjkjebfsvns0k2j</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Kuwait</title>
    <ns>10</ns>
    <id>8926859</id>
    <revision>
      <id>879937711</id>
      <parentid>610639775</parentid>
      <timestamp>2019-01-24T10:08:29Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Addded variants per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="595">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Kuwait
| flag alias = Flag of Kuwait.svg
| flag alias-1844 = Flag of the Ottoman Empire.svg
| flag alias-1914 = Flag of Kuwait 1914-1921.png
| flag alias-1921 = Flag of Kuwait 1921-1940.png
| flag alias-1940 = Flag of Kuwait 1940-1961.png
| flag alias-naval-1956 = Maritime Ensign of Kuwait 1956-1961.png
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1844
| var2 = 1914
| var3 = 1921
| var4 = 1940
| var5 = naval-1956
| redir1 = KWT
| redir2 = KUW
&lt;/noinclude&gt;
}}</text>
      <sha1>drc5vddaoxxjfvvbbv72avi0m4cl6i8</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Kyrgyzstan</title>
    <ns>10</ns>
    <id>8926894</id>
    <revision>
      <id>848819067</id>
      <parentid>693695399</parentid>
      <timestamp>2018-07-04T14:59:55Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="471">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Kyrgyzstan
| flag alias = Flag of Kyrgyzstan.svg
| flag alias-1991 = Flag of Kyrgyzstan (1991-1992).svg
| flag alias-army = Military Ensign of Kyrgyz Armed Forces (Kyrgyz).svg
| link alias-army = Kyrgyz Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
| var1 = 1991
&lt;noinclude&gt;
| redir1 = KGZ
| related1 = Kirghiz SSR
&lt;/noinclude&gt;
}}</text>
      <sha1>o9b5u9lrh1zfk3ceim1r4nt2d3x1g8f</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Laos</title>
    <ns>10</ns>
    <id>8986243</id>
    <revision>
      <id>848819210</id>
      <parentid>847482691</parentid>
      <timestamp>2018-07-04T15:01:18Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="467">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Laos
| flag alias = Flag of Laos.svg
| flag alias-colonial = Flag of French Laos.svg
| flag alias-1952 = Flag of Laos (1952-1975).svg
| link alias-naval = Lao People's Navy
| link alias-army = Lao People's Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| var2 = 1952
| redir1 = LAO
&lt;/noinclude&gt;
}}</text>
      <sha1>0zunt0v6hb3js6tlwu3ijs3bel99m1f</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Latvia</title>
    <ns>10</ns>
    <id>8878016</id>
    <revision>
      <id>848819338</id>
      <parentid>588431959</parentid>
      <timestamp>2018-07-04T15:02:34Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="410">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Latvia
| flag alias = Flag of Latvia.svg
| flag alias-naval = Naval Ensign of Latvia.svg
| link alias-naval = Latvian Naval Forces
| link alias-army = Latvian Land Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = LVA
| redir2 = LAT
| related1 = Latvian SSR
&lt;/noinclude&gt;
}}</text>
      <sha1>4o4i89sf8947dqygip16antaya4qcsd</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Lebanon</title>
    <ns>10</ns>
    <id>8933358</id>
    <revision>
      <id>895208571</id>
      <parentid>873881037</parentid>
      <timestamp>2019-05-02T18:19:22Z</timestamp>
      <contributor>
        <username>Jonesey95</username>
        <id>9755426</id>
      </contributor>
      <comment>add 1918 flag</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="614">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Lebanon
| flag alias = Flag of Lebanon.svg
| flag alias-air force=Flag of the Lebanese Air Force.svg
| link alias-air force=Lebanese Air Force
| flag alias-army=Lebanesearmyfirstflag.png
| link alias-army=Lebanese Ground Forces
| link alias-naval=Lebanese Navy
| flag alias-1918=Cedar flag.svg
| var1 = 1918 
| flag alias-1920=Lebanese French flag.svg
| link alias-1920=Greater Lebanon
| var2 = 1920
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = LBN
| redir2 = LIB
&lt;/noinclude&gt;
}}</text>
      <sha1>9soxxryahqy27n0xqcmamdvrzr72kqw</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Lesotho</title>
    <ns>10</ns>
    <id>8933371</id>
    <revision>
      <id>897989106</id>
      <parentid>897463513</parentid>
      <timestamp>2019-05-20T17:11:29Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added air force</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="555">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Lesotho
| flag alias = Flag of Lesotho.svg
| flag alias-colonial = Unofficial Basutoland Ensign.svg
| flag alias-1966 = Flag of Lesotho (1966–1987).svg
| flag alias-1987 = Flag of Lesotho (1987-2006).svg
| link alias-air force = Lesotho Defence Force – Air Squadron{{!}}Lesotho Air Squadron
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| var2 = 1966
| var3 = 1987
| redir1 = LSO
| redir2 = LES
&lt;/noinclude&gt;
}}</text>
      <sha1>p9ocjrxzk6thv33372nyml1jj17nb15</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Liberia</title>
    <ns>10</ns>
    <id>8933375</id>
    <revision>
      <id>577856376</id>
      <parentid>177506033</parentid>
      <timestamp>2013-10-19T15:50:28Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Liberia: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="215">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Liberia
| flag alias = Flag of Liberia.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = LBR
&lt;/noinclude&gt;
}}</text>
      <sha1>7iq0um334g9yob8hr3ysksejpyawduw</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Libya</title>
    <ns>10</ns>
    <id>8986258</id>
    <revision>
      <id>879313120</id>
      <parentid>868192643</parentid>
      <timestamp>2019-01-20T12:08:21Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Removed WFB flags per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1344">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Libya
| flag alias = Flag of Libya.svg
| flag alias-1864 = Flag of Vilayet-i Trablusgarp.svg
| flag alias-1911 = Flag of Italy (1861–1946).svg
| flag alias-1949 = Flag of Cyrenaica.svg
| flag alias-1951 = Flag of Libya (1951–1969).svg
| flag alias-1969 = Flag of Libya (1969–1972).svg
| flag alias-1972 = Flag of Libya (1972–1977).svg
| flag alias-1977 = Flag of Libya (1977–2011).svg
| flag alias-transition = Flag of Libya (2011 combined).svg
| flag alias-air force = Flag of the Libyan Air Force.svg
| flag alias-army = Flag of the Libyan Ground Forces.svg
| flag alias-naval = Naval Ensign of Libya.svg
| flag alias-navy = Flag of the Libyan Navy.svg
| link alias-navy = Libyan Navy
| flag alias-military = Flag of the Libyan Ground Forces.svg
| link alias-military = Libyan National Army
| link alias-army= Libyan Ground Forces
| link alias-air force = Libyan Air Force
| link alias-naval = Libyan Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1864
| var2 = 1911
| var3 = 1949
| var4 = 1951
| var5 = 1969
| var6 = 1972
| var7 = 1977
| var11 = transition
| redir1 = LBY
| redir2 = LBA
| related1 = Libyan Arab Jamahiriya
| related2 = Italian Libya
| related3 = Kingdom of Libya
&lt;/noinclude&gt;
}}</text>
      <sha1>11lryb478yl7ygfzwzi11vtblwm26aw</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Liechtenstein</title>
    <ns>10</ns>
    <id>8933399</id>
    <revision>
      <id>610639982</id>
      <parentid>577855805</parentid>
      <timestamp>2014-05-29T13:17:36Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Removed redundant interwikis ([[d:Q5613450]]) using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="470">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Liechtenstein
| flag alias = Flag of Liechtenstein.svg
| flag alias-1719 = Flag of Liechtenstein (1719-1852).svg
| flag alias-1852 = Flag of Liechtenstein (1852-1921).svg
| flag alias-1921 = Flag of Liechtenstein (1921-1937).svg
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| var1 = 1719
| var2 = 1852
| var3 = 1921
| redir1 = LIE
&lt;/noinclude&gt;
}}</text>
      <sha1>0i6cpiepu1c586sdzakph10o71mvfbf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Lithuania</title>
    <ns>10</ns>
    <id>8878069</id>
    <revision>
      <id>868395143</id>
      <parentid>868393250</parentid>
      <timestamp>2018-11-11T22:52:58Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <comment>superseded ([[Commons:Commons:GlobalReplace|GlobalReplace v0.6.5]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1009">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Lithuania
| flag alias = Flag of Lithuania.svg
| flag alias-1918 = Flag of Lithuania 1918-1940.svg
| flag alias-1988 = Flag of Lithuania (1988-2004).svg
| flag alias-naval = Naval Ensign of Lithuania.svg
| link alias-naval = Lithuanian Naval Force
| link alias-basketball = Lithuania {{{mw|men's}}} national {{{age|}}} basketball team
| flag alias-military=Flag of the Lithuanian Armed Forces.png
| link alias-military=Lithuanian Armed Forces
| flag alias-army = Flag of the Lithuanian Army.svg
| link alias-army = Lithuanian Land Force
| flag alias-navy=Flag of Lithuania (state).svg
| link alias-navy = Lithuanian Naval Force
| flag alias-air force=Air Force Ensign of Lithuania.svg
| link alias-air force=Lithuanian Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1918
| var2 = 1988
| redir1 = LTU
| related1 = Lithuanian SSR
&lt;/noinclude&gt;
}}</text>
      <sha1>gtls7wrl5xn8quea4o2cooqk0xl6y0s</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Luxembourg</title>
    <ns>10</ns>
    <id>8878108</id>
    <revision>
      <id>639259320</id>
      <parentid>639259131</parentid>
      <timestamp>2014-12-23T00:16:50Z</timestamp>
      <contributor>
        <username>Mjroots</username>
        <id>408438</id>
      </contributor>
      <comment>variant</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="315">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Luxembourg
| flag alias = Flag of Luxembourg.svg
| flag alias-civil = Civil Ensign of Luxembourg.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = LUX
| var1 = civil
&lt;/noinclude&gt;
}}</text>
      <sha1>i9yqvt9puxbajdbaky700hep4l8x5sb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Macedonia</title>
    <ns>10</ns>
    <id>8878687</id>
    <revision>
      <id>898274860</id>
      <parentid>892844759</parentid>
      <timestamp>2019-05-22T14:58:15Z</timestamp>
      <contributor>
        <username>Cabayi</username>
        <id>6561336</id>
      </contributor>
      <comment>per cmt</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="569">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Republic of Macedonia
| shortname alias = Macedonia
| flag alias = Flag of North Macedonia.svg
| flag alias-1992 = Flag of North Macedonia (1992–1995).svg
| link alias-football = North Macedonia {{{mw|}}} national {{{age|}}} football team
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar={{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1992
| redir1 = Republic of Macedonia
| related1 = Socialist Republic of Macedonia
| related2 = North Macedonia
&lt;/noinclude&gt;
}}</text>
      <sha1>873ctj9s18rhi7n0siey8lxqsgehtro</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Madagascar</title>
    <ns>10</ns>
    <id>8933419</id>
    <revision>
      <id>619014777</id>
      <parentid>619014761</parentid>
      <timestamp>2014-07-29T19:10:03Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Documenting variant</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="316">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Madagascar
| flag alias = Flag of Madagascar.svg
| flag alias-1896 = Flag of France.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1896
| redir1 = MDG
| redir2 = MAD
&lt;/noinclude&gt;
}}</text>
      <sha1>jhnne5m3fu798b481blpzavppw26dl7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Malawi</title>
    <ns>10</ns>
    <id>8933429</id>
    <revision>
      <id>917359086</id>
      <parentid>632574286</parentid>
      <timestamp>2019-09-23T13:34:13Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Malawi_(2010-2012).svg with [[File:Flag_of_Malawi_(2010–2012).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: Correct hyphen to dash.).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="463">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Malawi
| flag alias = Flag of Malawi.svg
&lt;!-- 1964 variant identical to current flag: | flag alias-1964 = Flag of Malawi 1964-2010.svg --&gt;
| flag alias-2010 = Flag of Malawi (2010–2012).svg
| link alias-army = Malawian Defence Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 2010
| redir1 = MWI
| redir2 = MAW
&lt;/noinclude&gt;
}}</text>
      <sha1>bp3l1quxmdpwnx5oodt48pqilpp71n2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Malaysia</title>
    <ns>10</ns>
    <id>8933440</id>
    <revision>
      <id>746072415</id>
      <parentid>738517389</parentid>
      <timestamp>2016-10-25T03:14:44Z</timestamp>
      <contributor>
        <username>Andy M. Wang</username>
        <id>516856</id>
      </contributor>
      <comment>answering part of TPER on talk, adding related templates</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="887">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Malaysia
| flag alias = Flag of Malaysia.svg
| flag alias-1895 = Flag of the Federated Malay States (1895 - 1946).svg
| flag alias-1948 = Flag of Malaya.svg
| flag alias-naval = Naval Ensign of Malaysia.svg
| link alias-naval = Royal Malaysian Navy
| flag alias-air force = Royal Malaysian Air Force Flag.svg
| link alias-air force = Royal Malaysian Air Force
| flag alias-civil = Civil Ensign of Malaysia.svg
| link alias-civil = Malaysia
| flag alias-army = Flag of the Malaysian Army.svg
| link alias-army =Malaysian Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1895
| var2 = 1948
| var3 = civil
| redir1 = MYS
| redir2 = MAS
| related1 = Malaya
| related2 = Malayan Union
| related3 = Kingdom of Sarawak
| related4 = North Borneo
&lt;/noinclude&gt;
}}</text>
      <sha1>hj6aqzocxzycjfsztuxjifx577fsipu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Maldives</title>
    <ns>10</ns>
    <id>8933450</id>
    <revision>
      <id>577855745</id>
      <parentid>319676409</parentid>
      <timestamp>2013-10-19T15:45:05Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Maldives: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="217">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Maldives
| flag alias = Flag of Maldives.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = MDV
&lt;/noinclude&gt;
}}</text>
      <sha1>h0ndd64l5mpl2h1n2xc50ktkica4km1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Mali</title>
    <ns>10</ns>
    <id>8933489</id>
    <revision>
      <id>844515023</id>
      <parentid>611383991</parentid>
      <timestamp>2018-06-05T12:30:23Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Mali_1959-1961.svg with [[File:Flag_of_Mali_(1959-1961).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: [[:c:COM:FR#FR4|Criterion 4]] (harmonizing names of file set)).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="299">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Mali
| flag alias = Flag of Mali.svg
| flag alias-1959 = Flag of Mali (1959-1961).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1959
| redir1 = MLI
&lt;/noinclude&gt;
}}</text>
      <sha1>auu0wo4lbub13p4c2zppeccz6jzpge7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Malta</title>
    <ns>10</ns>
    <id>8878749</id>
    <revision>
      <id>865509262</id>
      <parentid>858420557</parentid>
      <timestamp>2018-10-24T10:45:57Z</timestamp>
      <contributor>
        <username>Galobtter</username>
        <id>19502780</id>
      </contributor>
      <comment>hyphen to dash in file names per request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="940">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Malta
| flag alias = Flag of Malta.svg
| flag alias-1875 = Flag of Malta (1875–1898).svg
| flag alias-1898 = Flag of Malta (1898–1923).svg
| flag alias-1923 = Flag of Malta (1923–1943).svg
| flag alias-1943 = Flag of Malta (1943–1964).svg
| flag alias-colonial = Flag of Malta (1943-1964).svg &lt;!-- deprecated, but in use --&gt;
| flag alias-civil = Civil Ensign of Malta.svg
| link alias-naval = Maritime Squadron of the Armed Forces of Malta
| link alias-navy = Maritime Squadron of the Armed Forces of Malta
| flag alias-navy =Naval Jack of Malta.svg
| flag alias-1814 = 19th Century Flag of Malta.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1875
| var2 = 1898
| var3 = 1923
| var4 = 1943
| var5 = civil
| var6 = 1814
| redir1 = MLT
| related1 = Sovereign Military Order of Malta
&lt;/noinclude&gt;
}}</text>
      <sha1>lc84gt4tusn4xlsioci9hwhhqppbybi</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Marshall Islands</title>
    <ns>10</ns>
    <id>8938805</id>
    <revision>
      <id>630963022</id>
      <parentid>616344812</parentid>
      <timestamp>2014-10-24T18:28:02Z</timestamp>
      <contributor>
        <username>Andrwsc</username>
        <id>898126</id>
      </contributor>
      <comment>use standard US flag, no 1979 variant (same as current)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="764">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Marshall Islands
| flag alias = Flag of the Marshall Islands.svg
| flag alias-1944 = US flag 48 stars.svg
| flag alias-1947 = Flag of the United Nations (1945-1947).svg
| flag alias-1948 = Flag of the United Nations.svg
| flag alias-1959 = US flag 49 stars.svg
| flag alias-1960 = Flag of the United States.svg
| flag alias-1965 = Flag of the Trust Territory of the Pacific Islands.svg
| link alias-naval = Marshall Islands Marine Resources Authority|Marshall Islands MRA
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| var1 = 1944
| var2 = 1947
| var3 = 1948  
| var4 = 1959  
| var5 = 1960   
| var6 = 1965  
| redir1 = MHL
&lt;/noinclude&gt;
}}</text>
      <sha1>d70a7b6mdx0lu9mn29u0pf1qy2puex9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Mauritania</title>
    <ns>10</ns>
    <id>8938860</id>
    <revision>
      <id>853234053</id>
      <parentid>794568842</parentid>
      <timestamp>2018-08-03T09:21:36Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added navy</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="370">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Mauritania
| flag alias = Flag of Mauritania.svg
| flag alias-1959=Flag of Mauritania (1959–2017).svg
| link alias-naval = Mauritanian Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1959
| redir1 = MRT
| redir2 = MTN
&lt;/noinclude&gt;
}}</text>
      <sha1>fr4tmlsx2bdnw412ov818usefs52lln</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Mauritius</title>
    <ns>10</ns>
    <id>8938897</id>
    <revision>
      <id>898738347</id>
      <parentid>881442754</parentid>
      <timestamp>2019-05-25T16:05:11Z</timestamp>
      <contributor>
        <username>Sodacan</username>
        <id>8272776</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="643">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Mauritius
| flag alias = Flag of Mauritius.svg
| flag alias-1869 = Flag of Mauritius (1869–1906).svg
| flag alias-1906 = Flag of Mauritius (1906–1923).svg
| flag alias-1923 = Flag of Mauritius (1923–1968).svg
| flag alias-civil = Civil Ensign of Mauritius.svg
| flag alias-naval = Naval Ensign of Mauritius.svg
| link alias-naval = National Coast Guard of Mauritius
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1869
| var2 = 1906
| var3 = 1923
| var4 = civil
| redir1 = MUS
| redir2 = MRI
&lt;/noinclude&gt;
}}</text>
      <sha1>bsmk6q3gvxv156ps7u1f95xatnunz8t</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Mexico</title>
    <ns>10</ns>
    <id>8938953</id>
    <revision>
      <id>879317141</id>
      <parentid>869531350</parentid>
      <timestamp>2019-01-20T12:50:06Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Changed variants &amp; removed WFB flags per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1340">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Mexico
| flag alias = Flag of Mexico.svg
| flag alias-1821a = Flag of the Three Guarantees.svg
| flag alias-1821 = Bandera del Primer Imperio Mexicano.svg
| flag alias-1823 = Flag of Mexico (1823-1864, 1867-1893).svg
| flag alias-1864 = Flag of Mexico (1864-1867).svg
| flag alias-1867 = Flag of Mexico (1823-1864, 1867-1893).svg
| flag alias-1893 = Flag of Mexico (1893-1916).svg
| flag alias-1916 = Flag of the United Mexican States (1916-1934).svg
| flag alias-1934 = Flag of Mexico (1934-1968).svg
| flag alias-air force = Flag of the Mexican Air Force.svg
| flag alias-army = Flag of the Mexican Army.svg
| link alias-army = Mexican Army
| link alias-air force = Mexican Air Force
| link alias-naval = Mexican Navy
| flag alias-coast guard = SBRMsemarflag.png
| link alias-coast guard = Mexican Maritime Search and Rescue
| flag alias-navy = Naval Jack of Mexico.svg
| link alias-navy = Mexican Navy
| flag alias-marines = Estandarte Infantería de Marina de México.svg
| link alias-marines = Mexican Naval Infantry Corps
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1821a
| var2 = 1821
| var3 = 1823
| var4 = 1864
| var5 = 1867
| var6 = 1893
| var7 = 1916
| var8 = 1934
| redir1 = MEX
&lt;/noinclude&gt;
}}</text>
      <sha1>rhcvq6axfzst14do99kzh8lylrn4m12</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Moldova</title>
    <ns>10</ns>
    <id>8942688</id>
    <revision>
      <id>917270170</id>
      <parentid>884889446</parentid>
      <timestamp>2019-09-23T02:07:05Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>per request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1093">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Moldova
| flag alias = Flag of Moldova.svg
| flag alias-1346 = Flag of Moldavia.svg
| flag alias-1917 = Flag of the Moldavian Democratic Republic.svg
| flag alias-1925 = Flag of Moldavian Autonomous Soviet Socialist Republic (1925-1932).svg
| flag alias-1937 = Flag of Moldavian Autonomous Soviet Socialist Republic (1937-1938).svg
| flag alias-1938 = Flag of Moldavian Autonomous Soviet Socialist Republic.svg
| flag alias-1940 = Flag of the Moldavian Soviet Socialist Republic (1941-1952).svg
| flag alias-1952 = Flag of Moldavian SSR.svg
| flag alias-1990 = Flag of Moldova.svg
| flag alias-army = Moldovan Army Flag.gif
| link alias-army = Moldovan Ground Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
|var1 = 1346
|var2 = 1917
|var3 = 1925
|var4 = 1937
|var5 = 1938
|var6 = 1940
|var7 = 1952
|var8 = 1990
| redir1 = MDA
| redir2 = Republic of Moldova
| related1 = Moldavian SSR
| related2 = Moldavian Democratic Republic
| related3 = Moldavia
&lt;/noinclude&gt;
}}</text>
      <sha1>93ukto29ucr7pr36h96nu8i5p9xc71q</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Mongolia</title>
    <ns>10</ns>
    <id>8942739</id>
    <revision>
      <id>899042126</id>
      <parentid>885652950</parentid>
      <timestamp>2019-05-27T14:23:31Z</timestamp>
      <contributor>
        <username>Izno</username>
        <id>2927383</id>
      </contributor>
      <comment>per tper</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1040">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Mongolia
| flag alias = Flag of Mongolia.svg
| flag alias-1911 = Flag of Bogd Khaanate Mongolia.svg | border-1911 =
| flag alias-1924 = Flag of the People's Republic of Mongolia (1924-1930).svg | border-1924 =
| flag alias-1930 = Flag of the People's Republic of Mongolia (1930-1940).svg | border-1930 =
| flag alias-1940 = Flag of the People's Republic of Mongolia (1940-1945).svg
| flag alias-1945 = Flag of the People's Republic of Mongolia (1945-1992).svg
| flag alias-1949 = Flag of the People's Republic of Mongolia (1945-1992).svg
| flag alias-1992 = Flag of Mongolia (1992–2011).svg
| link alias-army = Mongolian General Purpose Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1911
| var2 = 1924
| var3 = 1930
| var4 = 1940
| var5 = 1945
| var6 = 1992
| redir1 = MNG
| redir2 = MGL
&lt;/noinclude&gt;
}}{{#ifeq:{{{variant|}}}|1949|[[Category:Pages with tracked country data flag variants|Mongolia]]}}</text>
      <sha1>jl6mc2ggbxoc8qdgjjclt4u2ipcs8u7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Montenegro</title>
    <ns>10</ns>
    <id>8878886</id>
    <revision>
      <id>848832944</id>
      <parentid>577856159</parentid>
      <timestamp>2018-07-04T17:10:23Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="606">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Montenegro
| flag alias = Flag of Montenegro.svg
| flag alias-1993 = Flag of Montenegro (1993-2004).svg
| flag alias-naval = Flag of the Navy of Montenegro.svg
| link alias-naval = Montenegrin Navy
| link alias-army = Montenegrin Ground Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1993
| redir1 = MNE
| related1 = Principality of Montenegro
| related2 = Kingdom of Montenegro
| related3 = Kingdom of Montenegro (1941–1944)
| related4 = SR Montenegro
&lt;/noinclude&gt;
}}</text>
      <sha1>r590jx7ot4etljkgbfac61p55cr3c6f</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Morocco</title>
    <ns>10</ns>
    <id>8942781</id>
    <revision>
      <id>848819678</id>
      <parentid>578182916</parentid>
      <timestamp>2018-07-04T15:05:41Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="916">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Morocco
| flag alias = Flag of Morocco.svg
| flag alias-780 = Flag of Morocco (780 1070) (1258 1659).svg
| flag alias-1073 = Flag of Morocco 1073 1147.svg
| flag alias-1147 = Flag of Morocco 1147 1269.svg
| flag alias-1258 = Flag of Morocco 1258 1659.svg
| flag alias-1666 = Flag of Morocco 1666 1915.svg
| flag alias-1913 = Flag of Spanish Morocco.svg
| flag alias-civil = Civil Ensign of Morocco.svg
| flag alias-naval = Naval Ensign of Morocco.svg
| link alias-naval = Royal Moroccan Navy
| flag alias-army = Flag of the Royal Moroccan Army.svg
| link alias-army = Royal Moroccan Army
| border-780 =
| border-1073 =
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 780
| var2 = 1073
| var3 = 1147
| var4 = 1258
| var5 = 1666
| var6 = 1913
| var7 = civil
| redir1 = MAR
&lt;/noinclude&gt;
}}</text>
      <sha1>m19owfufrrvnu58mdhyxpks0a0p9ipd</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Mozambique</title>
    <ns>10</ns>
    <id>8942803</id>
    <revision>
      <id>898070405</id>
      <parentid>814511630</parentid>
      <timestamp>2019-05-21T05:53:24Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Mozambique_(1975-1983).svg with [[File:Flag_of_Mozambique_(1975–1983).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]:).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="588">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Mozambique
| flag alias = Flag of Mozambique.svg
| flag alias-1974 = Flag of Mozambique (1974-1975).svg
| flag alias-1975 = Flag of Mozambique (1975–1983).svg
| flag alias-1983 = Flag of Mozambique (1983).svg
| flag alias-1984 = Flag of Mozambique (WFB 2000).jpg
| flag alias-2004 = Flag of Mozambique (WFB 2004).gif
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1974
| var2 = 1975
| var3 = 1983
| var4 = 1984
| var5 = 2004
| redir1 = MOZ
&lt;/noinclude&gt;
}}</text>
      <sha1>i30kx850p0wlbqx8o5ebhpmwi4lamvc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Myanmar</title>
    <ns>10</ns>
    <id>17622123</id>
    <revision>
      <id>898947013</id>
      <parentid>868132921</parentid>
      <timestamp>2019-05-26T22:56:33Z</timestamp>
      <contributor>
        <username>Dreamy Jazz</username>
        <id>27131311</id>
      </contributor>
      <comment>Per [[Special:Diff/898946256|edit request]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1112">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Myanmar
| shortname alias = {{{shortname alias|Myanmar}}}
| flag alias = Flag of Myanmar.svg
| flag alias-1937 = British Burma 1937 flag.svg
| flag alias-1943 = Flag of the State of Burma (1943-45).svg
| flag alias-1948 = Flag of Burma (1948–1974).svg
| flag alias-1974 = Flag of Myanmar (1974–2010).svg
| flag alias-military=Flag of the Myanmar Armed Forces.svg
| link alias-military=Tatmadaw
| flag alias-naval = Naval Ensign of Myanmar.svg
| link alias-air force = Myanmar Air Force
| flag alias-army = Army Flag of Myanmar.svg
| flag alias-air force = Air Force Ensign of Myanmar.svg
| link alias-army = Myanmar Army
| link alias-naval = Myanmar Navy
| flag alias-coast guard = Flag of the Myanmar Police Force.svg
| link alias-coast guard = Myanmar Police Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1937
| var2 = 1943
| var3 = 1948
| var4 = 1974
| related1 = Burma
| related2 = British Burma
| related3 = Konbaung Dynasty
&lt;/noinclude&gt;
}}</text>
      <sha1>rssqyd6gxfrl473n7buybch9mrh20vs</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Namibia</title>
    <ns>10</ns>
    <id>8942858</id>
    <revision>
      <id>865911430</id>
      <parentid>865911228</parentid>
      <timestamp>2018-10-27T00:23:13Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="443">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Namibia
| flag alias = Flag of Namibia.svg
| link alias-army = Namibian Army
| link alias-naval = Namibian Navy
| flag alias-1990=Wa-lgflag.jpg
| flag alias-2004=Flag of Namibia (WFB 2004).gif
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
&lt;noinclude&gt;
| var1= 1990
| var2= 2004
| redir1 = NAM
&lt;/noinclude&gt;
}}</text>
      <sha1>02hugiy6lh8c0ffbky0x7lew8ahqo5p</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Nauru</title>
    <ns>10</ns>
    <id>8942893</id>
    <revision>
      <id>577856121</id>
      <parentid>177506210</parentid>
      <timestamp>2013-10-19T15:48:20Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Nauru: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="297">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Nauru
| flag alias = Flag of Nauru.svg
| link alias-football = Nauru {{{mw|}}} national soccer team
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
&lt;noinclude&gt;
| redir1 = NRU
&lt;/noinclude&gt;
}}</text>
      <sha1>ijyvz963dy4u3cttqptz44zptvmh6ir</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Nepal</title>
    <ns>10</ns>
    <id>8942923</id>
    <revision>
      <id>922580291</id>
      <parentid>922460430</parentid>
      <timestamp>2019-10-23T00:46:03Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>size parameter</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="541">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Nepal
| flag alias = Flag of Nepal.svg
| flag alias-old = Flag of Nepal (1775–1962).svg
| link alias-army = Nepalese Army
| border =
| size = {{{size|}}}
| size flag alias = 23x20px
| size flag alias-old = 23x20px
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = old
| redir1 = NPL
| redir2 = NEP
| redir3 = Federal Democratic Republic of Nepal
&lt;/noinclude&gt;
}}&lt;noinclude&gt;
&lt;!-- INTERWIKIS GO TO WIKIDATA, THANK YOU! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>awtmrg7okyd6oj0xylrw9cdmr9nne71</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Netherlands</title>
    <ns>10</ns>
    <id>8878970</id>
    <revision>
      <id>878008766</id>
      <parentid>868129037</parentid>
      <timestamp>2019-01-12T10:55:09Z</timestamp>
      <contributor>
        <username>Cabayi</username>
        <id>6561336</id>
      </contributor>
      <comment>Per [[Special:Permalink/878008740#Template-protected edit request on 8 January 2019|request]] by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="940">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Netherlands
| flag alias = Flag of the Netherlands.svg
| flag alias-prinsengeus = Naval Jack of the Netherlands.svg
| flag alias-army =Flag of the Royal Netherlands Army.svg
| flag alias-air force=Flag of the Royal Netherlands Air Force.svg
| link alias-air force= Royal Netherlands Air Force
| link alias-army= Royal Netherlands Army
| link alias-naval = Royal Netherlands Navy
| flag alias-navy = Naval Jack of the Netherlands.svg
| link alias-navy=Royal Netherlands Navy
| flag alias-marines = Naval Jack of the Netherlands.svg
| link alias-marines = Netherlands Marine Corps
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = prinsengeus
| redir1 = NLD
| redir2 = NED
| redir3 = The Netherlands
| related1 = Kingdom of the Netherlands
| related2 = Dutch Republic
| related3 = Batavian Republic
&lt;/noinclude&gt;
}}</text>
      <sha1>3bmej0jtffujsgp8jp4wmdc2xm46kxi</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data New Zealand</title>
    <ns>10</ns>
    <id>8950807</id>
    <revision>
      <id>847723801</id>
      <parentid>847722933</parentid>
      <timestamp>2018-06-27T10:21:10Z</timestamp>
      <contributor>
        <username>Grutness</username>
        <id>117878</id>
      </contributor>
      <comment>adding 1867 civil ensign</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="810">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = New Zealand
| flag alias = Flag of New Zealand.svg
| flag alias-1834 = Flag of the United Tribes of New Zealand.svg
| flag alias-civil-1867 = Flag of New Zealand Government Ships 1867.svg
| flag alias-civil = Civil Ensign of New Zealand.svg
| flag alias-naval = Naval Ensign of New Zealand.svg
| flag alias-naval-1941 = Naval Ensign of the United Kingdom.svg
| link alias-naval = Royal New Zealand Navy
| flag alias-air force = Air Force Ensign of New Zealand.svg
| link alias-air force = Royal New Zealand Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1834
| var2 = civil-1867
| var3 = civil
| var4 = naval-1941
| redir1 = NZL
&lt;/noinclude&gt;
}}</text>
      <sha1>531axjxtf3u4i56gqdxcjyppof3cn3z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Nicaragua</title>
    <ns>10</ns>
    <id>8952986</id>
    <revision>
      <id>904014842</id>
      <parentid>845511922</parentid>
      <timestamp>2019-06-29T11:35:36Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Nicaragua_(1908-1971).svg with [[File:Flag_of_Nicaragua_(1908–1971).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]:).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="655">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Nicaragua
| flag alias = Flag of Nicaragua.svg
| flag alias-1839 = Flag of Nicaragua (1839-1858).svg
| flag alias-1858 = Flag of Nicaragua (1858-1889 and 1893-1896).svg
| flag alias-1889 = Flag of Nicaragua (1889-1893).svg
| flag alias-1896 = Flag of Nicaragua (1896-1908).svg
| flag alias-1908 = Flag of Nicaragua (1908–1971).svg
| link alias-naval =  Nicaraguan Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1839
| var2 = 1858
| var3 = 1889
| var4 = 1896
| var5 = 1908
| redir1 = NIC
| redir2 = NCA
&lt;/noinclude&gt;
}}</text>
      <sha1>hmsp5ytw7y0465mlr1lq71weucikfbb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Niger</title>
    <ns>10</ns>
    <id>8953002</id>
    <revision>
      <id>577856032</id>
      <parentid>177505816</parentid>
      <timestamp>2013-10-19T15:47:38Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Niger: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="226">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Niger
| flag alias = Flag of Niger.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = NER
| redir2 = NIG
&lt;/noinclude&gt;
}}</text>
      <sha1>3zy1kdvsl7te2nsb6ntc0fxbevlrx5u</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Nigeria</title>
    <ns>10</ns>
    <id>8953026</id>
    <revision>
      <id>871389845</id>
      <parentid>868751491</parentid>
      <timestamp>2018-11-30T18:51:39Z</timestamp>
      <contributor>
        <username>Cabayi</username>
        <id>6561336</id>
      </contributor>
      <comment>flag moved on commons, req by [[User:Fry1989]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="721">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Nigeria
| flag alias = Flag of Nigeria.svg
| flag alias-colonial = Flag of Nigeria (1914–1952).svg
| flag alias-naval = Naval Ensign of Nigeria.svg
| link alias-naval = Nigerian Navy
| flag alias-army  = Flag of the Nigerian Army Headquarters.svg
| link alias-army  = Nigerian Army
| flag alias-military=Flag of the Nigerian Armed Forces.svg
| link alias-military=Nigerian Armed Forces
| flag alias-air force = Air Force Ensign of Nigeria.svg
| link alias-air force = Nigerian Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| redir1 = NGA
| redir2 = NGR
&lt;/noinclude&gt;
}}</text>
      <sha1>mrco0hg4sl1th891f9sk5clwrxwliab</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Niue</title>
    <ns>10</ns>
    <id>8953051</id>
    <revision>
      <id>907902530</id>
      <parentid>907902295</parentid>
      <timestamp>2019-07-26T02:02:49Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <minor/>
      <comment>adding altvar</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="305">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Niue
| flag alias = Flag of Niue.svg
| link alias-football = Niue {{{mw|}}} national {{{age|}}} soccer team
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
&lt;noinclude&gt;
| redir1 = NIU
&lt;/noinclude&gt;
}}</text>
      <sha1>9a9or3x3px0uwyn5ldt7zzt3voppwfp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data North Korea</title>
    <ns>10</ns>
    <id>8926831</id>
    <revision>
      <id>879312525</id>
      <parentid>868447400</parentid>
      <timestamp>2019-01-20T12:02:33Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Removed WFB flags per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1457">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = North Korea
| flag alias = Flag of North Korea.svg
| flag alias-1948 = Flag of North Korea (1948–1992).svg
| flag alias-naval = Naval ensign of North Korea.svg
| link alias-naval = Korean People's Army Naval Force
| flag alias-army = Flag of the Korean People's Army Ground Force.svg
| link alias-army = Korean People's Army Ground Force
| flag alias-navy = Flag of the Korean People's Navy.svg
| link alias-navy = Korean People's Army Naval Force 
| flag alias-military = Flag of the Korean People's Army Ground Force.svg
| link alias-military = Korean People's Army
| flag alias-air force = Flag of the Korean People's Army Air Force.svg
| link alias-air force = Korean People's Army Air Force
| size = {{{size|}}}
| name = {{#ifeq:{{{name|}}}|Democratic People's Republic of Korea|North Korea|{{{name|}}}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1948
| redir1 = PRK
| redir2 = Democratic People's Republic of Korea
| redir3 = Korea, North
| related1 = First Republic of Korea
| related2 = Second Republic of Korea
| related3 = Supreme Council for National Reconstruction
| related4 = Third Republic of Korea
| related5 = Fourth Republic of Korea
| related6 = Fifth Republic of Korea
| related7 = Korean Empire
| related8 = Korea
| related9 = Joseon
| related10 = South Korea
| related11 = Korea under Japanese rule
&lt;/noinclude&gt;
}}</text>
      <sha1>k3yegovnnbbp0iko621e96g55whs711</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Norway</title>
    <ns>10</ns>
    <id>8953122</id>
    <revision>
      <id>848815565</id>
      <parentid>848813231</parentid>
      <timestamp>2018-07-04T14:27:14Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>No border for army flag</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="758">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Norway
| flag alias = Flag of Norway.svg
| flag alias-old kingdom = Royal Standard of Norway.svg
| flag alias-1814 = Flag of Norway (1814–1821).svg
| flag alias-1818 = Swedish and Norwegian merchant flag 1818-1844.svg
| flag alias-1844 = Norge-Unionsflagg-1844.svg
| flag alias-army = Flag of Norway, state.svg
| border-army =
| link alias-army = Norwegian Army
| flag alias-naval = Flag of Norway, state.svg
| border-naval =
| link alias-naval = Royal Norwegian Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = old kingdom
| var2 = 1814
| var3 = 1818
| var4 = 1844
| redir1 = NOR
| related1 = Kalmar Union
&lt;/noinclude&gt;
}}</text>
      <sha1>q1ypox17z92l3elz5gk2bjzfl2fq590</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Oman</title>
    <ns>10</ns>
    <id>8953144</id>
    <revision>
      <id>848813430</id>
      <parentid>773717802</parentid>
      <timestamp>2018-07-04T14:04:44Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army flag</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="578">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Oman
| flag alias = Flag of Oman.svg
| flag alias-1970 = Old Flag of Oman.svg
| flag alias-naval = Naval Ensign of Oman.svg
| link alias-naval = Royal Navy of Oman
| flag alias-air force=Air Force Ensign of Oman.svg
| link alias-air force=Royal Air Force of Oman
| flag alias-army = Royal Army of Oman Flag.svg
| link alias-army = Royal Army of Oman
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1970
| redir1 = OMN
| redir2 = OMA
&lt;/noinclude&gt;
}}</text>
      <sha1>mxv0t55e8hw4p13idhebc33614850lt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Pakistan</title>
    <ns>10</ns>
    <id>8953156</id>
    <revision>
      <id>868132130</id>
      <parentid>773801122</parentid>
      <timestamp>2018-11-10T05:42:18Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="517">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Pakistan
| flag alias = Flag of Pakistan.svg
| flag alias-army = Flag of the Pakistani Army.svg
| flag alias-naval = Naval Ensign of Pakistan.svg
| flag alias-navy=Naval Standard of Pakistan.svg
| flag alias-air force = Air Force Ensign of Pakistan.svg
| flag alias-civil = Civil Ensign of Pakistan.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
| var1 = civil
&lt;noinclude&gt;
| redir1 = PAK
&lt;/noinclude&gt;
}}</text>
      <sha1>4lb1eqaztambxa7xog4np93j1doopqj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Palau</title>
    <ns>10</ns>
    <id>8973219</id>
    <revision>
      <id>577856344</id>
      <parentid>545161150</parentid>
      <timestamp>2013-10-19T15:50:12Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Palau: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="245">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Palau
| flag alias = Flag of Palau.svg
| link alias-naval = Palau Police
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = PLW
&lt;/noinclude&gt;
}}</text>
      <sha1>d8kqe847abkton1xyvdejikv18kdrq9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Palestine</title>
    <ns>10</ns>
    <id>25902399</id>
    <revision>
      <id>632451889</id>
      <parentid>632385179</parentid>
      <timestamp>2014-11-04T18:49:40Z</timestamp>
      <contributor>
        <username>CambridgeBayWeather</username>
        <id>294180</id>
      </contributor>
      <minor/>
      <comment>Protected Template:Country data Palestine: [[WP:High-risk templates|Highly visible template]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="385">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = State of Palestine
| shortname alias = Palestine
| flag alias = Flag of Palestine.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| related1 = Palestinian National Authority
| related2 = All-Palestine
| related3 = Palestine Liberation Organization
| cat = Palestine state
&lt;/noinclude&gt;
}}</text>
      <sha1>gml8apb284lnhnj3w367ogc847hzq2j</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Panama</title>
    <ns>10</ns>
    <id>8953387</id>
    <revision>
      <id>611822529</id>
      <parentid>577856332</parentid>
      <timestamp>2014-06-06T13:55:29Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Removed redundant interwikis ([[d:Q5612475]]) using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="367">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Panama
| flag alias = Flag of Panama.svg
| link alias-naval = {{#switch:{{{variant|}}}|1958|1958=Panamanian National Guard|1984|1984=Panamanian Defense Forces|#default=Panamanian Public Forces}}
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = PAN
&lt;/noinclude&gt;
}}</text>
      <sha1>4shfgz6nemifloedq3ce2n3ujruochf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Papua New Guinea</title>
    <ns>10</ns>
    <id>8975430</id>
    <revision>
      <id>899000468</id>
      <parentid>846796223</parentid>
      <timestamp>2019-05-27T07:27:21Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Papua_New_Guinea_1965.svg with [[File:Flag_of_Papua_New_Guinea_(1965–1970).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: Criterion #4: To harmonize the names of a set of images so that on</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="519">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Papua New Guinea
| flag alias = Flag of Papua New Guinea.svg
| flag alias-1965  = Flag of Papua New Guinea (1965–1970).svg
| flag alias-1970 = Flag of Papua New Guinea 1970.svg
| flag alias-naval = Naval Ensign of Papua New Guinea.svg
| link alias-naval = Papua New Guinea Maritime Element
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1965
| var2 = 1970
| redir1 = PNG
&lt;/noinclude&gt;
}}</text>
      <sha1>lngibnydyaigk8fd0rc1yxhfixdf8ei</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Paraguay</title>
    <ns>10</ns>
    <id>8953196</id>
    <revision>
      <id>848822487</id>
      <parentid>611822589</parentid>
      <timestamp>2018-07-04T15:34:12Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="735">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Paraguay
| flag alias = Flag of Paraguay.svg
| flag alias-1812 = Flag of Paraguay (1812-1826).svg
| flag alias-1826 = Flag of Paraguay (1826-1842).svg
| flag alias-1842 = Flag of Paraguay (1842-1954).svg
| flag alias-1954 = Flag of Paraguay (1954-1988).svg
| flag alias-1988 = Flag of Paraguay (1988-1990).svg
| flag alias-1990 = Flag of Paraguay (1990-2013).svg
| link alias-naval = Paraguayan Navy
| link alias-army = Paraguayan Army
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
 &lt;noinclude&gt;
| redir1 = PRY
| redir2 = PAR
| var1 = 1812
| var2 = 1826
| var3 = 1842
| var4 = 1954
| var5 = 1988
| var6 = 1990
&lt;/noinclude&gt;
}}</text>
      <sha1>d053wc5jqbag8h7y9l9p66tuk4q3sdq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data People's Republic of China</title>
    <ns>10</ns>
    <id>8909817</id>
    <redirect title="Template:Country data China" />
    <revision>
      <id>577851181</id>
      <parentid>508463046</parentid>
      <timestamp>2013-10-19T14:58:42Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data People's Republic of China: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="100">#REDIRECT [[Template:Country data China]]
[[Category:Country data redirects|China peoples republic]]</text>
      <sha1>cnjf9duwh7pc44rf0wnzrq9qjddxajh</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Peru</title>
    <ns>10</ns>
    <id>8953208</id>
    <revision>
      <id>923239331</id>
      <parentid>868134514</parentid>
      <timestamp>2019-10-27T08:11:46Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>variants</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1076">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Peru
| flag alias = Flag of Peru.svg
| flag alias-1825 = Flag of Peru (1825-1950).svg
| flag alias-state = Flag of Peru (state).svg
| flag alias-army = Flag of the Peruvian Army.svg
| flag alias-naval = Flag of Peru (state).svg
| flag alias-air force = Flag of the Peruvian Air Force.svg
| flag alias-military=Flag of Peru (war).svg
| link alias-military=Peruvian Armed Forces
| flag alias-marines = Flag of the Peruvian Navy.svg
| flag alias-navy = Flag of the Peruvian Navy.svg
| link alias-army = Peruvian Army
| link alias-air force = Peruvian Air Force
| link alias-naval = Peruvian Navy
| link alias-marines = Peruvian Naval Infantry
| link alias-navy = Peruvian Navy
| flag alias-football = Flag of Peru (state).svg
| flag alias-beach soccer = Flag of Peru (state).svg
| flag alias-futsal = Flag of Peru (state).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altvar = {{{altvar|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1825
| var2 = state
| redir1 = PER
&lt;/noinclude&gt;
}}</text>
      <sha1>gi13feauu35a04noywy92tb5p6xubq3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Philippines</title>
    <ns>10</ns>
    <id>8953230</id>
    <revision>
      <id>826123724</id>
      <parentid>825587807</parentid>
      <timestamp>2018-02-17T09:28:51Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1909">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Philippines
| flag alias = Flag of the Philippines.svg
| flag alias-1535 = Flag_of_Cross_of_Burgundy.svg
| flag alias-1821 = Flag of Spain (1785-1873 and 1875-1931).svg
| flag alias-1873 = Flag of the First Spanish Republic.svg
| flag alias-1875 = Flag of Spain (1785-1873 and 1875-1931).svg
| flag alias-aguinaldo = Philippines Flag Original.svg
| flag alias-1898 = Flag of the United States (1896-1908).svg
| flag alias-1908 = US flag 46 stars.svg
| flag alias-1912 = US flag 48 stars.svg
| flag alias-1919 = Flag of the Philippines (1919-1936).svg
| flag alias-1936 = Flag of the Philippines (navy blue).svg
| flag alias-1985 = Flag of the Philippines (light blue).svg
| flag alias-1986 = Flag of the Philippines (navy blue).svg
| flag alias-air force = Flag of the Philippine Air Force.svg
| link alias-air force = Philippine Air Force
| flag alias-army=Flag of the Philippine Army.svg
| flag alias-marines=Flag of the Philippine Marine Corps.png
| link alias-marines=Philippine Marine Corps
| flag alias-military=Flag of the Armed Forces of the Philippines.svg
| link alias-military=Philippine Armed Forces
| flag alias-navy=Flag of the Philippine Navy.png
| link alias-navy=Philippine Navy
| link alias-army = Philippine Army
| link alias-naval = Philippine Navy
| link alias-basketball = Philippines {{{mw|men's}}} national {{{age|}}} basketball team
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1535
| var2 = 1821
| var3 = 1873
| var4 = 1875
| var5 = aguinaldo
| var6 = 1898
| var7 = 1908
| var8 = 1912
| var9 = 1919
| var10 = 1936
| var11 = 1985
| var12 = 1986
| cat = Philippines
| redir1 = PHL
| redir2 = PHI
| related1 = First Philippine Republic
| related2 = Philippine Commonwealth
| related3 = Second Philippine Republic
&lt;/noinclude&gt;
}}</text>
      <sha1>0r80f9ekma16x0eh15b2aql8aaadx1h</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Poland</title>
    <ns>10</ns>
    <id>8886607</id>
    <revision>
      <id>922646082</id>
      <parentid>878754472</parentid>
      <timestamp>2019-10-23T12:35:45Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>size parameter</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1741">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Poland
| flag alias = Flag of Poland.svg
| flag alias-state = State Flag of Poland.svg
| flag alias-1815  = Flag of the Congress of Poland.svg
| flag alias-1919 = Flag of Poland (1919-1928).svg
| flag alias-1928 = Flag of Poland (1928–1980).svg
| flag alias-1955 = Flag of Poland (with coat of arms, 1955-1980).svg
| flag alias-1980 = Flag of Poland (with coat of arms, 1980-1990).svg
| flag alias-1990 = Flag of Poland (with coat of arms).svg
| flag alias-naval = Naval Ensign of Poland.svg | border-naval =
| flag alias-naval-1919 = Naval Ensign of IIRP v1.svg | border-naval-1919 =
| flag alias-naval-1946 = Naval Ensign of PRL v1.svg | border-naval-1946 =
| flag alias-naval-auxiliary = Flaga pomocniczych jednostek pływających Polskiej Marynarki Wojennej.svg
| flag alias-naval-auxiliary-1955 = POL Bandera pjp PRL v1.svg
| link alias-naval = Polish Navy
| flag alias-marines = Flag of the Polish Land Forces.svg
| link alias-marines = Polish 7th Coastal Defense Brigade
| flag alias-air force = PL air force flag IIIRP.svg | border-air force =
| link alias-air force = Polish Air Force
| flag alias-army = Flag of the Polish Land Forces.svg | border-army =
| link alias-army = Polish Land Forces
| size = {{{size|}}}
| size flag alias-naval = 25px
| size flag alias-naval-1919 = 25px
| size flag alias-naval-1946 = 25px
| size flag alias-air force = 25px
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = state
| var2 = 1815
| var3 = 1919
| var4 = 1928
| var5 = 1955
| var6 = 1980
| var7 = 1990
| var10 = naval-1919
| var11 = naval-1946
| var12 = naval-auxiliary
| var13 = naval-auxiliary-1955
| redir1 = POL
&lt;/noinclude&gt;
}}</text>
      <sha1>rgovx3fuiooehthlh8n1d40ioqqhz7v</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Portugal</title>
    <ns>10</ns>
    <id>8889313</id>
    <revision>
      <id>878011485</id>
      <parentid>847884004</parentid>
      <timestamp>2019-01-12T11:28:17Z</timestamp>
      <contributor>
        <username>Cabayi</username>
        <id>6561336</id>
      </contributor>
      <comment>Per [[Special:Permalink/878009113#Template-protected edit request on 7 January 2019|request]] by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1329">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Portugal
| flag alias = Flag of Portugal.svg
| flag alias-1248 = PortugueseFlag1248.svg
| flag alias-1385 = PortugueseFlag1385.svg
| flag alias-1495 = Flag Portugal (1495).svg
| flag alias-1578 = Flag Portugal (1578).svg
| flag alias-1640 = Flag Portugal (1640).svg
| flag alias-1707 = Flag Portugal (1707).svg
| flag alias-1750 = Flag of Portugal (1750).svg
| flag alias-1816 = Flag of the United Kingdom of Portugal, Brazil, and the Algarves.svg
| flag alias-1830 = Flag Portugal (1830).svg
| flag alias-civil = Flag Portugal sea (1830).svg
| flag alias-air force=Portugal Air force fin flash.svg
| flag alias-army = Military flag of Portugal.svg
| link alias-air force = Portuguese Air Force
| link alias-army = Portuguese Army
| link alias-naval = Portuguese Navy
| flag alias-navy=Naval Jack of Portugal.svg
| link alias-navy = Portuguese Navy
| flag alias-marines=Naval Jack of Portugal.svg
| link alias-marines=Portuguese Marine Corps
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1248
| var2 = 1385
| var3 = 1495
| var4 = 1578
| var5 = 1640
| var6 = 1707
| var7 = 1750
| var8 = 1816
| var9 = 1830
| var13 = civil
| redir1 = PRT
| redir2 = POR
| related1 = Portuguese Empire
&lt;/noinclude&gt;
}}</text>
      <sha1>3suyly5z1ekvgpr84t3mh6673k9obn1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Qatar</title>
    <ns>10</ns>
    <id>8953249</id>
    <revision>
      <id>848814064</id>
      <parentid>831034271</parentid>
      <timestamp>2018-07-04T14:11:35Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="419">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Qatar
| flag alias = Flag of Qatar.svg
| flag alias-air force=Air Force Ensign of Qatar.svg
| link alias-air force=Qatar Emiri Air Force
| link alias-naval = Qatari Emiri Navy
| link alias-army = Qatari Emiri Land Force
| variant = {{{variant|}}}
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = QAT
&lt;/noinclude&gt;
}}</text>
      <sha1>5wgct8cepkdweebr7rjcg6trzcowxg0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Republic of Macedonia</title>
    <ns>10</ns>
    <id>23598391</id>
    <redirect title="Template:Country data Macedonia" />
    <revision>
      <id>597732850</id>
      <parentid>577850745</parentid>
      <timestamp>2014-03-01T22:57:41Z</timestamp>
      <contributor>
        <username>Technical 13</username>
        <id>14450599</id>
      </contributor>
      <comment>Per talk page request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="91">#REDIRECT [[Template:Country data Macedonia]]
[[Category:Country data redirects|Macedonia]]</text>
      <sha1>hc159avltvz95czp7yg2admonrakf9i</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Republic of the Congo</title>
    <ns>10</ns>
    <id>8909937</id>
    <revision>
      <id>740020667</id>
      <parentid>636575771</parentid>
      <timestamp>2016-09-18T15:48:07Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Fixed basketball link alias per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="658">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Republic of the Congo
| shortname alias = Congo
| flag alias = Flag of the Republic of the Congo.svg
| flag alias-1970 = Flag of the People's Republic of Congo.svg
| link alias-basketball = Republic of the Congo {{{mw|}}} national {{{age|}}} basketball team
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1970
| redir1 = COG
| redir2 = CGO
| redir3 = Congo, Republic of the
| redir4 = Congo
| redir5 = Congo-Brazzaville
| related1 = People's Republic of the Congo
| cat = Congo republic
&lt;/noinclude&gt;
}}</text>
      <sha1>s8gppz5ih4vsc0rstutcjv9sp5xis9n</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Romania</title>
    <ns>10</ns>
    <id>8889449</id>
    <revision>
      <id>880872825</id>
      <parentid>859227644</parentid>
      <timestamp>2019-01-30T00:32:42Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="901">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Romania
| flag alias = Flag of Romania.svg
| flag alias-1859 = Flag of the United Principalities of Wallachia and Moldavia (1859 - 1862).svg
| flag alias-1862 = Flag of the United Principalities of Romania (1862 - 1866).svg
| flag alias-1866 = Flag of Romania.svg
| flag alias-1948 = Flag of Romania (1948-1952).svg
| flag alias-1952 = Flag of Romania (1952-1965).svg
| flag alias-1965 = Flag of Romania (1965-1989).svg
| link alias-naval = Romanian Naval Forces
| flag alias-army = Flag of the Romanian Land Forces (Obverse).svg
| link alias-army = Romanian Land Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1859
| var2 = 1862
| var3 = 1866
| var4 = 1948
| var5 = 1952
| var6 = 1965
| redir1 = ROU
| redir2 = ROM
| related1 = Kingdom of Romania
&lt;/noinclude&gt;
}}</text>
      <sha1>1tv7m42cht347wy7gsw1ndy9zrf0kt8</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Russia</title>
    <ns>10</ns>
    <id>8953328</id>
    <revision>
      <id>894705770</id>
      <parentid>878422548</parentid>
      <timestamp>2019-04-29T14:24:31Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>1914 flag updated, per request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1726">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Russia
| flag alias = Flag of Russia.svg
| flag alias-1668 = Flag of Russia (1668).svg
| flag alias-1696 = Flag of Russia (1696-1917).svg
| flag alias-1721 = Flag of Oryol (variant).svg
| flag alias-1858 = Romanov Flag.svg
| flag alias-1914 = Flag of Russian Empire (1914-1917).svg
| flag alias-1918a=Flag of Russia (1918).svg
| flag alias-1918 = Flag of Russia (1918–1920).svg
| flag alias-1925 = Flag of the Russian SFSR (1920-1937).svg
| flag alias-1937 = Flag of the Russian SFSR (1937-1954).svg
| flag alias-1954 = Flag of the Russian SFSR.svg
| flag alias-1991 = Flag of Russia (1991–1993).svg
| flag alias-military=Banner of the Armed Forces of the Russian Federation (obverse).svg
| link alias-military=Russian Armed Forces
| flag alias-army  = Flag of the Russian ground forces.svg
| link alias-army  = Russian Ground Forces
| flag alias-naval = Naval Ensign of Russia.svg
| link alias-naval = Russian Navy
| flag alias-navy=Naval Jack of Russia.svg
| link alias-navy =Russian Navy
| flag alias-air force = Flag of the Air Force of the Russian Federation.svg
| link alias-air force = Russian Air Force
| flag alias-marines=Naval Jack of Russia.svg
| link alias-marines=Russian Naval Infantry
| flag alias-coast guard=Russia, Flag of border service 2008.svg
| link alias-coast guard=Coast Guard of the Border Service of the FSB
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1668
| var2 = 1696
| var3 = 1721
| var4 = 1858
| var5 = 1914
| var6 = 1918a
| var7 = 1918
| var8 = 1925
| var9 = 1937
| var10 = 1954
| var11 = 1991
| redir1 = RUS
| redir2 = Russian Federation
&lt;/noinclude&gt;
}}</text>
      <sha1>25wvnoyut83rhpeghtpn3mg0o4ydcro</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Rwanda</title>
    <ns>10</ns>
    <id>8960394</id>
    <revision>
      <id>841638499</id>
      <parentid>841638430</parentid>
      <timestamp>2018-05-17T02:17:23Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="441">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Rwanda
| flag alias = Flag of Rwanda.svg
| flag alias-1959 = Flag of Rwanda (1959–1961).svg
| flag alias-1961 = Flag of Rwanda (1961–1962).svg
| flag alias-1962 = Flag of Rwanda (1962–2001).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1959
| var2 = 1961
| var3 = 1962
| redir1 = RWA
&lt;/noinclude&gt;
}}</text>
      <sha1>h5ud7x9xb9l4v3jsskkc117lfwwexcp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Saint Kitts and Nevis</title>
    <ns>10</ns>
    <id>8975576</id>
    <revision>
      <id>612653095</id>
      <parentid>577850628</parentid>
      <timestamp>2014-06-12T16:30:34Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Removed redundant interwikis ([[d:Q5613871]]) using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="403">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Saint Kitts and Nevis
| flag alias = Flag of Saint Kitts and Nevis.svg
| flag alias-naval = Naval Ensign of Saint Kitts and Nevis.svg
| link alias-naval = Saint Kitts and Nevis Coast Guard
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = KNA
| redir2 = SKN
&lt;/noinclude&gt;
}}</text>
      <sha1>adjxz6ar9ujypk1w3eb93key4o6cjv4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Saint Lucia</title>
    <ns>10</ns>
    <id>8975599</id>
    <revision>
      <id>869784053</id>
      <parentid>869783926</parentid>
      <timestamp>2018-11-20T09:57:06Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="682">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Saint Lucia
| flag alias = Flag of Saint Lucia.svg
| flag alias-1875 = Missing Blue Ensign.svg
| flag alias-1939 = Missing Blue Ensign.svg
| flag alias-1967 = Flag of Saint Lucia 1967.svg
| flag alias-1979 = Flag of Saint Lucia (1979-2002).svg
| flag alias-2000 = Flag of Saint Lucia (WFB 2000).jpg
| flag alias-2004 = Flag of Saint Lucia (WFB 2004).gif
| link alias-naval = Saint Lucia Coast Guard
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1875
| var2 = 1939
| var3 = 1967
| var4 = 1979
| var5 = 2000
| var6 = 2004
| redir1 = LCA
&lt;/noinclude&gt;
}}</text>
      <sha1>nbbsi0xpvccp4gb3egfddcw2rcu73ul</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Saint Vincent and the Grenadines</title>
    <ns>10</ns>
    <id>8975661</id>
    <revision>
      <id>793544809</id>
      <parentid>793092293</parentid>
      <timestamp>2017-08-02T12:13:29Z</timestamp>
      <contributor>
        <username>Sodacan</username>
        <id>8272776</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="598">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Saint Vincent and the Grenadines
| flag alias = Flag of Saint Vincent and the Grenadines.svg
| flag alias-colonial = Flag of Saint Vincent and the Grenadines (1907-1979).svg
| flag alias-1979 = Flag of Saint Vincent and the Grenadines (1979-1985).svg
| flag alias-1985 = Flag of Saint Vincent and the Grenadines (1985).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| var2 = 1979
| var3 = 1985
| redir1 = VCT
| redir2 = VIN
| redir3 = SVG
&lt;/noinclude&gt;
}}</text>
      <sha1>hqqwlvvnye3qtaoqk72lftpclnn1ugv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Samoa</title>
    <ns>10</ns>
    <id>8975694</id>
    <revision>
      <id>794897278</id>
      <parentid>792626163</parentid>
      <timestamp>2017-08-10T18:14:37Z</timestamp>
      <contributor>
        <username>GeoffreyT2000</username>
        <id>21491290</id>
      </contributor>
      <comment>Removed alias per edit request at [[Template talk:Country data Samoa#Template-protected edit request on 10 August 2017]].</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="383">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Samoa
| flag alias = Flag of Samoa.svg
| flag alias-colonial = Flag of the Samoa Trust Territory.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| redir1 = SAM
| redir2 = Western Samoa
| redir3 = WSM
&lt;/noinclude&gt;
}}</text>
      <sha1>tdyadbfoowrq97zmz9p8rcll01848pu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data San Marino</title>
    <ns>10</ns>
    <id>8975742</id>
    <revision>
      <id>848822366</id>
      <parentid>695331111</parentid>
      <timestamp>2018-07-04T15:32:54Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="425">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = San Marino
| flag alias = Flag of San Marino.svg
| flag alias-1465 = Old Flag of San Marino.svg
| flag alias-1862 = Flag of San Marino (before 2011).svg
| link alias-army = Sammarinese Armed Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1465
| var2 = 1862
| redir1 = SMR
&lt;/noinclude&gt;
}}</text>
      <sha1>26xtvby937rx4337f7m2u17arrupery</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Saudi Arabia</title>
    <ns>10</ns>
    <id>8953312</id>
    <revision>
      <id>879876770</id>
      <parentid>868128157</parentid>
      <timestamp>2019-01-23T23:30:50Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1216">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Saudi Arabia
| flag alias = Flag of Saudi Arabia.svg
| flag alias-1744  = Flag of the First Saudi State.svg
| flag alias-1822  = Flag of the First Saudi State.svg
| flag alias-1902  = Flag of the Second Saudi State.svg
| flag alias-1921 = Flag of Nejd (1921).svg
| flag alias-1926 = Flag of Nejd (1926).svg
| flag alias-1932 = Flag of Saudi Arabia (1932–1934).svg
| flag alias-1934 = Flag of Saudi Arabia (1934–1938).svg
| flag alias-1938 = Flag of Saudi Arabia (1938–1973).svg
| flag alias-naval = Naval Ensign of Saudi Arabia.svg
| link alias-naval = Royal Saudi Navy
| flag alias-navy = Naval base flag of the Royal Saudi Navy.svg
| link alias-navy = Royal Saudi Navy
| flag alias-army  = Flag of the Royal Saudi Land Forces.png
| link alias-army  = Saudi Arabian Army
| flag alias-air force = Ensign of the Royal Saudi Air Force.svg
| link alias-air force = Royal Saudi Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1744
| var2 = 1822
| var3 = 1902
| var4 = 1921
| var5 = 1926
| var6 = 1932
| var7 = 1934
| var8 = 1938
| redir1 = SAU
| redir2 = KSA
&lt;/noinclude&gt;
}}</text>
      <sha1>r3r9fh7sxf950lnczwky4nxx8k1479d</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Senegal</title>
    <ns>10</ns>
    <id>8953265</id>
    <revision>
      <id>612653424</id>
      <parentid>577857382</parentid>
      <timestamp>2014-06-12T16:34:10Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Removed redundant interwikis ([[d:Q5612963]]) using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="215">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Senegal
| flag alias = Flag of Senegal.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = SEN
&lt;/noinclude&gt;
}}</text>
      <sha1>i3u0k14xpjpa8vpt0jfej7curx0m37a</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Serbia</title>
    <ns>10</ns>
    <id>8889526</id>
    <revision>
      <id>868445344</id>
      <parentid>868444955</parentid>
      <timestamp>2018-11-12T07:09:57Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1265">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Serbia
| flag alias = Flag of Serbia.svg
| flag alias-civil = Civil Flag of Serbia.svg
| flag alias-1835 = Flag of Serbia (1835-1882).svg
| flag alias-1882 = State Flag of Serbia (1882-1918).svg
| flag alias-1941 = Flag of Serbia, 1941-1944.svg
| flag alias-1946 = Flag of SR Serbia.svg
| flag alias-1991 = Flag of Serbia (1992–2004).svg
| flag alias-2004 = Flag of Serbia (2004–2010).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
| flag alias-military=Flag of the Serbian Armed Forces (reverse).svg
| link alias-military=Serbian Armed Forces
| flag alias-air force =Flag of Serbia.svg
| flag alias-army = Flag of Serbia.svg
| link alias-army = Serbian Army
| flag alias-navy=Flag of the Serbian River Flotilla.png
| link alias-navy=Serbian River Flotilla
| flag alias-naval= Naval Ensign of Serbia.svg
| link alias-naval = Serbian River Flotilla
| link alias-air force =Serbian Air Force
&lt;noinclude&gt;
| var1 = civil
| var2 = 1835
| var3 = 1882
| var4 = 1941
| var5 = 1946
| var6 = 1991
| var7 = 2004
| redir1 = SRB
| related1 = Kingdom of Serbia
| related2 = SR Serbia
| related3 = Serbia and Montenegro
| related4 = FR Yugoslavia
&lt;/noinclude&gt;
}}</text>
      <sha1>iub6ihr5ofqso8b2mxbav5ktci24l8c</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Seychelles</title>
    <ns>10</ns>
    <id>8960835</id>
    <revision>
      <id>911116291</id>
      <parentid>693887716</parentid>
      <timestamp>2019-08-16T16:22:35Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>fixing file names after renamed on Commons</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="543">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Seychelles
| flag alias = Flag of the Seychelles.svg
| flag alias-1903 = Flag of Seychelles 1903-1961.gif
| flag alias-1961 = Flag of Seychelles 1961-1976.gif
| flag alias-1976 = Flag of Seychelles (1976–1977).svg
| flag alias-1977 = Flag of Seychelles (1977–1996).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1903
| var2 = 1961
| var3 = 1976
| var4 = 1977
| redir1 = SYC
| redir2 = SEY
&lt;/noinclude&gt;
}}</text>
      <sha1>p63qz7jdd2kqo2we6yh77sco0833laf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Sierra Leone</title>
    <ns>10</ns>
    <id>8975809</id>
    <revision>
      <id>577857290</id>
      <parentid>177504280</parentid>
      <timestamp>2013-10-19T15:58:22Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Sierra Leone: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="306">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Sierra Leone
| flag alias = Flag of Sierra Leone.svg
| flag alias-naval = Naval Ensign of Sierra Leone.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = SLE
&lt;/noinclude&gt;
}}</text>
      <sha1>8x3880dep8vm1mukeikhm4d9cixpgth</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Singapore</title>
    <ns>10</ns>
    <id>8953285</id>
    <revision>
      <id>865436288</id>
      <parentid>738618144</parentid>
      <timestamp>2018-10-23T23:11:52Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Singapore_(1946-1959).svg with [[File:Flag_of_Singapore_(1946–1952).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: File name harmonisation.).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="688">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Singapore
| flag alias = Flag of Singapore.svg
| flag alias-colonial = Flag of Singapore (1946–1952).svg
| flag alias-civil = Civil Ensign of Singapore.svg
| flag alias-naval = Naval Ensign of Singapore.svg
| link alias-naval = Republic of Singapore Navy
| flag alias-air force = State colour of the Republic of Singapore Air Force (1977-1993).png
| link alias-air force= Republic of Singapore Air Force
| link alias-army = Singapore Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| var2 = civil
| redir1 = SGP
| redir2 = SIN
&lt;/noinclude&gt;
}}</text>
      <sha1>c0pm894yxhc3pjmboe1jfnvx22ata0q</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Slovakia</title>
    <ns>10</ns>
    <id>8889562</id>
    <revision>
      <id>848823432</id>
      <parentid>612653868</parentid>
      <timestamp>2018-07-04T15:43:40Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="407">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Slovakia
| flag alias = Flag of Slovakia.svg
| flag alias-1938 = Flag of First Slovak Republic 1939-1945.svg
| link alias-army = Ground Forces of the Slovak Republic
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1938
| redir1 = SVK
| related1 = Czechoslovakia
&lt;/noinclude&gt;
}}</text>
      <sha1>av5csihzbr0d62ao9nsd9hy7lqsu60m</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Slovenia</title>
    <ns>10</ns>
    <id>8889612</id>
    <revision>
      <id>871092357</id>
      <parentid>871092282</parentid>
      <timestamp>2018-11-28T21:46:29Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="546">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Slovenia
| flag alias = Flag of Slovenia.svg
| link alias-army = Slovenian Ground Force
| link alias-military=Slovenian Armed Forces
| flag alias-military=Flag of the Slovenian Armed Forces.svg
| flag alias-naval=Naval Jack of Slovenia.svg
| link alias-naval=Slovenian Navy
| link-alias-navy=Slovenian Navy
| size = {{{size|}}}
| variant = {{{variant|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = SVN
| redir2 = SLO
| related1 = SR Slovenia
&lt;/noinclude&gt;
}}</text>
      <sha1>c6rwgnjs9wx9365gak0cablsei4hbfp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Solomon Islands</title>
    <ns>10</ns>
    <id>8984528</id>
    <revision>
      <id>871541056</id>
      <parentid>793093173</parentid>
      <timestamp>2018-12-01T20:15:07Z</timestamp>
      <contributor>
        <username>Jonesey95</username>
        <id>9755426</id>
      </contributor>
      <comment>replace with name of moved file (no apparent change to the file itself, just the file name) per talk page request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="418">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Solomon Islands
| flag alias = Flag of the Solomon Islands.svg
| flag alias-1956 = Flag of the Solomon Islands (1956–1966).svg
| flag alias-naval = Naval Ensign of the Solomon Islands.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1956
| redir1 = SLB
| redir2 = SOL
&lt;/noinclude&gt;
}}</text>
      <sha1>90zqr8517d9ijc2wcthwyihlcfkh4o4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Somalia</title>
    <ns>10</ns>
    <id>8953397</id>
    <revision>
      <id>866575660</id>
      <parentid>866575646</parentid>
      <timestamp>2018-10-31T05:32:08Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="356">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Somalia
| flag alias-1954=Flag of Somalia (WFB 2000).jpg
| flag alias = Flag of Somalia.svg
| link alias-naval = Somali Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
|variant={{{variant|}}}
&lt;noinclude&gt;
|var1=1954
| redir1 = SOM
| related1 = Somaliland
&lt;/noinclude&gt;
}}</text>
      <sha1>3ya3lm0kssgskren2qbwma5tu6949po</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Somaliland</title>
    <ns>10</ns>
    <id>9053837</id>
    <revision>
      <id>612653983</id>
      <parentid>577857223</parentid>
      <timestamp>2014-06-12T16:40:00Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Removed redundant interwikis ([[d:Q6550540]]) using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="301">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Somaliland
| flag alias = Flag of Somaliland.svg
| flag alias-1991 = Flag of Somaliland until 1996.svg
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| var1 = 1991
&lt;/noinclude&gt;
}}</text>
      <sha1>9fnx7mthh3apoqqqhjlzjhwk8aw8u3z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data South Africa</title>
    <ns>10</ns>
    <id>8953421</id>
    <revision>
      <id>879876877</id>
      <parentid>867399940</parentid>
      <timestamp>2019-01-23T23:31:53Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3386">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = South Africa
| flag alias = Flag of South Africa.svg
| flag alias-1795 = Flag of Great Britain (1707–1800).svg
| flag alias-1801 = Flag of the United Kingdom.svg
| flag alias-1857 = Flag of Transvaal.svg
| flag alias-1875 = Flag of the Natal Colony (1875–1910).svg
| flag alias-1876 = Flag of the Cape Colony 1876-1910.svg
| flag alias-1902 = Flag of Orange River Colony.svg
| flag alias-1910 = South Africa Flag 1910-1912.svg
| flag alias-1912 = Red Ensign of South Africa (1912-1951).svg
| flag alias-1928 = Flag of South Africa (1928–1994).svg
| flag alias-1982 = Flag of South Africa (1982–1994).svg
| flag alias-naval = Naval Ensign of South Africa.svg
| flag alias-naval-1922 = Naval Ensign of the United Kingdom.svg
| flag alias-naval-1946 = Naval Ensign of South Africa (1946-1951).svg
| flag alias-naval-1951 = Naval Ensign of South Africa (1951-1952).svg
| flag alias-naval-1952 = Naval Ensign of South Africa (1952-1981).svg
| flag alias-naval-1981 = Naval Ensign of South Africa (1981-1994).svg
| flag alias-marines=Naval Ensign of South Africa.svg
| link alias-marines=South African Maritime Reaction Squadron
| link alias-naval = South African Navy
| flag alias-air force = Ensign of the South African Air Force.svg
| flag alias-air force-1940 = Ensign of the South African Air Force 1940-1951.svg
| flag alias-air force-1951 = Ensign of the South African Air Force 1951-1958.svg
| flag alias-air force-1958 = Ensign of the South African Air Force (1958-1967, 1970-1981).svg
| flag alias-air force-1967 = Ensign of the South African Air Force 1967-1970.svg
| flag alias-air force-1981 = Ensign of the South African Air Force 1981-1982.svg
| flag alias-air force-1982 = Ensign of the South African Air Force (1982-1994).svg
| flag alias-air force-1994 = Ensign of the South African Air Force 1994-2003.svg
| link alias-air force = South African Air Force
| flag alias-army = Flag of the South African Army.svg
| flag alias-army-1951 = Flag of the South African Army (1951–1966).png
| flag alias-army-1966 = Flag of the South African Army (1966–1973).png
| flag alias-army-1973 = Flag of the South African Army (1973–1994).svg
| flag alias-army-1981 = Ensign of the South African Defence Force (1981-1994).svg
| flag alias-army-1994 = Flag of the South African Army (1994–2002).svg
| flag alias-army-2002 = Flag of the South African Army (2002–2003).svg
| link alias-army = South African Army
| flag alias-military = Flag of the South African National Defence Force.svg
| link alias-military = South African National Defence Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1= 1795
| var2= 1801
| var3= 1857
| var4= 1875
| var5= 1876
| var6 = 1902
| var7 = 1910
| var8 = 1912
| var9 = 1928
| var10 = 1982
| var11 = naval-1922
| var12 = naval-1946
| var13 = naval-1952
| var14 = naval-1981
| var15 = air force-1940
| var16 = air force-1951
| var17 = air force-1958
| var18 = air force-1967
| var19 = air force-1981
| var20 = air force-1982
| var21 = air force-1994
| var22 = army-1951
| var23 = army-1966
| var24 = army-1973
| var25 = army-1981
| var26 = army-1994
| var27 = army-2002
| redir1 = ZAF
| redir2 = RSA
| related1 = South African Republic
| related2 = Union of South Africa
| related3 = Cape Colony
&lt;/noinclude&gt;
}}</text>
      <sha1>nonf425z7hbyihe6nzu3tw07rxpgjiv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data South Korea</title>
    <ns>10</ns>
    <id>8926842</id>
    <revision>
      <id>889841845</id>
      <parentid>884549861</parentid>
      <timestamp>2019-03-28T09:35:09Z</timestamp>
      <contributor>
        <username>Cabayi</username>
        <id>6561336</id>
      </contributor>
      <comment>Per [[Special:Permalink/889837334#Template-protected edit request on 28 March 2019|request]] by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1818">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = South Korea
| flag alias = Flag of South Korea.svg
| flag alias-1945 = Flag of South Korea (1945–1948).svg
| flag alias-1948 = Flag of South Korea (1948–1949).svg
| flag alias-1949 = Flag of South Korea (1949–1984).svg
| flag alias-1984 = Flag of South Korea (1984–1997).svg
| flag alias-1997 = Flag of South Korea (1997–2011).svg
| flag alias-army = Flag of the Republic of Korea Army.svg
| flag alias-air force = Flag of the Republic of Korea Air Force.svg
| link alias-army = Republic of Korea Army
| link alias-naval = Republic of Korea Navy
| link alias-air force = Republic of Korea Air Force
| flag alias-marines = Flag of the Republic of Korea Marine Corps.svg
| link alias-marines = Republic of Korea Marine Corps
| name alias-badminton = South Korea 
| link alias-badminton = Korea national badminton team
| link alias-navy = Republic of Korea Navy
| flag alias-navy=Naval jack of South Korea.svg
| flag alias-military = Flag of the Republic of Korea Armed Forces.svg
| link alias-military = Republic of Korea Armed Forces
| size = {{{size|}}}
| name = {{#ifeq:{{{name|}}}|Republic of Korea|South Korea|{{{name|}}}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1945
| var2 = 1948
| var3 = 1949
| var4 = 1984
| var5 = 1997
| redir1 = KOR
| redir2 = Republic of Korea
| redir3 = Korea, South
| related1 = First Republic of Korea
| related2 = Second Republic of Korea
| related3 = Supreme Council for National Reconstruction
| related4 = Third Republic of Korea
| related5 = Fourth Republic of Korea
| related6 = Fifth Republic of Korea
| related7 = Korean Empire
| related8 = North Korea
| related9 = Joseon
| related10 = Korea
| related11 = Korea under Japanese rule
&lt;/noinclude&gt;
}}</text>
      <sha1>8n5xx1ulwr3tl2r96kd3ykomw8o68wt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data South Sudan</title>
    <ns>10</ns>
    <id>9058050</id>
    <revision>
      <id>664494097</id>
      <parentid>594342980</parentid>
      <timestamp>2015-05-29T00:18:37Z</timestamp>
      <contributor>
        <username>Magioladitis</username>
        <id>1862829</id>
      </contributor>
      <minor/>
      <comment>no interwiki bots active anymore</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="249">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = South Sudan
| flag alias = Flag of South Sudan.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = SSD
| redir2 = Southern Sudan
&lt;/noinclude&gt;
}}</text>
      <sha1>ot8z51eku828nh4qkv8e725i3jbe749</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Spain</title>
    <ns>10</ns>
    <id>8889677</id>
    <revision>
      <id>877542749</id>
      <parentid>868197029</parentid>
      <timestamp>2019-01-09T09:37:25Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>changes requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1548">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Spain
| flag alias = Flag of Spain.svg
| flag alias-1506 = Flag of Cross of Burgundy.svg
| flag alias-1701 = Bandera de España 1701-1748.svg
| flag alias-1748 = Bandera de España 1748-1785.svg
| flag alias-1785 = Flag of Spain (1785–1873, 1875–1931).svg
| flag alias-1873 = Flag of the First Spanish Republic.svg
| flag alias-1874 = Flag of Spain (1785–1873, 1875–1931).svg
| flag alias-1931 = Flag of Spain (1931–1939).svg
| flag alias-1936 = Bandera del bando nacional 1936-1938.svg
| flag alias-1938 = Flag of Spain (1938–1945).svg
| flag alias-1945 = Flag of Spain (1945–1977).svg
| flag alias-1977 = Flag of Spain (1977–1981).svg
| flag alias-civil = Flag of Spain (Civil).svg
| flag alias-civil-1785 = BandMercante1785.svg
| flag alias-navy=Naval Jack of Spain.svg
| link alias-navy=Spanish Navy
| flag alias-marines=Naval Jack of Spain.svg
| link alias-marines=Spanish Navy Marines
| link alias-army = Spanish Army
| link alias-naval = Spanish Navy
| link alias-basketball = Spain {{{mw|men's}}} national {{{age|}}} basketball team
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1506
| var2 = 1701
| var3 = 1748
| var4 = 1785
| var5 = 1873
| var6 = 1874
| var7 = 1931
| var8 = 1936
| var9 = 1938
| var10 = 1945
| var11 = 1977
| var12 = civil
| var13 = civil-1785
| redir1 = ESP
| redir2 = SPA
| related1 = Spanish Republic
| related2 = Spanish State
| related3=Francoist Spain
&lt;/noinclude&gt;
}}</text>
      <sha1>i8p23vo78fn6ktn3ssihz2mpw18ikd9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Sri Lanka</title>
    <ns>10</ns>
    <id>8954979</id>
    <revision>
      <id>774446281</id>
      <parentid>738303704</parentid>
      <timestamp>2017-04-08T14:21:01Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Ensign_of_the_Sri_Lanka_Air_Force.svg with [[File:Air_Force_Ensign_of_Sri_Lanka.svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: #4 Standardise a set of images.).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="515">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Sri Lanka
| flag alias = Flag of Sri Lanka.svg
| flag alias-army=Flag of the Sri Lankan Army.png
| link alias-army=Sri Lanka Army
| flag alias-air force=Air Force Ensign of Sri Lanka.svg
| link alias-air force=Sri Lanka Air Force
| flag alias-naval = Naval Ensign of Sri Lanka.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = LKA
| redir2 = SRI
| related1 = Ceylon
&lt;/noinclude&gt;
}}</text>
      <sha1>4vxc8h52zoqiuz2ubit5kxj4di8hju6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data St. Kitts and Nevis</title>
    <ns>10</ns>
    <id>31803512</id>
    <redirect title="Template:Country data Saint Kitts and Nevis" />
    <revision>
      <id>717470378</id>
      <parentid>717425643</parentid>
      <timestamp>2016-04-27T22:17:46Z</timestamp>
      <contributor>
        <username>Mclay1</username>
        <id>1915689</id>
      </contributor>
      <minor/>
      <comment>clean-up using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="114">#REDIRECT [[Template:Country data Saint Kitts and Nevis]]

[[Category:Country data redirects|St. Kitts and Nevis]]</text>
      <sha1>i3cn8wk3qtqyl2p1rs7za509tyam6ua</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data St. Lucia</title>
    <ns>10</ns>
    <id>29752382</id>
    <redirect title="Template:Country data Saint Lucia" />
    <revision>
      <id>717470424</id>
      <parentid>717425653</parentid>
      <timestamp>2016-04-27T22:18:06Z</timestamp>
      <contributor>
        <username>Mclay1</username>
        <id>1915689</id>
      </contributor>
      <minor/>
      <comment>clean-up using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="94">#REDIRECT [[Template:Country data Saint Lucia]]

[[Category:Country data redirects|St. Lucia]]</text>
      <sha1>dsezcervgqe6mr178s38abgo5d8i0m5</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data St. Vincent and the Grenadines</title>
    <ns>10</ns>
    <id>29752398</id>
    <redirect title="Template:Country data Saint Vincent and the Grenadines" />
    <revision>
      <id>717470582</id>
      <parentid>717425752</parentid>
      <timestamp>2016-04-27T22:19:23Z</timestamp>
      <contributor>
        <username>Mclay1</username>
        <id>1915689</id>
      </contributor>
      <minor/>
      <comment>clean-up using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="136">#REDIRECT [[Template:Country data Saint Vincent and the Grenadines]]

[[Category:Country data redirects|St. Vincent and the Grenadines]]</text>
      <sha1>prb6s3739chvypxfmjzf5gzfjh30aa6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Sudan</title>
    <ns>10</ns>
    <id>8953446</id>
    <revision>
      <id>773820440</id>
      <parentid>738544780</parentid>
      <timestamp>2017-04-04T16:20:14Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Naval_ensign_of_Sudan.svg with [[File:Naval_Ensign_of_Sudan.svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: Naming convention.).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="556">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Sudan
| flag alias = Flag of Sudan.svg
| flag alias-1956 = Flag of Sudan (1956-1970).svg
| flag alias-air force=Ensign of the Sudanese Air Force.svg
| link alias-air force=Sudanese Air Force
| flag alias-naval = Naval Ensign of Sudan.svg
| link alias-naval=Sudanese Navy
| link alias-army=Sudanese Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1956
| redir1 = SDN
| redir2 = SUD
| related1 = South Sudan
&lt;/noinclude&gt;
}}</text>
      <sha1>mf4243qbwfbgp8szivrhsp29hm1b9el</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Suriname</title>
    <ns>10</ns>
    <id>8960755</id>
    <revision>
      <id>577857135</id>
      <parentid>177503529</parentid>
      <timestamp>2013-10-19T15:57:12Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Suriname: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="243">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Suriname
| flag alias = Flag of Suriname.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = SUR
| related1 = Dutch Guiana
&lt;/noinclude&gt;
}}</text>
      <sha1>a6n4xidcknl68h9z8izl3nrqr9io6k3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Swaziland</title>
    <ns>10</ns>
    <id>58934734</id>
    <revision>
      <id>888922984</id>
      <parentid>868451445</parentid>
      <timestamp>2019-03-22T07:22:44Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="321">&lt;includeonly&gt;{{Country data Eswatini
|1={{{1}}}
|shortname alias={{#if:{{{altlink|}}}|Eswatini|Swaziland}}
|size={{{size|}}}
|name={{#if:{{{name|}}}|{{{name}}}|{{#if:{{{altlink|}}}|Swaziland}}}}
|altlink={{{altlink|}}}
|altvar={{{altvar|}}}
|variant={{{variant|}}}
}}&lt;/includeonly&gt;&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>k1z2r53i39c6dbtjvotd50ygceumt3o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Sweden</title>
    <ns>10</ns>
    <id>8889704</id>
    <revision>
      <id>850499214</id>
      <parentid>738393068</parentid>
      <timestamp>2018-07-16T07:38:28Z</timestamp>
      <contributor>
        <username>Mjroots</username>
        <id>408438</id>
      </contributor>
      <comment>+ 2 historic naval flags</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="983">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Sweden
| flag alias = Flag of Sweden.svg
| flag alias-army = Naval Ensign of Sweden.svg
| flag alias-air force =Naval Ensign of Sweden.svg
| flag alias-1562 = Sweden-Flag-1562.svg
| border-1562 =
| flag alias-1818 = Swedish and Norwegian merchant flag 1818-1844.svg
| flag alias-1844 = Swedish civil ensign (1844–1905).svg
| flag alias-naval = Naval Ensign of Sweden.svg
| flag alias-naval-1844 = Naval Ensign of Sweden (1844-1905).svg
| flag alias-naval-1815 = Swedish and Norwegian naval ensign (1815-1844).svg
| link alias-army = Swedish Army
| border-army=
| border-air force=
| link alias-air force = Swedish Air Force
| border-naval =
| link alias-naval = Swedish Navy
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1562
| var2 = 1818
| var3 = 1844
| var4 = naval-1844
| var5 = naval-1815
| redir1 = SWE
&lt;/noinclude&gt;
}}</text>
      <sha1>qtpwdsw3rsk8dfz2ycs46u0clyj1qtt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Switzerland</title>
    <ns>10</ns>
    <id>8953484</id>
    <revision>
      <id>922581284</id>
      <parentid>922460445</parentid>
      <timestamp>2019-10-23T00:53:42Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>size parameter</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="472">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Switzerland
| flag alias = Flag of Switzerland.svg
| flag alias-civil = Civil Ensign of Switzerland.svg
| link alias-army = Swiss Army
| size = {{{size|}}}
| size flag alias = 23x16px
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = civil
| redir1 = CHE
| redir2 = SUI
| redir3 = CH
| related1 = Helvetic Republic
| related2 = Old Swiss Confederacy
&lt;/noinclude&gt;
}}</text>
      <sha1>73zj0y8xnpaozbhau0q3su2qipt47g2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Syria</title>
    <ns>10</ns>
    <id>8986329</id>
    <revision>
      <id>868128663</id>
      <parentid>868128571</parentid>
      <timestamp>2018-11-10T05:08:37Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="859">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Syria
| flag alias = Flag of Syria.svg
| flag alias-1932 = Flag of Syria (1932-1958; 1961-1963).svg
| flag alias-1963 = Flag of Iraq (1963-1991); Flag of Syria (1963-1972).svg
| flag alias-1972 = Flag of Syria (1972-1980).svg
| flag alias-navy = Flag of the Syrian Arab Navy.svg
| link alias-navy = Syrian Arab Navy
| flag alias-naval = Flag of Syria.svg
| link alias-naval = Syrian Arab Navy
| flag alias-air force = Flag of the Syrian Arab Air Force.svg
| link alias-air force = Syrian Arab Air Force
| flag alias-army=Flag of the Syrian Arab Army.svg
| link alias-army=Syrian Arab Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1932
| var2 = 1963
| var3 = 1972
| redir1 = SYR
| related1 = Syrian Republic
&lt;/noinclude&gt;
}}</text>
      <sha1>rd0mwbkk9pny3d88als0zzlnporxfne</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data São Tomé and Príncipe</title>
    <ns>10</ns>
    <id>8975782</id>
    <revision>
      <id>577851149</id>
      <parentid>508460575</parentid>
      <timestamp>2013-10-19T14:58:23Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data São Tomé and Príncipe: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="277">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = São Tomé and Príncipe
| flag alias = Flag of Sao Tome and Principe.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = STP
| cat = Sao tome and principe 
&lt;/noinclude&gt;
}}</text>
      <sha1>nj7xfwucyc9adqwzkwkfedobr1c5c0i</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Taiwan</title>
    <ns>10</ns>
    <id>8986338</id>
    <revision>
      <id>825421294</id>
      <parentid>825421256</parentid>
      <timestamp>2018-02-13T08:52:08Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1324">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Taiwan
| flag alias = Flag of the Republic of China.svg
| flag alias-army = Flag of the Republic of China Army.svg
| link alias-army = Republic of China Army
| flag alias-air force = Flag of the Republic of China Air Force.svg
| link alias-air force = Republic of China Air Force
| link alias-naval = Republic of China Navy
| flag alias-civil = Civil Ensign of the Republic of China.svg
| flag alias-japan = Flag of Japan (1870-1999).svg
| link alias-japan = Taiwan under Japanese rule
| flag alias-navy=Naval Jack of the Republic of China.svg
| link alias-navy=Republic of China Navy
| flag alias-marines=Flag of the Republic of China Marine Corps.svg
| link alias-marines=Republic of China Marine Corps
| link alias-football = Chinese Taipei {{{mw|}}} national {{{age|}}} football team
| link alias-basketball = Chinese Taipei {{{mw|}}} national {{{age|}}} basketball team
| link alias-rugby union = Chinese Taipei {{{mw|}}} national {{{age|}}} rugby union team
| size = {{{size|}}}
| name = {{#ifeq:{{{name|}}}|Republic of China|Taiwan|{{{name|}}}}}
| variant = {{{variant|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
&lt;noinclude&gt;
| redir1 = TWN
| var1 = civil
| var2 = japan
| related1 = Republic of China
| related2 = Chinese Taipei
&lt;/noinclude&gt;
}}</text>
      <sha1>tk6o0t2lr4wcofolkvrueku1onyqxo3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Tajikistan</title>
    <ns>10</ns>
    <id>8960586</id>
    <revision>
      <id>848815337</id>
      <parentid>693696439</parentid>
      <timestamp>2018-07-04T14:24:54Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="380">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Tajikistan
| flag alias = Flag of Tajikistan.svg
| flag alias-1991 = Flag of Tajikistan (1991-1992).svg
| link alias-army = Tajik National Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
| var1 = 1991
&lt;noinclude&gt;
| redir1 = TJK
| related1 = Tajik SSR
&lt;/noinclude&gt;
}}</text>
      <sha1>t0ydc3ezpg09m10izwf8tkjffrwm6fl</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Tanzania</title>
    <ns>10</ns>
    <id>8955006</id>
    <revision>
      <id>848815590</id>
      <parentid>806341416</parentid>
      <timestamp>2018-07-04T14:27:23Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="556">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Tanzania
| flag alias = Flag of Tanzania.svg
| flag alias-1964 = Flag of Tanzania (WFB 2000).png 
| flag alias-2004 = Flag of Tanzania (WFB 2004).gif
| link alias-army = Tanzanian Army
| link alias-naval = Tanzania Naval Command
| size = {{{size|}}}
| variant = {{{variant|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| var1 = 1964
| var2 = 2004
| redir1 = TZA
| redir2 = TAN
| redir3 = United Republic of Tanzania
| related1 = Tanganyika
| related2 = Zanzibar
&lt;/noinclude&gt;
}}</text>
      <sha1>qfurfai2aq6fl6i2608zqv0vm40bg5p</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Thailand</title>
    <ns>10</ns>
    <id>8955029</id>
    <revision>
      <id>879564261</id>
      <parentid>877541944</parentid>
      <timestamp>2019-01-22T01:08:29Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Paul_012]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1242">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Thailand
| flag alias = Flag of Thailand.svg
| flag alias-1767 = Flag of Thailand (Ayutthaya period).svg
| flag alias-1782 = Flag of Thailand (1782).svg
| flag alias-1817 = Flag of Thailand (1817).svg
| flag alias-1855 = Flag of Thailand 1855.svg
| flag alias-1893 = State Flag of Thailand (1916).svg
| flag alias-1916 = Flag of Siam (1916).svg
| flag alias-marines=Flag Commander of the Royal Thai Marine Corps.svg
| link alias-marines=Royal Thai Marine Corps
| border-marines=
| flag alias-naval = Naval Ensign of Thailand.svg
| link alias-naval = Royal Thai Navy
| flag alias-navy = Flag of the Royal Thai Navy.svg
| link alias-navy = Royal Thai Navy
| flag alias-military=Flag of the Royal Thai Armed Forces HQ.svg
| link alias-military=Royal Thai Armed Forces
| flag alias-air force = Flag of the Royal Thai Air Force.svg
| link alias-air force = Royal Thai Air Force
| flag alias-army= Flag of the Royal Thai Army.svg
| link alias-army=Royal Thai Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1767
| var2 =  1782
| var3 = 1817
| var4 = 1855
| var5 = 1893
| var6 = 1916
| redir1 = THA
&lt;/noinclude&gt;
}}</text>
      <sha1>k0u8icv3uk5jtlpdcjc7nyhqf3zjebs</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Togo</title>
    <ns>10</ns>
    <id>8960892</id>
    <revision>
      <id>612654664</id>
      <parentid>577856961</parentid>
      <timestamp>2014-06-12T16:46:01Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Removed redundant interwikis ([[d:Q5613475]]) using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="377">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Togo
| flag alias = Flag of Togo.svg
| flag alias-1957 = Flag of Togo (1957-1958).svg
| flag alias-1958 = Flag of Togo (1958-1960).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1957
| var2 = 1958
| redir1 = TGO
| redir2 = TOG
&lt;/noinclude&gt;
}}</text>
      <sha1>2t6jdnwi66sf7ypdsgbi2ap7rmkvinl</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Tonga</title>
    <ns>10</ns>
    <id>8985420</id>
    <revision>
      <id>830704789</id>
      <parentid>577856954</parentid>
      <timestamp>2018-03-16T13:23:48Z</timestamp>
      <contributor>
        <username>Muhandes</username>
        <id>5630772</id>
      </contributor>
      <comment>per request on talk page</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="343">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Tonga
| flag alias = Flag of Tonga.svg
| flag alias-naval = Naval Ensign of Tonga.svg
| link alias-naval = Tongan Maritime Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = TON
| redir2 = TGA
&lt;/noinclude&gt;
}}</text>
      <sha1>d5dfcecvdoa7cifzvz5hdpw84ldsdq6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Trinidad and Tobago</title>
    <ns>10</ns>
    <id>8985587</id>
    <revision>
      <id>871727479</id>
      <parentid>871727359</parentid>
      <timestamp>2018-12-03T01:59:26Z</timestamp>
      <contributor>
        <username>Enterprisey</username>
        <id>16663390</id>
      </contributor>
      <comment>d'oh, forgot parens</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="483">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Trinidad and Tobago
| flag alias = Flag of Trinidad and Tobago.svg
| flag alias-colonial = Flag of Trinidad and Tobago (1889–1958).svg
| flag alias-naval = Naval Ensign of Trinidad and Tobago.svg
| link alias-naval = Trinidad and Tobago Coast Guard
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| redir1 = TTO
| redir2 = TRI
&lt;/noinclude&gt;
}}</text>
      <sha1>ibl7k1reacwxzgjjfhti5ncss6z8cat</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Tunisia</title>
    <ns>10</ns>
    <id>8955040</id>
    <revision>
      <id>848816346</id>
      <parentid>848816018</parentid>
      <timestamp>2018-07-04T14:33:56Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Removed years-old tracking categories</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="476">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Tunisia
| flag alias = Flag of Tunisia.svg
| flag alias-1959 = Flag of Tunisia (1959–1999).svg
| flag alias-old = Tunisian flag till 1831.svg | border-old =
| flag alias-bey = Flag of Tunis Bey-fr.svg
| link alias-army = Tunisian Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1959
| var2 = old
| var3 = bey
| redir1 = TUN
&lt;/noinclude&gt;
}}</text>
      <sha1>qfxd61pi01310uhpeilu1a7kfou1ff9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Turkey</title>
    <ns>10</ns>
    <id>8889758</id>
    <revision>
      <id>859932998</id>
      <parentid>612654908</parentid>
      <timestamp>2018-09-17T07:17:30Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>Corrected names for navy and army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="391">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Turkey
| flag alias = Flag of Turkey.svg
| link alias-naval = Turkish Naval Forces
| link alias-air force = Turkish Air Force
| link alias-army = Turkish Land Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
&lt;noinclude&gt;
| redir1 = TUR
| related1 = Ottoman Empire
&lt;/noinclude&gt;
}}</text>
      <sha1>6dlbewgzeg3b1sgco8f9445dhm37bal</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Turkmenistan</title>
    <ns>10</ns>
    <id>8985602</id>
    <revision>
      <id>869954065</id>
      <parentid>848816380</parentid>
      <timestamp>2018-11-21T12:45:40Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="898">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Turkmenistan
| flag alias = Flag of Turkmenistan.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
| flag alias-1991 = Flag of the Turkmen SSR.svg
| flag alias-1992 = Flag of Turkmenistan (1992-1997).svg
| flag alias-1997 = Flag of Turkmenistan (1997-2001).svg
| flag alias-naval = Flag of the Turkmenistan Naval Forces.svg
| link alias-naval = Turkmen Naval Forces
| flag alias-navy = Flag of the Turkmenistan Naval Forces.svg
| link alias-navy = Turkmen Naval Forces
| flag alias-army = Flag of the Turkmenistan Ground Forces.svg
| link alias-army = Turkmen Ground Forces
| flag alias-air force=Flag of the Turkmenistan Air Forces.svg
| link alias-air force=Turkmen Air Force
&lt;noinclude&gt;
| var1 = 1991
| var2 = 1992
| var3 = 1997
| redir1 = TKM
| related1 = Turkmen SSR
&lt;/noinclude&gt;
}}</text>
      <sha1>cxesugubj456g10o2ed2vhpwbsh5w3c</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Tuvalu</title>
    <ns>10</ns>
    <id>8955058</id>
    <revision>
      <id>864361565</id>
      <parentid>864276319</parentid>
      <timestamp>2018-10-16T18:24:27Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>2304267</id>
      </contributor>
      <comment>Replacing Flag_of_Tuvalu_(1995-1997).svg with [[File:Flag_of_Tuvalu_(1996–1997).svg]] (by [[commons:User:CommonsDelinker|CommonsDelinker]] because: [[:c:COM:FR|File renamed]]: File name harmonisation, correction in dates.).</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="547">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Tuvalu
| flag alias = Flag of Tuvalu.svg
| flag alias-1976 = Flag of Tuvalu (1976–1978).svg
| flag alias-1978 = Flag of Tuvalu (1978–1995).svg
| flag alias-oct1995 = Flag of Tuvalu (1995).svg
| flag alias-1995 = Flag of Tuvalu (1996–1997).svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1976
| var2 = 1978
| var3 = oct1995
| var4 = 1995
| redir1 = TUV
| related1 = Gilbert and Ellice Islands
&lt;/noinclude&gt;
}}</text>
      <sha1>dj2lamgs9z0np930xlut24z6u7o1to7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Uganda</title>
    <ns>10</ns>
    <id>8955063</id>
    <revision>
      <id>792707950</id>
      <parentid>577856859</parentid>
      <timestamp>2017-07-28T04:07:56Z</timestamp>
      <contributor>
        <username>Sodacan</username>
        <id>8272776</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="376">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Uganda
| flag alias = Flag of Uganda.svg
| flag alias-colonial = Flag of the Uganda Protectorate.svg
| flag alias-1962 = Flag of Uganda 1962.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = colonial
| var2 = 1962
| redir1 = UGA
&lt;/noinclude&gt;
}}</text>
      <sha1>dv4jpfa4nbcw3so1jiyc5dk3o7ovlli</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Ukraine</title>
    <ns>10</ns>
    <id>8955073</id>
    <revision>
      <id>894260004</id>
      <parentid>894256068</parentid>
      <timestamp>2019-04-26T17:37:55Z</timestamp>
      <contributor>
        <username>Mzajac</username>
        <id>61482</id>
      </contributor>
      <comment>+relateds</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1455">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Ukraine
| flag alias = Flag of Ukraine.svg
| flag alias-1918 = Flag of Ukrainian People's Republic 1917.svg
| flag alias-1991 = Flag of the Ukrainian Soviet Socialist Republic.svg
| flag alias-army = Ensign of the Ukrainian Ground Forces.svg
| flag alias-military=Ensign of the Ukrainian Armed Forces.svg
| link alias-military=Ukrainian Armed Forces
| flag alias-marines=Flag of the Ukrainian Naval Infantry.png
| link alias-marines=Ukrainian Naval Infantry
| link alias-army = Ukrainian Ground Forces
| flag alias-coast guard=Sea Guard Ensign of Ukraine (dress).svg
| link alias-coast guard=Ukrainian Sea Guard
| flag alias-naval = Naval Ensign of Ukraine.svg
| flag alias-naval-1918 = Naval Ensign of Ukraine 1918 July.svg
| link alias-naval = Ukrainian Navy
| flag alias-air force = Ensign of the Ukrainian Air Force.svg
| link alias-air force = Ukrainian Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1918
| var2 = naval-1918
| var3 = 1991
| redir1 = UKR
| related1 = Zaporozhian Sich
| related2 = Cossack Hetmanate
| related3 = Ukrainian People's Republic
| related4 = West Ukrainian People's Republic
| related5 = Ukrainian People's Republic of Soviets
| related6 = Ukrainian Soviet Republic
| related7 = Ukrainian SSR
| related8 = Carpatho-Ukraine
| related9 = Ukrainian National Government
&lt;/noinclude&gt;
}}</text>
      <sha1>1psndagbd29ca82ejgjfptphm03up7x</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data United Arab Emirates</title>
    <ns>10</ns>
    <id>8960421</id>
    <revision>
      <id>676885863</id>
      <parentid>612655095</parentid>
      <timestamp>2015-08-19T19:39:11Z</timestamp>
      <contributor>
        <username>Mjroots</username>
        <id>408438</id>
      </contributor>
      <comment>+ civil ensign</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="394">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = United Arab Emirates
| flag alias = Flag of the United Arab Emirates.svg
| flag alias-civil=Civil Ensign of the United Arab Emirates.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = civil
| redir1 = ARE
| redir2 = UAE
| related1 = Trucial States
&lt;/noinclude&gt;
}}</text>
      <sha1>j1zlal1bunot06kuvch59b5d7aublc3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data United Kingdom</title>
    <ns>10</ns>
    <id>8889816</id>
    <revision>
      <id>878745396</id>
      <parentid>878745199</parentid>
      <timestamp>2019-01-16T18:21:47Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <minor/>
      <comment>Marines variant displayed twice</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2020">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = United Kingdom
| flag alias = Flag of the United Kingdom.svg
| flag alias-civil = Civil Ensign of the United Kingdom.svg
| flag alias-government = Government Ensign of the United Kingdom.svg
| flag alias-naval = Naval Ensign of the United Kingdom.svg
| flag alias-naval-RFA = British-Royal-Fleet-Auxiliary-Ensign.svg
| flag alias-naval-RMAS = British Royal Maritime Auxiliary Ensign.svg
| flag alias-naval-GS = Government Service Ensign.svg
| flag alias-naval-RNLI = Flag of the Royal National Lifeboat Institution.svg
| link alias-naval-RNLI = Royal National Lifeboat Institution
| flag alias-1707 = Flag of Great Britain (1707–1800).svg
| link alias-naval = {{#switch:{{{variant|}}}|naval-RFA|RFA=Royal Fleet Auxiliary|naval-RMAS|RMAS=Royal Maritime Auxiliary Service|#default=Royal Navy}}
| link alias-naval-1707 = Royal Navy
| flag alias-naval-1707 = Naval ensign of Great Britain (1707–1800).svg
| flag alias-air force = Ensign of the Royal Air Force.svg
| link alias-air force = Royal Air Force
| flag alias-army = Flag of the British Army.svg
| link alias-army = British Army
| flag alias-military = Flag of the United Kingdom (3-5).svg
| link alias-military = British Armed Forces
| flag alias-marines = Flag of the Royal Marines.svg
| link alias-marines = Corps of Royal Marines
| flag alias-coast guard = Flag of Her Majesty's Coastguard.png
| link alias-coast guard = Her Majesty's Coastguard
| size = {{{size|}}}
| name = {{#ifeq:{{{name|}}}|Britain|United Kingdom|{{{name|}}}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = civil
| var2 = government
| var3 = naval-RFA
| var4 = naval-RMAS
| var5 = naval-RNLI
| var6 = 1707
| redir1 = UK
| redir2 = U.K.
| redir3 = the United Kingdom
| related1 = Great Britain
| related2 = Kingdom of Great Britain
| related3 = British Empire
| related4 = United Kingdom of Great Britain and Ireland
| related5 = Kingdom of England
| related6 = Kingdom of Scotland
&lt;/noinclude&gt;
}}</text>
      <sha1>8virdwnm2z6507wdkj3hfjgi6m7my9i</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data United Nations</title>
    <ns>10</ns>
    <id>9018484</id>
    <revision>
      <id>577849867</id>
      <parentid>319701831</parentid>
      <timestamp>2013-10-19T14:46:13Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data United Nations: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="354">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = United Nations
| flag alias = Flag of the United Nations.svg
| flag alias-1945 = Flag of the United Nations (1945-1947).svg
| size = {{{size|}}}
| name = {{{name|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1945
| redir1 = UN
| redir2 = UNO
| redir3 = the United Nations
&lt;/noinclude&gt;
}}</text>
      <sha1>kj6mw0bf276h181cjqz6s104x9zgpuy</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data United States</title>
    <ns>10</ns>
    <id>8953176</id>
    <revision>
      <id>904449596</id>
      <parentid>901984306</parentid>
      <timestamp>2019-07-02T07:47:30Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <comment>Per talk page request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="4681">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = United States
| flag alias = Flag of the United States.svg
| flag alias-1776 = Flag of the United States (1776–1777).svg
| flag alias-1777 = Flag of the United States (1777-1795).svg
| flag alias-1795 = Flag of the United States (1795–1818).svg
| flag alias-1818 = Flag of the United States (1818-1819).svg
| flag alias-1819 = Flag of the United States (1819-1820).svg
| flag alias-1820 = Flag of the United States (1820-1822).svg
| flag alias-1822 = Flag of the United States (1822-1836).svg
| flag alias-1836 = Flag of the United States (1836-1837).svg
| flag alias-1837 = Flag of the United States (1837-1845).svg
| flag alias-1845 = Flag of the United States (1845-1846).svg
| flag alias-1846 = Flag of the United States (1846-1847).svg
| flag alias-1847 = Flag of the United States (1847-1848).svg
| flag alias-1848 = Flag of the United States (1848-1851).svg
| flag alias-1851 = Flag of the United States (1851-1858).svg
| flag alias-1858 = Flag of the United States (1858-1859).svg
| flag alias-1859 = Flag of the United States (1859-1861).svg
| flag alias-1861 = Flag of the United States (1861-1863).svg
| flag alias-1863 = Flag of the United States (1863-1865).svg
| flag alias-1865 = Flag of the United States (1865-1867).svg
| flag alias-1867 = Flag of the United States (1867-1877).svg
| flag alias-1877 = Flag of the United States (1877-1890).svg
| flag alias-1890 = Flag of the United States (1890-1891).svg
| flag alias-1891 = Flag of the United States (1891-1896).svg
| flag alias-1896 = Flag of the United States (1896-1908).svg
| flag alias-1908 = Flag of the United States (1908-1912).svg
| flag alias-1912 = Flag of the United States (1912-1959).svg
| flag alias-1959 = Flag of the United States (1959-1960).svg
| flag alias-1960 = Flag of the United States (Pantone).svg
| flag alias-air force = Flag of the United States Air Force.svg
| flag alias-coast guard-1799 = Ensign of the United States Revenue-Marine (1799).png
| flag alias-coast guard-1815 = Ensign of the United States Revenue-Marine (1815).png
| flag alias-coast guard-1836 = Ensign of the United States Revenue-Marine (1836).png
| flag alias-coast guard-1841 = Ensign of the United States Revenue-Marine (1841).png
| flag alias-coast guard-1867 = Ensign of the United States Revenue-Marine (1867).png
| flag alias-coast guard-1868 = Ensign of the United States Revenue-Marine (1868).png
| flag alias-coast guard-1915 = Ensign of the United States Coast Guard (1915-1953).png
| flag alias-coast guard=Ensign of the United States Coast Guard.svg
| link alias-coast guard= {{#switch:{{{variant|}}}|coast guard|coast guard-1915=United States Coast Guard|coast guard-1894=United States Revenue Cutter Service|coast guard-1799|coast guard-1815|coast guard-1836|coast guard-1841|coast guard-1867|coast guard-1868=United States Revenue-Marine|United States Coast Guard}}
| flag alias-army = Flag of the United States Army.svg
| link alias-naval={{#switch:{{{variant|}}}|navy|coast guard-1915=United States Coast Guard|United States Coast Guard|United States Navy}}
| flag alias-navy-1864=Flag of the United States Navy (1864-1959).svg
| flag alias-navy=Flag of the United States Navy (official).svg
| link alias-navy=United States Navy
| link alias-marines= {{#switch:{{{variant|}}}|marines|marines-1914=United States Marine Corps|United States Marine Corps}}
| flag alias-marines-1914 = Flag of the United States Marine Corps (1914-1939).png
| flag alias-marines = Flag of the United States Marine Corps.svg
| link alias-football = United States {{{mw|men's}}} national {{{age|}}} soccer team
| link alias-basketball = United States {{{mw|men's}}} national {{{age|}}} basketball team
| link alias-field hockey = United States {{{mw|men's}}} national field hockey team
| link alias-Australian rules football = United States {{{mw|men's}}} national Australian rules football team
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1776  
| var2 = 1777   
| var3 = 1795   
| var4 = 1818   
| var5 = 1819  
| var6 = 1820   
| var7 = 1822   
| var8 = 1836   
| var9 = 1837  
| var10 = 1845  
| var11 = 1846   
| var12 = 1847   
| var13 = 1848  
| var14 = 1851  
| var15 = 1858  
| var16 = 1859  
| var17 = 1861  
| var18 = 1863   
| var19 = 1865 
| var20 = 1867  
| var21 = 1877 
| var22 = 1890  
| var23 = 1891   
| var24 = 1896   
| var25 = 1908   
| var26 = 1912  
| var27 = 1959   
| var28 = 1960   
| var29 = coast guard-1915
| var30 = marines-1914
| redir1 = USA
| redir2 = US
| redir3 = United States of America
| redir4 = U.S.
&lt;/noinclude&gt;
}}</text>
      <sha1>rjzy9hd7c9ohqwsi0enx4dpzimdbvf0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Uruguay</title>
    <ns>10</ns>
    <id>8955093</id>
    <revision>
      <id>653914864</id>
      <parentid>612655284</parentid>
      <timestamp>2015-03-28T17:24:03Z</timestamp>
      <contributor>
        <username>SiBr4</username>
        <id>16981284</id>
      </contributor>
      <comment>Update navy alias per edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="369">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Uruguay
| flag alias = Flag of Uruguay.svg
| flag alias-1828 = Flag of Uruguay (1828-1830).svg
| link alias-naval = National Navy of Uruguay
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1828
| redir1 = URY
| redir2 = URU
&lt;/noinclude&gt;
}}</text>
      <sha1>5ec5o1d59yv39ur5f21fzlyl0lwx7q6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Uzbekistan</title>
    <ns>10</ns>
    <id>8955181</id>
    <revision>
      <id>869535888</id>
      <parentid>869405285</parentid>
      <timestamp>2018-11-19T06:12:51Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="741">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Uzbekistan
| flag alias = Flag of Uzbekistan.svg
| flag alias-military=Uzbekistan Armed Forces (Latin script).svg
| link alias-military=Armed Forces of the Republic of Uzbekistan
| flag alias-naval = Uzbekistan Armed Forces (Latin script).svg
| link alias-naval = Uzbekistan Naval Forces
| flag alias-army = Uzbekistan Armed Forces (Latin script).svg
| link alias-army = Uzbek Ground Forces
| flag alias-air force= Uzbekistan Armed Forces (Latin script).svg
| link alias-air force=Uzbekistan Air and Air Defence Forces
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = UZB
| related1 = Uzbek SSR
&lt;/noinclude&gt;
}}</text>
      <sha1>f0rng8b8jg1ej4v4dsklitjs4ooocwm</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Vanuatu</title>
    <ns>10</ns>
    <id>8960726</id>
    <revision>
      <id>577856829</id>
      <parentid>177502848</parentid>
      <timestamp>2013-10-19T15:54:41Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Country data Vanuatu: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="256">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Vanuatu
| flag alias = Flag of Vanuatu.svg
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
&lt;noinclude&gt;
| redir1 = VUT
| redir2 = VAN
| related1 = New Hebrides
&lt;/noinclude&gt;
}}</text>
      <sha1>7dnv9kazuf7j3l9ypx9uf39saeah9en</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Venezuela</title>
    <ns>10</ns>
    <id>8960436</id>
    <revision>
      <id>923239801</id>
      <parentid>847953787</parentid>
      <timestamp>2019-10-27T08:16:28Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <comment>add variants</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1255">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Venezuela
| flag alias = Flag of Venezuela.svg
| flag alias-1836 = Flag of Venezuela (1836–1859).svg
| flag alias-1859 = Flag of Venezuela (1859–1863).svg
| flag alias-1863 = Flag of Venezuela (1863–1905).svg
| flag alias-1905 = Flag of Venezuela (1905–1930).svg
| flag alias-1930 = Flag of Venezuela (1930–1954).svg
| flag alias-1954 = Flag of Venezuela (1954–2006).svg
| flag alias-army=Flag of the Venezuelan Army.png
| link alias-army=National Army of Venezuela
| flag alias-air force = Flag of the Venezuelan Air Force.png
| link alias-air force = Venezuelan National Bolivarian Military Aviation
| flag alias-football = Flag of Venezuela (state).svg
| flag alias-beach soccer = Flag of Venezuela (state).svg
| flag alias-futsal = Flag of Venezuela (state).svg
| flag alias-state = Flag of Venezuela (state).svg
| flag alias-naval = Flag of Venezuela (state).svg
| link alias-naval = Bolivarian Armada of Venezuela
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| altvar = {{{altvar|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1836
| var2 = 1859
| var3 = 1863
| var4 = 1905
| var5 = 1930
| var6 = 1954
| var7 = state
| redir1 = VEN
&lt;/noinclude&gt;
}}</text>
      <sha1>tm528ubzlzvxbd69856dl9uzufqk7k0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Vietnam</title>
    <ns>10</ns>
    <id>8960472</id>
    <revision>
      <id>879876663</id>
      <parentid>868679289</parentid>
      <timestamp>2019-01-23T23:29:58Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested by [[User:Havsjö]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1285">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Vietnam
| flag alias = Flag of Vietnam.svg
| flag alias-1863 = Long Tinh Kỳ (Dragon Star Flag) nhà Nguyễn, 1802-1885.png
| flag alias-1885 = Flag of Central Vietnam (1885-1890).svg
| flag alias-1890 = Standard of the Nguyen Dynasty (1890 - 1920).svg
| flag alias-1920 = First flag of the Nguyen Dynasty.svg
| flag alias-1945 = Flag of the Empire of Vietnam (1945).svg
| flag alias-1945a = Flag of North Vietnam (1945-1955).svg
| link alias-naval = Vietnam People's Navy
| flag alias-navy=Ensign of Vietnam People's Navy.svg
| link alias-navy=Vietnam People's Navy
| flag alias-army = Flag of the People's Army of Vietnam.svg
| link alias-army = Vietnam People's Ground Force
| flag alias-military = Flag of the People's Army of Vietnam.svg
| link alias-military=People's Army of Vietnam
| flag alias-air force = Flag of the Vietnam People's Air Force.svg
| link alias-air force = Vietnam People's Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1863
| var2 = 1885
| var3 = 1890
| var4 = 1920
| var5 = 1945
| var6 = 1945a
| redir1 = VNM
| redir2 = VIE
| redir3 = Viet Nam
| related1 = South Vietnam
| related2 = North Vietnam
&lt;/noinclude&gt;
}}</text>
      <sha1>g2m2wcbejndkqq2grx3m7d2d28vhplm</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Yemen</title>
    <ns>10</ns>
    <id>8960494</id>
    <revision>
      <id>850864185</id>
      <parentid>848817582</parentid>
      <timestamp>2018-07-18T13:15:54Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <minor/>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="774">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Yemen
| flag alias = Flag of Yemen.svg
| flag alias-1923 =
| flag alias-1927 = Flag of the Mutawakkilite Kingdom of Yemen.svg
| flag alias-1962 = Flag of North Yemen.svg
| link alias-army = Yemeni Land Forces
| flag alias-army = Flag of the Yemeni Army.svg
| flag alias-naval = Flag of the Yemeni Navy.svg
| link alias-naval = Yemeni Navy
| flag alias-air force = Flag of the Yemeni Air Force.svg
| link alias-air force = Yemeni Air Force
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1 = 1923
| var2 = 1927
| var3 = 1962
| redir1 = YEM
| related1 = North Yemen
| related2 = South Yemen
| related3 = Aden
| related4 = South Arabia
&lt;/noinclude&gt;
}}</text>
      <sha1>apngisjjevy35ffxdfupq0ukngpaqqv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Zambia</title>
    <ns>10</ns>
    <id>8960629</id>
    <revision>
      <id>848822212</id>
      <parentid>844353303</parentid>
      <timestamp>2018-07-04T15:31:12Z</timestamp>
      <contributor>
        <username>Skjoldbro</username>
        <id>13370122</id>
      </contributor>
      <comment>added army</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="672">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Zambia
| flag alias = Flag of Zambia.svg
| flag alias-1964 = Flag of Zambia (1964–1996).svg
| flag alias-1996 = Flag of Zambia (Pantone).svg
| flag alias-2000 = Flag of Zambia (WFB 2000).jpg
| flag alias-2004 = Flag of Zambia (WFB 2004).gif
| flag alias-air force=Air Force Ensign of Zambia.svg
| link alias-air force=Zambian Air Force
| link alias-army = Zambian Army
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| redir1 = ZMB
| redir2 = ZAM
| var1 = 1964
| var2 = 1996
| var3 = 2000
| var4 = 2004
| related1 = Northern Rhodesia
&lt;/noinclude&gt;
}}</text>
      <sha1>4dayfegkzga1g0pxnotrkcbqbzz1hu1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Country data Zimbabwe</title>
    <ns>10</ns>
    <id>8953525</id>
    <revision>
      <id>863616074</id>
      <parentid>847499149</parentid>
      <timestamp>2018-10-11T22:21:25Z</timestamp>
      <contributor>
        <username>Illegitimate Barrister</username>
        <id>12006778</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="720">{{ {{{1&lt;noinclude&gt;|country showdata&lt;/noinclude&gt;}}}
| alias = Zimbabwe
| flag alias = Flag of Zimbabwe.svg
| flag alias-1980=Flag of Zimbabwe (WFB 2000).jpg
| flag alias-army = Flag of the Zimbabwe National Army.svg
| link alias-army = Zimbabwe National Army
| flag alias-military=Flag of the Zimbabwe Defence Forces.svg
| link alias-military=Zimbabwe Defence Forces
| flag alias-air force =Air Force Ensign of Zimbabwe.svg
| link alias-air force = Air Force of Zimbabwe
| size = {{{size|}}}
| name = {{{name|}}}
| altlink = {{{altlink|}}}
| variant = {{{variant|}}}
&lt;noinclude&gt;
| var1= 1980
| redir1 = ZWE
| redir2 = ZIM
| related1 = Rhodesia
| related2 = Southern Rhodesia
| related3 = Zimbabwe Rhodesia
&lt;/noinclude&gt;
}}</text>
      <sha1>2vtx750tz30r01e78rjcm1k5ol8a0m0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cquote</title>
    <ns>10</ns>
    <id>2161876</id>
    <revision>
      <id>918220009</id>
      <parentid>893272762</parentid>
      <timestamp>2019-09-27T15:58:06Z</timestamp>
      <contributor>
        <username>Jonesey95</username>
        <id>9755426</id>
      </contributor>
      <comment>avoid redirect in template</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2527">{| class="cquote pullquote" role="presentation" {{#if:{{{rtl|}}}|dir="rtl"}} style="{{#switch:{{{float|}}}
  | left = float:left
  | right = float:right
  | #default = margin:auto
  }}; border-collapse: collapse; border: none; background-color: {{{bgcolor|transparent}}}; width: {{#if: {{{wide|}}} | 100% | {{{width|auto}}}}}; {{#if: {{{bgcolor|}}} | border: 1px solid #AAAAAA;}}"
| style="width: 20px; vertical-align: top; border: none; color: {{{qcolor|#B2B7F2}}}; font-size: {{#switch:{{{size|{{{quotewidth|{{{width|{{{2|20px}}}}}}}}}}}}
|10px=20px
|30px=60px
|40px=80px
|50px=100px
|60px=120px
|#default=40px}}; font-family: {{#if:{{{rtl|}}}|Roman|'Times New Roman', Times}}, serif; font-weight: bold; line-height: .6em; text-align: left; padding: {{#if:{{{small|}}}|10px 2px|10px 10px}};" | {{#if:{{{rtl|}}}|”|“}}
| style="vertical-align: top; border: none;{{#if:{{{rtl|}}}|direction:rtl;}} padding: {{#if:{{{small|}}}|4px 2px|4px 10px}}; {{#ifeq:{{{quotealign|}}}|center|text-align:center;}}" | {{trim quotes|{{{text|{{{content|{{{quotetext|{{{quote|{{{1|&lt;includeonly&gt;{{error|Error: No text given for quotation (or equals sign used in the actual argument to an unnamed parameter)}}&lt;/includeonly&gt;&lt;noinclude&gt;{{lorem ipsum}}&lt;/noinclude&gt;}}}}}}}}}}}}}}}}}
| style="width: 20px; vertical-align: bottom; border: none; color: {{{qcolor|#B2B7F2}}}; font-size: {{#switch:{{{size|{{{quotewidth|{{{width|{{{2|20px}}}}}}}}}}}}
|10px=20px
|30px=60px
|40px=80px
|50px=100px
|60px=120px
|#default=40px}}; font-family: {{#if:{{{rtl|}}}|Roman|'Times New Roman', Times}}, serif; font-weight: bold; line-height: .6em; text-align: right; padding: {{#if:{{{small|}}}|10px 2px|10px 10px}};" | {{#if:{{{rtl|}}}|“|”}}
|-
{{#if:{{{author|{{{personquoted|{{{source|{{{publication|{{{title|{{{quotesource|{{{4|{{{5|}}}}}}}}}}}}}}}}}}}}}}}}|{{#if:{{NAMESPACE}}||[[Category:Articles with attributed pull quotes]]}}
{{!}} colspan="3" class="cquotecite" style="border: none; padding-right: 4%; font-size: smaller; line-height:normal; text-align: right;" {{!}} &lt;cite&gt;—&amp;#8202;{{#if:{{{author|{{{personquoted|{{{4|}}}}}}}}}|{{{author|{{{personquoted|{{{4}}}}}}}}}{{#if:{{{source|{{{publication|{{{title|{{{quotesource|{{{5|}}}}}}}}}}}}}}}|, {{{source|{{{publication|{{{title|{{{quotesource|{{{5}}}}}}}}}}}}}}}}}|{{#if:{{{source|{{{publication|{{{title|{{{quotesource|{{{5|}}}}}}}}}}}}}}}|{{{source|{{{publication|{{{title|{{{quotesource|{{{5}}}}}}}}}}}}}}}}}}}&lt;/cite&gt;
}}
|}&lt;!-- {{subst:FULLPAGENAME}} --&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>oad2qb45ve0o4mrriq9lf0tnumd2qac</sha1>
    </revision>
  </page>
  <page>
    <title>Template:DMCA</title>
    <ns>10</ns>
    <id>23226218</id>
    <revision>
      <id>774491639</id>
      <parentid>296800547</parentid>
      <timestamp>2017-04-08T20:40:50Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:DMCA]]": [[WP:High-risk templates|Highly visible template]]: Allowing template editors ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="197">{{Dated maintenance category
 |onlyarticles=yes
 |1={{{1|}}}
 |2={{{2|}}}
 |3={{{3|}}}
 |4={{{4|}}}
 |5={{{5|}}}
}}&lt;noinclude&gt;
{{documentation|Template:Dated maintenance category/doc}}
&lt;/noinclude&gt;</text>
      <sha1>cl1tba6o83bu6hpmnvwvbcse6qwofoo</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Dated maintenance category</title>
    <ns>10</ns>
    <id>22598546</id>
    <revision>
      <id>589732290</id>
      <parentid>584337311</parentid>
      <timestamp>2014-01-08T08:14:55Z</timestamp>
      <contributor>
        <username>John of Reading</username>
        <id>11308236</id>
      </contributor>
      <comment>Second attempt. Those spaces upset inline templates such as {{As of}}. Instead, try an unconditional &lt;nowiki/&gt;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="660">&lt;nowiki/&gt;&lt;!--This nowiki helps to prevent whitespace at the top of articles--&gt;{{#ifeq:{{FULLROOTPAGENAME}}|Wikipedia:Template messages|&lt;!--Do not categorize--&gt;|&lt;!--
--&gt;{{#ifexpr:{{#if:{{NAMESPACE}}|0|1}}+{{#ifeq:{{{onlyarticles|no}}}|yes|0|1}}
 |{{#if:{{{3|}}}
  |[[Category:{{{1}}} {{{2}}} {{{3}}}]]&lt;!--
--&gt;{{#ifexist:Category:{{{1}}} {{{2}}} {{{3}}}
    |&lt;!--
 --&gt;|[[Category:Articles with invalid date parameter in template]]&lt;!--
--&gt;}}
  |[[Category:{{#if:{{{5|}}}
               |{{{5}}}&lt;!--
            --&gt;|{{{1}}}&lt;!--
           --&gt;}}]]&lt;!--
--&gt;}}{{#if:{{{4|}}}
      |[[Category:{{{4}}}]]}}&lt;!--
  --&gt;}}&lt;!--
--&gt;}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>7p59j4cq4i8wg65odpv5287yu50sczo</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Dead link</title>
    <ns>10</ns>
    <id>9172159</id>
    <revision>
      <id>899990197</id>
      <parentid>730388591</parentid>
      <timestamp>2019-06-02T18:39:35Z</timestamp>
      <contributor>
        <username>JJMC89</username>
        <id>24812038</id>
      </contributor>
      <comment>only categorize articles</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="940">{{ {{{|safesubst:}}}#invoke:Unsubst||date=__DATE__ |$B=
&lt;!--{{Dead link}} begin--&gt;{{Fix
| special  = &lt;sup class="noprint Inline-Template"&gt;&lt;span style="white-space: nowrap;"&gt;&amp;#91;&lt;i&gt;{{#if: {{{url|}}}|[http://web.archive.org/web/*/{{{url|}}} &lt;span title="{{{title|}}}{{#if:{{{date|}}}|&amp;nbsp;since {{{date}}}}}"&gt;dead link&lt;/span&gt;]|[[Wikipedia:Link rot|&lt;span title="{{{title|}}}{{#if:{{{date|}}}|&amp;nbsp;Dead link since {{{date}}}}}"&gt;{{#if:{{{fix-attempted|}}}|permanent dead link|dead link}}&lt;/span&gt;]]}}&lt;/i&gt;&amp;#93;&lt;/span&gt;&lt;/sup&gt;
| date     = {{{date|}}}
| cat      = {{main other|[[Category:All articles with dead external links]]}}
| cat-date = Category:Articles with dead external links
| cat2     = {{main other|{{#if:{{{fix-attempted|}}}|[[Category:Articles with permanently dead external links]]}}}}
}}&lt;!--{{Dead link}} end--&gt;
}}&lt;noinclude&gt;
{{Documentation}}
&lt;!-- PLEASE ADD CATEGORIES AND INTERWIKIS TO THE /doc SUBPAGE, THANKS --&gt;
&lt;/noinclude&gt;</text>
      <sha1>tbclaly3bcw4wxut9b4l5koubkytuvz</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Div col</title>
    <ns>10</ns>
    <id>12679552</id>
    <revision>
      <id>898405122</id>
      <parentid>851876773</parentid>
      <timestamp>2019-05-23T10:37:27Z</timestamp>
      <contributor>
        <username>Jonesey95</username>
        <id>9755426</id>
      </contributor>
      <comment>Move closing div to separate line to prevent strange list formatting. See https://en.wikipedia.org/w/index.php?title=Template_talk:Navbox&amp;curid=12839040&amp;diff=898399557&amp;oldid=898394285</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="961">&lt;includeonly&gt;&lt;div class="div-col columns column-width" style="{{column-width|{{{colwidth|30em}}}}} &lt;!--
 --&gt;{{#if: {{{gap|}}}
    | {{column-gap|{{{gap}}}}} }}&lt;!--
 --&gt;{{#switch: {{{rules|}}}
    | = &lt;!--empty--&gt;
    | yes = {{column-rule}}
    | {{Column-rule|{{{rules}}}}} }} &lt;!--
 --&gt;{{#ifeq: {{{small|}}}|yes
    | font-size:90%; }} &lt;!--
 --&gt;{{#if: {{{style|}}}
    | {{{style}}} }}"&gt;&lt;!--
 --&gt;{{#if: {{{content|}}}
    |{{{content}}}
&lt;/div&gt;}}&lt;!-- Inventory how many pages use small=yes 
 --&gt;{{#ifeq: {{{small|}}}|yes
    |[[Category:Pages using div col with small parameter]]}}&lt;/includeonly&gt;{{#invoke:Check for unknown parameters|check|unknown={{main other|[[Category:Pages using div col with unknown parameters|_VALUE_{{PAGENAME}}]]}}|preview=Page using [[Template:Div col]] with unknown parameter "_VALUE_"; use colwidth= to specify column size |ignoreblank=y | colwidth | content | gap | rules | small | style }}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>9i3dvd2ka83rtdcvu2c26h28yeutjov</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Div col end</title>
    <ns>10</ns>
    <id>12679680</id>
    <revision>
      <id>683947856</id>
      <parentid>627002509</parentid>
      <timestamp>2015-10-03T15:58:07Z</timestamp>
      <contributor>
        <username>NeilN</username>
        <id>409043</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Div col end: per request at [[WP:RFPP]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="96">&lt;includeonly&gt;&lt;/div&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation|Template:Div col/doc}}
&lt;/noinclude&gt;</text>
      <sha1>e0rj08wj8gm7na2mxp8t9b3l4y8kspb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Error-small</title>
    <ns>10</ns>
    <id>55072963</id>
    <revision>
      <id>880607516</id>
      <parentid>799379119</parentid>
      <timestamp>2019-01-28T10:31:16Z</timestamp>
      <contributor>
        <username>Jonesey95</username>
        <id>9755426</id>
      </contributor>
      <comment>Actually make this smaller than a standard error message, not just non-bold.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="104">{{small|{{#invoke:Error|error|{{{message|{{{1}}}}}}|tag=span}}}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>flg30hlgo3wckkfxn23ryl9hsmfet48</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Es</title>
    <ns>10</ns>
    <id>13307784</id>
    <redirect title="Template:Es icon" />
    <revision>
      <id>572456756</id>
      <parentid>482451477</parentid>
      <timestamp>2013-09-11T07:50:48Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>add [[:Category:Language icon templates]] per protected edit request</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="81">#REDIRECT [[Template:Es icon]]

[[Category:Language icon templates|{{PAGENAME}}]]</text>
      <sha1>j9wqnmdzo2heo4lxu9xhfbnikmzsu4m</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Es icon</title>
    <ns>10</ns>
    <id>1756608</id>
    <revision>
      <id>909312826</id>
      <parentid>901142136</parentid>
      <timestamp>2019-08-04T16:18:21Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <minor/>
      <comment>/* top */updating TFD templates following conclusion of [[Wikipedia:Templates_for_discussion/Log/2019_July_5|a TFD]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="151">&lt;noinclude&gt;{{Being deleted|2019 July 5|Link language wrappers}}&lt;/noinclude&gt;{{Link language|es}}&lt;!--Spanish--&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>i957lw4qrq0mtwtks07okc0v4pd94qd</sha1>
    </revision>
  </page>
  <page>
    <title>Template:FULLROOTPAGENAME</title>
    <ns>10</ns>
    <id>34701984</id>
    <revision>
      <id>774489771</id>
      <parentid>476439833</parentid>
      <timestamp>2017-04-08T20:24:42Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:FULLROOTPAGENAME]]": [[WP:High-risk templates|Highly visible template]]: Allowing template editors ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="420">{{ {{{|safesubst:}}}#if: {{ {{{|safesubst:}}}Ns has subpages | {{ {{{|safesubst:}}}#if:{{{1|}}}|{{ {{{|safesubst:}}}NAMESPACE:{{{1}}}}}|{{ {{{|safesubst:}}}NAMESPACE}}}} }} 
  | {{ {{{|safesubst:}}}#titleparts:{{ {{{|safesubst:}}}#if:{{{1|}}}|{{{1}}}|{{ {{{|safesubst:}}}FULLPAGENAME}}}}|1}}
  | {{ {{{|safesubst:}}}#if:{{{1|}}}|{{{1}}}|{{ {{{|safesubst:}}}FULLPAGENAME}}}}
}}&lt;noinclude&gt;

{{documentation}}

&lt;/noinclude&gt;</text>
      <sha1>t4jn967jlk6ph7qu71w2b8f5083yjrl</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Fix</title>
    <ns>10</ns>
    <id>5632010</id>
    <revision>
      <id>814292698</id>
      <parentid>713657347</parentid>
      <timestamp>2017-12-07T23:00:24Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>replaced self-closed &lt;nowiki/&gt; and space with numeric space entity;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1113">{{#switch:{{{subst|¬}}}
 |¬={{category handler
  |template=[[Category:Templates needing substitution checking]]
  |nocat={{{nocat|&lt;noinclude&gt;true&lt;/noinclude&gt;}}}
 }}
 |SUBST=[[Category:Pages with incorrectly substituted templates]]
}}{{Category handler
 |main={{Fix/category
  |cat-date={{{cat-date|}}} 
  |cat={{{cat|}}} 
  |cat-date2={{{cat-date2|}}} 
  |cat2={{{cat2|}}} 
  |cat-date3={{{cat-date3|}}} 
  |cat3={{{cat3|}}} 
  |date={{{date|}}}
 }}
 |template={{#if:{{{name|}}}|{{#ifeq:{{{name}}}|{{ROOTPAGENAME}}||{{#if:{{{date|}}}||[[Category:Templates including undated clean-up tags]]}}}}}} 
 |subpage=no
}}{{#if:{{{text|}}}
 |&lt;sup class="noprint Inline-Template {{{class|}}}" style="white-space:nowrap;"&gt;&amp;#91;&lt;i&gt;{{#if:{{{pre-text|}}}
  |{{{pre-text}}}&amp;#32;
 }}[[{{{link|Wikipedia:Cleanup}}}|&lt;span title="{{delink|1={{{title|{{{link|Wikipedia:Cleanup}}}}}}{{#if:{{{date|}}}|&amp;#32;({{{date}}})}}}}"&gt;{{{text|}}}&lt;/span&gt;]]{{#if:{{{post-text|}}}
  |&amp;#32;{{{post-text}}}
 }}&lt;/i&gt;&amp;#93;&lt;/sup&gt;|{{{special|}}}
}}&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Add cats and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>owg7pdp6e9nqycfh3g7fuee1rm3t159</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Flag</title>
    <ns>10</ns>
    <id>1695548</id>
    <revision>
      <id>638605379</id>
      <parentid>637523521</parentid>
      <timestamp>2014-12-18T05:55:14Z</timestamp>
      <contributor>
        <username>Plastikspork</username>
        <id>5075409</id>
      </contributor>
      <comment>Closing</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="148">{{country data {{{1|}}}|flag/core|name={{{name|{{{1|}}}}}}|variant={{{variant|{{{2|}}}}}}|size={{{size|}}}}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>ofumtldgk38cy4vntgy93o2oniuxo2q</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Flag/core</title>
    <ns>10</ns>
    <id>1938204</id>
    <revision>
      <id>922570456</id>
      <parentid>922566231</parentid>
      <timestamp>2019-10-22T23:19:32Z</timestamp>
      <contributor>
        <username>S.A. Julio</username>
        <id>26343411</id>
      </contributor>
      <minor/>
      <comment>/* top */adjusting for improved method to define custom flag sizes</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="520">&lt;span class="flagicon"&gt;[[File:{{{flag alias-{{{variant}}}|{{#if:{{{flag alias|}}}|{{{flag alias}}}|Flag placeholder.svg}}}}}|{{#if:{{{size|}}}|{{{size}}}|{{{size flag alias-{{{variant}}}|{{#if:{{{variant|}}}|23x15px|{{{size flag alias|23x15px}}}}}}}}}}|{{{border-{{{variant}}}|{{{border|border}}}}}} |alt=|link=]]&amp;nbsp;{{#switch:{{{flag alias}}}|Flag of Switzerland.svg|Flag of the Vatican City.svg=&amp;nbsp;}}{{#ifeq:{{{alias}}}|Nepal|&amp;nbsp;&amp;nbsp;}}&lt;/span&gt;[[{{{alias}}}|{{{name}}}]]&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>ly3ujlwy6ua5f08bh3vb0mrkz9d357t</sha1>
    </revision>
  </page>
  <page>
    <title>Template:For</title>
    <ns>10</ns>
    <id>1808502</id>
    <revision>
      <id>850158102</id>
      <parentid>848893061</parentid>
      <timestamp>2018-07-14T01:05:26Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <comment>TFD closed as no consensus ([[WP:XFDC|XFDcloser]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="88">&lt;includeonly&gt;{{#invoke:For|For}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>7es2p1mk6qse8zlwn5qqya2ysrq1rcr</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Gray</title>
    <ns>10</ns>
    <id>4821803</id>
    <revision>
      <id>827245298</id>
      <parentid>613849647</parentid>
      <timestamp>2018-02-23T16:29:55Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Gray]]": [[WP:HIGHRISK|high-risk]] template with 4000+ transclusions ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="151">&lt;span style="color:gray"&gt;{{{1}}}&lt;/span&gt;&lt;noinclude&gt;

&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>0se1essniolp1jxmajbn58fwfmjy6un</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Grey</title>
    <ns>10</ns>
    <id>43113154</id>
    <redirect title="Template:Gray" />
    <revision>
      <id>827245310</id>
      <parentid>819621257</parentid>
      <timestamp>2018-02-23T16:29:56Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Grey]]": [[WP:HIGHRISK|high-risk]] template with 4000+ transclusions ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="77">#REDIRECT [[Template:Gray]]

{{Rcat shell|{{R from move}}{{R from British}}}}</text>
      <sha1>70mzv6s5ub2pry9t8o7ad5gl1ki9w09</sha1>
    </revision>
  </page>
  <page>
    <title>Template:ISBN</title>
    <ns>10</ns>
    <id>51604275</id>
    <revision>
      <id>874115957</id>
      <parentid>817040127</parentid>
      <timestamp>2018-12-17T06:37:27Z</timestamp>
      <contributor>
        <username>JJMC89</username>
        <id>24812038</id>
      </contributor>
      <comment>ISBN in error</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="3267">{{#if:{{{1|&lt;noinclude&gt;$&lt;/noinclude&gt;}}}|{{Catalog lookup link|{{{1|}}}|{{{2|}}}|{{{3|}}}|{{{4|}}}|{{{5|}}}|{{{6|}}}|{{{7|}}}|{{{8|}}}|{{{9|}}}|article-link={{#ifeq:{{yesno-no|{{{plainlink|}}}}}|yes||International Standard Book Number}}|article-name={{#ifeq:{{yesno-no|{{{plainlink|}}}}}|yes||ISBN}}|link-prefix=[Special:BookSources/|item-prefix={{!}}|item-postfix=]|list-leadout={{{leadout|}}}}}{{#if:{{trim|{{{1|}}}}}|{{#ifeq:{{yesno-no|{{{invalid1|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{1|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|ISBN}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{2|}}}}}|{{#ifeq:{{yesno-no|{{{invalid2|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{2|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|ISBN}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{3|}}}}}|{{#ifeq:{{yesno-no|{{{invalid3|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{3|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|ISBN}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{4|}}}}}|{{#ifeq:{{yesno-no|{{{invalid4|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{4|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|ISBN}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{5|}}}}}|{{#ifeq:{{yesno-no|{{{invalid5|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{5|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|ISBN}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{6|}}}}}|{{#ifeq:{{yesno-no|{{{invalid6|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{6|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|ISBN}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{7|}}}}}|{{#ifeq:{{yesno-no|{{{invalid7|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{7|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|ISBN}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{8|}}}}}|{{#ifeq:{{yesno-no|{{{invalid8|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{8|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|ISBN}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}{{#if:{{trim|{{{9|}}}}}|{{#ifeq:{{yesno-no|{{{invalid9|}}}}}|yes|{{main other|[[Category:Pages with listed invalid ISBNs]]}}|{{#invoke:check isxn|check_isbn|{{{9|}}}|error={{error-small|&amp;nbsp;Parameter error in {{tl|ISBN}}: Invalid [[ISBN]].}}{{main other|[[Category:Pages with ISBN errors]]}}}}}}}}}}}}}}}}}}}}}}}}|{{error-small|Parameter error in {{tl|ISBN}}: Missing [[ISBN]].}}}}&lt;noinclude&gt;{{documentation}}&lt;!-- Add categories and interwiki lines to the /doc subpage, not here! --&gt;&lt;/noinclude&gt;</text>
      <sha1>q1xhnnldo7lcxn879ffkaa8l4xehkpl</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Icon</title>
    <ns>10</ns>
    <id>10964158</id>
    <revision>
      <id>643803499</id>
      <parentid>623318300</parentid>
      <timestamp>2015-01-23T10:29:55Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>switch this to use [[Module:Icon]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="138">{{#invoke:Icon|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>m4ab9noabl8v4ki5cx6t5ksjcjh5u8o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Icon+link</title>
    <ns>10</ns>
    <id>44074862</id>
    <redirect title="Template:Icon link" />
    <revision>
      <id>847256432</id>
      <parentid>819682282</parentid>
      <timestamp>2018-06-24T00:44:47Z</timestamp>
      <contributor>
        <username>Paine Ellsworth</username>
        <id>9092818</id>
      </contributor>
      <comment>add [[WP:RCAT|rcat]]s</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="149">#Redirect [[Template:Icon link]]

{{Rcat shell|
{{R from modification}}
{{R from template shortcut}}
}}
[[Category:Single-image insertion templates]]</text>
      <sha1>cihs9qcemlpku3srnbtqzu49r5q8nzz</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Icon link</title>
    <ns>10</ns>
    <id>42816727</id>
    <revision>
      <id>819682270</id>
      <parentid>629112721</parentid>
      <timestamp>2018-01-10T18:59:05Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Icon link]]": [[WP:SEMI|semi-protecting]] highly-visible templates in response to recent template-space vandalism ([Edit=Require autoconfirmed or confirmed access] (indefinite) [Move=Require autoconfirmed or confirmed access] (ind...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="217">{{icon|{{{1}}}|size={{{iconsize|{{{size|16x16px}}}}}}}}&amp;nbsp;[[{{replace|{{replace|{{{2}}}|'''|}}|''|}}|{{if||{{{i|{{{italics|{{{italic|}}}}}}}}}|''{{{2}}}''|{{{3|{{{2}}}}}}}}]]&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>jfdhkkg1nu73gcvk5hnsuyvn9en5kni</sha1>
    </revision>
  </page>
  <page>
    <title>Template:If</title>
    <ns>10</ns>
    <id>15682776</id>
    <revision>
      <id>757998242</id>
      <parentid>757708691</parentid>
      <timestamp>2017-01-02T22:40:44Z</timestamp>
      <contributor>
        <username>Redrose64</username>
        <id>9612106</id>
      </contributor>
      <comment>Undid revision 757708691 by [[Special:Contributions/CambridgeBayWeather|CambridgeBayWeather]] ([[User talk:CambridgeBayWeather|talk]]) pointless, the {{Documentation}} handles any prot icons that may be appropriate</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="282">{{ {{{|safesubst:}}}p{{ {{{|safesubst:}}}#ifeq:{{{1}}}|eq|1|2}}|{{ {{{|safesubst:}}}p{{ {{{|safesubst:}}}#ifeq:{{{2}}}|{{{3}}}|1|2}}|{{{4|}}}|{{{5|}}}}}|{{ {{{|safesubst:}}}p{{ {{{|safesubst:}}}#if{{{1}}}:{{{2}}}|1|2}}|{{{3}}}|{{{4|}}}}}}}&lt;noinclude&gt;

{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>dnw2ilti3nqno6b7fnldiv3r2adunua</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Link language</title>
    <ns>10</ns>
    <id>3483283</id>
    <revision>
      <id>922182359</id>
      <parentid>922173192</parentid>
      <timestamp>2019-10-20T14:08:20Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>lang function name change;</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="416">&lt;span class="languageicon"&gt;(in {{#invoke:lang|name_from_tag|{{{1|&lt;noinclude&gt;{{CONTENTLANGUAGE}}&lt;/noinclude&gt;}}}|template=Link language}})&lt;/span&gt;{{#if:{{#invoke:lang|is_ietf_tag|{{{1|}}}}}
 |{{category handler
  |main={{#ifeq:{{{1|}}}|en||[[Category:Articles with {{#if:{{{cat-lang|}}}|{{{cat-lang}}}|{{#invoke:lang|name_from_tag|{{{1|}}}}}}}-language external links]]}}
 }}}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>ge6v0g6kkerl6g17gzw181heoe1assn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:MONTHNAME</title>
    <ns>10</ns>
    <id>4858813</id>
    <revision>
      <id>772147331</id>
      <parentid>388698949</parentid>
      <timestamp>2017-03-25T16:04:13Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:MONTHNAME]]": Allowing template editors on some templates with full protection dating back to pre-[[WP:TPROT]] times which aren't too often or too sensitively used. ([Edit=Require template editor access] (indefi...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="387">&lt;includeonly&gt;{{#if:{{{1|}}}|{{#switch:{{MONTHNUMBER|{{{1}}}}}|1=January|2=February|3=March|4=April|5=May|6=June|7=July|8=August|9=September|10=October|11=November|12=December|Incorrect required parameter 1=''month''!}}|Missing required parameter 1=''month''!}}&lt;/includeonly&gt;&lt;noinclude&gt;

{{Documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>4cf5sge5nt8b4gwjre9u8yifa3kstt2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:MONTHNUMBER</title>
    <ns>10</ns>
    <id>4859929</id>
    <revision>
      <id>874163611</id>
      <parentid>388698933</parentid>
      <timestamp>2018-12-17T15:25:23Z</timestamp>
      <contributor>
        <username>Amorymeltzer</username>
        <id>141948</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:MONTHNUMBER]]": Allow template editor access, see [[Template:MONTHNAME]] ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="655">&lt;includeonly&gt;{{#if:{{{1|}}}
 |{{#switch:{{lc:{{{1}}}}}
  |january|jan=1
  |february|feb=2
  |march|mar=3
  |apr|april=4
  |may=5
  |june|jun=6
  |july|jul=7
  |august|aug=8
  |september|sep|sept=9
  |october|oct=10
  |november|nov=11
  |december|dec=12
  |{{#ifexpr:{{{1}}}&lt;0
   |{{#ifexpr:(({{{1}}})round 0)!=({{{1}}})
    |{{#expr:12-(((0.5-({{{1}}}))round 0)mod 12)}}
    |{{#expr:12-(((11.5-({{{1}}}))round 0)mod 12)}}
   }}
  |{{#expr:(((10.5+{{{1}}})round 0)mod 12)+1}}
  }}
 }}
 |Missing required parameter 1=''month''!
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>mqnyq8bnd6mmrrl70a3uwqgeo8aevfc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Main</title>
    <ns>10</ns>
    <id>1208356</id>
    <revision>
      <id>856268932</id>
      <parentid>849583277</parentid>
      <timestamp>2018-08-24T01:27:01Z</timestamp>
      <contributor>
        <username>Pppery</username>
        <id>28032115</id>
      </contributor>
      <comment>You forgot to remove this notice</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="138">{{#invoke:main|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>jkpvpyms818jhpg2lkzsq5qur195qbr</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Main other</title>
    <ns>10</ns>
    <id>17220251</id>
    <revision>
      <id>388689011</id>
      <parentid>334818505</parentid>
      <timestamp>2010-10-04T14:46:48Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <comment>remove {{pp-template}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="409">{{#switch:
  &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;
  {{#if:{{{demospace|}}} 
  | {{lc: {{{demospace}}} }}    &lt;!--Use lower case "demospace"--&gt;
  | {{#ifeq:{{NAMESPACE}}|{{ns:0}}
    | main
    | other
    }} 
  }}
| main     = {{{1|}}}
| other
| #default = {{{2|}}}
}}&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>ngt28vb1n5t4bh1su57btnqyofkd1d5</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Navbox</title>
    <ns>10</ns>
    <id>995954</id>
    <revision>
      <id>630098073</id>
      <parentid>622579838</parentid>
      <timestamp>2014-10-18T12:29:00Z</timestamp>
      <contributor>
        <username>Edokter</username>
        <id>1624037</id>
      </contributor>
      <minor/>
      <comment>linebreaks</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="94">&lt;includeonly&gt;{{#invoke:Navbox|navbox}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>tqodcaa2vvhehqaod229udlla0wimek</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Nobots</title>
    <ns>10</ns>
    <id>8499927</id>
    <redirect title="Template:Bots" />
    <revision>
      <id>867868294</id>
      <parentid>865967656</parentid>
      <timestamp>2018-11-08T14:07:03Z</timestamp>
      <contributor>
        <username>Xaosflux</username>
        <id>502540</id>
      </contributor>
      <comment>rm extra template, requested at [[Template talk:Nobots]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="129">#REDIRECT [[Template:Bots]]

{{Redirect category shell|
{{R from move}}
}}

[[Category:Wikipedia utility templates|{{PAGENAME}}]]</text>
      <sha1>0j01ypdcgi0s1mf72flz56w8bo8oc3i</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ns has subpages</title>
    <ns>10</ns>
    <id>22589696</id>
    <revision>
      <id>637438114</id>
      <parentid>637437596</parentid>
      <timestamp>2014-12-10T06:37:09Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>convert this to use [[Module:Ns has subpages]] - this gets the subpage status directly from MediaWiki, avoiding the need to update the template when namespaces change</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="185">{{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;#invoke:Ns has subpages|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>0pg457y46td6p53rdt8tyc76jeg9pa8</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ombox</title>
    <ns>10</ns>
    <id>17522403</id>
    <revision>
      <id>577969039</id>
      <parentid>463278061</parentid>
      <timestamp>2013-10-20T12:45:08Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>switch to Lua version</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="146">{{#invoke:Message box|ombox}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>1o93yrjvq6v2ylug2k0uaaltljurje2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:P2</title>
    <ns>10</ns>
    <id>15682790</id>
    <revision>
      <id>772147423</id>
      <parentid>524740391</parentid>
      <timestamp>2017-03-25T16:04:18Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:P2]]": Allowing template editors on some templates with full protection dating back to pre-[[WP:TPROT]] times which aren't too often or too sensitively used. ([Edit=Require template editor access] (indefinite) [...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="120">{{{2}}}&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>duozeijtz6f7quc59lhhpe6ycu023mt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Portal</title>
    <ns>10</ns>
    <id>1780010</id>
    <revision>
      <id>583050805</id>
      <parentid>583049721</parentid>
      <timestamp>2013-11-24T05:37:16Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Portal: [[WP:High-risk templates|Highly visible template]]: allow template editors ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="168">&lt;includeonly&gt;{{#invoke:Portal|portal}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata --&gt;
&lt;/noinclude&gt;</text>
      <sha1>eu0a2ons0y70cfblniy3kcxuib58bvt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Pull quote</title>
    <ns>10</ns>
    <id>52908308</id>
    <redirect title="Template:Cquote" />
    <revision>
      <id>760643390</id>
      <timestamp>2017-01-18T05:49:47Z</timestamp>
      <contributor>
        <username>Anthony Appleyard</username>
        <id>119438</id>
      </contributor>
      <comment>Anthony Appleyard moved page [[Template:Pull quote]] to [[Template:Cquote]]: [[Special:Permalink/760641648|Requested]] by Herostratus at [[WP:RM/TR]]: per RfC close at [[Wikipedia_talk:Manual_of_Style/Archive_188#Proposal_to_stop_supporting_pull_quotes...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="46">#REDIRECT [[Template:Cquote]]

{{R from move}}</text>
      <sha1>5tnhv8s0n2n94zc7wogmsnqydxfq5q3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Reflist</title>
    <ns>10</ns>
    <id>7585648</id>
    <revision>
      <id>794499661</id>
      <parentid>794499298</parentid>
      <timestamp>2017-08-08T12:05:27Z</timestamp>
      <contributor>
        <username>Anomie</username>
        <id>301903</id>
      </contributor>
      <comment>Please stop, you apparently don't know what you're doing here and shouldn't fool around with heavily-used live templates. I'll post an explanation to the talk page momentarily.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="1008">&lt;div class="reflist &lt;!--
 --&gt;{{#if: {{{1|}}} {{{colwidth|}}}
    | columns references-column-width
	}}" style="&lt;!--
 --&gt;{{#if: {{{1|}}}
    | {{#iferror: {{#ifexpr: {{{1|1}}} &gt; 1 }}
      | {{column-width|1={{{1}}}}}
      | {{#switch:{{{1|}}}|1=|2={{column-width|1=30em}}|#default={{column-width|1=25em}}}} }}
    | {{#if: {{{colwidth|}}}
      | {{column-width|1={{{colwidth}}}}} }} }} list-style-type: &lt;!--
 --&gt;{{{liststyle|{{#switch: {{{group|}}}
    | upper-alpha
    | upper-roman
    | lower-alpha
    | lower-greek
    | lower-roman = {{{group}}}
    | #default = decimal}}}}};"&gt;
{{#tag:references|{{{refs|}}}|group={{{group|}}}|responsive={{#if:{{{1|}}}{{{colwidth|}}}|0|1}}}}&lt;/div&gt;{{#invoke:Check for unknown parameters|check|unknown={{main other|[[Category:Pages using reflist with unknown parameters|_VALUE_{{PAGENAME}}]]}}|preview=Page using [[Template:Reflist]] with unknown parameter "_VALUE_"|ignoreblank=y| 1 | colwidth | group | liststyle | refs }}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>2k096ppl7lxbcjqmfluu9x2sc91rmzl</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Replace</title>
    <ns>10</ns>
    <id>38650247</id>
    <revision>
      <id>882861180</id>
      <parentid>882860584</parentid>
      <timestamp>2019-02-11T20:00:50Z</timestamp>
      <contributor>
        <username>Pppery</username>
        <id>28032115</id>
      </contributor>
      <comment>OOPS</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="135">{{{{{|safesubst:}}}#invoke:String|replace|source={{{1}}}|{{{2}}}|{{{3}}}|count={{{count|}}}}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>gb7k311qbdoyqn193n5d717fd6jg9kv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:See also</title>
    <ns>10</ns>
    <id>1721254</id>
    <revision>
      <id>763260609</id>
      <parentid>725632232</parentid>
      <timestamp>2017-02-02T05:40:25Z</timestamp>
      <contributor>
        <username>Nihiltres</username>
        <id>236191</id>
      </contributor>
      <comment>Updated from sandbox to use [[Module:Labelled list hatnote]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="199">&lt;includeonly&gt;{{#invoke:Labelled list hatnote|labelledList|See also}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>dn9i3dv2bt8lqifr6vkbycoya78rnav</sha1>
    </revision>
  </page>
  <page>
    <title>Template:See also category</title>
    <ns>10</ns>
    <id>2973833</id>
    <redirect title="Template:Category see also" />
    <revision>
      <id>819682721</id>
      <parentid>385606849</parentid>
      <timestamp>2018-01-10T18:59:43Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:See also category]]": [[WP:SEMI|semi-protecting]] highly-visible templates in response to recent template-space vandalism ([Edit=Require autoconfirmed or confirmed access] (indefinite) [Move=Require autoconfirmed or confirmed acce...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="39">#REDIRECT[[Template:Category see also]]</text>
      <sha1>k5v7zs38mkq3miiribhg4edazluxk5z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Small</title>
    <ns>10</ns>
    <id>2385304</id>
    <revision>
      <id>859227814</id>
      <parentid>859108663</parentid>
      <timestamp>2018-09-12T16:38:13Z</timestamp>
      <contributor>
        <username>Izno</username>
        <id>2927383</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contribs/Izno|Izno]] ([[User talk:Izno|talk]]) to last version by MSGJ</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="257">&lt;span style="font-size:85%;"&gt;{{{1}}}&lt;/span&gt;&lt;includeonly&gt;{{SAFESUBST:#if:{{{1|}}}||[[Category:Pages using small with an empty input parameter]]}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}&lt;!--Categories and interwikis go in the /doc sub-page.--&gt;
&lt;/noinclude&gt;</text>
      <sha1>dvonxxvea06kvln677gbl2xk9rrnlog</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Tl</title>
    <ns>10</ns>
    <id>1487430</id>
    <revision>
      <id>836995080</id>
      <parentid>776260390</parentid>
      <timestamp>2018-04-18T02:46:37Z</timestamp>
      <contributor>
        <username>Xaosflux</username>
        <id>502540</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Tl]]": used in the mediawiki interface ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="168">&amp;#123;&amp;#123;[[Template:{{{1}}}|{{{1}}}]]&amp;#125;&amp;#125;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>h0vr3yvr9jdyd17x82vnav21ngwmxuk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Trim</title>
    <ns>10</ns>
    <id>21815705</id>
    <revision>
      <id>668935791</id>
      <parentid>412919929</parentid>
      <timestamp>2015-06-27T18:27:45Z</timestamp>
      <contributor>
        <username>Plastikspork</username>
        <id>5075409</id>
      </contributor>
      <comment>Merging [[Template:Strip whitespace]] per TfD</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="114">&lt;includeonly&gt;{{ {{{|safesubst:}}}#if:1|{{{x|{{{1|}}}}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;

{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>h9devvk8f6nt34tp7zb17s39ge5wquh</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Trim quotes</title>
    <ns>10</ns>
    <id>55806367</id>
    <revision>
      <id>893339210</id>
      <parentid>849614357</parentid>
      <timestamp>2019-04-20T17:59:55Z</timestamp>
      <contributor>
        <username>MusikBot II</username>
        <id>29539620</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Trim quotes]]": [[Wikipedia:High-risk templates|High-risk template or module]] ([[User:MusikBot II/TemplateProtector|more info]]) ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="89">{{#invoke:Trim quotes|trim|s={{{s|{{{1|}}}}}}}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>ithw9opg60n9gqsw1vx0o7fh57ingg9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:User</title>
    <ns>10</ns>
    <id>827297</id>
    <revision>
      <id>772120972</id>
      <parentid>603019879</parentid>
      <timestamp>2017-03-25T12:38:50Z</timestamp>
      <contributor>
        <username>Jo-Jo Eumerus</username>
        <id>17449355</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:User]]": Allowing template editors on some templates with full protection dating back to pre-[[WP:TPROT|TPROT]] times which aren't too often or too sensitively used. ([Edit=Require template editor access] (indef...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="495">&lt;includeonly&gt;{{safesubst:#invoke:user|main}}&lt;/includeonly&gt;&lt;noinclude&gt;
&lt;!-- 
  -- Use the automatic documentation from [[Template:User-multi/template]].
  -- Some parameters must be blank, but not absent, to work correctly.
  --
--&gt;{{User-multi/template 
 | User      = 
 | Project   = 
 | Lang      = 
 | separator = 
 | 1         = t
 | 2         = c
 | demo      = 
 | span      = no
 | doc       = yes
}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>g1iphi7z826sr9ar0omd8w1lx0sm6yy</sha1>
    </revision>
  </page>
  <page>
    <title>Template:User page</title>
    <ns>10</ns>
    <id>1347169</id>
    <revision>
      <id>876686985</id>
      <parentid>710578736</parentid>
      <timestamp>2019-01-03T20:56:08Z</timestamp>
      <contributor>
        <username>Bellezzasolo</username>
        <id>20006949</id>
      </contributor>
      <comment>bring wording in line with [[WP:UP#OWN]] as discussed on TP</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="2139">{{ ombox
| type            = &lt;!-- speedy / delete / content / style / notice / move / protection / ??user?? --&gt;
| image           = {{{{{|safesubst:}}}#ifeq:{{{logo|}}}|yes|[[file:Wikipedia-logo.svg|60px|link=WP:MAIN|alt=Wiki&lt;!-- --&gt;pedia's globe icon]]|none}}
| imageright      = {{{{{|safesubst:}}}#ifeq:{{{logo|}}}|right|[[File:Wikimedia Foundation RGB logo with text.svg|60px|link=foundation:|alt=The Wiki&lt;!-- --&gt;media Foundation's icon]]}}
| style           = margin-left: 0; margin-right: 0; border:{{{border-s|1}}}px solid {{{border-c|#ffc9c9}}}; background-color: {{{background|#fffff3}}}; {{{{{|safesubst:}}}#ifeq:{{{rounded|}}}|yes|{{border-radius|15px}}}}
| textstyle       = font-size: 85%; text-align: center
| text            = '''This is a &lt;span style="white-space: nowrap"&gt;&lt;span&gt;&amp;#87;&amp;#105;&lt;!-- Wikipedia --&gt;&amp;#107;&amp;#105;&lt;/span&gt;&lt;span&gt;&amp;#112;&amp;#101;&amp;#100;&amp;#105;&amp;#97;&lt;/span&gt;&lt;/span&gt; [[Wikipedia:User pages|user page]].'''{{{1|&lt;br /&gt;}}}This is not an encyclopedia article. If you find this page on any site other than &lt;span style="white-space: nowrap"&gt;&lt;span&gt;&amp;#87;&amp;#105;&lt;!-- Wikipedia --&gt;&amp;#107;&amp;#105;&lt;/span&gt;&lt;span&gt;&amp;#112;&amp;#101;&amp;#100;&amp;#105;&amp;#97;&lt;/span&gt;,&lt;/span&gt; you are viewing a [[Website#mirror site|mirror site]]. Be aware that the page may be outdated and that the user whom this page is about may have no personal affiliation with any site other than &lt;span style="white-space: nowrap"&gt;&lt;span&gt;&amp;#87;&amp;#105;&lt;!-- Wikipedia --&gt;&amp;#107;&amp;#105;&lt;/span&gt;&lt;span&gt;&amp;#112;&amp;#101;&amp;#100;&amp;#105;&amp;#97;&lt;/span&gt;&lt;/span&gt; itself. The original page is located at &lt;span class="plainlinks" style="white-space:nowrap;"&gt;[https://en.wiki&lt;!----&gt;pedia.org/wiki/{{FULLPAGENAMEE}} &lt;span&gt;https://en.wiki&lt;/span&gt;&lt;!----&gt;&lt;span&gt;pedia.org/wi&lt;/span&gt;&lt;span&gt;ki/{{FULLPAGENAMEE}}&lt;/span&gt;].&lt;/span&gt;
| small           = &lt;!-- {{{small|}}} --&gt;
| smallimage      = &lt;!-- [[file:Some image.svg|30px]] --&gt;
| smallimageright = &lt;!-- [[file:Some image.svg|30px]] --&gt;
| smalltext       = &lt;!-- Shorter message body text. --&gt;
}}{{{{{|safesubst:}}}#ifeq:{{{noindex|}}}|yes|__NOINDEX__|}}&lt;noinclude&gt;
{{documentation}}&lt;!-- place category and language links on the /doc sub-page, not here --&gt;
&lt;/noinclude&gt;</text>
      <sha1>hs3i1cxxr5mncg050fc6p6lk6bkgoxv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Userpage</title>
    <ns>10</ns>
    <id>28736009</id>
    <redirect title="Template:User page" />
    <revision>
      <id>804522185</id>
      <parentid>769931761</parentid>
      <timestamp>2017-10-09T15:41:02Z</timestamp>
      <contributor>
        <username>MusikAnimal</username>
        <id>14882394</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Userpage]]": [[WP:High-risk templates|Highly visible template]]; 28,000+ transclusions ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="116">#REDIRECT [[Template:User page]]

{{Redirect category shell|
{{R from modification}}
{{R from template shortcut}}
}}</text>
      <sha1>t7etpdrj9rc28unfkyl3pig1e1lbsxq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Webarchive</title>
    <ns>10</ns>
    <id>22577742</id>
    <revision>
      <id>769654926</id>
      <parentid>750709028</parentid>
      <timestamp>2017-03-10T21:29:55Z</timestamp>
      <contributor>
        <username>Rich Farmbrough</username>
        <id>82835</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="176">&lt;includeonly&gt;{{#invoke:webarchive|webarchive}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- PLEASE ADD CATEGORIES AND INTERWIKIS TO THE /doc SUBPAGE, THANKS --&gt;
&lt;/noinclude&gt;</text>
      <sha1>af0jh9wqwfjf3uyx3ywwvb039disnpm</sha1>
    </revision>
  </page>
  <page>
    <title>Template:World topic</title>
    <ns>10</ns>
    <id>26164755</id>
    <revision>
      <id>819688338</id>
      <parentid>749214452</parentid>
      <timestamp>2018-01-10T19:22:37Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:World topic]]": [[WP:SEMI|semi-protecting]] highly-visible templates in response to recent template-space vandalism ([Edit=Require autoconfirmed or confirmed access] (indefinite) [Move=Require autoconfirmed or confirmed access] (i...</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="134">{{#invoke:World topic|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add cats and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>lu6v2o0qleuuad0yh5iz1vd0zbj220e</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Yesno</title>
    <ns>10</ns>
    <id>22255088</id>
    <revision>
      <id>821904792</id>
      <parentid>669640856</parentid>
      <timestamp>2018-01-23T08:37:08Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>add support for on/off, per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="366">{{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;#switch: {{&lt;includeonly&gt;safesubst:&lt;/includeonly&gt;lc: {{{1|¬}}} }}
 |no
 |n
 |false
 |off
 |0        = {{{no|&lt;!-- null --&gt;}}}
 |         = {{{blank|{{{no|&lt;!-- null --&gt;}}}}}}
 |¬        = {{{¬|}}}
 |yes
 |y
 |true
 |on
 |1        = {{{yes|yes}}}
 |#default = {{{def|{{{yes|yes}}}}}}
}}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>r1wh7ajnm478r67owpatavjany80n9e</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Yesno-no</title>
    <ns>10</ns>
    <id>48375573</id>
    <revision>
      <id>825510157</id>
      <parentid>804450734</parentid>
      <timestamp>2018-02-13T20:27:17Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <comment>separate pp-template not needed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text xml:space="preserve" bytes="269">{{safesubst:&lt;noinclude /&gt;yesno|{{{1}}}|yes={{{yes|yes}}}|no={{{no|no}}}|blank={{{blank|no}}}|¬={{{¬|no}}}|def={{{def|no}}}}}&lt;noinclude&gt;
{{Documentation|Template:Yesno/doc}}
&lt;!--Categories go in the doc page referenced above; interwikis go in Wikidata.--&gt;
&lt;/noinclude&gt;</text>
      <sha1>34vmtxa9ubuh1vz2ulp78m5ela68riu</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Anchor</title>
    <ns>828</ns>
    <id>41372338</id>
    <revision>
      <id>586910342</id>
      <parentid>586194472</parentid>
      <timestamp>2013-12-20T06:14:24Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Anchor: [[Wikipedia:Lua/Modules|High-risk Lua module]]: 20,000 transclusions ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="632">-- This module implements {{anchor}}.

local getArgs = require('Module:Arguments').getArgs
local tableTools = require('Module:TableTools')

local p = {}

function p.main(frame)
	-- Get the positional arguments from #invoke, remove any nil values,
	-- and pass them to p._main.
	local args = getArgs(frame)
	local argArray = tableTools.compressSparseArray(args)
	return p._main(unpack(argArray))
end

function p._main(...)
	-- Generate the list of anchors.
	local anchors = {...}
	local ret = {}
	for _, anchor in ipairs(anchors) do
		ret[#ret + 1] = '&lt;span id="' .. anchor .. '"&gt;&lt;/span&gt;'
	end
	return table.concat(ret)
end

return p</text>
      <sha1>na5loe2ne1o9yhs2k5p73tr355hey7t</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Arguments</title>
    <ns>828</ns>
    <id>41298065</id>
    <revision>
      <id>696500078</id>
      <parentid>668829606</parentid>
      <timestamp>2015-12-23T16:07:27Z</timestamp>
      <contributor>
        <username>Xaosflux</username>
        <id>502540</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Module:Arguments: used in the mediawiki interface ex: [[MediaWiki:Watchlist-details]] ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="10054">-- This module provides easy processing of arguments passed to Scribunto from
-- #invoke. It is intended for use by other Lua modules, and should not be
-- called from #invoke directly.

local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType

local arguments = {}

-- Generate four different tidyVal functions, so that we don't have to check the
-- options every time we call it.

local function tidyValDefault(key, val)
	if type(val) == 'string' then
		val = val:match('^%s*(.-)%s*$')
		if val == '' then
			return nil
		else
			return val
		end
	else
		return val
	end
end

local function tidyValTrimOnly(key, val)
	if type(val) == 'string' then
		return val:match('^%s*(.-)%s*$')
	else
		return val
	end
end

local function tidyValRemoveBlanksOnly(key, val)
	if type(val) == 'string' then
		if val:find('%S') then
			return val
		else
			return nil
		end
	else
		return val
	end
end

local function tidyValNoChange(key, val)
	return val
end

local function matchesTitle(given, title)
	local tp = type( given )
	return (tp == 'string' or tp == 'number') and mw.title.new( given ).prefixedText == title
end

local translate_mt = { __index = function(t, k) return k end }

function arguments.getArgs(frame, options)
	checkType('getArgs', 1, frame, 'table', true)
	checkType('getArgs', 2, options, 'table', true)
	frame = frame or {}
	options = options or {}

	--[[
	-- Set up argument translation.
	--]]
	options.translate = options.translate or {}
	if getmetatable(options.translate) == nil then
		setmetatable(options.translate, translate_mt)
	end
	if options.backtranslate == nil then
		options.backtranslate = {}
		for k,v in pairs(options.translate) do
			options.backtranslate[v] = k
		end
	end
	if options.backtranslate and getmetatable(options.backtranslate) == nil then
		setmetatable(options.backtranslate, {
			__index = function(t, k)
				if options.translate[k] ~= k then
					return nil
				else
					return k
				end
			end
		})
	end

	--[[
	-- Get the argument tables. If we were passed a valid frame object, get the
	-- frame arguments (fargs) and the parent frame arguments (pargs), depending
	-- on the options set and on the parent frame's availability. If we weren't
	-- passed a valid frame object, we are being called from another Lua module
	-- or from the debug console, so assume that we were passed a table of args
	-- directly, and assign it to a new variable (luaArgs).
	--]]
	local fargs, pargs, luaArgs
	if type(frame.args) == 'table' and type(frame.getParent) == 'function' then
		if options.wrappers then
			--[[
			-- The wrappers option makes Module:Arguments look up arguments in
			-- either the frame argument table or the parent argument table, but
			-- not both. This means that users can use either the #invoke syntax
			-- or a wrapper template without the loss of performance associated
			-- with looking arguments up in both the frame and the parent frame.
			-- Module:Arguments will look up arguments in the parent frame
			-- if it finds the parent frame's title in options.wrapper;
			-- otherwise it will look up arguments in the frame object passed
			-- to getArgs.
			--]]
			local parent = frame:getParent()
			if not parent then
				fargs = frame.args
			else
				local title = parent:getTitle():gsub('/sandbox$', '')
				local found = false
				if matchesTitle(options.wrappers, title) then
					found = true
				elseif type(options.wrappers) == 'table' then
					for _,v in pairs(options.wrappers) do
						if matchesTitle(v, title) then
							found = true
							break
						end
					end
				end

				-- We test for false specifically here so that nil (the default) acts like true.
				if found or options.frameOnly == false then
					pargs = parent.args
				end
				if not found or options.parentOnly == false then
					fargs = frame.args
				end
			end
		else
			-- options.wrapper isn't set, so check the other options.
			if not options.parentOnly then
				fargs = frame.args
			end
			if not options.frameOnly then
				local parent = frame:getParent()
				pargs = parent and parent.args or nil
			end
		end
		if options.parentFirst then
			fargs, pargs = pargs, fargs
		end
	else
		luaArgs = frame
	end

	-- Set the order of precedence of the argument tables. If the variables are
	-- nil, nothing will be added to the table, which is how we avoid clashes
	-- between the frame/parent args and the Lua args.
	local argTables = {fargs}
	argTables[#argTables + 1] = pargs
	argTables[#argTables + 1] = luaArgs

	--[[
	-- Generate the tidyVal function. If it has been specified by the user, we
	-- use that; if not, we choose one of four functions depending on the
	-- options chosen. This is so that we don't have to call the options table
	-- every time the function is called.
	--]]
	local tidyVal = options.valueFunc
	if tidyVal then
		if type(tidyVal) ~= 'function' then
			error(
				"bad value assigned to option 'valueFunc'"
					.. '(function expected, got '
					.. type(tidyVal)
					.. ')',
				2
			)
		end
	elseif options.trim ~= false then
		if options.removeBlanks ~= false then
			tidyVal = tidyValDefault
		else
			tidyVal = tidyValTrimOnly
		end
	else
		if options.removeBlanks ~= false then
			tidyVal = tidyValRemoveBlanksOnly
		else
			tidyVal = tidyValNoChange
		end
	end

	--[[
	-- Set up the args, metaArgs and nilArgs tables. args will be the one
	-- accessed from functions, and metaArgs will hold the actual arguments. Nil
	-- arguments are memoized in nilArgs, and the metatable connects all of them
	-- together.
	--]]
	local args, metaArgs, nilArgs, metatable = {}, {}, {}, {}
	setmetatable(args, metatable)

	local function mergeArgs(tables)
		--[[
		-- Accepts multiple tables as input and merges their keys and values
		-- into one table. If a value is already present it is not overwritten;
		-- tables listed earlier have precedence. We are also memoizing nil
		-- values, which can be overwritten if they are 's' (soft).
		--]]
		for _, t in ipairs(tables) do
			for key, val in pairs(t) do
				if metaArgs[key] == nil and nilArgs[key] ~= 'h' then
					local tidiedVal = tidyVal(key, val)
					if tidiedVal == nil then
						nilArgs[key] = 's'
					else
						metaArgs[key] = tidiedVal
					end
				end
			end
		end
	end

	--[[
	-- Define metatable behaviour. Arguments are memoized in the metaArgs table,
	-- and are only fetched from the argument tables once. Fetching arguments
	-- from the argument tables is the most resource-intensive step in this
	-- module, so we try and avoid it where possible. For this reason, nil
	-- arguments are also memoized, in the nilArgs table. Also, we keep a record
	-- in the metatable of when pairs and ipairs have been called, so we do not
	-- run pairs and ipairs on the argument tables more than once. We also do
	-- not run ipairs on fargs and pargs if pairs has already been run, as all
	-- the arguments will already have been copied over.
	--]]

	metatable.__index = function (t, key)
		--[[
		-- Fetches an argument when the args table is indexed. First we check
		-- to see if the value is memoized, and if not we try and fetch it from
		-- the argument tables. When we check memoization, we need to check
		-- metaArgs before nilArgs, as both can be non-nil at the same time.
		-- If the argument is not present in metaArgs, we also check whether
		-- pairs has been run yet. If pairs has already been run, we return nil.
		-- This is because all the arguments will have already been copied into
		-- metaArgs by the mergeArgs function, meaning that any other arguments
		-- must be nil.
		--]]
		if type(key) == 'string' then
			key = options.translate[key]
		end
		local val = metaArgs[key]
		if val ~= nil then
			return val
		elseif metatable.donePairs or nilArgs[key] then
			return nil
		end
		for _, argTable in ipairs(argTables) do
			local argTableVal = tidyVal(key, argTable[key])
			if argTableVal ~= nil then
				metaArgs[key] = argTableVal
				return argTableVal
			end
		end
		nilArgs[key] = 'h'
		return nil
	end

	metatable.__newindex = function (t, key, val)
		-- This function is called when a module tries to add a new value to the
		-- args table, or tries to change an existing value.
		if type(key) == 'string' then
			key = options.translate[key]
		end
		if options.readOnly then
			error(
				'could not write to argument table key "'
					.. tostring(key)
					.. '"; the table is read-only',
				2
			)
		elseif options.noOverwrite and args[key] ~= nil then
			error(
				'could not write to argument table key "'
					.. tostring(key)
					.. '"; overwriting existing arguments is not permitted',
				2
			)
		elseif val == nil then
			--[[
			-- If the argument is to be overwritten with nil, we need to erase
			-- the value in metaArgs, so that __index, __pairs and __ipairs do
			-- not use a previous existing value, if present; and we also need
			-- to memoize the nil in nilArgs, so that the value isn't looked
			-- up in the argument tables if it is accessed again.
			--]]
			metaArgs[key] = nil
			nilArgs[key] = 'h'
		else
			metaArgs[key] = val
		end
	end

	local function translatenext(invariant)
		local k, v = next(invariant.t, invariant.k)
		invariant.k = k
		if k == nil then
			return nil
		elseif type(k) ~= 'string' or not options.backtranslate then
			return k, v
		else
			local backtranslate = options.backtranslate[k]
			if backtranslate == nil then
				-- Skip this one. This is a tail call, so this won't cause stack overflow
				return translatenext(invariant)
			else
				return backtranslate, v
			end
		end
	end

	metatable.__pairs = function ()
		-- Called when pairs is run on the args table.
		if not metatable.donePairs then
			mergeArgs(argTables)
			metatable.donePairs = true
		end
		return translatenext, { t = metaArgs }
	end

	local function inext(t, i)
		-- This uses our __index metamethod
		local v = t[i + 1]
		if v ~= nil then
			return i + 1, v
		end
	end

	metatable.__ipairs = function (t)
		-- Called when ipairs is run on the args table.
		return inext, t, 0
	end

	return args
end

return arguments</text>
      <sha1>5qx9tzlul9ser30uxj9nbasjt92cevn</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Catalog lookup link</title>
    <ns>828</ns>
    <id>57923154</id>
    <revision>
      <id>884931331</id>
      <parentid>871035268</parentid>
      <timestamp>2019-02-24T22:51:20Z</timestamp>
      <contributor>
        <username>Swarm</username>
        <id>7274040</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Catalog lookup link]]": [[WP:High-risk templates|Highly visible template]] - match to template ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="9510">--[[
|1=, |2=, |3=, |4=, |5=, |6=, |7=, |8=, |9=: Optional unnamed parameters for 0 to 9 items to be listed.
	Whitespace is trimmed off both ends and the strings are urlencoded as if they were query strings.
|article-link=: Optional Wikipedia article name to link to.
|article-name=: Optional alternative text to be displayed for |article-link= link in front of catalog link.
	If not specified, |article-link= is used for display as well. If both parameters are not specified, the prefix is omitted completely.
|article-suffix=: Optional symbol to be displayed after article name or link (f.e. ":"; omitted, if not defined).
|link-prefix=: Optional prefix portion of url to external catalog item(s).
|link-suffix=: Optional suffix portion of url to external catalog item(s).
|item-prefix=: Optional text displayed in front of each external link (omitted, if not defined)
|item-suffix=: Optional text displayed immediately after each external link (omitted, if not defined)
|list-separator=: Optional alternative separator displayed between list items (default: ", ", if not specified). Whitespace must be encoded.
|list-leadout=: Optional alternative leadout text displayed between the last two list items (f.e. "and", "or", "as well as", etc., default is the |list-separator= or ", ".)
|leadout-suffix=: Optional alternative suffix text of the leadout (see |list-leadout=) displayed between the last two list items.
	This gets added in front of the last list item instead of the default whitespace which is added without this parameter.
	This may be necessary if |list-separator= is used not only to define the list separator but also parts of the item prefix
	(except for the first one). (At present, this is used only to cope with format oddities of the {{MR}} template.)


new parameters that support access icons:
|allowed_icons= – comma-separated list of keywords: free, limited, registration, subscription, none, all (default; 'all' implied when this parameter empty or omitted)
	the icons specified in the following parameters are checked agains the list in |allowed-icons=; not in the list? not displayed
|url-access-all= – applies specified icon to all items in the list; accepted keywords: free, limited, registration, subscription;
|url-accessn= – applies specified icon to item n of the list (the nth positional parameter); accepted keywords: free, limited, registration, subscription;

]]

require('Module:No globals');
local getArgs = require ('Module:Arguments').getArgs;
local lock_icons = {															--icon classes are defined in Module:Citation/CS1/styles.css
	['free'] = {'cs1-lock-free', 'Freely accessible'},
	['registration'] = {'cs1-lock-registration', 'Free registration required'},
	['limited'] = {'cs1-lock-limited', 'Free access subject to limited trial, subscription normally required'},
	['subscription'] = {'cs1-lock-subscription', 'Paid subscription required'},
	}


--[[--------------------------&lt; I S _ S E T &gt;------------------------------------------------------------------

Returns true if argument is set; false otherwise. Argument is 'set' when it exists (not nil) or when it is not an empty string.

]]

local function is_set( var )
	return not (var == nil or var == '');
end


--[=[-------------------------&lt; M A K E _ L A B E L &gt;----------------------------------------------------------

Makes a wikilinked or plain text label from arguments; when both link and display text is provided, makes a
wikilink in the form [[L|D]]; if only link is provided, makes a wikilinked label in the form [[L]]; if only display
is provided, makes a plain-text label; if neither are provided makes a label from suffix, returns an empty string else.

]=]

local function make_label (link, display, suffix)
local label = '';
	if is_set (link) then
		if is_set (display) then
			label = table.concat ({'[[', link, '|', display, ']]'});			-- make [[L|D]] wikilinked label
		else
			label = table.concat ({'[[', link, ']]'});							-- make [[L]] wikilinked label
		end
	elseif is_set (display) then
		label = display;														-- plain-text label
	end

	if is_set (label) then														
		return table.concat ({label, suffix, '&amp;nbsp;'});						-- assemble the complete label
	else
		return suffix;															-- no space after suffix if no label
	end
end


--[[--------------------------&lt; I C O N _ I N D E X _ G E T &gt;--------------------------------------------------

returns index into lock_icons[] if value assigned to |url-access= or |url-access-all= is a valid icon selector
(free, limited, registration, subscription)

icon selection may be limited to a subset of the icons with:
	|allow_icons=&lt;comma-separated list of allowed icons&gt;
&lt;comma-separated list of allowed icons&gt; may be any of the keywords: free, limited, registration, subscription, none, all

keyword 'all' is default condition; 'all' is implied when |allowed=icons= is empty or omitted

keyword 'none' for use with identifiers where icons are inappropriate (isbn, issn, oclc)

Templates using this module should set:
	|allow_icons=free for most identifiers;
	|allow_icons=none for isbn, issn, oclc, etc

|url-access= is alias of |url-access1=

]]

local function icon_index_get (args, k)
	local icon;
	local param_name = (1 == k and is_set (args['url-access']) and 'url-access') or table.concat ({'url-access', k});	-- make an enumerated parameter name

	if is_set (args['url-access-all']) and lock_icons[args['url-access-all']] then	-- if set and valid
		icon = args['url-access-all'];											-- tentatively 

	elseif is_set (args[param_name]) and lock_icons[args[param_name]] then		-- if set and valid
		icon = args[param_name];												-- tentatively

	else
		return nil;																-- neither |url-access-all= nor |url-accessn= set so return nil
	end

	if args['allow_icons'] and args['allow_icons']:find ('none') then			-- if 'none' keyword is present
		return nil;																-- icons display not allowed
	end

	if not is_set (args['allow_icons']) or args['allow_icons']:find ('all') or args['allow_icons']:find (icon) then	--if all allowed or specified icon is allowed
		return icon;															-- return selected icon as index into icon table
	end
end


--[[--------------------------&lt; M A I N &gt;----------------------------------------------------------------------

Template entrypoint to this module; arguments come primarily from the parent frame though in templates that use
this module, |allowed-icons= is typically set, if needed, in the {{#invoke:}}.

]]

local function main (frame)
	local args = getArgs (frame);
	local out_text = '';

	if is_set(args[1]) then
		local result = {};
		local label;
		
		local article_suffix = args['article-suffix'] or args['article-postfix'] or '';
		local link_prefix = args['link-prefix'] or '';
		local link_suffix = args['link-suffix'] or args['link-postfix'] or '';
		local item_prefix = args['item-prefix'] or '';
		local item_suffix = args['item-suffix'] or args['item-postfix'] or '';
		local list_separator = args['list-separator'] or ', ';
		local leadout_suffix = args['leadout-suffix'] or args['leadout-postfix'] or ' ';
		local list_leadout;

		local icon_index;
		
		if is_set (args['list-leadout']) then
			list_leadout = table.concat ({
				mw.ustring.gsub (args['list-leadout'], '^(%a)', ' %1'),			-- insert leading space if first character is a letter
				leadout_suffix,
			});
		else
			list_leadout = '';
		end
		
		label = make_label (args['article-link'], args['article-name'], article_suffix);

		for k, item in ipairs (args) do											-- for each of the positional parameters
			item = mw.text.trim (item);											-- remove extraneous whitespace
			if is_set (link_prefix) then										-- if there is link prefix...
				item = table.concat ({											-- create an external link item
					'[',														-- open ext link markup
					link_prefix,												-- url prefix
					mw.uri.encode (item),										-- item is part of url
					link_suffix,												-- url suffix
					' ',														-- required space between url and label
					item_prefix,												-- label prefix
					item,														-- item as label
					item_suffix,												-- item suffix
					']'															-- close ext link markup
				});

				icon_index = icon_index_get (args, k);							-- set if icon specified and allowed for this item; nil else
				if icon_index then
					item = table.concat ({										-- add access icon markup to this item
						'&lt;span class="',										-- open the opening span tag; icon classes are defined in Module:Citation/CS1/styles.css
						lock_icons[icon_index][1],								-- add the appropriate lock icon class
						'" title="',											-- and the title attribute
						lock_icons[icon_index][2],								-- for an appropriate tool tip
						'"&gt;',													-- close the opening span tag
						item,
						'&lt;/span&gt;',												-- and close the span
					});
				end	
			else
				item = table.concat ({											-- create an unlinked item
					item_prefix,												-- label prefix
					item,														-- item as label
					item_suffix,												-- item suffix
				});
			end
	
			table.insert (result, item);										-- add the item to the result list
		end
	
		if is_set (args['list-leadout']) then
			out_text = table.concat ({label, mw.text.listToText (result, list_separator, list_leadout)});
		else
			out_text = table.concat ({label, table.concat (result, list_separator)});
		end

	end	--is_set (args[1])
	
	return out_text
end

return {main = main};</text>
      <sha1>n299uh6h04ym5bcsx9iehhpn6bdllyn</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler</title>
    <ns>828</ns>
    <id>39772274</id>
    <revision>
      <id>874046578</id>
      <parentid>617942873</parentid>
      <timestamp>2018-12-16T20:12:57Z</timestamp>
      <contributor>
        <username>Amorymeltzer</username>
        <id>141948</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Category handler]]": [[WP:High-risk templates|High-risk Lua module]] ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="7871">--------------------------------------------------------------------------------
--                                                                            --
--                              CATEGORY HANDLER                              --
--                                                                            --
--      This module implements the {{category handler}} template in Lua,      --
--      with a few improvements: all namespaces and all namespace aliases     --
--      are supported, and namespace names are detected automatically for     --
--      the local wiki. This module requires [[Module:Namespace detect]]      --
--      and [[Module:Yesno]] to be available on the local wiki. It can be     --
--      configured for different wikis by altering the values in              --
--      [[Module:Category handler/config]], and pages can be blacklisted      --
--      from categorisation by using [[Module:Category handler/blacklist]].   --
--                                                                            --
--------------------------------------------------------------------------------

-- Load required modules
local yesno = require('Module:Yesno')

-- Lazily load things we don't always need
local mShared, mappings

local p = {}

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

local function trimWhitespace(s, removeBlanks)
	if type(s) ~= 'string' then
		return s
	end
	s = s:match('^%s*(.-)%s*$')
	if removeBlanks then
		if s ~= '' then
			return s
		else
			return nil
		end
	else
		return s
	end
end

--------------------------------------------------------------------------------
-- CategoryHandler class
--------------------------------------------------------------------------------

local CategoryHandler = {}
CategoryHandler.__index = CategoryHandler

function CategoryHandler.new(data, args)
	local obj = setmetatable({ _data = data, _args = args }, CategoryHandler)
	
	-- Set the title object
	do
		local pagename = obj:parameter('demopage')
		local success, titleObj
		if pagename then
			success, titleObj = pcall(mw.title.new, pagename)
		end
		if success and titleObj then
			obj.title = titleObj
			if titleObj == mw.title.getCurrentTitle() then
				obj._usesCurrentTitle = true
			end
		else
			obj.title = mw.title.getCurrentTitle()
			obj._usesCurrentTitle = true
		end
	end

	-- Set suppression parameter values
	for _, key in ipairs{'nocat', 'categories'} do
		local value = obj:parameter(key)
		value = trimWhitespace(value, true)
		obj['_' .. key] = yesno(value)
	end
	do
		local subpage = obj:parameter('subpage')
		local category2 = obj:parameter('category2')
		if type(subpage) == 'string' then
			subpage = mw.ustring.lower(subpage)
		end
		if type(category2) == 'string' then
			subpage = mw.ustring.lower(category2)
		end
		obj._subpage = trimWhitespace(subpage, true)
		obj._category2 = trimWhitespace(category2) -- don't remove blank values
	end
	return obj
end

function CategoryHandler:parameter(key)
	local parameterNames = self._data.parameters[key]
	local pntype = type(parameterNames)
	if pntype == 'string' or pntype == 'number' then
		return self._args[parameterNames]
	elseif pntype == 'table' then
		for _, name in ipairs(parameterNames) do
			local value = self._args[name]
			if value ~= nil then
				return value
			end
		end
		return nil
	else
		error(string.format(
			'invalid config key "%s"',
			tostring(key)
		), 2)
	end
end

function CategoryHandler:isSuppressedByArguments()
	return
		-- See if a category suppression argument has been set.
		self._nocat == true
		or self._categories == false
		or (
			self._category2
			and self._category2 ~= self._data.category2Yes
			and self._category2 ~= self._data.category2Negative
		)

		-- Check whether we are on a subpage, and see if categories are
		-- suppressed based on our subpage status.
		or self._subpage == self._data.subpageNo and self.title.isSubpage
		or self._subpage == self._data.subpageOnly and not self.title.isSubpage
end

function CategoryHandler:shouldSkipBlacklistCheck()
	-- Check whether the category suppression arguments indicate we
	-- should skip the blacklist check.
	return self._nocat == false
		or self._categories == true
		or self._category2 == self._data.category2Yes
end

function CategoryHandler:matchesBlacklist()
	if self._usesCurrentTitle then
		return self._data.currentTitleMatchesBlacklist
	else
		mShared = mShared or require('Module:Category handler/shared')
		return mShared.matchesBlacklist(
			self.title.prefixedText,
			mw.loadData('Module:Category handler/blacklist')
		)
	end
end

function CategoryHandler:isSuppressed()
	-- Find if categories are suppressed by either the arguments or by
	-- matching the blacklist.
	return self:isSuppressedByArguments()
		or not self:shouldSkipBlacklistCheck() and self:matchesBlacklist()
end

function CategoryHandler:getNamespaceParameters()
	if self._usesCurrentTitle then
		return self._data.currentTitleNamespaceParameters
	else
		if not mappings then
			mShared = mShared or require('Module:Category handler/shared')
			mappings = mShared.getParamMappings(true) -- gets mappings with mw.loadData
		end
		return mShared.getNamespaceParameters(
			self.title,
			mappings
		)
	end
end

function CategoryHandler:namespaceParametersExist()
	-- Find whether any namespace parameters have been specified.
	-- We use the order "all" --&gt; namespace params --&gt; "other" as this is what
	-- the old template did.
	if self:parameter('all') then
		return true
	end
	if not mappings then
		mShared = mShared or require('Module:Category handler/shared')
		mappings = mShared.getParamMappings(true) -- gets mappings with mw.loadData
	end
	for ns, params in pairs(mappings) do
		for i, param in ipairs(params) do
			if self._args[param] then
				return true
			end
		end
	end
	if self:parameter('other') then
		return true
	end
	return false
end

function CategoryHandler:getCategories()
	local params = self:getNamespaceParameters()
	local nsCategory
	for i, param in ipairs(params) do
		local value = self._args[param]
		if value ~= nil then
			nsCategory = value
			break
		end
	end
	if nsCategory ~= nil or self:namespaceParametersExist() then
		-- Namespace parameters exist - advanced usage.
		if nsCategory == nil then
			nsCategory = self:parameter('other')
		end
		local ret = {self:parameter('all')}
		local numParam = tonumber(nsCategory)
		if numParam and numParam &gt;= 1 and math.floor(numParam) == numParam then
			-- nsCategory is an integer
			ret[#ret + 1] = self._args[numParam]
		else
			ret[#ret + 1] = nsCategory
		end
		if #ret &lt; 1 then
			return nil
		else
			return table.concat(ret)
		end
	elseif self._data.defaultNamespaces[self.title.namespace] then
		-- Namespace parameters don't exist, simple usage.
		return self._args[1]
	end
	return nil
end

--------------------------------------------------------------------------------
-- Exports
--------------------------------------------------------------------------------

local p = {}

function p._exportClasses()
	-- Used for testing purposes.
	return {
		CategoryHandler = CategoryHandler
	}
end

function p._main(args, data)
	data = data or mw.loadData('Module:Category handler/data')
	local handler = CategoryHandler.new(data, args)
	if handler:isSuppressed() then
		return nil
	end
	return handler:getCategories()
end

function p.main(frame, data)
	data = data or mw.loadData('Module:Category handler/data')
	local args = require('Module:Arguments').getArgs(frame, {
		wrappers = data.wrappers,
		valueFunc = function (k, v)
			v = trimWhitespace(v)
			if type(k) == 'number' then
				if v ~= '' then
					return v
				else
					return nil
				end
			else
				return v
			end
		end
	})
	return p._main(args, data)
end

return p</text>
      <sha1>letwavu3yvlayfzew66uuwixmwebq5b</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/blacklist</title>
    <ns>828</ns>
    <id>43232926</id>
    <revision>
      <id>894414634</id>
      <parentid>757409491</parentid>
      <timestamp>2019-04-27T19:05:17Z</timestamp>
      <contributor>
        <username>El C</username>
        <id>92203</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Category handler/blacklist]]": [[WP:High-risk templates|High-risk Lua module]] ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="764">-- This module contains the blacklist used by [[Module:Category handler]].
-- Pages that match Lua patterns in this list will not be categorised unless
-- categorisation is explicitly requested.

return {
	'^Main Page$', -- don't categorise the main page.

	-- Don't categorise the following pages or their subpages.
	-- "%f[/\0]" matches if the next character is "/" or the end of the string.
	'^Wikipedia:Cascade%-protected items%f[/\0]',
	'^User:UBX%f[/\0]', -- The userbox "template" space.
	'^User talk:UBX%f[/\0]',

	-- Don't categorise subpages of these pages, but allow
	-- categorisation of the base page.
	'^Wikipedia:Template messages/.*$',

	-- Don't categorise archives.
	'/[aA]rchive',
	"^Wikipedia:Administrators' noticeboard/IncidentArchive%d+$",
}</text>
      <sha1>hwue3i1eua4tsdxlsbcs4f5syudywbe</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/config</title>
    <ns>828</ns>
    <id>42291997</id>
    <revision>
      <id>894414603</id>
      <parentid>616764079</parentid>
      <timestamp>2019-04-27T19:05:05Z</timestamp>
      <contributor>
        <username>El C</username>
        <id>92203</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Category handler/config]]": [[WP:High-risk templates|High-risk Lua module]] ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="5755">--------------------------------------------------------------------------------
--            [[Module:Category handler]] configuration data                  --
--       Language-specific parameter names and values can be set here.        --
--       For blacklist config, see [[Module:Category handler/blacklist]].     --
--------------------------------------------------------------------------------

local cfg = {} -- Don't edit this line.

--------------------------------------------------------------------------------
--                       Start configuration data                             --
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--                              Parameter names                               --
-- These configuration items specify custom parameter names.                  --
-- To add one extra name, you can use this format:                            --
--                                                                            --
-- foo = 'parameter name',                                                    --
--                                                                            --
-- To add multiple names, you can use this format:                            --
--                                                                            --
-- foo = {'parameter name 1', 'parameter name 2', 'parameter name 3'},        --
--------------------------------------------------------------------------------

cfg.parameters = {
	
	-- The nocat and categories parameter suppress
	-- categorisation. They are used with Module:Yesno, and work as follows:
	--
	-- cfg.nocat:
	-- Result of yesno()                        Effect
	-- true                                     Categorisation is suppressed
	-- false                                    Categorisation is allowed, and
	--                                          the blacklist check is skipped
	-- nil                                      Categorisation is allowed
	--
	-- cfg.categories:
	-- Result of yesno()                        Effect
	-- true                                     Categorisation is allowed, and
	--                                          the blacklist check is skipped
	-- false                                    Categorisation is suppressed
	-- nil                                      Categorisation is allowed
	nocat = 'nocat',
	categories = 'categories',
	
	-- The parameter name for the legacy "category2" parameter. This skips the
	-- blacklist if set to the cfg.category2Yes value, and suppresses
	-- categorisation if present but equal to anything other than
	-- cfg.category2Yes or cfg.category2Negative.
	category2 = 'category2',
	
	-- cfg.subpage is the parameter name to specify how to behave on subpages.
	subpage = 'subpage',
	
	-- The parameter for data to return in all namespaces.
	all = 'all',
	
	-- The parameter name for data to return if no data is specified for the
	-- namespace that is detected.
	other = 'other',
	
	-- The parameter name used to specify a page other than the current page;
	-- used for testing and demonstration.
	demopage = 'page',
}

--------------------------------------------------------------------------------
--                              Parameter values                              --
-- These are set values that can be used with certain parameters. Only one    --
-- value can be specified, like this:                                         --
--                                                                            --
-- cfg.foo = 'value name'                                                     --                                               --
--------------------------------------------------------------------------------

-- The following settings are used with the cfg.category2 parameter. Setting
-- cfg.category2 to cfg.category2Yes skips the blacklist, and if cfg.category2
-- is present but equal to anything other than cfg.category2Yes or
-- cfg.category2Negative then it supresses cateogrisation.
cfg.category2Yes = 'yes'
cfg.category2Negative = '¬'

-- The following settings are used with the cfg.subpage parameter.
-- cfg.subpageNo is the value to specify to not categorise on subpages;
-- cfg.subpageOnly is the value to specify to only categorise on subpages.
cfg.subpageNo = 'no'
cfg.subpageOnly = 'only'

--------------------------------------------------------------------------------
--                           Default namespaces                               --
-- This is a table of namespaces to categorise by default. The keys are the   --
-- namespace numbers.                                                         --
--------------------------------------------------------------------------------

cfg.defaultNamespaces = {
	[  0] = true, -- main
	[  6] = true, -- file
	[ 12] = true, -- help
	[ 14] = true, -- category
	[100] = true, -- portal
	[108] = true, -- book
}

--------------------------------------------------------------------------------
--                                Wrappers                                    --
-- This is a wrapper template or a list of wrapper templates to be passed to  --
-- [[Module:Arguments]].                                                      --
--------------------------------------------------------------------------------

cfg.wrappers = 'Template:Category handler'

--------------------------------------------------------------------------------
--                           End configuration data                           --
--------------------------------------------------------------------------------

return cfg -- Don't edit this line.</text>
      <sha1>6ga9hbq2pdwalsvx68i53dmbr421rq5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/data</title>
    <ns>828</ns>
    <id>43233647</id>
    <revision>
      <id>894414581</id>
      <parentid>616764105</parentid>
      <timestamp>2019-04-27T19:04:53Z</timestamp>
      <contributor>
        <username>El C</username>
        <id>92203</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Category handler/data]]": [[WP:High-risk templates|High-risk Lua module]] ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="631">-- This module assembles data to be passed to [[Module:Category handler]] using
-- mw.loadData. This includes the configuration data and whether the current
-- page matches the title blacklist.

local data = require('Module:Category handler/config')
local mShared = require('Module:Category handler/shared')
local blacklist = require('Module:Category handler/blacklist')
local title = mw.title.getCurrentTitle()

data.currentTitleMatchesBlacklist = mShared.matchesBlacklist(
	title.prefixedText,
	blacklist
)

data.currentTitleNamespaceParameters = mShared.getNamespaceParameters(
	title,
	mShared.getParamMappings()
)

return data</text>
      <sha1>k26mwixuaeijisfddb0sxkg82iux8v4</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category handler/shared</title>
    <ns>828</ns>
    <id>43232937</id>
    <revision>
      <id>894414384</id>
      <parentid>616764145</parentid>
      <timestamp>2019-04-27T19:03:28Z</timestamp>
      <contributor>
        <username>El C</username>
        <id>92203</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Category handler/shared]]": [[WP:High-risk templates|High-risk Lua module]] ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="888">-- This module contains shared functions used by [[Module:Category handler]]
-- and its submodules.

local p = {}

function p.matchesBlacklist(page, blacklist)
	for i, pattern in ipairs(blacklist) do
		local match = mw.ustring.match(page, pattern)
		if match then
			return true
		end
	end
	return false
end

function p.getParamMappings(useLoadData)
	local dataPage = 'Module:Namespace detect/data'
	if useLoadData then
		return mw.loadData(dataPage).mappings
	else
		return require(dataPage).mappings
	end
end

function p.getNamespaceParameters(titleObj, mappings)
	-- We don't use title.nsText for the namespace name because it adds
	-- underscores.
	local mappingsKey
	if titleObj.isTalkPage then
		mappingsKey = 'talk'
	else
		mappingsKey = mw.site.namespaces[titleObj.namespace].name
	end
	mappingsKey = mw.ustring.lower(mappingsKey)
	return mappings[mappingsKey] or {}
end

return p</text>
      <sha1>omlsnhudxz6juptvtxz7ns97jutbzc5</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Category see also</title>
    <ns>828</ns>
    <id>54026359</id>
    <revision>
      <id>822579325</id>
      <parentid>780456974</parentid>
      <timestamp>2018-01-27T05:50:30Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Module:Category see also]]": [[WP:High-risk templates|High-risk Lua module]]: 50,000+ transclusions ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3481">-- This module implements {{Category see also}}

local mHatnote = require('Module:Hatnote')

local p = {}

local function makeWikitextError(msg)
	return string.format(
		'&lt;strong class="error"&gt;Error: %s ([[Template:Category see also]])&lt;/strong&gt;',
		msg
	)
end

-- Gets the length of the sequence seq. Usually this should be done with the #
-- operator, but we need to work with tables that get their values through an
-- __index metamethod.
local function getSequenceLength(seq)
	local length = 0
	for i in ipairs(seq) do
		length = i
	end
	return length
end

-- Given a table of options, returns a function that formats categories for
-- those options.
--
-- Options:
-- project - a project code such as "fr" (for the French Wikipedia)
-- showPrefix - a boolean value for whether to show the "Category:" prefix
--              (and the project prefix if specified)
--
-- This is implemented as a function generator rather than a simple function
-- so that we can just process the options once, instead of every time we
-- generate a category.
local function newCategoryLinker(options)
	local formatString
	if options.project then
		if options.showPrefix then
			formatString = '[[:' .. options.project .. ':Category:%s]]'
		else
			formatString = '[[:' .. options.project .. ':Category:%s|%s]]'
		end
	else
		if options.showPrefix then
			formatString = '[[:Category:%s]]'
		else
			formatString = '[[:Category:%s|%s]]'
		end
	end
	return function (category)
		local title = mw.title.new(category)
		local pageName, display
		if not title then
			-- category is not a valid title, usually because of invalid
			-- characters like &lt; or [. Raise an error and suppress the stack
			-- level information so that we can catch it and format the error
			-- message as wikitext.
			error(string.format(
				"'%s' is not a valid category name",
				category
			), 0)
		elseif title.namespace == 14 then -- Category namespace
			pageName = title.text
			display = title.text
		else
			pageName = title.prefixedText
			display = category
		end
		-- We can get away with using two arguments even when
		-- options.showDisplay is false, as string.format ignores extra
		-- arguments as long as there is an argument for each flag in the
		-- format string.
		return formatString:format(pageName, display)
	end
end

function p._main(args)
	local nLinks = getSequenceLength(args)

	if nLinks &lt; 1 then
		return makeWikitextError('at least one parameter required')
	end

	local makeCategoryLink = newCategoryLinker{
		project = args.project,
		showPrefix = nLinks == 1,
	}

	local links = {}
	for i, cat in ipairs(args) do
		local success, categoryLink = pcall(makeCategoryLink, cat)
		if success then
			links[i] = categoryLink
		else
			-- If there was an error, then categoryLink is the error message.
			return makeWikitextError(categoryLink)
		end
	end

	local formatString
	if nLinks == 1 then
		formatString = '%s: %s.'
	else
		formatString = '%s: the categories %s.'
	end

	-- Don't output a comma before the "and" if we have only two links.
	local conjunction
	if nLinks == 2 then
		conjunction = ' and '
	else
		conjunction = ', and '
	end

	local hatnoteText = formatString:format(
		args.LABEL or 'See also',
		mw.text.listToText(links, ', ', conjunction)
	)
	return mHatnote._hatnote(hatnoteText, {selfref = true})
end

function p.main(frame)
	local args = require('Module:Arguments').getArgs(frame, {
		wrappers = 'Template:Category see also',
	})
	return p._main(args)
end

return p</text>
      <sha1>ackncnm8uwpmexk2x424udyq1o7l1q3</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Check for unknown parameters</title>
    <ns>828</ns>
    <id>42286729</id>
    <revision>
      <id>881505995</id>
      <parentid>880284469</parentid>
      <timestamp>2019-02-03T01:04:52Z</timestamp>
      <contributor>
        <username>Johnuniq</username>
        <id>6036800</id>
      </contributor>
      <comment>update from sandbox to sanitize displayed parameters, replacing strip markers with "&lt;tag&gt;...&lt;/tag&gt;" per [[User talk:Johnuniq#Check for unknown parameters]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="2975">-- This module may be used to compare the arguments passed to the parent
-- with a list of arguments, returning a specified result if an argument is
-- not on the list
local p = {}

local function trim(s)
	return s:match('^%s*(.-)%s*$')
end

local function isnotempty(s)
	return s and s:match('%S')
end

local function clean(text)
	-- Return text cleaned for display and truncated if too long.
	-- Strip markers are replaced with dummy text representing the original wikitext.
	local pos, truncated
	local function truncate(text)
		if truncated then
			return ''
		end
		if mw.ustring.len(text) &gt; 25 then
			truncated = true
			text = mw.ustring.sub(text, 1, 25) .. '...'
		end
		return mw.text.nowiki(text)
	end
	local parts = {}
	for before, tag, remainder in text:gmatch('([^\127]*)\127[^\127]*%-(%l+)%-[^\127]*\127()') do
		pos = remainder
		table.insert(parts, truncate(before) .. '&amp;lt;' .. tag .. '&amp;gt;...&amp;lt;/' .. tag .. '&amp;gt;')
	end
	table.insert(parts, truncate(text:sub(pos or 1)))
	return table.concat(parts)
end

function p.check (frame)
	local args = frame.args
	local pargs = frame:getParent().args
	local ignoreblank = isnotempty(args['ignoreblank'])
	local showblankpos = isnotempty(args['showblankpositional'])
	local knownargs = {}
	local unknown = args['unknown'] or 'Found _VALUE_, '
	local preview = args['preview']

	local values = {}
	local res = {}
	local regexps = {}

	-- create the list of known args, regular expressions, and the return string
	for k, v in pairs(args) do
		if type(k) == 'number' then
			v = trim(v)
			knownargs[v] = 1
		elseif k:find('^regexp[1-9][0-9]*$') then
			table.insert(regexps, '^' .. v .. '$')
		end
	end
	if isnotempty(preview) then
		preview = '&lt;div class="hatnote" style="color:red"&gt;&lt;strong&gt;Warning:&lt;/strong&gt; ' .. preview .. ' (this message is shown only in preview).&lt;/div&gt;'
	elseif preview == nil then
		preview = unknown
	end

	-- loop over the parent args, and make sure they are on the list
	for k, v in pairs(pargs) do
		if type(k) == 'string' and knownargs[k] == nil then
			local knownflag = false
			for _, regexp in ipairs(regexps) do
				if mw.ustring.match(k, regexp) then
					knownflag = true
					break
				end
			end
			if not knownflag and ( not ignoreblank or isnotempty(v) )  then
				table.insert(values, clean(k))
			end
		elseif type(k) == 'number' and
			knownargs[tostring(k)] == nil and
			( showblankpos or isnotempty(v) )
		then
			table.insert(values, k .. ' = ' .. clean(v))
		end
	end

	-- add results to the output tables
	if #values &gt; 0 then
		if frame:preprocess( "{{REVISIONID}}" ) == "" then
			unknown = preview
		end
		for _, v in pairs(values) do
			if v == '' then
				-- Fix odd bug for | = which gets stripped to the empty string and
				-- breaks category links
				v = ' '
			end
			-- avoid error with v = 'example%2' ("invalid capture index")
			local r =  unknown:gsub('_VALUE_', {_VALUE_ = v})
			table.insert(res, r)
		end
	end

	return table.concat(res)
end

return p</text>
      <sha1>cm62fmife30rc1md40xrcrun13q5k1e</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Check isxn</title>
    <ns>828</ns>
    <id>47420247</id>
    <revision>
      <id>783139241</id>
      <parentid>712698918</parentid>
      <timestamp>2017-05-31T10:38:54Z</timestamp>
      <contributor>
        <username>The Anome</username>
        <id>76</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Check isxn]]": [[WP:High-risk templates|High-risk Lua module]] ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="5972">-- This template is a copy of the ISXN validation code from [[Module:Citation/CS1]]
-- which allows for validating ISBN, ISMN, and ISSN without invoking a citation template

local p = {}

--[[--------------------------&lt; IS _ V A L I D _ I S X N &gt;-----------------------------------------------------

ISBN-10 and ISSN validator code calculates checksum across all isbn/issn digits including the check digit. ISBN-13 is checked in check_isbn().
If the number is valid the result will be 0. Before calling this function, issbn/issn must be checked for length and stripped of dashes,
spaces and other non-isxn characters.

]]

local function is_valid_isxn (isxn_str, len)
	local temp = 0;
	isxn_str = { isxn_str:byte(1, len) };	-- make a table of byte values '0' → 0x30 .. '9'  → 0x39, 'X' → 0x58
	len = len+1;							-- adjust to be a loop counter
	for i, v in ipairs( isxn_str ) do		-- loop through all of the bytes and calculate the checksum
		if v == string.byte( "X" ) then		-- if checkdigit is X (compares the byte value of 'X' which is 0x58)
			temp = temp + 10*( len - i );	-- it represents 10 decimal
		else
			temp = temp + tonumber( string.char(v) )*(len-i);
		end
	end
	return temp % 11 == 0;					-- returns true if calculation result is zero
end


--[[--------------------------&lt; IS _ V A L I D _ I S X N  _ 1 3 &gt;----------------------------------------------

ISBN-13 and ISMN validator code calculates checksum across all 13 isbn/ismn digits including the check digit.
If the number is valid, the result will be 0. Before calling this function, isbn-13/ismn must be checked for length
and stripped of dashes, spaces and other non-isxn-13 characters.

]]

local function is_valid_isxn_13 (isxn_str)
	local temp=0;
	
	isxn_str = { isxn_str:byte(1, 13) };										-- make a table of byte values '0' → 0x30 .. '9'  → 0x39
	for i, v in ipairs( isxn_str ) do
		temp = temp + (3 - 2*(i % 2)) * tonumber( string.char(v) );				-- multiply odd index digits by 1, even index digits by 3 and sum; includes check digit
	end
	return temp % 10 == 0;														-- sum modulo 10 is zero when isbn-13/ismn is correct
end

--[[--------------------------&lt; C H E C K _ I S B N &gt;------------------------------------------------------------

Determines whether an ISBN string is valid

]]

local function check_isbn( isbn_str, error_string )
	if nil ~= isbn_str:match("[^%s-0-9X]") then -- fail if isbn_str contains anything but digits, hyphens, or the uppercase X
		return error_string;
	end
	isbn_str = isbn_str:gsub( "-", "" ):gsub( " ", "" );	-- remove hyphens and spaces
	local len = isbn_str:len();
 
	if len ~= 10 and len ~= 13 then
		return error_string;
	end

	if len == 10 then
		if isbn_str:match( "^%d*X?$" ) == nil then 
			return error_string; 
		end
		return is_valid_isxn(isbn_str, 10) and '' or error_string;
	else
		local temp = 0;
		if isbn_str:match( "^97[89]%d*$" ) == nil then -- isbn13 begins with 978 or 979; ismn begins with 979
			return error_string; 
		end
		return is_valid_isxn_13 (isbn_str) and '' or error_string;
	end
end

--[[--------------------------&lt; C H E C K _ I S M N &gt;------------------------------------------------------------

Determines whether an ISMN string is valid.  Similar to isbn-13, ismn is 13 digits begining 979-0-... and uses the
same check digit calculations.  See http://www.ismn-international.org/download/Web_ISMN_Users_Manual_2008-6.pdf
section 2, pages 9–12.

]]

local function check_ismn (id, error_string)
	local text;
	local valid_ismn = true;

	id=id:gsub( "[%s-–]", "" );													-- strip spaces, hyphens, and endashes from the ismn

	if 13 ~= id:len() or id:match( "^9790%d*$" ) == nil then					-- ismn must be 13 digits and begin 9790
		valid_ismn = false;
	else
		valid_ismn=is_valid_isxn_13 (id);										-- validate ismn
	end

	return valid_ismn and '' or error_string
end

--[[--------------------------&lt; I S S N &gt;----------------------------------------------------------------------

Validate and format an issn.  This code fixes the case where an editor has included an ISSN in the citation but has separated the two groups of four
digits with a space.  When that condition occurred, the resulting link looked like this:

	|issn=0819 4327 gives: [http://www.worldcat.org/issn/0819 4327 0819 4327]  -- can't have spaces in an external link
	
This code now prevents that by inserting a hyphen at the issn midpoint.  It also validates the issn for length and makes sure that the checkdigit agrees
with the calculated value.  Incorrect length (8 digits), characters other than 0-9 and X, or checkdigit / calculated value mismatch will all cause a check issn
error message.

]]

local function check_issn(id, error_string)
	local issn_copy = id;		-- save a copy of unadulterated issn; use this version for display if issn does not validate
	local text;
	local valid_issn = true;

	if not id:match ('^%d%d%d%d%-%d%d%d[%dX]$') then
		return error_string;
	end
	
	id=id:gsub( "[%s-–]", "" );									-- strip spaces, hyphens, and endashes from the issn

	if 8 ~= id:len() or nil == id:match( "^%d*X?$" ) then		-- validate the issn: 8 digits long, containing only 0-9 or X in the last position
		valid_issn=false;										-- wrong length or improper character
	else
		valid_issn=is_valid_isxn(id, 8);						-- validate issn
	end

	return valid_issn and '' or error_string
end


------------------------------&lt; E N T R Y   P O I N T S &gt;--------------------------------------------------====

function p.check_isbn(frame)
	return check_isbn(frame.args[1] or frame:getParent().args[1], frame.args['error'] or frame:getParent().args['error'] or 'error')
end

function p.check_ismn(frame)
	return check_ismn(frame.args[1] or frame:getParent().args[1], frame.args['error'] or frame:getParent().args['error'] or 'error')
end

function p.check_issn(frame)
	return check_issn(frame.args[1] or frame:getParent().args[1], frame.args['error'] or frame:getParent().args['error'] or 'error')
end

return p</text>
      <sha1>m39a8k5gmtbg6x3k2f7rizj3jk5on20</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1</title>
    <ns>828</ns>
    <id>38573037</id>
    <revision>
      <id>914381250</id>
      <parentid>914376409</parentid>
      <timestamp>2019-09-07T03:39:57Z</timestamp>
      <contributor>
        <username>Izno</username>
        <id>2927383</id>
      </contributor>
      <comment>remove per tper</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="185637">
--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local dates, year_date_check, reformat_dates, date_hyphen_to_dash,				-- functions in Module:Citation/CS1/Date_validation
	date_name_xlate

local is_set, in_array, substitute, error_comment, set_error, select_one,		-- functions in Module:Citation/CS1/Utilities
	add_maint_cat, wrap_style, safe_for_italics, is_wikilink, make_wikilink,
	strip_apostrophe_markup;

local z ={};																	-- tables in Module:Citation/CS1/Utilities

local extract_ids, extract_id_access_levels, build_id_list, is_embargoed;		-- functions in Module:Citation/CS1/Identifiers

local make_coins_title, get_coins_pages, COinS;									-- functions in Module:Citation/CS1/COinS

local cfg = {};																	-- table of configuration tables that are defined in Module:Citation/CS1/Configuration
local whitelist = {};															-- table of tables listing valid template parameter names; defined in Module:Citation/CS1/Whitelist


--[[--------------------------&lt; P A G E   S C O P E   V A R I A B L E S &gt;--------------------------------------

delare variables here that have page-wide scope that are not brought in from other modules; thatare created here
and used here

]]

local added_deprecated_cat;														-- boolean flag so that the category is added only once
local added_prop_cats = {};														-- list of property categories that have been added to z.properties_cats
local added_vanc_errs;															-- boolean flag so we only emit one Vancouver error / category

local Frame;																	-- holds the module's frame table


--[[--------------------------&lt; F I R S T _ S E T &gt;------------------------------------------------------------

Locates and returns the first set value in a table of values where the order established in the table,
left-to-right (or top-to-bottom), is the order in which the values are evaluated.  Returns nil if none are set.

This version replaces the original 'for _, val in pairs do' and a similar version that used ipairs.  With the pairs
version the order of evaluation could not be guaranteed.  With the ipairs version, a nil value would terminate
the for-loop before it reached the actual end of the list.

]]

local function first_set (list, count)
	local i = 1;
	while i &lt;= count do															-- loop through all items in list
		if is_set( list[i] ) then
			return list[i];														-- return the first set list member
		end
		i = i + 1;																-- point to next
	end
end


--[[--------------------------&lt; A D D _ P R O P _ C A T &gt;--------------------------------------------------------

Adds a category to z.properties_cats using names from the configuration file with additional text if any.

foreign_lang_source and foreign_lang_source_2 keys have a language code appended to them so that multiple languages
may be categorized but multiples of the same language are not categorized.

added_prop_cats is a table declared in page scope variables above

]]

local function add_prop_cat (key, arguments)
	if not added_prop_cats [key] then
		added_prop_cats [key] = true;											-- note that we've added this category
		key = key:gsub ('(foreign_lang_source_?2?)%a%a%a?', '%1');				-- strip lang code from keyname
		table.insert( z.properties_cats, substitute (cfg.prop_cats [key], arguments));	-- make name then add to table
	end
end


--[[--------------------------&lt; A D D _ V A N C _ E R R O R &gt;----------------------------------------------------

Adds a single Vancouver system error message to the template's output regardless of how many error actually exist.
To prevent duplication, added_vanc_errs is nil until an error message is emitted.

added_vanc_errs is a boolean declared in page scope variables above

]]

local function add_vanc_error (source)
	if not added_vanc_errs then
		added_vanc_errs = true;													-- note that we've added this category
		table.insert( z.message_tail, { set_error( 'vancouver', {source}, true ) } );
	end
end


--[[--------------------------&lt; I S _ S C H E M E &gt;------------------------------------------------------------

does this thing that purports to be a uri scheme seem to be a valid scheme?  The scheme is checked to see if it
is in agreement with http://tools.ietf.org/html/std66#section-3.1 which says:
	Scheme names consist of a sequence of characters beginning with a
   letter and followed by any combination of letters, digits, plus
   ("+"), period ("."), or hyphen ("-").

returns true if it does, else false

]]

local function is_scheme (scheme)
	return scheme and scheme:match ('^%a[%a%d%+%.%-]*:');						-- true if scheme is set and matches the pattern
end


--[=[-------------------------&lt; I S _ D O M A I N _ N A M E &gt;--------------------------------------------------

Does this thing that purports to be a domain name seem to be a valid domain name?

Syntax defined here: http://tools.ietf.org/html/rfc1034#section-3.5
BNF defined here: https://tools.ietf.org/html/rfc4234
Single character names are generally reserved; see https://tools.ietf.org/html/draft-ietf-dnsind-iana-dns-01#page-15;
	see also [[Single-letter second-level domain]]
list of tlds: https://www.iana.org/domains/root/db

rfc952 (modified by rfc 1123) requires the first and last character of a hostname to be a letter or a digit.  Between
the first and last characters the name may use letters, digits, and the hyphen.

Also allowed are IPv4 addresses. IPv6 not supported

domain is expected to be stripped of any path so that the last character in the last character of the tld.  tld
is two or more alpha characters.  Any preceding '//' (from splitting a url with a scheme) will be stripped
here.  Perhaps not necessary but retained incase it is necessary for IPv4 dot decimal.

There are several tests:
	the first character of the whole domain name including subdomains must be a letter or a digit
	internationalized domain name (ascii characters with .xn-- ASCII Compatible Encoding (ACE) prefix xn-- in the tld) see https://tools.ietf.org/html/rfc3490
	single-letter/digit second-level domains in the .org, .cash, and .today TLDs
	q, x, and z SL domains in the .com TLD
	i and q SL domains in the .net TLD
	single-letter SL domains in the ccTLDs (where the ccTLD is two letters)
	two-character SL domains in gTLDs (where the gTLD is two or more letters)
	three-plus-character SL domains in gTLDs (where the gTLD is two or more letters)
	IPv4 dot-decimal address format; TLD not allowed

returns true if domain appears to be a proper name and tld or IPv4 address, else false

]=]

local function is_domain_name (domain)
	if not domain then
		return false;															-- if not set, abandon
	end
	
	domain = domain:gsub ('^//', '');											-- strip '//' from domain name if present; done here so we only have to do it once
	
	if not domain:match ('^[%w]') then											-- first character must be letter or digit
		return false;
	end

	if domain:match ('^%a+:') then												-- hack to detect things that look like s:Page:Title where Page: is namespace at wikisource
		return false;
	end

	local patterns = {															-- patterns that look like urls
		'%f[%w][%w][%w%-]+[%w]%.%a%a+$',										-- three or more character hostname.hostname or hostname.tld
		'%f[%w][%w][%w%-]+[%w]%.xn%-%-[%w]+$',									-- internationalized domain name with ACE prefix
		'%f[%a][qxz]%.com$',													-- assigned one character .com hostname (x.com times out 2015-12-10)
		'%f[%a][iq]%.net$',														-- assigned one character .net hostname (q.net registered but not active 2015-12-10)
		'%f[%w][%w]%.%a%a$',													-- one character hostname and cctld (2 chars)
		'%f[%w][%w][%w]%.%a%a+$',												-- two character hostname and tld
		'^%d%d?%d?%.%d%d?%d?%.%d%d?%d?%.%d%d?%d?',								-- IPv4 address
		}

	for _, pattern in ipairs (patterns) do										-- loop through the patterns list
		if domain:match (pattern) then
			return true;														-- if a match then we think that this thing that purports to be a url is a url
		end
	end

	for _, d in ipairs ({'cash', 'company', 'today', 'org'}) do					-- look for single letter second level domain names for these top level domains
		if domain:match ('%f[%w][%w]%.' .. d) then
			return true
		end
	end
	return false;																-- no matches, we don't know what this thing is
end


--[[--------------------------&lt; I S _ U R L &gt;------------------------------------------------------------------

returns true if the scheme and domain parts of a url appear to be a valid url; else false.

This function is the last step in the validation process.  This function is separate because there are cases that
are not covered by split_url(), for example is_parameter_ext_wikilink() which is looking for bracketted external
wikilinks.

]]

local function is_url (scheme, domain)
	if is_set (scheme) then														-- if scheme is set check it and domain
		return is_scheme (scheme) and is_domain_name (domain);
	else
		return is_domain_name (domain);											-- scheme not set when url is protocol relative
	end
end


--[[--------------------------&lt; S P L I T _ U R L &gt;------------------------------------------------------------

Split a url into a scheme, authority indicator, and domain.

First remove Fully Qualified Domain Name terminator (a dot following tld) (if any) and any path(/), query(?) or fragment(#).

If protocol relative url, return nil scheme and domain else return nil for both scheme and domain.

When not protocol relative, get scheme, authority indicator, and domain.  If there is an authority indicator (one
or more '/' characters immediately following the scheme's colon), make sure that there are only 2.

Strip off any port and path;

]]

local function split_url (url_str)
	local scheme, authority, domain;
	
	url_str = url_str:gsub ('([%a%d])%.?[/%?#].*$', '%1');						-- strip FQDN terminator and path(/), query(?), fragment (#) (the capture prevents false replacement of '//')

	if url_str:match ('^//%S*') then											-- if there is what appears to be a protocol relative url
		domain = url_str:match ('^//(%S*)')
	elseif url_str:match ('%S-:/*%S+') then										-- if there is what appears to be a scheme, optional authority indicator, and domain name
		scheme, authority, domain = url_str:match ('(%S-:)(/*)(%S+)');			-- extract the scheme, authority indicator, and domain portions
		authority = authority:gsub ('//', '', 1);								-- replace place 1 pair of '/' with nothing;
		if is_set(authority) then												-- if anything left (1 or 3+ '/' where authority should be) then
			return scheme;														-- return scheme only making domain nil which will cause an error message
		end
		domain = domain:gsub ('(%a):%d+', '%1');								-- strip port number if present
	end
	
	return scheme, domain;
end


--[[--------------------------&lt; L I N K _ P A R A M _ O K &gt;---------------------------------------------------

checks the content of |title-link=, |series-link=, |author-link= etc for properly formatted content: no wikilinks, no urls

Link parameters are to hold the title of a wikipedia article so none of the WP:TITLESPECIALCHARACTERS are allowed:
	# &lt; &gt; [ ] | { } _
except the underscore which is used as a space in wiki urls and # which is used for section links

returns false when the value contains any of these characters.

When there are no illegal characters, this function returns TRUE if value DOES NOT appear to be a valid url (the
|&lt;param&gt;-link= parameter is ok); else false when value appears to be a valid url (the |&lt;param&gt;-link= parameter is NOT ok).

]]

local function link_param_ok (value)
	local scheme, domain;
	if value:find ('[&lt;&gt;%[%]|{}]') then											-- if any prohibited characters
		return false;
	end

	scheme, domain = split_url (value);											-- get scheme or nil and domain or nil from url; 
	return not is_url (scheme, domain);											-- return true if value DOES NOT appear to be a valid url
end


--[[--------------------------&lt; L I N K _ T I T L E _ O K &gt;---------------------------------------------------

Use link_param_ok() to validate |&lt;param&gt;-link= value and its matching |&lt;title&gt;= value.

|&lt;title&gt;= may be wikilinked but not when |&lt;param&gt;-link= has a value.  This function emits an error message when
that condition exists

]]

local function link_title_ok (link, lorig, title, torig)
local orig;

	if is_set (link) then 														-- don't bother if &lt;param&gt;-link doesn't have a value
		if not link_param_ok (link) then										-- check |&lt;param&gt;-link= markup
			orig = lorig;														-- identify the failing link parameter
		elseif title:find ('%[%[') then											-- check |title= for wikilink markup
			orig = torig;														-- identify the failing |title= parameter
		end
	end

	if is_set (orig) then
		table.insert( z.message_tail, { set_error( 'bad_paramlink', orig)});	-- url or wikilink in |title= with |title-link=;
	end
end


--[[--------------------------&lt; C H E C K _ U R L &gt;------------------------------------------------------------

Determines whether a URL string appears to be valid.

First we test for space characters.  If any are found, return false.  Then split the url into scheme and domain
portions, or for protocol relative (//example.com) urls, just the domain.  Use is_url() to validate the two
portions of the url.  If both are valid, or for protocol relative if domain is valid, return true, else false.

Because it is different from a standard url, and because this module used external_link() to make external links
that work for standard and news: links, we validate newsgroup names here.  The specification for a newsgroup name
is at https://tools.ietf.org/html/rfc5536#section-3.1.4

]]

local function check_url( url_str )
	if nil == url_str:match ("^%S+$") then										-- if there are any spaces in |url=value it can't be a proper url
		return false;
	end
	local scheme, domain;

	scheme, domain = split_url (url_str);										-- get scheme or nil and domain or nil from url;
	
	if 'news:' == scheme then													-- special case for newsgroups
		return domain:match('^[%a%d%+%-_]+%.[%a%d%+%-_%.]*[%a%d%+%-_]$');
	end
	
	return is_url (scheme, domain);												-- return true if value appears to be a valid url
end


--[=[-------------------------&lt; I S _ P A R A M E T E R _ E X T _ W I K I L I N K &gt;----------------------------

Return true if a parameter value has a string that begins and ends with square brackets [ and ] and the first
non-space characters following the opening bracket appear to be a url.  The test will also find external wikilinks
that use protocol relative urls. Also finds bare urls.

The frontier pattern prevents a match on interwiki links which are similar to scheme:path urls.  The tests that
find bracketed urls are required because the parameters that call this test (currently |title=, |chapter=, |work=,
and |publisher=) may have wikilinks and there are articles or redirects like '//Hus' so, while uncommon, |title=[[//Hus]]
is possible as might be [[en://Hus]].

]=]

local function is_parameter_ext_wikilink (value)
local scheme, domain;

	if value:match ('%f[%[]%[%a%S*:%S+.*%]') then								-- if ext wikilink with scheme and domain: [xxxx://yyyyy.zzz]
		scheme, domain = split_url (value:match ('%f[%[]%[(%a%S*:%S+).*%]'));
	elseif value:match ('%f[%[]%[//%S+.*%]') then								-- if protocol relative ext wikilink: [//yyyyy.zzz]
		scheme, domain = split_url (value:match ('%f[%[]%[(//%S+).*%]'));
	elseif value:match ('%a%S*:%S+') then										-- if bare url with scheme; may have leading or trailing plain text
		scheme, domain = split_url (value:match ('(%a%S*:%S+)'));
	elseif value:match ('//%S+') then											-- if protocol relative bare url: //yyyyy.zzz; may have leading or trailing plain text
		scheme, domain = split_url (value:match ('(//%S+)'));					-- what is left should be the domain
	else
		return false;															-- didn't find anything that is obviously a url
	end

	return is_url (scheme, domain);												-- return true if value appears to be a valid url
end


--[[-------------------------&lt; C H E C K _ F O R _ U R L &gt;-----------------------------------------------------

loop through a list of parameters and their values.  Look at the value and if it has an external link, emit an error message.

]]

local function check_for_url (parameter_list)
local error_message = '';
	for k, v in pairs (parameter_list) do										-- for each parameter in the list
		if is_parameter_ext_wikilink (v) then									-- look at the value; if there is a url add an error message
			if is_set(error_message) then										-- once we've added the first portion of the error message ...
				error_message=error_message .. ", ";							-- ... add a comma space separator
			end
			error_message=error_message .. "&amp;#124;" .. k .. "=";				-- add the failed parameter
		end
	end
	if is_set (error_message) then												-- done looping, if there is an error message, display it
		table.insert( z.message_tail, { set_error( 'param_has_ext_link', {error_message}, true ) } );
	end
end


--[[--------------------------&lt; S A F E _ F O R _ U R L &gt;------------------------------------------------------

Escape sequences for content that will be used for URL descriptions

]]

local function safe_for_url( str )
	if str:match( "%[%[.-%]%]" ) ~= nil then 
		table.insert( z.message_tail, { set_error( 'wikilink_in_url', {}, true ) } );
	end
	
	return str:gsub( '[%[%]\n]', {	
		['['] = '&amp;#91;',
		[']'] = '&amp;#93;',
		['\n'] = ' ' } );
end


--[[--------------------------&lt; E X T E R N A L _ L I N K &gt;----------------------------------------------------

Format an external link with error checking

]]

local function external_link( URL, label, source, access)
	local error_str = "";
	local domain;
	local path;
	local base_url;

	if not is_set( label ) then
		label = URL;
		if is_set( source ) then
			error_str = set_error( 'bare_url_missing_title', { wrap_style ('parameter', source) }, false, " " );
		else
			error( cfg.messages["bare_url_no_origin"] );
		end			
	end
	if not check_url( URL ) then
		error_str = set_error( 'bad_url', {wrap_style ('parameter', source)}, false, " " ) .. error_str;
	end
	
	domain, path = URL:match ('^([/%.%-%+:%a%d]+)([/%?#].*)$');					-- split the url into scheme plus domain and path
	if path then																-- if there is a path portion
		path = path:gsub ('[%[%]]', {['[']='%5b',[']']='%5d'});					-- replace '[' and ']' with their percent encoded values
		URL = table.concat ({domain, path});									-- and reassemble
	end

	base_url = table.concat({ "[", URL, " ", safe_for_url (label), "]" });		-- assemble a wikimarkup url

	if is_set (access) then														-- access level (subscription, registration, limited)
		base_url = substitute (cfg.presentation['ext-link-access-signal'], {cfg.presentation[access].class, cfg.presentation[access].title, base_url});	-- add the appropriate icon
	end
	
	return table.concat ({base_url, error_str});
end


--[[--------------------------&lt; D E P R E C A T E D _ P A R A M E T E R &gt;--------------------------------------

Categorize and emit an error message when the citation contains one or more deprecated parameters.  The function includes the
offending parameter name to the error message.  Only one error message is emitted regardless of the number of deprecated
parameters in the citation.

added_deprecated_cat is a boolean declared in page scope variables above

]]

local function deprecated_parameter(name)
	if not added_deprecated_cat then
		added_deprecated_cat = true;											-- note that we've added this category
		table.insert( z.message_tail, { set_error( 'deprecated_params', {name}, true ) } );	-- add error message
	end
end


--[=[-------------------------&lt; K E R N _ Q U O T E S &gt;--------------------------------------------------------

Apply kerning to open the space between the quote mark provided by the Module and a leading or trailing quote
mark contained in a |title= or |chapter= parameter's value.

This function will positive kern either single or double quotes:
	"'Unkerned title with leading and trailing single quote marks'"
	" 'Kerned title with leading and trailing single quote marks' " (in real life the kerning isn't as wide as this example)
Double single quotes (italic or bold wikimarkup) are not kerned.

Replaces unicode quotemarks in plain text or in the label portion of a [[L|D]] style wikilink with typewriter
quote marks regardless of the need for kerning.  Unicode quote marks are not replaced in simple [[D]] wikilinks.

Call this function for chapter titles, for website titles, etc; not for book titles.

]=]

local function kern_quotes (str)
	local cap='';
	local cap2='';
	local wl_type, label, link;

	wl_type, label, link = is_wikilink (str);									-- wl_type is: 0, no wl (text in label variable); 1, [[D]]; 2, [[L|D]]
	
	if 1 == wl_type then														-- [[D]] simple wikilink with or without quote marks
		if mw.ustring.match (str, '%[%[[\"“”\'‘’].+[\"“”\'‘’]%]%]') then		-- leading and trailing quote marks
			str = substitute (cfg.presentation['kern-wl-both'], str);
		elseif mw.ustring.match (str, '%[%[[\"“”\'‘’].+%]%]')	then			-- leading quote marks
			str = substitute (cfg.presentation['kern-wl-left'], str);
		elseif mw.ustring.match (str, '%[%[.+[\"“”\'‘’]%]%]') then				-- trailing quote marks
			str = substitute (cfg.presentation['kern-wl-right'], str);
		end

	else																		-- plain text or [[L|D]]; text in label variable
		label= mw.ustring.gsub (label, '[“”]', '\"');							-- replace “” (U+201C &amp; U+201D) with " (typewriter double quote mark)
		label= mw.ustring.gsub (label, '[‘’]', '\'');							-- replace ‘’ (U+2018 &amp; U+2019) with ' (typewriter single quote mark)

		cap, cap2 = mw.ustring.match (label, "^([\"\'])([^\'].+)");				-- match leading double or single quote but not doubled single quotes (italic markup)
		if is_set (cap) then
			label = substitute (cfg.presentation['kern-left'], {cap, cap2});
		end
	
		cap, cap2 = mw.ustring.match (label, "^(.+[^\'])([\"\'])$")				-- match trailing double or single quote but not doubled single quotes (italic markup)
		if is_set (cap) then
			label = substitute (cfg.presentation['kern-right'], {cap, cap2});
		end
		
		if 2 == wl_type then
			str = make_wikilink (link, label);									-- reassemble the wikilink
		else
			str = label;
		end
	end
	return str;
end


--[[--------------------------&lt; F O R M A T _ S C R I P T _ V A L U E &gt;----------------------------------------

|script-title= holds title parameters that are not written in Latin based scripts: Chinese, Japanese, Arabic, Hebrew, etc. These scripts should
not be italicized and may be written right-to-left.  The value supplied by |script-title= is concatenated onto Title after Title has been wrapped
in italic markup.

Regardless of language, all values provided by |script-title= are wrapped in &lt;bdi&gt;...&lt;/bdi&gt; tags to isolate rtl languages from the English left to right.

|script-title= provides a unique feature.  The value in |script-title= may be prefixed with a two-character ISO639-1 language code and a colon:
	|script-title=ja:*** *** (where * represents a Japanese character)
Spaces between the two-character code and the colon and the colon and the first script character are allowed:
	|script-title=ja : *** ***
	|script-title=ja: *** ***
	|script-title=ja :*** ***
Spaces preceding the prefix are allowed: |script-title = ja:*** ***

The prefix is checked for validity.  If it is a valid ISO639-1 language code, the lang attribute (lang="ja") is added to the &lt;bdi&gt; tag so that browsers can
know the language the tag contains.  This may help the browser render the script more correctly.  If the prefix is invalid, the lang attribute
is not added.  At this time there is no error message for this condition.

Supports |script-title=, |script-chapter=, |script-&lt;periodical&gt;=

]]

local function format_script_value (script_value, script_param)
	local lang='';																-- initialize to empty string
	local name;
	if script_value:match('^%l%l%s*:') then										-- if first 3 non-space characters are script language prefix
		lang = script_value:match('^(%l%l)%s*:%s*%S.*');						-- get the language prefix or nil if there is no script
		if not is_set (lang) then
			table.insert( z.message_tail, { set_error( 'script_parameter', {script_param, 'missing title part'}, true ) } );		-- prefix without 'title'; add error message
			return '';															-- script_value was just the prefix so return empty string
		end
																				-- if we get this far we have prefix and script
		name = cfg.lang_code_remap[lang] or mw.language.fetchLanguageName( lang, "en" );	-- get language name so that we can use it to categorize
		if is_set (name) then													-- is prefix a proper ISO 639-1 language code?
			script_value = script_value:gsub ('^%l%l%s*:%s*', '');				-- strip prefix from script
																				-- is prefix one of these language codes?
			if in_array (lang, cfg.script_lang_codes) then
				add_prop_cat ('script_with_name', {name, lang})
			else
				table.insert( z.message_tail, { set_error( 'script_parameter', {script_param, 'unknown language code'}, true ) } );	-- unknown script-language; add error message
			end
			lang = ' lang="' .. lang .. '" ';									-- convert prefix into a lang attribute
		else
			table.insert( z.message_tail, { set_error( 'script_parameter', {script_param, 'invalid language code'}, true ) } );		-- invalid language code; add error message
			lang = '';															-- invalid so set lang to empty string
		end
	else
		table.insert( z.message_tail, { set_error( 'script_parameter', {script_param, 'missing prefix'}, true ) } );				-- no language code prefix; add error message
	end
	script_value = substitute (cfg.presentation['bdi'], {lang, script_value});	-- isolate in case script is rtl

	return script_value;
end


--[[--------------------------&lt; S C R I P T _ C O N C A T E N A T E &gt;------------------------------------------

Initially for |title= and |script-title=, this function concatenates those two parameter values after the script value has been 
wrapped in &lt;bdi&gt; tags.
]]

local function script_concatenate (title, script, script_param)
	if is_set (script) then
		script = format_script_value (script, script_param);					-- &lt;bdi&gt; tags, lang atribute, categorization, etc; returns empty string on error
		if is_set (script) then
			title = title .. ' ' .. script;										-- concatenate title and script title
		end
	end
	return title;
end


--[[--------------------------&lt; W R A P _ M S G &gt;--------------------------------------------------------------

Applies additional message text to various parameter values. Supplied string is wrapped using a message_list
configuration taking one argument.  Supports lower case text for {{citation}} templates.  Additional text taken
from citation_config.messages - the reason this function is similar to but separate from wrap_style().

]]

local function wrap_msg (key, str, lower)
	if not is_set( str ) then
		return "";
	end
	if true == lower then
		local msg;
		msg = cfg.messages[key]:lower();										-- set the message to lower case before 
		return substitute( msg, str );											-- including template text
	else
		return substitute( cfg.messages[key], str );
	end		
end


--[[--------------------------&lt; W I K I S O U R C E _ U R L _ M A K E &gt;----------------------------------------

makes a wikisource url from wikisource interwiki link.  returns the url and appropriate label; nil else.

str is the value assigned to |chapter= (or aliases) or |title= or |title-link=

]]

local function wikisource_url_make (str)
	local wl_type, D, L;
	local ws_url, ws_label;

	wl_type, D, L = is_wikilink (str);											-- wl_type is 0 (not a wikilink), 1 (simple wikilink), 2 (complex wikilink)

	if 0 == wl_type then														-- not a wikilink; might be from |title-link=
		str = D:match ('^[Ww]ikisource:(.+)') or D:match ('^[Ss]:(.+)');		-- article title from interwiki link with long-form or short-form namespace
		if is_set (str) then
			ws_url = table.concat ({											-- build a wikisource url
				'https://en.wikisource.org/wiki/',								-- prefix
				str,															-- article title
				});
			ws_label = str;														-- label for the url
		end
	elseif 1 == wl_type then														-- simple wikilink: [[Wikisource:ws article]]
		str = D:match ('^[Ww]ikisource:(.+)') or D:match ('^[Ss]:(.+)');		-- article title from interwiki link with long-form or short-form namespace
		if is_set (str) then
			ws_url = table.concat ({											-- build a wikisource url
				'https://en.wikisource.org/wiki/',								-- prefix
				str,															-- article title
				});
			ws_label = str;														-- label for the url
		end
	elseif 2 == wl_type then													-- non-so-simple wikilink: [[Wikisource:ws article|displayed text]] ([[L|D]])
		str = L:match ('^[Ww]ikisource:(.+)') or L:match ('^[Ss]:(.+)');		-- article title from interwiki link with long-form or short-form namespace
		if is_set (str) then
			ws_label = D;														-- get ws article name from display portion of interwiki link
			ws_url = table.concat ({											-- build a wikisource url
				'https://en.wikisource.org/wiki/',								-- prefix
				str,															-- article title without namespace from link portion of wikilink
				});
		end
	end
	
	if ws_url then
		ws_url = mw.uri.encode (ws_url, 'WIKI');								-- make a usable url
		ws_url = ws_url:gsub ('%%23', '#');										-- undo percent encoding of anchor
	end

	return ws_url, ws_label, L or D;											-- return proper url or nil and a label or nil
end


--[[--------------------------&lt; F O R M A T _ P E R I O D I C A L &gt;--------------------------------------------

Format the four periodical parameters: |script-&lt;periodical&gt;=, |&lt;periodical&gt;=, and |trans-&lt;periodical&gt;= into a single Periodical meta-
parameter.

]]

local function format_periodical (script_periodical, script_periodical_source, periodical, trans_periodical)
	local periodical_error = '';

	if not is_set (periodical) then
		periodical = '';														-- to be safe for concatenation
	else
		periodical = wrap_style ('italic-title', periodical);					-- style 
	end

	periodical = script_concatenate (periodical, script_periodical, script_periodical_source);	-- &lt;bdi&gt; tags, lang atribute, categorization, etc; must be done after title is wrapped

	if is_set (trans_periodical) then
		trans_periodical = wrap_style ('trans-italic-title', trans_periodical);
		if is_set (periodical) then
			periodical = periodical ..  ' ' .. trans_periodical;
		else																	-- here when transchapter without chapter or script-chapter
			periodical = trans_periodical;
			periodical_error = ' ' .. set_error ('trans_missing_title', {'periodical'});
		end
	end

	return periodical .. periodical_error;
end


--[[--------------------------&lt; F O R M A T _ C H A P T E R _ T I T L E &gt;--------------------------------------

Format the four chapter parameters: |script-chapter=, |chapter=, |trans-chapter=, and |chapter-url= into a single Chapter meta-
parameter (chapter_url_source used for error messages).

]]

local function format_chapter_title (scriptchapter, script_chapter_source, chapter, transchapter, chapterurl, chapter_url_source, no_quotes, access)
	local chapter_error = '';

	local ws_url, ws_label, L = wikisource_url_make (chapter);					-- make a wikisource url and label from a wikisource interwiki link
	if ws_url then
		ws_label = ws_label:gsub ('_', '');										-- replace underscore separaters with space characters
		chapter = ws_label;
	end

	if not is_set (chapter) then
		chapter = '';															-- to be safe for concatenation
	else
		if false == no_quotes then
			chapter = kern_quotes (chapter);									-- if necessary, separate chapter title's leading and trailing quote marks from Module provided quote marks
			chapter = wrap_style ('quoted-title', chapter);
		end
	end

	chapter = script_concatenate (chapter, scriptchapter, script_chapter_source);	-- &lt;bdi&gt; tags, lang atribute, categorization, etc; must be done after title is wrapped

	if is_set (chapterurl) then
		chapter = external_link (chapterurl, chapter, chapter_url_source, access);	-- adds bare_url_missing_title error if appropriate
	elseif ws_url then
		chapter = external_link (ws_url, chapter .. '&amp;nbsp;', 'ws link in chapter');	-- adds bare_url_missing_title error if appropriate; space char to move icon away from chap text; TODO: better way to do this?
		chapter = substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, chapter});				
	end

	if is_set (transchapter) then
		transchapter = wrap_style ('trans-quoted-title', transchapter);
		if is_set (chapter) then
			chapter = chapter ..  ' ' .. transchapter;
		else																	-- here when transchapter without chapter or script-chapter
			chapter = transchapter;
			chapter_error = ' ' .. set_error ('trans_missing_title', {'chapter'});
		end
	end

--	if is_set (chapterurl) then
--		chapter = external_link (chapterurl, chapter, chapter_url_source, access);	-- adds bare_url_missing_title error if appropriate
--	end

	return chapter .. chapter_error;
end


--[[--------------------------&lt; H A S _ I N V I S I B L E _ C H A R S &gt;----------------------------------------

This function searches a parameter's value for nonprintable or invisible characters.  The search stops at the
first match.

This function will detect the visible replacement character when it is part of the wikisource.

Detects but ignores nowiki and math stripmarkers.  Also detects other named stripmarkers (gallery, math, pre, ref)
and identifies them with a slightly different error message.  See also coins_cleanup().

Output of this function is an error message that identifies the character or the Unicode group, or the stripmarker
that was detected along with its position (or, for multi-byte characters, the position of its first byte) in the
parameter value.

]]

local function has_invisible_chars (param, v)
	local position = '';														-- position of invisible char or starting position of stripmarker
	local dummy;																-- end of matching string; not used but required to hold end position when a capture is returned
	local capture;																-- used by stripmarker detection to hold name of the stripmarker
	local i=1;
	local stripmarker, apostrophe;
	
	capture = string.match (v, '[%w%p ]*');										-- Test for values that are simple ASCII text and bypass other tests if true
	if capture == v then														-- if same there are no unicode characters
		return;
	end

	while cfg.invisible_chars[i] do
		local char=cfg.invisible_chars[i][1]									-- the character or group name
		local pattern=cfg.invisible_chars[i][2]									-- the pattern used to find it
		position, dummy, capture = mw.ustring.find (v, pattern)					-- see if the parameter value contains characters that match the pattern
		
		if position and (char == 'zero width joiner') then						-- if we found a zero width joiner character
			if mw.ustring.find (v, cfg.indic_script) then						-- its ok if one of the indic scripts
				position = nil;													-- unset position
			end
		end
		
		if position then
			if 'nowiki' == capture or 'math' == capture or						-- nowiki and math stripmarkers (not an error condition)
				('templatestyles' == capture and in_array (param, {'id', 'quote'})) then	-- templatestyles stripmarker allowed in these parameters
					stripmarker = true;											-- set a flag
			elseif true == stripmarker and 'delete' == char then				-- because stripmakers begin and end with the delete char, assume that we've found one end of a stripmarker
				position = nil;													-- unset
			else
				local err_msg;
				if capture then
					err_msg = capture .. ' ' .. char;
				else
					err_msg = char .. ' ' .. 'character';
				end

				table.insert( z.message_tail, { set_error( 'invisible_char', {err_msg, wrap_style ('parameter', param), position}, true ) } );	-- add error message
				return;															-- and done with this parameter
			end
		end
		i=i+1;																	-- bump our index
	end
end


--[[--------------------------&lt; A R G U M E N T _ W R A P P E R &gt;----------------------------------------------

Argument wrapper.  This function provides support for argument mapping defined in the configuration file so that
multiple names can be transparently aliased to single internal variable.

]]

local function argument_wrapper( args )
	local origin = {};
	
	return setmetatable({
		ORIGIN = function( self, k )
			local dummy = self[k]; --force the variable to be loaded.
			return origin[k];
		end
	},
	{
		__index = function ( tbl, k )
			if origin[k] ~= nil then
				return nil;
			end
			
			local args, list, v = args, cfg.aliases[k];
			
			if type( list ) == 'table' then
				v, origin[k] = select_one( args, list, 'redundant_parameters' );
				if origin[k] == nil then
					origin[k] = ''; -- Empty string, not nil
				end
			elseif list ~= nil then
				v, origin[k] = args[list], list;
			else
				-- maybe let through instead of raising an error?
				-- v, origin[k] = args[k], k;
				error( cfg.messages['unknown_argument_map'] .. ': ' .. k);
			end
			
			-- Empty strings, not nil;
			if v == nil then
				v = cfg.defaults[k] or '';
				origin[k] = '';
			end
			
			tbl = rawset( tbl, k, v );
			return v;
		end,
	});
end


--[[--------------------------&lt; N O W R A P _ D A T E &gt;--------------------------------------------------------

When date is YYYY-MM-DD format wrap in nowrap span: &lt;span ...&gt;YYYY-MM-DD&lt;/span&gt;.  When date is DD MMMM YYYY or is
MMMM DD, YYYY then wrap in nowrap span: &lt;span ...&gt;DD MMMM&lt;/span&gt; YYYY or &lt;span ...&gt;MMMM DD,&lt;/span&gt; YYYY

DOES NOT yet support MMMM YYYY or any of the date ranges.

]]

local function nowrap_date (date)
	local cap='';
	local cap2='';

	if date:match("^%d%d%d%d%-%d%d%-%d%d$") then
		date = substitute (cfg.presentation['nowrap1'], date);
	
	elseif date:match("^%a+%s*%d%d?,%s+%d%d%d%d$") or date:match ("^%d%d?%s*%a+%s+%d%d%d%d$") then
		cap, cap2 = string.match (date, "^(.*)%s+(%d%d%d%d)$");
		date = substitute (cfg.presentation['nowrap2'], {cap, cap2});
	end
	
	return date;
end


--[[--------------------------&lt; S E T _ T I T L E T Y P E &gt;----------------------------------------------------

This function sets default title types (equivalent to the citation including |type=&lt;default value&gt;) for those templates that have defaults.
Also handles the special case where it is desirable to omit the title type from the rendered citation (|type=none).

]]

local function set_titletype (cite_class, title_type)
	if is_set(title_type) then
		if "none" == title_type then
			title_type = "";													-- if |type=none then type parameter not displayed
		end
		return title_type;														-- if |type= has been set to any other value use that value
	end

	return cfg.title_types [cite_class] or '';									-- set template's default title type; else empty string for concatenation
end


--[[--------------------------&lt; H Y P H E N _ T O _ D A S H &gt;--------------------------------------------------

Converts a hyphen to a dash under certain conditions.  The hyphen must separate like items; unlike items are
returned unmodified.  These forms are modified:
	letter - letter (A - B)
	digit - digit (4-5)
	digit separator digit - digit separator digit (4.1-4.5 or 4-1-4-5)
	letterdigit - letterdigit (A1-A5) (an optional separator between letter and digit is supported – a.1-a.5 or a-1-a-5)
	digitletter - digitletter (5a - 5d) (an optional separator between letter and digit is supported – 5.a-5.d or 5-a-5-d)

any other forms are returned unmodified.

str may be a comma- or semicolon-separated list

]]

local function hyphen_to_dash( str )
	if not is_set (str) then
		return str;
	end
	
	str, count = str:gsub ('^%(%((.+)%)%)$', '%1');								-- remove accept-this-as-written markup when it wraps all of str
	if 0 ~= count then															-- non-zero when markup removed; zero else
		return str;																-- nothing to do, we're done
	end
	
	str = str:gsub ('&amp;[nm]dash;', {['&amp;ndash;'] = '–', ['&amp;mdash;'] = '—'});		-- replace &amp;mdash; and &amp;ndash; entities  with their characters; semicolon mucks up the text.split
	
	local out = {};
	local list = mw.text.split (str, '%s*[,;]%s*');								-- split str at comma or semicolon separators if there are any

	for _, item in ipairs (list) do												-- for each item in the list
		if mw.ustring.match (item, '^%w*[%.%-]?%w+%s*[%-–—]%s*%w*[%.%-]?%w+$') then	-- if a hyphenated range or has endash or emdash separators
			if item:match ('%a+[%.%-]?%d+%s*%-%s*%a+[%.%-]?%d+') or				-- letterdigit hyphen letterdigit (optional separator between letter and digit)
				item:match ('%d+[%.%-]?%a+%s*%-%s*%d+[%.%-]?%a+') or			-- digitletter hyphen digitletter (optional separator between digit and letter)
				item:match ('%d+[%.%-]%d+%s*%-%s*%d+[%.%-]%d+') or				-- digit separator digit hyphen digit separator digit
				item:match ('%d+%s*%-%s*%d+') or								-- digit hyphen digit
				item:match ('%a+%s*%-%s*%a+') then								-- letter hyphen letter
					item = item:gsub ('(%w*[%.%-]?%w+)%s*%-%s*(%w*[%.%-]?%w+)', '%1–%2');	-- replace hyphen, remove extraneous space characters
			else
				item = mw.ustring.gsub (item, '%s*[–—]%s*', '–');				-- for endash or emdash separated ranges, replace em with en, remove extraneous white space
			end
		end
		item = item:gsub ('^%(%((.+)%)%)$', '%1');								-- remove the accept-this-as-written markup
		table.insert (out, item);												-- add the (possibly modified) item to the output table
	end

	return table.concat (out, ', ');											-- concatenate the output table into a comma separated string
end


--[[--------------------------&lt; S A F E _ J O I N &gt;------------------------------------------------------------

Joins a sequence of strings together while checking for duplicate separation characters.

]]

local function safe_join( tbl, duplicate_char )
	local f = {};																-- create a function table appropriate to type of 'dupicate character'
		if 1 == #duplicate_char then											-- for single byte ascii characters use the string library functions
			f.gsub=string.gsub
			f.match=string.match
			f.sub=string.sub
		else																	-- for multi-byte characters use the ustring library functions
			f.gsub=mw.ustring.gsub
			f.match=mw.ustring.match
			f.sub=mw.ustring.sub
		end

	local str = '';																-- the output string
	local comp = '';															-- what does 'comp' mean?
	local end_chr = '';
	local trim;
	for _, value in ipairs( tbl ) do
		if value == nil then value = ''; end
		
		if str == '' then														-- if output string is empty
			str = value;														-- assign value to it (first time through the loop)
		elseif value ~= '' then
			if value:sub(1,1) == '&lt;' then										-- Special case of values enclosed in spans and other markup.
				comp = value:gsub( "%b&lt;&gt;", "" );								-- remove html markup (&lt;span&gt;string&lt;/span&gt; -&gt; string)
			else
				comp = value;
			end
																				-- typically duplicate_char is sepc
			if f.sub(comp, 1,1) == duplicate_char then							-- is first character same as duplicate_char? why test first character?
																				--   Because individual string segments often (always?) begin with terminal punct for the
																				--   preceding segment: 'First element' .. 'sepc next element' .. etc?
				trim = false;
				end_chr = f.sub(str, -1,-1);									-- get the last character of the output string
				-- str = str .. "&lt;HERE(enchr=" .. end_chr.. ")"					-- debug stuff?
				if end_chr == duplicate_char then								-- if same as separator
					str = f.sub(str, 1,-2);										-- remove it
				elseif end_chr == "'" then										-- if it might be wikimarkup
					if f.sub(str, -3,-1) == duplicate_char .. "''" then			-- if last three chars of str are sepc'' 
						str = f.sub(str, 1, -4) .. "''";						-- remove them and add back ''
					elseif  f.sub(str, -5,-1) == duplicate_char .. "]]''" then	-- if last five chars of str are sepc]]'' 
						trim = true;											-- why? why do this and next differently from previous?
					elseif f.sub(str, -4,-1) == duplicate_char .. "]''" then	-- if last four chars of str are sepc]'' 
						trim = true;											-- same question
					end
				elseif end_chr == "]" then										-- if it might be wikimarkup
					if f.sub(str, -3,-1) == duplicate_char .. "]]" then			-- if last three chars of str are sepc]] wikilink 
						trim = true;
					elseif f.sub(str, -3,-1) == duplicate_char .. '"]' then		-- if last three chars of str are sepc"] quoted external link 
						trim = true;
					elseif  f.sub(str, -2,-1) == duplicate_char .. "]" then		-- if last two chars of str are sepc] external link
						trim = true;
					elseif f.sub(str, -4,-1) == duplicate_char .. "'']" then	-- normal case when |url=something &amp; |title=Title.
						trim = true;
					end
				elseif end_chr == " " then										-- if last char of output string is a space
					if f.sub(str, -2,-1) == duplicate_char .. " " then			-- if last two chars of str are &lt;sepc&gt;&lt;space&gt;
						str = f.sub(str, 1,-3);									-- remove them both
					end
				end

				if trim then
					if value ~= comp then 										-- value does not equal comp when value contains html markup
						local dup2 = duplicate_char;
						if f.match(dup2, "%A" ) then dup2 = "%" .. dup2; end	-- if duplicate_char not a letter then escape it
						
						value = f.gsub(value, "(%b&lt;&gt;)" .. dup2, "%1", 1 )		-- remove duplicate_char if it follows html markup
					else
						value = f.sub(value, 2, -1 );							-- remove duplicate_char when it is first character
					end
				end
			end
			str = str .. value;													--add it to the output string
		end
	end
	return str;
end


--[[--------------------------&lt; I S _ S U F F I X &gt;------------------------------------------------------------

returns true is suffix is properly formed Jr, Sr, or ordinal in the range 2–9.  Puncutation not allowed.

]]

local function is_suffix (suffix)
	if in_array (suffix, {'Jr', 'Sr', '2nd', '3rd'}) or suffix:match ('^%dth$') then
		return true;
	end
	return false;
end


--[[--------------------------&lt; I S _ G O O D _ V A N C _ N A M E &gt;--------------------------------------------

For Vancouver Style, author/editor names are supposed to be rendered in Latin (read ASCII) characters.  When a name
uses characters that contain diacritical marks, those characters are to converted to the corresponding Latin character.
When a name is written using a non-Latin alphabet or logogram, that name is to be transliterated into Latin characters.
These things are not currently possible in this module so are left to the editor to do.

This test allows |first= and |last= names to contain any of the letters defined in the four Unicode Latin character sets
	[http://www.unicode.org/charts/PDF/U0000.pdf C0 Controls and Basic Latin] 0041–005A, 0061–007A
	[http://www.unicode.org/charts/PDF/U0080.pdf C1 Controls and Latin-1 Supplement] 00C0–00D6, 00D8–00F6, 00F8–00FF
	[http://www.unicode.org/charts/PDF/U0100.pdf Latin Extended-A] 0100–017F
	[http://www.unicode.org/charts/PDF/U0180.pdf Latin Extended-B] 0180–01BF, 01C4–024F

|lastn= also allowed to contain hyphens, spaces, and apostrophes. (http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35029/)
|firstn= also allowed to contain hyphens, spaces, apostrophes, and periods

This original test:
	if nil == mw.ustring.find (last, "^[A-Za-zÀ-ÖØ-öø-ƿǄ-ɏ%-%s%']*$") or nil == mw.ustring.find (first, "^[A-Za-zÀ-ÖØ-öø-ƿǄ-ɏ%-%s%'%.]+[2-6%a]*$") then
was written ouside of the code editor and pasted here because the code editor gets confused between character insertion point and cursor position.
The test has been rewritten to use decimal character escape sequence for the individual bytes of the unicode characters so that it is not necessary
to use an external editor to maintain this code.

	\195\128-\195\150 – À-Ö (U+00C0–U+00D6 – C0 controls)
	\195\152-\195\182 – Ø-ö (U+00D8-U+00F6 – C0 controls)
	\195\184-\198\191 – ø-ƿ (U+00F8-U+01BF – C0 controls, Latin extended A &amp; B)
	\199\132-\201\143 – Ǆ-ɏ (U+01C4-U+024F – Latin extended B)

]]

local function is_good_vanc_name (last, first)
	local first, suffix = first:match ('(.-),?%s*([%dJS][%drndth]+)%.?$') or first;	-- if first has something that looks like a generational suffix, get it

	if is_set (suffix) then
		if not is_suffix (suffix) then
			add_vanc_error ('suffix');
			return false;														-- not a name with an appropriate suffix
		end
	end
	if nil == mw.ustring.find (last, "^[A-Za-z\195\128-\195\150\195\152-\195\182\195\184-\198\191\199\132-\201\143%-%s%']*$") or
		nil == mw.ustring.find (first, "^[A-Za-z\195\128-\195\150\195\152-\195\182\195\184-\198\191\199\132-\201\143%-%s%'%.]*$") then
			add_vanc_error ('non-Latin character');
			return false;														-- not a string of latin characters; Vancouver requires Romanization
	end;
	return true;
end


--[[--------------------------&lt; R E D U C E _ T O _ I N I T I A L S &gt;------------------------------------------

Attempts to convert names to initials in support of |name-list-format=vanc.  

Names in |firstn= may be separated by spaces or hyphens, or for initials, a period. See http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35062/.

Vancouver style requires family rank designations (Jr, II, III, etc) to be rendered as Jr, 2nd, 3rd, etc.  See http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35085/.
This code only accepts and understands generational suffix in the Vancouver format because Roman numerals look like, and can be mistaken for, initials.

This function uses ustring functions because firstname initials may be any of the unicode Latin characters accepted by is_good_vanc_name ().

]]

local function reduce_to_initials(first)
	local name, suffix = mw.ustring.match(first, "^(%u+) ([%dJS][%drndth]+)$");

	if not name then															-- if not initials and a suffix
		name = mw.ustring.match(first, "^(%u+)$");								-- is it just intials?
	end

	if name then																-- if first is initials with or without suffix
		if 3 &gt; mw.ustring.len (name) then										-- if one or two initials
			if suffix then														-- if there is a suffix
				if is_suffix (suffix) then										-- is it legitimate?
					return first;												-- one or two initials and a valid suffix so nothing to do
				else
					add_vanc_error ('suffix');									-- one or two initials with invalid suffix so error message
					return first;												-- and return first unmolested
				end
			else
				return first;													-- one or two initials without suffix; nothing to do
			end
		end
	end																			-- if here then name has 3 or more uppercase letters so treat them as a word


	local initials, names = {}, {};												-- tables to hold name parts and initials
	local i = 1;																-- counter for number of initials

	names = mw.text.split (first, '[%s,]+');									-- split into a table of names and possible suffix

	while names[i] do															-- loop through the table
		if 1 &lt; i and names[i]:match ('[%dJS][%drndth]+%.?$') then				-- if not the first name, and looks like a suffix (may have trailing dot)
			names[i] = names[i]:gsub ('%.', '');								-- remove terminal dot if present
			if is_suffix (names[i]) then										-- if a legitimate suffix
				table.insert (initials, ' ' .. names[i]);						-- add a separator space, insert at end of initials table
				break;															-- and done because suffix must fall at the end of a name
			end																	-- no error message if not a suffix; possibly because of Romanization
		end
		if 3 &gt; i then
			table.insert (initials, mw.ustring.sub(names[i],1,1));				-- insert the intial at end of initials table
		end
		i = i+1;																-- bump the counter
	end
			
	return table.concat(initials)												-- Vancouver format does not include spaces.
end


--[[--------------------------&lt; L I S T  _ P E O P L E &gt;-------------------------------------------------------

Formats a list of people (e.g. authors / editors) 

]]

local function list_people(control, people, etal)
	local sep;
	local namesep;
	local format = control.format
	local maximum = control.maximum
	local lastauthoramp = control.lastauthoramp;
	local text = {}

	if 'vanc' == format then													-- Vancouver-like author/editor name styling?
		sep = cfg.presentation['sep_nl_vanc'];									-- name-list separator between authors is a comma
		namesep = cfg.presentation['sep_name_vanc'];							-- last/first separator is a space
	else
		sep = cfg.presentation['sep_nl'];										-- name-list separator between authors is a semicolon
		namesep = cfg.presentation['sep_name'];									-- last/first separator is &lt;comma&gt;&lt;space&gt;
	end
	
	if sep:sub(-1,-1) ~= " " then sep = sep .. " " end
	if is_set (maximum) and maximum &lt; 1 then return "", 0; end					-- returned 0 is for EditorCount; not used for authors
	
	for i,person in ipairs(people) do
		if is_set(person.last) then
			local mask = person.mask
			local one
			local sep_one = sep;
			if is_set (maximum) and i &gt; maximum then
				etal = true;
				break;
			elseif (mask ~= nil) then
				local n = tonumber(mask)
				if (n ~= nil) then
					one = string.rep("&amp;mdash;",n)
				else
					one = mask;
					sep_one = " ";
				end
			else
				one = person.last
				local first = person.first
				if is_set(first) then
					if ( "vanc" == format ) then								-- if vancouver format
						one = one:gsub ('%.', '');								-- remove periods from surnames (http://www.ncbi.nlm.nih.gov/books/NBK7271/box/A35029/)
						if not person.corporate and is_good_vanc_name (one, first) then		-- and name is all Latin characters; corporate authors not tested
							first = reduce_to_initials(first)					-- attempt to convert first name(s) to initials
						end
					end
					one = one .. namesep .. first;
				end
				if is_set(person.link) and person.link ~= control.page_name then
					one = make_wikilink (person.link, one);						-- link author/editor if this page is not the author's/editor's page
				end
			end
			table.insert( text, one )
			table.insert( text, sep_one )
		end
	end

	local count = #text / 2;													-- (number of names + number of separators) divided by 2
	if count &gt; 0 then 
		if count &gt; 1 and is_set(lastauthoramp) and not etal then
			text[#text-2] = " &amp; ";												-- replace last separator with ampersand text
		end
		text[#text] = nil;														-- erase the last separator
	end
	
	local result = table.concat(text)											-- construct list
	if etal and is_set (result) then											-- etal may be set by |display-authors=etal but we might not have a last-first list
		result = result .. sep .. ' ' .. cfg.messages['et al'];					-- we've go a last-first list and etal so add et al.
	end
	
	return result, count
end


--[[--------------------------&lt; A N C H O R _ I D &gt;------------------------------------------------------------

Generates a CITEREF anchor ID if we have at least one name or a date.  Otherwise returns an empty string.

namelist is one of the contributor-, author-, or editor-name lists chosen in that order.  year is Year or anchor_year.

]]
local function anchor_id (namelist, year)
	local names={};																-- a table for the one to four names and year
	for i,v in ipairs (namelist) do												-- loop through the list and take up to the first four last names
		names[i] = v.last 
		if i == 4 then break end												-- if four then done
	end
	table.insert (names, year);													-- add the year at the end
	local id = table.concat(names);												-- concatenate names and year for CITEREF id
	if is_set (id) then															-- if concatenation is not an empty string
		return "CITEREF" .. id;													-- add the CITEREF portion
	else
		return '';																-- return an empty string; no reason to include CITEREF id in this citation
	end
end


--[[--------------------------&lt; N A M E _ H A S _ E T A L &gt;----------------------------------------------------

Evaluates the content of name parameters (author, editor, etc) for variations on the theme of et al.  If found,
the et al. is removed, a flag is set to true and the function returns the modified name and the flag.

This function never sets the flag to false but returns it's previous state because it may have been set by
previous passes through this function or by the associated |display-&lt;names&gt;=etal parameter

]]

local function name_has_etal (name, etal, nocat, param)

	if is_set (name) then														-- name can be nil in which case just return
		local patterns = cfg.et_al_patterns;									--get patterns from configuration
		
		for _, pattern in ipairs (patterns) do									-- loop through all of the patterns
			if name:match (pattern) then										-- if this 'et al' pattern is found in name
				name = name:gsub (pattern, '');									-- remove the offending text
				etal = true;													-- set flag (may have been set previously here or by |display-&lt;names&gt;=etal)
				if not nocat then												-- no categorization for |vauthors=
					table.insert( z.message_tail, {set_error ('etal', {param})});	-- and set an error if not added
				end
			end
		end
	end

	return name, etal;															-- 
end


--[[--------------------------&lt; N A M E _ H A S _ E D _ M A R K U P &gt;------------------------------------------

Evaluates the content of author and editor parameters for extranious editor annotations: ed, ed., eds, (Ed.), etc.
These annotation do not belong in author parameters and are redundant in editor parameters.  If found, the function
adds the editor markup maintenance category.

]]

local function name_has_ed_markup (name, list_name)
	local _, pattern;
	local patterns = cfg.editor_markup_patterns;								-- get patterns from configuration

	if is_set (name) then
		for _, pattern in ipairs (patterns) do									-- spin through patterns table and
			if name:match (pattern) then
				add_maint_cat ('extra_text_names', cfg.special_case_translation [list_name]);	-- add a maint cat for this template
				break;
			end
		end
	end
	return name;																-- and done
end


--[[--------------------------&lt; N A M E _ H A S _ M U L T _ N A M E S &gt;----------------------------------------

Evaluates the content of author and editor (surnames only) parameters for multiple names.  Multiple names are
indicated if there is more than one comma and or semicolon.  If found, the function adds the multiple name
(author or editor) maintenance category.

]]

local function name_has_mult_names (name, list_name)
local count, _;
	if is_set (name) then
		_, count = name:gsub ('[;,]', '');										-- count the number of separator-like characters
		
		if 1 &lt; count then														-- param could be |author= or |editor= so one separator character is acceptable
			add_maint_cat ('mult_names', cfg.special_case_translation [list_name]);	-- more than one separator indicates multiple names so add a maint cat for this template
		end
	end
	return name;																-- and done
end


--[[--------------------------&lt; N A M E _ C H E C K S &gt;--------------------------------------------------------
This function calls various name checking functions used to validate the content of the various name-holding
parameters.

]]

local function name_checks (last, first, list_name)
	if is_set (last) then
		if last:match ('^%(%(.*%)%)$') then										-- if wrapped in doubled parentheses, accept as written 
			last = last:match ('^%(%((.*)%)%)$');								-- strip parens
		else
			last = name_has_mult_names (last, list_name);						-- check for multiple names in the parameter (last only)
			last = name_has_ed_markup (last, list_name);						-- check for extraneous 'editor' annotation
		end
	end
	if is_set (first) then
		if first:match ('^%(%(.*%)%)$') then									-- if wrapped in doubled parentheses, accept as written 
			first = first:match ('^%(%((.*)%)%)$');								-- strip parens
		else
			first = name_has_ed_markup (first, list_name);						-- check for extraneous 'editor' annotation
		end
	end
	return last, first;															-- done
	end


--[[--------------------------&lt; E X T R A C T _ N A M E S &gt;----------------------------------------------------
Gets name list from the input arguments

Searches through args in sequential order to find |lastn= and |firstn= parameters (or their aliases), and their matching link and mask parameters.
Stops searching when both |lastn= and |firstn= are not found in args after two sequential attempts: found |last1=, |last2=, and |last3= but doesn't
find |last4= and |last5= then the search is done.

This function emits an error message when there is a |firstn= without a matching |lastn=.  When there are 'holes' in the list of last names, |last1= and |last3=
are present but |last2= is missing, an error message is emitted. |lastn= is not required to have a matching |firstn=.

When an author or editor parameter contains some form of 'et al.', the 'et al.' is stripped from the parameter and a flag (etal) returned
that will cause list_people() to add the static 'et al.' text from Module:Citation/CS1/Configuration.  This keeps 'et al.' out of the 
template's metadata.  When this occurs, the page is added to a maintenance category.

]]

local function extract_names(args, list_name)
	local names = {};			-- table of names
	local last;					-- individual name components
	local first;
	local link;
	local mask;
	local i = 1;				-- loop counter/indexer
	local n = 1;				-- output table indexer
	local count = 0;			-- used to count the number of times we haven't found a |last= (or alias for authors, |editor-last or alias for editors)
	local etal=false;			-- return value set to true when we find some form of et al. in an author parameter

	local last_alias, first_alias;												-- selected parameter aliases used in error messaging
	while true do
		last, last_alias = select_one( args, cfg.aliases[list_name .. '-Last'], 'redundant_parameters', i );		-- search through args for name components beginning at 1
		first, first_alias = select_one( args, cfg.aliases[list_name .. '-First'], 'redundant_parameters', i );
		link = select_one( args, cfg.aliases[list_name .. '-Link'], 'redundant_parameters', i );
		mask = select_one( args, cfg.aliases[list_name .. '-Mask'], 'redundant_parameters', i );

		last, etal = name_has_etal (last, etal, false, last_alias);				-- find and remove variations on et al.
		first, etal = name_has_etal (first, etal, false, first_alias);			-- find and remove variations on et al.
		last, first= name_checks (last, first, list_name);						-- multiple names, extraneous annotation, etc checks
		
		if first and not last then												-- if there is a firstn without a matching lastn
			table.insert( z.message_tail, { set_error( 'first_missing_last', {first_alias, first_alias:gsub('first', 'last')}, true ) } );	-- add this error message
		elseif not first and not last then										-- if both firstn and lastn aren't found, are we done?
			count = count + 1;													-- number of times we haven't found last and first
			if 2 &lt;= count then													-- two missing names and we give up
				break;															-- normal exit or there is a two-name hole in the list; can't tell which
			end
		else																	-- we have last with or without a first
			link_title_ok (link, list_name:match ("(%w+)List"):lower() .. '-link' .. i, last, list_name:match ("(%w+)List"):lower() .. '-last' .. i);	-- check for improper wikimarkup

			names[n] = {last = last, first = first, link = link, mask = mask, corporate=false};	-- add this name to our names list (corporate for |vauthors= only)
			n = n + 1;															-- point to next location in the names table
			if 1 == count then													-- if the previous name was missing
				table.insert( z.message_tail, { set_error( 'missing_name', {list_name:match ("(%w+)List"):lower(), i-1}, true ) } );	-- add this error message
			end
			count = 0;															-- reset the counter, we're looking for two consecutive missing names
		end
		i = i + 1;																-- point to next args location
	end
	
	return names, etal;															-- all done, return our list of names
end


--[[--------------------------&lt; G E T _ I S O 6 3 9 _ C O D E &gt;------------------------------------------------

Validates language names provided in |language= parameter if not an ISO639-1 or 639-2 code.

Returns the language name and associated two- or three-character code.  Because case of the source may be incorrect
or different from the case that WikiMedia uses, the name comparisons are done in lower case and when a match is
found, the Wikimedia version (assumed to be correct) is returned along with the code.  When there is no match, we
return the original language name string.

mw.language.fetchLanguageNames(&lt;local wiki language&gt;, 'all') returns a list of languages that in some cases may include
extensions. For example, code 'cbk-zam' and its associated name 'Chavacano de Zamboanga' (MediaWiki does not support
code 'cbk' or name 'Chavacano'.  Most (all?) of these languages are not used a 'language' codes per se, rather they
are used as sub-domain names: cbk-zam.wikipedia.org.  A list of language names and codes supported by fetchLanguageNames()
can be found at Template:Citation Style documentation/language/doc

Names that are included in the list will be found if that name is provided in the |language= parameter.  For example,
if |language=Chavacano de Zamboanga, that name will be found with the associated code 'cbk-zam'.  When names are found
and the associated code is not two or three characters, this function returns only the WikiMedia language name.

Some language names have multiple entries under different codes:
	Aromanian has code rup and code roa-rup
When this occurs, this function returns the language name and the 2- or 3-character code

Adapted from code taken from Module:Check ISO 639-1.

]]

local function get_iso639_code (lang, this_wiki_code)
	if cfg.lang_name_remap[lang:lower()] then									-- if there is a remapped name (because MediaWiki uses something that we don't think is correct)
		return cfg.lang_name_remap[lang:lower()][1], cfg.lang_name_remap[lang:lower()][2];	-- for this language 'name', return a possibly new name and appropriate code
	end

	local ietf_code;															-- because some languages have both ietf-like codes and iso 639-like codes
	local ietf_name;
	
	local languages = mw.language.fetchLanguageNames(this_wiki_code, 'all')		-- get a list of language names known to Wikimedia
																				-- ('all' is required for North Ndebele, South Ndebele, and Ojibwa)
	local langlc = mw.ustring.lower(lang);										-- lower case version for comparisons

	for code, name in pairs(languages) do										-- scan the list to see if we can find our language
		if langlc == mw.ustring.lower(name) then
			if 2 == code:len() or 3 == code:len() then							-- two- or three-character codes only; extensions not supported
				return name, code;												-- so return the name and the code
			end
			ietf_code = code;													-- remember that we found an ietf-like code and save its name
			ietf_name = name;													-- but keep looking for a 2- or 3-char code
		end
	end
																				-- didn't find name with 2- or 3-char code; if ietf-like code found return
	return ietf_code and ietf_name or lang;										-- associated name; return original language text else
end


--[[--------------------------&lt; L A N G U A G E _ P A R A M E T E R &gt;------------------------------------------

Gets language name from a provided two- or three-character ISO 639 code.  If a code is recognized by MediaWiki,
use the returned name; if not, then use the value that was provided with the language parameter.

When |language= contains a recognized language (either code or name), the page is assigned to the category for
that code: Category:Norwegian-language sources (no).  For valid three-character code languages, the page is assigned
to the single category for '639-2' codes: Category:CS1 ISO 639-2 language sources.

Languages that are the same as the local wiki are not categorized.  MediaWiki does not recognize three-character
equivalents of two-character codes: code 'ar' is recognized bit code 'ara' is not.

This function supports multiple languages in the form |language=nb, French, th where the language names or codes are
separated from each other by commas.

]]

local function language_parameter (lang)
	local code;																	-- the two- or three-character language code
	local name;																	-- the language name
	local language_list = {};													-- table of language names to be rendered
	local names_table = {};														-- table made from the value assigned to |language=

	local this_wiki = mw.getContentLanguage();									-- get a language object for this wiki
	local this_wiki_code = this_wiki:getCode()									-- get this wiki's language code
	local this_wiki_name = mw.language.fetchLanguageName(this_wiki_code, this_wiki_code);	-- get this wiki's language name

	names_table = mw.text.split (lang, '%s*,%s*');								-- names should be a comma separated list

	for _, lang in ipairs (names_table) do										-- reuse lang
		name = cfg.lang_code_remap[lang:lower()];								-- first see if this is a code that is not supported by MediaWiki but is in remap

		if name then															-- there was a remapped code so
			lang = lang:gsub ('^(%a%a%a?)%-.*', '%1');							-- strip ietf tags from code
		else
			if lang:match ('^%a%a%-') then										-- strip ietf tags from code; TODO: is there a need to support 3-char with tag?
				lang = lang:match ('(%a%a)%-')									-- keep only 639-1 code portion to lang; TODO: do something with 3166 alpha 2 country code?
			end
			if 2 == lang:len() or 3 == lang:len() then							-- if two-or three-character code
				name = mw.language.fetchLanguageName (lang:lower(), this_wiki_code);	-- get language name if |language= is a proper code
			end
		end

		if is_set (name) then													-- if |language= specified a valid code
			code = lang:lower();												-- save it
		else
			name, code = get_iso639_code (lang, this_wiki_code);				-- attempt to get code from name (assign name here so that we are sure of proper capitalization)
		end
	
		if is_set (code) then													-- only 2- or 3-character codes
			name = cfg.lang_code_remap[code] or name;							-- override wikimedia when they misuse language codes/names

			if this_wiki_code ~= code then										-- when the language is not the same as this wiki's language
				if 2 == code:len() then											-- and is a two-character code
					add_prop_cat ('foreign_lang_source' .. code, {name, code})	-- categorize it
				else															-- or is a recognized language (but has a three-character code)
					add_prop_cat ('foreign_lang_source_2' .. code, {code})		-- categorize it differently TODO: support mutliple three-character code categories per cs1|2 template
				end
			end
		else
			add_maint_cat ('unknown_lang');										-- add maint category if not already added
		end
		
		table.insert (language_list, name);
		name = '';																-- so we can reuse it
	end
	
	code = #language_list														-- reuse code as number of languages in the list
	if 2 &gt;= code then
		name = table.concat (language_list, cfg.messages['parameter-pair-separator'])		-- insert '&lt;space&gt;and&lt;space&gt;' between two language names
	elseif 2 &lt; code then
		name = table.concat (language_list, ', ');											-- and concatenate with '&lt;comma&gt;&lt;space&gt;' separators
		name = name:gsub (', ([^,]+)$', cfg.messages['parameter-final-separator'] .. '%1');	-- replace last '&lt;comma&gt;&lt;space&gt;' separator with '&lt;comma&gt;&lt;space&gt;and&lt;space&gt;' separator
	end
	if this_wiki_name == name then
		return '';																-- if one language and that language is this wiki's return an empty string (no annotation)
	end
	return (" " .. wrap_msg ('language', name));								-- otherwise wrap with '(in ...)'
	--[[ TODO: should only return blank or name rather than full list
	so we can clean up the bunched parenthetical elements Language, Type, Format
	]]
end


--[[--------------------------&lt; S E T _ C S 1 _ S T Y L E &gt;----------------------------------------------------

Set style settings for CS1 citation templates. Returns separator and postscript settings
At en.wiki, for cs1:
	ps gets:	'.'
	sep gets:	'.'

]]

local function set_cs1_style (ps)
	if not is_set (ps) then														-- unless explicitely set to something
		ps = cfg.presentation['ps_cs1'];										-- terminate the rendered citation
	end
	return cfg.presentation['sep_cs1'], ps;										-- element separator
end


--[[--------------------------&lt; S E T _ C S 2 _ S T Y L E &gt;----------------------------------------------------

Set style settings for CS2 citation templates. Returns separator, postscript, ref settings
At en.wiki, for cs2:
	ps gets:	'' (empty string - no terminal punctuation)
	sep gets:	','

]]

local function set_cs2_style (ps, ref)
	if not is_set (ps) then														-- if |postscript= has not been set, set cs2 default
		ps = cfg.presentation['ps_cs2'];										-- terminate the rendered citation
	end
	if not is_set (ref) then													-- if |ref= is not set
		ref = "harv";															-- set default |ref=harv
	end
	return cfg.presentation['sep_cs2'], ps, ref;								-- element separator
end


--[[--------------------------&lt; G E T _ S E T T I N G S _ F R O M _ C I T E _ C L A S S &gt;----------------------

When |mode= is not set or when its value is invalid, use config.CitationClass and parameter values to establish
rendered style.

]]

local function get_settings_from_cite_class (ps, ref, cite_class)
	local sep;
	if (cite_class == "citation") then											-- for citation templates (CS2)
		sep, ps, ref = set_cs2_style (ps, ref);
	else																		-- not a citation template so CS1
		sep, ps = set_cs1_style (ps);
	end

	return sep, ps, ref															-- return them all
end


--[[--------------------------&lt; S E T _ S T Y L E &gt;------------------------------------------------------------

Establish basic style settings to be used when rendering the citation.  Uses |mode= if set and valid or uses
config.CitationClass from the template's #invoke: to establish style.

]]

local function set_style (mode, ps, ref, cite_class)
	local sep;
	if 'cs2' == mode then														-- if this template is to be rendered in CS2 (citation) style
		sep, ps, ref = set_cs2_style (ps, ref);
	elseif 'cs1' == mode then													-- if this template is to be rendered in CS1 (cite xxx) style
		sep, ps = set_cs1_style (ps);
	else																		-- anything but cs1 or cs2
		sep, ps, ref = get_settings_from_cite_class (ps, ref, cite_class);		-- get settings based on the template's CitationClass
	end
	if 'none' == ps:lower() then												-- if assigned value is 'none' then
		ps = '';																-- set to empty string
	end
	
	return sep, ps, ref
end


--[=[-------------------------&lt; I S _ P D F &gt;------------------------------------------------------------------

Determines if a url has the file extension that is one of the pdf file extensions used by [[MediaWiki:Common.css]] when
applying the pdf icon to external links.

returns true if file extension is one of the recognized extensions, else false

]=]

local function is_pdf (url)
	return url:match ('%.pdf$') or url:match ('%.PDF$') or
		url:match ('%.pdf[%?#]') or url:match ('%.PDF[%?#]') or
		url:match ('%.PDF&amp;#035') or url:match ('%.pdf&amp;#035');
end


--[[--------------------------&lt; S T Y L E _ F O R M A T &gt;------------------------------------------------------

Applies css style to |format=, |chapter-format=, etc.  Also emits an error message if the format parameter does
not have a matching url parameter.  If the format parameter is not set and the url contains a file extension that
is recognized as a pdf document by MediaWiki's commons.css, this code will set the format parameter to (PDF) with
the appropriate styling.

]]

local function style_format (format, url, fmt_param, url_param)
	if is_set (format) then
		format = wrap_style ('format', format);									-- add leading space, parentheses, resize
		if not is_set (url) then
			format = format .. set_error( 'format_missing_url', {fmt_param, url_param} );	-- add an error message
		end
	elseif is_pdf (url) then													-- format is not set so if url is a pdf file then
		format = wrap_style ('format', 'PDF');									-- set format to pdf
	else
		format = '';															-- empty string for concatenation
	end
	return format;
end


--[[--------------------------&lt; G E T _ D I S P L A Y _ N A M E S &gt;--------------------------------------------

Returns a number that defines the number of names displayed for author and editor name lists and a boolean flag
to indicate when et al. should be appended to the name list.

When the value assigned to |display-xxxxors= is a number greater than or equal to zero, return the number and
the previous state of the 'etal' flag (false by default but may have been set to true if the name list contains
some variant of the text 'et al.').

When the value assigned to |display-xxxxors= is the keyword 'etal', return a number that is one greater than the
number of authors in the list and set the 'etal' flag true.  This will cause the list_people() to display all of
the names in the name list followed by 'et al.'

In all other cases, returns nil and the previous state of the 'etal' flag.

inputs:
	max: A['DisplayAuthors'] or A['DisplayEditors']; a number or some flavor of etal
	count: #a or #e
	list_name: 'authors' or 'editors'
	etal: author_etal or editor_etal

]]

local function get_display_names (max, count, list_name, etal)
	if is_set (max) then
		if 'etal' == max:lower():gsub("[ '%.]", '') then						-- the :gsub() portion makes 'etal' from a variety of 'et al.' spellings and stylings
			max = count + 1;													-- number of authors + 1 so display all author name plus et al.
			etal = true;														-- overrides value set by extract_names()
		elseif max:match ('^%d+$') then											-- if is a string of numbers
			max = tonumber (max);												-- make it a number
			if max &gt;= count then												-- if |display-xxxxors= value greater than or equal to number of authors/editors
				add_maint_cat ('disp_name', cfg.special_case_translation [list_name]);
			end
		else																	-- not a valid keyword or number
			table.insert( z.message_tail, { set_error( 'invalid_param_val', {'display-' .. list_name, max}, true ) } );		-- add error message
			max = nil;															-- unset; as if |display-xxxxors= had not been set
		end
	end
	
	return max, etal;
end


--[[--------------------------&lt; E X T R A _ T E X T _ I N _ P A G E _ C H E C K &gt;------------------------------

Adds page to Category:CS1 maint: extra text if |page= or |pages= has what appears to be some form of p. or pp. 
abbreviation in the first characters of the parameter content.

check Page and Pages for extraneous p, p., pp, and pp. at start of parameter value:
	good pattern: '^P[^%.P%l]' matches when |page(s)= begins PX or P# but not Px where x and X are letters and # is a dgiit
	bad pattern: '^[Pp][Pp]' matches matches when |page(s)= begins pp or pP or Pp or PP

]]

local function extra_text_in_page_check (page)
	local good_pattern = '^P[^%.Pp]';											-- ok to begin with uppercase P: P7 (pg 7 of section P) but not p123 (page 123) TODO: add Gg for PG or Pg?
	local bad_pattern = '^[Pp]?[Pp]%.?[ %d]';

	if not page:match (good_pattern) and (page:match (bad_pattern) or  page:match ('^[Pp]ages?')) then
		add_maint_cat ('extra_text');
	end
end


--[=[-------------------------&lt; G E T _ V _ N A M E _ T A B L E &gt;----------------------------------------------

split apart a |vauthors= or |veditors= parameter.  This function allows for corporate names, wrapped in doubled
parentheses to also have commas; in the old version of the code, the doubled parnetheses were included in the
rendered citation and in the metadata.  Individual author names may be wikilinked

	|vauthors=Jones AB, [[E. B. White|White EB]], ((Black, Brown, and Co.))

]=]

local function get_v_name_table (vparam, output_table, output_link_table)
	local name_table = mw.text.split(vparam, "%s*,%s*");						-- names are separated by commas
	local wl_type, label, link;													-- wl_type not used here; just a place holder
	
	local i = 1;
	
	while name_table[i] do
		if name_table[i]:match ('^%(%(.*[^%)][^%)]$') then						-- first segment of corporate with one or more commas; this segment has the opening doubled parens
			local name = name_table[i];
			i=i+1;																-- bump indexer to next segment
			while name_table[i] do
				name = name .. ', ' .. name_table[i];							-- concatenate with previous segments
				if name_table[i]:match ('^.*%)%)$') then						-- if this table member has the closing doubled parens
					break;														-- and done reassembling so
				end
				i=i+1;															-- bump indexer
			end
			table.insert (output_table, name);									-- and add corporate name to the output table
			table.insert (output_link_table, '');								-- no wikilink
		else
			wl_type, label, link = is_wikilink (name_table[i]);					-- wl_type is: 0, no wl (text in label variable); 1, [[D]]; 2, [[L|D]]
			table.insert (output_table, label);									-- add this name
			if 1 == wl_type then
				table.insert (output_link_table, label);						-- simple wikilink [[D]]
			else
				table.insert (output_link_table, link);							-- no wikilink or [[L|D]]; add this link if there is one, else empty string
			end
		end
		i = i+1;
	end	
	return output_table;
end


--[[--------------------------&lt; P A R S E _ V A U T H O R S _ V E D I T O R S &gt;--------------------------------

This function extracts author / editor names from |vauthors= or |veditors= and finds matching |xxxxor-maskn= and
|xxxxor-linkn= in args.  It then returns a table of assembled names just as extract_names() does.

Author / editor names in |vauthors= or |veditors= must be in Vancouver system style. Corporate or institutional names
may sometimes be required and because such names will often fail the is_good_vanc_name() and other format compliance
tests, are wrapped in doubled paranethese ((corporate name)) to suppress the format tests.

Supports generational suffixes Jr, 2nd, 3rd, 4th–6th.

This function sets the vancouver error when a reqired comma is missing and when there is a space between an author's initials.

]]

local function parse_vauthors_veditors (args, vparam, list_name)
	local names = {};															-- table of names assembled from |vauthors=, |author-maskn=, |author-linkn=
	local v_name_table = {};
	local v_link_table = {};													-- when name is wikilinked, targets go in this table
	local etal = false;															-- return value set to true when we find some form of et al. vauthors parameter
	local last, first, link, mask, suffix;
	local corporate = false;

	vparam, etal = name_has_etal (vparam, etal, true);							-- find and remove variations on et al. do not categorize (do it here because et al. might have a period)
	v_name_table = get_v_name_table (vparam, v_name_table, v_link_table);		-- names are separated by commas

	for i, v_name in ipairs(v_name_table) do
		if v_name:match ('^%(%(.+%)%)$') then									-- corporate authors are wrapped in doubled parentheses to supress vanc formatting and error detection
			first = '';															-- set to empty string for concatenation and because it may have been set for previous author/editor
			last = v_name:match ('^%(%((.+)%)%)$')								-- remove doubled parntheses
			corporate = true;													-- flag used in list_people()
		elseif string.find(v_name, "%s") then
			if v_name:find('[;%.]') then										-- look for commonly occurring punctuation characters; 
				add_vanc_error ('punctuation');
			end
			local lastfirstTable = {}
			lastfirstTable = mw.text.split(v_name, "%s")
			first = table.remove(lastfirstTable);								-- removes and returns value of last element in table which should be author intials
			if is_suffix (first) then											-- if a valid suffix
				suffix = first													-- save it as a suffix and
				first = table.remove(lastfirstTable);							-- get what should be the initials from the table
			end																	-- no suffix error message here because letter combination may be result of Romanization; check for digits?
			last = table.concat(lastfirstTable, " ")							-- returns a string that is the concatenation of all other names that are not initials
			if mw.ustring.match (last, '%a+%s+%u+%s+%a+') then
				add_vanc_error ('missing comma');								-- matches last II last; the case when a comma is missing
			end
			if mw.ustring.match (v_name, ' %u %u$') then						-- this test is in the wrong place TODO: move or replace with a more appropriate test
				add_vanc_error ('name');										-- matches a space between two intiials
			end
		else
			first = '';															-- set to empty string for concatenation and because it may have been set for previous author/editor
			last = v_name;														-- last name or single corporate name?  Doesn't support multiword corporate names? do we need this?
		end
																
		if is_set (first) then
			if not mw.ustring.match (first, "^%u?%u$") then						-- first shall contain one or two upper-case letters, nothing else
				add_vanc_error ('initials');									-- too many initials; mixed case initials (which may be ok Romanization); hyphenated initials
			end
			is_good_vanc_name (last, first);									-- check first and last before restoring the suffix which may have a non-Latin digit
			if is_set (suffix) then
				first = first .. ' ' .. suffix;									-- if there was a suffix concatenate with the initials
				suffix = '';													-- unset so we don't add this suffix to all subsequent names
			end
		else
			if not corporate then
				is_good_vanc_name (last, '');
			end
		end

		link = select_one( args, cfg.aliases[list_name .. '-Link'], 'redundant_parameters', i ) or v_link_table[i];
		mask = select_one( args, cfg.aliases[list_name .. '-Mask'], 'redundant_parameters', i );
		names[i] = {last = last, first = first, link = link, mask = mask, corporate=corporate};		-- add this assembled name to our names list
	end
	return names, etal;															-- all done, return our list of names
end


--[[--------------------------&lt; S E L E C T _ A U T H O R _ E D I T O R _ S O U R C E &gt;------------------------

Select one of |authors=, |authorn= / |lastn / firstn=, or |vauthors= as the source of the author name list or
select one of |editors=, |editorn= / editor-lastn= / |editor-firstn= or |veditors= as the source of the editor name list.

Only one of these appropriate three will be used.  The hierarchy is: |authorn= (and aliases) highest and |authors= lowest and
similarly, |editorn= (and aliases) highest and |editors= lowest

When looking for |authorn= / |editorn= parameters, test |xxxxor1= and |xxxxor2= (and all of their aliases); stops after the second
test which mimicks the test used in extract_names() when looking for a hole in the author name list.  There may be a better
way to do this, I just haven't discovered what that way is.

Emits an error message when more than one xxxxor name source is provided.

In this function, vxxxxors = vauthors or veditors; xxxxors = authors or editors as appropriate.

]]

local function select_author_editor_source (vxxxxors, xxxxors, args, list_name)
local lastfirst = false;
	if select_one( args, cfg.aliases[list_name .. '-Last'], 'none', 1 ) or		-- do this twice incase we have a |first1= without a |last1=; this ...
		select_one( args, cfg.aliases[list_name .. '-First'], 'none', 1 ) or	-- ... also catches the case where |first= is used with |vauthors=
		select_one( args, cfg.aliases[list_name .. '-Last'], 'none', 2 ) or
		select_one( args, cfg.aliases[list_name .. '-First'], 'none', 2 ) then
			lastfirst=true;
	end

	if (is_set (vxxxxors) and true == lastfirst) or								-- these are the three error conditions
		(is_set (vxxxxors) and is_set (xxxxors)) or
		(true == lastfirst and is_set (xxxxors)) then
			local err_name;
			if 'AuthorList' == list_name then									-- figure out which name should be used in error message
				err_name = 'author';
			else
				err_name = 'editor';
			end
			table.insert( z.message_tail, { set_error( 'redundant_parameters',
				{err_name .. '-name-list parameters'}, true ) } );				-- add error message
	end

	if true == lastfirst then return 1 end;										-- return a number indicating which author name source to use
	if is_set (vxxxxors) then return 2 end;
	if is_set (xxxxors) then return 3 end;
	return 1;																	-- no authors so return 1; this allows missing author name test to run in case there is a first without last 
end


--[[--------------------------&lt; I S _ V A L I D _ P A R A M E T E R _ V A L U E &gt;------------------------------

This function is used to validate a parameter's assigned value for those parameters that have only a limited number
of allowable values (yes, y, true, no, etc).  When the parameter value has not been assigned a value (missing or empty
in the source template) the function returns true.  If the parameter value is one of the list of allowed values returns
true; else, emits an error message and returns false.

]]

local function is_valid_parameter_value (value, name, possible)
	if not is_set (value) then
		return true;															-- an empty parameter is ok
	elseif in_array (value, possible) then
		return true;
	else
		table.insert( z.message_tail, { set_error( 'invalid_param_val', {name, value}, true ) } );	-- not an allowed value so add error message
		return false
	end
end


--[[--------------------------&lt; T E R M I N A T E _ N A M E _ L I S T &gt;----------------------------------------

This function terminates a name list (author, contributor, editor) with a separator character (sepc) and a space
when the last character is not a sepc character or when the last three characters are not sepc followed by two
closing square brackets (close of a wikilink).  When either of these is true, the name_list is terminated with a
single space character.

]]

local function terminate_name_list (name_list, sepc)
	if (string.sub (name_list,-3,-1) == sepc .. '. ') then						-- if already properly terminated
		return name_list;														-- just return the name list
	elseif (string.sub (name_list,-1,-1) == sepc) or (string.sub (name_list,-3,-1) == sepc .. ']]') then	-- if last name in list ends with sepc char
		return name_list .. " ";												-- don't add another
	else
		return name_list .. sepc .. ' ';										-- otherwise terninate the name list
	end
end


--[[-------------------------&lt; F O R M A T _ V O L U M E _ I S S U E &gt;----------------------------------------

returns the concatenation of the formatted volume and issue parameters as a single string; or formatted volume
or formatted issue, or an empty string if neither are set.

]]
	
local function format_volume_issue (volume, issue, cite_class, origin, sepc, lower)
	if not is_set (volume) and not is_set (issue) then
		return '';
	end
	
	if 'magazine' == cite_class or (in_array (cite_class, {'citation', 'map'}) and 'magazine' == origin) then
		if is_set (volume) and is_set (issue) then
			return wrap_msg ('vol-no', {sepc, volume, issue}, lower);
		elseif is_set (volume) then
			return wrap_msg ('vol', {sepc, volume}, lower);
		else
			return wrap_msg ('issue', {sepc, issue}, lower);
		end
	end

	local vol = '';																-- here for all cites except magazine
		
	if is_set (volume) then
		if volume:match ('^[MDCLXVI]+$') or volume:match ('^%d+$')then			-- volume value is all digits or all uppercase roman numerals
			vol = substitute (cfg.presentation['vol-bold'], {sepc, hyphen_to_dash(volume)});	-- render in bold face
		elseif (4 &lt; mw.ustring.len(volume)) then								-- not all digits or roman numerals and longer than 4 characters
			vol = substitute (cfg.messages['j-vol'], {sepc, volume});			-- not bold
			add_prop_cat ('long_vol');
		else																	-- four or less characters
			vol = substitute (cfg.presentation['vol-bold'], {sepc, hyphen_to_dash(volume)});	-- bold
		end
	end
	if is_set (issue) then
		return vol .. substitute (cfg.messages['j-issue'], issue);
	end
	return vol;
end


--[[-------------------------&lt; F O R M A T _ P A G E S _ S H E E T S &gt;-----------------------------------------

adds static text to one of |page(s)= or |sheet(s)= values and returns it with all of the others set to empty strings.
The return order is:
	page, pages, sheet, sheets

Singular has priority over plural when both are provided.

]]

local function format_pages_sheets (page, pages, sheet, sheets, cite_class, origin, sepc, nopp, lower)
	if 'map' == cite_class then													-- only cite map supports sheet(s) as in-source locators
		if is_set (sheet) then
			if 'journal' == origin then
				return '', '', wrap_msg ('j-sheet', sheet, lower), '';
			else
				return '', '', wrap_msg ('sheet', {sepc, sheet}, lower), '';
			end
		elseif is_set (sheets) then
			if 'journal' == origin then
				return '', '', '', wrap_msg ('j-sheets', sheets, lower);
			else
				return '', '', '', wrap_msg ('sheets', {sepc, sheets}, lower);
			end
		end
	end

	local is_journal = 'journal' == cite_class or (in_array (cite_class, {'citation', 'map', 'interview'}) and 'journal' == origin);
	
	if is_set (page) then
		if is_journal then
			return substitute (cfg.messages['j-page(s)'], page), '', '', '';
		elseif not nopp then
			return substitute (cfg.messages['p-prefix'], {sepc, page}), '', '', '';
		else
			return substitute (cfg.messages['nopp'], {sepc, page}), '', '', '';
		end
	elseif is_set(pages) then
		if is_journal then
			return substitute (cfg.messages['j-page(s)'], pages), '', '', '';
		elseif tonumber(pages) ~= nil and not nopp then							-- if pages is only digits, assume a single page number
			return '', substitute (cfg.messages['p-prefix'], {sepc, pages}), '', '';
		elseif not nopp then
			return '', substitute (cfg.messages['pp-prefix'], {sepc, pages}), '', '';
		else
			return '', substitute (cfg.messages['nopp'], {sepc, pages}), '', '';
		end
	end
	
	return '', '', '', '';														-- return empty strings
end


--[[--------------------------&lt; I N S O U R C E _ L O C _ G E T &gt;----------------------------------------------

returns one of the in-source locators: page, pages, or at. 

If any of these are interwiki links to wikisource, returns the label portion of the interwikilink as plain text
for use in COinS.  This COinS thing is done because here we convert an interwiki link to and external link and
add an icon span around that; get_coins_pages() doesn't know about the span.  TODO: should it?  

TODO: add support for sheet and sheets?; streamline;

TODO: make it so that this function returns only one of the three as the single in-source (the return value assigned
to a new name)?

]]

local function insource_loc_get (page, pages, at)
	local ws_url, ws_label, coins_pages, L;										-- for wikisource interwikilinks; TODO: this corrupts page metadata (span remains in place after cleanup; fix there?)

	if is_set (page) then
		if is_set (pages) or is_set(at) then
			pages = '';															-- unset the others
			at = '';
		end
		extra_text_in_page_check (page);										-- add this page to maint cat if |page= value begins with what looks like p. or pp.

		ws_url, ws_label, L = wikisource_url_make (page);						-- make ws url from |page= interwiki link; link portion L becomes tool tip label
		if ws_url then
			page = external_link (ws_url, ws_label .. '&amp;nbsp;', 'ws link in page');	-- space char after label to move icon away from in-source text; TODO: a better way to do this?
			page = substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, page});
			coins_pages = ws_label;
		end
	elseif is_set (pages) then
		if is_set (at) then
			at = '';															-- unset
		end
		extra_text_in_page_check (pages);										-- add this page to maint cat if |pages= value begins with what looks like p. or pp.

		ws_url, ws_label, L = wikisource_url_make (pages);						-- make ws url from |pages= interwiki link; link portion L becomes tool tip label
		if ws_url then
			pages = external_link (ws_url, ws_label .. '&amp;nbsp;', 'ws link in pages');	-- space char after label to move icon away from in-source text; TODO: a better way to do this?
			pages = substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, pages});
			coins_pages = ws_label;
		end
	elseif is_set (at) then
		ws_url, ws_label, L = wikisource_url_make (at);							-- make ws url from |at= interwiki link; link portion L becomes tool tip label
		if ws_url then
			at = external_link (ws_url, ws_label .. '&amp;nbsp;', 'ws link in at');	-- space char after label to move icon away from in-source text; TODO: a better way to do this?
			at = substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, at});
			coins_pages = ws_label;
		end
	end
	
	return page, pages, at, coins_pages;
end



--[=[-------------------------&lt; A R C H I V E _ U R L _ C H E C K &gt;--------------------------------------------

Check archive.org urls to make sure they at least look like they are pointing at valid archives and not to the 
save snapshot url or to calendar pages.  When the archive url is 'https://web.archive.org/save/' (or http://...)
archive.org saves a snapshot of the target page in the url.  That is something that Wikipedia should not allow
unwitting readers to do.

When the archive.org url does not have a complete timestamp, archive.org chooses a snapshot according to its own
algorithm or provides a calendar 'search' result.  [[WP:ELNO]] discourages links to search results.

This function looks at the value assigned to |archive-url= and returns empty strings for |archive-url= and
|archive-date= and an error message when:
	|archive-url= holds an archive.org save command url
	|archive-url= is an archive.org url that does not have a complete timestamp (YYYYMMDDhhmmss 14 digits) in the
		correct place
otherwise returns |archive-url= and |archive-date=

There are two mostly compatible archive.org urls:
	//web.archive.org/&lt;timestamp&gt;...		-- the old form
	//web.archive.org/web/&lt;timestamp&gt;...	-- the new form

The old form does not support or map to the new form when it contains a display flag.  There are four identified flags
('id_', 'js_', 'cs_', 'im_') but since archive.org ignores others following the same form (two letters and an underscore)
we don't check for these specific flags but we do check the form.

This function supports a preview mode.  When the article is rendered in preview mode, this funct may return a modified
archive url:
	for save command errors, return undated wildcard (/*/)
	for timestamp errors when the timestamp has a wildcard, return the url unmodified
	for timestamp errors when the timestamp does not have a wildcard, return with timestamp limited to six digits plus wildcard (/yyyymm*/)

]=]

local function archive_url_check (url, date)
	local err_msg = '';															-- start with the error message empty
	local path, timestamp, flag;												-- portions of the archive.or url
	
	if (not url:match('//web%.archive%.org/')) and (not url:match('//liveweb%.archive%.org/')) then		-- also deprecated liveweb Wayback machine url
		return url, date;														-- not an archive.org archive, return ArchiveURL and ArchiveDate
	end

	if url:match('//web%.archive%.org/save/') then								-- if a save command url, we don't want to allow saving of the target page 
		err_msg = 'save command';
		url = url:gsub ('(//web%.archive%.org)/save/', '%1/*/', 1);				-- for preview mode: modify ArchiveURL
	elseif url:match('//liveweb%.archive%.org/') then
		err_msg = 'liveweb';
	else
		path, timestamp, flag = url:match('//web%.archive%.org/([^%d]*)(%d+)([^/]*)/');	-- split out some of the url parts for evaluation
		
		if not is_set(timestamp) or 14 ~= timestamp:len() then					-- path and flag optional, must have 14-digit timestamp here
			err_msg = 'timestamp';
			if '*' ~= flag then
				url=url:gsub ('(//web%.archive%.org/[^%d]*%d?%d?%d?%d?%d?%d?)[^/]*', '%1*', 1)	-- for preview, modify ts to be yearmo* max (0-6 digits plus splat)
			end
		elseif is_set(path) and 'web/' ~= path then								-- older archive urls do not have the extra 'web/' path element
			err_msg = 'path';
		elseif is_set (flag) and not is_set (path) then							-- flag not allowed with the old form url (without the 'web/' path element)
			err_msg = 'flag';
		elseif is_set (flag) and not flag:match ('%a%a_') then					-- flag if present must be two alpha characters and underscore (requires 'web/' path element)
			err_msg = 'flag';
		else
			return url, date;													-- return archiveURL and ArchiveDate
		end
	end
																				-- if here, something not right so
	table.insert( z.message_tail, { set_error( 'archive_url', {err_msg}, true ) } );	-- add error message and
	if is_set (Frame:preprocess('{{REVISIONID}}')) then
		return '', '';															-- return empty strings for archiveURL and ArchiveDate
	else
		return url, date;														-- preview mode so return archiveURL and ArchiveDate
	end
end


--[[--------------------------&lt; C I T A T I O N 0 &gt;------------------------------------------------------------

This is the main function doing the majority of the citation formatting.

]]

local function citation0( config, args)
	--[[ 
	Load Input Parameters
	The argument_wrapper facilitates the mapping of multiple aliases to single internal variable.
	]]
	local A = argument_wrapper( args );
	local i 

	-- Pick out the relevant fields from the arguments.  Different citation templates
	-- define different field names for the same underlying things.	

-- set default parameter values defined by |mode= parameter.
	local Mode = A['Mode'];
	if not is_valid_parameter_value (Mode, 'mode', cfg.keywords['mode']) then
		Mode = '';
	end

	local author_etal;
	local a	= {};																-- authors list from |lastn= / |firstn= pairs or |vauthors=
	local Authors;
	local NameListFormat = A['NameListFormat'];
	local Collaboration = A['Collaboration'];

	do																			-- to limit scope of selected
		local selected = select_author_editor_source (A['Vauthors'], A['Authors'], args, 'AuthorList');
		if 1 == selected then
			a, author_etal = extract_names (args, 'AuthorList');				-- fetch author list from |authorn= / |lastn= / |firstn=, |author-linkn=, and |author-maskn=
		elseif 2 == selected then
			NameListFormat = 'vanc';											-- override whatever |name-list-format= might be
			a, author_etal = parse_vauthors_veditors (args, args.vauthors, 'AuthorList');	-- fetch author list from |vauthors=, |author-linkn=, and |author-maskn=
		elseif 3 == selected then
			Authors = A['Authors'];												-- use content of |authors=
			if 'authors' == A:ORIGIN('Authors') then							-- but add a maint cat if the parameter is |authors=
				add_maint_cat ('authors');										-- because use of this parameter is discouraged; what to do about the aliases is a TODO:
			end
		end
		if is_set (Collaboration) then
			author_etal = true;													-- so that |display-authors=etal not required
		end
	end

	local Others = A['Others'];

	local editor_etal;
	local e	= {};																-- editors list from |editor-lastn= / |editor-firstn= pairs or |veditors=
	local Editors;

	do																			-- to limit scope of selected
		local selected = select_author_editor_source (A['Veditors'], A['Editors'], args, 'EditorList');
		if 1 == selected then
			e, editor_etal = extract_names (args, 'EditorList');				-- fetch editor list from |editorn= / |editor-lastn= / |editor-firstn=, |editor-linkn=, and |editor-maskn=
		elseif 2 == selected then
			NameListFormat = 'vanc';											-- override whatever |name-list-format= might be
			e, editor_etal = parse_vauthors_veditors (args, args.veditors, 'EditorList');	-- fetch editor list from |veditors=, |editor-linkn=, and |editor-maskn=
		elseif 3 == selected then
			Editors = A['Editors'];												-- use content of |editors=
			add_maint_cat ('editors');											-- but add a maint cat because use of this parameter is discouraged
		end
	end

	local translator_etal;
	local t = {};																-- translators list from |translator-lastn= / translator-firstn= pairs
	local Translators;															-- assembled translators name list
	t = extract_names (args, 'TranslatorList');									-- fetch translator list from |translatorn= / |translator-lastn=, -firstn=, -linkn=, -maskn=

	local interviewer_etal;
	local interviewers_list = {};												
	local Interviewers;															-- used later
	interviewers_list = extract_names (args, 'InterviewerList');				-- process preferred interviewers parameters

	local contributor_etal;
	local c = {};																-- contributors list from |contributor-lastn= / contributor-firstn= pairs
	local Contributors;															-- assembled contributors name list
	local Contribution = A['Contribution'];
	if in_array(config.CitationClass, {"book","citation"}) and not is_set(A['Periodical']) then	-- |contributor= and |contribution= only supported in book cites
		c = extract_names (args, 'ContributorList');							-- fetch contributor list from |contributorn= / |contributor-lastn=, -firstn=, -linkn=, -maskn=
		
		if 0 &lt; #c then
			if not is_set (Contribution) then									-- |contributor= requires |contribution=
				table.insert( z.message_tail, { set_error( 'contributor_missing_required_param', 'contribution')});	-- add missing contribution error message
				c = {};															-- blank the contributors' table; it is used as a flag later
			end
			if 0 == #a then														-- |contributor= requires |author=
				table.insert( z.message_tail, { set_error( 'contributor_missing_required_param', 'author')});	-- add missing author error message
				c = {};															-- blank the contributors' table; it is used as a flag later
			end
		end
	else																		-- if not a book cite
		if select_one (args, cfg.aliases['ContributorList-Last'], 'redundant_parameters', 1 ) then	-- are there contributor name list parameters?
			table.insert( z.message_tail, { set_error( 'contributor_ignored')});	-- add contributor ignored error message
		end
		Contribution = nil;														-- unset
	end

	if not is_valid_parameter_value (NameListFormat, 'name-list-format', cfg.keywords['name-list-format']) then	-- only accepted value for this parameter is 'vanc'
		NameListFormat = '';													-- anything else, set to empty string
	end

	if is_set (Others) then
		if 0 == #a and 0 == #e then												-- add maint cat when |others= has value and used without |author=, |editor=
			add_maint_cat ('others');
		end
	end

	local Year = A['Year'];
	local PublicationDate = A['PublicationDate'];
	local OrigYear = A['OrigYear'];
	local Date = A['Date'];
	local LayDate = A['LayDate'];
	------------------------------------------------- Get title data
	local Title = A['Title'];
	local ScriptTitle = A['ScriptTitle'];
	local BookTitle = A['BookTitle'];
	local Conference = A['Conference'];
	local TransTitle = A['TransTitle'];
	local TitleNote = A['TitleNote'];
	local TitleLink = A['TitleLink'];
			link_title_ok (TitleLink, A:ORIGIN ('TitleLink'), Title, 'title');	-- check for wikimarkup in |title-link= or wikimarkup in |title= when |title-link= is set

	local Chapter = A['Chapter'];
	local ScriptChapter = A['ScriptChapter'];
	local ScriptChapterOrigin = A:ORIGIN ('ScriptChapter');
	local ChapterLink	-- = A['ChapterLink'];									-- deprecated as a parameter but still used internally by cite episode
	local TransChapter = A['TransChapter'];
	local TitleType = A['TitleType'];
	local Degree = A['Degree'];
	local Docket = A['Docket'];
	local ArchiveFormat = A['ArchiveFormat'];

	local ArchiveDate;
	local ArchiveURL;

	ArchiveURL, ArchiveDate = archive_url_check (A['ArchiveURL'], A['ArchiveDate'])
	
	local UrlStatus = A['UrlStatus'];
	if 'url-status' == A:ORIGIN ('UrlStatus') then								-- interim: TODO: this line goes away
		if not is_valid_parameter_value (UrlStatus, 'url-status', cfg.keywords ['url-status']) then	-- set in config.defaults to 'dead'
			UrlStatus = '';														-- anything else, set to empty string
		end																		-- interim: TODO: this line goes away
	elseif is_set (A:ORIGIN ('UrlStatus')) then									-- interim: while both |dead-url= and |url-status= allowed use separate keyword lists; TODO: remove this section
		if not is_valid_parameter_value (UrlStatus, A:ORIGIN ('UrlStatus'), cfg.keywords ['deadurl']) then	-- interim: assume |dead-url=; use those keywords; TODO: this line goes away
			UrlStatus = '';														-- anything else, set to empty string; interim: TODO: this line goes away
		end																		-- interim: TODO: this line goes away
	end																			-- interim: TODO: this line goes away
	
	if in_array (UrlStatus, {'yes', 'true', 'y'}) then							-- TODO: remove this whole thing when |dead-url=[yes|no] parameters removed from articles
		UrlStatus = 'dead';
	elseif 'no' == UrlStatus then
		UrlStatus = 'live';
	end
	
	local URL = A['URL']
	local URLorigin = A:ORIGIN('URL');											-- get name of parameter that holds URL
	local ChapterURL = A['ChapterURL'];
	local ChapterURLorigin = A:ORIGIN('ChapterURL');							-- get name of parameter that holds ChapterURL
	local ConferenceFormat = A['ConferenceFormat'];
	local ConferenceURL = A['ConferenceURL'];
	local ConferenceURLorigin = A:ORIGIN('ConferenceURL');						-- get name of parameter that holds ConferenceURL
	local Periodical = A['Periodical'];
	local Periodical_origin = '';
		if is_set (Periodical) then
			Periodical_origin = A:ORIGIN('Periodical');							-- get the name of the periodical parameter
			local i;
			Periodical, i = strip_apostrophe_markup (Periodical);				-- strip appostrophe markup so that metadata isn't contaminated 
			if i then															-- non-zero when markup was stripped so emit an error message
				table.insert( z.message_tail, {set_error ('apostrophe_markup', {Periodical_origin}, true)});
			end
		end

	local ScriptPeriodical = A['ScriptPeriodical'];
	local ScriptPeriodical_origin = A:ORIGIN('ScriptPeriodical');
																				-- web and news not tested for now because of 
																				-- Wikipedia:Administrators%27_noticeboard#Is_there_a_semi-automated_tool_that_could_fix_these_annoying_"Cite_Web"_errors?
		if not (is_set (Periodical) or is_set (ScriptPeriodical)) then			-- 'periodical' templates require periodical parameter
--			local p = {['journal'] = 'journal', ['magazine'] = 'magazine', ['news'] = 'newspaper', ['web'] = 'website'};	-- for error message
			local p = {['journal'] = 'journal', ['magazine'] = 'magazine'};		-- for error message
			if p[config.CitationClass]  then
				table.insert( z.message_tail, {set_error ('missing_periodical', {config.CitationClass, p[config.CitationClass]}, true)});
			end
		end

	local TransPeriodical =  A['TransPeriodical'];

	local Series = A['Series'];
	
	local Volume;
	local Issue;
	local Page;
	local Pages;
	local At;

	if 'citation' == config.CitationClass then
		if is_set (Periodical) then
			if not in_array (Periodical_origin, {'website', 'mailinglist'}) then	-- {{citation}} does not render volume for these 'periodicals'
				Volume = A['Volume'];											-- but does for all other 'periodicals'
			end
		elseif is_set (ScriptPeriodical) then
			if 'script-website' ~= ScriptPeriodical_origin then					-- {{citation}} does not render volume for |script-website=
				Volume = A['Volume'];											-- but does for all other 'periodicals'
			end
		else
			Volume = A['Volume'];												-- and does for non-'periodical' cites
		end
	elseif in_array (config.CitationClass, cfg.templates_using_volume) then		-- render |volume= for cs1 according to the configuration settings
		Volume = A['Volume'];
	end	

	if 'citation' == config.CitationClass then
		if is_set (Periodical) and in_array (Periodical_origin, {'journal', 'magazine', 'newspaper', 'periodical', 'work'}) or	-- {{citation}} renders issue for these 'periodicals'
			is_set (ScriptPeriodical) and in_array (ScriptPeriodical_origin, {'script-journal', 'script-magazine', 'script-newspaper', 'script-periodical', 'script-work'}) then -- and these 'script-periodicals'
				Issue = hyphen_to_dash (A['Issue']);
		end
	elseif in_array (config.CitationClass, cfg.templates_using_issue) then		-- conference &amp; map books do not support issue; {{citation}} listed here because included in settings table
		if not (in_array (config.CitationClass, {'conference', 'map', 'citation'}) and not (is_set (Periodical) or is_set (ScriptPeriodical))) then
			Issue = hyphen_to_dash (A['Issue']);
		end
	end

	local Position = '';
	if not in_array (config.CitationClass, cfg.templates_not_using_page) then
		Page = A['Page'];
		Pages = hyphen_to_dash (A['Pages']);	
		At = A['At'];
	end

	local Edition = A['Edition'];
	local PublicationPlace = A['PublicationPlace']
	local Place = A['Place'];
	
	local PublisherName = A['PublisherName'];
	local PublisherName_origin = A:ORIGIN('PublisherName');
		if is_set (PublisherName) then
			local i=0;
			PublisherName, i = strip_apostrophe_markup (PublisherName);			-- strip appostrophe markup so that metadata isn't contaminated; publisher is never italicized

			if i then															-- non-zero when markup was stripped so emit an error message
				table.insert( z.message_tail, {set_error ('apostrophe_markup', {PublisherName_origin}, true)});
			end
		end

	local RegistrationRequired = A['RegistrationRequired'];
		if not is_valid_parameter_value (RegistrationRequired, 'registration', cfg.keywords ['yes_true_y']) then
			RegistrationRequired=nil;
		end

	local SubscriptionRequired = A['SubscriptionRequired'];
		if not is_valid_parameter_value (SubscriptionRequired, 'subscription', cfg.keywords ['yes_true_y']) then
			SubscriptionRequired=nil;
		end

	local UrlAccess = A['UrlAccess'];
		if not is_valid_parameter_value (UrlAccess, 'url-access', cfg.keywords ['url-access']) then
			UrlAccess = nil;
		end
		if not is_set(URL) and is_set(UrlAccess) then
			UrlAccess = nil;
			table.insert( z.message_tail, { set_error( 'param_access_requires_param', {'url'}, true ) } );
		end
		
		if is_set (UrlAccess) and is_set (SubscriptionRequired) then			-- while not aliases, these are much the same so if both are set
			table.insert( z.message_tail, { set_error( 'redundant_parameters', {wrap_style ('parameter', 'url-access') .. ' and ' .. wrap_style ('parameter', 'subscription')}, true ) } );		-- add error message
			SubscriptionRequired = nil;											-- unset; prefer |access= over |subscription=
		end
		if is_set (UrlAccess) and is_set (RegistrationRequired) then			-- these are not the same but contradictory so if both are set
			table.insert( z.message_tail, { set_error( 'redundant_parameters', {wrap_style ('parameter', 'url-access') .. ' and ' .. wrap_style ('parameter', 'registration')}, true ) } );		-- add error message
			RegistrationRequired = nil;											-- unset; prefer |access= over |registration=
		end

	local ChapterUrlAccess = A['ChapterUrlAccess'];
		if not is_valid_parameter_value (ChapterUrlAccess, A:ORIGIN('ChapterUrlAccess'), cfg.keywords ['url-access']) then	-- same as url-access
			ChapterUrlAccess = nil;
		end
		if not is_set(ChapterURL) and is_set(ChapterUrlAccess) then
			ChapterUrlAccess = nil;
			table.insert( z.message_tail, { set_error( 'param_access_requires_param', {A:ORIGIN('ChapterUrlAccess'):gsub ('%-access', '')}, true ) } );
		end

	local MapUrlAccess = A['MapUrlAccess'];
		if not is_valid_parameter_value (MapUrlAccess, 'map-url-access', cfg.keywords ['url-access']) then
			MapUrlAccess = nil;
		end
		if not is_set(A['MapURL']) and is_set(MapUrlAccess) then
			MapUrlAccess = nil;
			table.insert( z.message_tail, { set_error( 'param_access_requires_param', {'map-url'}, true ) } );
		end

	local Via = A['Via'];
	local AccessDate = A['AccessDate'];
	local Agency = A['Agency'];

	local Language = A['Language'];
	local Format = A['Format'];
	local ChapterFormat = A['ChapterFormat'];
	local DoiBroken = A['DoiBroken'];
	local ID = A['ID'];
	local ASINTLD = A['ASINTLD'];
	local IgnoreISBN = A['IgnoreISBN'];
		if not is_valid_parameter_value (IgnoreISBN, 'ignore-isbn-error', cfg.keywords ['yes_true_y']) then
			IgnoreISBN = nil;													-- anything else, set to empty string
		end
	local Embargo = A['Embargo'];
	local Class = A['Class'];													-- arxiv class identifier

	local ID_list = extract_ids( args );
		if is_set (DoiBroken) and not ID_list['DOI'] then
			table.insert( z.message_tail, { set_error( 'doibroken_missing_doi', A:ORIGIN('DoiBroken'))});
		end
	local ID_access_levels = extract_id_access_levels( args, ID_list );

	local Quote = A['Quote'];

	local LayFormat = A['LayFormat'];
	local LayURL = A['LayURL'];
	local LaySource = A['LaySource'];
	local Transcript = A['Transcript'];
	local TranscriptFormat = A['TranscriptFormat'];
	local TranscriptURL = A['TranscriptURL'] 
	local TranscriptURLorigin = A:ORIGIN('TranscriptURL');						-- get name of parameter that holds TranscriptURL

	local LastAuthorAmp = A['LastAuthorAmp'];
		if not is_valid_parameter_value (LastAuthorAmp, 'last-author-amp', cfg.keywords ['yes_true_y']) then
			LastAuthorAmp = nil;												-- set to empty string
		end

	local no_tracking_cats = A['NoTracking'];
		if not is_valid_parameter_value (no_tracking_cats, 'no-tracking', cfg.keywords ['yes_true_y']) then
			no_tracking_cats = nil;												-- set to empty string
		end

	--local variables that are not cs1 parameters
	local use_lowercase;														-- controls capitalization of certain static text
	local this_page = mw.title.getCurrentTitle();								-- also used for COinS and for language
	local anchor_year;															-- used in the CITEREF identifier
	local COinS_date = {};														-- holds date info extracted from |date= for the COinS metadata by Module:Date verification

	local DF = A['DF'];															-- date format set in cs1|2 template
	if not is_valid_parameter_value (DF, 'df', cfg.keywords['date-format']) then	-- validate reformatting keyword
		DF = '';																-- not valid, set to empty string
	end
	if not is_set (DF) then
		DF = cfg.global_df;
	end

	local sepc;																	-- separator between citation elements for CS1 a period, for CS2, a comma
	local PostScript;
	local Ref;
	sepc, PostScript, Ref = set_style (Mode:lower(), A['PostScript'], A['Ref'], config.CitationClass);
	use_lowercase = ( sepc == ',' );											-- used to control capitalization for certain static text

	--check this page to see if it is in one of the namespaces that cs1 is not supposed to add to the error categories
	if not is_set (no_tracking_cats) then										-- ignore if we are already not going to categorize this page
		if in_array (this_page.nsText, cfg.uncategorized_namespaces) then
			no_tracking_cats = "true";											-- set no_tracking_cats
		end
		for _,v in ipairs (cfg.uncategorized_subpages) do						-- cycle through page name patterns
			if this_page.text:match (v) then									-- test page name against each pattern
				no_tracking_cats = "true";										-- set no_tracking_cats
				break;															-- bail out if one is found
			end
		end
	end

	-- check for extra |page=, |pages= or |at= parameters. (also sheet and sheets while we're at it)
	select_one( args, {'page', 'p', 'pp', 'pages', 'at', 'sheet', 'sheets'}, 'redundant_parameters' );	-- this is a dummy call simply to get the error message and category

	local coins_pages;
	
	Page, Pages, At, coins_pages = insource_loc_get (Page, Pages, At);

	local NoPP = A['NoPP'] 
	if is_set (NoPP) and is_valid_parameter_value (NoPP, 'nopp', cfg.keywords ['yes_true_y']) then
		NoPP = true;
	else
		NoPP = nil;																-- unset, used as a flag later
	end

	if not is_set(PublicationPlace) and is_set(Place) then						-- both |publication-place= and |place= (|location=) allowed if different
		PublicationPlace = Place;												-- promote |place= (|location=) to |publication-place
	end
	
	if PublicationPlace == Place then Place = ''; end							-- don't need both if they are the same
	
	--[[
	Parameter remapping for cite encyclopedia:
	When the citation has these parameters:
		|encyclopedia and |title then map |title to |article and |encyclopedia to |title
		|encyclopedia and |article then map |encyclopedia to |title

		|trans-title maps to |trans-chapter when |title is re-mapped
		|url maps to |chapterurl when |title is remapped
	
	All other combinations of |encyclopedia, |title, and |article are not modified
	
	]]

local Encyclopedia = A['Encyclopedia'];

	if ( config.CitationClass == "encyclopaedia" ) or ( config.CitationClass == "citation" and is_set (Encyclopedia)) then	-- test code for citation
		if is_set (Periodical) then												-- Periodical is set when |encyclopedia is set
			if is_set(Title) or is_set (ScriptTitle) then
				if not is_set(Chapter) then
					Chapter = Title;											-- |encyclopedia and |title are set so map |title to |article and |encyclopedia to |title
					ScriptChapter = ScriptTitle;
					ScriptChapterOrigin = 'title';
					TransChapter = TransTitle;
					ChapterURL = URL;
					ChapterUrlAccess = UrlAccess;

					if not is_set (ChapterURL) and is_set (TitleLink) then
						Chapter = make_wikilink (TitleLink, Chapter);
					end
					Title = Periodical;
					ChapterFormat = Format;
					Periodical = '';											-- redundant so unset
					TransTitle = '';
					URL = '';
					Format = '';
					TitleLink = '';
					ScriptTitle = '';
				end
			elseif is_set (Chapter) then										-- |title not set
				Title = Periodical;												-- |encyclopedia set and |article set so map |encyclopedia to |title
				Periodical = '';												-- redundant so unset
			end
		end
	end

	-- Special case for cite techreport.
	if (config.CitationClass == "techreport") then								-- special case for cite techreport
		if is_set(A['Number']) then												-- cite techreport uses 'number', which other citations alias to 'issue'
			if not is_set(ID) then												-- can we use ID for the "number"?
				ID = A['Number'];												-- yes, use it
			else																-- ID has a value so emit error message
				table.insert( z.message_tail, { set_error('redundant_parameters', {wrap_style ('parameter', 'id') .. ' and ' .. wrap_style ('parameter', 'number')}, true )});
			end
		end	
	end

	-- special case for cite mailing list
	if (config.CitationClass == "mailinglist") then
		Periodical = A ['MailingList'];
	elseif 'mailinglist' == Periodical_origin then
		Periodical = '';														-- unset because mailing list is only used for cite mailing list
	end

	-- Account for the oddity that is {{cite conference}}, before generation of COinS data.
	if 'conference' == config.CitationClass then
		if is_set(BookTitle) then
			Chapter = Title;
--			ChapterLink = TitleLink;											-- |chapterlink= is deprecated
			ChapterURL = URL;
			ChapterUrlAccess = UrlAccess;
			ChapterURLorigin = URLorigin;
			URLorigin = '';
			ChapterFormat = Format;
			TransChapter = TransTitle;
			Title = BookTitle;
			Format = '';
--			TitleLink = '';
			TransTitle = '';
			URL = '';
		end
	elseif 'speech' ~= config.CitationClass then
		Conference = '';														-- not cite conference or cite speech so make sure this is empty string
	end

	-- cite map oddities
	local Cartography = "";
	local Scale = "";
	local Sheet = A['Sheet'] or '';
	local Sheets = A['Sheets'] or '';
	if config.CitationClass == "map" then
		Chapter = A['Map'];
		ChapterURL = A['MapURL'];
		ChapterUrlAccess = MapUrlAccess;
		TransChapter = A['TransMap'];
		ChapterURLorigin = A:ORIGIN('MapURL');
		ChapterFormat = A['MapFormat'];
		
		Cartography = A['Cartography'];
		if is_set( Cartography ) then
			Cartography = sepc .. " " .. wrap_msg ('cartography', Cartography, use_lowercase);
		end		
		Scale = A['Scale'];
		if is_set( Scale ) then
			Scale = sepc .. " " .. Scale;
		end
	end

	-- Account for the oddities that are {{cite episode}} and {{cite serial}}, before generation of COinS data.
	if 'episode' == config.CitationClass or 'serial' == config.CitationClass then
		local AirDate = A['AirDate'];
		local SeriesLink = A['SeriesLink'];

		link_title_ok (SeriesLink, A:ORIGIN ('SeriesLink'), Series, 'series');	-- check for wikimarkup in |series-link= or wikimarkup in |series= when |series-link= is set

		local Network = A['Network'];
		local Station = A['Station'];
		local s, n = {}, {};
																				-- do common parameters first
		if is_set(Network) then table.insert(n, Network); end
		if is_set(Station) then table.insert(n, Station); end
		ID = table.concat(n, sepc .. ' ');
		
		if not is_set (Date) and is_set (AirDate) then							-- promote airdate to date
			Date = AirDate;
		end

		if 'episode' == config.CitationClass then								-- handle the oddities that are strictly {{cite episode}}
			local Season = A['Season'];
			local SeriesNumber = A['SeriesNumber'];

			if is_set (Season) and is_set (SeriesNumber) then					-- these are mutually exclusive so if both are set
				table.insert( z.message_tail, { set_error( 'redundant_parameters', {wrap_style ('parameter', 'season') .. ' and ' .. wrap_style ('parameter', 'seriesno')}, true ) } );		-- add error message
				SeriesNumber = '';												-- unset; prefer |season= over |seriesno=
			end
																				-- assemble a table of parts concatenated later into Series
			if is_set(Season) then table.insert(s, wrap_msg ('season', Season, use_lowercase)); end
			if is_set(SeriesNumber) then table.insert(s, wrap_msg ('seriesnum', SeriesNumber, use_lowercase)); end
			if is_set(Issue) then table.insert(s, wrap_msg ('episode', Issue, use_lowercase)); end
			Issue = '';															-- unset because this is not a unique parameter
	
			Chapter = Title;													-- promote title parameters to chapter
			ScriptChapter = ScriptTitle;
			ScriptChapterOrigin = 'title';
			ChapterLink = TitleLink;											-- alias episodelink
			TransChapter = TransTitle;
			ChapterURL = URL;
			ChapterUrlAccess = UrlAccess;
			ChapterURLorigin = A:ORIGIN('URL');
			
			Title = Series;														-- promote series to title
			TitleLink = SeriesLink;
			Series = table.concat(s, sepc .. ' ');								-- this is concatenation of season, seriesno, episode number

			if is_set (ChapterLink) and not is_set (ChapterURL) then			-- link but not URL
				Chapter = make_wikilink (ChapterLink, Chapter);
			elseif is_set (ChapterLink) and is_set (ChapterURL) then			-- if both are set, URL links episode;
				Series = make_wikilink (ChapterLink, Series);
			end
			URL = '';															-- unset
			TransTitle = '';
			ScriptTitle = '';
			
		else																	-- now oddities that are cite serial
			Issue = '';															-- unset because this parameter no longer supported by the citation/core version of cite serial
			Chapter = A['Episode'];												-- TODO: make |episode= available to cite episode someday?
			if is_set (Series) and is_set (SeriesLink) then
				Series = make_wikilink (SeriesLink, Series);
			end
			Series = wrap_style ('italic-title', Series);						-- series is italicized
		end	
	end
	-- end of {{cite episode}} stuff

	-- Account for the oddities that are {{cite arxiv}}, {{cite biorxiv}}, {{cite citeseerx}}, {{cite ssrn}}, before generation of COinS data.
	do
		if in_array (config.CitationClass, {'arxiv', 'biorxiv', 'citeseerx', 'ssrn'}) then
			if not is_set (ID_list[config.CitationClass:upper()]) then			-- |arxiv= or |eprint= required for cite arxiv; |biorxiv= &amp; |citeseerx= required for their templates
				table.insert( z.message_tail, { set_error( config.CitationClass .. '_missing', {}, true ) } );	-- add error message
			end

			Periodical = ({['arxiv'] = 'arXiv', ['biorxiv'] = bioRxiv, ['citeseerx'] = 'CiteSeerX', ['ssrn'] = 'Social Science Research Network'})[config.CitationClass];
		end
	end

	-- handle type parameter for those CS1 citations that have default values
	if in_array(config.CitationClass, {"AV-media-notes", "interview", "mailinglist", "map", "podcast", "pressrelease", "report", "techreport", "thesis"}) then
		TitleType = set_titletype (config.CitationClass, TitleType);
		if is_set(Degree) and "Thesis" == TitleType then						-- special case for cite thesis
			TitleType = Degree .. ' ' .. cfg.title_types ['thesis']:lower();
		end
	end

	if is_set(TitleType) then													-- if type parameter is specified
		TitleType = substitute( cfg.messages['type'], TitleType);				-- display it in parentheses
	-- TODO: Hack on TitleType to fix bunched parentheses problem
	end

	-- legacy: promote PublicationDate to Date if neither Date nor Year are set.
 	local Date_origin;															-- to hold the name of parameter promoted to Date; required for date error messaging

	if not is_set (Date) then
		Date = Year;															-- promote Year to Date
		Year = nil;																-- make nil so Year as empty string isn't used for CITEREF
		if not is_set (Date) and is_set(PublicationDate) then					-- use PublicationDate when |date= and |year= are not set
			Date = PublicationDate;												-- promote PublicationDate to Date
			PublicationDate = '';												-- unset, no longer needed
			Date_origin = A:ORIGIN('PublicationDate');							-- save the name of the promoted parameter
		else
			Date_origin = A:ORIGIN('Year');										-- save the name of the promoted parameter
		end
	else
		Date_origin = A:ORIGIN('Date');											-- not a promotion; name required for error messaging
	end

	if PublicationDate == Date then PublicationDate = ''; end					-- if PublicationDate is same as Date, don't display in rendered citation

	--[[
	Go test all of the date-holding parameters for valid MOS:DATE format and make sure that dates are real dates. This must be done before we do COinS because here is where
	we get the date used in the metadata.
	
	Date validation supporting code is in Module:Citation/CS1/Date_validation
	]]
	do	-- create defined block to contain local variables error_message, date_parameters_list, mismatch
		local error_message = '';
																				-- AirDate has been promoted to Date so not necessary to check it
		local date_parameters_list = {
			['access-date'] = {val=AccessDate, name=A:ORIGIN ('AccessDate')},
			['archive-date'] = {val=ArchiveDate, name=A:ORIGIN ('ArchiveDate')},
			['date'] = {val=Date, name=Date_origin},
			['doi-broken-date'] = {val=DoiBroken, name=A:ORIGIN ('DoiBroken')},
			['embargo'] = {val=Embargo, name=A:ORIGIN ('Embargo')},
			['lay-date'] = {val=LayDate, name=A:ORIGIN ('LayDate')},
			['publication-date'] ={val=PublicationDate, name=A:ORIGIN ('PublicationDate')},
			['year'] = {val=Year, name=A:ORIGIN ('Year')},
			};
		anchor_year, Embargo, error_message = dates(date_parameters_list, COinS_date);

-- start temporary Julian / Gregorian calendar uncertainty categorization
		if COinS_date.inter_cal_cat then
			add_prop_cat ('jul_greg_uncertainty');
		end
-- end temporary Julian / Gregorian calendar uncertainty categorization

		if is_set (Year) and is_set (Date) then									-- both |date= and |year= not normally needed; 
			local mismatch = year_date_check (Year, Date)
			if 0 == mismatch then												-- |year= does not match a year-value in |date=
				if is_set (error_message) then									-- if there is already an error message
					error_message = error_message .. ', ';						-- tack on this additional message
				end
				error_message = error_message .. '&amp;#124;year= / &amp;#124;date= mismatch';
			elseif 1 == mismatch then											-- |year= matches year-value in |date=
				add_maint_cat ('date_year');
			end
		end
		
		if not is_set(error_message) then										-- error free dates only
			local modified = false;												-- flag
			
			if is_set (DF) then													-- if we need to reformat dates
				modified = reformat_dates (date_parameters_list, DF, false);	-- reformat to DF format, use long month names if appropriate
			end

			if true == date_hyphen_to_dash (date_parameters_list) then			-- convert hyphens to dashes where appropriate
				modified = true;
				add_maint_cat ('date_format');									-- hyphens were converted so add maint category
			end
			
	-- for those wikis that can and want to have English date names translated to the local language,
	-- uncomment these three lines.  Not supported by en.wiki (for obvious reasons)
	-- set date_name_xlate() second argument to true to translate English digits to local digits (will translate ymd dates)
--			if date_name_xlate (date_parameters_list, false) then
--				modified = true;
--			end

			if modified then													-- if the date_parameters_list values were modified
				AccessDate = date_parameters_list['access-date'].val;			-- overwrite date holding parameters with modified values
				ArchiveDate = date_parameters_list['archive-date'].val;
				Date = date_parameters_list['date'].val;
				DoiBroken = date_parameters_list['doi-broken-date'].val;
				LayDate = date_parameters_list['lay-date'].val;
				PublicationDate = date_parameters_list['publication-date'].val;
			end
		else
			table.insert( z.message_tail, { set_error( 'bad_date', {error_message}, true ) } );	-- add this error message
		end
	end	-- end of do

	-- Account for the oddity that is {{cite journal}} with |pmc= set and |url= not set.  Do this after date check but before COInS.
	-- Here we unset Embargo if PMC not embargoed (|embargo= not set in the citation) or if the embargo time has expired. Otherwise, holds embargo date
	Embargo = is_embargoed (Embargo);

	if config.CitationClass == "journal" and not is_set(URL) and is_set(ID_list['PMC']) then
		if not is_set (Embargo) then											-- if not embargoed or embargo has expired
			URL=cfg.id_handlers['PMC'].prefix .. ID_list['PMC'];				-- set url to be the same as the PMC external link if not embargoed
			URLorigin = cfg.id_handlers['PMC'].parameters[1];					-- set URLorigin to parameter name for use in error message if citation is missing a |title=
			if is_set(AccessDate) then											-- access date requires |url=; pmc created url is not |url=
				table.insert( z.message_tail, { set_error( 'accessdate_missing_url', {}, true ) } );
				AccessDate = '';												-- unset
			end

		end
	end

	-- At this point fields may be nil if they weren't specified in the template use.  We can use that fact.
	-- Test if citation has no title
	if	not is_set(Title) and
		not is_set(TransTitle) and
		not is_set(ScriptTitle) then
			if 'episode' == config.CitationClass then							-- special case for cite episode; TODO: is there a better way to do this?
				table.insert( z.message_tail, { set_error( 'citation_missing_title', {'series'}, true ) } );
			else
				table.insert( z.message_tail, { set_error( 'citation_missing_title', {'title'}, true ) } );
			end
	end

	if 'none' == Title and
			in_array (config.CitationClass, {'journal', 'citation'}) and
			(is_set (Periodical) or is_set (ScriptPeriodical)) and
			('journal' == Periodical_origin or 'script-journal' == ScriptPeriodical_origin) then	-- special case for journal cites
				Title = '';														-- set title to empty string
				add_maint_cat ('untitled');
	end

	check_for_url ({															-- add error message when any of these parameters hold a URL
		['title']=Title,
		[A:ORIGIN('Chapter')]=Chapter,
		[Periodical_origin] = Periodical,
		[PublisherName_origin] = PublisherName
		});

	-- COinS metadata (see &lt;http://ocoins.info/&gt;) for automated parsing of citation information.
	-- handle the oddity that is cite encyclopedia and {{citation |encyclopedia=something}}. Here we presume that
	-- when Periodical, Title, and Chapter are all set, then Periodical is the book (encyclopedia) title, Title
	-- is the article title, and Chapter is a section within the article.  So, we remap 
	
	local coins_chapter = Chapter;												-- default assuming that remapping not required
	local coins_title = Title;													-- et tu
	if 'encyclopaedia' == config.CitationClass or ('citation' == config.CitationClass and is_set (Encyclopedia)) then
		if is_set (Chapter) and is_set (Title) and is_set (Periodical) then		-- if all are used then
			coins_chapter = Title;												-- remap
			coins_title = Periodical;
		end
	end
	local coins_author = a;														-- default for coins rft.au 
	if 0 &lt; #c then																-- but if contributor list
		coins_author = c;														-- use that instead
	end

	-- this is the function call to COinS()
	local OCinSoutput = COinS({
		['Periodical'] = strip_apostrophe_markup (Periodical),					-- no markup in the metadata
		['Encyclopedia'] = strip_apostrophe_markup (Encyclopedia),
		['Chapter'] = make_coins_title (coins_chapter, ScriptChapter),			-- Chapter and ScriptChapter stripped of bold / italic wikimarkup
		['Degree'] = Degree;													-- cite thesis only
		['Title'] = make_coins_title (coins_title, ScriptTitle),				-- Title and ScriptTitle stripped of bold / italic wikimarkup
		['PublicationPlace'] = PublicationPlace,
		['Date'] = COinS_date.rftdate,											-- COinS_date has correctly formatted date if Date is valid;
		['Season'] = COinS_date.rftssn,
		['Chron'] =  COinS_date.rftchron or (not COinS_date.rftdate and Date) or '',	-- chron but if not set and invalid date format use Date; keep this last bit?
		['Series'] = Series,
		['Volume'] = Volume,
		['Issue'] = Issue,
		['Pages'] = coins_pages or get_coins_pages (first_set ({Sheet, Sheets, Page, Pages, At}, 5)),	-- pages stripped of external links
		['Edition'] = Edition,
		['PublisherName'] = PublisherName,										-- any apostrophe markup already removed
		['URL'] = first_set ({ChapterURL, URL}, 2),
		['Authors'] = coins_author,
		['ID_list'] = ID_list,
		['RawPage'] = this_page.prefixedText,
	}, config.CitationClass);

	-- Account for the oddities that are {{cite arxiv}}, {{cite biorxiv}}, {{cite citeseerx}}, and {{cite ssrn}} AFTER generation of COinS data.
	if in_array (config.CitationClass, {'arxiv', 'biorxiv', 'citeseerx', 'ssrn'}) then	-- we have set rft.jtitle in COinS to arXiv, bioRxiv, CiteSeerX, or ssrn now unset so it isn't displayed
		Periodical = '';														-- periodical not allowed in these templates; if article has been published, use cite journal
	end

	-- special case for cite newsgroup.  Do this after COinS because we are modifying Publishername to include some static text
	if 'newsgroup' == config.CitationClass then
		if is_set (PublisherName) then
			PublisherName = substitute (cfg.messages['newsgroup'], external_link( 'news:' .. PublisherName, PublisherName, PublisherName_origin, nil ));
		end
	end

	-- Now perform various field substitutions.
	-- We also add leading spaces and surrounding markup and punctuation to the
	-- various parts of the citation, but only when they are non-nil.
	local EditorCount;															-- used only for choosing {ed.) or (eds.) annotation at end of editor name-list
	do
		local last_first_list;
		local control = { 
			format = NameListFormat,											-- empty string or 'vanc'
			maximum = nil,														-- as if display-authors or display-editors not set
			lastauthoramp = LastAuthorAmp,
			page_name = this_page.text,											-- get current page name so that we don't wikilink to it via editorlinkn
			mode = Mode
		};

		do																		-- do editor name list first because the now unsupported coauthors used to modify control table
			control.maximum , editor_etal = get_display_names (A['DisplayEditors'], #e, 'editors', editor_etal);
			last_first_list, EditorCount = list_people(control, e, editor_etal);

			if is_set (Editors) then
				Editors, editor_etal = name_has_etal (Editors, editor_etal, false, 'editors');	-- find and remove variations on et al.
				if editor_etal then
					Editors = Editors .. ' ' .. cfg.messages['et al'];			-- add et al. to editors parameter beause |display-editors=etal
					EditorCount = 2;											-- with et al., |editors= is multiple names; spoof to display (eds.) annotation
				else
					EditorCount = 2;											-- we don't know but assume |editors= is multiple names; spoof to display (eds.) annotation
				end
			else
				Editors = last_first_list;										-- either an author name list or an empty string
			end

			if 1 == EditorCount and (true == editor_etal or 1 &lt; #e) then		-- only one editor displayed but includes etal then 
				EditorCount = 2;												-- spoof to display (eds.) annotation
			end
		end
		do																		-- now do interviewers
			control.maximum , interviewer_etal = get_display_names (A['DisplayInterviewers'], #interviewers_list, 'interviewers', interviewer_etal);
			Interviewers = list_people (control, interviewers_list, interviewer_etal);
		end
		do																		-- now do translators
			control.maximum , translator_etal = get_display_names (A['DisplayTranslators'], #t, 'translators', translator_etal);
			Translators = list_people (control, t, translator_etal);
		end
		do																		-- now do contributors
			control.maximum , contributor_etal = get_display_names (A['DisplayContributors'], #c, 'contributors', contributor_etal);
			Contributors = list_people (control, c, contributor_etal);
		end
		do																		-- now do authors
			control.maximum , author_etal = get_display_names (A['DisplayAuthors'], #a, 'authors', author_etal);

			last_first_list = list_people(control, a, author_etal);

			if is_set (Authors) then
				Authors, author_etal = name_has_etal (Authors, author_etal, false, 'authors');	-- find and remove variations on et al.
				if author_etal then
					Authors = Authors .. ' ' .. cfg.messages['et al'];			-- add et al. to authors parameter
				end
			else
				Authors = last_first_list;										-- either an author name list or an empty string
			end
		end																		-- end of do
	
		if is_set (Authors) and is_set (Collaboration) then
			Authors = Authors .. ' (' .. Collaboration .. ')';					-- add collaboration after et al.
		end

	end

	-- apply |[xx-]format= styling; at the end, these parameters hold correctly styled format annotation,
	-- an error message if the associated url is not set, or an empty string for concatenation
	ArchiveFormat = style_format (ArchiveFormat, ArchiveURL, 'archive-format', 'archive-url');
	ConferenceFormat = style_format (ConferenceFormat, ConferenceURL, 'conference-format', 'conference-url');
	Format = style_format (Format, URL, 'format', 'url');
	LayFormat = style_format (LayFormat, LayURL, 'lay-format', 'lay-url');
	TranscriptFormat = style_format (TranscriptFormat, TranscriptURL, 'transcript-format', 'transcripturl');

	-- special case for chapter format so no error message or cat when chapter not supported
	if not (in_array(config.CitationClass, {'web', 'news', 'journal', 'magazine', 'pressrelease', 'podcast', 'newsgroup', 'arxiv', 'biorxiv', 'citeseerx', 'ssrn'}) or
		('citation' == config.CitationClass and (is_set (Periodical) or is_set (ScriptPeriodical)) and not is_set (Encyclopedia))) then
			ChapterFormat = style_format (ChapterFormat, ChapterURL, 'chapter-format', 'chapter-url');
	end

	if not is_set(URL) then
		if in_array(config.CitationClass, {"web","podcast", "mailinglist"}) or		-- |url= required for cite web, cite podcast, and cite mailinglist
			('citation' == config.CitationClass and ('website' == Periodical_origin or 'script-website' == ScriptPeriodical_origin)) then	-- and required for {{citation}} with |website= or |script-website=
				table.insert( z.message_tail, { set_error( 'cite_web_url', {}, true ) } );
		end
		
		-- do we have |accessdate= without either |url= or |chapter-url=?
		if is_set(AccessDate) and not is_set(ChapterURL)then					-- ChapterURL may be set when URL is not set;
			table.insert( z.message_tail, { set_error( 'accessdate_missing_url', {}, true ) } );
			AccessDate = '';
		end
	end

	local OriginalURL, OriginalURLorigin, OriginalFormat, OriginalAccess;
--	DeadURL = DeadURL:lower();													-- used later when assembling archived text
	UrlStatus = UrlStatus:lower();												-- used later when assembling archived text
	if is_set( ArchiveURL ) then
		if is_set (ChapterURL) then 											-- if chapter-url is set apply archive url to it
			OriginalURL = ChapterURL;											-- save copy of source chapter's url for archive text
			OriginalURLorigin = ChapterURLorigin;								-- name of chapter-url parameter for error messages
			OriginalFormat = ChapterFormat;										-- and original |chapter-format=
--			if 'no' ~= DeadURL then
			if 'live' ~= UrlStatus then
				ChapterURL = ArchiveURL											-- swap-in the archive's url
				ChapterURLorigin = A:ORIGIN('ArchiveURL')						-- name of archive-url parameter for error messages
				ChapterFormat = ArchiveFormat or '';							-- swap in archive's format
				ChapterUrlAccess = nil;											-- restricted access levels do not make sense for archived urls
			end
		elseif is_set (URL) then
			OriginalURL = URL;													-- save copy of original source URL
			OriginalURLorigin = URLorigin;										-- name of url parameter for error messages
			OriginalFormat = Format; 											-- and original |format=
			OriginalAccess = UrlAccess;
--			if 'no' ~= DeadURL then												-- if URL set then archive-url applies to it
			if 'live' ~= UrlStatus then											-- if URL set then archive-url applies to it
				URL = ArchiveURL												-- swap-in the archive's url
				URLorigin = A:ORIGIN('ArchiveURL')								-- name of archive url parameter for error messages
				Format = ArchiveFormat or '';									-- swap in archive's format
				UrlAccess = nil;												-- restricted access levels do not make sense for archived urls
			end
 		end
	end

	if in_array(config.CitationClass, {'web','news','journal', 'magazine', 'pressrelease', 'podcast', 'newsgroup', 'arxiv', 'biorxiv', 'citeseerx', 'ssrn'}) or	-- if any of the 'periodical' cites except encyclopedia
		('citation' == config.CitationClass and (is_set (Periodical) or is_set (ScriptPeriodical)) and not is_set (Encyclopedia)) then
			local chap_param;
			if is_set (Chapter) then											-- get a parameter name from one of these chapter related meta-parameters
				chap_param = A:ORIGIN ('Chapter')
			elseif is_set (TransChapter) then
				chap_param = A:ORIGIN ('TransChapter')
			elseif is_set (ChapterURL) then
				chap_param = A:ORIGIN ('ChapterURL')
			elseif is_set (ScriptChapter) then
				chap_param = ScriptChapterOrigin;
			else is_set (ChapterFormat)
				chap_param = A:ORIGIN ('ChapterFormat')
			end

			if is_set (chap_param) then											-- if we found one
				table.insert( z.message_tail, { set_error( 'chapter_ignored', {chap_param}, true ) } );		-- add error message
				Chapter = '';													-- and set them to empty string to be safe with concatenation
				TransChapter = '';
				ChapterURL = '';
				ScriptChapter = '';
				ChapterFormat = '';
			end
	else																		-- otherwise, format chapter / article title
		local no_quotes = false;												-- default assume that we will be quoting the chapter parameter value
		if is_set (Contribution) and 0 &lt; #c then								-- if this is a contribution with contributor(s)
			if in_array (Contribution:lower(), cfg.keywords.contribution) then	-- and a generic contribution title
				no_quotes = true;												-- then render it unquoted
			end
		end

		Chapter = format_chapter_title (ScriptChapter, ScriptChapterOrigin, Chapter, TransChapter, ChapterURL, ChapterURLorigin, no_quotes, ChapterUrlAccess);		-- Contribution is also in Chapter
		if is_set (Chapter) then
			Chapter = Chapter .. ChapterFormat ;
			if 'map' == config.CitationClass and is_set (TitleType) then
				Chapter = Chapter .. ' ' .. TitleType;							-- map annotation here; not after title
			end
			Chapter = Chapter.. sepc .. ' ';
		elseif is_set (ChapterFormat) then										-- |chapter= not set but |chapter-format= is so ...
			Chapter = ChapterFormat .. sepc .. ' ';								-- ... ChapterFormat has error message, we want to see it
		end
	end

	-- Format main title.
	if is_set (ArchiveURL) and mw.ustring.match (mw.ustring.lower(Title), cfg.special_case_translation['archived_copy']) then	-- if title is 'Archived copy' (place holder added by bots that can't find proper title)
		add_maint_cat ('archived_copy');										-- add maintenance category before we modify the content of Title
	end

	if Title:match ('^%(%(.*%)%)$') then										-- if keep as written markup:
		Title= Title:gsub ('^%(%((.*)%)%)$', '%1')								-- remove the markup
	else
		if '...' == Title:sub (-3) then											-- if elipsis is the last three characters of |title=
			Title = Title:gsub ('(%.%.%.)%.+$', '%1');							-- limit the number of dots to three
		elseif not mw.ustring.find (Title, '%.%s*%a%.$') and					-- end of title is not a 'dot-(optional space-)letter-dot' initialism ...
			not mw.ustring.find (Title, '%s+%a%.$') then						-- ...and not a 'space-letter-dot' initial (''Allium canadense'' L.)
				Title = mw.ustring.gsub(Title, '%'..sepc..'$', '');				-- remove any trailing separator character; sepc and ms.ustring() here for languages that use multibyte separator characters
		end
	end
	
	if in_array(config.CitationClass, {'web', 'news', 'journal', 'magazine', 'pressrelease', 'podcast', 'newsgroup', 'mailinglist', 'interview', 'arxiv', 'biorxiv', 'citeseerx', 'ssrn'}) or
		('citation' == config.CitationClass and (is_set (Periodical) or is_set (ScriptPeriodical)) and not is_set (Encyclopedia)) or
		('map' == config.CitationClass and (is_set (Periodical) or is_set (ScriptPeriodical))) then		-- special case for cite map when the map is in a periodical treat as an article
			Title = kern_quotes (Title);										-- if necessary, separate title's leading and trailing quote marks from Module provided quote marks
			Title = wrap_style ('quoted-title', Title);
			Title = script_concatenate (Title, ScriptTitle, 'script-title');	-- &lt;bdi&gt; tags, lang atribute, categorization, etc; must be done after title is wrapped
			TransTitle= wrap_style ('trans-quoted-title', TransTitle );
	elseif 'report' == config.CitationClass then								-- no styling for cite report
		Title = script_concatenate (Title, ScriptTitle, 'script-title');		-- &lt;bdi&gt; tags, lang atribute, categorization, etc; must be done after title is wrapped
		TransTitle= wrap_style ('trans-quoted-title', TransTitle );				-- for cite report, use this form for trans-title
	else
		Title = wrap_style ('italic-title', Title);
		Title = script_concatenate (Title, ScriptTitle, 'script-title');		-- &lt;bdi&gt; tags, lang atribute, categorization, etc; must be done after title is wrapped
		TransTitle = wrap_style ('trans-italic-title', TransTitle);
	end

	local TransError = "";
	if is_set(TransTitle) then
		if is_set(Title) then
			TransTitle = " " .. TransTitle;
		else
			TransError = " " .. set_error( 'trans_missing_title', {'title'} );
		end
	end

	if is_set(Title) then
		if not is_set (TitleLink) and is_set (URL) then
			Title = external_link (URL, Title, URLorigin, UrlAccess) .. TransTitle .. TransError .. Format;
			URL = '';															-- unset these because no longer needed
			Format = "";
		elseif is_set (TitleLink) and not is_set (URL) then
			local ws_url;
			ws_url = wikisource_url_make (TitleLink);							-- ignore ws_label return; not used here
			if ws_url then
				Title = external_link (ws_url, Title .. '&amp;nbsp;', 'ws link in title-link');	-- space char after Title to move icon away from italic text; TODO: a better way to do this?
				Title = substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], TitleLink, Title});				
				Title = Title .. TransTitle .. TransError;
			else
				Title = make_wikilink (TitleLink, Title) .. TransTitle .. TransError;
			end
		else
			local ws_url, ws_label;
			ws_url, ws_label, L = wikisource_url_make (Title);					-- make ws url from |title= interwiki link; link portion L becomes tool tip label
			if ws_url then
				Title = Title:gsub ('%b[]', ws_label);							-- replace interwiki link with ws_label to retain markup
				Title = external_link (ws_url, Title .. '&amp;nbsp;', 'ws link in title');	-- space char after Title to move icon away from italic text; TODO: a better way to do this?
				Title = substitute (cfg.presentation['interwiki-icon'], {cfg.presentation['class-wikisource'], L, Title});				
				Title = Title .. TransTitle .. TransError;
			else
				Title = Title .. TransTitle .. TransError;
			end
		end
	else
		Title = TransTitle .. TransError;
	end

	if is_set(Place) then
		Place = " " .. wrap_msg ('written', Place, use_lowercase) .. sepc .. " ";
	end

	if is_set (Conference) then
		if is_set (ConferenceURL) then
			Conference = external_link( ConferenceURL, Conference, ConferenceURLorigin, nil );
		end
		Conference = sepc .. " " .. Conference .. ConferenceFormat;
	elseif is_set(ConferenceURL) then
		Conference = sepc .. " " .. external_link( ConferenceURL, nil, ConferenceURLorigin, nil );
	end

	if not is_set(Position) then
		local Minutes = A['Minutes'];
		local Time = A['Time'];

		if is_set(Minutes) then
			if is_set (Time) then
				table.insert( z.message_tail, { set_error( 'redundant_parameters', {wrap_style ('parameter', 'minutes') .. ' and ' .. wrap_style ('parameter', 'time')}, true ) } );
			end
			Position = " " .. Minutes .. " " .. cfg.messages['minutes'];
		else
			if is_set(Time) then
				local TimeCaption = A['TimeCaption']
				if not is_set(TimeCaption) then
					TimeCaption = cfg.messages['event'];
					if sepc ~= '.' then
						TimeCaption = TimeCaption:lower();
					end
				end
				Position = " " .. TimeCaption .. " " .. Time;
			end
		end
	else
		Position = " " .. Position;
		At = '';
	end

	Page, Pages, Sheet, Sheets = format_pages_sheets (Page, Pages, Sheet, Sheets, config.CitationClass, Periodical_origin, sepc, NoPP, use_lowercase);

	At = is_set(At) and (sepc .. " " .. At) or "";
	Position = is_set(Position) and (sepc .. " " .. Position) or "";
	if config.CitationClass == 'map' then
		local Section = A['Section'];
		local Sections = A['Sections'];
		local Inset = A['Inset'];
		
		if is_set( Inset ) then
			Inset = sepc .. " " .. wrap_msg ('inset', Inset, use_lowercase);
		end			

		if is_set( Sections ) then
			Section = sepc .. " " .. wrap_msg ('sections', Sections, use_lowercase);
		elseif is_set( Section ) then
			Section = sepc .. " " .. wrap_msg ('section', Section, use_lowercase);
		end
		At = At .. Inset .. Section;		
	end	

	if is_set (Language) then
		Language = language_parameter (Language);								-- format, categories, name from ISO639-1, etc
	else
		Language="";															-- language not specified so make sure this is an empty string;
	--[[ TODO: need to extract the wrap_msg from language_parameter
	so that we can solve parentheses bunching problem with Format/Language/TitleType
	]]
	end

	Others = is_set(Others) and (sepc .. " " .. Others) or "";
	
	if is_set (Translators) then
		Others = safe_join ({sepc .. ' ', wrap_msg ('translated', Translators, use_lowercase), Others}, sepc);
	end
	if is_set (Interviewers) then
		Others = safe_join ({sepc .. ' ', wrap_msg ('interview', Interviewers, use_lowercase), Others}, sepc);
	end
	
	TitleNote = is_set(TitleNote) and (sepc .. " " .. TitleNote) or "";
	if is_set (Edition) then
		if Edition:match ('%f[%a][Ee]d%.?$') or Edition:match ('%f[%a][Ee]dition$') then
			add_maint_cat ('extra_text', 'edition');
		end
		Edition = " " .. wrap_msg ('edition', Edition);
	else
		Edition = '';
	end

	Series = is_set (Series) and wrap_msg ('series', {sepc, Series}) or "";		-- not the same as SeriesNum
	OrigYear = is_set (OrigYear) and wrap_msg ('origyear', OrigYear) or '';
	Agency = is_set (Agency) and wrap_msg ('agency', {sepc, Agency}) or "";
	Volume = format_volume_issue (Volume, Issue, config.CitationClass, Periodical_origin, sepc, use_lowercase);

	------------------------------------ totally unrelated data
	Via = is_set (Via) and  wrap_msg ('via', Via) or '';

	--[[
	Subscription implies paywall; Registration does not.  If both are used in a citation, the subscription required link
	note is displayed. There are no error messages for this condition.
	
	]]
	if is_set (SubscriptionRequired) then
		SubscriptionRequired = sepc .. " " .. cfg.messages['subscription'];		-- subscription required message
	elseif is_set (RegistrationRequired) then
		SubscriptionRequired = sepc .. " " .. cfg.messages['registration'];		-- registration required message
	else
		SubscriptionRequired = '';												-- either or both might be set to something other than yes true y
	end

	if is_set(AccessDate) then
		local retrv_text = " " .. cfg.messages['retrieved']

		AccessDate = nowrap_date (AccessDate);									-- wrap in nowrap span if date in appropriate format
		if (sepc ~= ".") then retrv_text = retrv_text:lower() end				-- if mode is cs2, lower case
		AccessDate = substitute (retrv_text, AccessDate);						-- add retrieved text

		AccessDate = substitute (cfg.presentation['accessdate'], {sepc, AccessDate});	-- allow editors to hide accessdates
	end
	
	if is_set(ID) then ID = sepc .." ".. ID; end
   	if "thesis" == config.CitationClass and is_set(Docket) then
		ID = sepc .." Docket ".. Docket .. ID;
	end
   	if "report" == config.CitationClass and is_set(Docket) then					-- for cite report when |docket= is set
		ID = sepc .. ' ' .. Docket;												-- overwrite ID even if |id= is set
	end

	ID_list = build_id_list( ID_list, {IdAccessLevels=ID_access_levels, DoiBroken = DoiBroken, ASINTLD = ASINTLD, IgnoreISBN = IgnoreISBN, Embargo=Embargo, Class = Class} );

	if is_set(URL) then
		URL = " " .. external_link( URL, nil, URLorigin, UrlAccess );
	end

	if is_set(Quote) then
		if Quote:sub(1,1) == '"' and Quote:sub(-1,-1) == '"' then				-- if first and last characters of quote are quote marks
			Quote = Quote:sub(2,-2);											-- strip them off
		end
		Quote = sepc .." " .. wrap_style ('quoted-text', Quote ); 				-- wrap in &lt;q&gt;...&lt;/q&gt; tags
		PostScript = "";														-- cs1|2 does not supply terminal punctuation when |quote= is set
	end
	
	local Archived
	if is_set(ArchiveURL) then
		if not is_set(ArchiveDate) then
			ArchiveDate = set_error('archive_missing_date');
		end
		if "live" == UrlStatus then
			local arch_text = cfg.messages['archived'];
			if sepc ~= "." then arch_text = arch_text:lower() end
			Archived = sepc .. " " .. substitute( cfg.messages['archived-live'],
				{ external_link( ArchiveURL, arch_text, A:ORIGIN('ArchiveURL'), nil ) .. ArchiveFormat, ArchiveDate } );
			if not is_set(OriginalURL) then
				Archived = Archived .. " " .. set_error('archive_missing_url');							   
			end
		elseif is_set(OriginalURL) then											-- UrlStatus is empty, 'dead', 'unfit', 'usurped', 'bot: unknown'
			local arch_text = cfg.messages['archived-dead'];
			if sepc ~= "." then arch_text = arch_text:lower() end
			if in_array (UrlStatus, {'unfit', 'usurped', 'bot: unknown'}) then
				Archived = sepc .. " " .. 'Archived from the original on ' .. ArchiveDate;	-- format already styled
				if 'bot: unknown' == UrlStatus then
					add_maint_cat ('bot:_unknown');								-- and add a category if not already added
				else
					add_maint_cat ('unfit');									-- and add a category if not already added
				end
			else																-- UrlStatus is empty, 'dead'
				Archived = sepc .. " " .. substitute( arch_text,
					{ external_link( OriginalURL, cfg.messages['original'], OriginalURLorigin, OriginalAccess ) .. OriginalFormat, ArchiveDate } );	-- format already styled
			end	
		else
			local arch_text = cfg.messages['archived-missing'];
			if sepc ~= "." then arch_text = arch_text:lower() end
			Archived = sepc .. " " .. substitute( arch_text, 
				{ set_error('archive_missing_url'), ArchiveDate } );
		end
	elseif is_set (ArchiveFormat) then
		Archived = ArchiveFormat;												-- if set and ArchiveURL not set ArchiveFormat has error message
	else
		Archived = ""
	end
	
	local Lay = '';
	if is_set(LayURL) then
		if is_set(LayDate) then LayDate = " (" .. LayDate .. ")" end
		if is_set(LaySource) then 
			LaySource = " &amp;ndash; ''" .. safe_for_italics(LaySource) .. "''";
		else
			LaySource = "";
		end
		if sepc == '.' then
			Lay = sepc .. " " .. external_link( LayURL, cfg.messages['lay summary'], A:ORIGIN('LayURL'), nil ) .. LayFormat .. LaySource .. LayDate
		else
			Lay = sepc .. " " .. external_link( LayURL, cfg.messages['lay summary']:lower(), A:ORIGIN('LayURL'), nil ) .. LayFormat .. LaySource .. LayDate
		end			
	elseif is_set (LayFormat) then												-- Test if |lay-format= is given without giving a |lay-url=
		Lay = sepc .. LayFormat;												-- if set and LayURL not set, then LayFormat has error message
	end

	if is_set(Transcript) then
		if is_set(TranscriptURL) then
			Transcript = external_link( TranscriptURL, Transcript, TranscriptURLorigin, nil );
		end
		Transcript = sepc .. ' ' .. Transcript .. TranscriptFormat;
	elseif is_set(TranscriptURL) then
		Transcript = external_link( TranscriptURL, nil, TranscriptURLorigin, nil );
	end

	local Publisher;
	if is_set(PublicationDate) then
		PublicationDate = wrap_msg ('published', PublicationDate);
	end
	if is_set(PublisherName) then
		if is_set(PublicationPlace) then
			Publisher = sepc .. " " .. PublicationPlace .. ": " .. PublisherName .. PublicationDate;
		else
			Publisher = sepc .. " " .. PublisherName .. PublicationDate;  
		end			
	elseif is_set(PublicationPlace) then 
		Publisher= sepc .. " " .. PublicationPlace .. PublicationDate;
	else 
		Publisher = PublicationDate;
	end
	
	-- Several of the above rely upon detecting this as nil, so do it last.
	if (is_set (Periodical) or is_set (ScriptPeriodical) or is_set (TransPeriodical)) then
		if is_set(Title) or is_set(TitleNote) then 
			Periodical = sepc .. " " .. format_periodical (ScriptPeriodical, ScriptPeriodical_origin, Periodical, TransPeriodical);
		else 
			Periodical = format_periodical (ScriptPeriodical, ScriptPeriodical_origin, Periodical, TransPeriodical);
		end
	end

	--[[
	Handle the oddity that is cite speech.  This code overrides whatever may be the value assigned to TitleNote (through |department=) and forces it to be " (Speech)" so that
	the annotation directly follows the |title= parameter value in the citation rather than the |event= parameter value (if provided).
	]]
	if "speech" == config.CitationClass then									-- cite speech only
		TitleNote = " (Speech)";												-- annotate the citation
		if is_set (Periodical) then												-- if Periodical, perhaps because of an included |website= or |journal= parameter 
			if is_set (Conference) then											-- and if |event= is set
				Conference = Conference .. sepc .. " ";							-- then add appropriate punctuation to the end of the Conference variable before rendering
			end
		end
	end

	-- Piece all bits together at last.  Here, all should be non-nil.
	-- We build things this way because it is more efficient in LUA
	-- not to keep reassigning to the same string variable over and over.

	local tcommon;
	local tcommon2;																-- used for book cite when |contributor= is set
	
	if in_array(config.CitationClass, {"journal","citation"}) and is_set(Periodical) then
		if is_set(Others) then Others = safe_join ({Others, sepc .. " "}, sepc) end		-- add terminal punctuation &amp; space; check for dup sepc; TODO why do we need to do this here?
		tcommon = safe_join( {Others, Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Language, Edition, Publisher, Agency, Volume}, sepc );
	elseif in_array(config.CitationClass, {"book","citation"}) and not is_set(Periodical) then		-- special cases for book cites
		if is_set (Contributors) then											-- when we are citing foreword, preface, introduction, etc
			tcommon = safe_join( {Title, TitleNote}, sepc );					-- author and other stuff will come after this and before tcommon2
			tcommon2 = safe_join( {Conference, Periodical, Format, TitleType, Series, Language, Volume, Others, Edition, Publisher, Agency}, sepc );
		else
			tcommon = safe_join( {Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Language, Volume, Others, Edition, Publisher, Agency}, sepc );
		end

	elseif 'map' == config.CitationClass then									-- special cases for cite map
		if is_set (Chapter) then												-- map in a book; TitleType is part of Chapter
			tcommon = safe_join( {Title, Format, Edition, Scale, Series, Language, Cartography, Others, Publisher, Volume}, sepc );
		elseif is_set (Periodical) then											-- map in a periodical
			tcommon = safe_join( {Title, TitleType, Format, Periodical, Scale, Series, Language, Cartography, Others, Publisher, Volume}, sepc );
		else																	-- a sheet or stand-alone map
			tcommon = safe_join( {Title, TitleType, Format, Edition, Scale, Series, Language, Cartography, Others, Publisher}, sepc );
		end
		
	elseif 'episode' == config.CitationClass then								-- special case for cite episode
		tcommon = safe_join( {Title, TitleNote, TitleType, Series, Language, Edition, Publisher}, sepc );

	else																		-- all other CS1 templates
		tcommon = safe_join( {Title, TitleNote, Conference, Periodical, Format, TitleType, Series, Language, 
			Volume, Others, Edition, Publisher, Agency}, sepc );
	end
	
	if #ID_list &gt; 0 then
		ID_list = safe_join( { sepc .. " ",  table.concat( ID_list, sepc .. " " ), ID }, sepc );
	else
		ID_list = ID;
	end
	
	local idcommon;
	if 'audio-visual' == config.CitationClass or 'episode' == config.CitationClass then	-- special case for cite AV media &amp; cite episode position transcript
		idcommon = safe_join( { ID_list, URL, Archived, Transcript, AccessDate, Via, SubscriptionRequired, Lay, Quote }, sepc );
	else
		idcommon = safe_join( { ID_list, URL, Archived, AccessDate, Via, SubscriptionRequired, Lay, Quote }, sepc );
	end
	
	local text;
	local pgtext = Position .. Sheet .. Sheets .. Page .. Pages .. At;

	if is_set(Date) then
		if is_set (Authors) or is_set (Editors) then							-- date follows authors or editors when authors not set
			Date = " (" .. Date ..")" .. OrigYear .. sepc .. " ";				-- in paranetheses
		else																	-- neither of authors and editors set
			if (string.sub(tcommon,-1,-1) == sepc) then							-- if the last character of tcommon is sepc
				Date = " " .. Date .. OrigYear;									-- Date does not begin with sepc
			else
				Date = sepc .. " " .. Date .. OrigYear;							-- Date begins with sepc
			end
		end
	end	
	if is_set(Authors) then
		if (not is_set (Date)) then												-- when date is set it's in parentheses; no Authors termination
			Authors = terminate_name_list (Authors, sepc);						-- when no date, terminate with 0 or 1 sepc and a space
		end
		if is_set(Editors) then
			local in_text = " ";
			local post_text = "";
			if is_set(Chapter) and 0 == #c then
				in_text = in_text .. cfg.messages['in'] .. " "
				if (sepc ~= '.') then
					in_text = in_text:lower()									-- lowercase for cs2
				end
			end
			if EditorCount &lt;= 1 then
				post_text = " (" .. cfg.messages['editor'] .. ")";				-- be consistent with no-author, no-date case
			else
				post_text = " (" .. cfg.messages['editors'] .. ")";
			end
			Editors = terminate_name_list (in_text .. Editors .. post_text, sepc);	-- terminate with 0 or 1 sepc and a space
		end
		if is_set (Contributors) then											-- book cite and we're citing the intro, preface, etc
			local by_text = sepc .. ' ' .. cfg.messages['by'] .. ' ';
			if (sepc ~= '.') then by_text = by_text:lower() end					-- lowercase for cs2
			Authors = by_text .. Authors;										-- author follows title so tweak it here
			if is_set (Editors) and is_set (Date) then							-- when Editors make sure that Authors gets terminated
				Authors = terminate_name_list (Authors, sepc);					-- terminate with 0 or 1 sepc and a space
			end
			if (not is_set (Date)) then											-- when date is set it's in parentheses; no Contributors termination
				Contributors = terminate_name_list (Contributors, sepc);		-- terminate with 0 or 1 sepc and a space
			end
			text = safe_join( {Contributors, Date, Chapter, tcommon, Authors, Place, Editors, tcommon2, pgtext, idcommon }, sepc );
		else
			text = safe_join( {Authors, Date, Chapter, Place, Editors, tcommon, pgtext, idcommon }, sepc );
		end
	elseif is_set(Editors) then
		if is_set(Date) then
			if EditorCount &lt;= 1 then
				Editors = Editors .. ", " .. cfg.messages['editor'];
			else
				Editors = Editors .. ", " .. cfg.messages['editors'];
			end
		else
			if EditorCount &lt;= 1 then
				Editors = Editors .. " (" .. cfg.messages['editor'] .. ")" .. sepc .. " "
			else
				Editors = Editors .. " (" .. cfg.messages['editors'] .. ")" .. sepc .. " "
			end
		end
		text = safe_join( {Editors, Date, Chapter, Place, tcommon, pgtext, idcommon}, sepc );
	else
		if in_array(config.CitationClass, {"journal","citation"}) and is_set(Periodical) then
			text = safe_join( {Chapter, Place, tcommon, pgtext, Date, idcommon}, sepc );
		else
			text = safe_join( {Chapter, Place, tcommon, Date, pgtext, idcommon}, sepc );
		end
	end
	
	if is_set(PostScript) and PostScript ~= sepc then
		text = safe_join( {text, sepc}, sepc ); 								--Deals with italics, spaces, etc.
		text = text:sub(1,-sepc:len()-1);
	end	
	
	text = safe_join( {text, PostScript}, sepc );

	-- Now enclose the whole thing in a &lt;cite/&gt; element
	local options = {};
	
	if is_set(config.CitationClass) and config.CitationClass ~= "citation" then
		options.class = config.CitationClass;
		options.class = "citation " .. config.CitationClass;					-- class=citation required for blue highlight when used with |ref=
	else
		options.class = "citation";
	end
	
	if is_set(Ref) and Ref:lower() ~= "none" then								-- set reference anchor if appropriate
		local id = Ref
		if ('harv' == Ref ) then
			local namelist = {};												-- holds selected contributor, author, editor name list
			local year = first_set ({Year, anchor_year}, 2);					-- Year first for legacy citations and for YMD dates that require disambiguation

			if #c &gt; 0 then														-- if there is a contributor list
				namelist = c;													-- select it
			elseif #a &gt; 0 then													-- or an author list
				namelist = a;
			elseif #e &gt; 0 then													-- or an editor list
				namelist = e;
			end
			if #namelist &gt; 0 then												-- if there are names in namelist
				id = anchor_id (namelist, year);								-- go make the CITEREF anchor
			else
				id = '';														-- unset
			end
		end
		options.id = id;
	end
	
	if string.len(text:gsub("&lt;span[^&gt;/]*&gt;(.-)&lt;/span&gt;", "%1"):gsub("%b&lt;&gt;","")) &lt;= 2 then	-- remove &lt;span&gt; tags and other html-like markup; then get length of what remains
		z.error_categories = {};
		text = set_error('empty_citation');
		z.message_tail = {};
	end
	
	local render = {};															-- here we collect the final bits for concatenation into the rendered citation

	if is_set(options.id) then													-- here we wrap the rendered citation in &lt;cite ...&gt;...&lt;/cite&gt; tags
		table.insert (render, substitute (cfg.presentation['cite-id'], {mw.uri.anchorEncode(options.id), mw.text.nowiki(options.class), text}));	-- when |ref= is set
	else
		table.insert (render, substitute (cfg.presentation['cite'], {mw.text.nowiki(options.class), text}));	-- all other cases
	end		

	table.insert (render, substitute (cfg.presentation['ocins'], {OCinSoutput}));	-- append metadata to the citation

	if 0 ~= #z.message_tail then
		table.insert (render, ' ');
		for i,v in ipairs( z.message_tail ) do
			if is_set(v[1]) then
				if i == #z.message_tail then
					table.insert (render, error_comment( v[1], v[2] ));
				else
					table.insert (render, error_comment( v[1] .. "; ", v[2] ));
				end
			end
		end
	end

	if 0 ~= #z.maintenance_cats then
		local maint_msgs = {};													-- here we collect all of the maint messages
		for _, v in ipairs( z.maintenance_cats ) do								-- append maintenance categories
			local maint = {};													-- here we assemble a maintenence message
			table.insert (maint, v);											-- maint msg is the category name
			table.insert (maint, ' (');											-- open the link text
			table.insert (maint, make_wikilink (':Category:' .. v, 'link'));	-- add the link
			table.insert (maint, ')');											-- and close it
			table.insert (maint_msgs, table.concat (maint));					-- assemble new maint message and add it to the maint_msgs table
		end
		table.insert (render, substitute (cfg.presentation['hidden-maint'], table.concat (maint_msgs, ' ')));	-- wrap the group of maint message with proper presentation and save
	end
	
	no_tracking_cats = no_tracking_cats:lower();
	if in_array(no_tracking_cats, {"", "no", "false", "n"}) then
		for _, v in ipairs( z.error_categories ) do
			table.insert (render, make_wikilink ('Category:' .. v));
		end
		for _, v in ipairs( z.maintenance_cats ) do								-- append maintenance categories
			table.insert (render, make_wikilink ('Category:' .. v));
		end
		for _, v in ipairs( z.properties_cats ) do								-- append properties categories
			table.insert (render, make_wikilink ('Category:' .. v));
		end
	end

	return table.concat (render);	
end


--[[--------------------------&lt; V A L I D A T E &gt;--------------------------------------------------------------

Looks for a parameter's name in one of several whitelists.

Parameters in the whitelist can have three values:
	true - active, supported parameters
	false - deprecated, supported parameters
	nil - unsupported parameters
	
]]

local function validate (name, cite_class)
	local name = tostring (name);
	local state;
	
	if in_array (cite_class, {'arxiv', 'biorxiv', 'citeseerx', 'ssrn'}) then	-- limited parameter sets allowed for these templates
		state = whitelist.limited_basic_arguments[name];
		if true == state then return true; end									-- valid actively supported parameter
		if false == state then
			deprecated_parameter (name);										-- parameter is deprecated but still supported
			return true;
		end

		state = whitelist[cite_class .. '_basic_arguments'][name];				-- look in the parameter-list for the template identified by cite_class

		if true == state then return true; end									-- valid actively supported parameter
		if false == state then
			deprecated_parameter (name);										-- parameter is deprecated but still supported
			return true;
		end
																				-- limited enumerated parameters list
		name = name:gsub("%d+", "#" );											-- replace digit(s) with # (last25 becomes last#) (mw.ustring because non-Western 'local' digits)
		state = whitelist.limited_numbered_arguments[name];
		if true == state then return true; end									-- valid actively supported parameter
		if false == state then
			deprecated_parameter (name);										-- parameter is deprecated but still supported
			return true;
		end

		return false;															-- not supported because not found or name is set to nil
	end																			-- end limited parameter-set templates
		
	state = whitelist.basic_arguments[name];									-- all other templates; all normal parameters allowed
											
	if true == state then return true; end										-- valid actively supported parameter
	if false == state then
		deprecated_parameter (name);											-- parameter is deprecated but still supported
		return true;
	end
																				-- all enumerated parameters allowed
	name = name:gsub("%d+", "#" );												-- replace digit(s) with # (last25 becomes last#) (mw.ustring because non-Western 'local' digits)
	state = whitelist.numbered_arguments[name];

	if true == state then return true; end										-- valid actively supported parameter
	if false == state then
		deprecated_parameter (name);											-- parameter is deprecated but still supported
		return true;
	end
	
	return false;																-- not supported because not found or name is set to nil
end


--[[--------------------------&lt; M I S S I N G _ P I P E _ C H E C K &gt;------------------------------------------

Look at the contents of a parameter. If the content has a string of characters and digits followed by an equal
sign, compare the alphanumeric string to the list of cs1|2 parameters.  If found, then the string is possibly a
parameter that is missing its pipe:
	{{cite ... |title=Title access-date=2016-03-17}}

cs1|2 shares some parameter names with xml/html atributes: class=, title=, etc.  To prevent false positives xml/html
tags are removed before the search.

If a missing pipe is detected, this function adds the missing pipe maintenance category.

]]

local function missing_pipe_check (parameter, value)
	local capture;
	value = value:gsub ('%b&lt;&gt;', '');											-- remove xml/html tags because attributes: class=, title=, etc 

	capture = value:match ('%s+(%a[%w%-]+)%s*=') or value:match ('^(%a[%w%-]+)%s*=');	-- find and categorize parameters with possible missing pipes
	if capture and validate (capture) then								-- if the capture is a valid parameter name
		table.insert( z.message_tail, {set_error ('missing_pipe',parameter)});
	end
end


--[[--------------------------&lt; H A S _ E X T R A N E O U S _ P U N C T &gt;--------------------------------------

look for extraneous terminal punctuation in most parameter values; parameters listed in skip table are not checked

]]

local function has_extraneous_punc (param, value)
	if cfg.punct_skip[param] then
		return;																	-- parameter name found in the skip table so done
	end
	
	if value:match ('[,;:]$') then
		add_maint_cat ('extra_punct');											-- has extraneous punctuation; add maint cat
	end
end


--[[--------------------------&lt; C I T A T I O N &gt;--------------------------------------------------------------

This is used by templates such as {{cite book}} to create the actual citation text.

]]

local function citation(frame)
	Frame = frame;																-- save a copy incase we need to display an error message in preview mode
	local pframe = frame:getParent()
	local validation, utilities, identifiers, metadata, styles;
	
	if nil ~= string.find (frame:getTitle(), 'sandbox', 1, true) then			-- did the {{#invoke:}} use sandbox version?
		cfg = mw.loadData ('Module:Citation/CS1/Configuration/sandbox');		-- load sandbox versions of support modules
		whitelist = mw.loadData ('Module:Citation/CS1/Whitelist/sandbox');
		utilities = require ('Module:Citation/CS1/Utilities/sandbox');
		validation = require ('Module:Citation/CS1/Date_validation/sandbox');
		identifiers = require ('Module:Citation/CS1/Identifiers/sandbox');
		metadata = require ('Module:Citation/CS1/COinS/sandbox');
		styles = 'Module:Citation/CS1/sandbox/styles.css';
		
	else																		-- otherwise
		cfg = mw.loadData ('Module:Citation/CS1/Configuration');				-- load live versions of support modules
		whitelist = mw.loadData ('Module:Citation/CS1/Whitelist');
		utilities = require ('Module:Citation/CS1/Utilities');
		validation = require ('Module:Citation/CS1/Date_validation');
		identifiers = require ('Module:Citation/CS1/Identifiers');
		metadata = require ('Module:Citation/CS1/COinS');
		styles = 'Module:Citation/CS1/styles.css';

	end

	utilities.set_selected_modules (cfg);										-- so that functions in Utilities can see the cfg tables
	identifiers.set_selected_modules (cfg, utilities);							-- so that functions in Identifiers can see the selected cfg tables and selected Utilities module
	validation.set_selected_modules (cfg, utilities);							-- so that functions in Date validataion can see selected cfg tables and the selected Utilities module
	metadata.set_selected_modules (cfg, utilities);								-- so that functions in COinS can see the selected cfg tables and selected Utilities module

	dates = validation.dates;													-- imported functions from Module:Citation/CS1/Date validation
	year_date_check = validation.year_date_check;
	reformat_dates = validation.reformat_dates;
	date_hyphen_to_dash = validation.date_hyphen_to_dash;
	date_name_xlate = validation.date_name_xlate;

	is_set = utilities.is_set;													-- imported functions from Module:Citation/CS1/Utilities
	in_array = utilities.in_array;
	substitute = utilities.substitute;
	error_comment = utilities.error_comment;
	set_error = utilities.set_error;
	select_one = utilities.select_one;
	add_maint_cat = utilities.add_maint_cat;
	wrap_style = utilities.wrap_style;
	safe_for_italics = utilities.safe_for_italics;
	is_wikilink = utilities.is_wikilink;
	make_wikilink = utilities.make_wikilink;
	strip_apostrophe_markup = utilities.strip_apostrophe_markup;

	z = utilities.z;															-- table of error and category tables in Module:Citation/CS1/Utilities

	extract_ids = identifiers.extract_ids;										-- imported functions from Module:Citation/CS1/Identifiers
	build_id_list = identifiers.build_id_list;
	is_embargoed = identifiers.is_embargoed;
	extract_id_access_levels = identifiers.extract_id_access_levels;
	
	make_coins_title = metadata.make_coins_title;								-- imported functions from Module:Citation/CS1/COinS
	get_coins_pages = metadata.get_coins_pages;
	COinS = metadata.COinS;

	local args = {};															-- table where we store all of the template's arguments
	local suggestions = {};														-- table where we store suggestions if we need to loadData them
	local error_text, error_state;

	local config = {};															-- table to store parameters from the module {{#invoke:}}
	for k, v in pairs( frame.args ) do
		config[k] = v;
--		args[k] = v;															-- debug tool that allows us to render a citation from module {{#invoke:}}
	end	

	local capture;																-- the single supported capture when matching unknown parameters using patterns
	for k, v in pairs( pframe.args ) do
		if v ~= '' then
			if ('string' == type (k)) then
				k = mw.ustring.gsub (k, '%d', cfg.date_names.local_digits);		-- for enumerated parameters, translate 'local' digits to Western 0-9
			end
			if not validate( k, config.CitationClass ) then			
				error_text = "";
				if type( k ) ~= 'string' then
					-- Exclude empty numbered parameters
					if v:match("%S+") ~= nil then
						error_text, error_state = set_error( 'text_ignored', {v}, true );
					end
				elseif validate( k:lower(), config.CitationClass ) then 
					error_text, error_state = set_error( 'parameter_ignored_suggest', {k, k:lower()}, true );	-- suggest the lowercase version of the parameter
				else
					if nil == suggestions.suggestions then						-- if this table is nil then we need to load it
						if nil ~= string.find (frame:getTitle(), 'sandbox', 1, true) then			-- did the {{#invoke:}} use sandbox version?
							suggestions = mw.loadData( 'Module:Citation/CS1/Suggestions/sandbox' );	-- use the sandbox version
						else
							suggestions = mw.loadData( 'Module:Citation/CS1/Suggestions' );			-- use the live version
						end
					end
					for pattern, param in pairs (suggestions.patterns) do		-- loop through the patterns to see if we can suggest a proper parameter
						capture = k:match (pattern);							-- the whole match if no caputre in pattern else the capture if a match
						if capture then											-- if the pattern matches 
							param = substitute (param, capture);				-- add the capture to the suggested parameter (typically the enumerator)
							if validate (param, config.CitationClass) then		-- validate the suggestion to make sure that the suggestion is supported by this template (necessary for limited parameter lists)
								error_text, error_state = set_error ('parameter_ignored_suggest', {k, param}, true);	-- set the suggestion error message
							else
								error_text, error_state = set_error( 'parameter_ignored', {param}, true );	-- suggested param not supported by this template
							end
						end
					end
					if not is_set (error_text) then								-- couldn't match with a pattern, is there an expicit suggestion?
						if suggestions.suggestions[ k:lower() ] ~= nil then
							error_text, error_state = set_error( 'parameter_ignored_suggest', {k, suggestions.suggestions[ k:lower() ]}, true );
						else
							error_text, error_state = set_error( 'parameter_ignored', {k}, true );
							v = '';												-- unset value assigned to unrecognized parameters (this for the limited parameter lists)
						end
					end
				end				  
				if error_text ~= '' then
					table.insert( z.message_tail, {error_text, error_state} );
				end				
			end
			missing_pipe_check (k, v);												-- do we think that there is a parameter that is missing a pipe?
																				-- TODO: is this the best place for this translation?
			args[k] = v;
		elseif args[k] ~= nil or (k == 'postscript') then						-- here when v is empty string
			args[k] = v;														-- why do we do this?  we don't support 'empty' parameters
		end		
	end	

	for k, v in pairs( args ) do
		if 'string' == type (k) then											-- don't evaluate positional parameters
			has_invisible_chars (k, v);
			has_extraneous_punc (k, v);											-- look for extraneous terminal punctuation in parameter values
		end
	end
	return table.concat ({citation0( config, args), frame:extensionTag ('templatestyles', '', {src=styles})});
end

--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {citation = citation};</text>
      <sha1>mg282chfyjopoijk562t2mglqv0tj9o</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/COinS</title>
    <ns>828</ns>
    <id>48828620</id>
    <revision>
      <id>913814839</id>
      <parentid>893307448</parentid>
      <timestamp>2019-09-03T11:05:48Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>sync from sandbox;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="15310">
--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local is_set, in_array, remove_wiki_link, strip_apostrophe_markup;				-- functions in Module:Citation/CS1/Utilities

local cfg;																		-- table of configuration tables that are defined in Module:Citation/CS1/Configuration


--[[--------------------------&lt; M A K E _ C O I N S _ T I T L E &gt;----------------------------------------------

Makes a title for COinS from Title and / or ScriptTitle (or any other name-script pairs)

Apostrophe markup (bold, italics) is stripped from each value so that the COinS metadata isn't corrupted with strings
of %27%27...

]]

local function make_coins_title (title, script)
	if is_set (title) then
		title = strip_apostrophe_markup (title);								-- strip any apostrophe markup
	else
		title='';																-- if not set, make sure title is an empty string
	end
	if is_set (script) then
		script = script:gsub ('^%l%l%s*:%s*', '');								-- remove language prefix if present (script value may now be empty string)
		script = strip_apostrophe_markup (script);								-- strip any apostrophe markup
	else
		script='';																-- if not set, make sure script is an empty string
	end
	if is_set (title) and is_set (script) then
		script = ' ' .. script;													-- add a space before we concatenate
	end
	return title .. script;														-- return the concatenation
end


--[[--------------------------&lt; E S C A P E _ L U A _ M A G I C _ C H A R S &gt;----------------------------------

Returns a string where all of lua's magic characters have been escaped.  This is important because functions like
string.gsub() treat their pattern and replace strings as patterns, not literal strings.
]]

local function escape_lua_magic_chars (argument)
	argument = argument:gsub("%%", "%%%%");										-- replace % with %%
	argument = argument:gsub("([%^%$%(%)%.%[%]%*%+%-%?])", "%%%1");				-- replace all other lua magic pattern characters
	return argument;
end


--[[--------------------------&lt; G E T _ C O I N S _ P A G E S &gt;------------------------------------------------

Extract page numbers from external wikilinks in any of the |page=, |pages=, or |at= parameters for use in COinS.

]]

local function get_coins_pages (pages)
	local pattern;
	if not is_set (pages) then return pages; end								-- if no page numbers then we're done
	
	while true do
		pattern = pages:match("%[(%w*:?//[^ ]+%s+)[%w%d].*%]");					-- pattern is the opening bracket, the url and following space(s): "[url "
		if nil == pattern then break; end										-- no more urls
		pattern = escape_lua_magic_chars (pattern);								-- pattern is not a literal string; escape lua's magic pattern characters
		pages = pages:gsub(pattern, "");										-- remove as many instances of pattern as possible
	end
	pages = pages:gsub("[%[%]]", "");											-- remove the brackets
	pages = pages:gsub("–", "-" );							-- replace endashes with hyphens
	pages = pages:gsub("&amp;%w+;", "-" );						-- and replace html entities (&amp;ndash; etc.) with hyphens; do we need to replace numerical entities like &amp;#32; and the like?
	return pages;
end


--[=[-------------------------&lt; C O I N S _ R E P L A C E _ M A T H _ S T R I P M A R K E R &gt;------------------

There are three options for math markup rendering that depend on the editor's math preference settings.  These
settings are at [[Special:Preferences#mw-prefsection-rendering]] and are
	PNG images
	TeX source
	MathML with SVG or PNG fallback

All three are heavy with html and css which doesn't belong in the metadata.

Without this function, the metadata saved in the raw wikitext contained the rendering determined by the settings
of the last editor to save the page.

This function gets the rendered form of an equation according to the editor's preference before the page is saved.  It
then searches the rendering for the text equivalent of the rendered equation and replaces the rendering with that so
that the page is saved without extraneous html/css markup and with a reasonably readable text form of the equation.

When a replacement is made, this function returns true and the value with replacement; otherwise false and the intital
value.  To replace multipe equations it is necesary to call this function from within a loop.

]=]

local function coins_replace_math_stripmarker (value)
	local stripmarker = cfg.stripmarkers['math'];
	local rendering = value:match (stripmarker);								-- is there a math stripmarker

	if not rendering then														-- when value doesn't have a math stripmarker, abandon this test
		return false, value;
	end
	
	rendering = mw.text.unstripNoWiki (rendering);								-- convert stripmarker into rendered value (or nil? ''? when math render error)
	
	if rendering:match ('alt="[^"]+"') then										-- if PNG math option
		rendering = rendering:match ('alt="([^"]+)"');							-- extract just the math text
	elseif rendering:match ('$%s+.+%s+%$') then									-- if TeX math option; $ is legit character that is escapes as \$
		rendering = rendering:match ('$%s+(.+)%s+%$')							-- extract just the math text
	elseif rendering:match ('&lt;annotation[^&gt;]+&gt;.+&lt;/annotation&gt;') then			-- if MathML math option
		rendering = rendering:match ('&lt;annotation[^&gt;]+&gt;(.+)&lt;/annotation&gt;')		-- extract just the math text
	else
		return false, value;													-- had math stripmarker but not one of the three defined forms
	end
	
	return true, value:gsub (stripmarker, rendering, 1);
end


--[[--------------------------&lt; C O I N S _ C L E A N U P &gt;----------------------------------------------------

Cleanup parameter values for the metadata by removing or replacing invisible characters and certain html entities.

2015-12-10: there is a bug in mw.text.unstripNoWiki ().  It replaces math stripmarkers with the appropriate content
when it shouldn't.  See https://phabricator.wikimedia.org/T121085 and Wikipedia_talk:Lua#stripmarkers_and_mw.text.unstripNoWiki.28.29

TODO: move the replacement patterns and replacement values into a table in /Configuration similar to the invisible
characters table?

]]

local function coins_cleanup (value)
	local replaced = true;														-- default state to get the do loop running

	while replaced do															-- loop until all math stripmarkers replaced
		replaced, value = coins_replace_math_stripmarker (value);				-- replace math stripmarker with text representation of the equation
	end

	value = value:gsub (cfg.stripmarkers['math'], "MATH RENDER ERROR");						-- one or more couldn't be replaced; insert vague error message
	
	value = mw.text.unstripNoWiki (value);										-- replace nowiki stripmarkers with their content
	value = value:gsub ('&lt;span class="nowrap" style="padding%-left:0%.1em;"&gt;&amp;#39;(s?)&lt;/span&gt;', "'%1");	-- replace {{'}} or {{'s}} with simple apostrophe or apostrophe-s
	value = value:gsub ('&amp;nbsp;', ' ');											-- replace &amp;nbsp; entity with plain space
	value = value:gsub ('\226\128\138', ' ');									-- replace hair space with plain space
	if not mw.ustring.find (value, cfg.indic_script) then						-- don't remove zero width joiner characters from indic script
		value = value:gsub ('&amp;zwj;', '');											-- remove &amp;zwj; entities
		value = mw.ustring.gsub (value, '[\226\128\141\226\128\139\194\173]', '');	-- remove zero-width joiner, zero-width space, soft hyphen
	end
	value = value:gsub ('[\009\010\013]', ' ');									-- replace horizontal tab, line feed, carriage return with plain space
	return value;
end


--[[--------------------------&lt; C O I N S &gt;--------------------------------------------------------------------

COinS metadata (see &lt;http://ocoins.info/&gt;) allows automated tools to parse the citation information.

]]

local function COinS(data, class)
	if 'table' ~= type(data) or nil == next(data) then
		return '';
	end

	for k, v in pairs (data) do													-- spin through all of the metadata parameter values
		if 'ID_list' ~= k and 'Authors' ~= k then								-- except the ID_list and Author tables (author nowiki stripmarker done when Author table processed)
			data[k] = coins_cleanup (v);
		end
	end

	local ctx_ver = "Z39.88-2004";
	
	-- treat table strictly as an array with only set values.
	local OCinSoutput = setmetatable( {}, {
		__newindex = function(self, key, value)
			if is_set(value) then
				rawset( self, #self+1, table.concat{ key, '=', mw.uri.encode( remove_wiki_link( value ) ) } );
			end
		end
	});
	
	if in_array (class, {'arxiv', 'biorxiv', 'citeseerx', 'ssrn', 'journal', 'news', 'magazine'}) or (in_array (class, {'conference', 'interview', 'map', 'press release', 'web'}) and is_set(data.Periodical)) or 
		('citation' == class and is_set(data.Periodical) and not is_set (data.Encyclopedia)) then
			OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:journal";			-- journal metadata identifier
			if in_array (class, {'arxiv', 'biorxiv', 'citeseerx', 'ssrn'}) then	-- set genre according to the type of citation template we are rendering
				OCinSoutput["rft.genre"] = "preprint";							-- cite arxiv, cite biorxiv, cite citeseerx, cite ssrn
			elseif 'conference' == class then
				OCinSoutput["rft.genre"] = "conference";						-- cite conference (when Periodical set)
			elseif 'web' == class then
				OCinSoutput["rft.genre"] = "unknown";							-- cite web (when Periodical set)
			else
				OCinSoutput["rft.genre"] = "article";							-- journal and other 'periodical' articles
			end
			OCinSoutput["rft.jtitle"] = data.Periodical;						-- journal only
			OCinSoutput["rft.atitle"] = data.Title;								-- 'periodical' article titles

																				-- these used only for periodicals
			OCinSoutput["rft.ssn"] = data.Season;								-- keywords: winter, spring, summer, fall
			OCinSoutput["rft.chron"] = data.Chron;								-- free-form date components
			OCinSoutput["rft.volume"] = data.Volume;							-- does not apply to books
			OCinSoutput["rft.issue"] = data.Issue;
			OCinSoutput["rft.pages"] = data.Pages;								-- also used in book metadata

	elseif 'thesis' ~= class then												-- all others except cite thesis are treated as 'book' metadata; genre distinguishes
		OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:book";					-- book metadata identifier
		if 'report' == class or 'techreport' == class then						-- cite report and cite techreport
			OCinSoutput["rft.genre"] = "report";
		elseif 'conference' == class then										-- cite conference when Periodical not set
			OCinSoutput["rft.genre"] = "conference";
			OCinSoutput["rft.atitle"] = data.Chapter;							-- conference paper as chapter in proceedings (book)
		elseif in_array (class, {'book', 'citation', 'encyclopaedia', 'interview', 'map'}) then
			if is_set (data.Chapter) then
				OCinSoutput["rft.genre"] = "bookitem";
				OCinSoutput["rft.atitle"] = data.Chapter;						-- book chapter, encyclopedia article, interview in a book, or map title
			else
				if 'map' == class or 'interview' == class then
					OCinSoutput["rft.genre"] = 'unknown';						-- standalone map or interview
				else
					OCinSoutput["rft.genre"] = 'book';							-- book and encyclopedia
				end
			end
		else	--{'audio-visual', 'AV-media-notes', 'DVD-notes', 'episode', 'interview', 'mailinglist', 'map', 'newsgroup', 'podcast', 'press release', 'serial', 'sign', 'speech', 'web'}
			OCinSoutput["rft.genre"] = "unknown";
		end
		OCinSoutput["rft.btitle"] = data.Title;									-- book only
		OCinSoutput["rft.place"] = data.PublicationPlace;						-- book only
		OCinSoutput["rft.series"] = data.Series;								-- book only
		OCinSoutput["rft.pages"] = data.Pages;									-- book, journal
		OCinSoutput["rft.edition"] = data.Edition;								-- book only
		OCinSoutput["rft.pub"] = data.PublisherName;							-- book and dissertation
		
	else																		-- cite thesis
		OCinSoutput.rft_val_fmt = "info:ofi/fmt:kev:mtx:dissertation";			-- dissertation metadata identifier
		OCinSoutput["rft.title"] = data.Title;									-- dissertation (also patent but that is not yet supported)
		OCinSoutput["rft.degree"] = data.Degree;								-- dissertation only
		OCinSoutput['rft.inst'] = data.PublisherName;							-- book and dissertation
	end
																				-- and now common parameters (as much as possible)
	OCinSoutput["rft.date"] = data.Date;										-- book, journal, dissertation
	
	for k, v in pairs( data.ID_list ) do										-- what to do about these? For now assume that they are common to all?
		if k == 'ISBN' then v = v:gsub( "[^-0-9X]", "" ); end
		local id = cfg.id_handlers[k].COinS;
		if string.sub( id or "", 1, 4 ) == 'info' then							-- for ids that are in the info:registry
			OCinSoutput["rft_id"] = table.concat{ id, "/", v };
		elseif string.sub (id or "", 1, 3 ) == 'rft' then						-- for isbn, issn, eissn, etc that have defined COinS keywords
			OCinSoutput[ id ] = v;
		elseif id then															-- when cfg.id_handlers[k].COinS is not nil
			OCinSoutput["rft_id"] = table.concat{ cfg.id_handlers[k].prefix, v };	-- others; provide a url
		end
	end

	local last, first;
	for k, v in ipairs( data.Authors ) do
		last, first = coins_cleanup (v.last), coins_cleanup (v.first or '');	-- replace any nowiki strip markers, non-printing or invisible characers
		if k == 1 then															-- for the first author name only
			if is_set(last)  and is_set(first) then								-- set these COinS values if |first= and |last= specify the first author name
				OCinSoutput["rft.aulast"] = last;								-- book, journal, dissertation
				OCinSoutput["rft.aufirst"] = first;								-- book, journal, dissertation
			elseif is_set(last) then 
				OCinSoutput["rft.au"] = last;									-- book, journal, dissertation -- otherwise use this form for the first name
			end
		else																	-- for all other authors
			if is_set(last) and is_set(first) then
				OCinSoutput["rft.au"] = table.concat{ last, ", ", first };		-- book, journal, dissertation
			elseif is_set(last) then
				OCinSoutput["rft.au"] = last;									-- book, journal, dissertation
			end
		end
	end

	OCinSoutput.rft_id = data.URL;
	OCinSoutput.rfr_id = table.concat{ "info:sid/", mw.site.server:match( "[^/]*$" ), ":", data.RawPage };
	OCinSoutput = setmetatable( OCinSoutput, nil );
	
	-- sort with version string always first, and combine.
	--table.sort( OCinSoutput );
	table.insert( OCinSoutput, 1, "ctx_ver=" .. ctx_ver );  -- such as "Z39.88-2004"
	return table.concat(OCinSoutput, "&amp;");
end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local cfg table and imported functions table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr, utilities_page_ptr)
	cfg = cfg_table_ptr;

	is_set = utilities_page_ptr.is_set;											-- import functions from selected Module:Citation/CS1/Utilities module
	in_array = utilities_page_ptr.in_array;
	remove_wiki_link = utilities_page_ptr.remove_wiki_link;
	strip_apostrophe_markup = utilities_page_ptr.strip_apostrophe_markup;
end


--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {
	make_coins_title = make_coins_title,
	get_coins_pages = get_coins_pages,
	COinS = COinS,
	set_selected_modules = set_selected_modules,
	}</text>
      <sha1>l8s94fpb0lbhviey5aqaamradc5q20u</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Configuration</title>
    <ns>828</ns>
    <id>39043527</id>
    <revision>
      <id>913891474</id>
      <parentid>913814855</parentid>
      <timestamp>2019-09-03T21:24:03Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>hide deprecated parameters error messages and hide missing periodical error messages;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="60280">
--[[--------------------------&lt; U N C A T E G O R I Z E D _ N A M E S P A C E S &gt;------------------------------

List of namespaces that should not be included in citation error categories.  Same as setting notracking = true by default

Note: Namespace names should use underscores instead of spaces.

]]
local uncategorized_namespaces = { 'User', 'Talk', 'User_talk', 'Wikipedia_talk', 'File_talk', 'Template_talk', 'Help_talk', 'Category_talk', 'Portal_talk', 'Book_talk', 'Draft_talk', 'Education_Program_talk', 'Module_talk', 'MediaWiki_talk' };

local uncategorized_subpages = {'/[Ss]andbox', '/[Tt]estcases'};				-- list of Lua patterns found in page names of pages we should not categorize


--[[--------------------------&lt; M E S S A G E S &gt;--------------------------------------------------------------

Translation table

The following contains fixed text that may be output as part of a citation.
This is separated from the main body to aid in future translations of this
module.

]]

local messages = {
	['agency'] = '$1 $2',														-- $1 is sepc, $2 is agency
	['archived-dead'] = 'Archived from $1 on $2',
	['archived-live'] = '$1 from the original on $2',
	['archived-missing'] = 'Archived from the original$1 on $2',
	['archived'] = 'Archived',
	['by'] = 'By',																-- contributions to authored works: introduction, foreword, afterword
	['cartography'] = 'Cartography by $1',
	['editor'] = 'ed.',
	['editors'] = 'eds.',
	['edition'] = '($1 ed.)',
	['episode'] = 'Episode $1',
	['et al'] = 'et al.',
	['in'] = 'In',																-- edited works
	['inactive'] = 'inactive',
	['inset'] = '$1 inset',
	['interview'] = 'Interviewed by $1',										
	['lay summary'] = 'Lay summary',
	['newsgroup'] = '[[Usenet newsgroup|Newsgroup]]:&amp;nbsp;$1',
	['original'] = 'the original',
	['origyear'] = ' [$1]',
	['published'] = ' (published $1)',
	['retrieved'] = 'Retrieved $1',
	['season'] = 'Season $1',
	['section'] = '§ $1',
	['sections'] = '§§ $1',
	['series'] = '$1 $2',														-- $1 is sepc, $2 is series
	['seriesnum'] = 'Series $1',
	['translated'] = 'Translated by $1',
	['type'] = ' ($1)',															-- for titletype
	['written'] = 'Written at $1',

	['vol'] = '$1 Vol.&amp;nbsp;$2',												-- $1 is sepc; bold journal style volume is in presentation{}
	['vol-no'] = '$1 Vol.&amp;nbsp;$2 no.&amp;nbsp;$3',									-- sepc, volume, issue
	['issue'] = '$1 No.&amp;nbsp;$2',												-- $1 is sepc

	['j-vol'] = '$1 $2',														-- sepc, volume; bold journal volume is in presentation{}
	['j-issue'] = ' ($1)',

	['nopp'] = '$1 $2';															-- page(s) without prefix; $1 is sepc

	['p-prefix'] = "$1 p.&amp;nbsp;$2",												-- $1 is sepc
	['pp-prefix'] = "$1 pp.&amp;nbsp;$2",											-- $1 is sepc
	['j-page(s)'] = ': $1',														-- same for page and pages

	['sheet'] = '$1 Sheet&amp;nbsp;$2',												-- $1 is sepc
	['sheets'] = '$1 Sheets&amp;nbsp;$2',											-- $1 is sepc
	['j-sheet'] = ': Sheet&amp;nbsp;$1',
	['j-sheets'] = ': Sheets&amp;nbsp;$1',
	
	['subscription'] = '&lt;span class="cs1-subscription"&gt;(Subscription required (&lt;span title="The site requires a paid subscription to access this page."&gt;help&lt;/span&gt;))&lt;/span&gt;' ..
		'[[Category:Pages containing links to subscription-only content]]',
	
	['registration']='&lt;span class="cs1-registration"&gt;(Registration required (&lt;span title="The site requires registration to access this page."&gt;help&lt;/span&gt;))&lt;/span&gt;' ..
		'[[Category:Pages with login required references or sources]]',
	
	['language'] = '(in $1)',
	['via'] = " &amp;ndash; via $1",
	['event'] = 'Event occurs at',
	['minutes'] = 'minutes in',
	
	['parameter-separator'] = ', ',
	['parameter-final-separator'] = ', and ',
	['parameter-pair-separator'] = ' and ',
	
	-- Determines the location of the help page
	['help page link'] = 'Help:CS1 errors',
	['help page label'] = 'help',
	
	-- Internal errors (should only occur if configuration is bad)
	['undefined_error'] = 'Called with an undefined error condition',
	['unknown_manual_ID'] = 'Unrecognized manual ID mode',
	['unknown_ID_mode'] = 'Unrecognized ID mode',
	['unknown_argument_map'] = 'Argument map not defined for this variable',
	['bare_url_no_origin'] = 'Bare url found but origin indicator is nil or empty',
	}


--[=[-------------------------&lt; E T _ A L _ P A T T E R N S &gt;--------------------------------------------------

This table provides Lua patterns for the phrase "et al" and variants in name text
(author, editor, etc.). The main module uses these to identify and emit the 'etal' message.

TODO: detect wikilinked et al.:  [[et al]].

]=]

local et_al_patterns = {
	"[;,]? *[\"']*%f[%a][Ee][Tt]%.? *[Aa][Ll][%.\"']*$",						-- variations on the 'et al' theme
	"[;,]? *[\"']*%f[%a][Ee][Tt]%.? *[Aa][Ll][Ii][Aa][%.\"']*$",				-- variations on the 'et alia' theme
	"[;,]? *%f[%a]and [Oo]thers",												-- and alternate to et al.
	}


--[[--------------------------&lt; E D I T O R _ M A R K U P _ P A T T E R N S &gt;----------------------------------

This table provides Lua patterns for the phrase "ed" and variants in name text
(author, editor, etc.). The main module uses these to identify and emit the
'extra_text_names' message. (It is not the only series of patterns for this message.)

]]
local editor_markup_patterns = {												-- these patterns match annotations at end of name
	'%f[%(%[][%(%[]%s*[Ee][Dd][Ss]?%.?%s*[%)%]]?$',								-- (ed) or (eds): leading '(', case insensitive 'ed', optional 's', '.' and/or ')'
	'[,%.%s]%f[e]eds?%.?$',														-- ed or eds: without '('or ')'; case sensitive (ED could be initials Ed could be name)
	'%f[%(%[][%(%[]%s*[Ee][Dd][Ii][Tt][Oo][Rr][Ss]?%.?%s*[%)%]]?$',				-- (editor) or (editors): leading '(', case insensitive, optional '.' and/or ')'
	'[,%.%s]%f[Ee][Ee][Dd][Ii][Tt][Oo][Rr][Ss]?%.?$',							-- editor or editors: without '('or ')'; case insensitive
		
																				-- these patterns match annotations at beginning of name
	'^eds?[%.,;]',																-- ed. or eds.: lower case only, optional 's', requires '.'
	'^[%(%[]%s*[Ee][Dd][Ss]?%.?%s*[%)%]]',										-- (ed) or (eds): also sqare brackets, case insensitive, optional 's', '.'
	'^[%(%[]?%s*[Ee][Dd][Ii][Tt][Oo][Rr][Ss]?%A',								-- (editor or (editors: also sq brackets, case insensitive, optional brackets, 's'
	'^[%(%[]?%s*[Ee][Dd][Ii][Tt][Ee][Dd]%A',									-- (edited: also sq brackets, case insensitive, optional brackets
	}


--[[--------------------------&lt; P R E S E N T A T I O N &gt;------------------------------------------------------

Fixed presentation markup.  Originally part of citation_config.messages it has been moved into its own, more semantically
correct place.

]]

local presentation = 
	{
	-- Error output
	-- .error class is specified at https://git.wikimedia.org/blob/mediawiki%2Fcore.git/9553bd02a5595da05c184f7521721fb1b79b3935/skins%2Fcommon%2Fshared.css#L538
	-- .citation-comment class is specified at Help:CS1_errors#Controlling_error_message_display
	['hidden-error'] = '&lt;span class="cs1-hidden-error error citation-comment"&gt;$1&lt;/span&gt;',
	['visible-error'] = '&lt;span class="cs1-visible-error error citation-comment"&gt;$1&lt;/span&gt;',
	['hidden-maint'] = '&lt;span class="cs1-maint citation-comment"&gt;$1&lt;/span&gt;',
	
	['accessdate'] = '&lt;span class="reference-accessdate"&gt;$1$2&lt;/span&gt;',			-- to allow editors to hide accessdate using personal css

	['bdi'] = '&lt;bdi$1&gt;$2&lt;/bdi&gt;',												-- bidirectional isolation used with |script-title= and the like

	['cite'] = '&lt;cite class="$1"&gt;$2&lt;/cite&gt;';									-- |ref= not set so no id="..." attribute
	['cite-id'] = '&lt;cite id="$1" class="$2"&gt;$3&lt;/cite&gt;';							-- for use when |ref= is set

	['format'] = ' &lt;span class="cs1-format"&gt;($1)&lt;/span&gt;',						-- for |format=, |chapter-format=, etc
	
																				-- various access levels, for |access=, |doi-access=, |arxiv=, ...
																				-- narrow no-break space &amp;#8239; may work better than nowrap css. Or not? browser support?

	['ext-link-access-signal'] = '&lt;span class="$1" title="$2"&gt;$3&lt;/span&gt;',		-- external link with appropriate lock icon
		['free'] = {class='cs1-lock-free', title='Freely accessible'},			-- classes defined in Module:Citation/CS1/styles.css
		['registration'] = {class='cs1-lock-registration', title='Free registration required'},
		['limited'] = {class='cs1-lock-limited', title='Free access subject to limited trial, subscription normally required'},
		['subscription'] = {class='cs1-lock-subscription', title='Paid subscription required'},

	['interwiki-icon'] = '&lt;span class="$1" title="$2"&gt;$3&lt;/span&gt;',
		['class-wikisource'] = 'cs1-ws-icon',

	['italic-title'] = "''$1''",

	['kern-left'] = '&lt;span class="cs1-kern-left"&gt;$1&lt;/span&gt;$2',					-- spacing to use when title contains leading single or double quote mark
	['kern-right'] = '$1&lt;span class="cs1-kern-right"&gt;$2&lt;/span&gt;',				-- spacing to use when title contains trailing single or double quote mark

																				-- these for simple wikilinked titles [["text]], [[text"]] and [["text"]]
																				-- span wraps entire wikilink
	['kern-wl-left'] = '&lt;span class="cs1-kern-wl-left"&gt;$1&lt;/span&gt;',				-- when title contains leading single or double quote mark
	['kern-wl-right'] = '&lt;span class="cs1-kern-wl-left"&gt;$1&lt;/span&gt;',				-- when title contains trailing single or double quote mark
	['kern-wl-both'] = '&lt;span class="cs1-kern-wl-left cs1-kern-wl-right"&gt;$1&lt;/span&gt;',	-- when title contains leading and trailing single or double quote marks

	['nowrap1'] = '&lt;span class="nowrap"&gt;$1&lt;/span&gt;',								-- for nowrapping an item: &lt;span ...&gt;yyyy-mm-dd&lt;/span&gt;
	['nowrap2'] = '&lt;span class="nowrap"&gt;$1&lt;/span&gt; $2',							-- for nowrapping portions of an item: &lt;span ...&gt;dd mmmm&lt;/span&gt; yyyy (note white space)

	['ocins'] = '&lt;span title="$1" class="Z3988"&gt;&lt;/span&gt;',
	
	['parameter'] = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
 
	['ps_cs1'] = '.';															-- cs1 style postscript (terminal) character
	['ps_cs2'] = '';															-- cs2 style postscript (terminal) character (empty string)

	['quoted-text'] = '&lt;q&gt;$1&lt;/q&gt;',												-- for wrapping |quote= content
	['quoted-title'] = '"$1"',

	['sep_cs1'] = '.',															-- cs1 element separator
	['sep_cs2'] = ',',															-- cs2 separator
	['sep_nl'] = ';',															-- cs1|2 style name-list separator between authors is a semicolon
	['sep_name'] = ', ',														-- cs1|2 style last/first separator is &lt;comma&gt;&lt;space&gt;
	['sep_nl_vanc'] = ',',														-- Vancouver style name-list separator between authors is a comma
	['sep_name_vanc'] = ' ',													-- Vancouver style last/first separator is a space

	['trans-italic-title'] = "&amp;#91;''$1''&amp;#93;",
	['trans-quoted-title'] = "&amp;#91;$1&amp;#93;",
	['vol-bold'] = '$1 &lt;b&gt;$2&lt;/b&gt;',												-- sepc, volume; for bold journal cites; for other cites ['vol'] in messages{}
	}

	
--[[--------------------------&lt; A L I A S E S &gt;----------------------------------------------------------------

Aliases table for commonly passed parameters

]]

local aliases = {
	['AccessDate'] = {'access-date', 'accessdate'},
	['Agency'] = 'agency',
	['AirDate'] = {'air-date', 'airdate'},
	['ArchiveDate'] = {'archive-date', 'archivedate'},
	['ArchiveFormat'] = 'archive-format',
	['ArchiveURL'] = {'archive-url', 'archiveurl'},
	['ASINTLD'] = {'ASIN-TLD', 'asin-tld'},
	['At'] = 'at',
	['Authors'] = {'authors', 'people', 'credits'},
	['BookTitle'] = {'book-title', 'booktitle'},
	['Cartography'] = 'cartography',
	['Chapter'] = {'chapter', 'contribution', 'entry', 'article', 'section'},
	['ChapterFormat'] = {'chapter-format', 'contribution-format', 'entry-format', 'article-format', 'section-format'};
	['ChapterURL'] = {'chapter-url', 'chapterurl', 'contribution-url', 'contributionurl', 'entry-url', 'article-url', 'section-url', 'sectionurl'},
	['ChapterUrlAccess'] = {'chapter-url-access', 'contribution-url-access', 'entry-url-access', 'article-url-access', 'section-url-access'},
	['Class'] = 'class',														-- cite arxiv and arxiv identifiers
	['Collaboration'] = 'collaboration',
	['Conference'] = {'conference', 'event'},
	['ConferenceFormat'] = {'conference-format', 'event-format'},
	['ConferenceURL'] = {'conference-url', 'conferenceurl', 'event-url', 'eventurl'},
	['Contribution'] = 'contribution',											-- introduction, foreword, afterword, etc; required when |contributor= set
	['Date'] = 'date',
	['Degree'] = 'degree',
	['DF'] = 'df',
	['DisplayAuthors'] = {'display-authors', 'displayauthors'},
	['DisplayContributors'] = 'display-contributors',
	['DisplayEditors'] = {'display-editors', 'displayeditors'},
	['DisplayInterviewers'] = 'display-interviewers',
	['DisplayTranslators'] = 'display-translators',
	['Docket'] = 'docket',
	['DoiBroken'] = {'doi-broken', 'doi-broken-date', 'doi-inactive-date'},
	['Edition'] = 'edition',
	['Editors'] = 'editors',
	['Embargo'] = 'embargo',
	['Encyclopedia'] = {'encyclopedia', 'encyclopaedia'},						-- this one only used by citation
	['Episode'] = 'episode',													-- cite serial only TODO: make available to cite episode?
	['Format'] = 'format',
	['ID'] = {'id', 'ID'},
	['IgnoreISBN'] = {'ignore-isbn-error', 'ignoreisbnerror'},
	['Inset'] = 'inset',
	['Issue'] = {'issue', 'number'},
	['Language'] = {'language', 'lang'},
	['LastAuthorAmp'] = {'last-author-amp', 'lastauthoramp'},
	['LayDate'] = {'lay-date', 'laydate'},
	['LayFormat'] = 'lay-format',
	['LaySource'] = {'lay-source', 'laysource'},
	['LayURL'] = {'lay-url', 'lay-summary', 'layurl', 'laysummary'},
	['MailingList'] = {'mailinglist', 'mailing-list'},							-- cite mailing list only
	['Map'] = 'map',															-- cite map only
	['MapFormat'] = 'map-format',												-- cite map only
	['MapURL'] = {'mapurl', 'map-url'},											-- cite map only
	['MapUrlAccess'] = 'map-url-access',										-- cite map only
	['MessageID'] = 'message-id',
	['Minutes'] = 'minutes',
	['Mode'] = 'mode',
	['NameListFormat'] = 'name-list-format',
	['Network'] = 'network',
	['NoPP'] = {'no-pp', 'nopp'},
	['NoTracking'] = {'template-doc-demo', 'no-cat', 'nocat',
		'no-tracking', 'notracking'},
	['Number'] = 'number',														-- this case only for cite techreport
	['OrigYear'] = {'orig-year', 'origyear'},
	['Others'] = 'others',
	['Page'] = {'p', 'page'},
	['Pages'] = {'pp', 'pages'},
	['Periodical'] = {'journal', 'magazine', 'newspaper', 'periodical', 'website', 'work',
		'encyclopedia', 'encyclopaedia', 'dictionary', 'mailinglist'},			-- these masquerade as periodicals but aren't TODO: find a better way to handle these?
	['Place'] = {'place', 'location'},
	['PostScript'] = 'postscript',
	['PublicationDate'] = {'publicationdate', 'publication-date'},
	['PublicationPlace'] = {'publication-place', 'publicationplace'},
	['PublisherName'] = {'publisher', 'institution', 'newsgroup'},
	['Quote'] = {'quote', 'quotation'},
	['Ref'] = 'ref',
	['RegistrationRequired'] = 'registration',
	['Scale'] = 'scale',
	['ScriptChapter'] = {'script-chapter', 'script-contribution', 'script-entry', 'script-article', 'script-section'},
	['ScriptPeriodical'] = {'script-journal', 'script-magazine', 'script-newspaper', 'script-periodical', 'script-website', 'script-work'},
	['ScriptTitle'] = 'script-title',
	['Section'] = 'section',
	['Season'] = 'season',
	['Sections'] = 'sections',													-- cite map only
	['Series'] = {'series', 'version'},
	['SeriesSeparator'] = 'series-separator',
	['SeriesLink'] = {'series-link', 'serieslink'},
	['SeriesNumber'] = {'series-number', 'series-no', 'seriesnumber', 'seriesno'},
	['Sheet'] = 'sheet',														-- cite map only
	['Sheets'] = 'sheets',														-- cite map only
	['Station'] = 'station',
	['SubscriptionRequired'] = 'subscription',
	['Time'] = 'time',
	['TimeCaption'] = {'time-caption', 'timecaption'},
	['Title'] = 'title',
	['TitleLink'] = {'title-link', 'episode-link', 'titlelink', 'episodelink'},
	['TitleNote'] = 'department',
	['TitleType'] = {'type', 'medium'},
	['TransChapter'] = {'trans-article', 'trans-chapter', 'trans-contribution', 'trans-entry', 'trans-section'},
	['Transcript'] = 'transcript',
	['TranscriptFormat'] = 'transcript-format',
	['TranscriptURL'] = {'transcript-url', 'transcripturl'},
	['TransMap'] = 'trans-map',													-- cite map only
	['TransPeriodical'] = {'trans-journal', 'trans-magazine', 'trans-newspaper', 'trans-periodical', 'trans-website', 'trans-work'},
	['TransTitle'] = 'trans-title',
	['URL'] = {'url', 'URL'},
	['UrlAccess'] = {'url-access'},
	['UrlStatus'] = {'url-status', 'dead-url', 'deadurl'},						-- TODO: remove 'dead-url', 'deadurl'
	['Vauthors'] = 'vauthors',
	['Veditors'] = 'veditors',
	['Via'] = 'via',
	['Volume'] = 'volume',
	['Year'] = 'year',

	['AuthorList-First'] = {"first#", "given#", "author-first#", "author#-first"},
	['AuthorList-Last'] = {"last#", "author#", "surname#", "author-last#", "author#-last", "subject#", 'host#'},
	['AuthorList-Link'] = {"authorlink#", "author-link#", "author#-link", "subjectlink#", "author#link", "subject-link#", "subject#-link", "subject#link"},
	['AuthorList-Mask'] = {"author-mask#", "authormask#", "author#mask", "author#-mask"},
	
	['ContributorList-First'] = {'contributor-first#', 'contributor#-first', 'contributor-given#', 'contributor#-given'},
	['ContributorList-Last'] = {'contributor#', 'contributor-last#', 'contributor#-last', 'contributor-surname#', 'contributor#-surname'},
	['ContributorList-Link'] = {'contributor-link#', 'contributor#-link'},
	['ContributorList-Mask'] = {'contributor-mask#', 'contributor#-mask'},

	['EditorList-First'] = {"editor-first#", "editor#-first", "editor-given#", "editor#-given"},
	['EditorList-Last'] = {"editor#", "editor-last#", "editor#-last", "editor-surname#", "editor#-surname"},
	['EditorList-Link'] = {"editor-link#", "editor#-link", "editorlink#", "editor#link"},
	['EditorList-Mask'] = {"editor-mask#", "editor#-mask", "editormask#", "editor#mask"},
	
	['InterviewerList-First'] = {'interviewer-first#', 'interviewer#-first'},
	['InterviewerList-Last'] = {'interviewer#', 'interviewer-last#', 'interviewer#-last'},
	['InterviewerList-Link'] = {'interviewer-link#', 'interviewer#-link'},
	['InterviewerList-Mask'] = {'interviewer-mask#', 'interviewer#-mask'},

	['TranslatorList-First'] = {'translator-first#', 'translator#-first', 'translator-given#', 'translator#-given'},
	['TranslatorList-Last'] = {'translator#', 'translator-last#', 'translator#-last', 'translator-surname#', 'translator#-surname'},
	['TranslatorList-Link'] = {'translator-link#', 'translator#-link'},
	['TranslatorList-Mask'] = {'translator-mask#', 'translator#-mask'},
	}


--[[--------------------------&lt; P U N C T _ S K I P &gt;----------------------------------------------------------

builds a table of parameter names that the extraneous terminal punctuation check should not check.

]]

local punct_skip = {};

local meta_params = {															-- table of aliases[] keys (meta parameters); each key has a table of parameter names for a value
	'BookTitle', 'Chapter', 'ScriptChapter', 'ScriptTitle', 'Title', 'TransChapter', 'Transcript', 'TransMap',	'TransTitle',	-- title-holding parameters
	'PostScript', 'Quote',																				-- miscellaneous
	'ArchiveURL', 'ChapterURL', 'ConferenceURL', 'LayURL', 'MapURL', 'TranscriptURL', 'URL',			-- url-holding parameters
	}

	for _, meta_param in ipairs (meta_params) do								-- for each meta parameter key
		local params = aliases[meta_param];										-- get the parameter or the table of parameters associated with the meta parameter name
		if 'string' == type (params) then
			punct_skip[params] = 1;												-- just a single parameter
		else
			for _, param in ipairs (params) do									-- get the parameter name
				punct_skip[param] = 1;											-- add the parameter name to the skip table
			end
		end
	end


--[[--------------------------&lt; S P E C I A L   C A S E   T R A N S L A T I O N S &gt;----------------------------

This table is primarily here to support internationalization.  Translations in this table are used, for example,
when an error message, category name, etc is extracted from the English alias key.  There may be other cases where
this translation table may be useful.

]]

local special_case_translation = {
	['AuthorList'] = 'authors list',											-- these for multiple names maint categories
	['ContributorList'] = 'contributors list',
	['EditorList'] = 'editors list',
	['InterviewerList'] = 'interviewers list',
	['TranslatorList'] = 'translators list',
	
	['authors'] = 'authors',													-- used in get_display_names()
	['contributors'] = 'contributors',
	['editors'] = 'editors',
	['interviewers'] = 'interviewers',
	['translators'] = 'translators',

	['archived_copy'] = '^archived?%s+copy$',									-- lua pattern to match pseudo title used by Internet Archive bot and others as place holder for unknown |title= value
																				-- used with CS1 maint: Archived copy as title
	}


--[[--------------------------&lt; D E F A U L T S &gt;--------------------------------------------------------------

Default parameter values

TODO: keep this?  Only one default?
]]

local defaults = {
	['UrlStatus'] = 'dead',
}


--[[--------------------------&lt; D A T E _ N A M E S &gt;----------------------------------------------------------

This table of tables lists local language date names and fallback English date names.  The code in Date_validation
will look first in the local table for valid date names.  If date names are not found in the local table, the code
will look in the English table.

Because citations can be copied to the local wiki from en.wiki, the English is required when the date-name translation
function date_name_xlate() is used.

In these tables, season numbering is defined by ISO DIS 8601:2016 part 2 §4.7 'Divisions of a year'.  The standard
defines various divisions using numbers 21-41.  cs1|2 only supports generic seasons.  ISO DIS 8601:2016 does support
the distinction between north and south hemispere seasons but cs1|2 has no way to make that distinction.

The standard does not address 'named' dates so, for the purposes of cs1|2, Christmas is defined here as 99, which
should be out of the ISO DIS 8601:2016 range of uses for a while.

]]

local date_names = {
	['en'] = {			-- English
		['long']	= {['January']=1, ['February']=2, ['March']=3, ['April']=4, ['May']=5, ['June']=6, ['July']=7, ['August']=8, ['September']=9, ['October']=10, ['November']=11, ['December']=12},
		['short']	= {['Jan']=1, ['Feb']=2, ['Mar']=3, ['Apr']=4, ['May']=5, ['Jun']=6, ['Jul']=7, ['Aug']=8, ['Sep']=9, ['Oct']=10, ['Nov']=11, ['Dec']=12},
		['season']	= {['Winter']=24, ['Spring']=21, ['Summer']=22, ['Fall']=23, ['Autumn']=23},
		['named']	= {['Christmas']=99},
		},
	['local'] = {		-- replace these English date names with the local language equivalents
		['long']	= {['January']=1, ['February']=2, ['March']=3, ['April']=4, ['May']=5, ['June']=6, ['July']=7, ['August']=8, ['September']=9, ['October']=10, ['November']=11, ['December']=12},
		['short']	= {['Jan']=1, ['Feb']=2, ['Mar']=3, ['Apr']=4, ['May']=5, ['Jun']=6, ['Jul']=7, ['Aug']=8, ['Sep']=9, ['Oct']=10, ['Nov']=11, ['Dec']=12},
		['season']	= {['Winter']=24, ['Spring']=21, ['Summer']=22, ['Fall']=23, ['Autumn']=23},
		['named']	= {['Christmas']=99},
		},
	['inv_local_l'] = {},														-- used in date reformatting; copy of date_names['local'].long where k/v are inverted: [1]='&lt;local name&gt;' etc
	['inv_local_s'] = {},														-- used in date reformatting; copy of date_names['local'].short where k/v are inverted: [1]='&lt;local name&gt;' etc
	['local_digits'] = {['0'] = '0', ['1'] = '1', ['2'] = '2', ['3'] = '3', ['4'] = '4', ['5'] = '5', ['6'] = '6', ['7'] = '7', ['8'] = '8', ['9'] = '9'},	-- used to convert local language digits to Western 0-9
	['xlate_digits'] = {},
	}

for name, i in pairs (date_names['local'].long) do								-- this table is ['name'] = i
	date_names['inv_local_l'][i] = name;										-- invert to get [i] = 'name' for conversions from ymd
end

for name, i in pairs (date_names['local'].short) do								-- this table is ['name'] = i
	date_names['inv_local_s'][i] = name;										-- invert to get [i] = 'name' for conversions from ymd
end

for ld, ed in pairs (date_names.local_digits) do								-- make a digit translation table for simple date translation from en to local language using local_digits table
	date_names.xlate_digits [ed] = ld;											-- en digit becomes index with local digit as the value
end

local df_template_patterns = {													-- table of redirects to {{Use dmy dates}} and {{Use mdy dates}}
	'{{ *[Uu]se (dmy) dates *[|}]',		-- 915k									-- sorted by approximate transclusion count
	'{{ *[Uu]se *(mdy) *dates *[|}]',	-- 161k
	'{{ *[Uu]se (DMY) dates *[|}]',		-- 2929
	'{{ *[Uu]se *(dmy) *[|}]',			-- 250 + 34
	'{{ *([Dd]my) *[|}]',				-- 272
	'{{ *[Uu]se (MDY) dates *[|}]',		-- 173
	'{{ *[Uu]se *(mdy) *[|}]',			-- 59 + 12
	'{{ *([Mm]dy) *[|}]',				-- 9
	'{{ *[Uu]se (MDY) *[|}]',			-- 3
	'{{ *([Dd]MY) *[|}]',				-- 2
	'{{ *([Mm]DY) *[|}]',				-- 0
--	'{{ *[Uu]se(mdy) *[|}]',
--	'{{ *[Uu]se(mdy)dates *[|}]',
--	'{{ *[Uu]se(dmy) *[|}]',
	}

local function get_date_format ()
	local content = mw.title.getCurrentTitle():getContent() or '';				-- get the content of the article or ''; new pages edited w/ve do not have 'content' until saved; ve does not preview; phab:T221625
	for _, pattern in ipairs (df_template_patterns) do							-- loop through the patterns looking for {{Use dmy dates}} or {{Use mdy dates}} or any of their redirects
		local start, _, match = content:find(pattern);							-- match is the three letters indicating desired date format
		if match then
			content = content:match ('%b{}', start);							-- get the whole template
			if content:match ('| *cs1%-dates *= *[lsy][sy]?') then				-- look for |cs1-dates=publication date length access-/archive-date length
				return match:lower() .. '-' .. content:match ('| *cs1%-dates *= *([lsy][sy]?)');
			else
				return match:lower() .. '-all';									-- no |cs1-dates= k/v pair; return value appropriate for use in |df=
			end
		end
	end
end

local global_df = get_date_format ();


--[[--------------------------&lt; V O L U M E ,  I S S U E ,  P A G E S &gt;----------------------------------------

These tables hold cite class values (from the template invocation) and identify those templates that support
|volume=, |issue=, and |page(s)= parameters.  Cite conference and cite map require further qualification which
is handled in the main module.

]]

local templates_using_volume = {'citation', 'audio-visual', 'book', 'conference', 'encyclopaedia', 'interview', 'journal', 'magazine', 'map', 'news', 'report', 'techreport', 'thesis'}
local templates_using_issue = {'citation', 'conference', 'episode', 'interview', 'journal', 'magazine', 'map', 'news'}
local templates_not_using_page = {'audio-visual', 'episode', 'mailinglist', 'newsgroup', 'podcast', 'serial', 'sign', 'speech'}


--[[--------------------------&lt; K E Y W O R D S &gt;--------------------------------------------------------------

This table holds keywords for those parameters that have defined sets of acceptible keywords.

]]

local keywords = {
	['yes_true_y'] = {'yes', 'true', 'y'},										-- ignore-isbn-error, last-author-amp, no-tracking, nopp, registration, subscription
	['deadurl'] = {'yes', 'true', 'y', 'no', 'unfit', 'usurped', 'bot: unknown'},
	['mode'] = {'cs1', 'cs2'},
	['name-list-format'] = {'vanc'},
	['contribution'] = {'afterword', 'foreword', 'introduction', 'preface'},	-- generic contribution titles that are rendered unquoted in the 'chapter' position
	['date-format'] = {'dmy', 'dmy-all', 'mdy', 'mdy-all', 'ymd', 'ymd-all'},
--	['date-format'] = {'dmy', 'dmy-all', 'mdy', 'mdy-all', 'ymd', 'ymd-all', 'yMd', 'yMd-all'},	-- not supported at en.wiki
	['url-access'] = {'subscription', 'limited', 'registration'},				-- access level of a URL (subscription required, limited access, registration required); free to read by default
	['url-status'] = {'dead', 'live', 'unfit', 'usurped', 'bot: unknown'},		-- replacement for |dead-url=
	['id-access'] = {'free'},													-- access level of an identifier (free to read); not free-to-read  by default
}


--[[--------------------------&lt; S T R I P M A R K E R S &gt;------------------------------------------------------

Common pattern definition location for stripmarkers so that we don't have to go hunting for them if (when)
MediaWiki changes their form.

]]

local stripmarkers = {
	['any'] = '\127[^\127]*UNIQ%-%-(%a+)%-[%a%d]+%-QINU[^\127]*\127',			-- capture returns name of stripmarker
	['math'] = '\127[^\127]*UNIQ%-%-math%-[%a%d]+%-QINU[^\127]*\127'			-- math stripmarkers used in coins_cleanup() and coins_replace_math_stripmarker()
	}


--[[--------------------------&lt; I N V I S I B L E _ C H A R A C T E R S &gt;--------------------------------------

This table holds non-printing or invisible characters indexed either by name or by Unicode group. Values are decimal
representations of UTF-8 codes.  The table is organized as a table of tables because the lua pairs keyword returns
table data in an arbitrary order.  Here, we want to process the table from top to bottom because the entries at
the top of the table are also found in the ranges specified by the entries at the bottom of the table.

Also here is a pattern that recognizes stripmarkers that begin and end with the delete characters.  The nowiki
stripmarker is not an error but some others are because the parameter values that include them become part of the
template's metadata before stripmarker replacement.

]]

local invisible_chars = {
	{'replacement', '\239\191\189'},											-- U+FFFD, EF BF BD
	{'zero width joiner', '\226\128\141'},										-- U+200D, E2 80 8D
	{'zero width space', '\226\128\139'},										-- U+200B, E2 80 8B
	{'hair space', '\226\128\138'},												-- U+200A, E2 80 8A
	{'soft hyphen', '\194\173'},												-- U+00AD, C2 AD
	{'horizontal tab', '\009'},													-- U+0009 (HT), 09
	{'line feed', '\010'},														-- U+000A (LF), 0A
	{'carriage return', '\013'},												-- U+000D (CR), 0D
	{'stripmarker', stripmarkers.any},											-- stripmarker; may or may not be an error; capture returns the stripmaker type
	{'delete', '\127'},															-- U+007F (DEL), 7F; must be done after stripmarker test
	{'C0 control', '[\000-\008\011\012\014-\031]'},								-- U+0000–U+001F (NULL–US), 00–1F (except HT, LF, CR (09, 0A, 0D))
	{'C1 control', '[\194\128-\194\159]'},										-- U+0080–U+009F (XXX–APC), C2 80 – C2 9F
--	{'Specials', '[\239\191\185-\239\191\191]'},								-- U+FFF9-U+FFFF, EF BF B9 – EF BF BF
--	{'Private use area', '[\238\128\128-\239\163\191]'},						-- U+E000–U+F8FF, EE 80 80 – EF A3 BF
--	{'Supplementary Private Use Area-A', '[\243\176\128\128-\243\191\191\189]'},	-- U+F0000–U+FFFFD, F3 B0 80 80 – F3 BF BF BD
--	{'Supplementary Private Use Area-B', '[\244\128\128\128-\244\143\191\189]'},	-- U+100000–U+10FFFD, F4 80 80 80 – F4 8F BF BD
	}

--[[
Indic script makes use of zero width joiner as a character modifier so zwj characters must be left in.  This
pattern covers all of the unicode characters for these languages:
	Devanagari					0900–097F – https://unicode.org/charts/PDF/U0900.pdf
		Devanagari extended		A8E0–A8FF – https://unicode.org/charts/PDF/UA8E0.pdf
	Bengali						0980–09FF – https://unicode.org/charts/PDF/U0980.pdf
	Gurmukhi					0A00–0A7F – https://unicode.org/charts/PDF/U0A00.pdf
	Gujarati					0A80–0AFF – https://unicode.org/charts/PDF/U0A80.pdf
	Oriya						0B00–0B7F – https://unicode.org/charts/PDF/U0B00.pdf
	Tamil						0B80–0BFF – https://unicode.org/charts/PDF/U0B80.pdf
	Telugu						0C00–0C7F – https://unicode.org/charts/PDF/U0C00.pdf
	Kannada						0C80–0CFF – https://unicode.org/charts/PDF/U0C80.pdf
	Malayalam					0D00–0D7F – https://unicode.org/charts/PDF/U0D00.pdf
plus the not-necessarily Indic scripts for Sinhala and Burmese:
	Sinhala						0D80-0DFF - https://unicode.org/charts/PDF/U0D80.pdf
	Myanmar						1000-109F - https://unicode.org/charts/PDF/U1000.pdf
		Myanmar extended A		AA60-AA7F - https://unicode.org/charts/PDF/UAA60.pdf
		Myanmar extended B		A9E0-A9FF - https://unicode.org/charts/PDF/UA9E0.pdf
the pattern is used by has_invisible_chars() and coins_cleanup()
TODO: find a better place for this?
]]

local indic_script = '[\224\164\128-\224\181\191\224\163\160-\224\183\191\225\128\128-\225\130\159\234\167\160-\234\167\191\234\169\160-\234\169\191]';


--[[--------------------------&lt; L A N G U A G E S &gt;------------------------------------------------------------

This table is used to hold ISO 639-1 two-character language codes that apply only to |script-title= and |script-chapter=

]]

local script_lang_codes = {
	'am', 'ar', 'be', 'bg', 'bn', 'bs', 'dv', 'el', 'fa', 'gu',					-- ISO 639-1 codes only for |script-title= and |script-chapter=
	'he', 'hi', 'hy', 'ja', 'ka', 'kk', 'km', 'kn', 'ko', 'ku',
	'mk', 'ml', 'mn', 'mr', 'my', 'ne', 'ps', 'ru', 'sd', 'si',
	'sr', 'ta', 'tg', 'th', 'ug', 'uk', 'ur', 'uz', 'yi', 'zh'
	};


--[[--------------------------&lt; L A N G U A G E   R E M A P P I N G &gt;------------------------------------------

These tables hold language information that is different (correct) from MediaWiki's definitions

]]

local lang_code_remap = {														-- used for |language= and |script-title= / |script-chapter=
	['als'] = 'Tosk Albanian',													-- MediaWiki returns Alemannisch 
	['bh'] = 'Bihari',															-- MediaWiki uses 'bh' as a subdomain name for Bhojpuri wWikipedia: bh.wikipedia.org
	['bn'] = 'Bengali',															-- MediaWiki returns Bangla
	['ca-valencia'] = 'Valencian',												-- IETF variant of Catalan
	['crh'] = 'Crimean Tatar',													-- synonymous with Crimean Turkish (return value from {{#language:crh|en}})
	}

local lang_name_remap = {														-- used for |language=
	['alemannisch'] = {'Swiss German', 'gsw'},									-- not an ISO or IANA language name; MediaWiki uses 'als' as a subdomain name for Alemannic Wikipedia: als.wikipedia.org
	['bangla'] = {'Bengali', 'bn'},												-- MediaWiki returns Bangla (the endonym) but we want Bengali (the exonym); here we remap
	['bengali'] = {'Bengali', 'bn'},											-- MediaWiki doesn't use exonym so here we provide correct language name and 639-1 code
	['bihari'] = {'Bihari', 'bh'},												-- MediaWiki replaces 'Bihari' with 'Bhojpuri' so 'Bihari' cannot be found
	['bhojpuri'] = {'Bhojpuri', 'bho'},											-- MediaWiki uses 'bh' as a subdomain name for Bhojpuri Wikipedia: bh.wikipedia.org
	['crimean tatar'] = {'Crimean Tatar', 'crh'},								-- MediaWiki uses 'crh' as a subdomain name for Crimean Tatar Wikipedia: crh.wikipedia.org
	['tosk albanian'] = {'Tosk Albanian', 'als'},								-- MediaWiki replaces 'Tosk Albanian' with 'Alemannisch' so 'Tosk Albanian' cannot be found
	['valencian'] = {'Valencian', 'ca'},										-- variant of Catalan; categorizes as Catalan
	}


--[[--------------------------&lt; M A I N T E N A N C E _ C A T E G O R I E S &gt;----------------------------------

Here we name maintenance categories to be used in maintenance messages.

]]

local maint_cats = {
	['ASIN'] = 'CS1 maint: ASIN uses ISBN',
	['archived_copy'] = 'CS1 maint: archived copy as title',
	['authors'] = 'CS1 maint: uses authors parameter',
	['bot:_unknown'] = 'CS1 maint: BOT: original-url status unknown',
	['date_format'] = 'CS1 maint: date format',
	['date_year'] = 'CS1 maint: date and year',
	['disp_name'] = 'CS1 maint: display-$1',									-- $1 is authors, contributors, editors, interviewers, translators; gets value from special_case_translation table
	['editors'] = 'CS1 maint: uses editors parameter',
	['embargo'] = 'CS1 maint: PMC embargo expired',
	['extra_punct'] = 'CS1 maint: extra punctuation',
	['extra_text'] = 'CS1 maint: extra text',
	['extra_text_names'] = 'CS1 maint: extra text: $1',							-- $1 is &lt;name&gt;s list; gets value from special_case_translation table
	['ignore_isbn_err'] = 'CS1 maint: ignored ISBN errors',
	['mult_names'] = 'CS1 maint: multiple names: $1',							-- $1 is &lt;name&gt;s list; gets value from special_case_translation table
	['others'] = 'CS1 maint: others',
	['pmc_format'] = 'CS1 maint: PMC format',
	['unfit'] = 'CS1 maint: unfit url',
	['unknown_lang'] = 'CS1 maint: unrecognized language',
	['untitled'] = 'CS1 maint: untitled periodical',
	['zbl'] = 'CS1 maint: ZBL',
	}


--[[--------------------------&lt; P R O P E R T I E S _ C A T E G O R I E S &gt;------------------------------------

Here we name properties categories

]]

local prop_cats = {
	['foreign_lang_source'] = 'CS1 $1-language sources ($2)',					-- |language= categories; $1 is language name, $2 is ISO639-1 code
	['foreign_lang_source_2'] = 'CS1 foreign language sources (ISO 639-2)|$1',	-- |language= category; a cat for ISO639-2 languages; $1 is the ISO 639-2 code used as a sort key
	['script'] = 'CS1 uses foreign language script',							-- when language specified by |script-title=xx: doesn't have its own category
	['script_with_name'] = 'CS1 uses $1-language script ($2)',					-- |script-title=xx: has matching category; $1 is language name, $2 is ISO639-1 code
	['jul_greg_uncertainty'] = 'CS1: Julian–Gregorian uncertainty',				-- probably temporary cat to identify scope of template with dates 1 October 1582 – 1 January 1926
	['long_vol'] = 'CS1: long volume value',									-- probably temporary cat to identify scope of |volume= values longer than 4 charachters
	}


--[[--------------------------&lt; T I T L E _ T Y P E S &gt;--------------------------------------------------------

Here we map a template's CitationClass to TitleType (default values for |type= parameter)

]]

local title_types = {
	['AV-media-notes'] = 'Media notes',
	['interview'] = 'Interview',
	['mailinglist'] = 'Mailing list',
	['map'] = 'Map',
	['podcast'] = 'Podcast',
	['pressrelease'] = 'Press release',
	['report'] = 'Report',
	['techreport'] = 'Technical report',
	['thesis'] = 'Thesis',
	}


--[[--------------------------&lt; E R R O R _ C O N D I T I O N S &gt;----------------------------------------------

Error condition table

The following contains a list of IDs for various error conditions defined in the code.  For each ID, we specify a
text message to display, an error category to include, and whether the error message should be wrapped as a hidden comment.

Anchor changes require identical changes to matching anchor in Help:CS1 errors

]]

local error_conditions = {
	accessdate_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;access-date=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'accessdate_missing_url',
		category = 'Pages using citations with accessdate and no URL',
		hidden = false
 		},
	apostrophe_markup = {
		message = 'Italic or bold markup not allowed in: &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'apostrophe_markup',
		category = 'CS1 errors: markup',
		hidden = false
 		},
	archive_missing_date = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;archive-date=&lt;/code&gt;',
		anchor = 'archive_missing_date',
		category = 'Pages with archiveurl citation errors',
		hidden = false
		},
	archive_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'archive_missing_url',
		category = 'Pages with archiveurl citation errors',
		hidden = false
		},
	archive_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;archive-url=&lt;/code&gt; is malformed: $1',
		anchor = 'archive_url',
		category = 'Pages with archiveurl citation errors',
		hidden = false
		},
	arxiv_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;arxiv=&lt;/code&gt; required',
		anchor = 'arxiv_missing',
		category = 'CS1 errors: arXiv',											-- same as bad arxiv
		hidden = false
		},
	arxiv_params_not_supported = {
		message = 'Unsupported parameter(s) in cite arXiv',
		anchor = 'arxiv_params_not_supported',
		category = 'CS1 errors: arXiv',											-- same as bad arxiv
		hidden = false
		},
	bad_arxiv = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;arxiv=&lt;/code&gt; value',
		anchor = 'bad_arxiv',
		category = 'CS1 errors: arXiv',
		hidden = false
		},
	bad_asin = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;asin=&lt;/code&gt; value',
		anchor = 'bad_asin',
		category ='CS1 errors: ASIN',
		hidden = false
		},
	bad_bibcode = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;bibcode=&lt;/code&gt; $1',
		anchor = 'bad_bibcode',
		category = 'CS1 errors: bibcode',
		hidden = false
		},
	bad_biorxiv = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;biorxiv=&lt;/code&gt; value',
		anchor = 'bad_biorxiv',
		category = 'CS1 errors: bioRxiv',
		hidden = false
		},
	bad_citeseerx = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;citeseerx=&lt;/code&gt; value',
		anchor = 'bad_citeseerx',
		category = 'CS1 errors: citeseerx',
		hidden = false
		},
	bad_date = {
		message = 'Check date values in: &lt;code class="cs1-code"&gt;$1&lt;/code&gt;',
		anchor = 'bad_date',
		category = 'CS1 errors: dates',
		hidden = false
		},
	bad_doi = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;doi=&lt;/code&gt; value',
		anchor = 'bad_doi',
		category = 'CS1 errors: DOI',
		hidden = false
		},
	bad_hdl = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;hdl=&lt;/code&gt; value',
		anchor = 'bad_hdl',
		category = 'CS1 errors: HDL',
		hidden = false
		},
	bad_isbn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;isbn=&lt;/code&gt; value: $1',
		anchor = 'bad_isbn',
		category = 'CS1 errors: ISBN',
		hidden = false
		},
	bad_ismn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;ismn=&lt;/code&gt; value',
		anchor = 'bad_ismn',
		category = 'CS1 errors: ISMN',
		hidden = false
		},
	bad_issn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;$1issn=&lt;/code&gt; value',
		anchor = 'bad_issn',
		category = 'CS1 errors: ISSN',
		hidden = false
		},
	bad_jfm = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;jfm=&lt;/code&gt; value',
		anchor = 'bad_jfm',
		category = 'CS1 errors: JFM',
		hidden = false
		},
	bad_lccn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;lccn=&lt;/code&gt; value',
		anchor = 'bad_lccn',
		category = 'CS1 errors: LCCN',
		hidden = false
		},
	bad_usenet_id = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;message-id=&lt;/code&gt; value',
		anchor = 'bad_message_id',
		category = 'CS1 errors: message-id',
		hidden = false
		},
	bad_mr = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;mr=&lt;/code&gt; value',
		anchor = 'bad_mr',
		category = 'CS1 errors: MR',
		hidden = false
		},
	bad_ol = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;ol=&lt;/code&gt; value',
		anchor = 'bad_ol',
		category = 'CS1 errors: OL',
		hidden = false
		},
	bad_paramlink = {															-- for |title-link=, |author/editor/translator-link=, |series-link=, |episode-link=
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; value',
		anchor = 'bad_paramlink',
		category = 'CS1 errors: parameter link',
		hidden = false
		},
	bad_pmc = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;pmc=&lt;/code&gt; value',
		anchor = 'bad_pmc',
		category = 'CS1 errors: PMC',
		hidden = false
		},
	bad_pmid = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;pmid=&lt;/code&gt; value',
		anchor = 'bad_pmid',
		category = 'CS1 errors: PMID',
		hidden = false
		},
	bad_oclc = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;oclc=&lt;/code&gt; value',
		anchor = 'bad_oclc',
		category = 'CS1 errors: OCLC',
		hidden = false
		},
	bad_ssrn = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;ssrn=&lt;/code&gt; value',
		anchor = 'bad_ssrn',
		category = 'CS1 errors: SSRN',
		hidden = false
		},
	bad_url = {
		message = 'Check $1 value',
		anchor = 'bad_url',
		category = 'Pages with URL errors',
		hidden = false
		},
	bad_zbl = {
		message = 'Check &lt;code class="cs1-code"&gt;&amp;#124;zbl=&lt;/code&gt; value',
		anchor = 'bad_zbl',
		category = 'CS1 errors: ZBL',
		hidden = false
		},
	bare_url_missing_title = {
		message = '$1 missing title',
		anchor = 'bare_url_missing_title',
		category = 'Pages with citations having bare URLs',
		hidden = false
		},
	biorxiv_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;biorxiv=&lt;/code&gt; required',
		anchor = 'biorxiv_missing',
		category = 'CS1 errors: bioRxiv',										-- same as bad bioRxiv
		hidden = false
		},
	chapter_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored',
		anchor = 'chapter_ignored',
		category = 'CS1 errors: chapter ignored',
		hidden = false
		},
	citation_missing_title = {
		message = 'Missing or empty &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'citation_missing_title',
		category = 'Pages with citations lacking titles',
		hidden = false
		},
	citeseerx_missing = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;citeseerx=&lt;/code&gt; required',
		anchor = 'citeseerx_missing',
		category = 'CS1 errors: citeseerx',										-- same as bad citeseerx
		hidden = false
		},
	cite_web_url = {															-- this error applies to cite web and to cite podcast
		message = 'Missing or empty &lt;code class="cs1-code"&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'cite_web_url',
		category = 'Pages using web citations with no URL',
		hidden = false
		},
	class_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;class=&lt;/code&gt; ignored',
		anchor = 'class_ignored',
		category = 'CS1 errors: class',
		hidden = false
		},
	contributor_ignored = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;contributor=&lt;/code&gt; ignored',
		anchor = 'contributor_ignored',
		category = 'CS1 errors: contributor',
		hidden = false
		},
	contributor_missing_required_param = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;contributor=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'contributor_missing_required_param',
		category = 'CS1 errors: contributor',
		hidden = false
		},
	deprecated_params = {
		message = 'Cite uses deprecated parameter &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'deprecated_params',
		category = 'CS1 errors: deprecated parameters',
		hidden = true
		},
	doibroken_missing_doi = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;doi=&lt;/code&gt;',
		anchor = 'doibroken_missing_doi',
		category = 'CS1 errors: DOI',
		hidden = false
		},
	empty_citation = {
		message = 'Empty citation',
		anchor = 'empty_citation',
		category = 'Pages with empty citations',
		hidden = false
		},
	etal = {
		message = 'Explicit use of et al. in: &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'explicit_et_al',
		category = 'CS1 errors: explicit use of et al.',
		hidden = false
		},
	first_missing_last = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; missing &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',	-- $1 is first alias, $2 is matching last alias
		anchor = 'first_missing_last',
		category = 'CS1 errors: missing name',									-- author, contributor, editor, interviewer, translator
		hidden = false
		},
	format_missing_url = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',
		anchor = 'format_missing_url',
		category = 'Pages using citations with format and no URL',
		hidden = false
		},
	invalid_param_val = {
		message = 'Invalid &lt;code class="cs1-code"&gt;&amp;#124;$1=$2&lt;/code&gt;',
		anchor = 'invalid_param_val',
		category = 'CS1 errors: invalid parameter value',
		hidden = false
		},
	invisible_char = {
		message = '$1 in $2 at position $3',
		anchor = 'invisible_char',
		category = 'CS1 errors: invisible characters',
		hidden = false
		},
	missing_name = {
		message = 'Missing &lt;code class="cs1-code"&gt;&amp;#124;$1$2=&lt;/code&gt;',			-- $1 is modified NameList; $2 is enumerator
		anchor = 'missing_name',
		category = 'CS1 errors: missing name',									-- author, contributor, editor, interviewer, translator
		hidden = false
		},
	missing_periodical = {
		message = 'Cite $1 requires &lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt;',	-- $1 is cs1 template name; $2 is canonical periodical parameter name for cite $1
		anchor = 'missing_periodical',
		category = 'CS1 errors: missing periodical',
		hidden = true
		},
	missing_pipe = {
		message = 'Missing pipe in: &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'missing_pipe',
		category = 'CS1 errors: missing pipe',
		hidden = false
		},
	param_access_requires_param = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;$1-access=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'param_access_requires_param',
		category = 'CS1 errors: param-access',
		hidden = false
		},
	param_has_ext_link = {
		message = 'External link in &lt;code class="cs1-code"&gt;$1&lt;/code&gt;',
		anchor = 'param_has_ext_link',
		category = 'CS1 errors: external links',
		hidden = false
		},
	parameter_ignored = {
		message = 'Unknown parameter &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored',
		anchor = 'parameter_ignored',
		category = 'Pages with citations using unsupported parameters',
		hidden = false
		},
	parameter_ignored_suggest = {
		message = 'Unknown parameter &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt; ignored (&lt;code class="cs1-code"&gt;&amp;#124;$2=&lt;/code&gt; suggested)',
		anchor = 'parameter_ignored_suggest',
		category = 'Pages with citations using unsupported parameters',
		hidden = false
		},
	redundant_parameters = {
		message = 'More than one of $1 specified',
		anchor = 'redundant_parameters',
		category = 'Pages with citations having redundant parameters',
		hidden = false
		},
	script_parameter = {
		message = 'Invalid &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;: $2',
		anchor = 'script_parameter',
		category = 'CS1 errors: script parameters',
		hidden = false
		},
	text_ignored = {
		message = 'Text "$1" ignored',
		anchor = 'text_ignored',
		category = 'Pages with citations using unnamed parameters',
		hidden = false
		},
	trans_missing_title = {
		message = '&lt;code class="cs1-code"&gt;&amp;#124;trans-$1=&lt;/code&gt; requires &lt;code class="cs1-code"&gt;&amp;#124;$1=&lt;/code&gt;',
		anchor = 'trans_missing_title',
		category = 'CS1 errors: translated title',
		hidden = false
		},
	vancouver = {
		message = 'Vancouver style error: $1',
		anchor = 'vancouver',
		category = 'CS1 errors: Vancouver style',
		hidden = false
		},
	wikilink_in_url = {
		message = 'URL–wikilink conflict',										-- uses ndash
		anchor = 'wikilink_in_url',
		category = 'CS1 errors: URL–wikilink conflict',							-- uses ndash
		hidden = false
		},
	}


--[[--------------------------&lt; I D _ H A N D L E R S &gt;--------------------------------------------------------

The following contains a list of values for various defined identifiers.  For each identifier we specify a
variety of information necessary to properly render the identifier in the citation.

	parameters: a list of parameter aliases for this identifier
	link: Wikipedia article name
	q: wikidata q number for the identifier
	label: the alternate name to apply to link
	mode: 	'manual' when there is a specific function in the code to handle the identifier;
			'external' for identifiers that link outside of Wikipedia;
	prefix: the first part of a url that will be concatenated with a second part which usually contains the identifier
	encode: true if uri should be percent encoded; otherwise false
	COinS: identifier link or keyword for use in COinS:
		for identifiers registered at info-uri.info use: info:....
		for identifiers that have COinS keywords, use the keyword: rft.isbn, rft.issn, rft.eissn
		for others make a url using the value in prefix, use the keyword: pre (not checked; any text other than 'info' or 'rft' works here)
		set to nil to leave the identifier out of the COinS
	separator: character or text between label and the identifier in the rendered citation
	access: use this parameter to set the access level for all instances of this identifier.
			the value must be a valid access level for an identifier (see ['id-access'] in this file).
	custom_access: to enable custom access level for an identifier, set this parameter
			to the parameter that should control it (normally 'id-access')
]]

local id_handlers = {
	['ARXIV'] = {
		parameters = {'arxiv', 'eprint'},
		link = 'arXiv',
		q = 'Q118398',
		label = 'arXiv',
		mode = 'manual',
		prefix = '//arxiv.org/abs/', 											-- protocol relative tested 2013-09-04
		encode = false,
		COinS = 'info:arxiv',
		separator = ':',
		access = 'free',														-- free to read
		},
	['ASIN'] = {
		parameters = { 'asin', 'ASIN' },
		link = 'Amazon Standard Identification Number',
		q = 'Q1753278',
		label = 'ASIN',
		mode = 'manual',
		prefix = '//www.amazon.',
		COinS = nil,															-- no COinS for this id (needs thinking on implementation because |asin-tld=)
		separator = '&amp;nbsp;',
		encode = false;
		},
	['BIBCODE'] = {
		parameters = {'bibcode'},
		link = 'Bibcode',
		q = 'Q25754',
		label = 'Bibcode',
		mode = 'manual',
		prefix = 'https://ui.adsabs.harvard.edu/abs/',
		encode = false,
		COinS = 'info:bibcode',
		separator = ':',
		custom_access = 'bibcode-access',
		},
	['BIORXIV'] = {
		parameters = {'biorxiv'},
		link = 'bioRxiv',
		q = 'Q19835482',
		label = 'bioRxiv',
		mode = 'manual',
		prefix = '//doi.org/10.1101/',
		COinS = 'pre',															-- use prefix value
		access = 'free',														-- free to read
		encode = true,
		separator = '&amp;nbsp;',
		},
	['CITESEERX'] = {
		parameters = {'citeseerx'},
		link = 'CiteSeerX',
		q = 'Q2715061',
		label = 'CiteSeerX',
		mode = 'manual',														-- manual for custom validation of the "doi"
		prefix = '//citeseerx.ist.psu.edu/viewdoc/summary?doi=',
		COinS =  'pre',															-- use prefix value
		access = 'free',														-- free to read
		encode = true,
		separator = '&amp;nbsp;',
		},
	['DOI'] = {
		parameters = { 'doi', 'DOI' },
		link = 'Digital object identifier',
		q = 'Q25670',
		label = 'doi',
		mode = 'manual',
		prefix = '//doi.org/',
		COinS = 'info:doi',
		separator = ':',
		encode = true,
		custom_access = 'doi-access',
		},
	['EISSN'] = {
		parameters = {'eissn', 'EISSN'},
		link = 'International_Standard_Serial_Number#Electronic_ISSN',
		q = 'Q46339674',
		label = 'eISSN',
		mode = 'manual',
		prefix = '//www.worldcat.org/issn/',
		COinS = 'rft.eissn',
		encode = false,
		separator = '&amp;nbsp;',
		},
	['HDL'] = {
		parameters = { 'hdl', 'HDL' },
		link = 'Handle System',
		q = 'Q3126718',
		label = 'hdl',
		mode = 'manual',
		prefix = '//hdl.handle.net/',
		COinS = 'info:hdl',
		separator = ':',
		encode = true,
		custom_access = 'hdl-access',
		},
	['ISBN'] = {
		parameters = {'isbn', 'ISBN', 'isbn13', 'ISBN13'},
		link = 'International Standard Book Number',
		q = 'Q33057',
		label = 'ISBN',
		mode = 'manual',
		prefix = 'Special:BookSources/',
		COinS = 'rft.isbn',
		separator = '&amp;nbsp;',
		},
	['ISMN'] = {
		parameters = {'ismn', 'ISMN'},
		link = 'International Standard Music Number',
		q = 'Q1666938',
		label = 'ISMN',
		mode = 'manual',
		prefix = '',															-- not currently used;
		COinS = 'nil',															-- nil because we can't use pre or rft or info:
		separator = '&amp;nbsp;',
		},
	['ISSN'] = {
		parameters = {'issn', 'ISSN'},
		link = 'International Standard Serial Number',
		q = 'Q131276',
		label = 'ISSN',
		mode = 'manual',
		prefix = '//www.worldcat.org/issn/',
		COinS = 'rft.issn',
		encode = false,
		separator = '&amp;nbsp;',
		},
	['JFM'] = {
		parameters = {'jfm', 'JFM'},
		link = 'Jahrbuch über die Fortschritte der Mathematik',
		q = '',
		label = 'JFM',
		mode = 'manual',
		prefix = '//zbmath.org/?format=complete&amp;q=an:',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		},
	['JSTOR'] = {
		parameters = {'jstor', 'JSTOR'},
		link = 'JSTOR',
		q = 'Q1420342',
		label = 'JSTOR',
		mode = 'external',
		prefix = '//www.jstor.org/stable/', 									-- protocol relative tested 2013-09-04
		COinS = 'pre',															-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		custom_access = 'jstor-access',
		},
	['LCCN'] = {
		parameters = {'LCCN', 'lccn'},
		link = 'Library of Congress Control Number',
		q = 'Q620946',
		label = 'LCCN',
		mode = 'manual',
		prefix = '//lccn.loc.gov/', 											-- protocol relative tested 2015-12-28
		COinS = 'info:lccn',													-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		},
	['MR'] = {
		parameters = {'MR', 'mr'},
		link = 'Mathematical Reviews',
		q = 'Q211172',
		label = 'MR',
		mode = 'manual',
		prefix = '//www.ams.org/mathscinet-getitem?mr=', 						-- protocol relative tested 2013-09-04
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		},
	['OCLC'] = {
		parameters = {'OCLC', 'oclc'},
		link = 'OCLC',
		q = 'Q190593',
		label = 'OCLC',
		mode = 'manual',
		prefix = '//www.worldcat.org/oclc/',
		COinS = 'info:oclcnum',
		encode = true,
		separator = '&amp;nbsp;',
		},
	['OL'] = {
		parameters = { 'ol', 'OL' },
		link = 'Open Library',
		q = 'Q1201876',
		label = 'OL',
		mode = 'manual',
		prefix = '//openlibrary.org/',
		COinS = nil,															-- no COinS for this id (needs thinking on implementation because /authors/books/works/OL)
		separator = '&amp;nbsp;',
		encode = true,
		custom_access = 'ol-access',
		},
	['OSTI'] = {
		parameters = {'OSTI', 'osti'},
		link = 'Office of Scientific and Technical Information',
		q = 'Q2015776',
		label = 'OSTI',
		mode = 'external',
		prefix = '//www.osti.gov/biblio/',										-- protocol relative tested 2018-09-12
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		custom_access = 'osti-access',
		},
	['PMC'] = {
		parameters = {'PMC', 'pmc'},
		link = 'PubMed Central',
		q = 'Q229883',
		label = 'PMC',
		mode = 'manual',
		prefix = '//www.ncbi.nlm.nih.gov/pmc/articles/PMC',
		suffix = " ",
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		access = 'free',														-- free to read
		},
	['PMID'] = {
		parameters = {'PMID', 'pmid'},
		link = 'PubMed Identifier',
		q = '',
		label = 'PMID',
		mode = 'manual',
		prefix = '//www.ncbi.nlm.nih.gov/pubmed/',
		COinS = 'info:pmid',
		encode = false,
		separator = '&amp;nbsp;',
		},
	['RFC'] = {
		parameters = {'RFC', 'rfc'},
		link = 'Request for Comments',
		q = 'Q212971',
		label = 'RFC',
		mode = 'external',
		prefix = '//tools.ietf.org/html/rfc',
		COinS = 'pre',															-- use prefix value
		encode = false,
		separator = '&amp;nbsp;',
		access = 'free',														-- free to read
		},
	['SSRN'] = {
		parameters = {'SSRN', 'ssrn'},
		link = 'Social Science Research Network',
		q = 'Q7550801',
		label = 'SSRN',
		mode = 'manual',
		prefix = '//ssrn.com/abstract=', 										-- protocol relative tested 2013-09-04
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		access = 'free',														-- always free to read
		},
	['USENETID'] = {
		parameters = {'message-id'},
		link = 'Usenet',
		q = 'Q193162',
		label = 'Usenet:',
		mode = 'manual',
		prefix = 'news:',
		encode = false,
		COinS = 'pre',															-- use prefix value
		separator = '&amp;nbsp;',
		},
	['ZBL'] = {
		parameters = {'ZBL', 'zbl'},
		link = 'Zentralblatt MATH',
		q = 'Q190269',
		label = 'Zbl',
		mode = 'manual',
		prefix = '//zbmath.org/?format=complete&amp;q=an:',
		COinS = 'pre',															-- use prefix value
		encode = true,
		separator = '&amp;nbsp;',
		},
	}


--[[--------------------------&lt; E X P O R T E D   T A B L E S &gt;------------------------------------------------
]]

return 	{
	aliases = aliases,
	special_case_translation = special_case_translation,
	defaults = defaults,
	date_names = date_names,
	error_conditions = error_conditions,
	editor_markup_patterns = editor_markup_patterns,
	et_al_patterns = et_al_patterns,
	global_df = global_df,
	id_handlers = id_handlers,
	keywords = keywords,
	stripmarkers=stripmarkers,
	invisible_chars = invisible_chars,
	indic_script = indic_script,
	maint_cats = maint_cats,
	messages = messages,
	presentation = presentation,
	prop_cats = prop_cats,
	punct_skip = punct_skip,
	script_lang_codes = script_lang_codes,
	lang_code_remap = lang_code_remap,
	lang_name_remap = lang_name_remap,
	title_types = title_types,
	uncategorized_namespaces = uncategorized_namespaces,
	uncategorized_subpages = uncategorized_subpages,
	templates_using_volume = templates_using_volume,
	templates_using_issue = templates_using_issue,
	templates_not_using_page = templates_not_using_page,
	}</text>
      <sha1>a31hbmva4n1zp9fsmernvnq4kgmbhl7</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Date validation</title>
    <ns>828</ns>
    <id>42164542</id>
    <revision>
      <id>913814849</id>
      <parentid>893310188</parentid>
      <timestamp>2019-09-03T11:05:57Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>sync from sandbox;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="57298">
--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local is_set, in_array;															-- imported functions from selected Module:Citation/CS1/Utilities
local cfg;																		-- table of tables imported from selected Module:Citation/CS1/Configuration


--[=[-------------------------&lt; I S _ V A L I D _ A C C E S S D A T E &gt;----------------------------------------

returns true if:
	Wikipedia start date &lt;= accessdate &lt; today + 2 days

Wikipedia start date is 2001-01-15T00:00:00 UTC which is 979516800 seconds after 1970-01-01T00:00:00 UTC (the start of Unix time)
accessdate is the date provided in |accessdate= at time 00:00:00 UTC
today is the current date at time 00:00:00 UTC plus 48 hours
	if today is 2015-01-01T00:00:00 then
		adding 24 hours gives 2015-01-02T00:00:00 – one second more than today
		adding 24 hours gives 2015-01-03T00:00:00 – one second more than tomorrow

This function does not work if it is fed month names for languages other than English.  Wikimedia #time: parser
apparently doesn't understand non-Engish date month names. This function will always return false when the date
contains a non-English month name because good1 is false after the call to lang.formatDate().  To get around that
call this function with YYYY-MM-DD format dates.

]=]

local function is_valid_accessdate (accessdate)
	local lang = mw.getContentLanguage();
	local good1, good2;
	local access_ts, tomorrow_ts;												-- to hold unix time stamps representing the dates
		
	good1, access_ts = pcall( lang.formatDate, lang, 'U', accessdate );			-- convert accessdate value to unix timesatmp 
	good2, tomorrow_ts = pcall( lang.formatDate, lang, 'U', 'today + 2 days' );	-- today midnight + 2 days is one second more than all day tomorrow
	
	if good1 and good2 then														-- lang.formatDate() returns a timestamp in the local script which which tonumber() may not understand
		access_ts = tonumber (access_ts) or lang:parseFormattedNumber (access_ts);			-- convert to numbers for the comparison;
		tomorrow_ts = tonumber (tomorrow_ts) or lang:parseFormattedNumber (tomorrow_ts);
	else
		return false;															-- one or both failed to convert to unix time stamp
	end

	if 979516800 &lt;= access_ts and access_ts &lt; tomorrow_ts then					-- Wikipedia start date &lt;= accessdate &lt; tomorrow's date
		return true;
	else
		return false;															-- accessdate out of range
	end
end


--[[--------------------------&lt; G E T _ M O N T H _ N U M B E R &gt;----------------------------------------------

returns a number according to the month in a date: 1 for January, etc.  Capitalization and spelling must be correct. If not a valid month, returns 0

]]

local function get_month_number (month)
	return cfg.date_names['local'].long[month] or cfg.date_names['local'].short[month] or		-- look for local names first
			cfg.date_names['en'].long[month] or	cfg.date_names['en'].short[month] or			-- failing that, look for English names
			0;																					-- not a recognized month name
end


--[[--------------------------&lt; I S _ V A L I D _ E M B A R G O _ D A T E &gt;------------------------------------

returns true and date value if that value has proper dmy, mdy, ymd format.

returns false and 9999 (embargoed forever) when date value is not proper format; assumes that when |embargo= is
set, the editor intended to embargo a pmc but |embargo= does not hold a single date.

]]

local function is_valid_embargo_date (v)
	if v:match ('^%d%d%d%d%-%d%d%-%d%d$') or									-- ymd
		v:match ('^%d%d?%s+%a+%s+%d%d%d%d$') or									-- dmy
		v:match ('^%a+%s+%d%d?%s*,%s*%d%d%d%d$') then							-- mdy
			return true, v;
	end
	return false, '9999';														-- if here not good date so return false and set embargo date to long time in future
end


--[[--------------------------&lt; G E T _ S E A S O N _ N U M B E R &gt;--------------------------------------------

returns a number according to the sequence of seasons in a year: 1 for Winter, etc.  Capitalization and spelling must be correct. If not a valid season, returns 0

Uses ISO DIS 8601 2016 part 2 §4.7  Divisions of a year for hemishpere-independent seasons:
	21-24 = Spring, Summer, Autumn, Winter, independent of “Hemisphere”

These additional divisions not currently supported:
	25-28 = Spring - Northern Hemisphere, Summer- Northern Hemisphere, Autumn - Northern Hemisphere, Winter - Northern Hemisphere
	29-32 = Spring – Southern Hemisphere, Summer– Southern Hemisphere, Autumn – Southern Hemisphere, Winter - Southern Hemisphere
	33-36 = Quarter 1, Quarter 2, Quarter 3, Quarter 4 (3 months each)
	37-39 = Quadrimester 1, Quadrimester 2, Quadrimester 3 (4 months each)
	40-41 = Semestral 1, Semestral-2 (6 months each)

]]

local function get_season_number (season)
	return cfg.date_names['local'].season[season] or							-- look for local names first
			cfg.date_names['en'].season[season] or								-- failing that, look for English names
			0;																	-- not a recognized season name
end


--[[--------------------------&lt; I S _ P R O P E R _ N A M E &gt;--------------------------------------------------

returns a non-zero number if date contains a recognized proper name.  Capitalization and spelling must be correct.

]]

local function is_proper_name (name)
	return cfg.date_names['local'].named[name] or								-- look for local names dates first
			cfg.date_names['en'].named[name] or									-- failing that, look for English names
			0;																	-- not a recognized named date
end


--[[--------------------------&lt; I S _ V A L I D _ M O N T H _ O R _ S E A S O N &gt;------------------------------

--returns true if month or season is valid (properly spelled, capitalized, abbreviated)

]]

local function is_valid_month_or_season (month_season)
	if 0 == get_month_number (month_season) then								-- if month text isn't one of the twelve months, might be a season
		if 0 == get_season_number (month_season) then							-- not a month, is it a season?
			return false;														-- return false not a month or one of the five seasons
		end
	end
	return true;
end


--[[--------------------------&lt; I S _ V A L I D _ Y E A R &gt;----------------------------------------------------

Function gets current year from the server and compares it to year from a citation parameter.  Years more than one year in the future are not acceptable.

]]
local year_limit;
local function is_valid_year(year)
	if not is_set(year_limit) then
		year_limit = tonumber(os.date("%Y"))+1;									-- global variable so we only have to fetch it once
	end
	return tonumber(year) &lt;= year_limit;										-- false if year is in the future more than one year
end


--[[--------------------------&lt; I S _ V A L I D _ D A T E &gt;----------------------------------------------------
Returns true if day is less than or equal to the number of days in month and year is no farther into the future
than next year; else returns false.

Assumes Julian calendar prior to year 1582 and Gregorian calendar thereafter. Accounts for Julian calendar leap
years before 1582 and Gregorian leap years after 1582. Where the two calendars overlap (1582 to approximately
1923) dates are assumed to be Gregorian.

]]

local function is_valid_date (year, month, day)
local days_in_month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
local month_length;
	if not is_valid_year(year) then												-- no farther into the future than next year
		return false;
	end
	
	month = tonumber(month);													-- required for YYYY-MM-DD dates
	
	if (2==month) then															-- if February
		month_length = 28;														-- then 28 days unless
		if 1582 &gt; tonumber(year) then											-- Julian calendar
			if 0==(year%4) then													-- is a leap year?
				month_length = 29;												-- if leap year then 29 days in February
			end
		else																	-- Gregorian calendar
			if (0==(year%4) and (0~=(year%100) or 0==(year%400))) then			-- is a leap year?
				month_length = 29;												-- if leap year then 29 days in February
			end
		end
	else
		month_length=days_in_month[month];
	end

	if tonumber (day) &gt; month_length then
		return false;
	end
	return true;
end


--[[--------------------------&lt; I S _ V A L I D _ M O N T H _ R A N G E _ S T Y L E &gt;--------------------------

Months in a range are expected to have the same style: Jan–Mar or October–December but not February–Mar or Jul–August. 
There is a special test for May because it can be either short or long form.

Returns true when style for both months is the same

]]

local function is_valid_month_range_style (month1, month2)
local len1 = month1:len();
local len2 = month2:len();
	if len1 == len2 then
		return true;															-- both months are short form so return true
	elseif 'May' == month1 or 'May'== month2 then
		return true;															-- both months are long form so return true
	elseif 3 == len1 or 3 == len2 then
		return false;															-- months are mixed form so return false
	else
		return true;															-- both months are long form so return true
	end
end


--[[--------------------------&lt; I S _ V A L I D _ M O N T H _ S E A S O N _ R A N G E &gt;------------------------

Check a pair of months or seasons to see if both are valid members of a month or season pair.

Month pairs are expected to be left to right, earliest to latest in time.

All season ranges are accepted as valid because there are publishers out there who have published a Summer–Spring YYYY issue so ... ok

]]

local function is_valid_month_season_range(range_start, range_end)
	local range_start_number = get_month_number (range_start);
	local range_end_number;
	
	if 0 == range_start_number then												-- is this a month range?
		range_start_number = get_season_number (range_start);					-- not a month; is it a season? get start season number
		range_end_number = get_season_number (range_end);						-- get end season number

		if (0 ~= range_start_number) and (0 ~= range_end_number) then
			return true;														-- any season pairing is accepted
		end
		return false;															-- range_start and/or range_end is not a season
	end
																				-- here when range_start is a month
	range_end_number = get_month_number (range_end);							-- get end month number
	if range_start_number &lt; range_end_number then								-- range_start is a month; does range_start precede range_end?
		if is_valid_month_range_style (range_start, range_end) then				-- do months have the same style?
			return true;														-- proper order and same style
		end
	end
	return false;																-- range_start month number is greater than or equal to range end number; or range end isn't a month
end


--[[--------------------------&lt; M A K E _ C O I N S _ D A T E &gt;------------------------------------------------

This function receives a table of date parts for one or two dates and an empty table reference declared in
Module:Citation/CS1.  The function is called only for |date= parameters and only if the |date=&lt;value&gt; is 
determined to be a valid date format.  The question of what to do with invalid date formats is not answered here.

The date parts in the input table are converted to an ISO 8601 conforming date string:
	single whole dates:		yyyy-mm-dd
	month and year dates:	yyyy-mm
	year dates:				yyyy
	ranges:					yyyy-mm-dd/yyyy-mm-dd
							yyyy-mm/yyyy-mm
							yyyy/yyyy

Dates in the Julian calendar are reduced to year or year/year so that we don't have to do calendar conversion from
Julian to Proleptic Gregorian.

The input table has:
	year, year2 – always present; if before 1582, ignore months and days if present
	month, month2 – 0 if not provided, 1-12 for months, 21-24 for seasons; 99 Christmas
	day, day2 –  0 if not provided, 1-31 for days
	
the output table receives:
	rftdate:	an IS8601 formatted date
	rftchron:	a free-form version of the date, usually without year which is in rftdate (season ranges and propername dates)
	rftssn:		one of four season keywords: winter, spring, summer, fall (lowercase)

]]

local function make_COinS_date (input, tCOinS_date)
	local date;																	-- one date or first date in a range
	local date2 = '';															-- end of range date
-- start temporary Julian / Gregorian calendar uncertainty detection
	local year = tonumber(input.year);											-- this temporary code to determine the extent of sources dated to the Julian/Gregorian
	local month = tonumber(input.month);										-- interstice 1 October 1582 – 1 January 1926
	local day = tonumber (input.day);
	if (0 ~= day) and															-- day must have a value for this to be a whole date
		(((1582 == year) and (10 &lt;= month) and (12 &gt;= month)) or				-- any whole 1582 date from 1 october to 31 December or
			((1926 == year) and (1 == month) and (1 == input.day)) or			-- 1 January 1926 or
				((1582 &lt; year) and (1925 &gt;= year))) then						-- any date 1 January 1583 – 31 December 1925
					tCOinS_date.inter_cal_cat = true;							-- set category flag true
	end
-- end temporary Julian / Gergorian calendar uncertainty detection
	
	if 1582 &gt; tonumber(input.year) or 20 &lt; tonumber(input.month) then			-- Julian calendar or season so &amp;rft.date gets year only
		date = input.year;
		if 0 ~= input.year2 and input.year ~= input.year2 then					-- if a range, only the second year portion when not the same as range start year
			date = string.format ('%.4d/%.4d', tonumber(input.year), tonumber(input.year2))		-- assemble the date range
		end
		if 20 &lt; tonumber(input.month) then										-- if season or propername date
			local season = {[24]='winter', [21]='spring', [22]='summer', [23]='fall', [99]='Christmas'};	-- seasons lowercase, no autumn; proper names use title case
			if 0 == input.month2 then											-- single season date
				if 30 &lt;tonumber(input.month) then
					tCOinS_date.rftchron = season[input.month];					-- proper name dates
				else
					tCOinS_date.rftssn = season[input.month];					-- seasons
				end
			else																-- season range with a second season specified
				if input.year ~= input.year2 then								-- season year – season year range or season year–year
					tCOinS_date.rftssn = season[input.month];					-- start of range season; keep this?
					if 0~= input.month2 then
						tCOinS_date.rftchron = string.format ('%s %s – %s %s', season[input.month], input.year, season[input.month2], input.year2);
					end
				else															-- season–season year range
					tCOinS_date.rftssn = season[input.month];					-- start of range season; keep this?
					tCOinS_date.rftchron = season[input.month] .. '–' .. season[input.month2];	-- season–season year range
				end
			end
		end
		tCOinS_date.rftdate = date;
		return;																	-- done
	end
	
	if 0 ~= input.day then
		date = string.format ('%s-%.2d-%.2d', input.year, tonumber(input.month), tonumber(input.day));	-- whole date
	elseif 0 ~= input.month then
		date = string.format ('%s-%.2d', input.year, tonumber(input.month));	-- year and month
	else
		date = string.format ('%s', input.year);								-- just year
	end

	if 0 ~= input.year2 then
		if 0 ~= input.day2 then
			date2 = string.format ('/%s-%.2d-%.2d', input.year2, tonumber(input.month2), tonumber(input.day2));		-- whole date
		elseif 0 ~= input.month2 then
			date2 = string.format ('/%s-%.2d', input.year2, tonumber(input.month2));	-- year and month
		else
			date2 = string.format ('/%s', input.year2);							-- just year
		end
	end
	
	tCOinS_date.rftdate = date .. date2;										-- date2 has the '/' separator
	return;
end


--[[--------------------------&lt; P A T T E R N S &gt;--------------------------------------------------------------

this is the list of patterns for date formats that this module recognizes.  Approximately the first half of these
patterns represent formats that might be reformatted into another format.  Those that might be reformatted have
'indicator' letters that identify the content of the matching capture: 'd' (day), 'm' (month), 'a' (anchor year),
'y' (year); second day, month, year have a '2' suffix.

These patterns are used for both date validation and for reformatting.  This table should not be moved to ~/Configuration
because changes to this table require changes to check_date() and to reformatter() and reformat_date()

]]

local patterns = {
	 																			-- year-initial numerical year-month-day
	['ymd'] = {'^(%d%d%d%d)%-(%d%d)%-(%d%d)$', 'y', 'm', 'd'},					
																				-- month-initial: month day, year
	['Mdy'] = {'^(%D-) +([1-9]%d?), +((%d%d%d%d?)%a?)$', 'm', 'd', 'a', 'y'},
																				-- month-initial day range: month day–day, year; days are separated by endash
	['Md-dy'] = {'^(%D-) +([1-9]%d?)[%-–]([1-9]%d?), +((%d%d%d%d)%a?)$', 'm', 'd', 'd2', 'a', 'y'},
																				-- day-initial: day month year
	['dMy'] = {'^([1-9]%d?) *(%D-) +((%d%d%d%d?)%a?)$', 'd', 'm', 'a', 'y'},
																				-- year-initial: year month day; day: 1 or 2 two digits, leading zero allowed; not supported at en.wiki
--	['yMd'] = {'^((%d%d%d%d?)%a?) +(%D-) +(%d%d?)$', 'a', 'y', 'm', 'd'},
																				-- day-range-initial: day–day month year; days are separated by endash
	['d-dMy'] = {'^([1-9]%d?)[%-–]([1-9]%d?) +(%D-) +((%d%d%d%d)%a?)$', 'd', 'd2', 'm', 'a', 'y'},
																				-- day initial month-day-range: day month - day month year; uses spaced endash
	['dM-dMy'] = {'^([1-9]%d?) +(%D-) +[%-–] +([1-9]%d?) +(%D-) +((%d%d%d%d)%a?)$', 'd', 'm', 'd2', 'm2', 'a', 'y'},
																				-- month initial month-day-range: month day – month day, year;  uses spaced endash
	['Md-Mdy'] = {'^(%D-) +([1-9]%d?) +[%-–] +(%D-) +([1-9]%d?), +((%d%d%d%d)%a?)$','m', 'd', 'm2', 'd2', 'a', 'y'},
																				-- day initial month-day-year-range: day month year - day month year; uses spaced endash
	['dMy-dMy'] = {'^([1-9]%d?) +(%D-) +(%d%d%d%d) +[%-–] +([1-9]%d?) +(%D-) +((%d%d%d%d)%a?)$', 'd', 'm', 'y', 'd2', 'm2', 'a', 'y2'},
																				-- month initial month-day-year-range: month day, year – month day, year;  uses spaced endash
	['Mdy-Mdy'] = {'^(%D-) +([1-9]%d?), +(%d%d%d%d) +[%-–] +(%D-) +([1-9]%d?), +((%d%d%d%d)%a?)$', 'm', 'd', 'y', 'm2', 'd2', 'a', 'y2'},

																				-- these date formats cannot be converted, per se, but month name can be rendered short or long
																				-- month/season year - month/season year; separated by spaced endash
	['My-My'] = {'^(%D-) +(%d%d%d%d) +[%-–] +(%D-) +((%d%d%d%d)%a?)$', 'm', 'y', 'm2', 'a', 'y2'},
																				-- month/season range year; months separated by endash
	['M-My'] = {'^(%D-)[%-–](%D-) +((%d%d%d%d)%a?)$', 'm', 'm2', 'a', 'y'},
																				-- month/season year or proper-name year
	['My'] = {'^([^%d–]-) +((%d%d%d%d)%a?)$', 'm', 'a', 'y'},					-- this way because endash is a member of %D; %D- will match January–March 2019 when it shouldn't
																				-- these date formats cannot be converted
	['Sy4-y2'] = {'^(%D-) +((%d%d)%d%d)[%-–]((%d%d)%a?)$'},						-- special case Winter/Summer year-year (YYYY-YY); year separated with unspaced endash
	['Sy-y'] = {'^(%D-) +(%d%d%d%d)[%-–]((%d%d%d%d)%a?)$'},						-- special case Winter/Summer year-year; year separated with unspaced endash
	['y-y'] = {'^(%d%d%d%d?)[%-–]((%d%d%d%d?)%a?)$'},							-- year range: YYY-YYY or YYY-YYYY or YYYY–YYYY; separated by unspaced endash; 100-9999
	['y4-y2'] = {'^((%d%d)%d%d)[%-–]((%d%d)%a?)$'},								-- year range: YYYY–YY; separated by unspaced endash
	['y'] = {'^((%d%d%d%d?)%a?)$'},												-- year; here accept either YYY or YYYY
	}


--[[--------------------------&lt; C H E C K _ D A T E &gt;----------------------------------------------------------

Check date format to see that it is one of the formats approved by WP:DATESNO or WP:DATERANGE. Exception: only
allowed range separator is endash.  Additionally, check the date to see that it is a real date: no 31 in 30-day
months; no 29 February when not a leap year.  Months, both long-form and three character abbreviations, and seasons
must be spelled correctly.  Future years beyond next year are not allowed.

If the date fails the format tests, this function returns false and does not return values for anchor_year and
COinS_date.  When this happens, the date parameter is used in the COinS metadata and the CITEREF identifier gets
its year from the year parameter if present otherwise CITEREF does not get a date value.

Inputs:
	date_string - date string from date-holding parameters (date, year, accessdate, embargo, archivedate, etc.)

Returns:
	false if date string is not a real date; else
	true, anchor_year, COinS_date
		anchor_year can be used in CITEREF anchors
		COinS_date is ISO 8601 format date; see make_COInS_date()

]]

local function check_date (date_string, tCOinS_date, test_accessdate)
	local year;			-- assume that year2, months, and days are not used;
	local year2=0;		-- second year in a year range
	local month=0;
	local month2=0;		-- second month in a month range
	local day=0;
	local day2=0;		-- second day in a day range
	local anchor_year;
	local coins_date;

	if date_string:match (patterns['ymd'][1]) then								-- year-initial numerical year month day format
		year, month, day=date_string:match (patterns['ymd'][1]);
		if 12 &lt; tonumber(month) or 1 &gt; tonumber(month) or 1582 &gt; tonumber(year) or 0 == tonumber(day) then return false; end	-- month or day number not valid or not Gregorian calendar
		anchor_year = year;
	
	elseif mw.ustring.match(date_string, patterns['Mdy'][1]) then				-- month-initial: month day, year
		month, day, anchor_year, year=mw.ustring.match(date_string, patterns['Mdy'][1]);
		month = get_month_number (month);
		if 0 == month then return false; end									-- return false if month text isn't one of the twelve months
				
	elseif mw.ustring.match(date_string, patterns['Md-dy'][1]) then				-- month-initial day range: month day–day, year; days are separated by endash
		month, day, day2, anchor_year, year=mw.ustring.match(date_string, patterns['Md-dy'][1]);
		if tonumber(day) &gt;= tonumber(day2) then return false; end				-- date range order is left to right: earlier to later; dates may not be the same;
		month = get_month_number (month);
		if 0 == month then return false; end									-- return false if month text isn't one of the twelve months
		month2=month;															-- for metadata
		year2=year;

	elseif mw.ustring.match(date_string, patterns['dMy'][1]) then				-- day-initial: day month year
		day, month, anchor_year, year=mw.ustring.match(date_string, patterns['dMy'][1]);
		month = get_month_number (month);
		if 0 == month then return false; end									-- return false if month text isn't one of the twelve months

--[[ NOT supported at en.wiki
	elseif mw.ustring.match(date_string, patterns['yMd'][1]) then				-- year-initial: year month day; day: 1 or 2 two digits, leading zero allowed
		anchor_year, year, month, day=mw.ustring.match(date_string, patterns['yMd'][1]);
		month = get_month_number (month);
		if 0 == month then return false; end									-- return false if month text isn't one of the twelve months
-- end NOT supported at en.wiki ]]

	elseif mw.ustring.match(date_string, patterns['d-dMy'][1]) then				-- day-range-initial: day–day month year; days are separated by endash
		day, day2, month, anchor_year, year=mw.ustring.match(date_string, patterns['d-dMy'][1]);
		if tonumber(day) &gt;= tonumber(day2) then return false; end				-- date range order is left to right: earlier to later; dates may not be the same;
		month = get_month_number (month);
		if 0 == month then return false; end									-- return false if month text isn't one of the twelve months
		month2=month;															-- for metadata
		year2=year;

	elseif mw.ustring.match(date_string, patterns['dM-dMy'][1]) then			-- day initial month-day-range: day month - day month year; uses spaced endash
		day, month, day2, month2, anchor_year, year=mw.ustring.match(date_string, patterns['dM-dMy'][1]);
		if (not is_valid_month_season_range(month, month2)) or not is_valid_year(year) then return false; end	-- date range order is left to right: earlier to later;
		month = get_month_number (month);										-- for metadata
		month2 = get_month_number (month2);
		year2=year;

	elseif mw.ustring.match(date_string, patterns['Md-Mdy'][1]) then			-- month initial month-day-range: month day – month day, year;  uses spaced endash
		month, day, month2, day2, anchor_year, year=mw.ustring.match(date_string, patterns['Md-Mdy'][1]);
		if (not is_valid_month_season_range(month, month2)) or not is_valid_year(year) then return false; end
		month = get_month_number (month);										-- for metadata
		month2 = get_month_number (month2);
		year2=year;

	elseif mw.ustring.match(date_string, patterns['dMy-dMy'][1]) then			-- day initial month-day-year-range: day month year - day month year; uses spaced endash
		day, month, year, day2, month2, anchor_year, year2=mw.ustring.match(date_string, patterns['dMy-dMy'][1]);
		if tonumber(year2) &lt;= tonumber(year) then return false; end				-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) or not is_valid_month_range_style(month, month2) then return false; end		-- year2 no more than one year in the future; months same style
		month = get_month_number (month);										-- for metadata
		month2 = get_month_number (month2);

	elseif mw.ustring.match(date_string, patterns['Mdy-Mdy'][1]) then			-- month initial month-day-year-range: month day, year – month day, year;  uses spaced endash
		month, day, year, month2, day2, anchor_year, year2=mw.ustring.match(date_string, patterns['Mdy-Mdy'][1]);
		if tonumber(year2) &lt;= tonumber(year) then return false; end				-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) or not is_valid_month_range_style(month, month2) then return false; end		-- year2 no more than one year in the future; months same style
		month = get_month_number (month);										-- for metadata
		month2 = get_month_number (month2);

	elseif mw.ustring.match(date_string, patterns['Sy4-y2'][1]) then			-- special case Winter/Summer year-year (YYYY-YY); year separated with unspaced endash
		local century;
		month, year, century, anchor_year, year2=mw.ustring.match(date_string, patterns['Sy4-y2'][1]);
		if 'Winter' ~= month and 'Summer' ~= month then return false end;		-- 'month' can only be Winter or Summer
		anchor_year=year..'–'..anchor_year;										-- assemble anchor_year from both years
		year2 = century..year2;													-- add the century to year2 for comparisons
		if 1 ~= tonumber(year2) - tonumber(year) then return false; end			-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year
		month = get_season_number (month);

	elseif mw.ustring.match(date_string, patterns['Sy-y'][1]) then				-- special case Winter/Summer year-year; year separated with unspaced endash
		month, year, anchor_year, year2=mw.ustring.match(date_string, patterns['Sy-y'][1]);
		if 'Winter' ~= month and 'Summer' ~= month then return false end;		-- 'month' can only be Winter or Summer
		anchor_year=year..'–'..anchor_year;										-- assemble anchor_year from both years
		if 1 ~= tonumber(year2) - tonumber(year) then return false; end			-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year
		month = get_season_number (month);										-- for metadata

	elseif mw.ustring.match(date_string, patterns['My-My'][1]) then				-- month/season year - month/season year; separated by spaced endash
		month, year, month2, anchor_year, year2=mw.ustring.match(date_string, patterns['My-My'][1]);
		anchor_year=year..'–'..anchor_year;										-- assemble anchor_year from both years
		if tonumber(year) &gt;= tonumber(year2) then return false; end				-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year
		if 0 ~= get_month_number(month) and 0 ~= get_month_number(month2) and is_valid_month_range_style(month, month2) then 	-- both must be month year, same month style
			month = get_month_number(month);
			month2 = get_month_number(month2);
		elseif 0 ~= get_season_number(month) and 0 ~= get_season_number(month2) then	-- both must be or season year, not mixed
			month = get_season_number(month);
			month2 = get_season_number(month2);
		else
			 return false;
		end

	elseif mw.ustring.match(date_string, patterns['M-My'][1]) then				-- month/season range year; months separated by endash 
		month, month2, anchor_year, year=mw.ustring.match(date_string, patterns['M-My'][1]);
		if (not is_valid_month_season_range(month, month2)) or (not is_valid_year(year)) then return false; end
		if 0 ~= get_month_number(month) then									-- determined to be a valid range so just check this one to know if month or season
			month = get_month_number(month);
			month2 = get_month_number(month2);
		else
			month = get_season_number(month);
			month2 = get_season_number(month2);
		end
		year2=year;
		
	elseif mw.ustring.match(date_string, patterns['My'][1]) then				-- month/season year or proper-name year
		month, anchor_year, year=mw.ustring.match(date_string, patterns['My'][1]);
		if not is_valid_year(year) then return false; end
		if not is_valid_month_or_season (month) and 0 == is_proper_name (month) then return false; end
		if 0 ~= get_month_number(month) then									-- determined to be a valid range so just check this one to know if month or season
			month = get_month_number(month);
		elseif 0 ~= get_season_number(month) then
			month = get_season_number(month);
		else
			month = is_proper_name (month);										-- must be proper name; not supported in COinS
		end

	elseif mw.ustring.match(date_string, patterns['y-y'][1]) then				-- Year range: YYY-YYY or YYY-YYYY or YYYY–YYYY; separated by unspaced endash; 100-9999
		year, anchor_year, year2=mw.ustring.match(date_string, patterns['y-y'][1]);
		anchor_year=year..'–'..anchor_year;										-- assemble anchor year from both years
		if tonumber(year) &gt;= tonumber(year2) then return false; end				-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year

	elseif mw.ustring.match(date_string, patterns['y4-y2'][1]) then				-- Year range: YYYY–YY; separated by unspaced endash
		local century;
		year, century, anchor_year, year2=mw.ustring.match(date_string, patterns['y4-y2'][1]);
		anchor_year=year..'–'..anchor_year;										-- assemble anchor year from both years
		if 13 &gt; tonumber(year2) then return false; end							-- don't allow 2003-05 which might be May 2003
		year2 = century..year2;													-- add the century to year2 for comparisons
		if tonumber(year) &gt;= tonumber(year2) then return false; end				-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year

	elseif date_string:match (patterns['y'][1]) then							-- year; here accept either YYY or YYYY
		anchor_year, year=date_string:match (patterns['y'][1]);
		if false == is_valid_year(year) then
			return false;
		end

	else
		return false;															-- date format not one of the MOS:DATE approved formats
	end

	if test_accessdate then														-- test accessdate here because we have numerical date parts
		if 0 ~= year and 0 ~= month and 0 ~= day and 							-- all parts of a single date required
			0 == year2 and 0 == month2 and 0 == day2 then						-- none of these; accessdate must not be a range
				if not is_valid_accessdate (year..'-'..month..'-'..day) then	
					return false;												-- return false when accessdate out of bounds
				end
		else
			return false;														-- return false when accessdate is a range of two dates
		end
	end

	local result=true;															-- check whole dates for validity; assume true because not all dates will go through this test
	if 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 == month2 and 0 == day2 then		-- YMD (simple whole date)
		result=is_valid_date(year,month,day);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 == month2 and 0 ~= day2 then	-- YMD-d (day range)
		result=is_valid_date(year,month,day);
		result=result and is_valid_date(year,month,day2);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 ~= month2 and 0 ~= day2 then	-- YMD-md (day month range)
		result=is_valid_date(year,month,day);
		result=result and is_valid_date(year,month2,day2);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 ~= year2 and 0 ~= month2 and 0 ~= day2 then	-- YMD-ymd (day month year range)
		result=is_valid_date(year,month,day);
		result=result and is_valid_date(year2,month2,day2);
	end
	
	if false == result then return false; end

	if nil ~= tCOinS_date then													-- this table only passed into this function when testing |date= parameter values
		make_COinS_date ({year=year, month=month, day=day, year2=year2, month2=month2, day2=day2}, tCOinS_date);	-- make an ISO 8601 date string for COinS
	end
	
	return true, anchor_year;													-- format is good and date string represents a real date
end	


--[[--------------------------&lt; D A T E S &gt;--------------------------------------------------------------------

Cycle the date-holding parameters in passed table date_parameters_list through check_date() to check compliance with MOS:DATE. For all valid dates, check_date() returns
true. The |date= parameter test is unique, it is the only date holding parameter from which values for anchor_year (used in CITEREF identifiers) and COinS_date (used in
the COinS metadata) are derived.  The |date= parameter is the only date-holding parameter that is allowed to contain the no-date keywords "n.d." or "nd" (without quotes).

Unlike most error messages created in this module, only one error message is created by this function. Because all of the date holding parameters are processed serially,
a single error message is created as the dates are tested.

]]

local function dates(date_parameters_list, tCOinS_date)
	local anchor_year;		-- will return as nil if the date being tested is not |date=
	local COinS_date;		-- will return as nil if the date being tested is not |date=
	local embargo_date;															-- if embargo date is a good dmy, mdy, ymd date then holds original value else reset to 9999
	local error_message = "";
	local good_date = false;
	
	for k, v in pairs(date_parameters_list) do									-- for each date-holding parameter in the list
		if is_set(v.val) then													-- if the parameter has a value
			v.val = mw.ustring.gsub (v.val, '%d', cfg.date_names.local_digits);	-- translate 'local' digits to Western 0-9
			if v.val:match("^c%. [1-9]%d%d%d?%a?$") then						-- special case for c. year or with or without CITEREF disambiguator - only |date= and |year=
				local year = v.val:match("c%. ([1-9]%d%d%d?)%a?");				-- get the year portion so it can be tested
				if 'date'==k then
					anchor_year, COinS_date = v.val:match("((c%. [1-9]%d%d%d?)%a?)");	-- anchor year and COinS_date only from |date= parameter
					good_date = is_valid_year(year);
				elseif 'year'==k then
					good_date = is_valid_year(year);
				end
			elseif 'date'==k then												-- if the parameter is |date=
				if v.val:match("^n%.d%.%a?$") then								-- if |date=n.d. with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v.val:match("((n%.d%.)%a?)");	--"n.d."; no error when date parameter is set to no date
				elseif v.val:match("^nd%a?$") then								-- if |date=nd with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v.val:match("((nd)%a?)");	--"nd";	no error when date parameter is set to no date
				else
					good_date, anchor_year, COinS_date = check_date (v.val, tCOinS_date);	-- go test the date
				end
			elseif 'year'==k then												-- if the parameter is |year= it should hold only a year value
				if v.val:match("^[1-9]%d%d%d?%a?$") then						-- if |year= 3 or 4 digits only with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v.val:match("((%d+)%a?)");
				end
			elseif 'access-date'==k then										-- if the parameter is |date=
				good_date = check_date (v.val, nil, true);						-- go test the date; nil is a placeholder; true is the test_accessdate flag
			elseif 'embargo'==k then											-- if the parameter is |embargo=
				good_date = check_date (v.val);									-- go test the date
				if true == good_date then										-- if the date is a valid date
					good_date, embargo_date = is_valid_embargo_date (v.val);	-- is |embargo= date a single dmy, mdy, or ymd formatted date? yes:returns embargo; no: returns 9999
				end
			else																-- any other date-holding parameter
				good_date = check_date (v.val);									-- go test the date
			end
			if false==good_date then											-- assemble one error message so we don't add the tracking category multiple times
				if is_set(error_message) then									-- once we've added the first portion of the error message ...
					error_message=error_message .. ", ";						-- ... add a comma space separator
				end
				error_message=error_message .. "&amp;#124;" .. v.name .. "=";		-- add the failed parameter
			end
		end
	end
	return anchor_year, embargo_date, error_message;							-- and done
end


--[[--------------------------&lt; Y E A R _ D A T E _ C H E C K &gt;------------------------------------------------

Compare the value provided in |year= with the year value(s) provided in |date=.  This function returns a numeric value:
	0 - year value does not match the year value in date
	1 - (default) year value matches the year value in date or one of the year values when date contains two years
	2 - year value matches the year value in date when date is in the form YYYY-MM-DD and year is disambiguated (|year=YYYYx)

]]

local function year_date_check (year_string, date_string)
	local year;
	local date1;
	local date2;
	local result = 1;															-- result of the test; assume that the test passes
	
	year = year_string:match ('(%d%d%d%d?)');

	if date_string:match ('%d%d%d%d%-%d%d%-%d%d') and year_string:match ('%d%d%d%d%a') then	--special case where both date and year are required YYYY-MM-DD and YYYYx
		date1 = date_string:match ('(%d%d%d%d)');
		year = year_string:match ('(%d%d%d%d)');
		if year ~= date1 then
			result = 0;															-- years don't match
		else
			result = 2;															-- years match; but because disambiguated, don't add to maint cat
		end
		
	elseif date_string:match ("%d%d%d%d?.-%d%d%d%d?") then						-- any of the standard range formats of date with two three- or four-digit years
		date1, date2 = date_string:match ("(%d%d%d%d?).-(%d%d%d%d?)");
		if year ~= date1 and year ~= date2 then
			result = 0;
		end

	elseif mw.ustring.match(date_string, "%d%d%d%d[%-–]%d%d") then				-- YYYY-YY date ranges
		local century;
		date1, century, date2 = mw.ustring.match(date_string, "((%d%d)%d%d)[%-–]+(%d%d)");
		date2 = century..date2;													-- convert YY to YYYY
		if year ~= date1 and year ~= date2 then
			result = 0;
		end

	elseif date_string:match ("%d%d%d%d?") then									-- any of the standard formats of date with one year
		date1 = date_string:match ("(%d%d%d%d?)");
		if year ~= date1 then
			result = 0;
		end
	else
		result = 0;																-- no recognizable year in date
	end
	return result;
end


--[[--------------------------&lt; R E F O R M A T T E R &gt;--------------------------------------------------------

reformat 'date' into new format specified by format_param if pattern_idx (the current format of 'date') can be
reformatted.  Does the grunt work for reformat_dates().

The table re_formats maps patern_idx (current format) and format_param (desired format) to a table that holds:
	format string used by string.format()
	identifier letters ('d', 'm', 'y', 'd2', 'm2', 'y2') that serve as indexes into a table t{} that holds captures
		from mw.ustring.match() for the various date parts specified by  patterns[pattern_idx][1]

Items in patterns{} have the general form:
	['ymd'] = {'^(%d%d%d%d)%-(%d%d)%-(%d%d)$', 'y', 'm', 'd'}, where:
		['ymd'] is pattern_idx
		patterns['ymd'][1] is the match pattern with captures for mw.ustring.match()
		patterns['ymd'][2] is an indicator letter identifying the content of the first capture
		patterns['ymd'][3] ... the second capture etc

when a pattern matches a date, the captures are loaded into table t{} in capture order using the idemtifier
characters as indexes into t{}  For the above, a ymd date is in t{} as:
	t.y = first capture (year), t.m = second capture (month), t.d = third capture (day)

To reformat, this function is called with the pattern_idx that matches the current format of the date and with
format_param set to the desired format.  This function loads table t{} as described and then calls string.format()
with the format string specified by re_format[pattern_idx][format_param][1] using values taken from t{} according
to the capture identifier letters specified by patterns[pattern_idx][format_param][n] where n is 2..

]]

local re_formats = {
	['ymd'] = {																	-- date format is ymd; reformat to:
		['mdy'] = {'%s %s, %s', 'm', 'd', 'y'},									-- |df=mdy
		['dmy'] = {'%s %s %s', 'd', 'm', 'y'},									-- |df=dmy
--		['yMd'] = {'%s %s %s', 'y', 'm', 'd'},									-- |df=yMd; not supported at en.wiki
		},
	['Mdy'] = {																	-- date format is Mdy; reformat to:
		['mdy'] = {'%s %s, %s', 'm', 'd', 'y'},									-- for long/short reformatting
		['dmy'] = {'%s %s %s', 'd', 'm', 'y'},									-- |df=dmy
		['ymd'] = {'%s-%s-%s', 'y', 'm', 'd'},									-- |df=ymd
--		['yMd'] = {'%s %s %s', 'y', 'm', 'd'},									-- |df=yMd; not supported at en.wiki
		},
	['dMy'] = {																	-- date format is dMy; reformat to:
		['dmy'] = {'%s %s %s', 'd', 'm', 'y'},									-- for long/short reformatting
		['mdy'] = {'%s %s, %s', 'm', 'd', 'y'},									-- |df=mdy
		['ymd'] = {'%s-%s-%s', 'y', 'm', 'd'},									-- |df=ymd
--		['yMd'] = {'%s %s %s', 'y', 'm', 'd'},									-- |df=yMd; not supported at en.wiki
		},
	['Md-dy'] = {																-- date format is Md-dy; reformat to:
		['mdy'] = {'%s %s–%s, %s', 'm', 'd', 'd2', 'y'},						-- for long/short reformatting
		['dmy'] = {'%s–%s %s %s', 'd', 'd2', 'm', 'y'},							-- |df=dmy -&gt; d-dMy 
		},
	['d-dMy'] = {																-- date format is d-d&gt;y; reformat to:
		['dmy'] = {'%s–%s %s %s', 'd', 'd2', 'm', 'y'},							-- for long/short reformatting
		['mdy'] = {'%s %s–%s, %s', 'm', 'd', 'd2', 'y'},						-- |df=mdy -&gt; Md-dy 
		},
	['dM-dMy'] = {																-- date format is dM-dMy; reformat to:
		['dmy'] = {'%s %s – %s %s %s', 'd', 'm', 'd2', 'm2', 'y'},				-- for long/short reformatting
		['mdy'] = {'%s %s – %s %s, %s', 'm', 'd', 'm2', 'd2', 'y'},				-- |df=mdy -&gt; Md-Mdy 
		},
	['Md-Mdy'] = {																-- date format is Md-Mdy; reformat to:
		['mdy'] = {'%s %s – %s %s, %s', 'm', 'd',  'm2', 'd2', 'y'},			-- for long/short reformatting
		['dmy'] = {'%s %s – %s %s %s', 'd', 'm', 'd2', 'm2', 'y'},				-- |df=dmy -&gt; dM-dMy 
		},
	['dMy-dMy'] = {																-- date format is dMy-dMy; reformat to:
		['dmy'] = {'%s %s %s – %s %s %s', 'd', 'm', 'y', 'd2', 'm2', 'y2'},		-- for long/short reformatting
		['mdy'] = {'%s %s, %s – %s %s, %s', 'm', 'd', 'y', 'm2', 'd2', 'y2'},	-- |df=mdy -&gt; Mdy-Mdy 
		},
	['Mdy-Mdy'] = {																-- date format is Mdy-Mdy; reformat to:
		['mdy'] = {'%s %s, %s – %s %s, %s', 'm', 'd', 'y', 'm2', 'd2', 'y2'},	-- for long/short reformatting
		['dmy'] = {'%s %s %s – %s %s %s', 'd', 'm', 'y', 'd2', 'm2', 'y2'},		-- |df=dmy -&gt; dMy-dMy 
		},
	['My-My'] = {																-- these for long/short reformatting
		['any'] = {'%s %s – %s %s', 'm', 'y', 'm2', 'y2'},						-- dmy/mdy agnostic
		},
	['M-My'] = {																-- these for long/short reformatting
		['any'] = {'%s–%s %s', 'm', 'm2', 'y'},									-- dmy/mdy agnostic
		},
	['My'] = {																	-- these for long/short reformatting
		['any'] = {'%s %s', 'm', 'y'},											-- dmy/mdy agnostic
		},
--	['yMd'] = {																	-- not supported at en.wiki
--		['mdy'] = {'%s %s, %s', 'm', 'd', 'y'},									-- |df=mdy
--		['dmy'] = {'%s %s %s', 'd', 'm', 'y'},									-- |df=dmy
--		['ymd'] = {'%s-%s-%s', 'y', 'm', 'd'},									-- |df=ymd
--		},
	}


local function reformatter (date, pattern_idx, format_param, mon_len)
	if not in_array (pattern_idx, {'ymd', 'Mdy', 'Md-dy', 'dMy', 'yMd', 'd-dMy', 'dM-dMy', 'Md-Mdy', 'dMy-dMy', 'Mdy-Mdy', 'My-My', 'M-My', 'My'}) then
		return;																	-- not in this set of date format patterns then not a reformattable date
	end
	
	if 'ymd' == format_param and in_array (pattern_idx, {'ymd', 'Md-dy', 'd-dMy', 'dM-dMy', 'Md-Mdy', 'dMy-dMy', 'Mdy-Mdy', 'My-My', 'M-My', 'My'}) then
		return;																	-- ymd date ranges not supported at en.wiki; no point in reformatting ymd to ymd
	end

	if in_array (pattern_idx, {'My', 'M-My', 'My-My'}) then						-- these are not dmy/mdy so can't be 'reformatted' into either
		format_param = 'any';													-- so format-agnostic 
	end

--	if 'yMd' == format_param and in_array (pattern_idx, {'yMd', 'Md-dy', 'd-dMy', 'dM-dMy', 'Md-Mdy', 'dMy-dMy', 'Mdy-Mdy'}) then	-- not supported at en.wiki
	if 'yMd' == format_param then												-- not supported at en.wiki
		return;																	-- not a reformattable date
	end
	
	local c1, c2, c3, c4, c5, c6, c7;											-- these hold the captures specified in patterns[pattern_idx][1]
	c1, c2, c3, c4, c5, c6, c7 = mw.ustring.match (date, patterns[pattern_idx][1]);	-- get the captures

	local t = {																	-- table that holds k/v pairs of date parts from the captures and patterns[pattern_idx][2..]
		[patterns[pattern_idx][2]] = c1;										-- at minimum there is always one capture with a matching indicator letter
		[patterns[pattern_idx][3] or 'x'] = c2;									-- patterns can have a variable number of captures; each capture requires an indicator letter;
		[patterns[pattern_idx][4] or 'x'] = c3;									-- where there is no capture, there is no indicator letter so n in patterns[pattern_idx][n] will be nil;
		[patterns[pattern_idx][5] or 'x'] = c4;									-- the 'x' here spoofs an indicator letter to prevent 'table index is nil' error
		[patterns[pattern_idx][6] or 'x'] = c5;
		[patterns[pattern_idx][7] or 'x'] = c6;
		[patterns[pattern_idx][8] or 'x'] = c7;
		};

	if tonumber(t.m) then														-- if raw month is a number (converting from ymd)
		if 's' == mon_len then													-- if we are to use abbreviated month names
			t.m = cfg.date_names['inv_local_s'][tonumber(t.m)];					-- convert it to a month name
		else
			t.m = cfg.date_names['inv_local_l'][tonumber(t.m)];					-- convert it to a month name
		end
		t.d = t.d:gsub ('0(%d)', '%1');											-- strip leading '0' from day if present
	elseif 'ymd' == format_param then											-- when converting to ymd
		if 1582 &gt; tonumber(t.y) then											-- ymd format dates not allowed before 1582
			return;
		end
		t.m = string.format ('%02d', get_month_number (t.m));					-- make sure that month and day are two digits
		t.d = string.format ('%02d', t.d);
	elseif mon_len then															-- if mon_len is set to either 'short' or 'long'
		for _, mon in ipairs ({'m', 'm2'}) do									-- because there can be two month names, check both 
			if t[mon] then
				t[mon] = get_month_number (t[mon]);								-- get the month number for this month (is length agnostic)
				if 0 == t[mon] then return; end									-- seasons and named dates can't be converted
				t[mon] = (('s' == mon_len) and cfg.date_names['inv_local_s'][t[mon]]) or cfg.date_names['inv_local_l'][t[mon]];	-- fetch month name according to length
			end
		end
	end

	local new_date = string.format (re_formats[pattern_idx][format_param][1],	-- format string
		t[re_formats[pattern_idx][format_param][2]],							-- named captures from t{}
		t[re_formats[pattern_idx][format_param][3]],
		t[re_formats[pattern_idx][format_param][4]],
		t[re_formats[pattern_idx][format_param][5]],
		t[re_formats[pattern_idx][format_param][6]],
		t[re_formats[pattern_idx][format_param][7]],
		t[re_formats[pattern_idx][format_param][8]]
		);

	return new_date;
end


--[[-------------------------&lt; R E F O R M A T _ D A T E S &gt;--------------------------------------------------

Reformats existing dates into the format specified by format.

format is one of several manual keywords: dmy, dmy-all, mdy, mdy-all, ymd, ymd-all.  The -all version includes
access- and archive-dates; otherwise these dates are not reformatted.

This function allows automatic date formatting.  In ~/Configuration, the article source is searched for one of
the {{use xxx dates}} templates.  If found, xxx becomes the global date format as xxx-all.  If |cs1-dates= in
{{use xxx dates}} has legitimate value then that value determines how cs1|2 dates will be rendered.  Legitimate
values for |cs1-dates= are:
	l - all dates are rendered with long month names
	ls - publication dates use long month names; access-/archive-dates use abbreviated month names
	ly - publication dates use long month names; access-/archive-dates rendered in ymd format
	s - all dates are rendered with abbreviated (short) month names
	sy - publication dates use abbreviated month names; access-/archive-dates rendered in ymd format
	y - all dates are rendered in ymd format

the format argument for automatic date formatting will be the format specified by {{use xxx dates}} with the
value supplied by |cs1-dates so one of: xxx-l, xxx-ls, xxx-ly, xxx-s, xxx-sy, xxx-y, or simply xxx (|cs1-dates=
empty, omitted, or invalid) where xxx shall be either of dmy or mdy.

dates are extracted from date_parameters_list, reformatted (if appropriate), and then written back into the
list in the new format.  Dates in date_parameters_list are presumed here to be valid (no errors).  This function
returns true when a date has been reformatted, false else.  Actual reformatting is done by reformatter().

]]

local function reformat_dates (date_parameters_list, format)
	local all = false;															-- set to false to skip access- and archive-dates
	local len_p = 'l';															-- default publication date length shall be long
	local len_a = 'l';															-- default access-/archive-date length shall be long
	local result = false;
	local new_date;																
	
	if format:match('%a+%-all') then											-- manual df keyword; auto df keyword when length not specified in {{use xxx dates}}; 
		format = format:match('(%a+)%-all');									-- extract the format
		all = true;																-- all dates are long format dates because this keyword doesn't specify length
	elseif format:match('%a+%-[lsy][sy]?') then									-- auto df keywords; internal only
		all = true;																-- auto df applies to all dates; use length specified by capture len_p for all dates
		format, len_p, len_a = format:match('(%a+)%-([lsy])([sy]?)');			-- extract the format and length keywords
		if 'y' == len_p then													-- because allowed by MOS:DATEUNIFY (sort of) range dates and My dates not reformatted
			format = 'ymd';														-- override {{use xxx dates}}
		elseif (not is_set(len_a)) or (len_p == len_a) then						-- no access-/archive-date length specified or same length as publication dates then
			len_a = len_p;														-- in case len_a not set
		end
	end																			-- else only publication dates and they are long

	for param_name, param_val in pairs (date_parameters_list) do				-- for each date-holding parameter in the list
		if is_set (param_val.val) then											-- if the parameter has a value
			if not (not all and in_array (param_name, {'access-date', 'archive-date'})) then	-- skip access- or archive-date unless format is xxx-all; yeah, ugly; TODO: find a better way
				for pattern_idx, pattern in pairs (patterns) do
					if mw.ustring.match (param_val.val, pattern[1]) then
						if all and in_array (param_name, {'access-date', 'archive-date'}) then	-- if this date is an access- or archive-date
							new_date = reformatter (param_val.val, pattern_idx, (('y' == len_a) and 'ymd') or format, len_a);	-- choose ymd or dmy/mdy according to len_a setting
						else													-- all other dates
							new_date = reformatter (param_val.val, pattern_idx, format, len_p);
						end
						
						if new_date then										-- set when date was reformatted
							date_parameters_list[param_name].val = new_date;	-- update date in date list
							result = true;										-- and announce that changes have been made
						end
					end	-- if
				end		-- for
			end			-- if
		end				-- if
	end					-- for
return result;																	-- declare boolean result and done
end


--[[--------------------------&lt; D A T E _ H Y P H E N _ T O _ D A S H &gt;----------------------------------------

Loops through the list of date-holding parameters and converts any hyphen to an ndash.  Not called if the cs1|2
template has any date errors.

Modifies the date_parameters_list and returns true if hyphens are replaced, else returns false.

]]

local function date_hyphen_to_dash (date_parameters_list)
	local result = false;
	local n;
	for param_name, param_val in pairs(date_parameters_list) do					-- for each date-holding parameter in the list
		if is_set (param_val.val) then
			if not mw.ustring.match (param_val.val, '%d%d%d%d%-%d%d%-%d%d') then	-- for those that are not ymd dates (ustring because here digits may not be western)
				param_val.val, n = param_val.val:gsub ('%-', '–');				-- replace any hyphen with ndash
				if 0 ~= n then
					date_parameters_list[param_name].val = param_val.val;		-- update the list
					result = true;
				end
			end
		end
	end
	return result;																-- so we know if any hyphens were replaced
end


--[[-------------------------&lt; D A T E _ N A M E _ X L A T E &gt;------------------------------------------------

Attempts to translate English month names to local-language month names using names supplied by MediaWiki's
date parser function.  This is simple name-for-name replacement and may not work for all languages.

if xlat_dig is true, this function will also translate western (English) digits to the local language's digits.
This will also translate ymd dates.

]]

local function	date_name_xlate (date_parameters_list, xlt_dig)
	local xlate;
	local mode;																	-- long or short month names
	local modified = false;
	local date;
	
	for param_name, param_val in pairs(date_parameters_list) do					-- for each date-holding parameter in the list
		if is_set(param_val.val) then											-- if the parameter has a value
			date = param_val.val;
			for month in mw.ustring.gmatch (date, '%a+') do						-- iterate through all dates in the date (single date or date range)
				if cfg.date_names.en.long[month] then
					mode = 'F';													-- English name is long so use long local name
				elseif cfg.date_names.en.short[month] then
					mode = 'M';													-- English name is short so use short local name
				else
					mode = nil;													-- not an English month name; could be local language month name or an English season name
				end
		
				if mode then													-- might be a season
					xlate = mw.getContentLanguage():formatDate(mode, '1' .. month);	-- translate the month name to this local language
					date = mw.ustring.gsub (date, month, xlate);				-- replace the English with the translation
					date_parameters_list[param_name].val = date;				-- save the translated date
					modified = true;
				end
			end

			if xlt_dig then														-- shall we also translate digits?
				date = date:gsub ('%d', cfg.date_names.xlate_digits);			-- translate digits from western to 'local digits'
				date_parameters_list[param_name].val = date;					-- save the translated date
				modified = true;
			end
		end
	end
	
	return modified;
	end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local imported functions table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr, utilities_page_ptr)
	is_set = utilities_page_ptr.is_set;											-- import functions from selected Module:Citation/CS1/Utilities module
	in_array = utilities_page_ptr.in_array;										-- import functions from selected Module:Citation/CS1/Utilities module
	cfg = cfg_table_ptr;														-- import tables from selected Module:Citation/CS1/Configuration
end


--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {																		-- return exported functions
	dates = dates,
	year_date_check = year_date_check,
	reformat_dates = reformat_dates,
	date_hyphen_to_dash = date_hyphen_to_dash,
	date_name_xlate = date_name_xlate,
	set_selected_modules = set_selected_modules
	}</text>
      <sha1>fs1ivpn6x0ray56v3tidzkgwtdi6v7s</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Identifiers</title>
    <ns>828</ns>
    <id>48812124</id>
    <revision>
      <id>913814848</id>
      <parentid>900551956</parentid>
      <timestamp>2019-09-03T11:05:55Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>sync from sandbox;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="49768">
--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local is_set, in_array, set_error, select_one, add_maint_cat, substitute, make_wikilink;	-- functions in Module:Citation/CS1/Utilities

local z;																		-- table of tables defined in Module:Citation/CS1/Utilities

local cfg;																		-- table of configuration tables that are defined in Module:Citation/CS1/Configuration


--============================&lt;&lt; H E L P E R   F U N C T I O N S &gt;&gt;============================================

--[[--------------------------&lt; E X T E R N A L _ L I N K _ I D &gt;----------------------------------------------

Formats a wiki style external link

]]

local function external_link_id(options)
	local url_string = options.id;
	local ext_link;
	local this_wiki_code;														-- wikipedia subdomain; 'en' for en.wikipedia.org
	local wd_article;															-- article title from wikidata
	
	if options.encode == true or options.encode == nil then
		url_string = mw.uri.encode( url_string );
	end

	ext_link = mw.ustring.format ('[%s%s%s %s]', options.prefix, url_string, options.suffix or "", mw.text.nowiki(options.id));
	if is_set(options.access) then
		ext_link = substitute (cfg.presentation['ext-link-access-signal'], {cfg.presentation[options.access].class, cfg.presentation[options.access].title, ext_link});	-- add the free-to-read / paywall lock
	end

	this_wiki_code = mw.language.getContentLanguage():getCode();				-- get this wikipedia's language code (subdomain)
	
	if string.match (mw.site.server, 'wikidata') then
		this_wiki_code = mw.getCurrentFrame():preprocess('{{int:lang}}');		-- on wikidata so use interface language setting instead
	end
	
	if is_set (options.q) and mw.wikibase then									-- wikibase test here avoids script errors in third party wikis that aren't using mw.wikibase extension
		wd_article = mw.wikibase.getEntity (options.q):getSitelink (this_wiki_code .. 'wiki');	-- fetch article title from wd
		if wd_article then
			wd_article = table.concat ({':', this_wiki_code, ':', wd_article});	-- make interwiki link if taken from wd; leading colon required
		end
	end

	return table.concat	({
		make_wikilink (wd_article or options.link, options.label),				-- wikidata link or locally specified
		options.separator or '&amp;nbsp;',
		ext_link
		});
end


--[[--------------------------&lt; I N T E R N A L _ L I N K _ I D &gt;----------------------------------------------

Formats a wiki style internal link

]]

local function internal_link_id(options)
	local id = mw.ustring.gsub (options.id, '%d', cfg.date_names.local_digits);	-- translate 'local' digits to Western 0-9

	return table.concat (
		{
		make_wikilink (options.link, options.label),
		options.separator or '&amp;nbsp;',
		make_wikilink (
			table.concat (
				{
				options.prefix,
				id,																-- translated to western digits
				options.suffix or ''
				}),
			substitute (cfg.presentation['bdi'], {'', mw.text.nowiki (options.id)})	-- bdi tags to prevent Latn script identifiers from being reversed at rtl language wikis
			);																	-- nowiki because MediaWiki still has magic links for ISBN and the like; TODO: is it really required?
		});
end


--[[--------------------------&lt; I S _ E M B A R G O E D &gt;------------------------------------------------------

Determines if a PMC identifier's online version is embargoed. Compares the date in |embargo= against today's date.  If embargo date is
in the future, returns the content of |embargo=; otherwise, returns and empty string because the embargo has expired or because
|embargo= was not set in this cite.

]]

local function is_embargoed (embargo)
	if is_set (embargo) then
		local lang = mw.getContentLanguage();
		local good1, embargo_date, good2, todays_date;
		good1, embargo_date = pcall( lang.formatDate, lang, 'U', embargo );
		good2, todays_date = pcall( lang.formatDate, lang, 'U' );
	
		if good1 and good2 then													-- if embargo date and today's date are good dates
			if tonumber( embargo_date ) &gt;= tonumber( todays_date ) then			-- is embargo date is in the future?
				return embargo;													-- still embargoed
			else
				add_maint_cat ('embargo')
				return '';														-- unset because embargo has expired
			end
		end
	end
	return '';																	-- |embargo= not set return empty string
end


--[[--------------------------&lt; IS _ V A L I D _ I S X N &gt;-----------------------------------------------------

ISBN-10 and ISSN validator code calculates checksum across all isbn/issn digits including the check digit.
ISBN-13 is checked in isbn().

If the number is valid the result will be 0. Before calling this function, issbn/issn must be checked for length
and stripped of dashes, spaces and other non-isxn characters.

]]

local function is_valid_isxn (isxn_str, len)
	local temp = 0;
	isxn_str = { isxn_str:byte(1, len) };	-- make a table of byte values '0' → 0x30 .. '9' → 0x39, 'X' → 0x58
	len = len+1;							-- adjust to be a loop counter
	for i, v in ipairs( isxn_str ) do		-- loop through all of the bytes and calculate the checksum
		if v == string.byte( "X" ) then		-- if checkdigit is X (compares the byte value of 'X' which is 0x58)
			temp = temp + 10*( len - i );	-- it represents 10 decimal
		else
			temp = temp + tonumber( string.char(v) )*(len-i);
		end
	end
	return temp % 11 == 0;					-- returns true if calculation result is zero
end


--[[--------------------------&lt; IS _ V A L I D _ I S X N _ 1 3 &gt;-----------------------------------------------

ISBN-13 and ISMN validator code calculates checksum across all 13 isbn/ismn digits including the check digit.
If the number is valid, the result will be 0. Before calling this function, isbn-13/ismn must be checked for length
and stripped of dashes, spaces and other non-isxn-13 characters.

]]

local function is_valid_isxn_13 (isxn_str)
	local temp=0;
	
	isxn_str = { isxn_str:byte(1, 13) };										-- make a table of byte values '0' → 0x30 .. '9' → 0x39
	for i, v in ipairs( isxn_str ) do
		temp = temp + (3 - 2*(i % 2)) * tonumber( string.char(v) );				-- multiply odd index digits by 1, even index digits by 3 and sum; includes check digit
	end
	return temp % 10 == 0;														-- sum modulo 10 is zero when isbn-13/ismn is correct
end


--[[--------------------------&lt; N O R M A L I Z E _ L C C N &gt;--------------------------------------------------

lccn normalization (http://www.loc.gov/marc/lccn-namespace.html#normalization)
1. Remove all blanks.
2. If there is a forward slash (/) in the string, remove it, and remove all characters to the right of the forward slash.
3. If there is a hyphen in the string:
	a. Remove it.
	b. Inspect the substring following (to the right of) the (removed) hyphen. Then (and assuming that steps 1 and 2 have been carried out):
		1. All these characters should be digits, and there should be six or less. (not done in this function)
		2. If the length of the substring is less than 6, left-fill the substring with zeroes until the length is six.

Returns a normalized lccn for lccn() to validate.  There is no error checking (step 3.b.1) performed in this function.
]]

local function normalize_lccn (lccn)
	lccn = lccn:gsub ("%s", "");									-- 1. strip whitespace

	if nil ~= string.find (lccn,'/') then
		lccn = lccn:match ("(.-)/");								-- 2. remove forward slash and all character to the right of it
	end

	local prefix
	local suffix
	prefix, suffix = lccn:match ("(.+)%-(.+)");						-- 3.a remove hyphen by splitting the string into prefix and suffix

	if nil ~= suffix then											-- if there was a hyphen
		suffix=string.rep("0", 6-string.len (suffix)) .. suffix;	-- 3.b.2 left fill the suffix with 0s if suffix length less than 6
		lccn=prefix..suffix;										-- reassemble the lccn
	end
	
	return lccn;
	end

--============================&lt;&lt; I D E N T I F I E R   F U N C T I O N S &gt;&gt;====================================

--[[--------------------------&lt; A R X I V &gt;--------------------------------------------------------------------

See: http://arxiv.org/help/arxiv_identifier

format and error check arXiv identifier.  There are three valid forms of the identifier:
the first form, valid only between date codes 9108 and 0703 is:
	arXiv:&lt;archive&gt;.&lt;class&gt;/&lt;date code&gt;&lt;number&gt;&lt;version&gt;
where:
	&lt;archive&gt; is a string of alpha characters - may be hyphenated; no other punctuation
	&lt;class&gt; is a string of alpha characters - may be hyphenated; no other punctuation; not the same as |class= parameter which is not supported in this form
	&lt;date code&gt; is four digits in the form YYMM where YY is the last two digits of the four-digit year and MM is the month number January = 01
		first digit of YY for this form can only 9 and 0
	&lt;number&gt; is a three-digit number
	&lt;version&gt; is a 1 or more digit number preceded with a lowercase v; no spaces (undocumented)
	
the second form, valid from April 2007 through December 2014 is:
	arXiv:&lt;date code&gt;.&lt;number&gt;&lt;version&gt;
where:
	&lt;date code&gt; is four digits in the form YYMM where YY is the last two digits of the four-digit year and MM is the month number January = 01
	&lt;number&gt; is a four-digit number
	&lt;version&gt; is a 1 or more digit number preceded with a lowercase v; no spaces

the third form, valid from January 2015 is:
	arXiv:&lt;date code&gt;.&lt;number&gt;&lt;version&gt;
where:
	&lt;date code&gt; and &lt;version&gt; are as defined for 0704-1412
	&lt;number&gt; is a five-digit number
]]

local function arxiv (id, class)
	local handler = cfg.id_handlers['ARXIV'];
	local year, month, version;
	local err_cat = false;														-- assume no error message
	local text;																	-- output text
	
	if id:match("^%a[%a%.%-]+/[90]%d[01]%d%d%d%d$") or id:match("^%a[%a%.%-]+/[90]%d[01]%d%d%d%dv%d+$") then	-- test for the 9108-0703 format w/ &amp; w/o version
		year, month = id:match("^%a[%a%.%-]+/([90]%d)([01]%d)%d%d%d[v%d]*$");
		year = tonumber(year);
		month = tonumber(month);
		if ((not (90 &lt; year or 8 &gt; year)) or (1 &gt; month or 12 &lt; month)) or		-- if invalid year or invalid month
			((91 == year and 7 &gt; month) or (7 == year and 3 &lt; month)) then		-- if years ok, are starting and ending months ok?
				err_cat = true;													-- flag for error message
		end

	elseif id:match("^%d%d[01]%d%.%d%d%d%d$") or id:match("^%d%d[01]%d%.%d%d%d%dv%d+$") then	-- test for the 0704-1412 w/ &amp; w/o version
		year, month = id:match("^(%d%d)([01]%d)%.%d%d%d%d[v%d]*$");
		year = tonumber(year);
		month = tonumber(month);
		if ((7 &gt; year) or (14 &lt; year) or (1 &gt; month or 12 &lt; month)) or			-- is year invalid or is month invalid? (doesn't test for future years)
			((7 == year) and (4 &gt; month)) then --or									-- when year is 07, is month invalid (before April)?
				err_cat = true;													-- flag for error message
		end

	elseif id:match("^%d%d[01]%d%.%d%d%d%d%d$") or id:match("^%d%d[01]%d%.%d%d%d%d%dv%d+$") then	-- test for the 1501- format w/ &amp; w/o version
		year, month = id:match("^(%d%d)([01]%d)%.%d%d%d%d%d[v%d]*$");
		year = tonumber(year);
		month = tonumber(month);
		if ((15 &gt; year) or (1 &gt; month or 12 &lt; month)) then						-- is year invalid or is month invalid? (doesn't test for future years)
				err_cat = true;													-- flag for error message
		end

	else
		err_cat = true;															-- not a recognized format; flag for error message
	end

	err_cat = err_cat and table.concat ({' ', set_error ('bad_arxiv')}) or '';	-- set error message if flag is true
	
	text = external_link_id({link = handler.link, label = handler.label, q = handler.q,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode, access=handler.access}) .. err_cat;

	if is_set (class) then
		if id:match ('^%d+') then
			text = table.concat ({text, ' [[//arxiv.org/archive/', class, ' ', class, ']]'});	-- external link within square brackets, not wikilink
		else
			text = table.concat ({text, ' ', set_error ('class_ignored')});		
		end
	end

	return text;	
end


--[[--------------------------&lt; B I B C O D E &gt;--------------------------------------------------------------------

Validates (sort of) and formats a bibcode id.

Format for bibcodes is specified here: http://adsabs.harvard.edu/abs_doc/help_pages/data.html#bibcodes

But, this: 2015arXiv151206696F is apparently valid so apparently, the only things that really matter are length, 19 characters
and first four digits must be a year.  This function makes these tests:
	length must be 19 characters
	characters in position
		1–4 must be digits and must represent a year in the range of 1000 – next year
		5 must be a letter
		6–8 must be letter, digit, ampersand, or dot (ampersand cannot directly precede a dot; &amp;. )
		9–18 must be letter, digit, or dot
		19 must be a letter or dot

]]

local function bibcode (id, access)
	local handler = cfg.id_handlers['BIBCODE'];
	local err_type;
	local year;

	local text = external_link_id({link=handler.link, label=handler.label, q = handler.q,
		prefix=handler.prefix, id=id, separator=handler.separator, encode=handler.encode,
		access=access});
	
	if 19 ~= id:len() then
		err_type = 'length';
	else
		year = id:match ("^(%d%d%d%d)[%a][%w&amp;%.][%w&amp;%.][%w&amp;%.][%w.]+[%a%.]$")	-- 
		if not year then														-- if nil then no pattern match
			err_type = 'value';													-- so value error
		else
			local next_year = tonumber(os.date ('%Y'))+1;						-- get the current year as a number and add one for next year
			year = tonumber (year);												-- convert year portion of bibcode to a number
			if (1000 &gt; year) or (year &gt; next_year) then
				err_type = 'year';												-- year out of bounds
			end
			if id:find('&amp;%.') then
				err_type = 'journal';											-- journal abbreviation must not have '&amp;.' (if it does its missing a letter)
			end
		end
	end

	if is_set (err_type) then													-- if there was an error detected
		text = text .. ' ' .. set_error( 'bad_bibcode', {err_type});
	end
	return text;
end


--[[--------------------------&lt; B I O R X I V &gt;-----------------------------------------------------------------

Format bioRxiv id and do simple error checking.  BiorXiv ids are exactly 6 digits.
The bioRxiv id is the number following the last slash in the bioRxiv-issued DOI:
https://doi.org/10.1101/078733 -&gt; 078733

]]

local function biorxiv(id)
	local handler = cfg.id_handlers['BIORXIV'];
	local err_cat = '';															-- presume that bioRxiv id is valid
	
	if nil == id:match("^%d%d%d%d%d%d$") then									-- if bioRxiv id has anything but six digits
		err_cat = ' ' .. set_error( 'bad_biorxiv');	-- set an error message
	end
	
	return external_link_id({link = handler.link, label = handler.label, q = handler.q,
			prefix=handler.prefix,id=id,separator=handler.separator,
			encode=handler.encode, access=handler.access}) .. err_cat;
end


--[[--------------------------&lt; C I T E S E E R X &gt;------------------------------------------------------------

CiteSeerX use their own notion of "doi" (not to be confused with the identifiers resolved via doi.org).

The description of the structure of this identifier can be found at Help_talk:Citation_Style_1/Archive_26#CiteSeerX_id_structure
]]

local function citeseerx (id)
	local handler = cfg.id_handlers['CITESEERX'];
	local matched;
	
	local text = external_link_id({link=handler.link, label=handler.label, q = handler.q,
		prefix=handler.prefix, id=id, separator=handler.separator, encode=handler.encode,
		access=handler.access});
	
	matched = id:match ("^10%.1%.1%.[1-9]%d?%d?%d?%.[1-9]%d?%d?%d?$");
	if not matched then
		text = text .. ' ' .. set_error( 'bad_citeseerx' );
	end
	return text;
end


--[[--------------------------&lt; D O I &gt;------------------------------------------------------------------------

Formats a DOI and checks for DOI errors.

DOI names contain two parts: prefix and suffix separated by a forward slash.
	Prefix: directory indicator '10.' followed by a registrant code
	Suffix: character string of any length chosen by the registrant

This function checks a DOI name for: prefix/suffix.  If the doi name contains spaces or endashes, or, if it ends
with a period or a comma, this function will emit a bad_doi error message.

DOI names are case-insensitive and can incorporate any printable Unicode characters so the test for spaces, endash,
and terminal punctuation may not be technically correct but it appears, that in practice these characters are rarely
if ever used in doi names.

]]

local function doi(id, inactive, access)
	local cat = ""
	local handler = cfg.id_handlers['DOI'];
	
	local text;
	if is_set(inactive) then
		local inactive_year = inactive:match("%d%d%d%d") or '';					-- try to get the year portion from the inactive date
		local inactive_month, good;

		if is_set (inactive_year) then
			if 4 &lt; inactive:len() then											-- inactive date has more than just a year (could be anything)
				local lang_obj = mw.getContentLanguage();						-- get a language object for this wiki
				good, inactive_month = pcall (lang_obj.formatDate, lang_obj, 'F', inactive);	-- try to get the month name from the inactive date
				if not good then
					inactive_month = nil;										-- something went wrong so make sure this is unset
				end
			end
		else
			inactive_year = nil;												-- |doi-broken= has something but it isn't a date
		end
		
		if is_set(inactive_year) and is_set (inactive_month) then
			table.insert( z.error_categories, 'Pages with DOIs inactive as of ' .. inactive_year .. ' ' .. inactive_month);	-- use inactive month in category name
		elseif is_set(inactive_year) then
			table.insert( z.error_categories, 'Pages with DOIs inactive as of ' .. inactive_year);
		else
			table.insert( z.error_categories, 'Pages with inactive DOIs');		-- when inactive doesn't contain a recognizable date
		end
		inactive = " (" .. cfg.messages['inactive'] .. ' ' .. inactive .. ')';
	end

	text = external_link_id({link = handler.link, label = handler.label, q = handler.q,
		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode, access=access}) .. (inactive or '')

	if nil == id:match("^10%.[^%s–]-/[^%s–]-[^%.,]$") or						-- doi must begin with '10.', must contain a fwd slash, must not contain spaces or endashes, and must not end with period or comma
		id: match ('^10.5555') then												-- test doi will never resolve
			cat = ' ' .. set_error ('bad_doi');
	end

	return text .. cat 
end


--[[--------------------------&lt; H D L &gt;------------------------------------------------------------------------

Formats an HDL with minor error checking.

HDL names contain two parts: prefix and suffix separated by a forward slash.
	Prefix: character string using any character in the UCS-2 character set except '/'
	Suffix: character string of any length using any character in the UCS-2 character set chosen by the registrant

This function checks a HDL name for: prefix/suffix.  If the HDL name contains spaces, endashes, or, if it ends
with a period or a comma, this function will emit a bad_hdl error message.

HDL names are case-insensitive and can incorporate any printable Unicode characters so the test for endashes and
terminal punctuation may not be technically correct but it appears, that in practice these characters are rarely
if ever used in HDLs.

]]

local function hdl(id, access)
	local handler = cfg.id_handlers['HDL'];
	
	local text = external_link_id({link = handler.link, label = handler.label, q = handler.q,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode, access=access})

	if nil == id:match("^[^%s–]-/[^%s–]-[^%.,]$") then							-- hdl must contain a fwd slash, must not contain spaces, endashes, and must not end with period or comma
		text = text .. ' ' .. set_error( 'bad_hdl' );
	end
	return text;
end


--[[--------------------------&lt; I S B N &gt;----------------------------------------------------------------------

Determines whether an ISBN string is valid

]]

local function isbn( isbn_str )
	if nil ~= isbn_str:match("[^%s-0-9X]") then
		return false, 'invalid character';										-- fail if isbn_str contains anything but digits, hyphens, or the uppercase X
	end
	isbn_str = isbn_str:gsub( "-", "" ):gsub( " ", "" );						-- remove hyphens and spaces
	local len = isbn_str:len();
 
	if len ~= 10 and len ~= 13 then
		return false, 'length';													-- fail if incorrect length
	end

	if len == 10 then
		if isbn_str:match( "^%d*X?$" ) == nil then								-- fail if isbn_str has 'X' anywhere but last position
			return false, 'invalid form';									
		end
		return is_valid_isxn(isbn_str, 10), 'checksum';
	else
		if isbn_str:match( "^%d+$" ) == nil then
			return false, 'invalid character';									-- fail if isbn13 is not all digits
		end
		if isbn_str:match( "^97[89]%d*$" ) == nil then
			return false, 'invalid prefix';										-- fail when isbn13 does not begin with 978 or 979
		end
		return is_valid_isxn_13 (isbn_str), 'checksum';
	end
end


--[[--------------------------&lt; A M A Z O N &gt;------------------------------------------------------------------

Formats a link to Amazon.  Do simple error checking: asin must be mix of 10 numeric or uppercase alpha
characters.  If a mix, first character must be uppercase alpha; if all numeric, asins must be 10-digit
isbn. If 10-digit isbn, add a maintenance category so a bot or awb script can replace |asin= with |isbn=.
Error message if not 10 characters, if not isbn10, if mixed and first character is a digit.

This function is positioned here because it calls isbn()

]]

local function asin(id, domain)
	local err_cat = ""

	if not id:match("^[%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u][%d%u]$") then
		err_cat = ' ' .. set_error ('bad_asin');								-- asin is not a mix of 10 uppercase alpha and numeric characters
	else
		if id:match("^%d%d%d%d%d%d%d%d%d[%dX]$") then							-- if 10-digit numeric (or 9 digits with terminal X)
			if isbn( id ) then													-- see if asin value is isbn10
				add_maint_cat ('ASIN');
			elseif not is_set (err_cat) then
				err_cat = ' ' .. set_error ('bad_asin');						-- asin is not isbn10
			end
		elseif not id:match("^%u[%d%u]+$") then
			err_cat = ' ' .. set_error ('bad_asin');							-- asin doesn't begin with uppercase alpha
		end
	end
	if not is_set(domain) then 
		domain = "com";
	elseif in_array (domain, {'jp', 'uk'}) then			-- Japan, United Kingdom
		domain = "co." .. domain;
	elseif in_array (domain, {'au', 'br', 'mx'}) then	-- Australia, Brazil, Mexico
		domain = "com." .. domain;
	end
	local handler = cfg.id_handlers['ASIN'];
	return external_link_id({link=handler.link,
		label=handler.label, q = handler.q, prefix=handler.prefix .. domain .. "/dp/",
		id=id, encode=handler.encode, separator = handler.separator}) .. err_cat;
end


--[[--------------------------&lt; I S M N &gt;----------------------------------------------------------------------

Determines whether an ISMN string is valid.  Similar to isbn-13, ismn is 13 digits begining 979-0-... and uses the
same check digit calculations.  See http://www.ismn-international.org/download/Web_ISMN_Users_Manual_2008-6.pdf
section 2, pages 9–12.

]]

local function ismn (id)
	local handler = cfg.id_handlers['ISMN'];
	local text;
	local valid_ismn = true;
	local id_copy;

	id_copy = id;																-- save a copy because this testing is destructive
	id=id:gsub( "[%s-–]", "" );													-- strip spaces, hyphens, and endashes from the ismn

	if 13 ~= id:len() or id:match( "^9790%d*$" ) == nil then					-- ismn must be 13 digits and begin 9790
		valid_ismn = false;
	else
		valid_ismn=is_valid_isxn_13 (id);										-- validate ismn
	end

--	text = internal_link_id({link = handler.link, label = handler.label,		-- use this (or external version) when there is some place to link to
--		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode})
 
	text = table.concat (
		{
		make_wikilink (handler.link, handler.label),
		handler.separator,
		id_copy
		});		-- because no place to link to yet

	if false == valid_ismn then
		text = text .. ' ' .. set_error( 'bad_ismn' )							-- add an error message if the ismn is invalid
	end 
	
	return text;
end


--[[--------------------------&lt; I S S N &gt;----------------------------------------------------------------------

Validate and format an issn.  This code fixes the case where an editor has included an ISSN in the citation but
has separated the two groups of four digits with a space.  When that condition occurred, the resulting link looked
like this:

	|issn=0819 4327 gives: [http://www.worldcat.org/issn/0819 4327 0819 4327]	-- can't have spaces in an external link
	
This code now prevents that by inserting a hyphen at the issn midpoint.  It also validates the issn for length
and makes sure that the checkdigit agrees with the calculated value.  Incorrect length (8 digits), characters
other than 0-9 and X, or checkdigit / calculated value mismatch will all cause a check issn error message.  The
issn is always displayed with a hyphen, even if the issn was given as a single group of 8 digits.

]]

local function issn(id, e)
	local issn_copy = id;														-- save a copy of unadulterated issn; use this version for display if issn does not validate
	local handler;
	local text;
	local valid_issn = true;
	
	if e then
		 handler = cfg.id_handlers['EISSN'];
	else
		 handler = cfg.id_handlers['ISSN'];
	end

	id=id:gsub( "[%s-–]", "" );													-- strip spaces, hyphens, and endashes from the issn

	if 8 ~= id:len() or nil == id:match( "^%d*X?$" ) then						-- validate the issn: 8 digits long, containing only 0-9 or X in the last position
		valid_issn=false;														-- wrong length or improper character
	else
		valid_issn=is_valid_isxn(id, 8);										-- validate issn
	end

	if true == valid_issn then
		id = string.sub( id, 1, 4 ) .. "-" .. string.sub( id, 5 );				-- if valid, display correctly formatted version
	else
		id = issn_copy;															-- if not valid, use the show the invalid issn with error message
	end
	
	text = external_link_id({link = handler.link, label = handler.label, q = handler.q,
		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode})
 
	if false == valid_issn then
		text = text .. ' ' .. set_error( 'bad_issn', e and 'e' or '' )			-- add an error message if the issn is invalid
	end 
	
	return text
end


--[[--------------------------&lt; J F M &gt;-----------------------------------------------------------------------

A numerical identifier in the form nn.nnnn.nn

]]

local function jfm (id)
	local handler = cfg.id_handlers['JFM'];
	local id_num;
	local err_cat = '';
	
	id_num = id:match ('^[Jj][Ff][Mm](.*)$');									-- identifier with jfm prefix; extract identifier

	if is_set (id_num) then
		add_maint_cat ('jfm_format');
	else																		-- plain number without mr prefix
		id_num = id;															-- if here id does not have prefix
	end

	if id_num and id_num:match('^%d%d%.%d%d%d%d%.%d%d$') then
		id = id_num;															-- jfm matches pattern
	else
		err_cat = ' ' .. set_error( 'bad_jfm' );								-- set an error message
	end
	
	return external_link_id({link = handler.link, label = handler.label, q = handler.q,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
end


--[[--------------------------&lt; L C C N &gt;----------------------------------------------------------------------

Format LCCN link and do simple error checking.  LCCN is a character string 8-12 characters long. The length of
the LCCN dictates the character type of the first 1-3 characters; the rightmost eight are always digits.
http://info-uri.info/registry/OAIHandler?verb=GetRecord&amp;metadataPrefix=reg&amp;identifier=info:lccn/

length = 8 then all digits
length = 9 then lccn[1] is lower case alpha
length = 10 then lccn[1] and lccn[2] are both lower case alpha or both digits
length = 11 then lccn[1] is lower case alpha, lccn[2] and lccn[3] are both lower case alpha or both digits
length = 12 then lccn[1] and lccn[2] are both lower case alpha

]]

local function lccn(lccn)
	local handler = cfg.id_handlers['LCCN'];
	local err_cat = '';															-- presume that LCCN is valid
	local id = lccn;															-- local copy of the lccn

	id = normalize_lccn (id);													-- get canonical form (no whitespace, hyphens, forward slashes)
	local len = id:len();														-- get the length of the lccn

	if 8 == len then
		if id:match("[^%d]") then												-- if LCCN has anything but digits (nil if only digits)
			err_cat = ' ' .. set_error( 'bad_lccn' );							-- set an error message
		end
	elseif 9 == len then														-- LCCN should be adddddddd
		if nil == id:match("%l%d%d%d%d%d%d%d%d") then							-- does it match our pattern?
			err_cat = ' ' .. set_error( 'bad_lccn' );							-- set an error message
		end
	elseif 10 == len then														-- LCCN should be aadddddddd or dddddddddd
		if id:match("[^%d]") then												-- if LCCN has anything but digits (nil if only digits) ...
			if nil == id:match("^%l%l%d%d%d%d%d%d%d%d") then					-- ... see if it matches our pattern
				err_cat = ' ' .. set_error( 'bad_lccn' );						-- no match, set an error message
			end
		end
	elseif 11 == len then														-- LCCN should be aaadddddddd or adddddddddd
		if not (id:match("^%l%l%l%d%d%d%d%d%d%d%d") or id:match("^%l%d%d%d%d%d%d%d%d%d%d")) then	-- see if it matches one of our patterns
			err_cat = ' ' .. set_error( 'bad_lccn' );							-- no match, set an error message
		end
	elseif 12 == len then														-- LCCN should be aadddddddddd
		if not id:match("^%l%l%d%d%d%d%d%d%d%d%d%d") then						-- see if it matches our pattern
			err_cat = ' ' .. set_error( 'bad_lccn' );							-- no match, set an error message
		end
	else
		err_cat = ' ' .. set_error( 'bad_lccn' );								-- wrong length, set an error message
	end

	if not is_set (err_cat) and nil ~= lccn:find ('%s') then
		err_cat = ' ' .. set_error( 'bad_lccn' );								-- lccn contains a space, set an error message
	end

	return external_link_id({link = handler.link, label = handler.label, q = handler.q,
			prefix=handler.prefix,id=lccn,separator=handler.separator, encode=handler.encode}) .. err_cat;
end


--[[--------------------------&lt; M R &gt;--------------------------------------------------------------------------

A seven digit number; if not seven digits, zero-fill leading digits to make seven digits.

]]

local function mr (id)
	local handler = cfg.id_handlers['MR'];
	local id_num;
	local id_len;
	local err_cat = '';
	
	id_num = id:match ('^[Mm][Rr](%d+)$');										-- identifier with mr prefix

	if is_set (id_num) then
		add_maint_cat ('mr_format');
	else																		-- plain number without mr prefix
		id_num = id:match ('^%d+$');											-- if here id is all digits
	end

	id_len = id_num and id_num:len() or 0;
	if (7 &gt;= id_len) and (0 ~= id_len) then
		id = string.rep ('0', 7-id_len ) .. id_num;								-- zero-fill leading digits
	else
		err_cat = ' ' .. set_error( 'bad_mr' );									-- set an error message
	end
	
	return external_link_id({link = handler.link, label = handler.label, q = handler.q,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
end


--[[--------------------------&lt; O C L C &gt;----------------------------------------------------------------------

Validate and format an oclc id.  https://www.oclc.org/batchload/controlnumber.en.html {{dead link}}
archived at: https://web.archive.org/web/20161228233804/https://www.oclc.org/batchload/controlnumber.en.html

]]

local function oclc (id)
	local handler = cfg.id_handlers['OCLC'];
	local number;
	local err_msg = '';															-- empty string for concatenation
	
	if id:match('^ocm%d%d%d%d%d%d%d%d$') then									-- ocm prefix and 8 digits; 001 field (12 characters)
		number = id:match('ocm(%d+)');											-- get the number
	elseif id:match('^ocn%d%d%d%d%d%d%d%d%d$') then								-- ocn prefix and 9 digits; 001 field (12 characters)
		number = id:match('ocn(%d+)');											-- get the number
	elseif id:match('^on%d%d%d%d%d%d%d%d%d%d+$') then							-- on prefix and 10 or more digits; 001 field (12 characters)
		number = id:match('^on(%d%d%d%d%d%d%d%d%d%d+)$');						-- get the number
	elseif id:match('^%(OCoLC%)[1-9]%d*$') then									-- (OCoLC) prefix and variable number digits; no leading zeros; 035 field
		number = id:match('%(OCoLC%)([1-9]%d*)');								-- get the number
		if 9 &lt; number:len() then
			number = nil;														-- contrain to 1 to 9 digits; change this when oclc issues 10-digit numbers
		end
	elseif id:match('^%d+$') then												-- no prefix
		number = id;															-- get the number
		if 10 &lt; number:len() then
			number = nil;														-- contrain to 1 to 10 digits; change this when oclc issues 11-digit numbers
		end
	end

	if number then																-- proper format
		id = number;															-- exclude prefix, if any, from external link
	else
		err_msg = ' ' .. set_error( 'bad_oclc' )								-- add an error message if the id is malformed
	end
	
	local text = external_link_id({link=handler.link, label=handler.label, q = handler.q,
		prefix=handler.prefix, id=id, separator=handler.separator, encode=handler.encode}) .. err_msg;

	return text;
end


--[[--------------------------&lt; O P E N L I B R A R Y &gt;--------------------------------------------------------

Formats an OpenLibrary link, and checks for associated errors.

]]

local function openlibrary(id, access)
	local code;
	local handler = cfg.id_handlers['OL'];
	local ident;
	
	ident, code = id:gsub('^OL', ''):match("^(%d+([AMW]))$");					-- optional OL prefix followed immediately by digits followed by 'A', 'M', or 'W'; remove OL prefix

	if not is_set (ident) then													-- if malformed return an error
		return external_link_id({link=handler.link, label=handler.label, q = handler.q,
			prefix=handler.prefix .. 'OL',
			id=id, separator=handler.separator,	encode = handler.encode,
			access = access}) .. ' ' .. set_error( 'bad_ol' );
	end
	
	id = ident;																	-- use ident without the optional OL prefix (it has been removed)
	
	if ( code == "A" ) then
		return external_link_id({link=handler.link, label=handler.label, q = handler.q,
			prefix=handler.prefix .. 'authors/OL',
			id=id, separator=handler.separator,	encode = handler.encode,
			access = access})
	end
	
	if ( code == "M" ) then
		return external_link_id({link=handler.link, label=handler.label, q = handler.q,
			prefix=handler.prefix .. 'books/OL',
			id=id, separator=handler.separator,	encode = handler.encode,
			access = access})
	end

	if ( code == "W" ) then
		return external_link_id({link=handler.link, label=handler.label, q = handler.q,
			prefix=handler.prefix .. 'works/OL',
			id=id, separator=handler.separator,	encode = handler.encode,
			access = access})
	end
end


--[[--------------------------&lt; P M C &gt;------------------------------------------------------------------------

Format a PMC, do simple error checking, and check for embargoed articles.

The embargo parameter takes a date for a value. If the embargo date is in the future the PMC identifier will not
be linked to the article.  If the embargo date is today or in the past, or if it is empty or omitted, then the
PMC identifier is linked to the article through the link at cfg.id_handlers['PMC'].prefix.

PMC embargo date testing is done in function is_embargoed () which is called earlier because when the citation
has |pmc=&lt;value&gt; but does not have a |url= then |title= is linked with the PMC link.  Function is_embargoed ()
returns the embargo date if the PMC article is still embargoed, otherwise it returns an empty string.

PMCs are sequential numbers beginning at 1 and counting up.  This code checks the PMC to see that it contains only digits and is less
than test_limit; the value in local variable test_limit will need to be updated periodically as more PMCs are issued.

]]

local function pmc(id, embargo)
	local test_limit = 7000000;													-- update this value as PMCs approach
	local handler = cfg.id_handlers['PMC'];
	local err_cat = '';															-- presume that PMC is valid
	local id_num;
	local text;
	
	id_num = id:match ('^[Pp][Mm][Cc](%d+)$');									-- identifier with pmc prefix

	if is_set (id_num) then
		add_maint_cat ('pmc_format');
	else																		-- plain number without pmc prefix
		id_num = id:match ('^%d+$');											-- if here id is all digits
	end

	if is_set (id_num) then														-- id_num has a value so test it
		id_num = tonumber(id_num);												-- convert id_num to a number for range testing
		if 1 &gt; id_num or test_limit &lt; id_num then								-- if PMC is outside test limit boundaries
			err_cat = ' ' .. set_error( 'bad_pmc' );							-- set an error message
		else
			id = tostring (id_num);												-- make sure id is a string
		end
	else																		-- when id format incorrect
		err_cat = ' ' .. set_error( 'bad_pmc' );								-- set an error message
	end
	
	if is_set (embargo) then													-- is PMC is still embargoed?
		text = table.concat (													-- still embargoed so no external link
			{
			make_wikilink (handler.link, handler.label),
			handler.separator,
			id,
			err_cat
			});
	else
		text = external_link_id({link = handler.link, label = handler.label, q = handler.q,	-- no embargo date or embargo has expired, ok to link to article
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode, access=handler.access}) .. err_cat;
	end
	return text;
end


--[[--------------------------&lt; P M I D &gt;----------------------------------------------------------------------

Format PMID and do simple error checking.  PMIDs are sequential numbers beginning at 1 and counting up.  This
code checks the PMID to see that it contains only digits and is less than test_limit; the value in local variable
test_limit will need to be updated periodically as more PMIDs are issued.

]]

local function pmid(id)
	local test_limit = 32000000;												-- update this value as PMIDs approach
	local handler = cfg.id_handlers['PMID'];
	local err_cat = '';															-- presume that PMID is valid
	
	if id:match("[^%d]") then													-- if PMID has anything but digits
		err_cat = ' ' .. set_error( 'bad_pmid' );								-- set an error message
	else																		-- PMID is only digits
		local id_num = tonumber(id);											-- convert id to a number for range testing
		if 1 &gt; id_num or test_limit &lt; id_num then								-- if PMID is outside test limit boundaries
			err_cat = ' ' .. set_error( 'bad_pmid' );							-- set an error message
		end
	end
	
	return external_link_id({link = handler.link, label = handler.label, q = handler.q,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
end


--[[--------------------------&lt; S S R N &gt;----------------------------------------------------------------------

Format an ssrn, do simple error checking

SSRNs are sequential numbers beginning at 100? and counting up.  This code checks the ssrn to see that it is
only digits and is greater than 99 and less than test_limit; the value in local variable test_limit will need
to be updated periodically as more SSRNs are issued.

]]

local function ssrn (id)
	local test_limit = 3500000;													-- update this value as SSRNs approach
	local handler = cfg.id_handlers['SSRN'];
	local err_cat = '';															-- presume that SSRN is valid
	local id_num;
	local text;
	
	id_num = id:match ('^%d+$');												-- id must be all digits

	if is_set (id_num) then														-- id_num has a value so test it
		id_num = tonumber(id_num);												-- convert id_num to a number for range testing
		if 100 &gt; id_num or test_limit &lt; id_num then								-- if SSRN is outside test limit boundaries
			err_cat = ' ' .. set_error( 'bad_ssrn' );							-- set an error message
		end
	else																		-- when id format incorrect
		err_cat = ' ' .. set_error( 'bad_ssrn' );								-- set an error message
	end
	
	text = external_link_id({link = handler.link, label = handler.label, q = handler.q,
		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode, access=handler.access}) .. err_cat;

	return text;
end


--[[--------------------------&lt; U S E N E T _ I D &gt;------------------------------------------------------------

Validate and format a usenet message id.  Simple error checking, looks for 'id-left@id-right' not enclosed in
'&lt;' and/or '&gt;' angle brackets.

]]

local function usenet_id (id)
	local handler = cfg.id_handlers['USENETID'];

	local text = external_link_id({link = handler.link, label = handler.label, q = handler.q,
		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode})
 
	if not id:match('^.+@.+$') or not id:match('^[^&lt;].*[^&gt;]$')then				-- doesn't have '@' or has one or first or last character is '&lt; or '&gt;'
		text = text .. ' ' .. set_error( 'bad_usenet_id' )						-- add an error message if the message id is invalid
	end 
	
	return text
end


--[[--------------------------&lt; Z B L &gt;-----------------------------------------------------------------------

A numerical identifier in the form nnnn.nnnnn - leading zeros in the first quartet optional

format described here: http://emis.mi.sanu.ac.rs/ZMATH/zmath/en/help/search/

temporary format is apparently eight digits.  Anything else is an error

]]

local function zbl (id)
	local handler = cfg.id_handlers['ZBL'];
	local err_cat = '';
	
	if id:match('^%d%d%d%d%d%d%d%d$') then										-- is this identifier using temporary format?
		add_maint_cat ('zbl');													-- yes, add maint cat
	elseif not id:match('^%d?%d?%d?%d%.%d%d%d%d%d$') then						-- not temporary, is it normal format?
		err_cat = ' ' .. set_error( 'bad_zbl' );								-- no, set an error message
	end
	
	return external_link_id({link = handler.link, label = handler.label, q = handler.q,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
end


--============================&lt;&lt; I N T E R F A C E   F U N C T I O N S &gt;&gt;==========================================

--[[--------------------------&lt; B U I L D _ I D _ L I S T &gt;--------------------------------------------------------

Takes a table of IDs created by extract_ids() and turns it into a table of formatted ID outputs.

inputs:
	id_list – table of identifiers built by extract_ids()
	options – table of various template parameter values used to modify some manually handled identifiers

]]

local function build_id_list( id_list, options )
	local new_list, handler = {};

	local function fallback(k) return { __index = function(t,i) return cfg.id_handlers[k][i] end } end;
	
	for k, v in pairs( id_list ) do												-- k is uc identifier name as index to cfg.id_handlers; e.g. cfg.id_handlers['ISBN'], v is a table
		-- fallback to read-only cfg
		handler = setmetatable( { ['id'] = v, ['access'] = options.IdAccessLevels[k] }, fallback(k) );

		if handler.mode == 'external' then
			table.insert( new_list, {handler.label, external_link_id( handler ) } );
		elseif handler.mode == 'internal' then
			table.insert( new_list, {handler.label, internal_link_id( handler ) } );
		elseif handler.mode ~= 'manual' then
			error( cfg.messages['unknown_ID_mode'] );
		elseif k == 'ARXIV' then
			table.insert( new_list, {handler.label, arxiv( v, options.Class ) } ); 
		elseif k == 'ASIN' then
			table.insert( new_list, {handler.label, asin( v, options.ASINTLD ) } ); 
		elseif k == 'BIBCODE' then
			table.insert( new_list, {handler.label, bibcode( v, handler.access ) } );
		elseif k == 'BIORXIV' then
			table.insert( new_list, {handler.label, biorxiv( v ) } );
		elseif k == 'CITESEERX' then
			table.insert( new_list, {handler.label, citeseerx( v ) } );
		elseif k == 'DOI' then
			table.insert( new_list, {handler.label, doi( v, options.DoiBroken, handler.access ) } );
		elseif k == 'EISSN' then
			table.insert( new_list, {handler.label, issn( v, true ) } );		-- true distinguishes eissn from issn
		elseif k == 'HDL' then
			table.insert( new_list, {handler.label, hdl( v, handler.access ) } );
		elseif k == 'ISBN' then
			local ISBN = internal_link_id( handler );
			local check;
			local err_type = '';
			check, err_type = isbn( v );
			if not check then
				if is_set(options.IgnoreISBN) then								-- ISBN is invalid; if |ignore-isbn-error= set
					add_maint_cat ('ignore_isbn_err');							-- ad a maint category
				else
					ISBN = ISBN .. set_error( 'bad_isbn', {err_type}, false, " ", "" );	-- else display an error message
				end
			elseif is_set(options.IgnoreISBN) then								-- ISBN is OK; if |ignore-isbn-error= set
				add_maint_cat ('ignore_isbn_err');								-- because |ignore-isbn-error= unnecessary
			end
			table.insert( new_list, {handler.label, ISBN } );				
		elseif k == 'ISMN' then
			table.insert( new_list, {handler.label, ismn( v ) } );
		elseif k == 'ISSN' then
			table.insert( new_list, {handler.label, issn( v ) } );
		elseif k == 'JFM' then
			table.insert( new_list, {handler.label, jfm( v ) } );
		elseif k == 'LCCN' then
			table.insert( new_list, {handler.label, lccn( v ) } );
		elseif k == 'MR' then
			table.insert( new_list, {handler.label, mr( v ) } );
		elseif k == 'OCLC' then
			table.insert( new_list, {handler.label, oclc( v ) } );
		elseif k == 'OL' or k == 'OLA' then
			table.insert( new_list, {handler.label, openlibrary( v, handler.access ) } );
		elseif k == 'PMC' then
			table.insert( new_list, {handler.label, pmc( v, options.Embargo ) } );
		elseif k == 'PMID' then
			table.insert( new_list, {handler.label, pmid( v ) } );
		elseif k == 'SSRN' then
			table.insert( new_list, {handler.label, ssrn( v ) } );
		elseif k == 'USENETID' then
			table.insert( new_list, {handler.label, usenet_id( v ) } );
		elseif k == 'ZBL' then
			table.insert( new_list, {handler.label, zbl( v ) } );
		else
			error( cfg.messages['unknown_manual_ID'] );
		end
	end
	
	local function comp( a, b )	-- used in following table.sort()
		return a[1]:lower() &lt; b[1]:lower();
	end
	
	table.sort( new_list, comp );
	for k, v in ipairs( new_list ) do
		new_list[k] = v[2];
	end
	
	return new_list;
end


--[[--------------------------&lt; E X T R A C T _ I D S &gt;------------------------------------------------------------

Populates ID table from arguments using configuration settings. Loops through cfg.id_handlers and searches args for
any of the parameters listed in each cfg.id_handlers['...'].parameters.  If found, adds the parameter and value to
the identifier list.  Emits redundant error message is more than one alias exists in args

]]

local function extract_ids( args )
	local id_list = {};															-- list of identifiers found in args
	for k, v in pairs( cfg.id_handlers ) do										-- k is uc identifier name as index to cfg.id_handlers; e.g. cfg.id_handlers['ISBN'], v is a table
		v = select_one( args, v.parameters, 'redundant_parameters' );			-- v.parameters is a table of aliases for k; here we pick one from args if present
		if is_set(v) then id_list[k] = v; end									-- if found in args, add identifier to our list
	end
	return id_list;
end


--[[--------------------------&lt; E X T R A C T _ I D _ A C C E S S _ L E V E L S &gt;--------------------------------------

Fetches custom id access levels from arguments using configuration settings.
Parameters which have a predefined access level (e.g. arxiv) do not use this
function as they are directly rendered as free without using an additional parameter.

access-level values must match the case used in cfg.keywords['id-access'] (lowercase unless there is some special reason for something else)

]]

local function extract_id_access_levels( args, id_list )
	local id_accesses_list = {};
	for k, v in pairs( cfg.id_handlers ) do
		local access_param = v.custom_access;									-- name of identifier's access-level parameter
		if is_set(access_param) then
			local access_level = args[access_param];							-- get the assigned value if there is one
			if is_set (access_level) then
				if not in_array (access_level, cfg.keywords['id-access']) then	-- exact match required
					table.insert( z.message_tail, { set_error( 'invalid_param_val', {access_param, access_level}, true ) } );	
					access_level = nil;											-- invalid so unset
				end
				if not is_set(id_list[k]) then									-- identifer access-level must have a matching identifier
					table.insert( z.message_tail, { set_error( 'param_access_requires_param', {k:lower()}, true ) } );	-- param name is uppercase in cfg.id_handlers (k); lowercase for error message
				end
				id_accesses_list[k] = access_level;
			end
		end
	end
	return id_accesses_list;
end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local cfg table and imported functions table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr, utilities_page_ptr)
	cfg = cfg_table_ptr;

	is_set = utilities_page_ptr.is_set;											-- import functions from select Module:Citation/CS1/Utilities module
	in_array = utilities_page_ptr.in_array;
	set_error = utilities_page_ptr.set_error;
	select_one = utilities_page_ptr.select_one;
	add_maint_cat = utilities_page_ptr.add_maint_cat;
	substitute = utilities_page_ptr.substitute;
	make_wikilink = utilities_page_ptr.make_wikilink;

	z = utilities_page_ptr.z;													-- table of tables in Module:Citation/CS1/Utilities
end


--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {
	build_id_list = build_id_list,
	extract_ids = extract_ids,
	extract_id_access_levels = extract_id_access_levels,
	is_embargoed = is_embargoed;
	set_selected_modules = set_selected_modules;
	}</text>
      <sha1>2z0ni34e7yfzrvk1bxstpdkhudyssqz</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Suggestions</title>
    <ns>828</ns>
    <id>39043607</id>
    <revision>
      <id>918672833</id>
      <parentid>907254131</parentid>
      <timestamp>2019-09-29T20:25:13Z</timestamp>
      <contributor>
        <username>Brainulator9</username>
        <id>11191612</id>
      </contributor>
      <comment>Replacing dead-url with url-status</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="9847">--Please insert new suggestions in alphabetical order
--The form is ['incorrect'] = 'correct',

suggestions = {
	['accessmonth'] = 'access-date',											-- no longer supported by us, but still by citation templates mirrored in foreign WPs; can be emulated using 'access-date'
	['accesso'] = 'access-date',												-- Italian
	['accessyear'] = 'access-date',												-- no longer supported by us, but still by citation templates mirrored in foreign WPs; can be emulated using 'access-date'
	['address'] = 'location',
	['année'] = 'year',															-- French
	['año'] = 'year',
	['año-original'] = 'orig-year',
	['añoacceso'] = 'access-date',												-- Spanish
	['annoaccesso'] = 'access-date',											-- Italian
	['annodiaccesso'] = 'access-date',											-- Italian
	['apellido'] = 'last',														-- Spanish
	['archiv-datum'] = 'archive-date',											-- German
	['archive date'] = 'archive-date',
	['archiv-url'] = 'archive-url',												-- German
	['archive url'] = 'archive-url',											-- Spanish
	['artist'] = 'others',
	['auflage'] = 'edition',													-- German
	['auteur'] = 'author',														-- French
	['auther'] = 'author',
	['author link'] = 'author-link',											-- Polish
	['author link2'] = 'author2-link',											-- Polish
	['autor'] = 'authors',														-- German (singular and plural)
	['autore'] = 'author',														-- Italian
	['autthor'] = 'author',
	['band'] = 'volume',														-- German
	['chapter_title'] = 'chapter',
	['cita'] = 'quote',															-- Spanish
	['citazione'] = 'quote',													-- Italian
	['coauthor'] = 'author',
	['coauthors'] = 'author',
	['coautores'] = 'author',													-- Spanish
	['coautori'] = 'author',													-- Italian
	['cognome'] = 'last',														-- Italian
	['consulté le'] = 'access-date',											-- French
	['czasopismo'] = 'journal',													-- Polish
	['data'] = 'date',															-- Polish, Italian
	['dataarchivio'] = 'archive-date',											-- Italian
	['data dostępu'] = 'access-date',											-- Polish
	['datum'] = 'date',															-- German
	['deadlink'] = 'url-status',
	['distributor'] = 'publisher',
	['dnb'] = 'id',																-- German (as 'id={{DNB-IDN|...}}') (not yet supported by us directly)
	['éditeur'] = 'editor',														-- French
	['editon'] = 'edition',
	['editoin'] = 'edition',
	['editora'] = 'publisher',													-- Portuguese
	['editorial'] = 'publisher',
	['en ligne le'] = 'archive-date',											-- French
	['encyclopædia'] = 'encyclopedia',
	['enlaceautor'] = 'author-link',											-- Spanish
	['fecha'] = 'date',															-- Spanish
	['fechaacceso'] = 'access-date',											-- Spanish
	['fechaarchivo'] = 'archive-date',											-- Spanish
	['filetype'] = 'format',
	['first 1'] = 'first1',
	['foramt'] = 'format',
	['formato'] = 'format',														-- Spanish, Italian, Polish
	['frist'] = 'first',
	['herausgeber'] = 'editors',												-- German (singular and plural)
	['idioma'] = 'language',													-- Spanish, Italian
	['imię'] = 'first',															-- Polish
	['isbnistformalfalsch'] = 'ignore-isbn-error',								-- German
	['isnb'] = 'isbn',
	['jahr'] = 'year',															-- German
	['kapitel'] = 'chapter',													-- German
--	['kommentar'] = 'comment',													-- German (not yet supported by us)
	['lang'] = 'language', 
	['langauge'] = 'language',
	['langue'] = 'language',													-- French
	['last 1'] = 'last1',
	['lieu'] = 'location',														-- French
	['lingua'] = 'language',													-- Italian
	['lire en ligne'] = 'url',													-- French
	['lizenznummer'] = 'id',													-- German (as 'id=License ...')
	['loaction'] = 'location',
	['locatoin'] = 'location',
	['lugar'] = 'location',														-- Spanish
	['miejsce'] = 'location',													-- Polish
	['miesiąc'] = 'date',														-- Polish
	['mois'] = 'date',															-- French
	['monat'] = 'date',															-- German
--	['name'] = 'author',														-- 'name' is often erroneously used for 'title' and 'work' as well, so no suggestion is better than a wrong suggestion
	['nazwisko'] = 'last',														-- Polish
	['nespaper'] = 'newspaper',
	['newpaper'] = 'newspaper',
	['news'] = 'newspaper',
	['nom'] = 'last',															-- French
	['nom1'] = 'last1',															-- French
	['nombre'] = 'first',														-- Spanish
	['nome'] = 'first',															-- Italian
	['nummer'] = 'number',														-- German
	['obra'] = 'work',															-- Spanish
	['odpowiedzialność'] = 'agency',											-- Polish
	['offline'] = 'url-status',													-- German
	['online'] = 'url',															-- German (not a direct replacement, but can be emulated)
	['opublikowany'] = 'agency',												-- Polish
	['opera'] = 'work',															-- Italian
	['origdate'] = 'orig-year',
	['originaljahr'] = 'orig-year',												-- German
	['originalort'] = 'location',												-- German (if 'ort' is specified at the same time, the latter should be put in 'publication-place')
	['originalsprache'] = 'language',											-- German
	['originaltitel'] = 'title',												-- German (if 'originaltitel' is specified, any possible contents of 'title' should be put in 'trans-title')
	['ort'] = 'location',														-- German
	['other'] = 'others',
	['oznaczenie'] = 'agency',													-- Polish
	['pagees'] = 'pages',
	['página'] = 'page',														-- Spanish, Italian
	['páginas'] = 'pages',														-- Spanish, Italian
	['passage'] = 'pages',														-- French
	['pagina'] = 'pages',														-- Italian
	['pagine'] = 'pages',														-- Italian
	['périodique'] = 'publisher',												-- French
	['plublisher'] = 'publisher',
	['pmcid'] = 'pmc',
	['praca'] = 'work',															-- Polish
	['prénom'] = 'first',														-- French
	['prénom1'] = 'first1',														-- French
	['ps'] = 'postscript',
	['pub'] = 'publisher',
	['pulbication-place'] = 'publication-place',
	['reihe'] = 'series',														-- German
	['retrieved'] = 'access-date',
	['rok'] = 'date',															-- Polish
	['sammelwerk'] = 'work',													-- German
	['seiten'] = 'pages',														-- German
	['seria'] = 'series',														-- Polish
	['série'] = 'work',															-- French *RECHECK*
	['service'] = 'agency',
	['sitioweb'] = 'website',													--Spanish
	['sito'] = 'website',														--Italian
	['stron'] = 'page',															-- Polish
	['strony'] = 'pages',														-- Polish
	['spalten'] = 'at',															-- German (not a direct replacement, but can be emulated)
	['sprache'] = 'language',													-- German
	['suscripción'] = 'subscription',											-- Spanish, Polish
	['tag'] = 'date',															-- German
	['tile'] = 'title',
	['tite'] = 'title',
	['titel'] = 'title',														-- German
	['titel-p'] = 'title',														-- German ('postscript=none' should be added as well)
	['titelerg'] = 'contribution',												-- German (not a direct replacement, but can be emulated)
	['titolo'] = 'title',														-- Spanish, Italian
	['titre'] = 'title',														-- French
	['títle'] = 'title',
	['título'] = 'title',														-- Spanish
	['transchapter'] = 'trans-chapter',
	['translator'] = 'others',
	['transtitle'] = 'trans-title',
	['typ'] = 'author-mask',													-- German (not a direct replacement, but the only valid argument 'typ=wl' can be emulated using 'author-mask')
	['tytuł'] = 'title',														-- Polish
	['ubicación'] = 'location',													-- Spanish
	['urlarchivo'] = 'archive-url',												-- Spanish
	['urlarchivio'] = 'archive-url',											-- Italian
	['urn'] = 'id',																-- German (as 'id={{URN|...}}') (not yet supported by us directly)
	['übersetzer'] = 'translator',												-- German (singular and plural)
	['verlag'] = 'publisher',													-- German
	['vol'] = 'volume', 
	['volumen'] = 'volume',														-- Spanish
	['werk'] = 'work',															-- German
	['werkerg'] = 'contribution',												-- German (not a direct replacement, but can be emulated)
	['wkautore'] = 'author-link',												-- Italian
	['wolumin'] = 'volume',														-- Polish
	['wydanie'] = 'number',														-- Polish
	['wydawca'] = 'publisher',													-- French
	['zaprezentowany'] = 'publisher',											-- French
	['zdb'] = 'id',																-- German (as 'id={{ZDB|...}}') (not yet supported by us directly)
	['zitat'] = 'quote',														-- German
	['zugriff'] = 'access-date',												-- German
}


--[[--------------------------&lt; P A T T E R N S &gt;--------------------------------------------------------------

Here we use Lua patterns to make suggestions.  The form is ['pattern'] = 'correct',

Lua patterns are not regex though they are similar.  The escape character is '%', not '\'.  For more information about
lua patterns, see: Extension:Scribunto/Lua_reference_manual#Patterns

Patterns should probably always include the '^' and '$' anchor assertions to prevent a partial match from incorrectly
suggesting the wrong parameter name.  For instance, the pattern 'a[utho]+r' matches 'author' in the no-longer-supported
parameter |author-separator= so the code suggests '|author='; the same pattern also matches the no-longer-supported
parameter |separator= (returning 'ator') so again, the code suggests '|author='.

One capture is supported, typically the enumerator from an enumerated parameter (the '6' in |author6=, etc.)  The value from the
capture replaces $1 in the 'correct' value.

]]

local patterns = {
	['^ac+es+ ?d?a?t?e?$'] = 'access-date',
	['^a[utho]+r$'] = 'author',
	['^a[utho]+r(%d+)$'] = 'author$1',											-- enumerated
	['^pu[blish]+ers?$'] = 'publisher',
	}

return {suggestions = suggestions, patterns=patterns};</text>
      <sha1>q2jz6t9017qwiabapa4vok8lfaejg0y</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Utilities</title>
    <ns>828</ns>
    <id>48808487</id>
    <revision>
      <id>913997315</id>
      <parentid>913896875</parentid>
      <timestamp>2019-09-04T14:45:24Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>undo brute force hiding of deprecated parameter and missing periodical error messages;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="15353">
local z = {
	error_categories = {};														-- for categorizing citations that contain errors
	error_ids = {};
	message_tail = {};
	maintenance_cats = {};														-- for categorizing citations that aren't erroneous per se, but could use a little work
	properties_cats = {};														-- for categorizing citations based on certain properties, language of source for instance
};


--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local cfg;																		-- table of tables imported from selected Module:Citation/CS1/Configuration


--[[--------------------------&lt; I S _ S E T &gt;------------------------------------------------------------------

Returns true if argument is set; false otherwise. Argument is 'set' when it exists (not nil) or when it is not an empty string.

]]

local function is_set( var )
	return not (var == nil or var == '');
end


--[[--------------------------&lt; I N _ A R R A Y &gt;--------------------------------------------------------------

Whether needle is in haystack

]]

local function in_array( needle, haystack )
	if needle == nil then
		return false;
	end
	for n,v in ipairs( haystack ) do
		if v == needle then
			return n;
		end
	end
	return false;
end


--[[--------------------------&lt; S U B S T I T U T E &gt;----------------------------------------------------------

Populates numbered arguments in a message string using an argument table.

]]

local function substitute( msg, args )
	return args and mw.message.newRawMessage( msg, args ):plain() or msg;
end


--[[--------------------------&lt; E R R O R _ C O M M E N T &gt;----------------------------------------------------

Wraps error messages with css markup according to the state of hidden.

]]

local function error_comment( content, hidden )
	return substitute( hidden and cfg.presentation['hidden-error'] or cfg.presentation['visible-error'], content );
end


--[=[-------------------------&lt; M A K E _ W I K I L I N K &gt;----------------------------------------------------

Makes a wikilink; when bot link and display text is provided, returns a wikilink in the form [[L|D]]; if only
link is provided, returns a wikilink in the form [[L]]; if neither are provided or link is omitted, returns an
empty string.

]=]

local function make_wikilink (link, display)
	if is_set (link) then
		if is_set (display) then
			return table.concat ({'[[', link, '|', display, ']]'});
		else
			return table.concat ({'[[', link, ']]'});
		end
	else
		return '';
	end
end


--[[--------------------------&lt; S E T _ E R R O R &gt;--------------------------------------------------------------

Sets an error condition and returns the appropriate error message.  The actual placement of the error message in the output is
the responsibility of the calling function.

]]

local function set_error( error_id, arguments, raw, prefix, suffix )
	local error_state = cfg.error_conditions[ error_id ];
	
	prefix = prefix or "";
	suffix = suffix or "";
	
	if error_state == nil then
		error( cfg.messages['undefined_error'] );								-- because missing error handler in Module:Citation/CS1/Configuration
	elseif is_set( error_state.category ) then
		table.insert( z.error_categories, error_state.category );
	end
	
	local message = substitute( error_state.message, arguments );

	message = table.concat (
		{
		message,
		' (',
		make_wikilink (
			table.concat (
				{
				cfg.messages['help page link'],
				'#',
				error_state.anchor
				}),
			cfg.messages['help page label']),
		')'
		});

	z.error_ids[ error_id ] = true;
	if in_array( error_id, { 'bare_url_missing_title', 'trans_missing_title' } )
			and z.error_ids['citation_missing_title'] then
		return '', false;
	end
	
	message = table.concat({ prefix, message, suffix });
	
	if raw == true then
		return message, error_state.hidden;
	end		
		
	return error_comment( message, error_state.hidden );
end


--[[-------------------------&lt; I S _ A L I A S _ U S E D &gt;-----------------------------------------------------

This function is used by select_one() to determine if one of a list of alias parameters is in the argument list
provided by the template.

Input:
	args – pointer to the arguments table from calling template
	alias – one of the list of possible aliases in the aliases lists from Module:Citation/CS1/Configuration
	index – for enumerated parameters, identifies which one
	enumerated – true/false flag used choose how enumerated aliases are examined
	value – value associated with an alias that has previously been selected; nil if not yet selected
	selected – the alias that has previously been selected; nil if not yet selected
	error_list – list of aliases that are duplicates of the alias already selected

Returns:
	value – value associated with alias we selected or that was previously selected or nil if an alias not yet selected
	selected – the alias we selected or the alias that was previously selected or nil if an alias not yet selected

]]

local function is_alias_used (args, alias, index, enumerated, value, selected, error_list)
	if enumerated then															-- is this a test for an enumerated parameters?
		alias = alias:gsub ('#', index);										-- replace '#' with the value in index
	else
		alias = alias:gsub ('#', '');											-- remove '#' if it exists
	end

	if is_set(args[alias]) then													-- alias is in the template's argument list
		if value ~= nil and selected ~= alias then								-- if we have already selected one of the aliases
			local skip;
			for _, v in ipairs(error_list) do									-- spin through the error list to see if we've added this alias
				if v == alias then
					skip = true;
					break;														-- has been added so stop looking 
				end
			end
			if not skip then													-- has not been added so
				table.insert( error_list, alias );								-- add error alias to the error list
			end
		else
			value = args[alias];												-- not yet selected an alias, so select this one
			selected = alias;
		end
	end
	return value, selected;														-- return newly selected alias, or previously selected alias
end


--[[--------------------------&lt; A D D _ M A I N T _ C A T &gt;------------------------------------------------------

Adds a category to z.maintenance_cats using names from the configuration file with additional text if any.
To prevent duplication, the added_maint_cats table lists the categories by key that have been added to z.maintenance_cats.

]]

local added_maint_cats = {}														-- list of maintenance categories that have been added to z.maintenance_cats
local function add_maint_cat (key, arguments)
	if not added_maint_cats [key] then
		added_maint_cats [key] = true;											-- note that we've added this category
		table.insert( z.maintenance_cats, substitute (cfg.maint_cats [key], arguments));	-- make name then add to table
	end
end


--[[--------------------------&lt; S A F E _ F O R _ I T A L I C S &gt;----------------------------------------------

Protects a string that will be wrapped in wiki italic markup '' ... ''

Note: We cannot use &lt;i&gt; for italics, as the expected behavior for italics specified by ''...'' in the title is that
they will be inverted (i.e. unitalicized) in the resulting references.  In addition, &lt;i&gt; and '' tend to interact
poorly under Mediawiki's HTML tidy.

]]

local function safe_for_italics( str )
	if not is_set(str) then
		return str;
	else
		if str:sub(1,1) == "'" then str = "&lt;span&gt;&lt;/span&gt;" .. str; end
		if str:sub(-1,-1) == "'" then str = str .. "&lt;span&gt;&lt;/span&gt;"; end
		
		-- Remove newlines as they break italics.
		return str:gsub( '\n', ' ' );
	end
end


--[[--------------------------&lt; W R A P _ S T Y L E &gt;----------------------------------------------------------

Applies styling to various parameters.  Supplied string is wrapped using a message_list configuration taking one
argument; protects italic styled parameters.  Additional text taken from citation_config.presentation - the reason
this function is similar to but separate from wrap_msg().

]]

local function wrap_style (key, str)
	if not is_set( str ) then
		return "";
	elseif in_array( key, { 'italic-title', 'trans-italic-title' } ) then
		str = safe_for_italics( str );
	end

	return substitute( cfg.presentation[key], {str} );
end


--[[--------------------------&lt; S E L E C T _ O N E &gt;----------------------------------------------------------

Chooses one matching parameter from a list of parameters to consider.  The list of parameters to consider is just
names.  For parameters that may be enumerated, the position of the numerator in the parameter name is identified
by the '#' so |author-last1= and |author1-last= are represented as 'author-last#' and 'author#-last'.

Because enumerated parameter |&lt;param&gt;1= is an alias of |&lt;param&gt;= we must test for both possibilities.


Generates an error if more than one match is present.

]]

local function select_one( args, aliases_list, error_condition, index )
	local value = nil;															-- the value assigned to the selected parameter
	local selected = '';														-- the name of the parameter we have chosen
	local error_list = {};

	if index ~= nil then index = tostring(index); end

	for _, alias in ipairs( aliases_list ) do									-- for each alias in the aliases list
		if alias:match ('#') then												-- if this alias can be enumerated
			if '1' == index then												-- when index is 1 test for enumerated and non-enumerated aliases
				value, selected = is_alias_used (args, alias, index, false, value, selected, error_list);	-- first test for non-enumerated alias
			end
			value, selected = is_alias_used (args, alias, index, true, value, selected, error_list);		-- test for enumerated alias
		else
			value, selected = is_alias_used (args, alias, index, false, value, selected, error_list);		--test for non-enumerated alias
		end
	end

	if #error_list &gt; 0 and 'none' ~= error_condition then						-- for cases where this code is used outside of extract_names()
		local error_str = "";
		for _, k in ipairs( error_list ) do
			if error_str ~= "" then error_str = error_str .. cfg.messages['parameter-separator'] end
			error_str = error_str .. wrap_style ('parameter', k);
		end
		if #error_list &gt; 1 then
			error_str = error_str .. cfg.messages['parameter-final-separator'];
		else
			error_str = error_str .. cfg.messages['parameter-pair-separator'];
		end
		error_str = error_str .. wrap_style ('parameter', selected);
		table.insert( z.message_tail, { set_error( error_condition, {error_str}, true ) } );
	end
	
	return value, selected;
end


--[=[-------------------------&lt; R E M O V E _ W I K I _ L I N K &gt;----------------------------------------------

Gets the display text from a wikilink like [[A|B]] or [[B]] gives B

The str:gsub() returns either A|B froma [[A|B]] or B from [[B]] or B from B (no wikilink markup).

In l(), l:gsub() removes the link and pipe (if they exist); the second :gsub() trims white space from the label
if str was wrapped in wikilink markup.  Presumably, this is because without wikimarkup in str, there is no match
in the initial gsub, the replacement function l() doesn't get called.

]=]

local function remove_wiki_link (str)
	return (str:gsub( "%[%[([^%[%]]*)%]%]", function(l)
		return l:gsub( "^[^|]*|(.*)$", "%1" ):gsub("^%s*(.-)%s*$", "%1");
	end));
end


--[=[-------------------------&lt; I S _ W I K I L I N K &gt;--------------------------------------------------------

Determines if str is a wikilink, extracts, and returns the the wikilink type, link text, and display text parts.
If str is a complex wikilink ([[L|D]]):
	returns wl_type 2 and D and L from [[L|D]];
if str is a simple wikilink ([[D]])
	returns wl_type 1 and D from [[D]] and L as empty string;
if not a wikilink:
	returns wl_type 0, str as D, and L as empty string.

trims leading and trailing white space and pipes from L and D ([[L|]] and [[|D]] are accepted by MediaWiki and
treated like [[D]]; while [[|D|]] is not accepted by MediaWiki, here, we accept it and return D without the pipes).

]=]

local function is_wikilink (str)
	local D, L
	local wl_type = 2;															-- assume that str is a complex wikilink [[L|D]]

	L, D = str:match ('^%[%[([^|]+)|([^%]]+)%]%]$');							-- get L and D from [[L|D]] 

	if not is_set (D) then														-- if no separate link
		D = str:match ('^%[%[([^%]]*)|*%]%]$');									-- get D from [[D]]
		wl_type = 1; 
	end
	
	if not is_set (D) then														-- no wikilink markup
		D = str;																-- return the string as D
		wl_type = 0;															-- but say that it is not a wikilink
	end
	
	D = mw.text.trim (D, '%s|');												-- trim white space and pipe characters 
	L = L and mw.text.trim (L, '%s|');
	
	return wl_type, D, L or '';
end


--[[--------------------------&lt; S T R I P _ A P O S T R O P H E _ M A R K U P &gt;--------------------------------

Strip wiki italic and bold markup from argument so that it doesn't contaminate COinS metadata.
This function strips common patterns of apostrophe markup.  We presume that editors who have taken the time to
markup a title have, as a result, provided valid markup. When they don't, some single apostrophes are left behind.

Returns the argument without wiki markup and a number; the number is more-or-less meaningless except as a flag
to indicate that markup was replaced; do not rely on it as an indicator of how many of any kind of markup was
removed; returns the argument and nil when no markup removed

]]

local function strip_apostrophe_markup (argument)
	if not is_set (argument) then
		return argument, nil;													-- no argument, nothing to do
	end

	if nil == argument:find ( "''", 1, true ) then								-- Is there at least one double apostrophe?  If not, exit.
		return argument, nil;
	end

	local flag;
	while true do
		if argument:find ( "'''''", 1, true ) then								-- bold italic (5)
			argument, flag=argument:gsub("%'%'%'%'%'", "");						-- remove all instances of it
		elseif argument:find ( "''''", 1, true ) then							-- italic start and end without content (4)
			argument, flag=argument:gsub("%'%'%'%'", "");
		elseif argument:find ( "'''", 1, true ) then							-- bold (3)
			argument, flag=argument:gsub("%'%'%'", "");
		elseif argument:find ( "''", 1, true ) then								-- italic (2)
			argument, flag=argument:gsub("%'%'", "");
		else
			break;
		end
	end

	return argument, flag;														-- done
end


--[[--------------------------&lt; S E T _ S E L E C T E D _ M O D U L E S &gt;--------------------------------------

Sets local cfg table to same (live or sandbox) as that used by the other modules.

]]

local function set_selected_modules (cfg_table_ptr)
	cfg = cfg_table_ptr;
	
end


--[[--------------------------&lt; E X P O R T S &gt;----------------------------------------------------------------
]]

return {
	is_set = is_set,															-- exported functions
	in_array = in_array,
	substitute = substitute,
	error_comment = error_comment,
	set_error = set_error,
	select_one = select_one,
	add_maint_cat = add_maint_cat,
	wrap_style = wrap_style,
	safe_for_italics = safe_for_italics,
	remove_wiki_link = remove_wiki_link,
	is_wikilink = is_wikilink,
	make_wikilink = make_wikilink,
	set_selected_modules = set_selected_modules,
	strip_apostrophe_markup = strip_apostrophe_markup,
	z = z,																		-- exported table
	}</text>
      <sha1>3ip0nyncv5q3w1ip0l9y5jzifvqvcf6</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Whitelist</title>
    <ns>828</ns>
    <id>39013723</id>
    <revision>
      <id>913814852</id>
      <parentid>893307470</parentid>
      <timestamp>2019-09-03T11:05:59Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>sync from sandbox;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="20339">
--[[--------------------------&lt; P A R A M E T E R S   N O T   S U P P O R T E D &gt;------------------------------

This is a list of parameters that once were but now are no longer supported:

	['albumlink'] = nil,														-- unique alias of titlelink used by old cite AV media notes
	['albumtype'] = nil,														-- controled inappropriate functionality in the old cite AV media notes
	['artist'] = nil,															-- unique alias of others used by old cite AV media notes
	['ARXIV'] = nil,															-- not an initialization
	['Author'] = nil,															-- non-standard capitalization
	['authorformat'] = nil,														-- primarily used to support Vancouver format which functionality now part of name-list-format
	['author-format'] = nil,													-- primarily used to support Vancouver format which functionality now part of name-list-format
	['author-name-separator'] = nil,											-- primarily used to support Vancouver format which functionality now part of name-list-format
	['author-separator'] = nil,													-- primarily used to support Vancouver format which functionality now part of name-list-format
	['began'] = nil,															-- module handles date ranges; cite episode and cite series
	['BIBCODE'] = nil,															-- not an initialization
	['callsign'] = nil,															-- cite interview removed
	['call-sign'] = nil,														-- cite interview removed
	['chapterlink'] = nil,														-- if ever necessary to link to a chapter article, |chapter= can be wikilinked 
	['chapter-link'] = nil,														-- 
	['city'] = nil,																-- cite interview removed
	['coauthor'] = nil,															-- redundant to |authorn=; not made part of metadata
	['coauthors'] = nil,														-- redundant to |authorn=; not made part of metadata
	['cointerviewers'] = nil,													-- unique alias of others used by old cite interview
	['day'] = nil,																-- deprecated in {{citation/core}} and somehow undeprecated in Module:Citation/CS1 and now finally removed
	['director'] = nil,															-- unique alias of author used by old cite DVD-notes
	['doi_brokendate'] = nil,    												-- alias of doi-broken-date
	['doi_inactivedate'] = nil,													-- alias of doi-inactive-date
	['DoiBroken'] = nil,														-- not used, non-standard captialization
	['Editor'] = nil,															-- non-standard capitalization
	['editorformat'] = nil,														-- primarily used to support Vancouver format which functionality now part of name-list-format
	['EditorSurname'] = nil,													-- non-standard capitalization
	['editor-format'] = nil,													-- primarily used to support Vancouver format which functionality now part of name-list-format
	['EditorGiven'] = nil,														-- non-standard capitalization
	['editor-name-separator'] = nil,											-- primarily used to support Vancouver format which functionality now part of name-list-format
	['editor-separator'] = nil,													-- primarily used to support Vancouver format which functionality now part of name-list-format
	['Embargo'] = nil,															-- not used, non-standard capitalization
	['ended'] = nil,															-- module handles date ranges; cite episode and cite series
	['in'] = nil,																-- ambiguous between use for language, appearance of a lesser work in an edited work
	['interviewers'] = nil,														-- only need InterviewerList support
	['month'] = nil,															-- functionality supported by |date=
	['name-separator'] = nil,													-- primarily used to support Vancouver format which functionality now part of name-list-format
	['notestitle'] = nil,														-- unique alias of chapter used by old cite AV media notes
	['PPrefix'] = nil,															-- non-standard capitalization
	['PPPrefix'] = nil,															-- not used, non-standard capitalization
	['pp-prefix'] = nil,														-- not used, not documented
	['p-prefix'] = nil,															-- not used, not documented
	['program'] = nil,															-- cite interview removed
	['publisherid'] = nil,														-- unique alias of id used by old cite AV media notes and old cite DVD-notes
	['Ref'] = nil,																-- non-standard capitalization
	['separator'] = nil,														-- this functionality now provided by |mode=
	['template doc demo'] = nil,												-- alias of template doc demo
	['titleyear'] = nil,														-- unique alias of origyear used by old cite DVD-notes
	['trans_chapter'] = nil,													-- alias of trans-chapter
	['trans_title'] = nil,														-- alias of trans-title

	['Author#'] = nil,															-- non-standard capitalization
	['authors#'] = nil,															-- no need for multiple lists of author names
	['Editor#'] = nil,															-- non-standard capitalization
	['editors#'] = nil,															-- no need for multiple lists of editor names
	['EditorGiven#'] = nil,														-- non-standard capitalization
	['EditorSurname#'] = nil,													-- non-standard capitalization

]]


--[[--------------------------&lt; S U P P O R T E D   P A R A M E T E R S &gt;--------------------------------------

Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values:
	true - these parameters are valid and supported parameters
	false - these parameters are deprecated but still supported
	nil - these parameters are no longer supported (when setting a parameter to nil, leave a comment stating the reasons for invalidating the parameter)
	
]]

local whitelist = {}

local basic_arguments = {
	['accessdate'] = true,
	['access-date'] = true,
	['agency'] = true,
	['airdate'] = true,
	['air-date'] = true,
	['archivedate'] = true,
	['archive-date'] = true,
	['archive-format'] = true,
	['archiveurl'] = true,
	['archive-url'] = true,
	['article'] = true,
	['article-format'] = true,
	['article-url'] = true,
	['article-url-access'] = true,
	['arxiv'] = true,
	['asin'] = true,
	['ASIN'] = true,
	['asin-tld'] = true,
	['ASIN-TLD'] = false,														-- not an identifier but an identifier-modifier
	['at'] = true,
	['author'] = true,
	['author-first'] = true,
	['author-last'] = true,
	['authorlink'] = true,
	['author-link'] = true,
	['authormask'] = true,
	['author-mask'] = true,
	['authors'] = true,
	['bibcode'] = true,
	['bibcode-access'] = true,
	['biorxiv'] = true,
	['booktitle'] = true,
	['book-title'] = true,
	['cartography'] = true,
	['chapter'] = true,
	['chapter-format'] = true,
	['chapterurl'] = true,
	['chapter-url'] = true,
	['chapter-url-access'] = true,
	['citeseerx'] = true,
	['class'] = false,															-- cite arxiv only; general use deprecated
	['collaboration'] = true,
	['conference'] = true,
	['conference-format'] = true,
	['conferenceurl'] = true,
	['conference-url'] = true,
	['contribution'] = true,
	['contribution-format'] = true,
	['contributionurl'] = true,
	['contribution-url'] = true,
	['contribution-url-access'] = true,
	['contributor'] = true,
	['contributor-first'] = true,
	['contributor-last'] = true,
	['contributor-given'] = true,
	['contributor-surname'] = true,
	['contributor-link'] = true,
	['contributor-mask'] = true,
	['credits'] = true,															-- cite episode, cite serial
	['date'] = true,
	['deadurl'] = false,
	['dead-url'] = false,
	['degree'] = true,
	['department'] = true,
	['df'] = true,
	['dictionary'] = true,
	['displayauthors'] = true,
	['display-authors'] = true,
	['display-contributors'] = true,
	['displayeditors'] = true,
	['display-editors'] = true,
	['display-interviewers'] = true,
	['display-translators'] = true,
	['docket'] = true,
	['doi'] = true,
	['DOI'] = true,
	['doi-access'] = true,
	['doi-broken'] = true,
	['doi-broken-date'] = true,
	['doi-inactive-date'] = true,
	['edition'] = true,
	['editor'] = true,
	['editor-first'] = true,
	['editor-given'] = true,
	['editor-last'] = true,
	['editorlink'] = true,
	['editor-link'] = true,
	['editormask'] = true,
	['editor-mask'] = true,
	['editors'] = true,
	['editor-surname'] = true,
	['eissn'] = true,
	['EISSN'] = true,
	['embargo'] = true,
	['encyclopaedia'] = true,
	['encyclopedia'] = true,
	['entry'] = true,
	['entry-format'] = true,
	['entry-url'] = true,
	['entry-url-access'] = true,
	['episode'] = true,															-- cite serial only TODO: make available to cite episode?
	['episodelink'] = true,														-- cite episode and cite serial
	['episode-link'] = true,													-- cite episode and cite serial
	['eprint'] = true,															-- cite arxiv and arxiv identifiers
	['event'] = true,
	['event-format'] = true,
	['eventurl'] = true,
	['event-url'] = true,
	['first'] = true,
	['format'] = true,
	['given'] = true,
	['hdl'] = true,
	['HDL'] = true,
	['hdl-access'] = true,
	['host'] = true,
	['id'] = true,
	['ID'] = true,
	['ignoreisbnerror'] = true,
	['ignore-isbn-error'] = true,
	['inset'] = true,
	['institution'] = true,
	['interviewer'] = true,
	['interviewer-first'] = true,
	['interviewer-last'] = true,
	['interviewerlink'] = true,
	['interviewer-link'] = true,
	['interviewermask'] = true,
	['interviewer-mask'] = true,
	['isbn'] = true,
	['ISBN'] = true,
	['isbn13'] = true,
	['ISBN13'] = true,
	['ismn'] = true,
	['ISMN'] = true,
	['issn'] = true,
	['ISSN'] = true,
	['issue'] = true,
	['jfm'] = true,
	['JFM'] = true,
	['journal'] = true,
	['jstor'] = true,
	['JSTOR'] = true,
	['jstor-access'] = true,
	['lang'] = true,
	['language'] = true,
	['last'] = true,
	['lastauthoramp'] = true,
	['last-author-amp'] = true,
	['laydate'] = true,
	['lay-date'] = true,
	['laysource'] = true,
	['lay-source'] = true,
	['laysummary'] = false,
	['lay-summary'] = false,
	['lay-format'] = true,
	['layurl'] = true,
	['lay-url'] = true,
	['lccn'] = true,
	['LCCN'] = true,
	['location'] = true,
	['magazine'] = true,
	['mailinglist'] = true,														-- cite mailing list only
	['mailing-list'] = true,													-- cite mailing list only
	['map'] = true,																-- cite map only
	['map-format'] = true,														-- cite map only
	['mapurl'] = true,															-- cite map only
	['map-url'] = true,															-- cite map only
	['map-url-access'] = true,													-- cite map only
	['medium'] = true,
	['message-id'] = true,														-- cite newsgroup
	['minutes'] = true,
	['mode'] = true,
	['mr'] = true,
	['MR'] = true,
	['name-list-format'] = true,
	['network'] = true,
	['newsgroup'] = true,
	['newspaper'] = true,
	['nocat'] = true,
	['no-cat'] = true,
	['nopp'] = true,
	['no-pp'] = true,
	['notracking'] = true,
	['no-tracking'] = true,
	['number'] = true,
	['oclc'] = true,
	['OCLC'] = true,
	['ol'] = true,
	['OL'] = true,
	['ol-access'] = true,
	['origyear'] = true,
	['orig-year'] = true,
	['osti'] = true,
	['OSTI'] = true,
	['osti-access'] = true,
	['others'] = true,
	['p'] = true,
	['page'] = true,
	['pages'] = true,
	['people'] = true,
	['periodical'] = true,
	['place'] = true,
	['pmc'] = true,
	['PMC'] = true,
	['pmid'] = true,
	['PMID'] = true,
	['postscript'] = true,
	['pp'] = true,
	['publicationdate'] = true,
	['publication-date'] = true,
	['publicationplace'] = true,
	['publication-place'] = true,
	['publisher'] = true,
	['quotation'] = true,
	['quote'] = true,
	['ref'] = true,
	['registration'] = false,
	['rfc'] = true,
	['RFC'] = true,
	['scale'] = true,
	['script-article'] = true,
	['script-chapter'] = true,
	['script-contribution'] = true,
	['script-entry'] = true,
	['script-journal'] = true,
	['script-magazine'] = true,
	['script-newspaper'] = true,
	['script-periodical'] = true,
	['script-section'] = true,
	['script-title'] = true,
	['script-website'] = true,
	['script-work'] = true,
	['season'] = true,
	['section'] = true,
	['section-format'] = true,
	['sections'] = true,														-- cite map only
	['sectionurl'] = true,
	['section-url'] = true,
	['section-url-access'] = true,
	['series'] = true,
	['serieslink'] = true,
	['series-link'] = true,
	['seriesno'] = true,
	['series-no'] = true,
	['seriesnumber'] = true,
	['series-number'] = true,
	['series-separator'] = true,
	['sheet'] = true,															-- cite map only
	['sheets'] = true,															-- cite map only
	['ssrn'] = true,
	['SSRN'] = true,
	['station'] = true,
	['subject'] = true,
	['subjectlink'] = true,
	['subject-link'] = true,
	['subscription'] = false,
	['surname'] = true,
	['template-doc-demo'] = true,
	['time'] = true,
	['timecaption'] = true,
	['time-caption'] = true,
	['title'] = true,
	['titlelink'] = true,
	['title-link'] = true,
	['trans-map'] = true,
	['transcript'] = true,
	['transcript-format'] = true,
	['transcripturl'] = true,
	['transcript-url'] = true,
	['translator'] = true,
	['translator-first'] = true,
	['translator-last'] = true,
	['translator-given'] = true,
	['translator-surname'] = true,
	['translator-link'] = true,
	['translator-mask'] = true,
	['trans-article'] = true,
	['trans-chapter'] = true,
	['trans-contribution'] = true,
	['trans-entry'] = true,
	['trans-journal'] = true,
	['trans-magazine'] = true,
	['trans-newspaper'] = true,
	['trans-periodical'] = true,
	['trans-section'] = true,
	['trans-title'] = true,
	['trans-website'] = true,
	['trans-work'] = true,
	['type'] = true,
	['url'] = true,
	['URL'] = true,
	['url-access'] = true,
	['url-status'] = true,
	['vauthors'] = true,
	['veditors'] = true,
	['version'] = true,
	['via'] = true,
	['volume'] = true,
	['website'] = true,
	['work'] = true,
	['year'] = true,
	['zbl'] = true,
	['ZBL'] = true,
}

local numbered_arguments = {
	['author#'] = true,
	['author-first#'] = true,
	['author#-first'] = true,
	['author-last#'] = true,
	['author#-last'] = true,
	['author-link#'] = true,
	['author#link'] = true,
	['author#-link'] = true,
	['authorlink#'] = true,
	['author-mask#'] = true,
	['author#mask'] = true,
	['author#-mask'] = true,
	['authormask#'] = true,
	['contributor#'] = true,
	['contributor-first#'] = true,
	['contributor#-first'] = true,
	['contributor-last#'] = true,
	['contributor#-last'] = true,
	['contributor-given#'] = true,
	['contributor#-given'] = true,
	['contributor-surname#'] = true,
	['contributor#-surname'] = true,
	['contributor-link#'] = true,
	['contributor#-link'] = true,
	['contributor-mask#'] = true,
	['contributor#-mask'] = true,
	['editor#'] = true,
	['editor-first#'] = true,
	['editor#-first'] = true,
	['editor#-given'] = true,
	['editor-given#'] = true,
	['editor-last#'] = true,
	['editor#-last'] = true,
	['editor-link#'] = true,
	['editor#link'] = true,
	['editor#-link'] = true,
	['editorlink#'] = true,
	['editor-mask#'] = true,
	['editor#mask'] = true,
	['editor#-mask'] = true,
	['editormask#'] = true,
	['editor#-surname'] = true,
	['editor-surname#'] = true,
	['first#'] = true,
	['given#'] = true,
	['host#'] = true,
	['interviewer#'] = true,
	['interviewer-first#'] = true,
	['interviewer#-first'] = true,
	['interviewer-last#'] = true,
	['interviewer#-last'] = true,
	['interviewer-link#'] = true,
	['interviewer#-link'] = true,
	['interviewer-mask#'] = true,
	['interviewer#-mask'] = true,
	['last#'] = true,
	['subject#'] = true,
	['subject-link#'] = true,
	['subject#link'] = true,
	['subject#-link'] = true,
	['subjectlink#'] = true,
	['surname#'] = true,
	['translator#'] = true,
	['translator-first#'] = true,
	['translator#-first'] = true,
	['translator-last#'] = true,
	['translator#-last'] = true,
	['translator-given#'] = true,
	['translator#-given'] = true,
	['translator-surname#'] = true,
	['translator#-surname'] = true,
	['translator-link#'] = true,
	['translator#-link'] = true,
	['translator-mask#'] = true,
	['translator#-mask'] = true,
}


--[[--------------------------&lt; P R E P R I N T   S U P P O R T E D   P A R A M E T E R S &gt;--------------------

Cite arXiv, cite biorxiv, cite citeseerx, and cite ssrn are preprint templates that use the limited set of parameters
defined in the limited_basic_arguments and limited_numbered_arguments tables.  Those lists are supplemented with a
template-specific list of parameters that are required by the particular template and may be exclusive to one of the
proeprint templates.  Some of these parameters may also be available to the general cs1|2 templates.

Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values:
	true - these parameters are valid and supported parameters
	false - these parameters are deprecated but still supported
	nil - these parameters are no longer supported (when setting a parameter to nil, leave a comment stating the reasons for invalidating the parameter)
	
]]

--[[--------------------------&lt; C I T E   A R X I V &gt;----------------------------------------------------------

This is a list of parameters that once were but now are no longer supported:
	['ARXIV'] = nil,															-- not an initialization
	['version'] = nil,															-- this is the cite arxiv parameter; |version= still supported by other cs1|2 templates

]]

local arxiv_basic_arguments = {
	['arxiv'] = true,															-- cite arxiv and arxiv identifiers
	['class'] = true,															-- cite arxiv only
	['eprint'] = true,															-- cite arxiv and arxiv identifiers
}


--[[--------------------------&lt; C I T E   B I O R X I V &gt;------------------------------------------------------

]]

local biorxiv_basic_arguments = {
	['biorxiv'] = true,
}


--[[--------------------------&lt; C I T E   C I T E S E E R X &gt;--------------------------------------------------

]]

local citeseerx_basic_arguments = {
	['citeseerx'] = true,
}


--[[--------------------------&lt; C I T E   S S R N &gt;------------------------------------------------------------

]]

local ssrn_basic_arguments = {
	['ssrn'] = true,
	['SSRN'] = true,
}


--[[--------------------------&lt; L I M I T E D   S U P P O R T E D   P A R A M E T E R S &gt;----------------------

This is an experiment that attempts to use validate() and a limited list of valid parameters to validate the
parameters provided in a cite arxiv, cite biorxiv, or cite citeseerx templates.  These parameters are common to
all three templates

Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items can have three values:
	true - these parameters are valid and supported parameters
	false - these parameters are deprecated but still supported
	nil - these parameters are no longer supported (when setting a parameter to nil, leave a comment stating the reasons for invalidating the parameter)
	
]]

local limited_basic_arguments = {
	['at'] = true,
	['author'] = true,
	['author-first'] = true,
	['author-last'] = true,
	['authorlink'] = true,
	['author-link'] = true,
	['authormask'] = true,
	['author-mask'] = true,
	['authors'] = true,
	['collaboration'] = true,
	['date'] = true,
	['df'] = true,
	['displayauthors'] = true,
	['display-authors'] = true,
	['first'] = true,
	['given'] = true,
	['language'] = true,
	['last'] = true,
	['lastauthoramp'] = true,
	['last-author-amp'] = true,
	['mode'] = true,
	['name-list-format'] = true,
	['nocat'] = true,
	['no-cat'] = true,
	['notracking'] = true,
	['no-tracking'] = true,
	['p'] = true,
	['page'] = true,
	['pages'] = true,
	['postscript'] = true,
	['pp'] = true,
	['quotation'] = true,
	['quote'] = true,
	['ref'] = true,
	['surname'] = true,
	['template-doc-demo'] = true,
	['title'] = true,
	['url'] = true,
	['URL'] = true,
	['vauthors'] = true,
	['year'] = true,
}

local limited_numbered_arguments = {
	['author#'] = true,
	['author-first#'] = true,
	['author#-first'] = true,
	['author-last#'] = true,
	['author#-last'] = true,
	['author-link#'] = true,
	['author#link'] = true,
	['author#-link'] = true,
	['authorlink#'] = true,
	['author-mask#'] = true,
	['author#mask'] = true,
	['author#-mask'] = true,
	['authormask#'] = true,
	['first#'] = true,
	['given#'] = true,
	['last#'] = true,
	['surname#'] = true,
}


--[[--------------------------&lt; E X P O R T E D   T A B L E S &gt;------------------------------------------------
]]

return {
	basic_arguments = basic_arguments,
	numbered_arguments = numbered_arguments,
	limited_basic_arguments = limited_basic_arguments,
	limited_numbered_arguments = limited_numbered_arguments,
	arxiv_basic_arguments = arxiv_basic_arguments,
	biorxiv_basic_arguments = biorxiv_basic_arguments,
	citeseerx_basic_arguments = citeseerx_basic_arguments,
	ssrn_basic_arguments = ssrn_basic_arguments
	};</text>
      <sha1>94febqn4uu908bdzvywj54j5ao93d43</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/styles.css</title>
    <ns>828</ns>
    <id>57940169</id>
    <revision>
      <id>886058088</id>
      <parentid>879151008</parentid>
      <timestamp>2019-03-04T01:04:42Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>per [[Help talk:Citation Style 1#Protected edit request on 4 March_2019|edit request]];</comment>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text xml:space="preserve" bytes="3713">/*-------------------------&lt; P R O T E C T I O N   I C O N &gt;--------------------

the following line controls the page-protection icon in the upper right corner
it must remain within this comment
	{{sandbox other||{{pp-template}}}}

*/


/*-------------------------&lt; O V E R R I D E S &gt;--------------------------------

cs1|2 references are wrapped in &lt;cite&gt;...&lt;/cite&gt; tags.  Some wikis have not
chosen to override the generic user agent italic styling as en.wiki has.  This
(untested) styling should override the user agent default when cs1|2 templates
are rendered.

Similarly, some languages use different quotation punctuation so that setting
is also made available here.
*/
cite.citation {
	/* Reset italic styling set by user agent (only for cs1|2 templates; the
	reason for the .citation qualifier) */
	font-style: inherit;
}

.citation q {
	/* Straight quote marks for &lt;q&gt;; keep same as [[MediaWiki:Common.css]] */
	quotes: '"' '"' "'" "'";
}

/* ID and URL access
Both core and Common.css have selector .mw-parser-output a[href$=".pdf"].external
for PDF pages. All TemplateStyles pages are hoisted to .mw-parser-output. We need
to have specificity equal to a[href$=".pdf"].external for locks to override PDF icon.
*/
.citation .cs1-lock-free a {
	background: url(//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png) no-repeat;
	background-position: right .1em center;
}

.citation .cs1-lock-limited a,
.citation .cs1-lock-registration a {
	background: url(//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png) no-repeat;
	background-position: right .1em center;
}

.citation .cs1-lock-subscription a {
	background: url(//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png) no-repeat;
	background-position: right .1em center;
}

.cs1-subscription,
.cs1-registration {
	color: #555;
}

.cs1-subscription span,
.cs1-registration span {
	border-bottom: 1px dotted;
	cursor: help;
}

/* Wikisource icon
Experiment to see if it is possible/practical to add support for a wikisource
icon when |chapter= or |title= is wikilinked to a source in wikisource ala cite wikisource
*/
.cs1-ws-icon a {
	background: url(//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/12px-Wikisource-logo.svg.png) no-repeat;
	background-position: right .1em center;
}

/* Errors and maintenance */
code.cs1-code {
	/* &lt;code&gt;...&lt;/code&gt; style override: mediawiki's css definition is specified here:
	https://git.wikimedia.org/blob/mediawiki%2Fcore.git/69cd73811f7aadd093050dbf20ed70ef0b42a713/skins%2Fcommon%2FcommonElements.css#L199
	*/
	color: inherit;
	background: inherit;
	border: inherit;	/* code editor doesn't like inherit with border?
						https://www.w3.org/wiki/CSS/Properties/border
						suggests that inherit is ok
						the actual spec says the code editor is correct:
						https://www.w3.org/TR/css-backgrounds-3/#borders
						*/
	padding: inherit;
}

.cs1-hidden-error {
	display: none;
	font-size: 100%;
}

.cs1-visible-error {
	font-size: 100%;
}

.cs1-maint {
	display: none;
	color: #33aa33;
	margin-left: 0.3em;
}

/* Small text size
Set small text size in one place. 0.95 (here) * 0.9 (from references list) is
~0.85, which is the lower bound for size for accessibility. Old styling for this
was just 0.85. We could write the rule so that when this template is inside
references/reflist, only then does it multiply by 0.95; else multiply by 0.85 */
.cs1-subscription,
.cs1-registration,
.cs1-format {
	font-size: 95%;
}

/* kerning */
.cs1-kern-left,
.cs1-kern-wl-left {
	padding-left: 0.2em;
}

.cs1-kern-right,
.cs1-kern-wl-right {
	padding-right: 0.2em;
}</text>
      <sha1>7fv38nbtpuch4lec0zbgz4par9lwh5e</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Convert</title>
    <ns>828</ns>
    <id>38570716</id>
    <revision>
      <id>895419768</id>
      <parentid>845963531</parentid>
      <timestamp>2019-05-04T03:48:20Z</timestamp>
      <contributor>
        <username>Johnuniq</username>
        <id>6036800</id>
      </contributor>
      <comment>update from sandbox per [[Template talk:Convert#Module version 24]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="134748">-- Convert a value from one unit of measurement to another.
-- Example: {{convert|123|lb|kg}} --&gt; 123 pounds (56 kg)
-- See [[:en:Template:Convert/Transwiki guide]] if copying to another wiki.

local MINUS = '−'  -- Unicode U+2212 MINUS SIGN (UTF-8: e2 88 92)
local abs = math.abs
local floor = math.floor
local format = string.format
local log10 = math.log10
local ustring = mw.ustring
local ulen = ustring.len
local usub = ustring.sub

-- Configuration options to keep magic values in one location.
-- Conversion data and message text are defined in separate modules.
local config, maxsigfig
local numdot  -- must be '.' or ',' or a character which works in a regex
local numsep, numsep_remove, numsep_remove2
local data_code, all_units
local text_code
local varname        -- can be a code to use variable names that depend on value
local from_en_table  -- to translate an output string of en digits to local language
local to_en_table    -- to translate an input string of digits in local language to en
-- Use translation_table in convert/text to change the following.
local en_default           -- true uses lang=en unless convert has lang=local or local digits
local group_method = 3     -- code for how many digits are in a group
local per_word = 'per'     -- for units like "liters per kilometer"
local plural_suffix = 's'  -- only other useful value is probably '' to disable plural unit names
local omitsep              -- true to omit separator before local symbol/name

-- All units should be defined in the data module. However, to cater for quick changes
-- and experiments, any unknown unit is looked up in an extra data module, if it exists.
-- That module would be transcluded in only a small number of pages, so there should be
-- little server overhead from making changes, and changes should propagate quickly.
local extra_module  -- name of module with extra units
local extra_units   -- nil or table of extra units from extra_module

-- Some options in the invoking template can set variables used later in the module.
local currency_text  -- for a user-defined currency symbol: {{convert|12|$/ha|$=€}} (euro replaces dollar)

local function from_en(text)
	-- Input is a string representing a number in en digits with '.' decimal mark,
	-- without digit grouping (which is done just after calling this).
	-- Return the translation of the string with numdot and digits in local language.
	if numdot ~= '.' then
		text = text:gsub('%.', numdot)
	end
	if from_en_table then
		text = text:gsub('%d', from_en_table)
	end
	return text
end

local function to_en(text)
	-- Input is a string representing a number in the local language with
	-- an optional numdot decimal mark and numsep digit grouping.
	-- Return the translation of the string with '.' mark and en digits,
	-- and no separators (they have to be removed here to handle cases like
	-- numsep = '.' and numdot = ',' with input "1.234.567,8").
	if to_en_table then
		text = ustring.gsub(text, '%d', to_en_table)
	end
	if numsep_remove then
		text = text:gsub(numsep_remove, '')
	end
	if numsep_remove2 then
		text = text:gsub(numsep_remove2, '')
	end
	if numdot ~= '.' then
		text = text:gsub(numdot, '.')
	end
	return text
end

local function decimal_mark(text)
	-- Return ',' if text probably is using comma for decimal mark, or has no decimal mark.
	-- Return '.' if text probably is using dot for decimal mark.
	-- Otherwise return nothing (decimal mark not known).
	if not text:find('[.,]') then return ',' end
	text = text:gsub('^%-', ''):gsub('%+%d+/%d+$', ''):gsub('[Ee]%-?%d+$', '')
	local decimal =
		text:match('^0?([.,])%d+$') or
		text:match('%d([.,])%d?%d?$') or
		text:match('%d([.,])%d%d%d%d+$')
	if decimal then return decimal end
	if text:match('%.%d+%.') then return ',' end
	if text:match('%,%d+,') then return '.' end
end

local add_warning, with_separator  -- forward declarations
local function to_en_with_check(text, parms)
	-- Version of to_en() for a wiki using numdot = ',' and numsep = '.' to check
	-- text (an input number as a string) which might have been copied from enwiki.
	-- For example, in '1.234' the '.' could be a decimal mark or a group separator.
	-- From viwiki.
	if to_en_table then
		text = ustring.gsub(text, '%d', to_en_table)
	end
	if decimal_mark(text) == '.' then
		local original = text
		text = text:gsub(',', '')  -- for example, interpret "1,234.5" as an enwiki value
		if parms then
			add_warning(parms, 0, 'cvt_enwiki_num', original, with_separator({}, text))
		end
	else
		if numsep_remove then
			text = text:gsub(numsep_remove, '')
		end
		if numsep_remove2 then
			text = text:gsub(numsep_remove2, '')
		end
		if numdot ~= '.' then
			text = text:gsub(numdot, '.')
		end
	end
	return text
end

local function omit_separator(id)
	-- Return true if there should be no separator before id (a unit symbol or name).
	-- For zhwiki, there should be no separator if id uses local characters.
	-- The following kludge should be a sufficient test.
	if omitsep then
		if id:sub(1, 2) == '-{' then  -- for "-{...}-" content language variant
			return true
		end
		if id:byte() &gt; 127 then
			local first = usub(id, 1, 1)
			if first ~= 'Å' and first ~= '°' and first ~= 'µ' then
				return true
			end
		end
	end
	return id:sub(1, 1) == '/'  -- no separator before units like "/ha"
end

local spell_module  -- name of module that can spell numbers
local speller       -- function from that module to handle spelling (set if needed)
local wikidata_module, wikidata_data_module  -- names of Wikidata modules
local wikidata_code, wikidata_data  -- exported tables from those modules (set if needed)

local function set_config(args)
	-- Set configuration options from template #invoke or defaults.
	config = args
	maxsigfig = config.maxsigfig or 14  -- maximum number of significant figures
	local data_module, text_module
	local sandbox = config.sandbox and ('/' .. config.sandbox) or ''
	data_module = "Module:Convert/data" .. sandbox
	text_module = "Module:Convert/text" .. sandbox
	extra_module = "Module:Convert/extra" .. sandbox
	wikidata_module = "Module:Convert/wikidata" .. sandbox
	wikidata_data_module = "Module:Convert/wikidata/data" .. sandbox
	spell_module = "Module:ConvertNumeric"
	data_code = mw.loadData(data_module)
	text_code = mw.loadData(text_module)
	all_units = data_code.all_units
	local translation = text_code.translation_table
	if translation then
		numdot = translation.numdot
		numsep = translation.numsep
		if numdot == ',' and numsep == '.' then
			if text_code.all_messages.cvt_enwiki_num then
				to_en = to_en_with_check
			end
		end
		if translation.group then
			group_method = translation.group
		end
		if translation.per_word then
			per_word = translation.per_word
		end
		if translation.plural_suffix then
			plural_suffix = translation.plural_suffix
		end
		varname = translation.varname
		from_en_table = translation.from_en
		local use_workaround = true
		if use_workaround then
			-- 2013-07-05 workaround bug by making a copy of the required table.
			-- mw.ustring.gsub fails with a table (to_en_table) as the replacement,
			-- if the table is accessed via mw.loadData.
			local source = translation.to_en
			if source then
				to_en_table = {}
				for k, v in pairs(source) do
					to_en_table[k] = v
				end
			end
		else
			to_en_table = translation.to_en
		end
		if translation.lang == 'en default' then
			en_default = true  -- for hiwiki
		end
		omitsep = translation.omitsep  -- for zhwiki
	end
	numdot = config.numdot or numdot or '.'  -- decimal mark before fractional digits
	numsep = config.numsep or numsep or ','  -- group separator for numbers
	-- numsep should be ',' or '.' or '' or '&amp;nbsp;' or a Unicode character.
	-- numsep_remove must work in a regex to identify separators to be removed.
	if numsep ~= '' then
		numsep_remove = (numsep == '.') and '%.' or numsep
	end
	if numsep ~= ',' and numdot ~= ',' then
		numsep_remove2 = ','  -- so numbers copied from enwiki will work
	end
end

local function collection()
	-- Return a table to hold items.
	return {
		n = 0,
		add = function (self, item)
			self.n = self.n + 1
			self[self.n] = item
		end,
	}
end

local function divide(numerator, denominator)
	-- Return integers quotient, remainder resulting from dividing the two
	-- given numbers, which should be unsigned integers.
	local quotient, remainder = floor(numerator / denominator), numerator % denominator
	if not (0 &lt;= remainder and remainder &lt; denominator) then
		-- Floating point limits may need this, as in {{convert|160.02|Ym|ydftin}}.
		remainder = 0
	end
	return quotient, remainder
end

local function split(text, delimiter)
	-- Return a numbered table with fields from splitting text.
	-- The delimiter is used in a regex without escaping (for example, '.' would fail).
	-- Each field has any leading/trailing whitespace removed.
	local t = {}
	text = text .. delimiter  -- to get last item
	for item in text:gmatch('%s*(.-)%s*' .. delimiter) do
		table.insert(t, item)
	end
	return t
end

local function strip(text)
	-- If text is a string, return its content with no leading/trailing
	-- whitespace. Otherwise return nil (a nil argument gives a nil result).
	if type(text) == 'string' then
		return text:match("^%s*(.-)%s*$")
	end
end

local function table_len(t)
	-- Return length (&lt;100) of a numbered table to replace #t which is
	-- documented to not work if t is accessed via mw.loadData().
	for i = 1, 100 do
		if t[i] == nil then
			return i - 1
		end
	end
end

local function wanted_category(catkey, catsort, want_warning)
	-- Return message category if it is wanted in current namespace,
	-- otherwise return ''.
	local cat
	local title = mw.title.getCurrentTitle()
	if title then
		local nsdefault = '0'  -- default namespace: '0' = article; '0,10' = article and template
		local namespace = title.namespace
		for _, v in ipairs(split(config.nscat or nsdefault, ',')) do
			if namespace == tonumber(v) then
				cat = text_code.all_categories[want_warning and 'warning' or catkey]
				if catsort and catsort ~= '' and cat:sub(-2) == ']]' then
					cat = cat:sub(1, -3) .. '|' .. mw.text.nowiki(usub(catsort, 1, 20)) .. ']]'
				end
				break
			end
		end
	end
	return cat or ''
end

local function message(parms, mcode, is_warning)
	-- Return wikitext for an error message, including category if specified
	-- for the message type.
	-- mcode = numbered table specifying the message:
	--    mcode[1] = 'cvt_xxx' (string used as a key to get message info)
	--    mcode[2] = 'parm1' (string to replace '$1' if any in message)
	--    mcode[3] = 'parm2' (string to replace '$2' if any in message)
	--    mcode[4] = 'parm3' (string to replace '$3' if any in message)
	local msg
	if type(mcode) == 'table' then
		if mcode[1] == 'cvt_no_output' then
			-- Some errors should cause convert to output an empty string,
			-- for example, for an optional field in an infobox.
			return ''
		end
		msg = text_code.all_messages[mcode[1]]
	end
	parms.have_problem = true
	local function subparm(fmt, ...)
		local rep = {}
		for i, v in ipairs({...}) do
			rep['$' .. i] = v
		end
		return (fmt:gsub('$%d+', rep))
	end
	if msg then
		local parts = {}
		local regex, replace = msg.regex, msg.replace
		for i = 1, 3 do
			local limit = 40
			local s = mcode[i + 1]
			if s then
				if regex and replace then
					s = s:gsub(regex, replace)
					limit = nil  -- allow long "should be" messages
				end
				-- Escape user input so it does not break the message.
				-- To avoid tags (like {{convert|1&lt;math&gt;23&lt;/math&gt;|m}}) breaking
				-- the mouseover title, any strip marker starting with char(127) is
				-- replaced with '...' (text not needing i18n).
				local append
				local pos = s:find(string.char(127), 1, true)
				if pos then
					append = '...'
					s = s:sub(1, pos - 1)
				end
				if limit and ulen(s) &gt; limit then
					s = usub(s, 1, limit)
					append = '...'
				end
				s = mw.text.nowiki(s) .. (append or '')
			else
				s = '?'
			end
			parts['$' .. i] = s
		end
		local function ispreview()
			-- Return true if a prominent message should be shown.
			if parms.test == 'preview' or parms.test == 'nopreview' then
				-- For testing, can preview a real message or simulate a preview
				-- when running automated tests.
				return parms.test == 'preview'
			end
			local success, revid = pcall(function ()
				return (parms.frame):preprocess('{{REVISIONID}}') end)
			return success and (revid == '')
		end
		local want_warning = is_warning and
			not config.warnings and  -- show unobtrusive warnings if config.warnings not configured
			not msg.nowarn           -- but use msg settings, not standard warning, if specified
		local title = string.gsub(msg[1] or 'Missing message', '$%d+', parts)
		local text = want_warning and '*' or msg[2] or 'Missing message'
		local cat = wanted_category(msg[3], mcode[2], want_warning)
		local anchor = msg[4] or ''
		local fmtkey = ispreview() and 'cvt_format_preview' or
			(want_warning and 'cvt_format2' or msg.format or 'cvt_format')
		local fmt = text_code.all_messages[fmtkey] or 'convert: bug'
		return subparm(fmt, title:gsub('"', '&amp;quot;'), text, cat, anchor)
	end
	return 'Convert internal error: unknown message'
end

function add_warning(parms, level, key, text1, text2)  -- for forward declaration above
	-- If enabled, add a warning that will be displayed after the convert result.
	-- A higher level is more verbose: more kinds of warnings are displayed.
	-- To reduce output noise, only the first warning is displayed.
	if level &lt;= (tonumber(config.warnings) or 1) then
		if parms.warnings == nil then
			parms.warnings = message(parms, { key, text1, text2 }, true)
		end
	end
end

local function spell_number(parms, inout, number, numerator, denominator)
	-- Return result of spelling (number, numerator, denominator), or
	-- return nil if spelling is not available or not supported for given text.
	-- Examples (each value must be a string or nil):
	--   number  numerator  denominator  output
	--   ------  ---------  -----------  -------------------
	--   "1.23"    nil        nil        one point two three
	--    "1"      "2"        "3"        one and two thirds
	--    nil      "2"        "3"        two thirds
	if not speller then
		local function get_speller(module)
			return require(module).spell_number
		end
		local success
		success, speller = pcall(get_speller, spell_module)
		if not success or type(speller) ~= 'function' then
			add_warning(parms, 1, 'cvt_no_spell', 'spell')
			return nil
		end
	end
	local case
	if parms.spell_upper == inout then
		case = true
		parms.spell_upper = nil  -- only uppercase first word in a multiple unit
	end
	local sp = not parms.opt_sp_us
	local adj = parms.opt_adjectival
	return speller(number, numerator, denominator, case, sp, adj)
end

------------------------------------------------------------------------
-- BEGIN: Code required only for built-in units.
-- LATER: If need much more code, move to another module to simplify this module.
local function speed_of_sound(altitude)
	-- This is for the Mach built-in unit of speed.
	-- Return speed of sound in metres per second at given altitude in feet.
	-- If no altitude given, use default (zero altitude = sea level).
	-- Table gives speed of sound in miles per hour at various altitudes:
	--   altitude = -17,499 to 302,499 feet
	-- mach_table[a + 4] = s where
	--   a = (altitude / 5000) rounded to nearest integer (-3 to 60)
	--   s = speed of sound (mph) at that altitude
	-- LATER: Should calculate result from an interpolation between the next
	-- lower and higher altitudes in table, rather than rounding to nearest.
	-- From: http://www.aerospaceweb.org/question/atmosphere/q0112.shtml
	local mach_table = {                                                       -- a =
		799.5, 787.0, 774.2, 761.207051,                                       -- -3 to  0
		748.0, 734.6, 721.0, 707.0, 692.8, 678.3, 663.5, 660.1, 660.1, 660.1,  --  1 to 10
		660.1, 660.1, 660.1, 662.0, 664.3, 666.5, 668.9, 671.1, 673.4, 675.6,  -- 11 to 20
		677.9, 683.7, 689.9, 696.0, 702.1, 708.1, 714.0, 719.9, 725.8, 731.6,  -- 21 to 30
		737.3, 737.7, 737.7, 736.2, 730.5, 724.6, 718.8, 712.9, 707.0, 701.1,  -- 31 to 40
		695.0, 688.9, 682.8, 676.6, 670.4, 664.1, 657.8, 652.9, 648.3, 643.7,  -- 41 to 50
		639.1, 634.4, 629.6, 624.8, 620.0, 615.2, 613.2, 613.2, 613.2, 613.5,  -- 51 to 60
	}
	altitude = altitude or 0
	local a = (altitude &lt; 0) and -altitude or altitude
	a = floor(a / 5000 + 0.5)
	if altitude &lt; 0 then
		a = -a
	end
	if a &lt; -3 then
		a = -3
	elseif a &gt; 60 then
		a = 60
	end
	return mach_table[a + 4] * 0.44704  -- mph converted to m/s
end
-- END: Code required only for built-in units.
------------------------------------------------------------------------

local function get_range(word)
	-- Return a range (string or table) corresponding to word (like "to"),
	-- or return nil if not a range word.
	local ranges = text_code.ranges
	return ranges.types[word] or ranges.types[ranges.aliases[word]]
end

local function check_mismatch(unit1, unit2)
	-- If unit1 cannot be converted to unit2, return an error message table.
	-- This allows conversion between units of the same type, and between
	-- Nm (normally torque) and ftlb (energy), as in gun-related articles.
	-- This works because Nm is the base unit (scale = 1) for both the
	-- primary type (torque), and the alternate type (energy, where Nm = J).
	-- A match occurs if the primary types are the same, or if unit1 matches
	-- the alternate type of unit2, and vice versa. That provides a whitelist
	-- of which conversions are permitted between normally incompatible types.
	if unit1.utype == unit2.utype or
		(unit1.utype == unit2.alttype and unit1.alttype == unit2.utype) then
		return nil
	end
	return { 'cvt_mismatch', unit1.utype, unit2.utype }
end

local function override_from(out_table, in_table, fields)
	-- Copy the specified fields from in_table to out_table, but do not
	-- copy nil fields (keep any corresponding field in out_table).
	for _, field in ipairs(fields) do
		if in_table[field] then
			out_table[field] = in_table[field]
		end
	end
end

local function shallow_copy(t)
	-- Return a shallow copy of table t.
	-- Do not need the features and overhead of the Scribunto mw.clone().
	local result = {}
	for k, v in pairs(t) do
		result[k] = v
	end
	return result
end

local unit_mt = {
	-- Metatable to get missing values for a unit that does not accept SI prefixes.
	-- Warning: The boolean value 'false' is returned for any missing field
	-- so __index is not called twice for the same field in a given unit.
	__index = function (self, key)
		local value
		if key == 'name1' or key == 'sym_us' then
			value = self.symbol
		elseif key == 'name2' then
			value = self.name1 .. plural_suffix
		elseif key == 'name1_us' then
			value = self.name1
			if not rawget(self, 'name2_us') then
				-- If name1_us is 'foot', do not make name2_us by appending plural_suffix.
				self.name2_us = self.name2
			end
		elseif key == 'name2_us' then
			local raw1_us = rawget(self, 'name1_us')
			if raw1_us then
				value = raw1_us .. plural_suffix
			else
				value = self.name2
			end
		elseif key == 'link' then
			value = self.name1
		else
			value = false
		end
		rawset(self, key, value)
		return value
	end
}

local function prefixed_name(unit, name, index)
	-- Return unit name with SI prefix inserted at correct position.
	-- index = 1 (name1), 2 (name2), 3 (name1_us), 4 (name2_us).
	-- The position is a byte (not character) index, so use Lua's sub().
	local pos = rawget(unit, 'prefix_position')
	if type(pos) == 'string' then
		pos = tonumber(split(pos, ',')[index])
	end
	if pos then
		return name:sub(1, pos - 1) .. unit.si_name .. name:sub(pos)
	end
	return unit.si_name .. name
end

local unit_prefixed_mt = {
	-- Metatable to get missing values for a unit that accepts SI prefixes.
	-- Before use, fields si_name, si_prefix must be defined.
	-- The unit must define _symbol, _name1 and
	-- may define _sym_us, _name1_us, _name2_us
	-- (_sym_us, _name2_us may be defined for a language using sp=us
	-- to refer to a variant unrelated to U.S. units).
	__index = function (self, key)
		local value
		if key == 'symbol' then
			value = self.si_prefix .. self._symbol
		elseif key == 'sym_us' then
			value = rawget(self, '_sym_us')
			if value then
				value = self.si_prefix .. value
			else
				value = self.symbol
			end
		elseif key == 'name1' then
			value = prefixed_name(self, self._name1, 1)
		elseif key == 'name2' then
			value = rawget(self, '_name2')
			if value then
				value = prefixed_name(self, value, 2)
			else
				value = self.name1 .. plural_suffix
			end
		elseif key == 'name1_us' then
			value = rawget(self, '_name1_us')
			if value then
				value = prefixed_name(self, value, 3)
			else
				value = self.name1
			end
		elseif key == 'name2_us' then
			value = rawget(self, '_name2_us')
			if value then
				value = prefixed_name(self, value, 4)
			elseif rawget(self, '_name1_us') then
				value = self.name1_us .. plural_suffix
			else
				value = self.name2
			end
		elseif key == 'link' then
			value = self.name1
		else
			value = false
		end
		rawset(self, key, value)
		return value
	end
}

local unit_per_mt = {
	-- Metatable to get values for a per unit of form "x/y".
	-- This is never called to determine a unit name or link because per units
	-- are handled as a special case.
	-- Similarly, the default output is handled elsewhere, and for a symbol
	-- this is only called from get_default() for default_exceptions.
	__index = function (self, key)
		local value
		if key == 'symbol' then
			local per = self.per
			local unit1, unit2 = per[1], per[2]
			if unit1 then
				value = unit1[key] .. '/' .. unit2[key]
			else
				value = '/' .. unit2[key]
			end
		elseif key == 'sym_us' then
			value = self.symbol
		elseif key == 'scale' then
			local per = self.per
			local unit1, unit2 = per[1], per[2]
			value = (unit1 and unit1.scale or 1) * self.scalemultiplier / unit2.scale
		else
			value = false
		end
		rawset(self, key, value)
		return value
	end
}

local function make_per(unitcode, unit_table, ulookup)
	-- Return true, t where t is a per unit with unit codes expanded to unit tables,
	-- or return false, t where t is an error message table.
	local result = {
		unitcode = unitcode,
		utype = unit_table.utype,
		per = {}
	}
	override_from(result, unit_table, { 'invert', 'iscomplex', 'default', 'link', 'symbol', 'symlink' })
	result.symbol_raw = (result.symbol or false)  -- to distinguish between a defined exception and a metatable calculation
	local prefix
	for i, v in ipairs(unit_table.per) do
		if i == 1 and v == '' then
			-- First unit symbol can be empty; that gives a nil first unit table.
		elseif i == 1 and text_code.currency[v] then
			prefix = currency_text or v
		else
			local success, t = ulookup(v)
			if not success then return false, t end
			result.per[i] = t
		end
	end
	local multiplier = unit_table.multiplier
	if not result.utype then
		-- Creating an automatic per unit.
		local unit1 = result.per[1]
		local utype = (unit1 and unit1.utype or prefix or '') .. '/' .. result.per[2].utype
		local t = data_code.per_unit_fixups[utype]
		if t then
			if type(t) == 'table' then
				utype = t.utype or utype
				result.link = result.link or t.link
				multiplier = multiplier or t.multiplier
			else
				utype = t
			end
		end
		result.utype = utype
	end
	result.scalemultiplier = multiplier or 1
	result.vprefix = prefix or false  -- set to non-nil to avoid calling __index
	return true, setmetatable(result, unit_per_mt)
end

local function lookup(parms, unitcode, what, utable, fails, depth)
	-- Return true, t where t is a copy of the unit's converter table,
	-- or return false, t where t is an error message table.
	-- Parameter 'what' determines whether combination units are accepted:
	--   'no_combination'  : single unit only
	--   'any_combination' : single unit or combination or output multiple
	--   'only_multiple'   : single unit or output multiple only
	-- Parameter unitcode is a symbol (like 'g'), with an optional SI prefix (like 'kg').
	-- If, for example, 'kg' is in this table, that entry is used;
	-- otherwise the prefix ('k') is applied to the base unit ('g').
	-- If unitcode is a known combination code (and if allowed by what),
	-- a table of output multiple unit tables is included in the result.
	-- For compatibility with the old template, an underscore in a unitcode is
	-- replaced with a space so usage like {{convert|350|board_feet}} works.
	-- Wikignomes may also put two spaces or "&amp;nbsp;" in combinations, so
	-- replace underscore, "&amp;nbsp;", and multiple spaces with a single space.
	utable = utable or parms.unittable or all_units
	fails = fails or {}
	depth = depth and depth + 1 or 1
	if depth &gt; 9 then
		-- There are ways to mistakenly define units which result in infinite
		-- recursion when lookup() is called. That gives a long delay and very
		-- confusing error messages, so the depth parameter is used as a guard.
		return false, { 'cvt_lookup', unitcode }
	end
	if unitcode == nil or unitcode == '' then
		return false, { 'cvt_no_unit' }
	end
	unitcode = unitcode:gsub('_', ' '):gsub('&amp;nbsp;', ' '):gsub('  +', ' ')
	local function call_make_per(t)
		return make_per(unitcode, t,
			function (ucode) return lookup(parms, ucode, 'no_combination', utable, fails, depth) end
		)
	end
	local t = utable[unitcode]
	if t then
		if t.shouldbe then
			return false, { 'cvt_should_be', t.shouldbe }
		end
		if t.sp_us then
			parms.opt_sp_us = true
		end
		local target = t.target  -- nil, or unitcode is an alias for this target
		if target then
			local success, result = lookup(parms, target, what, utable, fails, depth)
			if not success then return false, result end
			override_from(result, t, { 'customary', 'default', 'link', 'symbol', 'symlink' })
			local multiplier = t.multiplier
			if multiplier then
				result.multiplier = tostring(multiplier)
				result.scale = result.scale * multiplier
			end
			return true, result
		end
		if t.per then
			return call_make_per(t)
		end
		local combo = t.combination  -- nil or a table of unitcodes
		if combo then
			local multiple = t.multiple
			if what == 'no_combination' or (what == 'only_multiple' and not multiple) then
				return false, { 'cvt_bad_unit', unitcode }
			end
			-- Recursively create a combination table containing the
			-- converter table of each unitcode.
			local result = { utype = t.utype, multiple = multiple, combination = {} }
			local cvt = result.combination
			for i, v in ipairs(combo) do
				local success, t = lookup(parms, v, multiple and 'no_combination' or 'only_multiple', utable, fails, depth)
				if not success then return false, t end
				cvt[i] = t
			end
			return true, result
		end
		local result = shallow_copy(t)
		result.unitcode = unitcode
		if result.prefixes then
			result.si_name = ''
			result.si_prefix = ''
			return true, setmetatable(result, unit_prefixed_mt)
		end
		return true, setmetatable(result, unit_mt)
	end
	local SIprefixes = text_code.SIprefixes
	for plen = SIprefixes[1] or 2, 1, -1 do
		-- Look for an SI prefix; should never occur with an alias.
		-- Check for longer prefix first ('dam' is decametre).
		-- SIprefixes[1] = prefix maximum #characters (as seen by mw.ustring.sub).
		local prefix = usub(unitcode, 1, plen)
		local si = SIprefixes[prefix]
		if si then
			local t = utable[usub(unitcode, plen+1)]
			if t and t.prefixes then
				local result = shallow_copy(t)
				result.unitcode = unitcode
				result.si_name = parms.opt_sp_us and si.name_us or si.name
				result.si_prefix = si.prefix or prefix
				result.scale = t.scale * 10 ^ (si.exponent * t.prefixes)
				return true, setmetatable(result, unit_prefixed_mt)
			end
		end
	end
	-- Accept user-defined combinations like "acre+m2+ha" or "acre m2 ha" for output.
	-- If '+' is used, each unit code can include a space, and any error is fatal.
	-- If ' ' is used and if each space-separated word is a unit code, it is a combo,
	-- but errors are not fatal so the unit code can be looked up as an extra unit.
	local err_is_fatal
	local combo = collection()
	if unitcode:find('+', 1, true) then
		err_is_fatal = true
		for item in (unitcode .. '+'):gmatch('%s*(.-)%s*%+') do
			if item ~= '' then
				combo:add(item)
			end
		end
	elseif unitcode:find('%s') then
		for item in unitcode:gmatch('%S+') do
			combo:add(item)
		end
	end
	if combo.n &gt; 1 then
		local function lookup_combo()
			if what == 'no_combination' or what == 'only_multiple' then
				return false, { 'cvt_bad_unit', unitcode }
			end
			local result = { combination = {} }
			local cvt = result.combination
			for i, v in ipairs(combo) do
				local success, t = lookup(parms, v, 'only_multiple', utable, fails, depth)
				if not success then return false, t end
				if i == 1 then
					result.utype = t.utype
				else
					local mismatch = check_mismatch(result, t)
					if mismatch then
						return false, mismatch
					end
				end
				cvt[i] = t
			end
			return true, result
		end
		local success, result = lookup_combo()
		if success or err_is_fatal then
			return success, result
		end
	end
	-- Accept any unit with an engineering notation prefix like "e6cuft"
	-- (million cubic feet), but not chained prefixes like "e3e6cuft",
	-- and not if the unit is a combination or multiple,
	-- and not if the unit has an offset or is a built-in.
	-- Only en digits are accepted.
	local exponent, baseunit = unitcode:match('^e(%d+)(.*)')
	if exponent then
		local engscale = text_code.eng_scales[exponent]
		if engscale then
			local success, result = lookup(parms, baseunit, 'no_combination', utable, fails, depth)
			if success and not (result.offset or result.builtin or result.engscale) then
				result.unitcode = unitcode  -- 'e6cuft' not 'cuft'
				result.defkey = unitcode  -- key to lookup default exception
				result.engscale = engscale
				result.scale = result.scale * 10 ^ tonumber(exponent)
				return true, result
			end
		end
	end
	-- Look for x/y; split on right-most slash to get scale correct (x/y/z is x/y per z).
	local top, bottom = unitcode:match('^(.-)/([^/]+)$')
	if top and not unitcode:find('e%d') then
		-- If valid, create an automatic per unit for an "x/y" unit code.
		-- The unitcode must not include extraneous spaces.
		-- Engineering notation (apart from at start and which has been stripped before here),
		-- is not supported so do not make a per unit if find text like 'e3' in unitcode.
		local success, result = call_make_per({ per = {top, bottom} })
		if success then
			return true, result
		end
	end
	if not parms.opt_ignore_error and not get_range(unitcode) then
		-- Want the "what links here" list for the extra_module to show only cases
		-- where an extra unit is used, so do not require it if invoked from {{val}}
		-- or if looking up a range word which cannot be a unit.
		if not extra_units then
			local success, extra = pcall(function () return require(extra_module).extra_units end)
			if success and type(extra) == 'table' then
				extra_units = extra
			end
		end
		if extra_units then
			-- A unit in one data table might refer to a unit in the other table, so
			-- switch between them, relying on fails or depth to terminate loops.
			if not fails[unitcode] then
				fails[unitcode] = true
				local other = (utable == all_units) and extra_units or all_units
				local success, result = lookup(parms, unitcode, what, other, fails, depth)
				if success then
					return true, result
				end
			end
		end
	end
	if to_en_table then
		-- At fawiki it is common to translate all digits so a unit like "km2" becomes "km۲".
		local en_code = ustring.gsub(unitcode, '%d', to_en_table)
		if en_code ~= unitcode then
			return lookup(parms, en_code, what, utable, fails, depth)
		end
	end
	return false, { 'cvt_unknown', unitcode }
end

local function valid_number(num)
	-- Return true if num is a valid number.
	-- In Scribunto (different from some standard Lua), when expressed as a string,
	-- overflow or other problems are indicated with text like "inf" or "nan"
	-- which are regarded as invalid here (each contains "n").
	if type(num) == 'number' and tostring(num):find('n', 1, true) == nil then
		return true
	end
end

local function hyphenated(name, parts)
	-- Return a hyphenated form of given name (for adjectival usage).
	-- The name may be linked and the target of the link must not be changed.
	-- Hypothetical examples:
	--   [[long ton|ton]]         →  [[long ton|ton]]          (no change)
	--   [[tonne|long ton]]       →  [[tonne|long-ton]]
	--   [[metric ton|long ton]]  →  [[metric ton|long-ton]]
	--   [[long ton]]             →  [[long ton|long-ton]]
	-- Input can also have multiple links in a single name like:
	--   [[United States customary units|U.S.]] [[US gallon|gallon]]
	--   [[mile]]s per [[United States customary units|U.S.]] [[quart]]
	--   [[long ton]]s per [[short ton]]
	-- Assume that links cannot be nested (never like "[[abc[[def]]ghi]]").
	-- This uses a simple and efficient procedure that works for most cases.
	-- Some units (if used) would require more, and can later think about
	-- adding a method to handle exceptions.
	-- The procedure is to replace each space with a hyphen, but
	-- not a space after ')' [for "(pre-1954&amp;nbsp;US) nautical mile"], and
	-- not spaces immediately before '(' or in '(...)' [for cases like
	-- "British thermal unit (ISO)" and "Calorie (International Steam Table)"].
	if name:find(' ', 1, true) then
		if parts then
			local pos
			if name:sub(1, 1) == '(' then
				pos = name:find(')', 1, true)
				if pos then
					return name:sub(1, pos+1) .. name:sub(pos+2):gsub(' ', '-')
				end
			elseif name:sub(-1) == ')' then
				pos = name:find('(', 1, true)
				if pos then
					return name:sub(1, pos-2):gsub(' ', '-') .. name:sub(pos-1)
				end
			end
			return name:gsub(' ', '-')
		end
		parts = collection()
		for before, item, after in name:gmatch('([^[]*)(%[%[[^[]*%]%])([^[]*)') do
			if item:find(' ', 1, true) then
				local prefix
				local plen = item:find('|', 1, true)
				if plen then
					prefix = item:sub(1, plen)
					item = item:sub(plen + 1, -3)
				else
					prefix = item:sub(1, -3) .. '|'
					item = item:sub(3, -3)
				end
				item = prefix .. hyphenated(item, parts) .. ']]'
			end
			parts:add(before:gsub(' ', '-') .. item .. after:gsub(' ', '-'))
		end
		if parts.n == 0 then
			-- No link like "[[...]]" was found in the original name.
			parts:add(hyphenated(name, parts))
		end
		return table.concat(parts)
	end
	return name
end

local function hyphenated_maybe(parms, want_name, sep, id, inout)
	-- Return s, f where
	--   s = id, possibly modified
	--   f = true if hyphenated
	-- Possible modifications: hyphenate; prepend '-'; append mid text.
	if id == nil or id == '' then
		return ''
	end
	local mid = (inout == (parms.opt_flip and 'out' or 'in')) and parms.mid or ''
	if want_name then
		if parms.opt_adjectival then
			return '-' .. hyphenated(id) .. mid, true
		end
		if parms.opt_add_s and id:sub(-1) ~= 's' then
			id = id .. 's'  -- for nowiki
		end
	end
	return sep .. id .. mid
end

local function use_minus(text)
	-- Return text with Unicode minus instead of '-', if present.
	if text:sub(1, 1) == '-' then
		return MINUS .. text:sub(2)
	end
	return text
end

local function digit_groups(parms, text, method)
	-- Return a numbered table of groups of digits (left-to-right, in local language).
	-- Parameter method is a number or nil:
	--   3 for 3-digit grouping (default), or
	--   2 for 3-then-2 grouping (only for digits before decimal mark).
	local len_right
	local len_left = text:find('.', 1, true)
	if len_left then
		len_right = #text - len_left
		len_left = len_left - 1
	else
		len_left = #text
	end
	local twos = method == 2 and len_left &gt; 5
	local groups = collection()
	local run = len_left
	local n
	if run &lt; 4 or (run == 4 and parms.opt_comma5) then
		if parms.opt_gaps then
			n = run
		else
			n = #text
		end
	elseif twos then
		n = run % 2 == 0 and 1 or 2
	else
		n = run % 3 == 0 and 3 or run % 3
	end
	while run &gt; 0 do
		groups:add(n)
		run = run - n
		n = (twos and run &gt; 3) and 2 or 3
	end
	if len_right then
		if groups.n == 0 then
			groups:add(0)
		end
		if parms.opt_gaps and len_right &gt; 3 then
			local want4 = not parms.opt_gaps3  -- true gives no gap before trailing single digit
			local isfirst = true
			run = len_right
			while run &gt; 0 do
				n = (want4 and run == 4) and 4 or (run &gt; 3 and 3 or run)
				if isfirst then
					isfirst = false
					groups[groups.n] = groups[groups.n] + 1 + n
				else
					groups:add(n)
				end
				run = run - n
			end
		else
			groups[groups.n] = groups[groups.n] + 1 + len_right
		end
	end
	local pos = 1
	for i, length in ipairs(groups) do
		groups[i] = from_en(text:sub(pos, pos + length - 1))
		pos = pos + length
	end
	return groups
end

function with_separator(parms, text)  -- for forward declaration above
	-- Input text is a number in en digits with optional '.' decimal mark.
	-- Return an equivalent, formatted for display:
	--   with a custom decimal mark instead of '.', if wanted
	--   with thousand separators inserted, if wanted
	--   digits in local language
	-- The given text is like '123' or '123.' or '12345.6789'.
	-- The text has no sign (caller inserts that later, if necessary).
	-- When using gaps, they are inserted before and after the decimal mark.
	-- Separators are inserted only before the decimal mark.
	-- A trailing dot (as in '123.') is removed because their use appears to
	-- be accidental, and such a number should be shown as '123' or '123.0'.
	-- It is useful for convert to suppress the dot so, for example, '4000.'
	-- is a simple way of indicating that all the digits are significant.
	if text:sub(-1) == '.' then
		text = text:sub(1, -2)
	end
	if #text &lt; 4 or parms.opt_nocomma or numsep == '' then
		return from_en(text)
	end
	local groups = digit_groups(parms, text, group_method)
	if parms.opt_gaps then
		if groups.n &lt;= 1 then
			return groups[1] or ''
		end
		local nowrap = '&lt;span style="white-space: nowrap"&gt;'
		local gap = '&lt;span style="margin-left: 0.25em"&gt;'
		local close = '&lt;/span&gt;'
		return nowrap .. groups[1] .. gap .. table.concat(groups, close .. gap, 2, groups.n) .. close .. close
	end
	return table.concat(groups, numsep)
end

-- An input value like 1.23e12 is displayed using scientific notation (1.23×10¹²).
-- That also makes the output use scientific notation, except for small values.
-- In addition, very small or very large output values use scientific notation.
-- Use format(fmtpower, significand, '10', exponent) where each argument is a string.
local fmtpower = '%s&lt;span style="margin:0 .15em 0 .25em"&gt;×&lt;/span&gt;%s&lt;sup&gt;%s&lt;/sup&gt;'

local function with_exponent(parms, show, exponent)
	-- Return wikitext to display the implied value in scientific notation.
	-- Input uses en digits; output uses digits in local language.
	return format(fmtpower, with_separator(parms, show), from_en('10'), use_minus(from_en(tostring(exponent))))
end

local function make_sigfig(value, sigfig)
	-- Return show, exponent that are equivalent to the result of
	-- converting the number 'value' (where value &gt;= 0) to a string,
	-- rounded to 'sigfig' significant figures.
	-- The returned items are:
	--   show: a string of digits; no sign and no dot;
	--         there is an implied dot before show.
	--   exponent: a number (an integer) to shift the implied dot.
	-- Resulting value = tonumber('.' .. show) * 10^exponent.
	-- Examples:
	--   make_sigfig(23.456, 3) returns '235', 2 (.235 * 10^2).
	--   make_sigfig(0.0023456, 3) returns '235', -2 (.235 * 10^-2).
	--   make_sigfig(0, 3) returns '000', 1 (.000 * 10^1).
	if sigfig &lt;= 0 then
		sigfig = 1
	elseif sigfig &gt; maxsigfig then
		sigfig = maxsigfig
	end
	if value == 0 then
		return string.rep('0', sigfig), 1
	end
	local exp, fracpart = math.modf(log10(value))
	if fracpart &gt;= 0 then
		fracpart = fracpart - 1
		exp = exp + 1
	end
	local digits = format('%.0f', 10^(fracpart + sigfig))
	if #digits &gt; sigfig then
		-- Overflow (for sigfig=3: like 0.9999 rounding to "1000"; need "100").
		digits = digits:sub(1, sigfig)
		exp = exp + 1
	end
	assert(#digits == sigfig, 'Bug: rounded number has wrong length')
	return digits, exp
end

-- Fraction output format.
local fracfmt = {
	{ -- Like {{frac}} (fraction slash).
		-- 1/2    : sign, numerator, denominator
		-- 1+2/3  : signed_wholenumber, numerator, denominator
		'&lt;span class="frac nowrap"&gt;%s&lt;sup&gt;%s&lt;/sup&gt;&amp;frasl;&lt;sub&gt;%s&lt;/sub&gt;&lt;/span&gt;',
		'&lt;span class="frac nowrap"&gt;%s&lt;span class="visualhide"&gt;&amp;nbsp;&lt;/span&gt;&lt;sup&gt;%s&lt;/sup&gt;&amp;frasl;&lt;sub&gt;%s&lt;/sub&gt;&lt;/span&gt;',
	},
	{ -- Like {{sfrac}} (fraction horizontal bar).
		-- 1//2   : sign, numerator, denominator (sign should probably be before the fraction, but then it can wrap, and html is already too long)
		-- 1+2//3 : signed_wholenumber, numerator, denominator
		'&lt;span class="sfrac nowrap" style="display:inline-block; vertical-align:-0.5em; font-size:85%%; text-align:center;"&gt;&lt;span style="display:block; line-height:1em; padding:0 0.1em;"&gt;%s%s&lt;/span&gt;&lt;span class="visualhide"&gt;/&lt;/span&gt;&lt;span style="display:block; line-height:1em; padding:0 0.1em; border-top:1px solid;"&gt;%s&lt;/span&gt;&lt;/span&gt;',
		'&lt;span class="sfrac nowrap"&gt;%s&lt;span class="visualhide"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="display:inline-block; vertical-align:-0.5em; font-size:85%%; text-align:center;"&gt;&lt;span style="display:block; line-height:1em; padding:0 0.1em;"&gt;%s&lt;/span&gt;&lt;span class="visualhide"&gt;/&lt;/span&gt;&lt;span style="display:block; line-height:1em; padding:0 0.1em; border-top:1px solid;"&gt;%s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;',
	},
}

local function format_fraction(parms, inout, negative, wholestr, numstr, denstr, do_spell, style)
	-- Return wikitext for a fraction, possibly spelled.
	-- Inputs use en digits and have no sign; output uses digits in local language.
	local wikitext
	if not style then
		style = parms.opt_fraction_horizontal and 2 or 1
	end
	if wholestr == '' then
		wholestr = nil
	end
	if wholestr then
		local decorated = with_separator(parms, wholestr)
		if negative then
			decorated = MINUS .. decorated
		end
		local fmt = fracfmt[style][2]
		wikitext = format(fmt, decorated, from_en(numstr), from_en(denstr))
	else
		local sign = negative and MINUS or ''
		wikitext = format(fracfmt[style][1], sign, from_en(numstr), from_en(denstr))
	end
	if do_spell then
		if negative then
			if wholestr then
				wholestr = '-' .. wholestr
			else
				numstr = '-' .. numstr
			end
		end
		wikitext = spell_number(parms, inout, wholestr, numstr, denstr) or wikitext
	end
	return wikitext
end

local function format_number(parms, show, exponent, isnegative)
	-- Parameter show is a string or a table containing strings.
	-- Each string is a formatted number in en digits and optional '.' decimal mark.
	-- A table represents a fraction: integer, numerator, denominator;
	-- if a table is given, exponent must be nil.
	-- Return t where t is a table with fields:
	--   show = wikitext formatted to display implied value
	--          (digits in local language)
	--   is_scientific = true if show uses scientific notation
	--   clean = unformatted show (possibly adjusted and with inserted '.')
	--          (en digits)
	--   sign = '' or MINUS
	--   exponent = exponent (possibly adjusted)
	-- The clean and exponent fields can be used to calculate the
	-- rounded absolute value, if needed.
	--
	-- The value implied by the arguments is found from:
	--   exponent is nil; and
	--   show is a string of digits (no sign), with an optional dot;
	--   show = '123.4' is value 123.4, '1234' is value 1234.0;
	-- or:
	--   exponent is an integer indicating where dot should be;
	--   show is a string of digits (no sign and no dot);
	--   there is an implied dot before show;
	--   show does not start with '0';
	--   show = '1234', exponent = 3 is value 0.1234*10^3 = 123.4.
	--
	-- The formatted result:
	-- * Is for an output value and is spelled if wanted and possible.
	-- * Includes a Unicode minus if isnegative and not spelled.
	-- * Uses a custom decimal mark, if wanted.
	-- * Has digits grouped where necessary, if wanted.
	-- * Uses scientific notation if requested, or for very small or large values
	--   (which forces result to not be spelled).
	-- * Has no more than maxsigfig significant digits
	--   (same as old template and {{#expr}}).
	local xhi, xlo  -- these control when scientific notation (exponent) is used
	if parms.opt_scientific then
		xhi, xlo = 4, 2  -- default for output if input uses e-notation
	elseif parms.opt_scientific_always then
		xhi, xlo = 0, 0  -- always use scientific notation (experimental)
	else
		xhi, xlo = 10, 4  -- default
	end
	local sign = isnegative and MINUS or ''
	local maxlen = maxsigfig
	local tfrac
	if type(show) == 'table' then
		tfrac = show
		show = tfrac.wholestr
		assert(exponent == nil, 'Bug: exponent given with fraction')
	end
	if not tfrac and not exponent then
		local integer, dot, decimals = show:match('^(%d*)(%.?)(.*)')
		if integer == '0' or integer == '' then
			local zeros, figs = decimals:match('^(0*)([^0]?.*)')
			if #figs == 0 then
				if #zeros &gt; maxlen then
					show = '0.' .. zeros:sub(1, maxlen)
				end
			elseif #zeros &gt;= xlo then
				show = figs
				exponent = -#zeros
			elseif #figs &gt; maxlen then
				show = '0.' .. zeros .. figs:sub(1, maxlen)
			end
		elseif #integer &gt;= xhi then
			show = integer .. decimals
			exponent = #integer
		else
			maxlen = maxlen + #dot
			if #show &gt; maxlen then
				show = show:sub(1, maxlen)
			end
		end
	end
	if exponent then
		local function zeros(n)
			return string.rep('0', n)
		end
		if #show &gt; maxlen then
			show = show:sub(1, maxlen)
		end
		if exponent &gt; xhi or exponent &lt;= -xlo or (exponent == xhi and show ~= '1' .. zeros(xhi - 1)) then
			-- When xhi, xlo = 10, 4 (the default), scientific notation is used if the
			-- rounded value satisfies: value &gt;= 1e9 or value &lt; 1e-4 (1e9 = 0.1e10),
			-- except if show is '1000000000' (1e9), for example:
			-- {{convert|1000000000|m|m|sigfig=10}} → 1,000,000,000 metres (1,000,000,000 m)
			local significand
			if #show &gt; 1 then
				significand = show:sub(1, 1) .. '.' .. show:sub(2)
			else
				significand = show
			end
			return {
				clean = '.' .. show,
				exponent = exponent,
				sign = sign,
				show = sign .. with_exponent(parms, significand, exponent-1),
				is_scientific = true,
			}
		end
		if exponent &gt;= #show then
			show = show .. zeros(exponent - #show)  -- result has no dot
		elseif exponent &lt;= 0 then
			show = '0.' .. zeros(-exponent) .. show
		else
			show = show:sub(1, exponent) .. '.' .. show:sub(exponent+1)
		end
	end
	local formatted_show
	if tfrac then
		show = tostring(tfrac.value)  -- to set clean in returned table
		formatted_show = format_fraction(parms, 'out', isnegative, tfrac.wholestr, tfrac.numstr, tfrac.denstr, parms.opt_spell_out)
	else
		if isnegative and show:match('^0.?0*$') then
			sign = ''  -- don't show minus if result is negative but rounds to zero
		end
		formatted_show = sign .. with_separator(parms, show)
		if parms.opt_spell_out then
			formatted_show = spell_number(parms, 'out', sign .. show) or formatted_show
		end
	end
	return {
		clean = show,
		sign = sign,
		show = formatted_show,
		is_scientific = false,  -- to avoid calling __index
	}
end

local function extract_fraction(parms, text, negative)
	-- If text represents a fraction, return
	--   value, altvalue, show, denominator
	-- where
	--   value is a number (value of the fraction in argument text)
	--   altvalue is an alternate interpretation of any fraction for the hands
	--        unit where "12.1+3/4" means 12 hands 1.75 inches
	--   show is a string (formatted text for display of an input value,
	--        and is spelled if wanted and possible)
	--   denominator is value of the denominator in the fraction
	-- Otherwise, return nil.
	-- Input uses en digits and '.' decimal mark (input has been translated).
	-- Output uses digits in local language and local decimal mark, if any.
	------------------------------------------------------------------------
	-- Originally this function accepted x+y/z where x, y, z were any valid
	-- numbers, possibly with a sign. For example '1.23e+2+1.2/2.4' = 123.5,
	-- and '2-3/8' = 1.625. However, such usages were found to be errors or
	-- misunderstandings, so since August 2014 the following restrictions apply:
	--   x (if present) is an integer or has a single digit after decimal mark
	--   y and z are unsigned integers
	--   e-notation is not accepted
	-- The overall number can start with '+' or '-' (so '12+3/4' and '+12+3/4'
	-- and '-12-3/4' are valid).
	-- Any leading negative sign is removed by the caller, so only inputs
	-- like the following are accepted here (may have whitespace):
	--   negative = false       false        true (there was a leading '-')
	--   text     = '2/3'       '+2/3'       '2/3'
	--   text     = '1+2/3'     '+1+2/3'     '1-2/3'
	--   text     = '12.3+1/2'  '+12.3+1/2'  '12.3-1/2'
	-- Values like '12.3+1/2' are accepted, but are intended only for use
	-- with the hands unit (not worth adding code to enforce that).
	------------------------------------------------------------------------
	local leading_plus, prefix, numstr, slashes, denstr =
		text:match('^%s*(%+?)%s*(.-)%s*(%d+)%s*(/+)%s*(%d+)%s*$')
	if not leading_plus then
		-- Accept a single U+2044 fraction slash because that may be pasted.
		leading_plus, prefix, numstr, denstr =
			text:match('^%s*(%+?)%s*(.-)%s*(%d+)%s*⁄%s*(%d+)%s*$')
		slashes = '/'
	end
	local numerator = tonumber(numstr)
	local denominator = tonumber(denstr)
	if numerator == nil or denominator == nil or (negative and leading_plus ~= '') then
		return nil
	end
	local whole, wholestr
	if prefix == '' then
		wholestr = ''
		whole = 0
	else
		-- Any prefix must be like '12+' or '12-' (whole number and fraction sign);
		-- '12.3+' and '12.3-' are also accepted (single digit after decimal point)
		-- because '12.3+1/2 hands' is valid (12 hands 3½ inches).
		local num1, num2, frac_sign = prefix:match('^(%d+)(%.?%d?)%s*([+%-])$')
		if num1 == nil then return nil end
		if num2 == '' then  -- num2 must be '' or like '.1' but not '.' or '.12'
			wholestr = num1
		else
			if #num2 ~= 2 then return nil end
			wholestr = num1 .. num2
		end
		if frac_sign ~= (negative and '-' or '+') then return nil end
		whole = tonumber(wholestr)
		if whole == nil then return nil end
	end
	local value = whole + numerator / denominator
	if not valid_number(value) then return nil end
	local altvalue = whole + numerator / (denominator * 10)
	local style = #slashes  -- kludge: 1 or 2 slashes can be used to select style
	if style &gt; 2 then style = 2 end
	local wikitext = format_fraction(parms, 'in', negative, leading_plus .. wholestr, numstr, denstr, parms.opt_spell_in, style)
	return value, altvalue, wikitext, denominator
end

local function extract_number(parms, text, another, no_fraction)
	-- Return true, info if can extract a number from text,
	-- where info is a table with the result,
	-- or return false, t where t is an error message table.
	-- Input can use en digits or digits in local language and can
	-- have references at the end. Accepting references is intended
	-- for use in infoboxes with a field for a value passed to convert.
	-- Parameter another = true if the expected value is not the first.
	-- Before processing, the input text is cleaned:
	-- * Any thousand separators (valid or not) are removed.
	-- * Any sign is replaced with '-' (if negative) or '' (otherwise).
	--   That replaces Unicode minus with '-'.
	-- If successful, the returned info table contains named fields:
	--   value    = a valid number
	--   altvalue = a valid number, usually same as value but different
	--              if fraction used (for hands unit)
	--   singular = true if value is 1 or -1 (to use singular form of units)
	--   clean    = cleaned text with any separators and sign removed
	--              (en digits and '.' decimal mark)
	--   show     = text formatted for output, possibly with ref strip markers
	--              (digits in local language and custom decimal mark)
	-- The resulting show:
	-- * Is for an input value and is spelled if wanted and possible.
	-- * Has a rounded value, if wanted.
	-- * Has digits grouped where necessary, if wanted.
	-- * If negative, a Unicode minus is used; otherwise the sign is
	--   '+' (if the input text used '+'), or is '' (if no sign in input).
	text = strip(text or '')
	local reference
	local pos = text:find('\127', 1, true)
	if pos then
		local before = text:sub(1, pos - 1)
		local remainder = text:sub(pos)
		local refs = {}
		while #remainder &gt; 0 do
			local ref, spaces
			ref, spaces, remainder = remainder:match('^(\127[^\127]*UNIQ[^\127]*%-ref[^\127]*\127)(%s*)(.*)')
			if ref then
				table.insert(refs, ref)
			else
				refs = {}
				break
			end
		end
		if #refs &gt; 0 then
			text = strip(before)
			reference = table.concat(refs)
		end
	end
	local clean = to_en(text, parms)
	if clean == '' then
		return false, { another and 'cvt_no_num2' or 'cvt_no_num' }
	end
	local isnegative, propersign = false, ''  -- most common case
	local singular, show, denominator
	local value = tonumber(clean)
	local altvalue
	if value then
		local sign = clean:sub(1, 1)
		if sign == '+' or sign == '-' then
			propersign = (sign == '+') and '+' or MINUS
			clean = clean:sub(2)
		end
		if value &lt; 0 then
			isnegative = true
			value = -value
		end
	else
		local valstr
		for _, prefix in ipairs({ '-', MINUS, '&amp;minus;' }) do
			-- Including '-' sets isnegative in case input is a fraction like '-2-3/4'.
			local plen = #prefix
			if clean:sub(1, plen) == prefix then
				valstr = clean:sub(plen + 1)
				if valstr:match('^%s') then  -- "- 1" is invalid but "-1 - 1/2" is ok
					return false, { 'cvt_bad_num', text }
				end
				break
			end
		end
		if valstr then
			isnegative = true
			propersign = MINUS
			clean = valstr
			value = tonumber(clean)
		end
		if value == nil then
			if not no_fraction then
				value, altvalue, show, denominator = extract_fraction(parms, clean, isnegative)
			end
			if value == nil then
				return false, { 'cvt_bad_num', text }
			end
			if value &lt;= 1 then
				singular = true  -- for example, "½ mile" or "one half mile" (singular unit)
			end
		end
	end
	if not valid_number(value) then  -- for example, "1e310" may overflow
		return false, { 'cvt_invalid_num' }
	end
	if show == nil then
		-- clean is a non-empty string with no spaces, and does not represent a fraction,
		-- and value = tonumber(clean) is a number &gt;= 0.
		-- If the input uses e-notation, show will be displayed using a power of ten, but
		-- we use the number as given so it might not be normalized scientific notation.
		-- The input value is spelled if specified so any e-notation is ignored;
		-- that allows input like 2e6 to be spelled as "two million" which works
		-- because the spell module converts '2e6' to '2000000' before spelling.
		local function rounded(value, default, exponent)
			local precision = parms.opt_ri
			if precision then
				local fmt = '%.' .. format('%d', precision) .. 'f'
				local result = fmt:format(tonumber(value) + 2e-14)  -- fudge for some common cases of bad rounding
				if not exponent then
					singular = (tonumber(result) == 1)
				end
				return result
			end
			return default
		end
		singular = (value == 1)
		local scientific
		local significand, exponent = clean:match('^([%d.]+)[Ee]([+%-]?%d+)')
		if significand then
			show = with_exponent(parms, rounded(significand, significand, exponent), exponent)
			scientific = true
		else
			show = with_separator(parms, rounded(value, clean))
		end
		show = propersign .. show
		if parms.opt_spell_in then
			show = spell_number(parms, 'in', propersign .. rounded(value, clean)) or show
			scientific = false
		end
		if scientific then
			parms.opt_scientific = true
		end
	end
	if isnegative and (value ~= 0) then
		value = -value
		altvalue = -(altvalue or value)
	end
	return true, {
		value = value,
		altvalue = altvalue or value,
		singular = singular,
		clean = clean,
		show = show .. (reference or ''),
		denominator = denominator,
	}
end

local function get_number(text)
	-- Return v, f where:
	--   v = nil (text is not a number)
	-- or
	--   v = value of text (text is a number)
	--   f = true if value is an integer
	-- Input can use en digits or digits in local language,
	-- but no separators, no Unicode minus, and no fraction.
	if text then
		local number = tonumber(to_en(text))
		if number then
			local _, fracpart = math.modf(number)
			return number, (fracpart == 0)
		end
	end
end

local function gcd(a, b)
	-- Return the greatest common denominator for the given values,
	-- which are known to be positive integers.
	if a &gt; b then
		a, b = b, a
	end
	if a &lt;= 0 then
		return b
	end
	local r = b % a
	if r &lt;= 0 then
		return a
	end
	if r == 1 then
		return 1
	end
	return gcd(r, a)
end

local function fraction_table(value, denominator)
	-- Return value as a string or a table:
	-- * If result is a string, there is no fraction, and the result
	--   is value formatted as a string of en digits.
	-- * If result is a table, it represents a fraction with named fields:
	--   wholestr, numstr, denstr (strings of en digits for integer, numerator, denominator).
	-- The result is rounded to the nearest multiple of (1/denominator).
	-- If the multiple is zero, no fraction is included.
	-- No fraction is included if value is very large as the fraction would
	-- be unhelpful, particularly if scientific notation is required.
	-- Input value is a non-negative number.
	-- Input denominator is a positive integer for the desired fraction.
	if value &lt;= 0 then
		return '0'
	end
	if denominator &lt;= 0 or value &gt; 1e8 then
		return format('%.2f', value)
	end
	local integer, decimals = math.modf(value)
	local numerator = floor((decimals * denominator) +
		0.5 + 2e-14)  -- add fudge for some common cases of bad rounding
	if numerator &gt;= denominator then
		integer = integer + 1
		numerator = 0
	end
	local wholestr = tostring(integer)
	if numerator &gt; 0 then
		local div = gcd(numerator, denominator)
		if div &gt; 1 then
			numerator = numerator / div
			denominator = denominator / div
		end
		return {
			wholestr = (integer &gt; 0) and wholestr or '',
			numstr = tostring(numerator),
			denstr = tostring(denominator),
			value = value,
		}
	end
	return wholestr
end

local function preunits(count, preunit1, preunit2)
	-- If count is 1:
	--     ignore preunit2
	--     return p1
	-- else:
	--     preunit1 is used for preunit2 if the latter is empty
	--     return p1, p2
	-- where:
	--     p1 is text to insert before the input unit
	--     p2 is text to insert before the output unit
	--     p1 or p2 may be nil to mean "no preunit"
	-- Using '+' gives output like "5+ feet" (no space before, but space after).
	local function withspace(text, wantboth)
		-- Return text with space before and, if wantboth, after.
		-- However, no space is added if there is a space or '&amp;nbsp;' or '-'
		-- at that position ('-' is for adjectival text).
		-- There is also no space if text starts with '&amp;'
		-- (e.g. '&amp;deg;' would display a degree symbol with no preceding space).
		local char = text:sub(1, 1)
		if char == '&amp;' then
			return text  -- an html entity can be used to specify the exact display
		end
		if not (char == ' ' or char == '-' or char == '+') then
			text = ' ' .. text
		end
		if wantboth then
			char = text:sub(-1, -1)
			if not (char == ' ' or char == '-' or text:sub(-6, -1) == '&amp;nbsp;') then
				text = text .. ' '
			end
		end
		return text
	end
	local PLUS = '+ '
	preunit1 = preunit1 or ''
	local trim1 = strip(preunit1)
	if count == 1 then
		if trim1 == '' then
			return nil
		end
		if trim1 == '+' then
			return PLUS
		end
		return withspace(preunit1, true)
	end
	preunit1 = withspace(preunit1)
	preunit2 = preunit2 or ''
	local trim2 = strip(preunit2)
	if trim1 == '+' then
		if trim2 == '' or trim2 == '+' then
			return PLUS, PLUS
		end
		preunit1 = PLUS
	end
	if trim2 == '' then
		if trim1 == '' then
			return nil, nil
		end
		preunit2 = preunit1
	elseif trim2 == '+' then
		preunit2 = PLUS
	elseif trim2 == '&amp;#32;' then  -- trick to make preunit2 empty
		preunit2 = nil
	else
		preunit2 = withspace(preunit2)
	end
	return preunit1, preunit2
end

local function range_text(range, want_name, parms, before, after, inout)
	-- Return before .. rtext .. after
	-- where rtext is the text that separates two values in a range.
	local rtext, adj_text, exception
	if type(range) == 'table' then
		-- Table must specify range text for ('off' and 'on') or ('input' and 'output'),
		-- and may specify range text for 'adj=on',
		-- and may specify exception = true.
		rtext = range[want_name and 'off' or 'on'] or
				range[((inout == 'in') == (parms.opt_flip == true)) and 'output' or 'input']
		adj_text = range['adj']
		exception = range['exception']
	else
		rtext = range
	end
	if parms.opt_adjectival then
		if want_name or (exception and parms.abbr_org == 'on') then
			rtext = adj_text or rtext:gsub(' ', '-'):gsub('&amp;nbsp;', '-')
		end
	end
	if rtext == '–' and after:sub(1, #MINUS) == MINUS then
		rtext = '&amp;nbsp;– '
	end
	return before .. rtext .. after
end

local function get_composite(parms, iparm, in_unit_table)
	-- Look for a composite input unit. For example, {{convert|1|yd|2|ft|3|in}}
	-- would result in a call to this function with
	--   iparm = 3 (parms[iparm] = "2", just after the first unit)
	--   in_unit_table = (unit table for "yd"; contains value 1 for number of yards)
	-- Return true, iparm, unit where
	--   iparm = index just after the composite units (7 in above example)
	--   unit = composite unit table holding all input units,
	-- or return true if no composite unit is present in parms,
	-- or return false, t where t is an error message table.
	local default, subinfo
	local composite_units, count = { in_unit_table }, 1
	local fixups = {}
	local total = in_unit_table.valinfo[1].value
	local subunit = in_unit_table
	while subunit.subdivs do  -- subdivs is nil or a table of allowed subdivisions
		local subcode = strip(parms[iparm+1])
		local subdiv = subunit.subdivs[subcode] or subunit.subdivs[(all_units[subcode] or {}).target]
		if not subdiv then
			break
		end
		local success
		success, subunit = lookup(parms, subcode, 'no_combination')
		if not success then return false, subunit end  -- should never occur
		success, subinfo = extract_number(parms, parms[iparm])
		if not success then return false, subinfo end
		iparm = iparm + 2
		subunit.inout = 'in'
		subunit.valinfo = { subinfo }
		-- Recalculate total as a number of subdivisions.
		-- subdiv[1] = number of subdivisions per previous unit (integer &gt; 1).
		total = total * subdiv[1] + subinfo.value
		if not default then  -- set by the first subdiv with a default defined
			default = subdiv.default
		end
		count = count + 1
		composite_units[count] = subunit
		if subdiv.unit or subdiv.name then
			fixups[count] = { unit = subdiv.unit, name = subdiv.name, valinfo = subunit.valinfo }
		end
	end
	if count == 1 then
		return true  -- no error and no composite unit
	end
	for i, fixup in pairs(fixups) do
		local unit = fixup.unit
		local name = fixup.name
		if not unit or (count &gt; 2 and name) then
			composite_units[i].fixed_name = name
		else
			local success, alternate = lookup(parms, unit, 'no_combination')
			if not success then return false, alternate end  -- should never occur
			alternate.inout = 'in'
			alternate.valinfo = fixup.valinfo
			composite_units[i] = alternate
		end
	end
	return true, iparm, {
		utype = in_unit_table.utype,
		scale = subunit.scale,  -- scale of last (least significant) unit
		valinfo = { { value = total, clean = subinfo.clean, denominator = subinfo.denominator } },
		composite = composite_units,
		default = default or in_unit_table.default
	}
end

local function translate_parms(parms, kv_pairs)
	-- Update fields in parms by translating each key:value in kv_pairs to terms
	-- used by this module (may involve translating from local language to English).
	-- Also, checks are performed which may display warnings, if enabled.
	-- Return true if successful or return false, t where t is an error message table.
	currency_text = nil  -- local testing can hold module in memory; must clear globals
	local accept_any_text = {
		input = true,
		qid = true,
		qual = true,
		stylein = true,
		styleout = true,
		tracking = true,
	}
	if kv_pairs.adj and kv_pairs.sing then
		-- For enwiki (before translation), warn if attempt to use adj and sing
		-- as the latter is a deprecated alias for the former.
		if kv_pairs.adj ~= kv_pairs.sing and kv_pairs.sing ~= '' then
			add_warning(parms, 1, 'cvt_unknown_option', 'sing=' .. kv_pairs.sing)
		end
		kv_pairs.sing = nil
	end
	kv_pairs.comma = kv_pairs.comma or config.comma  -- for plwiki who want default comma=5
	for loc_name, loc_value in pairs(kv_pairs) do
		local en_name = text_code.en_option_name[loc_name]
		if en_name then
			local en_value
			if en_name == '$' or en_name == 'frac' or en_name == 'sigfig' then
				if loc_value == '' then
					add_warning(parms, 2, 'cvt_empty_option', loc_name)
				elseif en_name == '$' then
					-- Value should be a single character like "€" for the euro currency symbol, but anything is accepted.
					currency_text = (loc_value == 'euro') and '€' or loc_value
				else
					local minimum
					local number, is_integer = get_number(loc_value)
					if en_name == 'frac' then
						minimum = 2
						if number and number &lt; 0 then
							parms.opt_fraction_horizontal = true
							number = -number
						end
					else
						minimum = 1
					end
					if number and is_integer and number &gt;= minimum then
						en_value = number
					else
						add_warning(parms, 1, (en_name == 'frac' and 'cvt_bad_frac' or 'cvt_bad_sigfig'), loc_name .. '=' .. loc_value)
					end
				end
			elseif accept_any_text[en_name] then
				en_value = loc_value ~= '' and loc_value or nil  -- accept non-empty user text with no validation
				if en_name == 'input' then
					-- May have something like {{convert|input=}} (empty input) if source is an infobox
					-- with optional fields. In that case, want to output nothing rather than an error.
					parms.input_text = loc_value  -- keep input because parms.input is nil if loc_value == ''
				end
			else
				en_value = text_code.en_option_value[en_name][loc_value]
				if en_value and en_value:sub(-1) == '?' then
					en_value = en_value:sub(1, -2)
					add_warning(parms, -1, 'cvt_deprecated', loc_name .. '=' .. loc_value)
				end
				if en_value == nil then
					if loc_value == '' then
						add_warning(parms, 2, 'cvt_empty_option', loc_name)
					else
						add_warning(parms, 1, 'cvt_unknown_option', loc_name .. '=' .. loc_value)
					end
				elseif en_value == '' then
					en_value = nil  -- an ignored option like adj=off
				elseif type(en_value) == 'string' and en_value:sub(1, 4) == 'opt_' then
					for _, v in ipairs(split(en_value, ',')) do
						local lhs, rhs = v:match('^(.-)=(.+)$')
						if rhs then
							parms[lhs] = tonumber(rhs) or rhs
						else
							parms[v] = true
						end
					end
					en_value = nil
				end
			end
			parms[en_name] = en_value
		else
			add_warning(parms, 1, 'cvt_unknown_option', loc_name .. '=' .. loc_value)
		end
	end
	local abbr_entered = parms.abbr
	local cfg_abbr = config.abbr
	if cfg_abbr then
		-- Don't warn if invalid because every convert would show that warning.
		if cfg_abbr == 'on always' then
			parms.abbr = 'on'
		elseif cfg_abbr == 'off always' then
			parms.abbr = 'off'
		elseif parms.abbr == nil then
			if cfg_abbr == 'on default' then
				parms.abbr = 'on'
			elseif cfg_abbr == 'off default' then
				parms.abbr = 'off'
			end
		end
	end
	if parms.abbr then
		if parms.abbr == 'unit' then
			parms.abbr = 'on'
			parms.number_word = true
		end
		parms.abbr_org = parms.abbr  -- original abbr, before any flip
	elseif parms.opt_hand_hh then
		parms.abbr_org = 'on'
		parms.abbr = 'on'
	else
		parms.abbr = 'out'  -- default is to abbreviate output only (use symbol, not name)
	end
	if parms.opt_order_out then
		-- Disable options that do not work in a useful way with order=out.
		parms.opt_flip = nil  -- override adj=flip
		parms.opt_spell_in = nil
		parms.opt_spell_out = nil
		parms.opt_spell_upper = nil
	end
	if parms.opt_spell_out and not abbr_entered then
		parms.abbr = 'off'  -- should show unit name when spelling the output value
	end
	if parms.opt_flip then
		local function swap_in_out(option)
			local value = parms[option]
			if value == 'in' then
				parms[option] = 'out'
			elseif value == 'out' then
				parms[option] = 'in'
			end
		end
		swap_in_out('abbr')
		swap_in_out('lk')
		if parms.opt_spell_in and not parms.opt_spell_out then
			-- For simplicity, and because it does not appear to be needed,
			-- user cannot set an option to spell the output only.
			parms.opt_spell_in = nil
			parms.opt_spell_out = true
		end
	end
	if parms.opt_spell_upper then
		parms.spell_upper = parms.opt_flip and 'out' or 'in'
	end
	if parms.opt_table or parms.opt_tablecen then
		if abbr_entered == nil and parms.lk == nil then
			parms.opt_values = true
		end
		parms.table_align = parms.opt_table and 'right' or 'center'
	end
	if parms.table_align or parms.opt_sortable_on then
		parms.need_table_or_sort = true
	end
	local disp_joins = text_code.disp_joins
	local default_joins = disp_joins['b']
	parms.join_between = default_joins[3] or '; '
	local disp = parms.disp
	if disp == nil then  -- special case for the most common setting
		parms.joins = default_joins
	elseif disp == 'x' then
		-- Later, parms.joins is set from the input parameters.
	else
		-- Old template does this.
		local abbr = parms.abbr
		if disp == 'slash' then
			if abbr_entered == nil then
				disp = 'slash-nbsp'
			elseif abbr == 'in' or abbr == 'out' then
				disp = 'slash-sp'
			else
				disp = 'slash-nosp'
			end
		elseif disp == 'sqbr' then
			if abbr == 'on' then
				disp = 'sqbr-nbsp'
			else
				disp = 'sqbr-sp'
			end
		end
		parms.joins = disp_joins[disp] or default_joins
		parms.join_between = parms.joins[3] or parms.join_between
		parms.wantname = parms.joins.wantname
	end
	if (en_default and not parms.opt_lang_local and (parms[1] or ''):find('%d')) or parms.opt_lang_en then
		from_en_table = nil
	end
	if en_default and from_en_table then
		-- For hiwiki: localized symbol/name is defined with the US symbol/name field,
		-- and is used if output uses localized numbers.
		parms.opt_sp_us = true
	end
	return true
end

local function get_values(parms)
	-- If successful, update parms and return true, v, i where
	--   v = table of input values
	--   i = index to next entry in parms after those processed here
	-- or return false, t where t is an error message table.
	local valinfo = collection()  -- numbered table of input values
	local range = collection()  -- numbered table of range items (having, for example, 2 range items requires 3 input values)
	local had_nocomma  -- true if removed "nocomma" kludge from second parameter (like "tonocomma")
	local parm2 = strip(parms[2])
	if parm2 and parm2:sub(-7, -1) == 'nocomma' then
		parms[2] = strip(parm2:sub(1, -8))
		parms.opt_nocomma = true
		had_nocomma = true
	end
	local function extractor(i)
		-- If the parameter is not a value, try unpacking it as a range ("1-23" for "1 to 23").
		-- However, "-1-2/3" is a negative fraction (-1⅔), so it must be extracted first.
		-- Do not unpack a parameter if it is like "3-1/2" which is sometimes incorrectly
		-- used instead of "3+1/2" (and which should not be interpreted as "3 to ½").
		-- Unpacked items are inserted into the parms table.
		-- The tail recursion allows combinations like "1x2 to 3x4".
		local valstr = strip(parms[i])  -- trim so any '-' as a negative sign will be at start
		local success, result = extract_number(parms, valstr, i &gt; 1)
		if not success and valstr and i &lt; 20 then  -- check i to limit abuse
			local lhs, sep, rhs = valstr:match('^(%S+)%s+(%S+)%s+(%S.*)')
			if lhs and not (sep == '-' and rhs:match('/')) then
				if sep:find('%d') then
					return success, result  -- to reject {{convert|1 234 567|m}} with a decent message (en only)
				end
				parms[i] = rhs
				table.insert(parms, i, sep)
				table.insert(parms, i, lhs)
				return extractor(i)
			end
			if not valstr:match('%-.*/') then
				for _, sep in ipairs(text_code.ranges.words) do
					local start, stop = valstr:find(sep, 2, true)  -- start at 2 to skip any negative sign for range '-'
					if start then
						parms[i] = valstr:sub(stop + 1)
						table.insert(parms, i, sep)
						table.insert(parms, i, valstr:sub(1, start - 1))
						return extractor(i)
					end
				end
			end
		end
		return success, result
	end
	local i = 1
	local is_change
	while true do
		local success, info = extractor(i)  -- need to set parms.opt_nocomma before calling this
		if not success then return false, info end
		i = i + 1
		if is_change then
			info.is_change = true  -- value is after "±" and so is a change (significant for range like {{convert|5|±|5|°C}})
			is_change = nil
		end
		valinfo:add(info)
		local range_item = get_range(strip(parms[i]))
		if not range_item then
			break
		end
		i = i + 1
		range:add(range_item)
		if type(range_item) == 'table' then
			-- For range "x", if append unit to some values, append it to all.
			parms.in_range_x = parms.in_range_x or range_item.in_range_x
			parms.out_range_x = parms.out_range_x or range_item.out_range_x
			parms.abbr_range_x = parms.abbr_range_x or range_item.abbr_range_x
			is_change = range_item.is_range_change
		end
	end
	if range.n &gt; 0 then
		if range.n &gt; 30 then  -- limit abuse, although 4 is a more likely upper limit
			return false, { 'cvt_invalid_num' }  -- misleading message but it will do
		end
		parms.range = range
	elseif had_nocomma then
		return false, { 'cvt_unknown', parm2 }
	end
	return true, valinfo, i
end

local function simple_get_values(parms)
	-- If input is like "{{convert|valid_value|valid_unit|...}}",
	-- return true, i, in_unit, in_unit_table
	-- i = index in parms of what follows valid_unit, if anything.
	-- The valid_value is not negative and does not use a fraction, and
	-- no options requiring further processing of the input are used.
	-- Otherwise, return nothing or return false, parm1 for caller to interpret.
	-- Testing shows this function is successful for 96% of converts in articles,
	-- and that on average it speeds up converts by 8%.
	local clean = to_en(strip(parms[1] or ''), parms)
	if parms.opt_ri or parms.opt_spell_in or #clean &gt; 10 or not clean:match('^[0-9.]+$') then
		return false, clean
	end
	local value = tonumber(clean)
	if not value then return end
	local info = {
		value = value,
		altvalue = value,
		singular = (value == 1),
		clean = clean,
		show = with_separator(parms, clean),
	}
	local in_unit = strip(parms[2])
	local success, in_unit_table = lookup(parms, in_unit, 'no_combination')
	if not success then return end
	in_unit_table.valinfo = { info }
	return true, 3, in_unit, in_unit_table
end

local function wikidata_call(parms, operation, ...)
	-- Return true, s where s is the result of a Wikidata operation,
	-- or return false, t where t is an error message table.
	local function worker(...)
		wikidata_code = wikidata_code or require(wikidata_module)
		wikidata_data = wikidata_data or mw.loadData(wikidata_data_module)
		return wikidata_code[operation](wikidata_data, ...)
	end
	local success, status, result = pcall(worker, ...)
	if success then
		return status, result
	end
	if parms.opt_sortable_debug then
		-- Use debug=yes to crash if an error while accessing Wikidata.
		error('Error accessing Wikidata: ' .. status, 0)
	end
	return false, { 'cvt_wd_fail' }
end

local function get_parms(parms, args)
	-- If successful, update parms and return true, unit where
	--   parms is a table of all arguments passed to the template
	--        converted to named arguments, and
	--   unit is the input unit table;
	-- or return false, t where t is an error message table.
	-- For special processing (not a convert), can also return
	-- true, wikitext where wikitext is the final result.
	-- The returned input unit table may be for a fake unit using the specified
	-- unit code as the symbol and name, and with bad_mcode = message code table.
	-- MediaWiki removes leading and trailing whitespace from the values of
	-- named arguments. However, the values of numbered arguments include any
	-- whitespace entered in the template, and whitespace is used by some
	-- parameters (example: the numbered parameters associated with "disp=x").
	local kv_pairs = {}  -- table of input key:value pairs where key is a name; needed because cannot iterate parms and add new fields to it
	for k, v in pairs(args) do
		if type(k) == 'number' or k == 'test' then  -- parameter "test" is reserved for testing and is not translated
			parms[k] = v
		else
			kv_pairs[k] = v
		end
	end
	if parms.test == 'wikidata' then
		local ulookup = function (ucode)
			-- Use empty table for parms so it does not accumulate results when used repeatedly.
			return lookup({}, ucode, 'no_combination')
		end
		return wikidata_call(parms, '_listunits', ulookup)
	end
	local success, msg = translate_parms(parms, kv_pairs)
	if not success then return false, msg end
	if parms.input then
		success, msg = wikidata_call(parms, '_adjustparameters', parms, 1)
		if not success then return false, msg end
	end
	local success, i, in_unit, in_unit_table = simple_get_values(parms)
	if not success then
		if type(i) == 'string' and i:match('^NNN+$') then
			-- Some infoboxes have examples like {{convert|NNN|m}} (3 or more "N").
			-- Output an empty string for these.
			return false, { 'cvt_no_output' }
		end
		local valinfo
		success, valinfo, i = get_values(parms)
		if not success then return false, valinfo end
		in_unit = strip(parms[i])
		i = i + 1
		success, in_unit_table = lookup(parms, in_unit, 'no_combination')
		if not success then
			in_unit = in_unit or ''
			if parms.opt_ignore_error then  -- display given unit code with no error (for use with {{val}})
				in_unit_table = ''  -- suppress error message and prevent processing of output unit
			end
			in_unit_table = setmetatable({
				symbol = in_unit, name2 = in_unit, utype = in_unit,
				scale = 1, default = '', defkey = '', linkey = '',
				bad_mcode = in_unit_table }, unit_mt)
		end
		in_unit_table.valinfo = valinfo
	end
	if parms.test == 'msg' then
		-- Am testing the messages produced when no output unit is specified, and
		-- the input unit has a missing or invalid default.
		-- Set two units for testing that.
		-- LATER: Remove this code.
		if in_unit == 'chain' then
			in_unit_table.default = nil  -- no default
		elseif in_unit == 'rd' then
			in_unit_table.default  = "ft!X!m"  -- an invalid expression
		end
	end
	in_unit_table.inout = 'in'  -- this is an input unit
	if not parms.range then
		local success, inext, composite_unit = get_composite(parms, i, in_unit_table)
		if not success then return false, inext end
		if composite_unit then
			in_unit_table = composite_unit
			i = inext
		end
	end
	if in_unit_table.builtin == 'mach' then
		-- As with old template, a number following Mach as the input unit is the altitude,
		-- and there is no way to specify an altitude for the output unit.
		-- Could put more code in this function to get any output unit and check for
		-- an altitude following that unit.
		local success, info = extract_number(parms, parms[i], false, true)
		if success then
			i = i + 1
			in_unit_table.altitude = info.value
		end
	end
	local word = strip(parms[i])
	i = i + 1
	local precision, is_bad_precision
	local function set_precision(text)
		local number, is_integer = get_number(text)
		if number then
			if is_integer then
				precision = number
			else
				precision = text
				is_bad_precision = true
			end
			return true  -- text was used for precision, good or bad
		end
	end
	if word and not set_precision(word) then
		parms.out_unit = parms.out_unit or word
		if set_precision(strip(parms[i])) then
			i = i + 1
		end
	end
	if parms.opt_adj_mid then
		word = parms[i]
		i = i + 1
		if word then  -- mid-text words
			if word:sub(1, 1) == '-' then
				parms.mid = word
			else
				parms.mid = ' ' .. word
			end
		end
	end
	if parms.opt_one_preunit then
		parms[parms.opt_flip and 'preunit2' or 'preunit1'] = preunits(1, parms[i])
		i = i + 1
	end
	if parms.disp == 'x' then
		-- Following is reasonably compatible with the old template.
		local first = parms[i] or ''
		local second = parms[i+1] or ''
		i = i + 2
		if strip(first) == '' then  -- user can enter '&amp;#32;' rather than ' ' to avoid the default
			first = ' [&amp;nbsp;' .. first
			second = '&amp;nbsp;]' .. second
		end
		parms.joins = { first, second }
	elseif parms.opt_two_preunits then
		local p1, p2 = preunits(2, parms[i], parms[i+1])
		i = i + 2
		if parms.preunit1 then
			-- To simplify documentation, allow unlikely use of adj=pre with disp=preunit
			-- (however, an output unit must be specified with adj=pre and with disp=preunit).
			parms.preunit1 = parms.preunit1 .. p1
			parms.preunit2 = p2
		else
			parms.preunit1, parms.preunit2 = p1, p2
		end
	end
	if precision == nil then
		if set_precision(strip(parms[i])) then
			i = i + 1
		end
	end
	if is_bad_precision then
		add_warning(parms, 1, 'cvt_bad_prec', precision)
	else
		parms.precision = precision
	end
	for j = i, i + 3 do
		local parm = parms[j]  -- warn if find a non-empty extraneous parameter
		if parm and parm:match('%S') then
			add_warning(parms, 1, 'cvt_unknown_option', parm)
			break
		end
	end
	return true, in_unit_table
end

local function record_default_precision(parms, out_current, precision)
	-- If necessary, adjust parameters and return a possibly adjusted precision.
	-- When converting a range of values where a default precision is required,
	-- that default is calculated for each value because the result sometimes
	-- depends on the precise input and output values. This function may cause
	-- the entire convert process to be repeated in order to ensure that the
	-- same default precision is used for each individual convert.
	-- If that were not done, a range like 1000 to 1000.4 may give poor results
	-- because the first output could be heavily rounded, while the second is not.
	-- For range 1000.4 to 1000, this function can give the second convert the
	-- same default precision that was used for the first.
	if not parms.opt_round_each then
		local maxdef = out_current.max_default_precision
		if maxdef then
			if maxdef &lt; precision then
				parms.do_convert_again = true
				out_current.max_default_precision = precision
			else
				precision = out_current.max_default_precision
			end
		else
			out_current.max_default_precision = precision
		end
	end
	return precision
end

local function default_precision(parms, invalue, inclean, denominator, outvalue, in_current, out_current, extra)
	-- Return a default value for precision (an integer like 2, 0, -2).
	-- If denominator is not nil, it is the value of the denominator in inclean.
	-- Code follows procedures used in old template.
	local fudge = 1e-14  -- {{Order of magnitude}} adds this, so we do too
	local prec, minprec, adjust
	local subunit_ignore_trailing_zero
	local subunit_more_precision  -- kludge for "in" used in input like "|2|ft|6|in"
	local composite = in_current.composite
	if composite then
		subunit_ignore_trailing_zero = true  -- input "|2|st|10|lb" has precision 0, not -1
		if composite[#composite].exception == 'subunit_more_precision' then
			subunit_more_precision = true  -- do not use standard precision with input like "|2|ft|6|in"
		end
	end
	if denominator and denominator &gt; 0 then
		prec = math.max(log10(denominator), 1)
	else
		-- Count digits after decimal mark, handling cases like '12.345e6'.
		local exponent
		local integer, dot, decimals, expstr = inclean:match('^(%d*)(%.?)(%d*)(.*)')
		local e = expstr:sub(1, 1)
		if e == 'e' or e == 'E' then
			exponent = tonumber(expstr:sub(2))
		end
		if dot == '' then
			prec = subunit_ignore_trailing_zero and 0 or -integer:match('0*$'):len()
		else
			prec = #decimals
		end
		if exponent then
			-- So '1230' and '1.23e3' both give prec = -1, and '0.00123' and '1.23e-3' give 5.
			prec = prec - exponent
		end
	end
	if in_current.istemperature and out_current.istemperature then
		-- Converting between common temperatures (°C, °F, °R, K); not keVT.
		-- Kelvin value can be almost zero, or small but negative due to precision problems.
		-- Also, an input value like -300 C (below absolute zero) gives negative kelvins.
		-- Calculate minimum precision from absolute value.
		adjust = 0
		local kelvin = abs((invalue - in_current.offset) * in_current.scale)
		if kelvin &lt; 1e-8 then  -- assume nonzero due to input or calculation precision problem
			minprec = 2
		else
			minprec = 2 - floor(log10(kelvin) + fudge)  -- 3 sigfigs in kelvin
		end
	else
		if invalue == 0 or outvalue &lt;= 0 then
			-- We are never called with a negative outvalue, but it might be zero.
			-- This is special-cased to avoid calculation exceptions.
			return record_default_precision(parms, out_current, 0)
		end
		if out_current.exception == 'integer_more_precision' and floor(invalue) == invalue then
			-- With certain output units that sometimes give poor results
			-- with default rounding, use more precision when the input
			-- value is equal to an integer. An example of a poor result
			-- is when input 50 gives a smaller output than input 49.5.
			-- Experiment shows this helps, but it does not eliminate all
			-- surprises because it is not clear whether "50" should be
			-- interpreted as "from 45 to 55" or "from 49.5 to 50.5".
			adjust = -log10(in_current.scale)
		elseif subunit_more_precision then
			-- Conversion like "{{convert|6|ft|1|in|cm}}" (where subunit is "in")
			-- has a non-standard adjust value, to give more output precision.
			adjust = log10(out_current.scale) + 2
		else
			adjust = log10(abs(invalue / outvalue))
		end
		adjust = adjust + log10(2)
		-- Ensure that the output has at least two significant figures.
		minprec = 1 - floor(log10(outvalue) + fudge)
	end
	if extra then
		adjust = extra.adjust or adjust
		minprec = extra.minprec or minprec
	end
	return record_default_precision(parms, out_current, math.max(floor(prec + adjust), minprec))
end

local function convert(parms, invalue, info, in_current, out_current)
	-- Convert given input value from one unit to another.
	-- Return output_value (a number) if a simple convert, or
	-- return f, t where
	--   f = true, t = table of information with results, or
	--   f = false, t = error message table.
	local inscale = in_current.scale
	local outscale = out_current.scale
	if not in_current.iscomplex and not out_current.iscomplex then
		return invalue * (inscale / outscale)  -- minimize overhead for most common case
	end
	if in_current.invert or out_current.invert then
		-- Inverted units, such as inverse length, inverse time, or
		-- fuel efficiency. Built-in units do not have invert set.
		if (in_current.invert or 1) * (out_current.invert or 1) &lt; 0 then
			return 1 / (invalue * inscale * outscale)
		end
		return invalue * (inscale / outscale)
	elseif in_current.offset then
		-- Temperature (there are no built-ins for this type of unit).
		if info.is_change then
			return invalue * (inscale / outscale)
		end
		return (invalue - in_current.offset) * (inscale / outscale) + out_current.offset
	else
		-- Built-in unit.
		local in_builtin = in_current.builtin
		local out_builtin = out_current.builtin
		if in_builtin and out_builtin then
			if in_builtin == out_builtin then
				return invalue
			end
			-- There are no cases (yet) where need to convert from one
			-- built-in unit to another, so this should never occur.
			return false, { 'cvt_bug_convert' }
		end
		if in_builtin == 'mach' or out_builtin == 'mach' then
			local adjust
			if in_builtin == 'mach' then
				inscale = speed_of_sound(in_current.altitude)
				adjust = outscale / 0.1
			else
				outscale = speed_of_sound(out_current.altitude)
				adjust = 0.1 / inscale
			end
			return true, {
				outvalue = invalue * (inscale / outscale),
				adjust = log10(adjust) + log10(2),
			}
		elseif in_builtin == 'hand' then
			-- 1 hand = 4 inches; 1.2 hands = 6 inches.
			-- Decimals of a hand are only defined for the first digit, and
			-- the first fractional digit should be a number of inches (1, 2 or 3).
			-- However, this code interprets the entire fractional part as the number
			-- of inches / 10 (so 1.75 inches would be 0.175 hands).
			-- A value like 12.3 hands is exactly 12*4 + 3 inches; base default precision on that.
			local integer, fracpart = math.modf(invalue)
			local inch_value = 4 * integer + 10 * fracpart  -- equivalent number of inches
			local factor = inscale / outscale
			if factor == 4 then
				-- Am converting to inches: show exact result, and use "inches" not "in" by default.
				if parms.abbr_org == nil then
					out_current.usename = true
				end
				local show = format('%g', abs(inch_value))  -- show and clean are unsigned
				if not show:find('e', 1, true) then
					return true, {
						invalue = inch_value,
						outvalue = inch_value,
						clean = show,
						show = show,
					}
				end
			end
			local outvalue = (integer + 2.5 * fracpart) * factor
			local fracstr = info.clean:match('%.(.*)') or ''
			local fmt
			if fracstr == '' then
				fmt = '%.0f'
			else
				fmt = '%.' .. format('%d', #fracstr - 1) .. 'f'
			end
			return true, {
				invalue = inch_value,
				clean = format(fmt, inch_value),
				outvalue = outvalue,
				minprec = 0,
			}
		end
	end
	return false, { 'cvt_bug_convert' }  -- should never occur
end

local function user_style(parms, i)
	-- Return text for a user-specified style for a table cell, or '' if none,
	-- given i = 1 (input style) or 2 (output style).
	local style = parms[(i == 1) and 'stylein' or 'styleout']
	if style then
		style = style:gsub('"', '')
		if style ~= '' then
			if style:sub(-1) ~= ';' then
				style = style .. ';'
			end
			return style
		end
	end
	return ''
end

local function make_table_or_sort(parms, invalue, info, in_current, scaled_top)
	-- Set options to handle output for a table or a sort key, or both.
	-- The text sort key is based on the value resulting from converting
	-- the input to a fake base unit with scale = 1, and other properties
	-- required for a conversion derived from the input unit.
	-- For other modules, return the sort key in a hidden span element, and
	-- the scaled value used to generate the sort key.
	-- If scaled_top is set, it is the scaled value of the numerator of a per unit
	-- to be combined with this unit (the denominator) to make the sort key.
	-- Scaling only works with units that convert with a factor (not temperature).
	local sortkey, scaled_value
	if parms.opt_sortable_on then
		local base = {  -- a fake unit with enough fields for a valid convert
			scale = 1,
			invert = in_current.invert and 1,
			iscomplex = in_current.iscomplex,
			offset = in_current.offset and 0,
		}
		local outvalue, extra = convert(parms, invalue, info, in_current, base)
		if extra then
			outvalue = extra.outvalue
		end
		if in_current.istemperature then
			-- Have converted to kelvin; assume numbers close to zero have a
			-- rounding error and should be zero.
			if abs(outvalue) &lt; 1e-12 then
				outvalue = 0
			end
		end
		if scaled_top and outvalue ~= 0 then
			outvalue = scaled_top / outvalue
		end
		scaled_value = outvalue
		if not valid_number(outvalue) then
			if outvalue &lt; 0 then
				sortkey = '1000000000000000000'
			else
				sortkey = '9000000000000000000'
			end
		elseif outvalue == 0 then
			sortkey = '5000000000000000000'
		else
			local mag = floor(log10(abs(outvalue)) + 1e-14)
			local prefix
			if outvalue &gt; 0 then
				prefix = 7000 + mag
			else
				prefix = 2999 - mag
				outvalue = outvalue + 10^(mag+1)
			end
			sortkey = format('%d', prefix) .. format('%015.0f', floor(outvalue * 10^(14-mag)))
		end
	end
	local sortspan
	if sortkey and not parms.table_align then
		sortspan = parms.opt_sortable_debug and
			'&lt;span data-sort-value="' .. sortkey .. '♠"&gt;&lt;span style="border:1px solid"&gt;' .. sortkey .. '♠&lt;/span&gt;&lt;/span&gt;' or
			'&lt;span data-sort-value="' .. sortkey .. '♠"&gt;&lt;/span&gt;'
		parms.join_before = sortspan
	end
	if parms.table_align then
		local sort
		if sortkey then
			sort = ' data-sort-value="' .. sortkey .. '"'
			if parms.opt_sortable_debug then
				parms.join_before = '&lt;span style="border:1px solid"&gt;' .. sortkey .. '&lt;/span&gt;'
			end
		else
			sort = ''
		end
		local style = 'style="text-align:' .. parms.table_align .. ';'
		local joins = {}
		for i = 1, 2 do
			joins[i] = (i == 1 and '' or '\n|') .. style .. user_style(parms, i) .. '"' .. sort .. '|'
		end
		parms.table_joins = joins
	end
	return sortspan, scaled_value
end

local cvt_to_hand

local function cvtround(parms, info, in_current, out_current)
	-- Return true, t where t is a table with the conversion results; fields:
	--   show = rounded, formatted string with the result of converting value in info,
	--      using the rounding specified in parms.
	--   singular = true if result (after rounding and ignoring any negative sign)
	--      is "1", or like "1.00", or is a fraction with value &lt; 1;
	--   (and more fields shown below, and a calculated 'absvalue' field).
	-- or return false, t where t is an error message table.
	-- Input info.clean uses en digits (it has been translated, if necessary).
	-- Output show uses en or non-en digits as appropriate, or can be spelled.
	if out_current.builtin == 'hand' then
		return cvt_to_hand(parms, info, in_current, out_current)
	end
	local invalue = in_current.builtin == 'hand' and info.altvalue or info.value
	local outvalue, extra = convert(parms, invalue, info, in_current, out_current)
	if parms.need_table_or_sort then
		parms.need_table_or_sort = nil  -- process using first input value only
		make_table_or_sort(parms, invalue, info, in_current)
	end
	if extra then
		if not outvalue then return false, extra end
		invalue = extra.invalue or invalue
		outvalue = extra.outvalue
	end
	if not valid_number(outvalue) then
		return false, { 'cvt_invalid_num' }
	end
	local isnegative
	if outvalue &lt; 0 then
		isnegative = true
		outvalue = -outvalue
	end
	local precision, show, exponent
	local denominator = out_current.frac
	if denominator then
		show = fraction_table(outvalue, denominator)
	else
		precision = parms.precision
		if not precision then
			if parms.sigfig then
				show, exponent = make_sigfig(outvalue, parms.sigfig)
			elseif parms.opt_round then
				local n = parms.opt_round
				if n == 0.5 then
					local integer, fracpart = math.modf(floor(2 * outvalue + 0.5) / 2)
					if fracpart == 0 then
						show = format('%.0f', integer)
					else
						show = format('%.1f', integer + fracpart)
					end
				else
					show = format('%.0f', floor((outvalue / n) + 0.5) * n)
				end
			else
				local inclean = info.clean
				if extra then
					inclean = extra.clean or inclean
					show = extra.show
				end
				if not show then
					precision = default_precision(parms, invalue, inclean, info.denominator, outvalue, in_current, out_current, extra)
				end
			end
		end
	end
	if precision then
		if precision &gt;= 0 then
			local fudge
			if precision &lt;= 8 then
				-- Add a fudge to handle common cases of bad rounding due to inability
				-- to precisely represent some values. This makes the following work:
				-- {{convert|-100.1|C|K}} and {{convert|5555000|um|m|2}}.
				-- Old template uses #expr round, which invokes PHP round().
				-- LATER: Investigate how PHP round() works.
				fudge = 2e-14
			else
				fudge = 0
			end
			local fmt = '%.' .. format('%d', precision) .. 'f'
			local success
			success, show = pcall(format, fmt, outvalue + fudge)
			if not success then
				return false, { 'cvt_big_prec', tostring(precision) }
			end
		else
			precision = -precision  -- #digits to zero (in addition to any digits after dot)
			local shift = 10 ^ precision
			show = format('%.0f', outvalue/shift)
			if show ~= '0' then
				exponent = #show + precision
			end
		end
	end
	local t = format_number(parms, show, exponent, isnegative)
	if type(show) == 'string' then
		-- Set singular using match because on some systems 0.99999999999999999 is 1.0.
		if exponent then
			t.singular = (exponent == 1 and show:match('^10*$'))
		else
			t.singular = (show == '1' or show:match('^1%.0*$'))
		end
	else
		t.fraction_table = show
		t.singular = (outvalue &lt;= 1)  -- cannot have 'fraction == 1', but if it were possible it would be singular
	end
	t.raw_absvalue = outvalue  -- absolute value before rounding
	return true, setmetatable(t, {
		__index = function (self, key)
			if key == 'absvalue' then
				-- Calculate absolute value after rounding, if needed.
				local clean, exponent = rawget(self, 'clean'), rawget(self, 'exponent')
				local value = tonumber(clean)  -- absolute value (any negative sign has been ignored)
				if exponent then
					value = value * 10^exponent
				end
				rawset(self, key, value)
				return value
			end
		end })
end

function cvt_to_hand(parms, info, in_current, out_current)
	-- Convert input to hands, inches.
	-- Return true, t where t is a table with the conversion results;
	-- or return false, t where t is an error message table.
	if parms.abbr_org == nil then
		out_current.usename = true  -- default is to show name not symbol
	end
	local precision = parms.precision
	local frac = out_current.frac
	if not frac and precision and precision &gt; 1 then
		frac = (precision == 2) and 2 or 4
	end
	local out_next = out_current.out_next
	if out_next then
		-- Use magic knowledge to determine whether the next unit is inches without requiring i18n.
		-- The following ensures that when the output combination "hand in" is used, the inches
		-- value is rounded to match the hands value. Also, displaying say "61½" instead of 61.5
		-- is better as 61.5 implies the value is not 61.4.
		if out_next.exception == 'subunit_more_precision' then
			out_next.frac = frac
		end
	end
	-- Convert to inches; calculate hands from that.
	local dummy_unit_table = { scale = out_current.scale / 4, frac = frac }
	local success, outinfo = cvtround(parms, info, in_current, dummy_unit_table)
	if not success then return false, outinfo end
	local tfrac = outinfo.fraction_table
	local inches = outinfo.raw_absvalue
	if tfrac then
		inches = floor(inches)  -- integer part only; fraction added later
	else
		inches = floor(inches + 0.5)  -- a hands measurement never shows decimals of an inch
	end
	local hands, inches = divide(inches, 4)
	outinfo.absvalue = hands + inches/4  -- supposed to be the absolute rounded value, but this is close enough
	local inchstr = tostring(inches)  -- '0', '1', '2' or '3'
	if precision and precision &lt;= 0 then  -- using negative or 0 for precision rounds to nearest hand
		hands = floor(outinfo.raw_absvalue/4 + 0.5)
		inchstr = ''
	elseif tfrac then
		-- Always show an integer before fraction (like "15.0½") because "15½" means 15-and-a-half hands.
		inchstr = numdot .. format_fraction(parms, 'out', false, inchstr, tfrac.numstr, tfrac.denstr)
	else
		inchstr = numdot .. from_en(inchstr)
	end
	outinfo.show = outinfo.sign .. with_separator(parms, format('%.0f', hands)) .. inchstr
	return true, outinfo
end

local function evaluate_condition(value, condition)
	-- Return true or false from applying a conditional expression to value,
	-- or throw an error if invalid.
	-- A very limited set of expressions is supported:
	--    v &lt; 9
	--    v * 9 &lt; 9
	-- where
	--    'v' is replaced with value
	--    9 is any number (as defined by Lua tonumber)
	--      only en digits are accepted
	--    '&lt;' can also be '&lt;=' or '&gt;' or '&gt;='
	-- In addition, the following form is supported:
	--    LHS and RHS
	-- where
	--    LHS, RHS = any of above expressions.
	local function compare(value, text)
		local arithop, factor, compop, limit = text:match('^%s*v%s*([*]?)(.-)([&lt;&gt;]=?)(.*)$')
		if arithop == nil then
			error('Invalid default expression', 0)
		elseif arithop == '*' then
			factor = tonumber(factor)
			if factor == nil then
				error('Invalid default expression', 0)
			end
			value = value * factor
		end
		limit = tonumber(limit)
		if limit == nil then
			error('Invalid default expression', 0)
		end
		if compop == '&lt;' then
			return value &lt; limit
		elseif compop == '&lt;=' then
			return value &lt;= limit
		elseif compop == '&gt;' then
			return value &gt; limit
		elseif compop == '&gt;=' then
			return value &gt;= limit
		end
		error('Invalid default expression', 0)  -- should not occur
	end
	local lhs, rhs = condition:match('^(.-%W)and(%W.*)')
	if lhs == nil then
		return compare(value, condition)
	end
	return compare(value, lhs) and compare(value, rhs)
end

local function get_default(value, unit_table)
	-- Return true, s where s = name of unit's default output unit,
	-- or return false, t where t is an error message table.
	-- Some units have a default that depends on the input value
	-- (the first value if a range of values is used).
	-- If '!' is in the default, the first bang-delimited field is an
	-- expression that uses 'v' to represent the input value.
	-- Example: 'v &lt; 120 ! small ! big ! suffix' (suffix is optional)
	-- evaluates 'v &lt; 120' as a boolean with result
	-- 'smallsuffix' if (value &lt; 120), or 'bigsuffix' otherwise.
	-- Input must use en digits and '.' decimal mark.
	local default = data_code.default_exceptions[unit_table.defkey or unit_table.symbol] or unit_table.default
	if not default then
		local per = unit_table.per
		if per then
			local function a_default(v, u)
				local success, ucode = get_default(v, u)
				if not success then
					return '?'  -- an unlikely error has occurred; will cause lookup of default to fail
				end
				-- Attempt to use only the first unit if a combination or output multiple.
				-- This is not bulletproof but should work for most cases.
				-- Where it does not work, the convert will need to specify the wanted output unit.
				local t = all_units[ucode]
				if t then
					local combo = t.combination
					if combo then
						-- For a multiple like ftin, the "first" unit (ft) is last in the combination.
						local i = t.multiple and table_len(combo) or 1
						ucode = combo[i]
					end
				else
					-- Try for an automatically generated combination.
					local item = ucode:match('^(.-)%+') or ucode:match('^(%S+)%s')
					if all_units[item] then
						return item
					end
				end
				return ucode
			end
			local unit1, unit2 = per[1], per[2]
			local def1 = (unit1 and a_default(value, unit1) or unit_table.vprefix or '')
			local def2 = a_default(1, unit2)  -- 1 because per unit of denominator
			return true, def1 .. '/' .. def2
		end
		return false, { 'cvt_no_default', unit_table.symbol }
	end
	if default:find('!', 1, true) == nil then
		return true, default
	end
	local t = split(default, '!')
	if #t == 3 or #t == 4 then
		local success, result = pcall(evaluate_condition, value, t[1])
		if success then
			default = result and t[2] or t[3]
			if #t == 4 then
				default = default .. t[4]
			end
			return true, default
		end
	end
	return false, { 'cvt_bad_default', unit_table.symbol }
end

local linked_pages  -- to record linked pages so will not link to the same page more than once

local function unlink(unit_table)
	-- Forget that the given unit has previously been linked (if it has).
	-- That is needed when processing a range of inputs or outputs when an id
	-- for the first range value may have been evaluated, but only an id for
	-- the last value is displayed, and that id may need to be linked.
	linked_pages[unit_table.unitcode or unit_table] = nil
end

local function make_link(link, id, unit_table)
	-- Return wikilink "[[link|id]]", possibly abbreviated as in examples:
	--   [[Mile|mile]]  --&gt; [[mile]]
	--   [[Mile|miles]] --&gt; [[mile]]s
	-- However, just id is returned if:
	-- * no link given (so caller does not need to check if a link was defined); or
	-- * link has previously been used during the current convert (to avoid overlinking).
	local link_key
	if unit_table then
		link_key = unit_table.unitcode or unit_table
	else
		link_key = link
	end
	if not link or link == '' or linked_pages[link_key] then
		return id
	end
	linked_pages[link_key] = true
	-- Following only works for language en, but it should be safe on other wikis,
	-- and overhead of doing it generally does not seem worthwhile.
	local l = link:sub(1, 1):lower() .. link:sub(2)
	if link == id or l == id then
		return '[[' .. id .. ']]'
	elseif link .. 's' == id or l .. 's' == id then
		return '[[' .. id:sub(1, -2) .. ']]s'
	else
		return '[[' .. link .. '|' .. id .. ']]'
	end
end

local function variable_name(clean, unit_table)
	-- For slwiki, a unit name depends on the value.
	-- Parameter clean is the unsigned rounded value in en digits, as a string.
	-- Value             Source    Example for "m"
	-- integer 1:        name1     meter  (also is the name of the unit)
	-- integer 2:        var{1}    metra
	-- integer 3 and 4:  var{2}    metri
	-- integer else:     var{3}    metrov (0 and 5 or more)
	-- real/fraction:    var{4}    metra
	-- var{i} means the i'th field in unit_table.varname if it exists and has
	-- an i'th field, otherwise name2.
	-- Fields are separated with "!" and are not empty.
	-- A field for a unit using an SI prefix has the prefix name inserted,
	-- replacing '#' if found, or before the field otherwise.
	local vname
	if clean == '1' then
		vname = unit_table.name1
	elseif unit_table.varname then
		local i
		if clean == '2' then
			i = 1
		elseif clean == '3' or clean == '4' then
			i = 2
		elseif clean:find('.', 1, true) then
			i = 4
		else
			i = 3
		end
		if i &gt; 1 and varname == 'pl' then
			i = i - 1
		end
		vname = split(unit_table.varname, '!')[i]
	end
	if vname then
		local si_name = rawget(unit_table, 'si_name') or ''
		local pos = vname:find('#', 1, true)
		if pos then
			vname = vname:sub(1, pos - 1) .. si_name .. vname:sub(pos + 1)
		else
			vname = si_name .. vname
		end
		return vname
	end
	return unit_table.name2
end

local function linked_id(parms, unit_table, key_id, want_link, clean)
	-- Return final unit id (symbol or name), optionally with a wikilink,
	-- and update unit_table.sep if required.
	-- key_id is one of: 'symbol', 'sym_us', 'name1', 'name1_us', 'name2', 'name2_us'.
	local abbr_on = (key_id == 'symbol' or key_id == 'sym_us')
	if abbr_on and want_link then
		local symlink = rawget(unit_table, 'symlink')
		if symlink then
			return symlink  -- for exceptions that have the linked symbol built-in
		end
	end
	local multiplier = rawget(unit_table, 'multiplier')
	local per = unit_table.per
	if per then
		local paren1, paren2 = '', ''  -- possible parentheses around bottom unit
		local unit1 = per[1]  -- top unit_table, or nil
		local unit2 = per[2]  -- bottom unit_table
		if abbr_on then
			if not unit1 then
				unit_table.sep = ''  -- no separator in "$2/acre"
			end
			if not want_link then
				local symbol = unit_table.symbol_raw
				if symbol then
					return symbol  -- for exceptions that have the symbol built-in
				end
			end
			if (unit2.symbol):find('⋅', 1, true) then
				paren1, paren2 = '(', ')'
			end
		end
		local key_id2  -- unit2 is always singular
		if key_id == 'name2' then
			key_id2 = 'name1'
		elseif key_id == 'name2_us' then
			key_id2 = 'name1_us'
		else
			key_id2 = key_id
		end
		local result
		if abbr_on then
			result = '/'
		elseif omitsep then
			result = per_word
		elseif unit1 then
			result = ' ' .. per_word .. ' '
		else
			result = per_word .. ' '
		end
		if want_link and unit_table.link then
			if abbr_on or not varname then
				result = (unit1 and linked_id(parms, unit1, key_id, false, clean) or '') .. result .. linked_id(parms, unit2, key_id2, false, '1')
			else
				result = (unit1 and variable_name(clean, unit1) or '') .. result .. variable_name('1', unit2)
			end
			if omit_separator(result) then
				unit_table.sep = ''
			end
			return make_link(unit_table.link, result, unit_table)
		end
		if unit1 then
			result = linked_id(parms, unit1, key_id, want_link, clean) .. result
			if unit1.sep then
				unit_table.sep = unit1.sep
			end
		elseif omitsep then
			unit_table.sep = ''
		end
		return result .. paren1 .. linked_id(parms, unit2, key_id2, want_link, '1') .. paren2
	end
	if multiplier then
		-- A multiplier (like "100" in "100km") forces the unit to be plural.
		multiplier = from_en(multiplier)
		if not omitsep then
			multiplier = multiplier .. (abbr_on and '&amp;nbsp;' or ' ')
		end
		if not abbr_on then
			if key_id == 'name1' then
				key_id = 'name2'
			elseif key_id == 'name1_us' then
				key_id = 'name2_us'
			end
		end
	else
		multiplier = ''
	end
	local id = unit_table.fixed_name or ((varname and not abbr_on) and variable_name(clean, unit_table) or unit_table[key_id])
	if omit_separator(id) then
		unit_table.sep = ''
	end
	if want_link then
		local link = data_code.link_exceptions[unit_table.linkey or unit_table.symbol] or unit_table.link
		if link then
			local before = ''
			local i = unit_table.customary
			if i == 1 and parms.opt_sp_us then
				i = 2  -- show "U.S." not "US"
			end
			if i == 3 and abbr_on then
				i = 4  -- abbreviate "imperial" to "imp"
			end
			local customary = text_code.customary_units[i]
			if customary then
				-- LATER: This works for language en only, but it's esoteric so ignore for now.
				local pertext
				if id:sub(1, 1) == '/' then
					-- Want unit "/USgal" to display as "/U.S. gal", not "U.S. /gal".
					pertext = '/'
					id = id:sub(2)
				elseif id:sub(1, 4) == 'per ' then
					-- Similarly want "per U.S. gallon", not "U.S. per gallon" (but in practice this is unlikely to be used).
					pertext = 'per '
					id = id:sub(5)
				else
					pertext = ''
				end
				-- Omit any "US"/"U.S."/"imp"/"imperial" from start of id since that will be inserted.
				local removes = (i &lt; 3) and { 'US&amp;nbsp;', 'US ', 'U.S.&amp;nbsp;', 'U.S. ' } or { 'imp&amp;nbsp;', 'imp ', 'imperial ' }
				for _, prefix in ipairs(removes) do
					local plen = #prefix
					if id:sub(1, plen) == prefix then
						id = id:sub(plen + 1)
						break
					end
				end
				before = pertext .. make_link(customary.link, customary[1]) .. ' '
			end
			id = before .. make_link(link, id, unit_table)
		end
	end
	return multiplier .. id
end

local function make_id(parms, which, unit_table)
	-- Return id, f where
	--   id = unit name or symbol, possibly modified
	--   f = true if id is a name, or false if id is a symbol
	-- using the value for index 'which', and for 'in' or 'out' (unit_table.inout).
	-- Result is '' if no symbol/name is to be used.
	-- In addition, set unit_table.sep = ' ' or '&amp;nbsp;' or ''
	-- (the separator that caller will normally insert before the id).
	if parms.opt_values then
		unit_table.sep = ''
		return ''
	end
	local inout = unit_table.inout
	local info = unit_table.valinfo[which]
	local abbr_org = parms.abbr_org
	local adjectival = parms.opt_adjectival
	local lk = parms.lk
	local want_link = (lk == 'on' or lk == inout)
	local usename = unit_table.usename
	local singular = info.singular
	local want_name
	if usename then
		want_name = true
	else
		if abbr_org == nil then
			if parms.wantname then
				want_name = true
			end
			if unit_table.usesymbol then
				want_name = false
			end
		end
		if want_name == nil then
			local abbr = parms.abbr
			if abbr == 'on' or abbr == inout or (abbr == 'mos' and inout == 'out') then
				want_name = false
			else
				want_name = true
			end
		end
	end
	local key
	if want_name then
		if lk == nil and unit_table.builtin == 'hand' then
			want_link = true
		end
		if parms.opt_use_nbsp then
			unit_table.sep = '&amp;nbsp;'
		else
			unit_table.sep = ' '
		end
		if parms.opt_singular then
			local value
			if inout == 'in' then
				value = info.value
			else
				value = info.absvalue
			end
			if value then  -- some unusual units do not always set value field
				value = abs(value)
				singular = (0 &lt; value and value &lt; 1.0001)
			end
		end
		if unit_table.engscale then
			-- engscale: so "|1|e3kg" gives "1 thousand kilograms" (plural)
			singular = false
		end
		key = (adjectival or singular) and 'name1' or 'name2'
		if parms.opt_sp_us then
			key = key .. '_us'
		end
	else
		if unit_table.builtin == 'hand' then
			if parms.opt_hand_hh then
				unit_table.symbol = 'hh'  -- LATER: might want i18n applied to this
			end
		end
		unit_table.sep = '&amp;nbsp;'
		key = parms.opt_sp_us and 'sym_us' or 'symbol'
	end
	return linked_id(parms, unit_table, key, want_link, info.clean), want_name
end

local function decorate_value(parms, unit_table, which, number_word)
	-- If needed, update unit_table so values will be shown with extra information.
	-- For consistency with the old template (but different from fmtpower),
	-- the style to display powers of 10 includes "display:none" to allow some
	-- browsers to copy, for example, "10³" as "10^3", rather than as "103".
	local info
	local engscale = unit_table.engscale
	local prefix = unit_table.vprefix
	if engscale or prefix then
		info = unit_table.valinfo[which]
		if info.decorated then
			return  -- do not redecorate if repeating convert
		end
		info.decorated = true
		if engscale then
			local inout = unit_table.inout
			local abbr = parms.abbr
			if (abbr == 'on' or abbr == inout) and not parms.number_word then
				info.show = info.show ..
					'&lt;span style="margin-left:0.2em"&gt;×&lt;span style="margin-left:0.1em"&gt;' ..
					from_en('10') ..
					'&lt;/span&gt;&lt;/span&gt;&lt;s style="display:none"&gt;^&lt;/s&gt;&lt;sup&gt;' ..
					from_en(tostring(engscale.exponent)) .. '&lt;/sup&gt;'
			elseif number_word then
				local number_id
				local lk = parms.lk
				if lk == 'on' or lk == inout then
					number_id = make_link(engscale.link, engscale[1])
				else
					number_id = engscale[1]
				end
				-- WP:NUMERAL recommends "&amp;nbsp;" in values like "12 million".
				info.show = info.show .. (parms.opt_adjectival and '-' or '&amp;nbsp;') .. number_id
			end
		end
		if prefix then
			info.show = prefix .. info.show
		end
	end
end

local function process_input(parms, in_current)
	-- Processing required once per conversion.
	-- Return block of text to represent input (value/unit).
	if parms.opt_output_only or parms.opt_output_number_only or parms.opt_output_unit_only then
		parms.joins = { '', '' }
		return ''
	end
	local first_unit
	local composite = in_current.composite  -- nil or table of units
	if composite then
		first_unit = composite[1]
	else
		first_unit = in_current
	end
	local id1, want_name = make_id(parms, 1, first_unit)
	local sep = first_unit.sep  -- separator between value and unit, set by make_id
	local preunit = parms.preunit1
	if preunit then
		sep = ''  -- any separator is included in preunit
	else
		preunit = ''
	end
	if parms.opt_input_unit_only then
		parms.joins = { '', '' }
		if composite then
			local parts = { id1 }
			for i, unit in ipairs(composite) do
				if i &gt; 1 then
					table.insert(parts, (make_id(parms, 1, unit)))
				end
			end
			id1 = table.concat(parts, ' ')
		end
		if want_name and parms.opt_adjectival then
			return preunit .. hyphenated(id1)
		end
		return  preunit .. id1
	end
	if parms.opt_also_symbol and not composite and not parms.opt_flip then
		local join1 = parms.joins[1]
		if join1 == ' (' or join1 == ' [' then
			parms.joins = { ' [' .. first_unit[parms.opt_sp_us and 'sym_us' or 'symbol'] .. ']' .. join1 , parms.joins[2] }
		end
	end
	if in_current.builtin == 'mach' and first_unit.sep ~= '' then  -- '' means omitsep with non-enwiki name
		local prefix = id1 .. '&amp;nbsp;'
		local range = parms.range
		local valinfo = first_unit.valinfo
		local result = prefix .. valinfo[1].show
		if range then
			-- For simplicity and because more not needed, handle one range item only.
			local prefix2 = make_id(parms, 2, first_unit) .. '&amp;nbsp;'
			result = range_text(range[1], want_name, parms, result, prefix2 .. valinfo[2].show, 'in')
		end
		return preunit .. result
	end
	if composite then
		-- Simplify: assume there is no range, and no decoration.
		local mid = (not parms.opt_flip) and parms.mid or ''
		local sep1 = '&amp;nbsp;'
		local sep2 = ' '
		if parms.opt_adjectival and want_name then
			sep1 = '-'
			sep2 = '-'
		end
		if omitsep and sep == '' then
			-- Testing the id of the most significant unit should be sufficient.
			sep1 = ''
			sep2 = ''
		end
		local parts = { first_unit.valinfo[1].show .. sep1 .. id1 }
		for i, unit in ipairs(composite) do
			if i &gt; 1 then
				table.insert(parts, unit.valinfo[1].show .. sep1 .. (make_id(parms, 1, unit)))
			end
		end
		return table.concat(parts, sep2) .. mid
	end
	local add_unit = (parms.abbr == 'mos') or
		parms[parms.opt_flip and 'out_range_x' or 'in_range_x'] or
		(not want_name and parms.abbr_range_x)
	local range = parms.range
	if range and not add_unit then
		unlink(first_unit)
	end
	local id = range and make_id(parms, range.n + 1, first_unit) or id1
	local extra, was_hyphenated = hyphenated_maybe(parms, want_name, sep, id, 'in')
	if was_hyphenated then
		add_unit = false
	end
	local result
	local valinfo = first_unit.valinfo
	if range then
		for i = 0, range.n do
			local number_word
			if i == range.n then
				add_unit = false
				number_word = true
			end
			decorate_value(parms, first_unit, i+1, number_word)
			local show = valinfo[i+1].show
			if add_unit then
				show = show .. first_unit.sep .. (i == 0 and id1 or make_id(parms, i+1, first_unit))
			end
			if i == 0 then
				result = show
			else
				result = range_text(range[i], want_name, parms, result, show, 'in')
			end
		end
	else
		decorate_value(parms, first_unit, 1, true)
		result = valinfo[1].show
	end
	return result .. preunit .. extra
end

local function process_one_output(parms, out_current)
	-- Processing required for each output unit.
	-- Return block of text to represent output (value/unit).
	local inout = out_current.inout  -- normally 'out' but can be 'in' for order=out
	local id1, want_name = make_id(parms, 1, out_current)
	local sep = out_current.sep  -- set by make_id
	local preunit = parms.preunit2
	if preunit then
		sep = ''  -- any separator is included in preunit
	else
		preunit = ''
	end
	if parms.opt_output_unit_only then
		if want_name and parms.opt_adjectival then
			return preunit .. hyphenated(id1)
		end
		return preunit .. id1
	end
	if out_current.builtin == 'mach' and out_current.sep ~= '' then  -- '' means omitsep with non-enwiki name
		local prefix = id1 .. '&amp;nbsp;'
		local range = parms.range
		local valinfo = out_current.valinfo
		local result = prefix .. valinfo[1].show
		if range then
			-- For simplicity and because more not needed, handle one range item only.
			result = range_text(range[1], want_name, parms, result, prefix .. valinfo[2].show, inout)
		end
		return preunit .. result
	end
	local add_unit = (parms[parms.opt_flip and 'in_range_x' or 'out_range_x'] or
		(not want_name and parms.abbr_range_x)) and
		not parms.opt_output_number_only
	local range = parms.range
	if range and not add_unit then
		unlink(out_current)
	end
	local id = range and make_id(parms, range.n + 1, out_current) or id1
	local extra, was_hyphenated = hyphenated_maybe(parms, want_name, sep, id, inout)
	if was_hyphenated then
		add_unit = false
	end
	local result
	local valinfo = out_current.valinfo
	if range then
		for i = 0, range.n do
			local number_word
			if i == range.n then
				add_unit = false
				number_word = true
			end
			decorate_value(parms, out_current, i+1, number_word)
			local show = valinfo[i+1].show
			if add_unit then
				show = show .. out_current.sep .. (i == 0 and id1 or make_id(parms, i+1, out_current))
			end
			if i == 0 then
				result = show
			else
				result = range_text(range[i], want_name, parms, result, show, inout)
			end
		end
	else
		decorate_value(parms, out_current, 1, true)
		result = valinfo[1].show
	end
	if parms.opt_output_number_only then
		return result
	end
	return result .. preunit .. extra
end

local function make_output_single(parms, in_unit_table, out_unit_table)
	-- Return true, item where item = wikitext of the conversion result
	-- for a single output (which is not a combination or a multiple);
	-- or return false, t where t is an error message table.
	if parms.opt_order_out and in_unit_table.unitcode == out_unit_table.unitcode then
		out_unit_table.valinfo = in_unit_table.valinfo
	else
		out_unit_table.valinfo = collection()
		for _, v in ipairs(in_unit_table.valinfo) do
			local success, info = cvtround(parms, v, in_unit_table, out_unit_table)
			if not success then return false, info end
			out_unit_table.valinfo:add(info)
		end
	end
	return true, process_one_output(parms, out_unit_table)
end

local function make_output_multiple(parms, in_unit_table, out_unit_table)
	-- Return true, item where item = wikitext of the conversion result
	-- for an output which is a multiple (like 'ftin');
	-- or return false, t where t is an error message table.
	local inout = out_unit_table.inout  -- normally 'out' but can be 'in' for order=out
	local multiple = out_unit_table.multiple  -- table of scaling factors (will not be nil)
	local combos = out_unit_table.combination  -- table of unit tables (will not be nil)
	local abbr = parms.abbr
	local abbr_org = parms.abbr_org
	local disp = parms.disp
	local want_name = (abbr_org == nil and (disp == 'or' or disp == 'slash')) or
						not (abbr == 'on' or abbr == inout or abbr == 'mos')
	local want_link = (parms.lk == 'on' or parms.lk == inout)
	local mid = parms.opt_flip and parms.mid or ''
	local sep1 = '&amp;nbsp;'
	local sep2 = ' '
	if parms.opt_adjectival and want_name then
		sep1 = '-'
		sep2 = '-'
	end
	local do_spell = parms.opt_spell_out
	parms.opt_spell_out = nil  -- so the call to cvtround does not spell the value
	local function make_result(info, isfirst)
		local fmt, outvalue, sign
		local results = {}
		for i = 1, #combos do
			local tfrac, thisvalue, strforce
			local out_current = combos[i]
			out_current.inout = inout
			local scale = multiple[i]
			if i == 1 then  -- least significant unit ('in' from 'ftin')
				local decimals
				out_current.frac = out_unit_table.frac
				local success, outinfo = cvtround(parms, info, in_unit_table, out_current)
				if not success then return false, outinfo end
				if isfirst then
					out_unit_table.valinfo = { outinfo }  -- in case output value of first least significant unit is needed
				end
				sign = outinfo.sign
				tfrac = outinfo.fraction_table
				if outinfo.is_scientific then
					strforce = outinfo.show
					decimals = ''
				elseif tfrac then
					decimals = ''
				else
					local show = outinfo.show  -- number as a string in local language
					local p1, p2 = show:find(numdot, 1, true)
					decimals = p1 and show:sub(p2 + 1) or ''  -- text after numdot, if any
				end
				fmt = '%.' .. ulen(decimals) .. 'f'  -- to reproduce precision
				if decimals == '' then
					if tfrac then
						outvalue = floor(outinfo.raw_absvalue)  -- integer part only; fraction added later
					else
						outvalue = floor(outinfo.raw_absvalue + 0.5)  -- keep all integer digits of least significant unit
					end
				else
					outvalue = outinfo.absvalue
				end
			end
			if scale then
				outvalue, thisvalue = divide(outvalue, scale)
			else
				thisvalue = outvalue
			end
			local id
			if want_name then
				if varname then
					local clean
					if strforce or tfrac then
						clean = '.1'  -- dummy value to force name for floating point
					else
						clean = format(fmt, thisvalue)
					end
					id = variable_name(clean, out_current)
				else
					local key = 'name2'
					if parms.opt_adjectival then
						key = 'name1'
					elseif tfrac then
						if thisvalue == 0 then
							key = 'name1'
						end
					elseif parms.opt_singular then
						if 0 &lt; thisvalue and thisvalue &lt; 1.0001 then
							key = 'name1'
						end
					else
						if thisvalue == 1 then
							key = 'name1'
						end
					end
					id = out_current[key]
				end
			else
				id = out_current['symbol']
			end
			if i == 1 and omit_separator(id) then
				-- Testing the id of the least significant unit should be sufficient.
				sep1 = ''
				sep2 = ''
			end
			if want_link then
				local link = out_current.link
				if link then
					id = make_link(link, id, out_current)
				end
			end
			local strval
			local spell_inout = (i == #combos or outvalue == 0) and inout or ''  -- trick so the last value processed (first displayed) has uppercase, if requested
			if strforce and outvalue == 0 then
				sign = ''  -- any sign is in strforce
				strval = strforce  -- show small values in scientific notation; will only use least significant unit
			elseif tfrac then
				local wholestr = (thisvalue &gt; 0) and tostring(thisvalue) or nil
				strval = format_fraction(parms, spell_inout, false, wholestr, tfrac.numstr, tfrac.denstr, do_spell)
			else
				strval = (thisvalue == 0) and from_en('0') or with_separator(parms, format(fmt, thisvalue))
				if do_spell then
					strval = spell_number(parms, spell_inout, strval) or strval
				end
			end
			table.insert(results, strval .. sep1 .. id)
			if outvalue == 0 then
				break
			end
			fmt = '%.0f'  -- only least significant unit can have a non-integral value
		end
		local reversed, count = {}, #results
		for i = 1, count do
			reversed[i] = results[count + 1 - i]
		end
		return true, sign .. table.concat(reversed, sep2)
	end
	local valinfo = in_unit_table.valinfo
	local success, result = make_result(valinfo[1], true)
	if not success then return false, result end
	local range = parms.range
	if range then
		for i = 1, range.n do
			local success, result2 = make_result(valinfo[i+1])
			if not success then return false, result2 end
			result = range_text(range[i], want_name, parms, result, result2, inout)
		end
	end
	return true, result .. mid
end

local function process(parms, in_unit_table, out_unit_table)
	-- Return true, s, outunit where s = final wikitext result,
	-- or return false, t where t is an error message table.
	linked_pages = {}
	local success, bad_output
	local bad_input_mcode = in_unit_table.bad_mcode  -- nil if input unit is a valid convert unit
	local out_unit = parms.out_unit
	if out_unit == nil or out_unit == '' or type(out_unit) == 'function' then
		if bad_input_mcode or parms.opt_input_unit_only then
			bad_output = ''
		else
			local getdef = type(out_unit) == 'function' and out_unit or get_default
			success, out_unit = getdef(in_unit_table.valinfo[1].value, in_unit_table)
			parms.out_unit = out_unit
			if not success then
				bad_output = out_unit
			end
		end
	end
	if not bad_output and not out_unit_table then
		success, out_unit_table = lookup(parms, out_unit, 'any_combination')
		if success then
			local mismatch = check_mismatch(in_unit_table, out_unit_table)
			if mismatch then
				bad_output = mismatch
			end
		else
			bad_output = out_unit_table
		end
	end
	local lhs, rhs
	local flipped = parms.opt_flip and not bad_input_mcode
	if bad_output then
		rhs = (bad_output == '') and '' or message(parms, bad_output)
	elseif parms.opt_input_unit_only then
		rhs = ''
	else
		local combos  -- nil (for 'ft' or 'ftin'), or table of unit tables (for 'm ft')
		if not out_unit_table.multiple then  -- nil/false ('ft' or 'm ft'), or table of factors ('ftin')
			combos = out_unit_table.combination
		end
		local frac = parms.frac  -- nil or denominator of fraction for output values
		if frac then
			-- Apply fraction to the unit (if only one), or to non-SI units (if a combination),
			-- except that if a precision is also specified, the fraction only applies to
			-- the hand unit; that allows the following result:
			-- {{convert|156|cm|in hand|1|frac=2}} → 156 centimetres (61.4 in; 15.1½ hands)
			-- However, the following is handled elsewhere as a special case:
			-- {{convert|156|cm|hand in|1|frac=2}} → 156 centimetres (15.1½ hands; 61½ in)
			if combos then
				local precision = parms.precision
				for _, unit in ipairs(combos) do
					if unit.builtin == 'hand' or (not precision and not unit.prefixes) then
						unit.frac = frac
					end
				end
			else
				out_unit_table.frac = frac
			end
		end
		local outputs = {}
		local imax = combos and #combos or 1  -- 1 (single unit) or number of unit tables
		if imax == 1 then
			parms.opt_order_out = nil  -- only useful with an output combination
		end
		if not flipped and not parms.opt_order_out then
			-- Process left side first so any duplicate links (from lk=on) are suppressed
			-- on right. Example: {{convert|28|e9pc|e9ly|abbr=off|lk=on}}
			lhs = process_input(parms, in_unit_table)
		end
		for i = 1, imax do
			local success, item
			local out_current = combos and combos[i] or out_unit_table
			out_current.inout = 'out'
			if i == 1 then
				if imax &gt; 1 and out_current.builtin == 'hand' then
					out_current.out_next = combos[2]  -- built-in hand can influence next unit in a combination
				end
				if parms.opt_order_out then
					out_current.inout = 'in'
				end
			end
			if out_current.multiple then
				success, item = make_output_multiple(parms, in_unit_table, out_current)
			else
				success, item = make_output_single(parms, in_unit_table, out_current)
			end
			if not success then return false, item end
			outputs[i] = item
		end
		if parms.opt_order_out then
			lhs = outputs[1]
			table.remove(outputs, 1)
		end
		local sep = parms.table_joins and parms.table_joins[2] or parms.join_between
		rhs = table.concat(outputs, sep)
	end
	if flipped or not lhs then
		local input = process_input(parms, in_unit_table)
		if flipped then
			lhs = rhs
			rhs = input
		else
			lhs = input
		end
	end
	if parms.join_before then
		lhs = parms.join_before .. lhs
	end
	local wikitext
	if bad_input_mcode then
		if bad_input_mcode == '' then
			wikitext = lhs
		else
			wikitext = lhs .. message(parms, bad_input_mcode)
		end
	elseif parms.table_joins then
		wikitext = parms.table_joins[1] .. lhs .. parms.table_joins[2] .. rhs
	else
		wikitext = lhs .. parms.joins[1] .. rhs .. parms.joins[2]
	end
	if parms.warnings and not bad_input_mcode then
		wikitext = wikitext .. parms.warnings
	end
	return true, wikitext, out_unit_table
end

local function main_convert(frame)
	-- Do convert, and if needed, do it again with higher default precision.
	local parms = { frame = frame }  -- will hold template arguments, after translation
	set_config(frame.args)
	local success, result = get_parms(parms, frame:getParent().args)
	if success then
		if type(result) ~= 'table' then
			return tostring(result)
		end
		local in_unit_table = result
		local out_unit_table
		for _ = 1, 2 do  -- use counter so cannot get stuck repeating convert
			success, result, out_unit_table = process(parms, in_unit_table, out_unit_table)
			if success and parms.do_convert_again then
				parms.do_convert_again = false
			else
				break
			end
		end
	end
	-- If input=x gives a problem, the result should be just the user input
	-- (if x is a property like P123 it has been replaced with '').
	-- An unknown input unit would display the input and an error message
	-- with success == true at this point.
	-- Also, can have success == false with a message that outputs an empty string.
	if parms.input_text then
		if success and not parms.have_problem then
			return result
		end
		local cat
		if parms.tracking then
			-- Add a tracking category using the given text as the category sort key.
			-- There is currently only one type of tracking, but in principle multiple
			-- items could be tracked, using different sort keys for convenience.
			cat = wanted_category('tracking', parms.tracking)
		end
		return parms.input_text .. (cat or '')
	end
	return success and result or message(parms, result)
end

local function _unit(unitcode, options)
	-- Helper function for Module:Val to look up a unit.
	-- Parameter unitcode must be a string to identify the wanted unit.
	-- Parameter options must be nil or a table with optional fields:
	--   value = number (for sort key; default value is 1)
	--   scaled_top = nil for a normal unit, or a number for a unit which is
	--                the denominator of a per unit (for sort key)
	--   si = { 'symbol', 'link' }
	--                (a table with two strings) to make an SI unit
	--                that will be used for the look up
	--   link = true if result should be [[linked]]
	--   sort = 'on' or 'debug' if result should include a sort key in a
	--                span element ('debug' makes the key visible)
	--   name = true for the name of the unit instead of the symbol
	--   us = true for the US spelling of the unit, if any
	-- Return nil if unitcode is not a non-empty string.
	-- Otherwise return a table with fields:
	--   text = requested symbol or name of unit, optionally linked
	--   scaled_value = input value adjusted by unit scale; used for sort key
	--   sortspan = span element with sort key like that provided by {{ntsh}},
	--     calculated from the result of converting value
	--     to a base unit with scale 1.
	--   unknown = true if the unitcode was not known
	unitcode = strip(unitcode)
	if unitcode == nil or unitcode == '' then
		return nil
	end
	set_config({})
	linked_pages = {}
	options = options or {}
	local parms = {
		abbr = options.name and 'off' or 'on',
		lk = options.link and 'on' or nil,
		opt_sp_us = options.us and true or nil,
		opt_ignore_error = true,  -- do not add pages using this function to 'what links here' for Module:Convert/extra
		opt_sortable_on = options.sort == 'on' or options.sort == 'debug',
		opt_sortable_debug = options.sort == 'debug',
	}
	if options.si then
		-- Make a dummy table of units (just one unit) for lookup to use.
		-- This makes lookup recognize any SI prefix in the unitcode.
		local symbol = options.si[1] or '?'
		parms.unittable = { [symbol] = {
			_name1 = symbol,
			_name2 = symbol,
			_symbol = symbol,
			utype = symbol,
			scale = symbol == 'g' and 0.001 or 1,
			prefixes = 1,
			default = symbol,
			link = options.si[2],
		}}
	end
	local success, unit_table = lookup(parms, unitcode, 'no_combination')
	if not success then
		unit_table = setmetatable({
			symbol = unitcode, name2 = unitcode, utype = unitcode,
			scale = 1, default = '', defkey = '', linkey = '' }, unit_mt)
	end
	local value = tonumber(options.value) or 1
	local clean = tostring(abs(value))
	local info = {
		value = value,
		altvalue = value,
		singular = (clean == '1'),
		clean = clean,
		show = clean,
	}
	unit_table.inout = 'in'
	unit_table.valinfo = { info }
	local sortspan, scaled_value
	if options.sort then
		sortspan, scaled_value = make_table_or_sort(parms, value, info, unit_table, options.scaled_top)
	end
	return {
		text = make_id(parms, 1, unit_table),
		sortspan = sortspan,
		scaled_value = scaled_value,
		unknown = not success and true or nil,
	}
end

return { convert = main_convert, _unit = _unit }</text>
      <sha1>0wz2itriwu36ivaewc8hvypercj5qrn</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Convert/data</title>
    <ns>828</ns>
    <id>38570725</id>
    <revision>
      <id>845963535</id>
      <parentid>825898978</parentid>
      <timestamp>2018-06-15T10:08:35Z</timestamp>
      <contributor>
        <username>Johnuniq</username>
        <id>6036800</id>
      </contributor>
      <comment>update from sandbox per [[Template talk:Convert#Module version 23]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="174491">-- Conversion data used by [[Module:Convert]] which uses mw.loadData() for
-- read-only access to this module so that it is loaded only once per page.
-- See [[:en:Template:Convert/Transwiki guide]] if copying to another wiki.
--
-- These data tables follow:
--   all_units           all properties for a unit, including default output
--   default_exceptions  exceptions for default output ('kg' and 'g' have different defaults)
--   link_exceptions     exceptions for links ('kg' and 'g' have different links)
--
-- These tables are generated by a script which reads the wikitext of a page that
-- documents the required properties of each unit; see [[:en:Module:Convert/doc]].

---------------------------------------------------------------------------
-- Do not change the data in this table because it is created by running --
-- a script that reads the wikitext from a wiki page (see note above).   --
---------------------------------------------------------------------------
local all_units = {
    ["Gy"] = {
	_name1   = "gray",
	_symbol  = "Gy",
	utype    = "absorbed radiation dose",
	scale    = 1,
	prefixes = 1,
	default  = "rad",
	link     = "Gray (unit)",
    },
    ["rad"] = {
	_name1   = "rad",
	_symbol  = "rad",
	utype    = "absorbed radiation dose",
	scale    = 0.01,
	prefixes = 1,
	default  = "Gy",
	link     = "Rad (unit)",
    },
    ["cm/s2"] = {
	name1    = "centimetre per second squared",
	name1_us = "centimeter per second squared",
	name2    = "centimetres per second squared",
	name2_us = "centimeters per second squared",
	symbol   = "cm/s&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "acceleration",
	scale    = 0.01,
	default  = "ft/s2",
	link     = "Gal (unit)",
    },
    ["ft/s2"] = {
	name1    = "foot per second squared",
	name2    = "feet per second squared",
	symbol   = "ft/s&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "acceleration",
	scale    = 0.3048,
	default  = "m/s2",
    },
    ["g0"] = {
	name1    = "standard gravity",
	name2    = "standard gravities",
	symbol   = "''g&lt;sub&gt;0&lt;/sub&gt;''",
	utype    = "acceleration",
	scale    = 9.80665,
	default  = "m/s2",
    },
    ["km/hs"] = {
	name1    = "kilometre per hour per second",
	name1_us = "kilometer per hour per second",
	name2    = "kilometres per hour per second",
	name2_us = "kilometers per hour per second",
	symbol   = "km/(h⋅s)",
	utype    = "acceleration",
	scale    = 0.27777777777777779,
	default  = "mph/s",
	link     = "Acceleration",
    },
    ["km/s2"] = {
	name1    = "kilometre per second squared",
	name1_us = "kilometer per second squared",
	name2    = "kilometres per second squared",
	name2_us = "kilometers per second squared",
	symbol   = "km/s&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "acceleration",
	scale    = 1000,
	default  = "mph/s",
	link     = "Acceleration",
    },
    ["m/s2"] = {
	name1    = "metre per second squared",
	name1_us = "meter per second squared",
	name2    = "metres per second squared",
	name2_us = "meters per second squared",
	symbol   = "m/s&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "acceleration",
	scale    = 1,
	default  = "ft/s2",
    },
    ["mph/s"] = {
	name1    = "mile per hour per second",
	name2    = "miles per hour per second",
	symbol   = "mph/s",
	utype    = "acceleration",
	scale    = 0.44704,
	default  = "km/hs",
	link     = "Acceleration",
    },
    ["km/h/s"] = {
	target   = "km/hs",
    },
    ["standard gravity"] = {
	target   = "g0",
    },
    ["1000sqft"] = {
	name1    = "thousand square feet",
	name2    = "thousand square feet",
	symbol   = "1000&amp;nbsp;sq&amp;nbsp;ft",
	utype    = "area",
	scale    = 92.90304,
	default  = "m2",
	link     = "Square foot",
    },
    ["a"] = {
	_name1   = "are",
	_symbol  = "a",
	utype    = "area",
	scale    = 100,
	prefixes = 1,
	default  = "sqft",
	link     = "Hectare#Are",
    },
    ["acre"] = {
	symbol   = "acre",
	usename  = 1,
	utype    = "area",
	scale    = 4046.8564224,
	default  = "ha",
	subdivs  = { ["rood"] = { 4, default = "ha" }, ["sqperch"] = { 160, default = "ha" } },
    },
    ["acre-sing"] = {
	target   = "acre",
    },
    ["arpent"] = {
	symbol   = "arpent",
	usename  = 1,
	utype    = "area",
	scale    = 3418.89,
	default  = "ha",
    },
    ["cda"] = {
	name1    = "cuerda",
	symbol   = "cda",
	utype    = "area",
	scale    = 3930.395625,
	default  = "ha acre",
    },
    ["daa"] = {
	name1    = "decare",
	symbol   = "daa",
	utype    = "area",
	scale    = 1000,
	default  = "km2 sqmi",
    },
    ["dunam"] = {
	symbol   = "dunam",
	usename  = 1,
	utype    = "area",
	scale    = 1000,
	default  = "km2 sqmi",
    },
    ["dunum"] = {
	symbol   = "dunum",
	usename  = 1,
	utype    = "area",
	scale    = 1000,
	default  = "km2 sqmi",
	link     = "Dunam",
    },
    ["ha"] = {
	name1    = "hectare",
	symbol   = "ha",
	utype    = "area",
	scale    = 10000,
	default  = "acre",
    },
    ["hectare"] = {
	name1    = "hectare",
	symbol   = "ha",
	usename  = 1,
	utype    = "area",
	scale    = 10000,
	default  = "acre",
    },
    ["Irish acre"] = {
	name1    = "Irish acre",
	symbol   = "Irish&amp;nbsp;acres",
	utype    = "area",
	scale    = 6555.2385024,
	default  = "ha",
	link     = "Acre (Irish)",
    },
    ["m2"] = {
	_name1   = "square metre",
	_name1_us= "square meter",
	_symbol  = "m&lt;sup&gt;2&lt;/sup&gt;",
	prefix_position= 8,
	utype    = "area",
	scale    = 1,
	prefixes = 2,
	default  = "sqft",
	link     = "Square metre",
    },
    ["pondemaat"] = {
	name1    = "pondemaat",
	name2    = "pondemaat",
	symbol   = "pond",
	utype    = "area",
	scale    = 3674.363358816,
	default  = "m2",
	link     = ":nl:pondemaat",
    },
    ["pyeong"] = {
	name2    = "pyeong",
	symbol   = "pyeong",
	usename  = 1,
	utype    = "area",
	scale    = 3.3057851239669422,
	default  = "m2",
    },
    ["rai"] = {
	name2    = "rai",
	symbol   = "rai",
	utype    = "area",
	scale    = 1600,
	default  = "m2",
	link     = "Rai (unit)",
    },
    ["rood"] = {
	symbol   = "rood",
	usename  = 1,
	utype    = "area",
	scale    = 1011.7141056,
	default  = "sqft m2",
	subdivs  = { ["sqperch"] = { 40, default = "m2" } },
	link     = "Rood (unit)",
    },
    ["sqfoot"] = {
	name1    = "square foot",
	name2    = "square foot",
	symbol   = "sq&amp;nbsp;ft",
	utype    = "area",
	scale    = 0.09290304,
	default  = "m2",
    },
    ["sqft"] = {
	name1    = "square foot",
	name2    = "square feet",
	symbol   = "sq&amp;nbsp;ft",
	utype    = "area",
	scale    = 0.09290304,
	default  = "m2",
    },
    ["sqin"] = {
	name1    = "square inch",
	name2    = "square inches",
	symbol   = "sq&amp;nbsp;in",
	utype    = "area",
	scale    = 0.00064516,
	default  = "cm2",
    },
    ["sqmi"] = {
	name1    = "square mile",
	symbol   = "sq&amp;nbsp;mi",
	utype    = "area",
	scale    = 2589988.110336,
	default  = "km2",
    },
    ["sqnmi"] = {
	name1    = "square nautical mile",
	symbol   = "sq&amp;nbsp;nmi",
	utype    = "area",
	scale    = 3429904,
	default  = "km2 sqmi",
	link     = "Nautical mile",
    },
    ["sqperch"] = {
	name2    = "perches",
	symbol   = "perch",
	usename  = 1,
	utype    = "area",
	scale    = 25.29285264,
	default  = "m2",
	link     = "Perch (unit)#Area",
    },
    ["sqverst"] = {
	symbol   = "square verst",
	usename  = 1,
	utype    = "area",
	scale    = 1138062.24,
	default  = "km2 sqmi",
	link     = "Verst",
    },
    ["sqyd"] = {
	name1    = "square yard",
	symbol   = "sq&amp;nbsp;yd",
	utype    = "area",
	scale    = 0.83612736,
	default  = "m2",
    },
    ["tsubo"] = {
	name2    = "tsubo",
	symbol   = "tsubo",
	usename  = 1,
	utype    = "area",
	scale    = 3.3057851239669422,
	default  = "m2",
	link     = "Japanese units of measurement#Area",
    },
    ["acres"] = {
	target   = "acre",
    },
    ["are"] = {
	target   = "a",
    },
    ["decare"] = {
	target   = "daa",
    },
    ["foot2"] = {
	target   = "sqfoot",
    },
    ["ft2"] = {
	target   = "sqft",
    },
    ["in2"] = {
	target   = "sqin",
	symbol   = "in&lt;sup&gt;2&lt;/sup&gt;",
    },
    ["km²"] = {
	target   = "km2",
    },
    ["mi2"] = {
	target   = "sqmi",
    },
    ["million acre"] = {
	target   = "e6acre",
    },
    ["million acres"] = {
	target   = "e6acre",
    },
    ["million hectares"] = {
	target   = "e6ha",
    },
    ["m²"] = {
	target   = "m2",
    },
    ["nmi2"] = {
	target   = "sqnmi",
    },
    ["pond"] = {
	target   = "pondemaat",
    },
    ["sq arp"] = {
	target   = "arpent",
    },
    ["sqkm"] = {
	target   = "km2",
    },
    ["sqm"] = {
	target   = "m2",
    },
    ["square verst"] = {
	target   = "sqverst",
    },
    ["verst2"] = {
	target   = "sqverst",
    },
    ["yd2"] = {
	target   = "sqyd",
    },
    ["m2/ha"] = {
	name1    = "square metre per hectare",
	name1_us = "square meter per hectare",
	name2    = "square metres per hectare",
	name2_us = "square meters per hectare",
	symbol   = "m&lt;sup&gt;2&lt;/sup&gt;/ha",
	utype    = "area per unit area",
	scale    = 0.0001,
	default  = "sqft/acre",
	link     = "Basal area",
    },
    ["sqft/acre"] = {
	name1    = "square foot per acre",
	name2    = "square feet per acre",
	symbol   = "sq&amp;nbsp;ft/acre",
	utype    = "area per unit area",
	scale    = 2.295684113865932e-5,
	default  = "m2/ha",
	link     = "Basal area",
    },
    ["cent"] = {
	name1    = "cent",
	symbol   = "¢",
	utype    = "cent",
	scale    = 1,
	default  = "cent",
	link     = "Cent (currency)",
    },
    ["¢"] = {
	target   = "cent",
    },
    ["A.h"] = {
	name1    = "ampere hour",
	symbol   = "A⋅h",
	utype    = "charge",
	scale    = 3600,
	default  = "coulomb",
    },
    ["coulomb"] = {
	_name1   = "coulomb",
	_symbol  = "C",
	utype    = "charge",
	scale    = 1,
	prefixes = 1,
	default  = "e",
	link     = "Coulomb",
    },
    ["e"] = {
	name1    = "elementary charge",
	symbol   = "''e''",
	utype    = "charge",
	scale    = 1.602176487e-19,
	default  = "coulomb",
    },
    ["g-mol"] = {
	name1    = "gram-mole",
	symbol   = "g&amp;#8209;mol",
	utype    = "chemical amount",
	scale    = 1,
	default  = "lbmol",
	link     = "Mole (unit)",
    },
    ["gmol"] = {
	name1    = "gram-mole",
	symbol   = "gmol",
	utype    = "chemical amount",
	scale    = 1,
	default  = "lbmol",
	link     = "Mole (unit)",
    },
    ["kmol"] = {
	name1    = "kilomole",
	symbol   = "kmol",
	utype    = "chemical amount",
	scale    = 1000,
	default  = "lbmol",
	link     = "Mole (unit)",
    },
    ["lb-mol"] = {
	name1    = "pound-mole",
	symbol   = "lb&amp;#8209;mol",
	utype    = "chemical amount",
	scale    = 453.59237,
	default  = "mol",
	link     = "Mole (unit)#Other units called \"mole\"",
    },
    ["lbmol"] = {
	name1    = "pound-mole",
	symbol   = "lbmol",
	utype    = "chemical amount",
	scale    = 453.59237,
	default  = "mol",
	link     = "Mole (unit)#Other units called \"mole\"",
    },
    ["mol"] = {
	name1    = "mole",
	symbol   = "mol",
	utype    = "chemical amount",
	scale    = 1,
	default  = "lbmol",
	link     = "Mole (unit)",
    },
    ["kgCO2/L"] = {
	name1    = "kilogram per litre",
	name1_us = "kilogram per liter",
	name2    = "kilograms per litre",
	name2_us = "kilograms per liter",
	symbol   = "kg(CO&lt;sub&gt;2&lt;/sub&gt;)/L",
	utype    = "co2 per unit volume",
	scale    = 1000,
	default  = "lbCO2/USgal",
	link     = "Exhaust gas",
    },
    ["lbCO2/USgal"] = {
	name1    = "pound per US gallon",
	name2    = "pounds per US gallon",
	symbol   = "lbCO2/US&amp;nbsp;gal",
	utype    = "co2 per unit volume",
	scale    = 119.82642731689663,
	default  = "kgCO2/L",
	link     = "Exhaust gas",
    },
    ["oz/lb"] = {
	per      = { "oz", "lb" },
	utype    = "concentration",
	default  = "mg/kg",
    },
    ["mg/kg"] = {
	per      = { "mg", "kg" },
	utype    = "concentration",
	default  = "oz/lb",
    },
    ["g/dm3"] = {
	name1    = "gram per cubic decimetre",
	name1_us = "gram per cubic decimeter",
	name2    = "grams per cubic decimetre",
	name2_us = "grams per cubic decimeter",
	symbol   = "g/dm&lt;sup&gt;3&lt;/sup&gt;",
	utype    = "density",
	scale    = 1,
	default  = "kg/m3",
	link     = "Density",
    },
    ["g/L"] = {
	name1    = "gram per litre",
	name1_us = "gram per liter",
	name2    = "grams per litre",
	name2_us = "grams per liter",
	symbol   = "g/L",
	utype    = "density",
	scale    = 1,
	default  = "lb/cuin",
	link     = "Density",
    },
    ["g/mL"] = {
	name1    = "gram per millilitre",
	name1_us = "gram per milliliter",
	name2    = "grams per millilitre",
	name2_us = "grams per milliliter",
	symbol   = "g/mL",
	utype    = "density",
	scale    = 1000,
	default  = "lb/cuin",
	link     = "Density",
    },
    ["g/ml"] = {
	name1    = "gram per millilitre",
	name1_us = "gram per milliliter",
	name2    = "grams per millilitre",
	name2_us = "grams per milliliter",
	symbol   = "g/ml",
	utype    = "density",
	scale    = 1000,
	default  = "lb/cuin",
	link     = "Density",
    },
    ["kg/dm3"] = {
	name1    = "kilogram per cubic decimetre",
	name1_us = "kilogram per cubic decimeter",
	name2    = "kilograms per cubic decimetre",
	name2_us = "kilograms per cubic decimeter",
	symbol   = "kg/dm&lt;sup&gt;3&lt;/sup&gt;",
	utype    = "density",
	scale    = 1000,
	default  = "lb/cuft",
	link     = "Density",
    },
    ["kg/L"] = {
	name1    = "kilogram per litre",
	name1_us = "kilogram per liter",
	name2    = "kilograms per litre",
	name2_us = "kilograms per liter",
	symbol   = "kg/L",
	utype    = "density",
	scale    = 1000,
	default  = "lb/USgal",
	link     = "Density",
    },
    ["kg/l"] = {
	name1    = "kilogram per litre",
	name1_us = "kilogram per liter",
	name2    = "kilograms per litre",
	name2_us = "kilograms per liter",
	symbol   = "kg/l",
	utype    = "density",
	scale    = 1000,
	default  = "lb/USgal",
	link     = "Density",
    },
    ["kg/m3"] = {
	name1    = "kilogram per cubic metre",
	name1_us = "kilogram per cubic meter",
	name2    = "kilograms per cubic metre",
	name2_us = "kilograms per cubic meter",
	symbol   = "kg/m&lt;sup&gt;3&lt;/sup&gt;",
	utype    = "density",
	scale    = 1,
	default  = "lb/cuyd",
	link     = "Density",
    },
    ["lb/cuft"] = {
	name1    = "pound per cubic foot",
	name2    = "pounds per cubic foot",
	symbol   = "lb/cu&amp;nbsp;ft",
	utype    = "density",
	scale    = 16.018463373960142,
	default  = "g/cm3",
	link     = "Density",
    },
    ["lb/cuin"] = {
	name1    = "pound per cubic inch",
	name2    = "pounds per cubic inch",
	symbol   = "lb/cu&amp;nbsp;in",
	utype    = "density",
	scale    = 27679.904710203122,
	default  = "g/cm3",
	link     = "Density",
    },
    ["lb/cuyd"] = {
	name1    = "pound per cubic yard",
	name2    = "pounds per cubic yard",
	symbol   = "lb/cu&amp;nbsp;yd",
	utype    = "density",
	scale    = 0.5932764212577829,
	default  = "kg/m3",
	link     = "Density",
    },
    ["lb/impgal"] = {
	name1    = "pound per imperial gallon",
	name2    = "pounds per imperial gallon",
	symbol   = "lb/imp&amp;nbsp;gal",
	utype    = "density",
	scale    = 99.776372663101697,
	default  = "kg/L",
	link     = "Density",
    },
    ["lb/in3"] = {
	name1    = "pound per cubic inch",
	name2    = "pounds per cubic inch",
	symbol   = "lb/cu&amp;thinsp;in",
	utype    = "density",
	scale    = 27679.904710203122,
	default  = "g/cm3",
	link     = "Density",
    },
    ["lb/U.S.gal"] = {
	name1    = "pound per U.S. gallon",
	name2    = "pounds per U.S. gallon",
	symbol   = "lb/U.S.&amp;nbsp;gal",
	utype    = "density",
	scale    = 119.82642731689663,
	default  = "kg/L",
	link     = "Density",
    },
    ["lb/USbu"] = {
	name1    = "pound per US bushel",
	name2    = "pounds per US bushel",
	symbol   = "lb/US&amp;nbsp;bu",
	utype    = "density",
	scale    = 12.871859780974471,
	default  = "kg/m3",
	link     = "Bushel",
    },
    ["lb/USgal"] = {
	name1    = "pound per US gallon",
	name2    = "pounds per US gallon",
	symbol   = "lb/US&amp;nbsp;gal",
	utype    = "density",
	scale    = 119.82642731689663,
	default  = "kg/L",
	link     = "Density",
    },
    ["lbm/cuin"] = {
	name1    = "pound mass per cubic inch",
	name2    = "pounds mass per cubic inch",
	symbol   = "lbm/cu&amp;thinsp;in",
	utype    = "density",
	scale    = 27679.904710203122,
	default  = "g/cm3",
	link     = "Density",
    },
    ["mg/L"] = {
	name1    = "milligram per litre",
	name1_us = "milligram per liter",
	name2    = "milligrams per litre",
	name2_us = "milligrams per liter",
	symbol   = "mg/L",
	utype    = "density",
	scale    = 0.001,
	default  = "lb/cuin",
	link     = "Density",
    },
    ["oz/cuin"] = {
	name1    = "ounce per cubic inch",
	name2    = "ounces per cubic inch",
	symbol   = "oz/cu&amp;nbsp;in",
	utype    = "density",
	scale    = 1729.9940443876951,
	default  = "g/cm3",
	link     = "Density",
    },
    ["g/cm3"] = {
	per      = { "g", "cm3" },
	utype    = "density",
	default  = "lb/cuin",
    },
    ["g/m3"] = {
	per      = { "g", "m3" },
	utype    = "density",
	default  = "lb/cuyd",
	link     = "Density",
    },
    ["Mg/m3"] = {
	per      = { "Mg", "m3" },
	utype    = "density",
	default  = "lb/cuft",
    },
    ["mg/l"] = {
	per      = { "mg", "l" },
	utype    = "density",
	default  = "oz/cuin",
    },
    ["μg/dL"] = {
	per      = { "μg", "dL" },
	utype    = "density",
	default  = "lb/cuin",
    },
    ["μg/l"] = {
	per      = { "μg", "l" },
	utype    = "density",
	default  = "oz/cuin",
    },
    ["lb/ft3"] = {
	target   = "lb/cuft",
    },
    ["lb/yd3"] = {
	target   = "lb/cuyd",
    },
    ["lbm/in3"] = {
	target   = "lbm/cuin",
    },
    ["mcg/dL"] = {
	target   = "μg/dL",
    },
    ["oz/in3"] = {
	target   = "oz/cuin",
    },
    ["ug/dL"] = {
	target   = "μg/dL",
    },
    ["ug/l"] = {
	target   = "μg/l",
    },
    ["B.O.T.U."] = {
	name1    = "Board of Trade Unit",
	symbol   = "B.O.T.U.",
	utype    = "energy",
	scale    = 3600000,
	default  = "MJ",
	link     = "Watt-hour",
    },
    ["bboe"] = {
	name1    = "barrel of oil equivalent",
	name2    = "barrels of oil equivalent",
	symbol   = "bboe",
	utype    = "energy",
	scale    = 6117863200,
	default  = "GJ",
    },
    ["BOE"] = {
	name1    = "barrel of oil equivalent",
	name2    = "barrels of oil equivalent",
	symbol   = "BOE",
	utype    = "energy",
	scale    = 6117863200,
	default  = "GJ",
    },
    ["BTU"] = {
	name1    = "British thermal unit",
	symbol   = "BTU",
	utype    = "energy",
	scale    = 1055.05585262,
	default  = "kJ",
    },
    ["Btu"] = {
	name1    = "British thermal unit",
	symbol   = "Btu",
	utype    = "energy",
	scale    = 1055.05585262,
	default  = "kJ",
    },
    ["BTU-39F"] = {
	name1    = "British thermal unit (39°F)",
	name2    = "British thermal units (39°F)",
	symbol   = "BTU&lt;sub&gt;39°F&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1059.67,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["Btu-39F"] = {
	name1    = "British thermal unit (39°F)",
	name2    = "British thermal units (39°F)",
	symbol   = "Btu&lt;sub&gt;39°F&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1059.67,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["BTU-59F"] = {
	name1    = "British thermal unit (59°F)",
	name2    = "British thermal units (59°F)",
	symbol   = "BTU&lt;sub&gt;59°F&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1054.804,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["Btu-59F"] = {
	name1    = "British thermal unit (59°F)",
	name2    = "British thermal units (59°F)",
	symbol   = "Btu&lt;sub&gt;59°F&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1054.804,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["BTU-60F"] = {
	name1    = "British thermal unit (60°F)",
	name2    = "British thermal units (60°F)",
	symbol   = "BTU&lt;sub&gt;60°F&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1054.68,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["Btu-60F"] = {
	name1    = "British thermal unit (60°F)",
	name2    = "British thermal units (60°F)",
	symbol   = "Btu&lt;sub&gt;60°F&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1054.68,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["BTU-63F"] = {
	name1    = "British thermal unit (63°F)",
	name2    = "British thermal units (63°F)",
	symbol   = "BTU&lt;sub&gt;63°F&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1054.6,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["Btu-63F"] = {
	name1    = "British thermal unit (63°F)",
	name2    = "British thermal units (63°F)",
	symbol   = "Btu&lt;sub&gt;63°F&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1054.6,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["BTU-ISO"] = {
	name1    = "British thermal unit (ISO)",
	name2    = "British thermal units (ISO)",
	symbol   = "BTU&lt;sub&gt;ISO&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1055.056,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["Btu-ISO"] = {
	target   = "BTU-ISO",
    },
    ["BTU-IT"] = {
	name1    = "British thermal unit (IT)",
	name2    = "British thermal units (IT)",
	symbol   = "BTU&lt;sub&gt;IT&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1055.05585262,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["Btu-IT"] = {
	name1    = "British thermal unit (IT)",
	name2    = "British thermal units (IT)",
	symbol   = "Btu&lt;sub&gt;IT&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1055.05585262,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["BTU-mean"] = {
	name1    = "British thermal unit (mean)",
	name2    = "British thermal units (mean)",
	symbol   = "BTU&lt;sub&gt;mean&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1055.87,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["Btu-mean"] = {
	name1    = "British thermal unit (mean)",
	name2    = "British thermal units (mean)",
	symbol   = "Btu&lt;sub&gt;mean&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1055.87,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["BTU-th"] = {
	name1    = "British thermal unit (thermochemical)",
	name2    = "British thermal units (thermochemical)",
	symbol   = "BTU&lt;sub&gt;th&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1054.35026444,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["Btu-th"] = {
	name1    = "British thermal unit (thermochemical)",
	name2    = "British thermal units (thermochemical)",
	symbol   = "Btu&lt;sub&gt;th&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1054.35026444,
	default  = "kJ",
	link     = "British thermal unit",
    },
    ["Cal"] = {
	name1    = "calorie",
	symbol   = "Cal",
	utype    = "energy",
	scale    = 4184,
	default  = "kJ",
    },
    ["cal"] = {
	name1    = "calorie",
	symbol   = "cal",
	utype    = "energy",
	scale    = 4.184,
	default  = "J",
    },
    ["Cal-15"] = {
	name1    = "Calorie (15°C)",
	name2    = "Calories (15°C)",
	symbol   = "Cal&lt;sub&gt;15&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4185.8,
	default  = "kJ",
	link     = "Calorie",
    },
    ["cal-15"] = {
	name1    = "calorie (15°C)",
	name2    = "calories (15°C)",
	symbol   = "cal&lt;sub&gt;15&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4.1858,
	default  = "J",
	link     = "Calorie",
    },
    ["Cal-IT"] = {
	name1    = "Calorie (International Steam Table)",
	name2    = "Calories (International Steam Table)",
	symbol   = "Cal&lt;sub&gt;IT&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4186.8,
	default  = "kJ",
	link     = "Calorie",
    },
    ["cal-IT"] = {
	name1    = "calorie (International Steam Table)",
	name2    = "calories (International Steam Table)",
	symbol   = "cal&lt;sub&gt;IT&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4.1868,
	default  = "J",
	link     = "Calorie",
    },
    ["Cal-th"] = {
	name1    = "Calorie (thermochemical)",
	name2    = "Calories (thermochemical)",
	symbol   = "Cal&lt;sub&gt;th&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4184,
	default  = "kJ",
	link     = "Calorie",
    },
    ["cal-th"] = {
	name1    = "calorie (thermochemical)",
	name2    = "calories (thermochemical)",
	symbol   = "cal&lt;sub&gt;th&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4.184,
	default  = "J",
	link     = "Calorie",
    },
    ["ccatm"] = {
	name1    = "cubic centimetre-atmosphere",
	name1_us = "cubic centimeter-atmosphere",
	symbol   = "cc⋅atm",
	utype    = "energy",
	scale    = 0.101325,
	default  = "mJ",
	link     = "Atmosphere (unit)",
    },
    ["CHU-IT"] = {
	name1    = "Celsius heat unit (International Table)",
	name2    = "Celsius heat units (International Table)",
	symbol   = "CHU&lt;sub&gt;IT&lt;/sub&gt;",
	utype    = "energy",
	scale    = 1899.100534716,
	default  = "kJ",
	link     = "Conversion of units#Energy",
    },
    ["cm3atm"] = {
	name1    = "cubic centimetre-atmosphere",
	name1_us = "cubic centimeter-atmosphere",
	symbol   = "cm&lt;sup&gt;3&lt;/sup&gt;⋅atm",
	utype    = "energy",
	scale    = 0.101325,
	default  = "mJ",
	link     = "Atmosphere (unit)",
    },
    ["cufootatm"] = {
	name1    = "cubic foot of atmosphere",
	name2    = "cubic foot of atmosphere",
	symbol   = "cu&amp;nbsp;ft&amp;nbsp;atm",
	utype    = "energy",
	scale    = 2869.2044809344,
	default  = "kJ",
	link     = "Atmosphere (unit)",
    },
    ["cufootnaturalgas"] = {
	name1    = "cubic foot of natural gas",
	name2    = "cubic foot of natural gas",
	symbol   = "cuftnaturalgas",
	usename  = 1,
	utype    = "energy",
	scale    = 1055055.85262,
	default  = "MJ",
	link     = "Conversion of units#Energy",
    },
    ["cuftatm"] = {
	name1    = "cubic foot of atmosphere",
	name2    = "cubic feet of atmosphere",
	symbol   = "cu&amp;nbsp;ft&amp;nbsp;atm",
	utype    = "energy",
	scale    = 2869.2044809344,
	default  = "kJ",
	link     = "Atmosphere (unit)",
    },
    ["cuftnaturalgas"] = {
	name1    = "cubic foot of natural gas",
	name2    = "cubic feet of natural gas",
	symbol   = "cuftnaturalgas",
	usename  = 1,
	utype    = "energy",
	scale    = 1055055.85262,
	default  = "MJ",
	link     = "Conversion of units#Energy",
    },
    ["cuydatm"] = {
	name1    = "cubic yard of atmosphere",
	name2    = "cubic yards of atmosphere",
	symbol   = "cu&amp;nbsp;yd&amp;nbsp;atm",
	utype    = "energy",
	scale    = 77468.5209852288,
	default  = "kJ",
	link     = "Atmosphere (unit)",
    },
    ["Eh"] = {
	name1    = "Hartree",
	symbol   = "''E''&lt;sub&gt;h&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4.35974417e-18,
	default  = "eV",
    },
    ["erg"] = {
	symbol   = "erg",
	utype    = "energy",
	scale    = 0.0000001,
	default  = "μJ",
    },
    ["eV"] = {
	name1    = "electronvolt",
	symbol   = "eV",
	utype    = "energy",
	scale    = 1.602176487e-19,
	default  = "aJ",
    },
    ["feV"] = {
	name1    = "femtoelectronvolt",
	symbol   = "feV",
	utype    = "energy",
	scale    = 1.602176487e-34,
	default  = "yJ",
	link     = "Electronvolt",
    },
    ["foe"] = {
	symbol   = "foe",
	utype    = "energy",
	scale    = 1e44,
	default  = "YJ",
	link     = "Foe (unit)",
    },
    ["ftlb"] = {
	name1    = "foot-pound",
	symbol   = "ft⋅lb",
	utype    = "energy",
	alttype  = "torque",
	scale    = 1.3558179483314004,
	default  = "J",
	link     = "Foot-pound (energy)",
    },
    ["ftlb-f"] = {
	name1    = "foot-pound force",
	name2    = "foot-pounds force",
	symbol   = "ft⋅lb&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "energy",
	alttype  = "torque",
	scale    = 1.3558179483314004,
	default  = "J",
	link     = "Foot-pound (energy)",
    },
    ["ftlbf"] = {
	name1    = "foot-pound force",
	name2    = "foot-pounds force",
	symbol   = "ft⋅lbf",
	utype    = "energy",
	alttype  = "torque",
	scale    = 1.3558179483314004,
	default  = "J",
	link     = "Foot-pound (energy)",
    },
    ["ftpdl"] = {
	name1    = "foot-poundal",
	symbol   = "ft⋅pdl",
	utype    = "energy",
	scale    = 0.0421401100938048,
	default  = "J",
    },
    ["GeV"] = {
	name1    = "gigaelectronvolt",
	symbol   = "GeV",
	utype    = "energy",
	scale    = 1.602176487e-10,
	default  = "nJ",
	link     = "Electronvolt",
    },
    ["GLatm"] = {
	name1    = "gigalitre-atmosphere",
	name1_us = "gigaliter-atmosphere",
	symbol   = "GL⋅atm",
	utype    = "energy",
	scale    = 101325000000,
	default  = "GJ",
	link     = "Atmosphere (unit)",
    },
    ["Glatm"] = {
	name1    = "gigalitre-atmosphere",
	name1_us = "gigaliter-atmosphere",
	symbol   = "Gl⋅atm",
	utype    = "energy",
	scale    = 101325000000,
	default  = "GJ",
	link     = "Atmosphere (unit)",
    },
    ["gTNT"] = {
	name2    = "grams of TNT",
	symbol   = "gram of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4184,
	default  = "kJ",
	link     = "TNT equivalent",
    },
    ["Gtoe"] = {
	name1    = "gigatonne of oil equivalent",
	name2    = "gigatonnes of oil equivalent",
	symbol   = "Gtoe",
	utype    = "energy",
	scale    = 4.1868e19,
	default  = "EJ",
	link     = "Tonne of oil equivalent",
    },
    ["GtonTNT"] = {
	name2    = "gigatons of TNT",
	symbol   = "gigaton of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4.184e18,
	default  = "EJ",
	link     = "TNT equivalent",
    },
    ["GtTNT"] = {
	name2    = "gigatonnes of TNT",
	symbol   = "gigatonne of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4.184e18,
	default  = "EJ",
	link     = "TNT equivalent",
    },
    ["GW.h"] = {
	name1    = "gigawatt-hour",
	symbol   = "GW⋅h",
	utype    = "energy",
	scale    = 3.6e12,
	default  = "TJ",
	link     = "Watt-hour",
    },
    ["GWh"] = {
	name1    = "gigawatt-hour",
	symbol   = "GWh",
	utype    = "energy",
	scale    = 3.6e12,
	default  = "TJ",
	link     = "Watt-hour",
    },
    ["hph"] = {
	name1    = "horsepower-hour",
	symbol   = "hp⋅h",
	utype    = "energy",
	scale    = 2684519.537696172792,
	default  = "kWh",
	link     = "Horsepower",
    },
    ["impgalatm"] = {
	name1    = "imperial gallon-atmosphere",
	symbol   = "imp gal⋅atm",
	utype    = "energy",
	scale    = 460.63256925,
	default  = "J",
	link     = "Atmosphere (unit)",
    },
    ["inlb"] = {
	name1    = "inch-pound",
	symbol   = "in⋅lb",
	utype    = "energy",
	alttype  = "torque",
	scale    = 0.1129848290276167,
	default  = "mJ",
	link     = "Foot-pound (energy)",
    },
    ["inlb-f"] = {
	name1    = "inch-pound force",
	name2    = "inch-pounds force",
	symbol   = "in⋅lb&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "energy",
	alttype  = "torque",
	scale    = 0.1129848290276167,
	default  = "mJ",
	link     = "Foot-pound (energy)",
    },
    ["inlbf"] = {
	name1    = "inch-pound force",
	name2    = "inch-pounds force",
	symbol   = "in⋅lbf",
	utype    = "energy",
	alttype  = "torque",
	scale    = 0.1129848290276167,
	default  = "mJ",
	link     = "Foot-pound (energy)",
    },
    ["inoz-f"] = {
	name1    = "inch-ounce force",
	name2    = "inch-ounces force",
	symbol   = "in⋅oz&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "energy",
	alttype  = "torque",
	scale    = 0.00706155181422604375,
	default  = "mJ",
	link     = "Foot-pound (energy)",
    },
    ["inozf"] = {
	name1    = "inch-ounce force",
	name2    = "inch-ounces force",
	symbol   = "in⋅ozf",
	utype    = "energy",
	alttype  = "torque",
	scale    = 0.00706155181422604375,
	default  = "mJ",
	link     = "Foot-pound (energy)",
    },
    ["J"] = {
	_name1   = "joule",
	_symbol  = "J",
	utype    = "energy",
	scale    = 1,
	prefixes = 1,
	default  = "cal",
	link     = "Joule",
    },
    ["kBOE"] = {
	name1    = "kilo barrel of oil equivalent",
	name2    = "kilo barrels of oil equivalent",
	symbol   = "kBOE",
	utype    = "energy",
	scale    = 6.1178632e12,
	default  = "TJ",
	link     = "Barrel of oil equivalent",
    },
    ["kcal"] = {
	name1    = "kilocalorie",
	symbol   = "kcal",
	utype    = "energy",
	scale    = 4184,
	default  = "kJ",
	link     = "Calorie",
    },
    ["kcal-15"] = {
	name1    = "kilocalorie (15°C)",
	name2    = "kilocalories (15°C)",
	symbol   = "kcal&lt;sub&gt;15&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4185.8,
	default  = "kJ",
	link     = "Calorie",
    },
    ["kcal-IT"] = {
	name1    = "kilocalorie (International Steam Table)",
	name2    = "kilocalories (International Steam Table)",
	symbol   = "kcal&lt;sub&gt;IT&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4186.8,
	default  = "kJ",
	link     = "Calorie",
    },
    ["kcal-th"] = {
	name1    = "kilocalorie (thermochemical)",
	name2    = "kilocalories (thermochemical)",
	symbol   = "kcal&lt;sub&gt;th&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4184,
	default  = "kJ",
	link     = "Calorie",
    },
    ["kerg"] = {
	name1    = "kiloerg",
	symbol   = "kerg",
	utype    = "energy",
	scale    = 0.0001,
	default  = "mJ",
	link     = "Erg",
    },
    ["keV"] = {
	name1    = "kiloelectronvolt",
	symbol   = "keV",
	utype    = "energy",
	scale    = 1.602176487e-16,
	default  = "fJ",
	link     = "Electronvolt",
    },
    ["kgTNT"] = {
	name2    = "kilograms of TNT",
	symbol   = "kilogram of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4184000,
	default  = "MJ",
	link     = "TNT equivalent",
    },
    ["kLatm"] = {
	name1    = "kilolitre-atmosphere",
	name1_us = "kiloliter-atmosphere",
	symbol   = "kL⋅atm",
	utype    = "energy",
	scale    = 101325,
	default  = "kJ",
	link     = "Atmosphere (unit)",
    },
    ["klatm"] = {
	name1    = "kilolitre-atmosphere",
	name1_us = "kiloliter-atmosphere",
	symbol   = "kl⋅atm",
	utype    = "energy",
	scale    = 101325,
	default  = "kJ",
	link     = "Atmosphere (unit)",
    },
    ["kt(TNT)"] = {
	name1    = "kilotonne",
	name1_us = "kiloton",
	symbol   = "kt",
	utype    = "energy",
	scale    = 4.184e12,
	default  = "TJ",
	link     = "TNT equivalent",
    },
    ["ktoe"] = {
	name1    = "kilotonne of oil equivalent",
	name2    = "kilotonnes of oil equivalent",
	symbol   = "ktoe",
	utype    = "energy",
	scale    = 4.1868e13,
	default  = "TJ",
	link     = "Tonne of oil equivalent",
    },
    ["ktonTNT"] = {
	name1    = "kiloton of TNT",
	name2    = "kilotons of TNT",
	symbol   = "kt",
	utype    = "energy",
	scale    = 4.184e12,
	default  = "TJ",
	link     = "TNT equivalent",
    },
    ["ktTNT"] = {
	name2    = "kilotonnes of TNT",
	symbol   = "kilotonne of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4.184e12,
	default  = "TJ",
	link     = "TNT equivalent",
    },
    ["kW.h"] = {
	name1    = "kilowatt-hour",
	symbol   = "kW⋅h",
	utype    = "energy",
	scale    = 3600000,
	default  = "MJ",
	link     = "Watt-hour",
    },
    ["kWh"] = {
	name1    = "kilowatt-hour",
	symbol   = "kWh",
	utype    = "energy",
	scale    = 3600000,
	default  = "MJ",
	link     = "Watt-hour",
    },
    ["Latm"] = {
	name1    = "litre-atmosphere",
	name1_us = "liter-atmosphere",
	symbol   = "L⋅atm",
	utype    = "energy",
	scale    = 101.325,
	default  = "J",
	link     = "Atmosphere (unit)",
    },
    ["latm"] = {
	name1    = "litre-atmosphere",
	name1_us = "liter-atmosphere",
	symbol   = "l⋅atm",
	utype    = "energy",
	scale    = 101.325,
	default  = "J",
	link     = "Atmosphere (unit)",
    },
    ["m3atm"] = {
	name1    = "cubic metre-atmosphere",
	name1_us = "cubic meter-atmosphere",
	symbol   = "m&lt;sup&gt;3&lt;/sup&gt;⋅atm",
	utype    = "energy",
	scale    = 101325,
	default  = "kJ",
	link     = "Atmosphere (unit)",
    },
    ["Mcal"] = {
	name1    = "megacalorie",
	symbol   = "Mcal",
	utype    = "energy",
	scale    = 4184000,
	default  = "MJ",
	link     = "Calorie",
    },
    ["mcal"] = {
	name1    = "millicalorie",
	symbol   = "mcal",
	utype    = "energy",
	scale    = 0.004184,
	default  = "mJ",
	link     = "Calorie",
    },
    ["Mcal-15"] = {
	name1    = "megacalorie (15°C)",
	name2    = "megacalories (15°C)",
	symbol   = "Mcal&lt;sub&gt;15&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4185800,
	default  = "MJ",
	link     = "Calorie",
    },
    ["mcal-15"] = {
	name1    = "millicalorie (15°C)",
	name2    = "millicalories (15°C)",
	symbol   = "mcal&lt;sub&gt;15&lt;/sub&gt;",
	utype    = "energy",
	scale    = 0.0041858,
	default  = "mJ",
	link     = "Calorie",
    },
    ["Mcal-IT"] = {
	name1    = "megacalorie (International Steam Table)",
	name2    = "megacalories (International Steam Table)",
	symbol   = "Mcal&lt;sub&gt;IT&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4186800,
	default  = "MJ",
	link     = "Calorie",
    },
    ["mcal-IT"] = {
	name1    = "millicalorie (International Steam Table)",
	name2    = "millicalories (International Steam Table)",
	symbol   = "mcal&lt;sub&gt;IT&lt;/sub&gt;",
	utype    = "energy",
	scale    = 0.0041868,
	default  = "mJ",
	link     = "Calorie",
    },
    ["Mcal-th"] = {
	name1    = "megacalorie (thermochemical)",
	name2    = "megacalories (thermochemical)",
	symbol   = "Mcal&lt;sub&gt;th&lt;/sub&gt;",
	utype    = "energy",
	scale    = 4184000,
	default  = "MJ",
	link     = "Calorie",
    },
    ["mcal-th"] = {
	name1    = "millicalorie (thermochemical)",
	name2    = "millicalories (thermochemical)",
	symbol   = "mcal&lt;sub&gt;th&lt;/sub&gt;",
	utype    = "energy",
	scale    = 0.004184,
	default  = "mJ",
	link     = "Calorie",
    },
    ["Merg"] = {
	name1    = "megaerg",
	symbol   = "Merg",
	utype    = "energy",
	scale    = 0.1,
	default  = "J",
	link     = "Erg",
    },
    ["merg"] = {
	name1    = "millierg",
	symbol   = "merg",
	utype    = "energy",
	scale    = 0.0000000001,
	default  = "μJ",
	link     = "Erg",
    },
    ["MeV"] = {
	name1    = "megaelectronvolt",
	symbol   = "MeV",
	utype    = "energy",
	scale    = 1.602176487e-13,
	default  = "pJ",
	link     = "Electronvolt",
    },
    ["meV"] = {
	name1    = "millielectronvolt",
	symbol   = "meV",
	utype    = "energy",
	scale    = 1.602176487e-22,
	default  = "zJ",
	link     = "Electronvolt",
    },
    ["MLatm"] = {
	name1    = "megalitre-atmosphere",
	name1_us = "megaliter-atmosphere",
	symbol   = "ML⋅atm",
	utype    = "energy",
	scale    = 101325000,
	default  = "MJ",
	link     = "Atmosphere (unit)",
    },
    ["Mlatm"] = {
	name1    = "megalitre-atmosphere",
	name1_us = "megaliter-atmosphere",
	symbol   = "Ml⋅atm",
	utype    = "energy",
	scale    = 101325000,
	default  = "MJ",
	link     = "Atmosphere (unit)",
    },
    ["mLatm"] = {
	name1    = "millilitre-atmosphere",
	name1_us = "milliliter-atmosphere",
	symbol   = "L⋅atm",
	utype    = "energy",
	scale    = 0.101325,
	default  = "mJ",
	link     = "Atmosphere (unit)",
    },
    ["mlatm"] = {
	name1    = "millilitre-atmosphere",
	name1_us = "milliliter-atmosphere",
	symbol   = "l⋅atm",
	utype    = "energy",
	scale    = 0.101325,
	default  = "mJ",
	link     = "Atmosphere (unit)",
    },
    ["MMBtu"] = {
	name1    = "million British thermal units",
	name2    = "million British thermal units",
	symbol   = "MMBtu",
	utype    = "energy",
	scale    = 1055055852.62,
	default  = "GJ",
	link     = "British thermal unit",
    },
    ["Mt(TNT)"] = {
	name1    = "megatonne",
	name1_us = "megaton",
	symbol   = "Mt",
	utype    = "energy",
	scale    = 4.184e15,
	default  = "PJ",
	link     = "TNT equivalent",
    },
    ["Mtoe"] = {
	name1    = "megatonne of oil equivalent",
	name2    = "megatonnes of oil equivalent",
	symbol   = "Mtoe",
	utype    = "energy",
	scale    = 4.1868e16,
	default  = "PJ",
	link     = "Tonne of oil equivalent",
    },
    ["MtonTNT"] = {
	name1    = "megaton of TNT",
	name2    = "megatons of TNT",
	symbol   = "Mt",
	utype    = "energy",
	scale    = 4.184e15,
	default  = "PJ",
	link     = "TNT equivalent",
    },
    ["mtonTNT"] = {
	name2    = "millitons of TNT",
	symbol   = "milliton of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4184000,
	default  = "MJ",
	link     = "TNT equivalent",
    },
    ["MtTNT"] = {
	name2    = "megatonnes of TNT",
	symbol   = "megatonne of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4.184e15,
	default  = "PJ",
	link     = "TNT equivalent",
    },
    ["mtTNT"] = {
	name2    = "millitonnes of TNT",
	symbol   = "millitonne of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4184000,
	default  = "MJ",
	link     = "TNT equivalent",
    },
    ["MW.h"] = {
	name1    = "megawatt-hour",
	symbol   = "MW⋅h",
	utype    = "energy",
	scale    = 3600000000,
	default  = "GJ",
	link     = "Watt-hour",
    },
    ["mW.h"] = {
	name1    = "milliwatt-hour",
	symbol   = "mW⋅h",
	utype    = "energy",
	scale    = 3.6,
	default  = "J",
	link     = "Watt-hour",
    },
    ["MWh"] = {
	name1    = "megawatt-hour",
	symbol   = "MWh",
	utype    = "energy",
	scale    = 3600000000,
	default  = "GJ",
	link     = "Watt-hour",
    },
    ["mWh"] = {
	name1    = "milliwatt-hour",
	symbol   = "mWh",
	utype    = "energy",
	scale    = 3.6,
	default  = "J",
	link     = "Watt-hour",
    },
    ["neV"] = {
	name1    = "nanoelectronvolt",
	symbol   = "neV",
	utype    = "energy",
	scale    = 1.602176487e-28,
	default  = "yJ",
	link     = "Electronvolt",
    },
    ["PeV"] = {
	name1    = "petaelectronvolt",
	symbol   = "PeV",
	utype    = "energy",
	scale    = 0.0001602176487,
	default  = "mJ",
	link     = "Electronvolt",
    },
    ["peV"] = {
	name1    = "picoelectronvolt",
	symbol   = "peV",
	utype    = "energy",
	scale    = 1.602176487e-31,
	default  = "yJ",
	link     = "Electronvolt",
    },
    ["PSh"] = {
	name1    = "Pferdestärkenstunde",
	symbol   = "PSh",
	utype    = "energy",
	scale    = 2647795.5,
	default  = "kWh",
    },
    ["quad"] = {
	name1    = "quadrillion British thermal units",
	name2    = "quadrillion British thermal units",
	symbol   = "quad",
	utype    = "energy",
	scale    = 1.054804e18,
	default  = "EJ",
	link     = "Quad (unit)",
    },
    ["Ry"] = {
	name1    = "rydberg",
	symbol   = "Ry",
	utype    = "energy",
	scale    = 2.1798741e-18,
	default  = "eV",
	link     = "Rydberg constant",
    },
    ["scc"] = {
	name1    = "standard cubic centimetre",
	name1_us = "standard cubic centimeter",
	symbol   = "scc",
	utype    = "energy",
	scale    = 0.101325,
	default  = "mJ",
	link     = "Atmosphere (unit)",
    },
    ["scf"] = {
	name1    = "standard cubic foot",
	name2    = "standard cubic feet",
	symbol   = "scf",
	utype    = "energy",
	scale    = 2869.2044809344,
	default  = "kJ",
	link     = "Atmosphere (unit)",
    },
    ["scfoot"] = {
	name1    = "standard cubic foot",
	name2    = "standard cubic foot",
	symbol   = "scf",
	utype    = "energy",
	scale    = 2869.2044809344,
	default  = "kJ",
	link     = "Atmosphere (unit)",
    },
    ["scy"] = {
	name1    = "standard cubic yard",
	symbol   = "scy",
	utype    = "energy",
	scale    = 77468.5209852288,
	default  = "kJ",
	link     = "Atmosphere (unit)",
    },
    ["sl"] = {
	name1    = "standard litre",
	name1_us = "standard liter",
	symbol   = "sl",
	utype    = "energy",
	scale    = 101.325,
	default  = "J",
	link     = "Atmosphere (unit)",
    },
    ["t(TNT)"] = {
	name1    = "tonne",
	name1_us = "ton",
	symbol   = "t",
	utype    = "energy",
	scale    = 4184000000,
	default  = "GJ",
	link     = "TNT equivalent",
    },
    ["TeV"] = {
	name1    = "teraelectronvolt",
	symbol   = "TeV",
	utype    = "energy",
	scale    = 1.602176487e-7,
	default  = "μJ",
	link     = "Electronvolt",
    },
    ["th"] = {
	name1    = "thermie",
	symbol   = "th",
	utype    = "energy",
	scale    = 4186800,
	default  = "MJ",
	link     = "Conversion of units#Energy",
    },
    ["thm-EC"] = {
	name1    = "therm (EC)",
	name2    = "therms (EC)",
	symbol   = "thm (EC)",
	utype    = "energy",
	scale    = 105506000,
	default  = "MJ",
	link     = "Therm",
    },
    ["thm-UK"] = {
	name1    = "therm (UK)",
	name2    = "therms (UK)",
	symbol   = "thm (UK)",
	utype    = "energy",
	scale    = 105505585.257348,
	default  = "MJ",
	link     = "Therm",
    },
    ["thm-US"] = {
	name1    = "therm (US)",
	name1_us = "therm (U.S.)",
	name2    = "therms (US)",
	name2_us = "therms (U.S.)",
	symbol   = "thm (US)",
	sym_us   = "thm (U.S.)",
	utype    = "energy",
	scale    = 105480400,
	default  = "MJ",
	link     = "Therm",
    },
    ["toe"] = {
	name1    = "tonne of oil equivalent",
	name2    = "tonnes of oil equivalent",
	symbol   = "toe",
	utype    = "energy",
	scale    = 41868000000,
	default  = "GJ",
    },
    ["tonTNT"] = {
	name2    = "tons of TNT",
	symbol   = "ton of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4184000000,
	default  = "GJ",
	link     = "TNT equivalent",
    },
    ["tTNT"] = {
	name2    = "tonnes of TNT",
	symbol   = "tonne of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4184000000,
	default  = "GJ",
	link     = "TNT equivalent",
    },
    ["TtonTNT"] = {
	name2    = "teratons of TNT",
	symbol   = "teraton of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4.184e21,
	default  = "ZJ",
	link     = "TNT equivalent",
    },
    ["TtTNT"] = {
	name2    = "teratonnes of TNT",
	symbol   = "teratonne of TNT",
	usename  = 1,
	utype    = "energy",
	scale    = 4.184e21,
	default  = "ZJ",
	link     = "TNT equivalent",
    },
    ["TW.h"] = {
	name1    = "terawatt-hour",
	symbol   = "TW⋅h",
	utype    = "energy",
	scale    = 3.6e15,
	default  = "PJ",
	link     = "Watt-hour",
    },
    ["TWh"] = {
	name1    = "terawatt-hour",
	symbol   = "TWh",
	utype    = "energy",
	scale    = 3.6e15,
	default  = "PJ",
	link     = "Watt-hour",
    },
    ["USgalatm"] = {
	name1    = "US gallon-atmosphere",
	name1_us = "U.S. gallon-atmosphere",
	symbol   = "US&amp;nbsp;gal⋅atm",
	sym_us   = "U.S.&amp;nbsp;gal⋅atm",
	utype    = "energy",
	scale    = 383.5568490138,
	default  = "J",
	link     = "Atmosphere (unit)",
    },
    ["W.h"] = {
	name1    = "watt-hour",
	symbol   = "W⋅h",
	utype    = "energy",
	scale    = 3600,
	default  = "kJ",
    },
    ["Wh"] = {
	name1    = "watt-hour",
	symbol   = "Wh",
	utype    = "energy",
	scale    = 3600,
	default  = "kJ",
    },
    ["μerg"] = {
	name1    = "microerg",
	symbol   = "μerg",
	utype    = "energy",
	scale    = 1e-13,
	default  = "nJ",
	link     = "Erg",
    },
    ["μeV"] = {
	name1    = "microelectronvolt",
	symbol   = "μeV",
	utype    = "energy",
	scale    = 1.602176487e-25,
	default  = "yJ",
	link     = "Electronvolt",
    },
    ["μW.h"] = {
	name1    = "microwatt-hour",
	symbol   = "μW⋅h",
	utype    = "energy",
	scale    = 0.0036,
	default  = "mJ",
	link     = "Watt-hour",
    },
    ["μWh"] = {
	name1    = "microwatt-hour",
	symbol   = "μWh",
	utype    = "energy",
	scale    = 0.0036,
	default  = "mJ",
	link     = "Watt-hour",
    },
    ["-kW.h"] = {
	target   = "kW.h",
	link     = "Kilowatt hour",
    },
    ["btu"] = {
	target   = "BTU",
    },
    ["Calorie"] = {
	target   = "Cal",
    },
    ["ft.lbf"] = {
	target   = "ftlbf",
    },
    ["ft·lbf"] = {
	target   = "ftlbf",
    },
    ["g-cal-15"] = {
	target   = "cal-15",
    },
    ["g-cal-IT"] = {
	target   = "cal-IT",
    },
    ["g-cal-th"] = {
	target   = "cal-th",
    },
    ["g-kcal-15"] = {
	target   = "kcal-15",
    },
    ["g-kcal-IT"] = {
	target   = "kcal-IT",
    },
    ["g-kcal-th"] = {
	target   = "kcal-th",
    },
    ["g-Mcal-15"] = {
	target   = "Mcal-15",
    },
    ["g-mcal-15"] = {
	target   = "mcal-15",
    },
    ["g-Mcal-IT"] = {
	target   = "Mcal-IT",
    },
    ["g-mcal-IT"] = {
	target   = "mcal-IT",
    },
    ["g-Mcal-th"] = {
	target   = "Mcal-th",
    },
    ["g-mcal-th"] = {
	target   = "mcal-th",
    },
    ["GW-h"] = {
	target   = "GW.h",
    },
    ["GW·h"] = {
	target   = "GW.h",
    },
    ["Hartree"] = {
	target   = "Eh",
    },
    ["hp.h"] = {
	target   = "hph",
    },
    ["in.lb-f"] = {
	target   = "inlb-f",
    },
    ["in.lbf"] = {
	target   = "inlbf",
    },
    ["in.oz-f"] = {
	target   = "inoz-f",
    },
    ["in.ozf"] = {
	target   = "inozf",
    },
    ["kbboe"] = {
	target   = "kBOE",
	symbol   = "kbboe",
    },
    ["kg-cal-15"] = {
	target   = "Cal-15",
    },
    ["kg-cal-IT"] = {
	target   = "Cal-IT",
    },
    ["kg-cal-th"] = {
	target   = "Cal-th",
    },
    ["kW-h"] = {
	target   = "kW.h",
    },
    ["kW·h"] = {
	target   = "kW.h",
    },
    ["MW-h"] = {
	target   = "MW.h",
    },
    ["mW-h"] = {
	target   = "mW.h",
    },
    ["MW·h"] = {
	target   = "MW.h",
    },
    ["TW-h"] = {
	target   = "TW.h",
    },
    ["U.S.galatm"] = {
	target   = "USgalatm",
	sp_us    = true,
    },
    ["uerg"] = {
	target   = "μerg",
    },
    ["ueV"] = {
	target   = "μeV",
    },
    ["usgalatm"] = {
	target   = "USgalatm",
    },
    ["uW-h"] = {
	target   = "μW.h",
    },
    ["uW.h"] = {
	target   = "μW.h",
    },
    ["uWh"] = {
	target   = "μWh",
    },
    ["W-h"] = {
	target   = "W.h",
    },
    ["eVpar"] = {
	_name1   = "electronvolt",
	_symbol  = "eV",
	utype    = "energy per chemical amount",
	scale    = 96485.329522144166,
	prefixes = 1,
	default  = "kcal/mol",
	link     = "Electronvolt",
    },
    ["kcal/mol"] = {
	per      = { "kcal", "mol" },
	utype    = "energy per chemical amount",
	default  = "kJ/mol",
	link     = "Kilocalorie per mole",
    },
    ["kJ/mol"] = {
	per      = { "kJ", "mol" },
	utype    = "energy per chemical amount",
	default  = "kcal/mol",
	link     = "Joule per mole",
    },
    ["kWh/100 km"] = {
	name1    = "kilowatt-hour per 100 kilometres",
	name1_us = "kilowatt-hour per 100 kilometers",
	name2    = "kilowatt-hours per 100 kilometres",
	name2_us = "kilowatt-hours per 100 kilometers",
	symbol   = "kW⋅h/100&amp;nbsp;km",
	utype    = "energy per unit length",
	scale    = 36,
	default  = "MJ/km kWh/mi",
	link     = "Watt-hour",
    },
    ["kWh/100 mi"] = {
	name1    = "kilowatt-hour per 100 miles",
	name2    = "kilowatt-hours per 100 miles",
	symbol   = "kW⋅h/100&amp;nbsp;mi",
	utype    = "energy per unit length",
	scale    = 22.3694,
	default  = "mpge",
	link     = "Miles per gallon gasoline equivalent",
    },
    ["MJ/100 km"] = {
	name1    = "megajoule per 100 kilometres",
	name1_us = "megajoule per 100 kilometers",
	name2    = "megajoules per 100 kilometres",
	name2_us = "megajoules per 100 kilometers",
	symbol   = "MJ/100&amp;nbsp;km",
	utype    = "energy per unit length",
	scale    = 10,
	default  = "BTU/mi",
	link     = "British thermal unit",
    },
    ["mpge"] = {
	name1    = "mile per gallon gasoline equivalent",
	name2    = "miles per gallon gasoline equivalent",
	symbol   = "mpg&amp;#8209;e",
	utype    = "energy per unit length",
	scale    = 13e-6,
	invert   = -1,
	iscomplex= true,
	default  = "kWh/100 mi",
	link     = "Miles per gallon gasoline equivalent",
    },
    ["BTU/mi"] = {
	per      = { "BTU", "mi" },
	utype    = "energy per unit length",
	default  = "v &gt; 1525 ! M ! k ! J/km",
    },
    ["kJ/km"] = {
	per      = { "kJ", "km" },
	utype    = "energy per unit length",
	default  = "BTU/mi",
    },
    ["kWh/km"] = {
	per      = { "-kW.h", "km" },
	utype    = "energy per unit length",
	default  = "MJ/km kWh/mi",
    },
    ["kWh/mi"] = {
	per      = { "-kW.h", "mi" },
	utype    = "energy per unit length",
	default  = "kWh/km MJ/km",
    },
    ["MJ/km"] = {
	per      = { "MJ", "km" },
	utype    = "energy per unit length",
	default  = "BTU/mi",
    },
    ["mpg-e"] = {
	target   = "mpge",
    },
    ["BTU/lb"] = {
	name1    = "British thermal unit per pound",
	name2    = "British thermal units per pound",
	symbol   = "BTU/lb",
	utype    = "energy per unit mass",
	scale    = 429.92261414790346,
	default  = "kJ/kg",
	link     = "British thermal unit",
    },
    ["cal/g"] = {
	name1    = "calorie per gram",
	name2    = "calories per gram",
	symbol   = "cal/g",
	utype    = "energy per unit mass",
	scale    = 4184,
	default  = "J/g",
    },
    ["GJ/kg"] = {
	name1    = "gigajoule per kilogram",
	name2    = "gigajoules per kilogram",
	symbol   = "GJ/kg",
	utype    = "energy per unit mass",
	scale    = 1e9,
	default  = "ktTNT/t",
	link     = "Specific energy",
    },
    ["J/g"] = {
	name1    = "joule per gram",
	name2    = "joules per gram",
	symbol   = "J/g",
	utype    = "energy per unit mass",
	scale    = 1000,
	default  = "kcal/g",
	link     = "Specific energy",
    },
    ["kcal/g"] = {
	name1    = "kilocalorie per gram",
	name2    = "kilocalories per gram",
	symbol   = "kcal/g",
	utype    = "energy per unit mass",
	scale    = 4184000,
	default  = "kJ/g",
    },
    ["kJ/g"] = {
	name1    = "kilojoule per gram",
	name2    = "kilojoules per gram",
	symbol   = "kJ/g",
	utype    = "energy per unit mass",
	scale    = 1000000,
	default  = "kcal/g",
	link     = "Specific energy",
    },
    ["kJ/kg"] = {
	name1    = "kilojoule per kilogram",
	name2    = "kilojoules per kilogram",
	symbol   = "kJ/kg",
	utype    = "energy per unit mass",
	scale    = 1000,
	default  = "BTU/lb",
	link     = "Specific energy",
    },
    ["ktonTNT/MT"] = {
	name2    = "kilotons of TNT per metric ton",
	symbol   = "kiloton of TNT per metric ton",
	usename  = 1,
	utype    = "energy per unit mass",
	scale    = 4184000000,
	default  = "GJ/kg",
	link     = "TNT equivalent",
    },
    ["ktTNT/t"] = {
	name2    = "kilotonnes of TNT per tonne",
	symbol   = "kilotonne of TNT per tonne",
	usename  = 1,
	utype    = "energy per unit mass",
	scale    = 4184000000,
	default  = "GJ/kg",
	link     = "TNT equivalent",
    },
    ["MtonTNT/MT"] = {
	name2    = "megatons of TNT per metric ton",
	symbol   = "megaton of TNT per metric ton",
	usename  = 1,
	utype    = "energy per unit mass",
	scale    = 4.184e12,
	default  = "TJ/kg",
	link     = "TNT equivalent",
    },
    ["MtTNT/MT"] = {
	name2    = "megatonnes of TNT per tonne",
	symbol   = "megatonne of TNT per tonne",
	usename  = 1,
	utype    = "energy per unit mass",
	scale    = 4.184e12,
	default  = "TJ/kg",
	link     = "TNT equivalent",
    },
    ["TJ/kg"] = {
	name1    = "terajoule per kilogram",
	name2    = "terajoules per kilogram",
	symbol   = "TJ/kg",
	utype    = "energy per unit mass",
	scale    = 1e12,
	default  = "MtTNT/MT",
	link     = "Specific energy",
    },
    ["Cal/g"] = {
	per      = { "Cal", "g" },
	utype    = "energy per unit mass",
	default  = "kJ/g",
    },
    ["BTU/cuft"] = {
	per      = { "BTU", "cuft" },
	utype    = "energy per unit volume",
	default  = "kJ/L",
    },
    ["Cal/12USoz(mL)serve"] = {
	per      = { "Cal", "-12USoz(mL)serve" },
	utype    = "energy per unit volume",
	default  = "kJ/L",
    },
    ["Cal/12USoz(ml)serve"] = {
	per      = { "Cal", "-12USoz(ml)serve" },
	utype    = "energy per unit volume",
	default  = "kJ/l",
    },
    ["Cal/12USozserve"] = {
	per      = { "Cal", "-12USozserve" },
	utype    = "energy per unit volume",
	default  = "kJ/L",
    },
    ["Cal/USoz"] = {
	per      = { "Cal", "USoz" },
	utype    = "energy per unit volume",
	default  = "kJ/ml",
    },
    ["kJ/L"] = {
	per      = { "kJ", "L" },
	utype    = "energy per unit volume",
	default  = "BTU/cuft",
    },
    ["kJ/l"] = {
	per      = { "kJ", "l" },
	utype    = "energy per unit volume",
	default  = "BTU/cuft",
    },
    ["kJ/ml"] = {
	per      = { "kJ", "ml" },
	utype    = "energy per unit volume",
	default  = "Cal/USoz",
    },
    ["MJ/m3"] = {
	per      = { "MJ", "m3" },
	utype    = "energy per unit volume",
	default  = "BTU/cuft",
    },
    ["Sv"] = {
	_name1   = "sievert",
	_symbol  = "Sv",
	utype    = "equivalent radiation dose",
	scale    = 1,
	prefixes = 1,
	default  = "rem",
	link     = "Sievert",
    },
    ["rem"] = {
	_name1   = "rem",
	_symbol  = "rem",
	utype    = "equivalent radiation dose",
	scale    = 0.01,
	prefixes = 1,
	default  = "Sv",
	link     = "Roentgen equivalent man",
    },
    ["g/km"] = {
	name1    = "gram per kilometre",
	name1_us = "gram per kilometer",
	name2    = "grams per kilometre",
	name2_us = "grams per kilometer",
	symbol   = "g/km",
	utype    = "exhaust emission",
	scale    = 1e-6,
	default  = "oz/mi",
	link     = "Exhaust gas",
    },
    ["g/mi"] = {
	name1    = "gram per mile",
	name2    = "grams per mile",
	symbol   = "g/mi",
	utype    = "exhaust emission",
	scale    = 6.2137119223733397e-7,
	default  = "g/km",
	link     = "Exhaust gas",
    },
    ["gCO2/km"] = {
	name1    = "gram of CO&lt;sub&gt;2&lt;/sub&gt; per kilometre",
	name1_us = "gram of CO&lt;sub&gt;2&lt;/sub&gt; per kilometer",
	name2    = "grams of CO&lt;sub&gt;2&lt;/sub&gt; per kilometre",
	name2_us = "grams of CO&lt;sub&gt;2&lt;/sub&gt; per kilometer",
	symbol   = "g(CO&lt;sub&gt;2&lt;/sub&gt;)/km",
	utype    = "exhaust emission",
	scale    = 1e-6,
	default  = "ozCO2/mi",
	link     = "Exhaust gas",
    },
    ["gCO2/mi"] = {
	name1    = "gram of CO&lt;sub&gt;2&lt;/sub&gt; per mile",
	name2    = "grams of CO&lt;sub&gt;2&lt;/sub&gt; per mile",
	symbol   = "g(CO&lt;sub&gt;2&lt;/sub&gt;)/mi",
	utype    = "exhaust emission",
	scale    = 6.2137119223733397e-7,
	default  = "gCO2/km",
	link     = "Exhaust gas",
    },
    ["kg/km"] = {
	name1    = "kilogram per kilometre",
	name1_us = "kilogram per kilometer",
	name2    = "kilograms per kilometre",
	name2_us = "kilograms per kilometer",
	symbol   = "kg/km",
	utype    = "exhaust emission",
	scale    = 0.001,
	default  = "lb/mi",
	link     = "Exhaust gas",
    },
    ["kgCO2/km"] = {
	name1    = "kilogram of CO&lt;sub&gt;2&lt;/sub&gt; per kilometre",
	name1_us = "kilogram of CO&lt;sub&gt;2&lt;/sub&gt; per kilometer",
	name2    = "kilograms of CO&lt;sub&gt;2&lt;/sub&gt; per kilometre",
	name2_us = "kilograms of CO&lt;sub&gt;2&lt;/sub&gt; per kilometer",
	symbol   = "kg(CO&lt;sub&gt;2&lt;/sub&gt;)/km",
	utype    = "exhaust emission",
	scale    = 0.001,
	default  = "lbCO2/mi",
	link     = "Exhaust gas",
    },
    ["lb/mi"] = {
	name1    = "pound per mile",
	name2    = "pounds per mile",
	symbol   = "lb/mi",
	utype    = "exhaust emission",
	scale    = 0.00028184923173665794,
	default  = "kg/km",
	link     = "Exhaust gas",
    },
    ["lbCO2/mi"] = {
	name1    = "pound of CO&lt;sub&gt;2&lt;/sub&gt; per mile",
	name2    = "pounds of CO&lt;sub&gt;2&lt;/sub&gt; per mile",
	symbol   = "lb(CO&lt;sub&gt;2&lt;/sub&gt;)/mi",
	utype    = "exhaust emission",
	scale    = 0.00028184923173665794,
	default  = "kgCO2/km",
	link     = "Exhaust gas",
    },
    ["oz/mi"] = {
	name1    = "ounce per mile",
	name2    = "ounces per mile",
	symbol   = "oz/mi",
	utype    = "exhaust emission",
	scale    = 1.7615576983541121e-5,
	default  = "g/km",
	link     = "Exhaust gas",
    },
    ["ozCO2/mi"] = {
	name1    = "ounce of CO&lt;sub&gt;2&lt;/sub&gt; per mile",
	name2    = "ounces of CO&lt;sub&gt;2&lt;/sub&gt; per mile",
	symbol   = "oz(CO&lt;sub&gt;2&lt;/sub&gt;)/mi",
	utype    = "exhaust emission",
	scale    = 1.7615576983541121e-5,
	default  = "gCO2/km",
	link     = "Exhaust gas",
    },
    ["cuft/a"] = {
	name1    = "cubic foot per annum",
	name2    = "cubic feet per annum",
	symbol   = "cu&amp;nbsp;ft/a",
	utype    = "flow",
	scale    = 8.9730672142368242e-10,
	default  = "m3/a",
	link     = "Cubic foot per second",
    },
    ["cuft/d"] = {
	name1    = "cubic foot per day",
	name2    = "cubic feet per day",
	symbol   = "cu&amp;nbsp;ft/d",
	utype    = "flow",
	scale    = 3.2774128000000003e-7,
	default  = "m3/d",
	link     = "Cubic foot per second",
    },
    ["cuft/h"] = {
	name1    = "cubic foot per hour",
	name2    = "cubic feet per hour",
	symbol   = "cu&amp;nbsp;ft/h",
	utype    = "flow",
	scale    = 7.8657907200000004e-6,
	default  = "m3/h",
	link     = "Cubic foot per second",
    },
    ["cuft/min"] = {
	name1    = "cubic foot per minute",
	name2    = "cubic feet per minute",
	symbol   = "cu&amp;nbsp;ft/min",
	utype    = "flow",
	scale    = 0.00047194744319999999,
	default  = "m3/min",
	link     = "Cubic foot#cubic foot per second",
    },
    ["cuft/s"] = {
	name1    = "cubic foot per second",
	name2    = "cubic feet per second",
	symbol   = "cu&amp;nbsp;ft/s",
	utype    = "flow",
	scale    = 28316846592e-12,
	default  = "m3/s",
    },
    ["cumi/a"] = {
	name1    = "cubic mile per annum",
	name2    = "cubic miles per annum",
	symbol   = "cu&amp;nbsp;mi/a",
	utype    = "flow",
	scale    = 132.08171170940057,
	default  = "km3/a",
	link     = "Cubic foot per second",
    },
    ["cuyd/h"] = {
	name1    = "cubic yard per hour",
	name2    = "cubic yards per hour",
	symbol   = "cuyd/h",
	utype    = "flow",
	scale    = 0.00021237634944000001,
	default  = "m3/h",
	link     = "Cubic foot per minute",
    },
    ["cuyd/s"] = {
	name1    = "cubic yard per second",
	name2    = "cubic yards per second",
	symbol   = "cu&amp;nbsp;yd/s",
	utype    = "flow",
	scale    = 0.76455485798400002,
	default  = "m3/s",
    },
    ["Goilbbl/a"] = {
	name1    = "billion barrels per year",
	name2    = "billion barrels per year",
	symbol   = "Gbbl/a",
	utype    = "flow",
	scale    = 5.0380033629933836,
	default  = "v * 1.58987294928 &lt; 10 ! e6 ! e9 ! m3/a",
	link     = "Barrel per day",
    },
    ["impgal/h"] = {
	name1    = "imperial gallon per hour",
	name2    = "imperial gallons per hour",
	symbol   = "imp&amp;nbsp;gal/h",
	utype    = "flow",
	scale    = 1.2628027777777779e-6,
	default  = "m3/h",
	link     = "Gallon",
    },
    ["impgal/min"] = {
	name1    = "imperial gallon per minute",
	name2    = "imperial gallons per minute",
	symbol   = "imp gal/min",
	utype    = "flow",
	scale    = 7.5768166666666671e-5,
	default  = "m3/s",
	link     = "Gallon",
    },
    ["impgal/s"] = {
	name1    = "imperial gallon per second",
	name2    = "imperial gallons per second",
	symbol   = "impgal/s",
	utype    = "flow",
	scale    = 0.00454609,
	default  = "m3/s",
	link     = "Imperial gallons per second",
    },
    ["km3/a"] = {
	name1    = "cubic kilometre per annum",
	name1_us = "cubic kilometer per annum",
	name2    = "cubic kilometres per annum",
	name2_us = "cubic kilometers per annum",
	symbol   = "km&lt;sup&gt;3&lt;/sup&gt;/a",
	utype    = "flow",
	scale    = 31.68808781402895,
	default  = "cumi/a",
	link     = "Cubic metre per second",
    },
    ["km3/d"] = {
	name1    = "cubic kilometre per day",
	name1_us = "cubic kilometer per day",
	name2    = "cubic kilometres per day",
	name2_us = "cubic kilometers per day",
	symbol   = "km&lt;sup&gt;3&lt;/sup&gt;/d",
	utype    = "flow",
	scale    = 11574.074074074075,
	default  = "cuft/d",
	link     = "Cubic metre per second",
    },
    ["koilbbl/a"] = {
	name1    = "thousand barrels per year",
	name2    = "thousand barrels per year",
	symbol   = "kbbl/a",
	utype    = "flow",
	scale    = 5.0380033629933841e-6,
	default  = "v * 1.58987294928 &lt; 10 ! ! e3 ! m3/a",
	link     = "Barrel per day",
    },
    ["koilbbl/d"] = {
	name1    = "thousand barrels per day",
	name2    = "thousand barrels per day",
	symbol   = "kbbl/d",
	utype    = "flow",
	scale    = 0.0018401307283333335,
	default  = "v * 1.58987294928 &lt; 10 ! ! e3 ! m3/d",
	link     = "Barrel per day",
    },
    ["L/h"] = {
	name1    = "litre per hour",
	name1_us = "liter per hour",
	name2    = "litres per hour",
	name2_us = "liters per hour",
	symbol   = "L/h",
	utype    = "flow",
	scale    = 2.7777777777777776e-7,
	default  = "impgal/h USgal/h",
	link     = "Cubic metre per second",
    },
    ["L/min"] = {
	name1    = "litre per minute",
	name1_us = "liter per minute",
	name2    = "litres per minute",
	name2_us = "liters per minute",
	symbol   = "L/min",
	utype    = "flow",
	scale    = 1.6666666666666667e-5,
	default  = "impgal/min USgal/min",
	link     = "Cubic metre per second",
    },
    ["L/s"] = {
	name1    = "litre per second",
	name1_us = "liter per second",
	name2    = "litres per second",
	name2_us = "liters per second",
	symbol   = "L/s",
	utype    = "flow",
	scale    = 0.001,
	default  = "cuft/s",
	link     = "Cubic metre per second",
    },
    ["m3/a"] = {
	name1    = "cubic metre per annum",
	name1_us = "cubic meter per annum",
	name2    = "cubic metres per annum",
	name2_us = "cubic meters per annum",
	symbol   = "m&lt;sup&gt;3&lt;/sup&gt;/a",
	utype    = "flow",
	scale    = 3.1688087814028947e-8,
	default  = "cuft/a",
	link     = "Cubic metre per second",
    },
    ["m3/d"] = {
	name1    = "cubic metre per day",
	name1_us = "cubic meter per day",
	name2    = "cubic metres per day",
	name2_us = "cubic meters per day",
	symbol   = "m&lt;sup&gt;3&lt;/sup&gt;/d",
	utype    = "flow",
	scale    = 1.1574074074074073e-5,
	default  = "cuft/d",
	link     = "Cubic metre per second",
    },
    ["m3/h"] = {
	name1    = "cubic metre per hour",
	name1_us = "cubic meter per hour",
	name2    = "cubic metres per hour",
	name2_us = "cubic meters per hour",
	symbol   = "m&lt;sup&gt;3&lt;/sup&gt;/h",
	utype    = "flow",
	scale    = 0.00027777777777777778,
	default  = "cuft/h",
	link     = "Cubic metre per second",
    },
    ["m3/min"] = {
	name1    = "cubic metre per minute",
	name1_us = "cubic meter per minute",
	name2    = "cubic metres per minute",
	name2_us = "cubic meters per minute",
	symbol   = "m&lt;sup&gt;3&lt;/sup&gt;/min",
	utype    = "flow",
	scale    = 0.016666666666666666,
	default  = "cuft/min",
	link     = "Cubic metre per second",
    },
    ["m3/s"] = {
	name1    = "cubic metre per second",
	name1_us = "cubic meter per second",
	name2    = "cubic metres per second",
	name2_us = "cubic meters per second",
	symbol   = "m&lt;sup&gt;3&lt;/sup&gt;/s",
	utype    = "flow",
	scale    = 1,
	default  = "cuft/s",
    },
    ["Moilbbl/a"] = {
	name1    = "million barrels per year",
	name2    = "million barrels per year",
	symbol   = "Mbbl/a",
	utype    = "flow",
	scale    = 0.0050380033629933837,
	default  = "v * 1.58987294928 &lt; 10 ! e3 ! e6 ! m3/a",
	link     = "Barrel per day",
    },
    ["Moilbbl/d"] = {
	name1    = "million barrels per day",
	name2    = "million barrels per day",
	symbol   = "Mbbl/d",
	utype    = "flow",
	scale    = 1.8401307283333335,
	default  = "v * 1.58987294928 &lt; 10 ! e3 ! e6 ! m3/d",
	link     = "Barrel per day",
    },
    ["oilbbl/a"] = {
	name1    = "barrel per year",
	name2    = "barrels per year",
	symbol   = "bbl/a",
	utype    = "flow",
	scale    = 5.0380033629933841e-9,
	default  = "m3/a",
	link     = "Barrel per day",
    },
    ["oilbbl/d"] = {
	name1    = "barrel per day",
	name2    = "barrels per day",
	symbol   = "bbl/d",
	utype    = "flow",
	scale    = 1.8401307283333336e-6,
	default  = "m3/d",
    },
    ["Toilbbl/a"] = {
	name1    = "trillion barrels per year",
	name2    = "trillion barrels per year",
	symbol   = "Tbbl/a",
	utype    = "flow",
	scale    = 5038.0033629933832,
	default  = "v * 1.58987294928 &lt; 10 ! e9 ! e12 ! m3/a",
	link     = "Barrel per day",
    },
    ["U.S.gal/d"] = {
	name1    = "U.S. gallon per day",
	name2    = "U.S. gallons per day",
	symbol   = "U.S.&amp;nbsp;gal/d",
	utype    = "flow",
	scale    = 4.3812636388888893e-8,
	default  = "m3/s",
	customary= 1,
    },
    ["U.S.gal/h"] = {
	name1    = "gallon per hour",
	name2    = "gallons per hour",
	symbol   = "gal/h",
	utype    = "flow",
	scale    = 1.0515032733333334e-6,
	default  = "m3/h",
	link     = "Gallon",
	customary= 2,
    },
    ["U.S.gal/min"] = {
	name1    = "U.S. gallon per minute",
	name2    = "U.S. gallons per minute",
	symbol   = "U.S.&amp;nbsp;gal/min",
	utype    = "flow",
	scale    = 6.3090196400000003e-5,
	default  = "m3/s",
	link     = "Gallon",
    },
    ["USgal/a"] = {
	name1    = "US gallon per year",
	name2    = "US gallons per year",
	symbol   = "US&amp;nbsp;gal/a",
	utype    = "flow",
	scale    = 1.1995246102365199e-10,
	default  = "m3/s",
    },
    ["USgal/d"] = {
	name1    = "US gallon per day",
	name2    = "US gallons per day",
	symbol   = "US&amp;nbsp;gal/d",
	utype    = "flow",
	scale    = 4.3812636388888893e-8,
	default  = "m3/s",
    },
    ["USgal/h"] = {
	name1    = "gallon per hour",
	name2    = "gallons per hour",
	symbol   = "gal/h",
	utype    = "flow",
	scale    = 1.0515032733333334e-6,
	default  = "m3/h",
	link     = "Gallon",
	customary= 1,
    },
    ["USgal/min"] = {
	name1    = "US gallon per minute",
	name2    = "US gallons per minute",
	symbol   = "US&amp;nbsp;gal/min",
	utype    = "flow",
	scale    = 6.3090196400000003e-5,
	default  = "m3/s",
	link     = "Gallon",
    },
    ["USgal/s"] = {
	name1    = "US gallon per second",
	name1_us = "U.S. gallon per second",
	name2    = "US gallons per second",
	name2_us = "U.S. gallons per second",
	symbol   = "USgal/s",
	utype    = "flow",
	scale    = 0.003785411784,
	default  = "m3/s",
	link     = "US gallons per second",
    },
    ["ft3/a"] = {
	target   = "cuft/a",
    },
    ["ft3/d"] = {
	target   = "cuft/d",
    },
    ["ft3/h"] = {
	target   = "cuft/h",
    },
    ["ft3/s"] = {
	target   = "cuft/s",
    },
    ["Gcuft/a"] = {
	target   = "e9cuft/a",
    },
    ["Gcuft/d"] = {
	target   = "e9cuft/d",
    },
    ["kcuft/a"] = {
	target   = "e3cuft/a",
    },
    ["kcuft/d"] = {
	target   = "e3cuft/d",
    },
    ["kcuft/s"] = {
	target   = "e3cuft/s",
    },
    ["Mcuft/a"] = {
	target   = "e6cuft/a",
    },
    ["Mcuft/d"] = {
	target   = "e6cuft/d",
    },
    ["Mcuft/s"] = {
	target   = "e6cuft/s",
    },
    ["m³/s"] = {
	target   = "m3/s",
    },
    ["Tcuft/a"] = {
	target   = "e12cuft/a",
    },
    ["Tcuft/d"] = {
	target   = "e12cuft/d",
    },
    ["u.s.gal/min"] = {
	target   = "U.S.gal/min",
    },
    ["usgal/min"] = {
	target   = "USgal/min",
    },
    ["-LTf"] = {
	name1    = "long ton-force",
	name2    = "long tons-force",
	symbol   = "LTf",
	utype    = "force",
	scale    = 9964.01641818352,
	default  = "kN",
    },
    ["-STf"] = {
	name1    = "short ton-force",
	name2    = "short tons-force",
	symbol   = "STf",
	utype    = "force",
	scale    = 8896.443230521,
	default  = "kN",
    },
    ["dyn"] = {
	name1    = "dyne",
	symbol   = "dyn",
	utype    = "force",
	scale    = 0.00001,
	default  = "gr-f",
    },
    ["g-f"] = {
	name1    = "gram-force",
	name2    = "grams-force",
	symbol   = "g&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 0.00980665,
	default  = "mN oz-f",
	link     = "Kilogram-force",
    },
    ["gf"] = {
	name1    = "gram-force",
	name2    = "grams-force",
	symbol   = "gf",
	utype    = "force",
	scale    = 0.00980665,
	default  = "mN ozf",
	link     = "Kilogram-force",
    },
    ["gr-f"] = {
	name1    = "grain-force",
	name2    = "grains-force",
	symbol   = "gr&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 0.0006354602307515,
	default  = "μN",
	link     = "Pound (force)",
    },
    ["grf"] = {
	name1    = "grain-force",
	name2    = "grains-force",
	symbol   = "grf",
	utype    = "force",
	scale    = 0.0006354602307515,
	default  = "μN",
	link     = "Pound (force)",
    },
    ["kdyn"] = {
	name1    = "kilodyne",
	symbol   = "kdyn",
	utype    = "force",
	scale    = 0.01,
	default  = "oz-f",
	link     = "Dyne",
    },
    ["kg-f"] = {
	name1    = "kilogram-force",
	name2    = "kilograms-force",
	symbol   = "kg&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 9.80665,
	default  = "N lb-f",
    },
    ["kgf"] = {
	name1    = "kilogram-force",
	name2    = "kilograms-force",
	symbol   = "kgf",
	utype    = "force",
	scale    = 9.80665,
	default  = "N lbf",
    },
    ["kp"] = {
	name1    = "kilopond",
	symbol   = "kp",
	utype    = "force",
	scale    = 9.80665,
	default  = "N lb-f",
	link     = "Kilogram-force",
    },
    ["L/T-f"] = {
	name1    = "long ton-force",
	name2    = "long tons-force",
	symbol   = "L/T&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 9964.01641818352,
	default  = "kN",
    },
    ["L/Tf"] = {
	name1    = "long ton-force",
	name2    = "long tons-force",
	symbol   = "L/Tf",
	utype    = "force",
	scale    = 9964.01641818352,
	default  = "kN",
    },
    ["lb-f"] = {
	name1    = "pound-force",
	name2    = "pounds-force",
	symbol   = "lb&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 4.4482216152605,
	default  = "N",
	link     = "Pound (force)",
    },
    ["lbf"] = {
	name1    = "pound-force",
	name2    = "pounds-force",
	symbol   = "lbf",
	utype    = "force",
	scale    = 4.4482216152605,
	default  = "N",
	link     = "Pound (force)",
    },
    ["lb(f)"] = {
	name1    = "pound",
	symbol   = "lb",
	utype    = "force",
	scale    = 4.4482216152605,
	default  = "N",
	link     = "Pound (force)",
    },
    ["LT-f"] = {
	name1    = "long ton-force",
	name2    = "long tons-force",
	symbol   = "LT&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 9964.01641818352,
	default  = "kN",
    },
    ["LTf"] = {
	name1    = "long ton-force",
	name2    = "long tons-force",
	symbol   = "LTf",
	usename  = 1,
	utype    = "force",
	scale    = 9964.01641818352,
	default  = "kN",
    },
    ["Mdyn"] = {
	name1    = "megadyne",
	symbol   = "Mdyn",
	utype    = "force",
	scale    = 10,
	default  = "lb-f",
	link     = "Dyne",
    },
    ["mdyn"] = {
	name1    = "millidyne",
	symbol   = "mdyn",
	utype    = "force",
	scale    = 0.00000001,
	default  = "gr-f",
	link     = "Dyne",
    },
    ["mg-f"] = {
	name1    = "milligram-force",
	name2    = "milligrams-force",
	symbol   = "mg&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 0.00000980665,
	default  = "μN gr-f",
	link     = "Kilogram-force",
    },
    ["mgf"] = {
	name1    = "milligram-force",
	name2    = "milligrams-force",
	symbol   = "mgf",
	utype    = "force",
	scale    = 0.00000980665,
	default  = "μN grf",
	link     = "Kilogram-force",
    },
    ["Mp"] = {
	name1    = "megapond",
	symbol   = "Mp",
	utype    = "force",
	scale    = 9806.65,
	default  = "kN LT-f ST-f",
	link     = "Kilogram-force",
    },
    ["mp"] = {
	name1    = "millipond",
	symbol   = "mp",
	utype    = "force",
	scale    = 0.00000980665,
	default  = "μN gr-f",
	link     = "Kilogram-force",
    },
    ["N"] = {
	_name1   = "newton",
	_symbol  = "N",
	utype    = "force",
	scale    = 1,
	prefixes = 1,
	default  = "lb-f",
	link     = "Newton (unit)",
    },
    ["oz-f"] = {
	name1    = "ounce-force",
	name2    = "ounces-force",
	symbol   = "oz&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 0.2780138203095378125,
	default  = "mN",
	link     = "Pound (force)",
    },
    ["ozf"] = {
	name1    = "ounce-force",
	name2    = "ounces-force",
	symbol   = "ozf",
	utype    = "force",
	scale    = 0.2780138203095378125,
	default  = "mN",
	link     = "Pound (force)",
    },
    ["p"] = {
	name1    = "pond",
	symbol   = "p",
	utype    = "force",
	scale    = 0.00980665,
	default  = "mN oz-f",
	link     = "Kilogram-force",
    },
    ["pdl"] = {
	name1    = "poundal",
	symbol   = "pdl",
	utype    = "force",
	scale    = 0.138254954376,
	default  = "N",
    },
    ["S/T-f"] = {
	name1    = "short ton-force",
	name2    = "short tons-force",
	symbol   = "S/T&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 8896.443230521,
	default  = "kN",
    },
    ["S/Tf"] = {
	name1    = "short ton-force",
	name2    = "short tons-force",
	symbol   = "S/Tf",
	utype    = "force",
	scale    = 8896.443230521,
	default  = "kN",
    },
    ["ST-f"] = {
	name1    = "short ton-force",
	name2    = "short tons-force",
	symbol   = "ST&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 8896.443230521,
	default  = "kN",
    },
    ["STf"] = {
	name1    = "short ton-force",
	name2    = "short tons-force",
	symbol   = "STf",
	usename  = 1,
	utype    = "force",
	scale    = 8896.443230521,
	default  = "kN",
    },
    ["t-f"] = {
	name1    = "tonne-force",
	name2    = "tonnes-force",
	symbol   = "t&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "force",
	scale    = 9806.65,
	default  = "kN LT-f ST-f",
	link     = "Ton-force#Tonne-force",
    },
    ["tf"] = {
	name1    = "tonne-force",
	name2    = "tonnes-force",
	symbol   = "tf",
	utype    = "force",
	scale    = 9806.65,
	default  = "kN LTf STf",
	link     = "Ton-force#Tonne-force",
    },
    ["dyne"] = {
	target   = "dyn",
    },
    ["newtons"] = {
	target   = "N",
    },
    ["poundal"] = {
	target   = "pdl",
    },
    ["tonne-force"] = {
	target   = "tf",
    },
    ["impgal/mi"] = {
	per      = { "@impgal", "mi" },
	utype    = "fuel efficiency",
	invert   = 1,
	iscomplex= true,
	default  = "l/km USgal/mi",
    },
    ["km/L"] = {
	per      = { "km", "L" },
	utype    = "fuel efficiency",
	invert   = -1,
	iscomplex= true,
	default  = "mpgimp mpgus",
    },
    ["km/l"] = {
	per      = { "km", "l" },
	utype    = "fuel efficiency",
	invert   = -1,
	iscomplex= true,
	default  = "mpgimp mpgus",
    },
    ["L/100 km"] = {
	per      = { "L", "100km" },
	utype    = "fuel efficiency",
	invert   = 1,
	iscomplex= true,
	default  = "mpgimp mpgus",
	symlink  = "[[Fuel economy in automobiles#Units of measure|L/100&amp;nbsp;km]]",
    },
    ["l/100 km"] = {
	per      = { "l", "100km" },
	utype    = "fuel efficiency",
	invert   = 1,
	iscomplex= true,
	default  = "mpgimp mpgus",
	symlink  = "[[Fuel economy in automobiles#Units of measure|l/100&amp;nbsp;km]]",
    },
    ["L/km"] = {
	per      = { "L", "km" },
	utype    = "fuel efficiency",
	invert   = 1,
	iscomplex= true,
	default  = "mpgimp mpgus",
    },
    ["l/km"] = {
	per      = { "l", "km" },
	utype    = "fuel efficiency",
	invert   = 1,
	iscomplex= true,
	default  = "mpgimp mpgus",
    },
    ["mi/impqt"] = {
	per      = { "mi", "impqt" },
	utype    = "fuel efficiency",
	invert   = -1,
	iscomplex= true,
	default  = "km/L",
    },
    ["mi/U.S.qt"] = {
	per      = { "mi", "U.S.qt" },
	utype    = "fuel efficiency",
	invert   = -1,
	iscomplex= true,
	default  = "km/L",
    },
    ["mi/USqt"] = {
	per      = { "mi", "USqt" },
	utype    = "fuel efficiency",
	invert   = -1,
	iscomplex= true,
	default  = "km/L",
    },
    ["mi/usqt"] = {
	per      = { "mi", "usqt" },
	utype    = "fuel efficiency",
	invert   = -1,
	iscomplex= true,
	default  = "km/L",
    },
    ["mpgimp"] = {
	per      = { "mi", "@impgal" },
	symbol   = "mpg&lt;sub&gt;&amp;#8209;imp&lt;/sub&gt;",
	utype    = "fuel efficiency",
	invert   = -1,
	iscomplex= true,
	default  = "L/100 km+mpgus",
	symlink  = "[[Fuel economy in automobiles#Units of measure|mpg]]&lt;sub&gt;&amp;#8209;[[Imperial units|imp]]&lt;/sub&gt;",
    },
    ["mpgus"] = {
	per      = { "mi", "+USgal" },
	symbol   = "mpg&lt;sub&gt;&amp;#8209;US&lt;/sub&gt;",
	utype    = "fuel efficiency",
	invert   = -1,
	iscomplex= true,
	default  = "L/100 km+mpgimp",
	symlink  = "[[Fuel economy in automobiles#Units of measure|mpg]]&lt;sub&gt;&amp;#8209;[[United States customary units|US]]&lt;/sub&gt;",
    },
    ["U.S.gal/mi"] = {
	per      = { "*U.S.gal", "mi" },
	sp_us    = true,
	utype    = "fuel efficiency",
	invert   = 1,
	iscomplex= true,
	default  = "l/km impgal/mi",
    },
    ["usgal/mi"] = {
	per      = { "+USgal", "mi" },
	utype    = "fuel efficiency",
	invert   = 1,
	iscomplex= true,
	default  = "l/km impgal/mi",
    },
    ["L/100km"] = {
	target   = "L/100 km",
    },
    ["l/100km"] = {
	target   = "l/100 km",
    },
    ["mpg"] = {
	shouldbe = "Use %{mpgus%} for miles per US gallon or %{mpgimp%} for miles per imperial gallon (not %{mpg%})",
    },
    ["mpgU.S."] = {
	target   = "mpgus",
	symbol   = "mpg&lt;sub&gt;&amp;#8209;U.S.&lt;/sub&gt;",
	sp_us    = true,
	symlink  = "[[Fuel economy in automobiles#Units of measure|mpg]]&lt;sub&gt;&amp;#8209;[[United States customary units|U.S.]]&lt;/sub&gt;",
    },
    ["mpgu.s."] = {
	target   = "mpgus",
	symbol   = "mpg&lt;sub&gt;&amp;#8209;U.S.&lt;/sub&gt;",
	sp_us    = true,
	symlink  = "[[Fuel economy in automobiles#Units of measure|mpg]]&lt;sub&gt;&amp;#8209;[[United States customary units|U.S.]]&lt;/sub&gt;",
    },
    ["mpgUS"] = {
	target   = "mpgus",
    },
    ["USgal/mi"] = {
	target   = "usgal/mi",
    },
    ["kPa/m"] = {
	per      = { "kPa", "-m-frac" },
	utype    = "fracture gradient",
	default  = "psi/ft",
    },
    ["psi/ft"] = {
	per      = { "psi", "-ft-frac" },
	utype    = "fracture gradient",
	default  = "kPa/m",
    },
    ["cm/km"] = {
	name1    = "centimetre per kilometre",
	name1_us = "centimeter per kilometer",
	name2    = "centimetres per kilometre",
	name2_us = "centimeters per kilometer",
	symbol   = "cm/km",
	utype    = "gradient",
	scale    = 0.00001,
	default  = "ft/mi",
	link     = "Grade (slope)",
    },
    ["ft/mi"] = {
	name1    = "foot per mile",
	name2    = "feet per mile",
	symbol   = "ft/mi",
	utype    = "gradient",
	scale    = 0.00018939393939393939,
	default  = "v &lt; 5.28 ! c ! ! m/km",
	link     = "Grade (slope)",
    },
    ["ft/nmi"] = {
	name1    = "foot per nautical mile",
	name2    = "feet per nautical mile",
	symbol   = "ft/nmi",
	utype    = "gradient",
	scale    = 0.00016457883369330455,
	default  = "v &lt; 6.076 ! c ! ! m/km",
	link     = "Grade (slope)",
    },
    ["in/ft"] = {
	name1    = "inch per foot",
	name2    = "inches per foot",
	symbol   = "in/ft",
	utype    = "gradient",
	scale    = 0.083333333333333329,
	default  = "mm/m",
	link     = "Grade (slope)",
    },
    ["in/mi"] = {
	name1    = "inch per mile",
	name2    = "inches per mile",
	symbol   = "in/mi",
	utype    = "gradient",
	scale    = 1.5782828282828283e-5,
	default  = "v &lt; 0.6336 ! m ! c ! m/km",
	link     = "Grade (slope)",
    },
    ["m/km"] = {
	name1    = "metre per kilometre",
	name1_us = "meter per kilometer",
	name2    = "metres per kilometre",
	name2_us = "meters per kilometer",
	symbol   = "m/km",
	utype    = "gradient",
	scale    = 0.001,
	default  = "ft/mi",
	link     = "Grade (slope)",
    },
    ["mm/km"] = {
	name1    = "millimetre per kilometre",
	name1_us = "millimeter per kilometer",
	name2    = "millimetres per kilometre",
	name2_us = "millimeters per kilometer",
	symbol   = "mm/km",
	utype    = "gradient",
	scale    = 0.000001,
	default  = "in/mi",
	link     = "Grade (slope)",
    },
    ["mm/m"] = {
	name1    = "millimetre per metre",
	name1_us = "millimeter per meter",
	name2    = "millimetres per metre",
	name2_us = "millimeters per meter",
	symbol   = "mm/m",
	utype    = "gradient",
	scale    = 0.001,
	default  = "in/ft",
	link     = "Grade (slope)",
    },
    ["admi"] = {
	name1    = "admiralty mile",
	symbol   = "nmi&amp;nbsp;(admiralty)",
	utype    = "length",
	scale    = 1853.184,
	default  = "km mi",
	link     = "Nautical mile",
    },
    ["AU"] = {
	name1    = "astronomical unit",
	symbol   = "AU",
	utype    = "length",
	scale    = 149597870700,
	default  = "km mi",
    },
    ["Brnmi"] = {
	name1    = "British nautical mile",
	symbol   = "(Brit)&amp;nbsp;nmi",
	utype    = "length",
	scale    = 1853.184,
	default  = "km mi",
	link     = "Nautical mile",
    },
    ["bu"] = {
	name2    = "bu",
	symbol   = "bu",
	usename  = 1,
	utype    = "length",
	scale    = 0.0030303030303030303,
	default  = "mm",
	link     = "Japanese units of measurement#Length",
    },
    ["ch"] = {
	name1    = "chain",
	symbol   = "ch",
	utype    = "length",
	scale    = 20.1168,
	default  = "ft m",
	subdivs  = { ["ft"] = { 66, default = "m" }, ["yd"] = { 22, default = "m" } },
	link     = "Chain (unit)",
    },
    ["chlk"] = {
	name1    = "[[Chain (unit)|chain]]",
	symbol   = "[[Chain (unit)|ch]]",
	utype    = "length",
	scale    = 20.1168,
	default  = "ft m",
	link     = "",
    },
    ["chain"] = {
	symbol   = "chain",
	usename  = 1,
	utype    = "length",
	scale    = 20.1168,
	default  = "ft m",
	subdivs  = { ["ft"] = { 66, default = "m" }, ["yd"] = { 22, default = "m" } },
	link     = "Chain (unit)",
    },
    ["chainlk"] = {
	symbol   = "[[Chain (unit)|chain]]",
	usename  = 1,
	utype    = "length",
	scale    = 20.1168,
	default  = "ft m",
	link     = "",
    },
    ["dpcm"] = {
	name2    = "dot/cm",
	symbol   = "dot/cm",
	utype    = "length",
	scale    = 100,
	invert   = -1,
	iscomplex= true,
	default  = "dpi",
	link     = "Dots per inch",
    },
    ["dpi"] = {
	name2    = "DPI",
	symbol   = "DPI",
	utype    = "length",
	scale    = 39.370078740157481,
	invert   = -1,
	iscomplex= true,
	default  = "pitch",
	link     = "Dots per inch",
    },
    ["fathom"] = {
	symbol   = "fathom",
	usename  = 1,
	utype    = "length",
	scale    = 1.8288,
	default  = "ft m",
    },
    ["foot"] = {
	name1    = "foot",
	name2    = "foot",
	symbol   = "ft",
	utype    = "length",
	scale    = 0.3048,
	default  = "m",
	subdivs  = { ["in"] = { 12, default = "m" } },
	link     = "Foot (unit)",
    },
    ["ft"] = {
	name1    = "foot",
	name2    = "feet",
	symbol   = "ft",
	utype    = "length",
	scale    = 0.3048,
	exception= "integer_more_precision",
	default  = "m",
	subdivs  = { ["in"] = { 12, default = "m" } },
	link     = "Foot (unit)",
    },
    ["furlong"] = {
	symbol   = "furlong",
	usename  = 1,
	utype    = "length",
	scale    = 201.168,
	default  = "ft m",
    },
    ["Gly"] = {
	name1    = "gigalight-year",
	symbol   = "Gly",
	utype    = "length",
	scale    = 9.4607304725808e24,
	default  = "Mpc",
	link     = "Light-year#Definitions",
    },
    ["Gpc"] = {
	name1    = "gigaparsec",
	symbol   = "Gpc",
	utype    = "length",
	scale    = 3.0856775814671916e25,
	default  = "Gly",
	link     = "Parsec#Megaparsecs and gigaparsecs",
    },
    ["hand"] = {
	name1    = "hand",
	symbol   = "h",
	utype    = "length",
	builtin  = "hand",
	scale    = 0.1016,
	iscomplex= true,
	default  = "in cm",
	link     = "Hand (unit)",
    },
    ["in"] = {
	name1    = "inch",
	name2    = "inches",
	symbol   = "in",
	utype    = "length",
	scale    = 0.0254,
	exception= "subunit_more_precision",
	default  = "mm",
    },
    ["inabbreviated"] = {
	name2    = "in",
	symbol   = "in",
	utype    = "length",
	scale    = 0.0254,
	default  = "mm",
	link     = "Inch",
    },
    ["kly"] = {
	name1    = "kilolight-year",
	symbol   = "kly",
	utype    = "length",
	scale    = 9.4607304725808e18,
	default  = "pc",
	link     = "Light-year#Definitions",
    },
    ["kpc"] = {
	name1    = "kiloparsec",
	symbol   = "kpc",
	utype    = "length",
	scale    = 3.0856775814671916e19,
	default  = "kly",
	link     = "Parsec#Parsecs and kiloparsecs",
    },
    ["LD"] = {
	name1    = "lunar distance",
	symbol   = "LD",
	utype    = "length",
	scale    = 384403000,
	default  = "km mi",
	link     = "Lunar distance (astronomy)",
    },
    ["league"] = {
	symbol   = "league",
	usename  = 1,
	utype    = "length",
	scale    = 4828.032,
	default  = "km",
	link     = "League (unit)",
    },
    ["ly"] = {
	name1    = "light-year",
	symbol   = "ly",
	utype    = "length",
	scale    = 9.4607304725808e15,
	default  = "AU",
    },
    ["m"] = {
	_name1   = "metre",
	_name1_us= "meter",
	_symbol  = "m",
	utype    = "length",
	scale    = 1,
	prefixes = 1,
	default  = "v &gt; 0 and v &lt; 3 ! ftin ! ft",
	link     = "Metre",
    },
    ["mi"] = {
	name1    = "mile",
	symbol   = "mi",
	utype    = "length",
	scale    = 1609.344,
	default  = "km",
	subdivs  = { ["ch"] = { 80, default = "km" }, ["chlk"] = { 80, default = "km" }, ["chain"] = { 80, default = "km" }, ["chainlk"] = { 80, default = "km" }, ["ft"] = { 5280, default = "km" }, ["furlong"] = { 8, default = "km" }, ["yd"] = { 1760, default = "km" } },
    },
    ["mil"] = {
	symbol   = "mil",
	usename  = 1,
	utype    = "length",
	scale    = 0.0000254,
	default  = "mm",
	link     = "Thousandth of an inch",
    },
    ["Mly"] = {
	name1    = "megalight-year",
	symbol   = "Mly",
	utype    = "length",
	scale    = 9.4607304725808e21,
	default  = "kpc",
	link     = "Light-year#Definitions",
    },
    ["Mpc"] = {
	name1    = "megaparsec",
	symbol   = "Mpc",
	utype    = "length",
	scale    = 3.0856775814671916e22,
	default  = "Mly",
	link     = "Parsec#Megaparsecs and gigaparsecs",
    },
    ["NM"] = {
	name1    = "nautical mile",
	symbol   = "NM",
	utype    = "length",
	scale    = 1852,
	default  = "km mi",
    },
    ["nmi"] = {
	name1    = "nautical mile",
	symbol   = "nmi",
	utype    = "length",
	scale    = 1852,
	default  = "km mi",
    },
    ["oldUKnmi"] = {
	name1    = "nautical mile",
	symbol   = "nmi",
	utype    = "length",
	scale    = 1853.184,
	default  = "km mi",
    },
    ["oldUSnmi"] = {
	name1    = "nautical mile",
	symbol   = "nmi",
	utype    = "length",
	scale    = 1853.24496,
	default  = "km mi",
    },
    ["pc"] = {
	name1    = "parsec",
	symbol   = "pc",
	utype    = "length",
	scale    = 3.0856775814671916e16,
	default  = "ly",
    },
    ["perch"] = {
	name2    = "perches",
	symbol   = "perch",
	usename  = 1,
	utype    = "length",
	scale    = 5.0292,
	default  = "ft m",
	link     = "Rod (unit)",
    },
    ["pitch"] = {
	name2    = "μm",
	symbol   = "μm",
	utype    = "length",
	scale    = 1e-6,
	default  = "dpi",
	defkey   = "pitch",
	linkey   = "pitch",
	link     = "Dots per inch",
    },
    ["pole"] = {
	symbol   = "pole",
	usename  = 1,
	utype    = "length",
	scale    = 5.0292,
	default  = "ft m",
	link     = "Rod (unit)",
    },
    ["pre1954U.S.nmi"] = {
	name1    = "(pre-1954&amp;nbsp;U.S.) nautical mile",
	symbol   = "(pre&amp;#8209;1954&amp;nbsp;U.S.) nmi",
	utype    = "length",
	scale    = 1853.24496,
	default  = "km mi",
	link     = "Nautical mile",
    },
    ["pre1954USnmi"] = {
	name1    = "(pre-1954&amp;nbsp;US) nautical mile",
	name1_us = "(pre-1954&amp;nbsp;U.S.) nautical mile",
	symbol   = "(pre&amp;#8209;1954&amp;nbsp;US) nmi",
	sym_us   = "(pre&amp;#8209;1954&amp;nbsp;U.S.) nmi",
	utype    = "length",
	scale    = 1853.24496,
	default  = "km mi",
	link     = "Nautical mile",
    },
    ["rd"] = {
	name1    = "rod",
	symbol   = "rd",
	utype    = "length",
	scale    = 5.0292,
	default  = "ft m",
	link     = "Rod (unit)",
    },
    ["royal cubit"] = {
	name1    = "royal cubit",
	symbol   = "cu",
	utype    = "length",
	scale    = 0.524,
	default  = "mm",
    },
    ["rtkm"] = {
	name1    = "route kilometre",
	name1_us = "route kilometer",
	symbol   = "km",
	utype    = "length",
	scale    = 1000,
	default  = "mi",
	link     = "Kilometre",
    },
    ["rtmi"] = {
	name1    = "route mile",
	symbol   = "mi",
	utype    = "length",
	scale    = 1609.344,
	default  = "km",
	link     = "Mile",
    },
    ["shaku"] = {
	name2    = "shaku",
	symbol   = "shaku",
	usename  = 1,
	utype    = "length",
	scale    = 0.30303030303030304,
	default  = "m",
	link     = "Shaku (unit)",
    },
    ["sm"] = {
	name1    = "smoot",
	symbol   = "sm",
	utype    = "length",
	scale    = 1.70180,
	default  = "m",
	link     = "Smoot (unit)",
    },
    ["smi"] = {
	name1    = "statute mile",
	symbol   = "mi",
	utype    = "length",
	scale    = 1609.344,
	default  = "km",
	subdivs  = { ["chain"] = { 80, default = "km" } },
    },
    ["solar radius"] = {
	name1    = "solar radius",
	name2    = "solar radii",
	symbol   = "''R''&lt;sub&gt;☉&lt;/sub&gt;",
	utype    = "length",
	scale    = 695700e3,
	default  = "km",
    },
    ["sun"] = {
	name2    = "sun",
	symbol   = "sun",
	usename  = 1,
	utype    = "length",
	scale    = 0.030303030303030304,
	default  = "mm",
	link     = "Japanese units of measurement#Length",
    },
    ["thou"] = {
	name2    = "thou",
	symbol   = "thou",
	usename  = 1,
	utype    = "length",
	scale    = 0.0000254,
	default  = "mm",
	link     = "Thousandth of an inch",
    },
    ["verst"] = {
	symbol   = "verst",
	usename  = 1,
	utype    = "length",
	scale    = 1066.8,
	default  = "km mi",
    },
    ["yd"] = {
	name1    = "yard",
	symbol   = "yd",
	utype    = "length",
	scale    = 0.9144,
	default  = "m",
	subdivs  = { ["ft"] = { 3, default = "m" } },
    },
    ["μin"] = {
	name1    = "microinch",
	name2    = "microinches",
	symbol   = "μin",
	utype    = "length",
	scale    = 0.0000000254,
	default  = "nm",
	link     = "SI prefix#Non-metric units",
    },
    ["Å"] = {
	name1    = "ångström",
	symbol   = "Å",
	utype    = "length",
	scale    = 0.0000000001,
	default  = "in",
    },
    ["Hz"] = {
	_name1   = "hertz",
	_name2   = "hertz",
	_symbol  = "Hz",
	utype    = "length",
	scale    = 3.3356409519815204e-9,
	invert   = -1,
	iscomplex= true,
	prefixes = 1,
	default  = "m",
	link     = "Hertz",
    },
    ["-ft-frac"] = {
	target   = "ft",
	link     = "Fracture gradient",
    },
    ["-in-stiff"] = {
	target   = "in",
	link     = "Stiffness",
    },
    ["-m-frac"] = {
	target   = "m",
	link     = "Fracture gradient",
    },
    ["-m-stiff"] = {
	target   = "m",
	link     = "Stiffness",
    },
    ["100km"] = {
	target   = "km",
	multiplier= 100,
    },
    ["admiralty nmi"] = {
	target   = "oldUKnmi",
    },
    ["angstrom"] = {
	target   = "Å",
    },
    ["au"] = {
	target   = "AU",
	symbol   = "au",
    },
    ["feet"] = {
	target   = "ft",
    },
    ["hands"] = {
	target   = "hand",
    },
    ["inch"] = {
	target   = "in",
    },
    ["light-year"] = {
	target   = "ly",
    },
    ["meter"] = {
	target   = "m",
	sp_us    = true,
    },
    ["meters"] = {
	target   = "m",
	sp_us    = true,
    },
    ["metre"] = {
	target   = "m",
    },
    ["metres"] = {
	target   = "m",
    },
    ["micrometre"] = {
	target   = "μm",
    },
    ["micron"] = {
	target   = "μm",
	default  = "μin",
    },
    ["mile"] = {
	target   = "mi",
    },
    ["miles"] = {
	target   = "mi",
    },
    ["parsec"] = {
	target   = "pc",
    },
    ["rod"] = {
	target   = "rd",
    },
    ["smoot"] = {
	target   = "sm",
    },
    ["uin"] = {
	target   = "μin",
    },
    ["yard"] = {
	target   = "yd",
    },
    ["yards"] = {
	target   = "yd",
    },
    ["yds"] = {
	target   = "yd",
    },
    ["dtex"] = {
	name1    = "decitex",
	name2    = "decitex",
	symbol   = "dtex",
	utype    = "linear density",
	scale    = 1e-7,
	default  = "lb/yd",
	link     = "Units of textile measurement#Tex",
    },
    ["kg/cm"] = {
	name1    = "kilogram per centimetre",
	name1_us = "kilogram per centimeter",
	name2    = "kilograms per centimetre",
	name2_us = "kilograms per centimeter",
	symbol   = "kg/cm",
	utype    = "linear density",
	scale    = 100,
	default  = "lb/yd",
	link     = "Linear density",
    },
    ["kg/m"] = {
	name1    = "kilogram per metre",
	name1_us = "kilogram per meter",
	name2    = "kilograms per metre",
	name2_us = "kilograms per meter",
	symbol   = "kg/m",
	utype    = "linear density",
	scale    = 1,
	default  = "lb/yd",
	link     = "Linear density",
    },
    ["lb/ft"] = {
	name1    = "pound per foot",
	name2    = "pounds per foot",
	symbol   = "lb/ft",
	utype    = "linear density",
	scale    = 1.4881639435695539,
	default  = "kg/m",
	link     = "Linear density",
    },
    ["lb/yd"] = {
	name1    = "pound per yard",
	name2    = "pounds per yard",
	symbol   = "lb/yd",
	utype    = "linear density",
	scale    = 0.49605464785651798,
	default  = "kg/m",
	link     = "Linear density",
    },
    ["G"] = {
	_name1   = "gauss",
	_name2   = "gauss",
	_symbol  = "G",
	utype    = "magnetic field strength",
	scale    = 0.0001,
	prefixes = 1,
	default  = "T",
	link     = "Gauss (unit)",
    },
    ["T"] = {
	_name1   = "tesla",
	_symbol  = "T",
	utype    = "magnetic field strength",
	scale    = 1,
	prefixes = 1,
	default  = "G",
	link     = "Tesla (unit)",
    },
    ["A/m"] = {
	name1    = "ampere per metre",
	name1_us = "ampere per meter",
	name2    = "amperes per metre",
	name2_us = "amperes per meter",
	symbol   = "A/m",
	utype    = "magnetizing field",
	scale    = 1,
	default  = "Oe",
	link     = "Magnetic field#Units",
    },
    ["kA/m"] = {
	name1    = "kiloampere per metre",
	name1_us = "kiloampere per meter",
	name2    = "kiloamperes per metre",
	name2_us = "kiloamperes per meter",
	symbol   = "kA/m",
	utype    = "magnetizing field",
	scale    = 1000,
	default  = "kOe",
	link     = "Magnetic field#Units",
    },
    ["MA/m"] = {
	name1    = "megaampere per metre",
	name1_us = "megaampere per meter",
	name2    = "megaamperes per metre",
	name2_us = "megaamperes per meter",
	symbol   = "MA/m",
	utype    = "magnetizing field",
	scale    = 1e6,
	default  = "kOe",
	link     = "Magnetic field#Units",
    },
    ["Oe"] = {
	_name1   = "oersted",
	_symbol  = "Oe",
	utype    = "magnetizing field",
	scale    = 79.5774715,
	prefixes = 1,
	default  = "kA/m",
	link     = "Oersted",
    },
    ["-Lcwt"] = {
	name1    = "hundredweight",
	name2    = "hundredweight",
	symbol   = "cwt",
	utype    = "mass",
	scale    = 50.80234544,
	default  = "lb",
    },
    ["-Scwt"] = {
	name1    = "hundredweight",
	name2    = "hundredweight",
	symbol   = "cwt",
	utype    = "mass",
	scale    = 45.359237,
	default  = "lb",
    },
    ["-ST"] = {
	name1    = "short ton",
	symbol   = "ST",
	utype    = "mass",
	scale    = 907.18474,
	default  = "t",
    },
    ["carat"] = {
	symbol   = "carat",
	usename  = 1,
	utype    = "mass",
	scale    = 0.0002,
	default  = "g",
	link     = "Carat (mass)",
    },
    ["drachm"] = {
	name1_us = "dram",
	symbol   = "drachm",
	usename  = 1,
	utype    = "mass",
	scale    = 0.001771845195,
	default  = "g",
	link     = "Dram (unit)",
    },
    ["dram"] = {
	target   = "drachm",
    },
    ["dwt"] = {
	name1    = "pennyweight",
	symbol   = "dwt",
	utype    = "mass",
	scale    = 0.00155517384,
	default  = "oz g",
    },
    ["DWton"] = {
	symbol   = "deadweight ton",
	usename  = 1,
	utype    = "mass",
	scale    = 1016.0469088,
	default  = "DWtonne",
	link     = "Tonnage",
    },
    ["DWtonne"] = {
	symbol   = "deadweight tonne",
	usename  = 1,
	utype    = "mass",
	scale    = 1000,
	default  = "DWton",
	link     = "Tonnage",
    },
    ["g"] = {
	_name1   = "gram",
	_symbol  = "g",
	utype    = "mass",
	scale    = 0.001,
	prefixes = 1,
	default  = "oz",
	link     = "Gram",
    },
    ["gr"] = {
	name1    = "grain",
	symbol   = "gr",
	utype    = "mass",
	scale    = 0.00006479891,
	default  = "g",
	link     = "Grain (unit)",
    },
    ["Gt"] = {
	name1    = "gigatonne",
	symbol   = "Gt",
	utype    = "mass",
	scale    = 1000000000000,
	default  = "LT ST",
	link     = "Tonne",
    },
    ["impgalh2o"] = {
	name1    = "imperial gallon of water",
	name2    = "imperial gallons of water",
	symbol   = "imp&amp;nbsp;gal H&lt;sub&gt;2&lt;/sub&gt;O",
	utype    = "mass",
	scale    = 4.5359236999999499,
	default  = "lb kg",
	link     = "Imperial gallon",
    },
    ["kt"] = {
	name1    = "kilotonne",
	symbol   = "kt",
	utype    = "mass",
	scale    = 1000000,
	default  = "LT ST",
	link     = "Tonne",
    },
    ["lb"] = {
	name1    = "pound",
	symbol   = "lb",
	utype    = "mass",
	scale    = 0.45359237,
	exception= "integer_more_precision",
	default  = "kg",
	subdivs  = { ["oz"] = { 16, default = "kg" } },
	link     = "Pound (mass)",
    },
    ["Lcwt"] = {
	name1    = "long hundredweight",
	name2    = "long hundredweight",
	symbol   = "Lcwt",
	usename  = 1,
	utype    = "mass",
	scale    = 50.80234544,
	default  = "lb",
	subdivs  = { ["qtr"] = { 4, default = "kg" }, ["st"] = { 8, default = "kg" } },
	link     = "Hundredweight",
    },
    ["long cwt"] = {
	name1    = "long hundredweight",
	name2    = "long hundredweight",
	symbol   = "long&amp;nbsp;cwt",
	utype    = "mass",
	scale    = 50.80234544,
	default  = "lb kg",
	subdivs  = { ["qtr"] = { 4, default = "kg" } },
	link     = "Hundredweight",
    },
    ["long qtr"] = {
	name1    = "long quarter",
	symbol   = "long&amp;nbsp;qtr",
	utype    = "mass",
	scale    = 12.70058636,
	default  = "lb kg",
	link     = "Avoirdupois",
    },
    ["LT"] = {
	symbol   = "long ton",
	usename  = 1,
	utype    = "mass",
	scale    = 1016.0469088,
	default  = "t",
	subdivs  = { ["Lcwt"] = { 20, default = "t", unit = "-Lcwt" } },
    },
    ["lt"] = {
	name1    = "long ton",
	symbol   = "LT",
	utype    = "mass",
	scale    = 1016.0469088,
	default  = "t",
	subdivs  = { ["Lcwt"] = { 20, default = "t", unit = "-Lcwt" } },
    },
    ["metric ton"] = {
	symbol   = "metric ton",
	usename  = 1,
	utype    = "mass",
	scale    = 1000,
	default  = "long ton",
	link     = "Tonne",
    },
    ["MT"] = {
	name1    = "metric ton",
	symbol   = "t",
	utype    = "mass",
	scale    = 1000,
	default  = "LT ST",
	link     = "Tonne",
    },
    ["Mt"] = {
	name1    = "megatonne",
	symbol   = "Mt",
	utype    = "mass",
	scale    = 1000000000,
	default  = "LT ST",
	link     = "Tonne",
    },
    ["oz"] = {
	name1    = "ounce",
	symbol   = "oz",
	utype    = "mass",
	scale    = 0.028349523125,
	default  = "g",
    },
    ["ozt"] = {
	name1    = "troy ounce",
	symbol   = "ozt",
	utype    = "mass",
	scale    = 0.0311034768,
	default  = "oz g",
    },
    ["pdr"] = {
	name1    = "pounder",
	symbol   = "pdr",
	utype    = "mass",
	scale    = 0.45359237,
	default  = "kg",
	link     = "Pound (mass)",
    },
    ["qtr"] = {
	name1    = "quarter",
	symbol   = "qtr",
	utype    = "mass",
	scale    = 12.70058636,
	default  = "lb kg",
	subdivs  = { ["lb"] = { 28, default = "kg" } },
	link     = "Avoirdupois",
    },
    ["Scwt"] = {
	name1    = "short hundredweight",
	name2    = "short hundredweight",
	symbol   = "Scwt",
	usename  = 1,
	utype    = "mass",
	scale    = 45.359237,
	default  = "lb",
	link     = "Hundredweight",
    },
    ["short cwt"] = {
	name1    = "short hundredweight",
	name2    = "short hundredweight",
	symbol   = "short&amp;nbsp;cwt",
	utype    = "mass",
	scale    = 45.359237,
	default  = "lb kg",
	link     = "Hundredweight",
    },
    ["short qtr"] = {
	name1    = "short quarter",
	symbol   = "short&amp;nbsp;qtr",
	utype    = "mass",
	scale    = 11.33980925,
	default  = "lb kg",
	link     = "Avoirdupois",
    },
    ["ST"] = {
	symbol   = "short ton",
	usename  = 1,
	utype    = "mass",
	scale    = 907.18474,
	default  = "t",
	subdivs  = { ["Scwt"] = { 20, default = "t", unit = "-Scwt" } },
    },
    ["shtn"] = {
	name1    = "short ton",
	symbol   = "sh&amp;nbsp;tn",
	utype    = "mass",
	scale    = 907.18474,
	default  = "t",
    },
    ["shton"] = {
	symbol   = "ton",
	usename  = 1,
	utype    = "mass",
	scale    = 907.18474,
	default  = "t",
    },
    ["solar mass"] = {
	name1    = "solar mass",
	name2    = "solar masses",
	symbol   = "''M''&lt;sub&gt;☉&lt;/sub&gt;",
	utype    = "mass",
	scale    = 1.98855e30,
	default  = "kg",
    },
    ["st"] = {
	name1    = "stone",
	name2    = "stone",
	symbol   = "st",
	utype    = "mass",
	scale    = 6.35029318,
	default  = "lb kg",
	subdivs  = { ["lb"] = { 14, default = "kg lb" } },
	link     = "Stone (unit)",
    },
    ["t"] = {
	name1    = "tonne",
	name1_us = "metric ton",
	symbol   = "t",
	utype    = "mass",
	scale    = 1000,
	default  = "LT ST",
    },
    ["tonne"] = {
	name1    = "tonne",
	name1_us = "metric ton",
	symbol   = "t",
	utype    = "mass",
	scale    = 1000,
	default  = "shton",
    },
    ["troy pound"] = {
	symbol   = "troy pound",
	usename  = 1,
	utype    = "mass",
	scale    = 0.3732417216,
	default  = "lb kg",
	link     = "Troy weight",
    },
    ["usgalh2o"] = {
	name1    = "US gallon of water",
	name1_us = "U.S. gallon of water",
	name2    = "US gallons of water",
	name2_us = "U.S. gallons of water",
	symbol   = "US&amp;nbsp;gal H&lt;sub&gt;2&lt;/sub&gt;O",
	utype    = "mass",
	scale    = 3.7776215836051126,
	default  = "lb kg",
	link     = "United States customary units#Fluid volume",
    },
    ["viss"] = {
	name2    = "viss",
	symbol   = "viss",
	utype    = "mass",
	scale    = 1.632932532,
	default  = "kg",
	link     = "Myanmar units of measurement#Mass",
    },
    ["billion tonne"] = {
	target   = "e9t",
    },
    ["kilogram"] = {
	target   = "kg",
    },
    ["kilotonne"] = {
	target   = "kt",
    },
    ["lbs"] = {
	target   = "lb",
    },
    ["lbt"] = {
	target   = "troy pound",
    },
    ["lcwt"] = {
	target   = "Lcwt",
    },
    ["long ton"] = {
	target   = "LT",
    },
    ["mcg"] = {
	target   = "μg",
    },
    ["million tonne"] = {
	target   = "e6t",
    },
    ["scwt"] = {
	target   = "Scwt",
    },
    ["short ton"] = {
	target   = "ST",
    },
    ["stone"] = {
	target   = "st",
    },
    ["thousand tonne"] = {
	target   = "e3t",
    },
    ["tonnes"] = {
	target   = "t",
    },
    ["kg/kW"] = {
	name1    = "kilogram per kilowatt",
	name2    = "kilograms per kilowatt",
	symbol   = "kg/kW",
	utype    = "mass per unit power",
	scale    = 0.001,
	default  = "lb/hp",
	link     = "Kilowatt",
    },
    ["lb/hp"] = {
	name1    = "pound per horsepower",
	name2    = "pounds per horsepower",
	symbol   = "lb/hp",
	utype    = "mass per unit power",
	scale    = 0.00060827738784176115,
	default  = "kg/kW",
	link     = "Horsepower",
    },
    ["kg/h"] = {
	per      = { "kg", "h" },
	utype    = "mass per unit time",
	default  = "lb/h",
    },
    ["lb/h"] = {
	per      = { "lb", "h" },
	utype    = "mass per unit time",
	default  = "kg/h",
    },
    ["g-mol/d"] = {
	name1    = "gram-mole per day",
	name2    = "gram-moles per day",
	symbol   = "g&amp;#8209;mol/d",
	utype    = "molar rate",
	scale    = 1.1574074074074073e-5,
	default  = "μmol/s",
	link     = "Mole (unit)",
    },
    ["g-mol/h"] = {
	name1    = "gram-mole per hour",
	name2    = "gram-moles per hour",
	symbol   = "g&amp;#8209;mol/h",
	utype    = "molar rate",
	scale    = 0.00027777777777777778,
	default  = "mmol/s",
	link     = "Mole (unit)",
    },
    ["g-mol/min"] = {
	name1    = "gram-mole per minute",
	name2    = "gram-moles per minute",
	symbol   = "g&amp;#8209;mol/min",
	utype    = "molar rate",
	scale    = 0.016666666666666666,
	default  = "g-mol/s",
	link     = "Mole (unit)",
    },
    ["g-mol/s"] = {
	name1    = "gram-mole per second",
	name2    = "gram-moles per second",
	symbol   = "g&amp;#8209;mol/s",
	utype    = "molar rate",
	scale    = 1,
	default  = "lb-mol/min",
	link     = "Mole (unit)",
    },
    ["gmol/d"] = {
	name1    = "gram-mole per day",
	name2    = "gram-moles per day",
	symbol   = "gmol/d",
	utype    = "molar rate",
	scale    = 1.1574074074074073e-5,
	default  = "μmol/s",
	link     = "Mole (unit)",
    },
    ["gmol/h"] = {
	name1    = "gram-mole per hour",
	name2    = "gram-moles per hour",
	symbol   = "gmol/h",
	utype    = "molar rate",
	scale    = 0.00027777777777777778,
	default  = "mmol/s",
	link     = "Mole (unit)",
    },
    ["gmol/min"] = {
	name1    = "gram-mole per minute",
	name2    = "gram-moles per minute",
	symbol   = "gmol/min",
	utype    = "molar rate",
	scale    = 0.016666666666666666,
	default  = "gmol/s",
	link     = "Mole (unit)",
    },
    ["gmol/s"] = {
	name1    = "gram-mole per second",
	name2    = "gram-moles per second",
	symbol   = "gmol/s",
	utype    = "molar rate",
	scale    = 1,
	default  = "lbmol/min",
	link     = "Mole (unit)",
    },
    ["kmol/d"] = {
	name1    = "kilomole per day",
	name2    = "kilomoles per day",
	symbol   = "kmol/d",
	utype    = "molar rate",
	scale    = 0.011574074074074073,
	default  = "mmol/s",
	link     = "Mole (unit)",
    },
    ["kmol/h"] = {
	name1    = "kilomole per hour",
	name2    = "kilomoles per hour",
	symbol   = "kmol/h",
	utype    = "molar rate",
	scale    = 0.27777777777777779,
	default  = "mol/s",
	link     = "Mole (unit)",
    },
    ["kmol/min"] = {
	name1    = "kilomole per minute",
	name2    = "kilomoles per minute",
	symbol   = "kmol/min",
	utype    = "molar rate",
	scale    = 16.666666666666668,
	default  = "mol/s",
	link     = "Kilomole (unit)",
    },
    ["kmol/s"] = {
	name1    = "kilomole per second",
	name2    = "kilomoles per second",
	symbol   = "kmol/s",
	utype    = "molar rate",
	scale    = 1000,
	default  = "lb-mol/s",
	link     = "Mole (unit)",
    },
    ["lb-mol/d"] = {
	name1    = "pound-mole per day",
	name2    = "pound-moles per day",
	symbol   = "lb&amp;#8209;mol/d",
	utype    = "molar rate",
	scale    = 0.0052499116898148141,
	default  = "mmol/s",
	link     = "Mole (unit)#Other units called \"mole\"",
    },
    ["lb-mol/h"] = {
	name1    = "pound-mole per hour",
	name2    = "pound-moles per hour",
	symbol   = "lb&amp;#8209;mol/h",
	utype    = "molar rate",
	scale    = 0.12599788055555555,
	default  = "mol/s",
	link     = "Mole (unit)#Other units called \"mole\"",
    },
    ["lb-mol/min"] = {
	name1    = "pound-mole per minute",
	name2    = "pound-moles per minute",
	symbol   = "lb&amp;#8209;mol/min",
	utype    = "molar rate",
	scale    = 7.5598728333333334,
	default  = "mol/s",
	link     = "Mole (unit)#Other units called \"mole\"",
    },
    ["lb-mol/s"] = {
	name1    = "pound-mole per second",
	name2    = "pound-moles per second",
	symbol   = "lb&amp;#8209;mol/s",
	utype    = "molar rate",
	scale    = 453.59237,
	default  = "kmol/s",
	link     = "Mole (unit)#Other units called \"mole\"",
    },
    ["lbmol/d"] = {
	name1    = "pound-mole per day",
	name2    = "pound-moles per day",
	symbol   = "lbmol/d",
	utype    = "molar rate",
	scale    = 0.0052499116898148141,
	default  = "mmol/s",
	link     = "Mole (unit)#Other units called \"mole\"",
    },
    ["lbmol/h"] = {
	name1    = "pound-mole per hour",
	name2    = "pound-moles per hour",
	symbol   = "lbmol/h",
	utype    = "molar rate",
	scale    = 0.12599788055555555,
	default  = "mol/s",
	link     = "Mole (unit)#Other units called \"mole\"",
    },
    ["lbmol/min"] = {
	name1    = "pound-mole per minute",
	name2    = "pound-moles per minute",
	symbol   = "lbmol/min",
	utype    = "molar rate",
	scale    = 7.5598728333333334,
	default  = "mol/s",
	link     = "Mole (unit)#Other units called \"mole\"",
    },
    ["lbmol/s"] = {
	name1    = "pound-mole per second",
	name2    = "pound-moles per second",
	symbol   = "lbmol/s",
	utype    = "molar rate",
	scale    = 453.59237,
	default  = "kmol/s",
	link     = "Mole (unit)#Other units called \"mole\"",
    },
    ["mmol/s"] = {
	name1    = "millimole per second",
	name2    = "millimoles per second",
	symbol   = "mmol/s",
	utype    = "molar rate",
	scale    = 0.001,
	default  = "lb-mol/d",
	link     = "Mole (unit)",
    },
    ["mol/d"] = {
	name1    = "mole per day",
	name2    = "moles per day",
	symbol   = "mol/d",
	utype    = "molar rate",
	scale    = 1.1574074074074073e-5,
	default  = "μmol/s",
	link     = "Mole (unit)",
    },
    ["mol/h"] = {
	name1    = "mole per hour",
	name2    = "moles per hour",
	symbol   = "mol/h",
	utype    = "molar rate",
	scale    = 0.00027777777777777778,
	default  = "mmol/s",
	link     = "Mole (unit)",
    },
    ["mol/min"] = {
	name1    = "mole per minute",
	name2    = "moles per minute",
	symbol   = "mol/min",
	utype    = "molar rate",
	scale    = 0.016666666666666666,
	default  = "mol/s",
	link     = "Mole (unit)",
    },
    ["mol/s"] = {
	name1    = "mole per second",
	name2    = "moles per second",
	symbol   = "mol/s",
	utype    = "molar rate",
	scale    = 1,
	default  = "lb-mol/min",
	link     = "Mole (unit)",
    },
    ["μmol/s"] = {
	name1    = "micromole per second",
	name2    = "micromoles per second",
	symbol   = "μmol/s",
	utype    = "molar rate",
	scale    = 0.000001,
	default  = "lb-mol/d",
	link     = "Mole (unit)",
    },
    ["umol/s"] = {
	target   = "μmol/s",
    },
    ["/acre"] = {
	name1    = "per acre",
	name2    = "per acre",
	symbol   = "/acre",
	utype    = "per unit area",
	scale    = 0.00024710538146716532,
	default  = "/ha",
	link     = "Acre",
    },
    ["/ha"] = {
	name1    = "per hectare",
	name2    = "per hectare",
	symbol   = "/ha",
	utype    = "per unit area",
	scale    = 100e-6,
	default  = "/acre",
	link     = "Hectare",
    },
    ["/sqcm"] = {
	name1    = "per square centimetre",
	name1_us = "per square centimeter",
	name2    = "per square centimetre",
	name2_us = "per square centimeter",
	symbol   = "/cm&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "per unit area",
	scale    = 1e4,
	default  = "/sqin",
	link     = "Square centimetre",
    },
    ["/sqin"] = {
	name1    = "per square inch",
	name2    = "per square inch",
	symbol   = "/in&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "per unit area",
	scale    = 1550.0031000062002,
	default  = "/sqcm",
	link     = "Square inch",
    },
    ["/sqkm"] = {
	name1    = "per square kilometre",
	name1_us = "per square kilometer",
	name2    = "per square kilometre",
	name2_us = "per square kilometer",
	symbol   = "/km&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "per unit area",
	scale    = 1e-6,
	default  = "/sqmi",
	link     = "Square kilometre",
    },
    ["/sqmi"] = {
	name1    = "per square mile",
	name2    = "per square mile",
	symbol   = "/sq&amp;nbsp;mi",
	utype    = "per unit area",
	scale    = 3.8610215854244582e-7,
	default  = "/sqkm",
	link     = "Square mile",
    },
    ["PD/acre"] = {
	name1    = "inhabitant per acre",
	name2    = "inhabitants per acre",
	symbol   = "/acre",
	utype    = "per unit area",
	scale    = 0.00024710538146716532,
	default  = "PD/ha",
	link     = "Acre",
    },
    ["PD/ha"] = {
	name1    = "inhabitant per hectare",
	name2    = "inhabitants per hectare",
	symbol   = "/ha",
	utype    = "per unit area",
	scale    = 100e-6,
	default  = "PD/acre",
	link     = "Hectare",
    },
    ["PD/sqkm"] = {
	name1    = "inhabitant per square kilometre",
	name1_us = "inhabitant per square kilometer",
	name2    = "inhabitants per square kilometre",
	name2_us = "inhabitants per square kilometer",
	symbol   = "/km&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "per unit area",
	scale    = 1e-6,
	default  = "PD/sqmi",
	link     = "Square kilometre",
    },
    ["PD/sqmi"] = {
	name1    = "inhabitant per square mile",
	name2    = "inhabitants per square mile",
	symbol   = "/sq&amp;nbsp;mi",
	utype    = "per unit area",
	scale    = 3.8610215854244582e-7,
	default  = "PD/sqkm",
	link     = "Square mile",
    },
    ["/cm2"] = {
	target   = "/sqcm",
    },
    ["/in2"] = {
	target   = "/sqin",
    },
    ["/km2"] = {
	target   = "/sqkm",
    },
    ["pd/acre"] = {
	target   = "PD/acre",
    },
    ["pd/ha"] = {
	target   = "PD/ha",
    },
    ["PD/km2"] = {
	target   = "PD/sqkm",
    },
    ["pd/km2"] = {
	target   = "PD/sqkm",
    },
    ["PD/km²"] = {
	target   = "PD/sqkm",
    },
    ["pd/sqkm"] = {
	target   = "PD/sqkm",
    },
    ["pd/sqmi"] = {
	target   = "PD/sqmi",
    },
    ["/l"] = {
	name1    = "per litre",
	name1_us = "per liter",
	name2    = "per litre",
	name2_us = "per liter",
	symbol   = "/l",
	utype    = "per unit volume",
	scale    = 1000,
	default  = "/usgal",
	link     = "Litre",
    },
    ["/USgal"] = {
	name1    = "per gallon",
	name2    = "per gallon",
	symbol   = "/gal",
	utype    = "per unit volume",
	scale    = 264.172052,
	default  = "/l",
	link     = "US gallon",
	customary= 2,
    },
    ["/usgal"] = {
	target   = "/USgal",
    },
    ["bhp"] = {
	name1    = "brake horsepower",
	name2    = "brake horsepower",
	symbol   = "bhp",
	utype    = "power",
	scale    = 745.69987158227022,
	default  = "kW",
	link     = "Horsepower#Brake horsepower",
    },
    ["Cal/d"] = {
	name1    = "large calorie per day",
	name2    = "large calories per day",
	symbol   = "Cal/d",
	utype    = "power",
	scale    = 0.048425925925925928,
	default  = "kJ/d",
	link     = "Calorie",
    },
    ["Cal/h"] = {
	name1    = "large calorie per hour",
	name2    = "large calories per hour",
	symbol   = "Cal/h",
	utype    = "power",
	scale    = 1.1622222222222223,
	default  = "kJ/h",
	link     = "Calorie",
    },
    ["cal/h"] = {
	name1    = "calorie per hour",
	name2    = "calories per hour",
	symbol   = "cal/h",
	utype    = "power",
	scale    = 0.0011622222222222223,
	default  = "W",
	link     = "Calorie",
    },
    ["CV"] = {
	name1    = "metric horsepower",
	name2    = "metric horsepower",
	symbol   = "CV",
	utype    = "power",
	scale    = 735.49875,
	default  = "kW",
    },
    ["hk"] = {
	name1    = "metric horsepower",
	name2    = "metric horsepower",
	symbol   = "hk",
	utype    = "power",
	scale    = 735.49875,
	default  = "kW",
    },
    ["hp"] = {
	name1    = "horsepower",
	name2    = "horsepower",
	symbol   = "hp",
	utype    = "power",
	scale    = 745.69987158227022,
	default  = "kW",
    },
    ["hp-electric"] = {
	name1    = "electric horsepower",
	name2    = "electric horsepower",
	symbol   = "hp",
	utype    = "power",
	scale    = 746,
	default  = "kW",
	link     = "Horsepower#Electrical horsepower",
    },
    ["hp-electrical"] = {
	name1    = "electrical horsepower",
	name2    = "electrical horsepower",
	symbol   = "hp",
	utype    = "power",
	scale    = 746,
	default  = "kW",
	link     = "Horsepower#Electrical horsepower",
    },
    ["hp-metric"] = {
	name1    = "metric horsepower",
	name2    = "metric horsepower",
	symbol   = "hp",
	utype    = "power",
	scale    = 735.49875,
	default  = "kW",
    },
    ["ihp"] = {
	name1    = "indicated horsepower",
	name2    = "indicated horsepower",
	symbol   = "ihp",
	utype    = "power",
	scale    = 745.69987158227022,
	default  = "kW",
	link     = "Horsepower#Indicated horsepower",
    },
    ["kcal/h"] = {
	name1    = "kilocalorie per hour",
	name2    = "kilocalories per hour",
	symbol   = "kcal/h",
	utype    = "power",
	scale    = 1.1622222222222223,
	default  = "kW",
	link     = "Calorie",
    },
    ["kJ/d"] = {
	name1    = "kilojoule per day",
	name2    = "kilojoules per day",
	symbol   = "kJ/d",
	utype    = "power",
	scale    = 0.011574074074074073,
	default  = "Cal/d",
	link     = "Kilojoule",
    },
    ["kJ/h"] = {
	name1    = "kilojoule per hour",
	name2    = "kilojoules per hour",
	symbol   = "kJ/h",
	utype    = "power",
	scale    = 0.27777777777777779,
	default  = "W",
	link     = "Kilojoule",
    },
    ["PS"] = {
	name1    = "metric horsepower",
	name2    = "metric horsepower",
	symbol   = "PS",
	utype    = "power",
	scale    = 735.49875,
	default  = "kW",
    },
    ["shp"] = {
	name1    = "shaft horsepower",
	name2    = "shaft horsepower",
	symbol   = "shp",
	utype    = "power",
	scale    = 745.69987158227022,
	default  = "kW",
	link     = "Horsepower#Shaft horsepower",
    },
    ["W"] = {
	_name1   = "watt",
	_symbol  = "W",
	utype    = "power",
	scale    = 1,
	prefixes = 1,
	default  = "hp",
	link     = "Watt",
    },
    ["BTU/h"] = {
	per      = { "BTU", "h" },
	utype    = "power",
	default  = "W",
    },
    ["Btu/h"] = {
	per      = { "Btu", "h" },
	utype    = "power",
	default  = "W",
    },
    ["BHP"] = {
	target   = "bhp",
    },
    ["btu/h"] = {
	target   = "BTU/h",
    },
    ["HP"] = {
	target   = "hp",
    },
    ["Hp"] = {
	target   = "hp",
    },
    ["hp-mechanical"] = {
	target   = "hp",
    },
    ["IHP"] = {
	target   = "ihp",
    },
    ["SHP"] = {
	target   = "shp",
    },
    ["whp"] = {
	target   = "hp",
    },
    ["hp/lb"] = {
	name1    = "horsepower per pound",
	name2    = "horsepower per pound",
	symbol   = "hp/lb",
	utype    = "power per unit mass",
	scale    = 1643.986806,
	default  = "kW/kg",
	link     = "Power-to-weight ratio",
    },
    ["hp/LT"] = {
	name1    = "horsepower per long ton",
	name2    = "horsepower per long ton",
	symbol   = "hp/LT",
	utype    = "power per unit mass",
	scale    = 0.73392268125000004,
	default  = "kW/t",
	link     = "Power-to-weight ratio",
    },
    ["hp/ST"] = {
	name1    = "horsepower per short ton",
	name2    = "horsepower per short ton",
	symbol   = "hp/ST",
	utype    = "power per unit mass",
	scale    = 0.821993403,
	default  = "kW/t",
	link     = "Power-to-weight ratio",
    },
    ["hp/t"] = {
	name1    = "horsepower per tonne",
	name2    = "horsepower per tonne",
	symbol   = "hp/t",
	utype    = "power per unit mass",
	scale    = 0.74569987158227022,
	default  = "kW/t",
	link     = "Power-to-weight ratio",
    },
    ["kW/kg"] = {
	name1    = "kilowatt per kilogram",
	name2    = "kilowatts per kilogram",
	symbol   = "kW/kg",
	utype    = "power per unit mass",
	scale    = 1000,
	default  = "hp/lb",
	link     = "Power-to-weight ratio",
    },
    ["kW/t"] = {
	name1    = "kilowatt per tonne",
	name2    = "kilowatts per tonne",
	symbol   = "kW/t",
	utype    = "power per unit mass",
	scale    = 1,
	default  = "PS/t",
	link     = "Power-to-weight ratio",
    },
    ["PS/t"] = {
	name1    = "metric horsepower per tonne",
	name2    = "metric horsepower per tonne",
	symbol   = "PS/t",
	utype    = "power per unit mass",
	scale    = 0.73549875,
	default  = "kW/t",
	link     = "Power-to-weight ratio",
    },
    ["shp/lb"] = {
	name1    = "shaft horsepower per pound",
	name2    = "shaft horsepower per pound",
	symbol   = "shp/lb",
	utype    = "power per unit mass",
	scale    = 1643.986806,
	default  = "kW/kg",
	link     = "Power-to-weight ratio",
    },
    ["hp/tonne"] = {
	target   = "hp/t",
	symbol   = "hp/tonne",
	default  = "kW/tonne",
    },
    ["kW/tonne"] = {
	target   = "kW/t",
	symbol   = "kW/tonne",
    },
    ["-lb/in2"] = {
	name1    = "pound per square inch",
	name2    = "pounds per square inch",
	symbol   = "lb/in&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "pressure",
	scale    = 6894.7572931683608,
	default  = "kPa kgf/cm2",
	link     = "Pounds per square inch",
    },
    ["atm"] = {
	name1    = "standard atmosphere",
	symbol   = "atm",
	utype    = "pressure",
	scale    = 101325,
	default  = "kPa",
	link     = "Atmosphere (unit)",
    },
    ["Ba"] = {
	name1    = "barye",
	symbol   = "Ba",
	utype    = "pressure",
	scale    = 0.1,
	default  = "Pa",
    },
    ["bar"] = {
	symbol   = "bar",
	utype    = "pressure",
	scale    = 100000,
	default  = "kPa",
	link     = "Bar (unit)",
    },
    ["dbar"] = {
	name1    = "decibar",
	symbol   = "dbar",
	utype    = "pressure",
	scale    = 10000,
	default  = "kPa",
	link     = "Bar (unit)",
    },
    ["inHg"] = {
	name1    = "inch of mercury",
	name2    = "inches of mercury",
	symbol   = "inHg",
	utype    = "pressure",
	scale    = 3386.388640341,
	default  = "kPa",
    },
    ["kBa"] = {
	name1    = "kilobarye",
	symbol   = "kBa",
	utype    = "pressure",
	scale    = 100,
	default  = "hPa",
	link     = "Barye",
    },
    ["kg-f/cm2"] = {
	name1    = "kilogram-force per square centimetre",
	name1_us = "kilogram-force per square centimeter",
	name2    = "kilograms-force per square centimetre",
	name2_us = "kilograms-force per square centimeter",
	symbol   = "kg&lt;sub&gt;f&lt;/sub&gt;/cm&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "pressure",
	scale    = 98066.5,
	default  = "psi",
	link     = "Kilogram-force",
    },
    ["kg/cm2"] = {
	name1    = "kilogram per square centimetre",
	name1_us = "kilogram per square centimeter",
	name2    = "kilograms per square centimetre",
	name2_us = "kilograms per square centimeter",
	symbol   = "kg/cm&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "pressure",
	scale    = 98066.5,
	default  = "psi",
	link     = "Kilogram-force",
    },
    ["kgf/cm2"] = {
	name1    = "kilogram-force per square centimetre",
	name1_us = "kilogram-force per square centimeter",
	name2    = "kilograms-force per square centimetre",
	name2_us = "kilograms-force per square centimeter",
	symbol   = "kgf/cm&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "pressure",
	scale    = 98066.5,
	default  = "psi",
	link     = "Kilogram-force",
    },
    ["ksi"] = {
	name1    = "kilopound per square inch",
	name2    = "kilopounds per square inch",
	symbol   = "ksi",
	utype    = "pressure",
	scale    = 6894757.2931683613,
	default  = "MPa",
	link     = "Pounds per square inch",
    },
    ["lbf/in2"] = {
	name1    = "pound-force per square inch",
	name2    = "pounds-force per square inch",
	symbol   = "lbf/in&lt;sup&gt;2&lt;/sup&gt;",
	utype    = "pressure",
	scale    = 6894.7572931683608,
	default  = "kPa kgf/cm2",
	link     = "Pounds-force per square inch",
    },
    ["mb"] = {
	name1    = "millibar",
	symbol   = "mb",
	utype    = "pressure",
	scale    = 100,
	default  = "hPa",
	link     = "Bar (unit)",
    },
    ["mbar"] = {
	name1    = "millibar",
	symbol   = "mbar",
	utype    = "pressure",
	scale    = 100,
	default  = "hPa",
	link     = "Bar (unit)",
    },
    ["mmHg"] = {
	name1    = "millimetre of mercury",
	name1_us = "millimeter of mercury",
	name2    = "millimetres of mercury",
	name2_us = "millimeters of mercury",
	symbol   = "mmHg",
	utype    = "pressure",
	scale    = 133.322387415,
	default  = "kPa",
	link     = "Millimeter of mercury",
    },
    ["Pa"] = {
	_name1   = "pascal",
	_symbol  = "Pa",
	utype    = "pressure",
	scale    = 1,
	prefixes = 1,
	default  = "psi",
	link     = "Pascal (unit)",
    },
    ["psf"] = {
	name1    = "pound per square foot",
	name2    = "pounds per square foot",
	symbol   = "psf",
	utype    = "pressure",
	scale    = 47.880258980335839,
	default  = "kPa",
	link     = "Pounds per square inch",
    },
    ["psi"] = {
	name1    = "pound per square inch",
	name2    = "pounds per square inch",
	symbol   = "psi",
	utype    = "pressure",
	scale    = 6894.7572931683608,
	default  = "kPa",
	link     = "Pounds per square inch",
    },
    ["Torr"] = {
	name1    = "torr",
	symbol   = "Torr",
	utype    = "pressure",
	scale    = 133.32236842105263,
	default  = "kPa",
    },
    ["N/cm2"] = {
	per      = { "N", "cm2" },
	utype    = "pressure",
	default  = "psi",
    },
    ["N/m2"] = {
	per      = { "N", "m2" },
	utype    = "pressure",
	default  = "psi",
    },
    ["g/cm2"] = {
	per      = { "g", "cm2" },
	utype    = "pressure",
	default  = "lb/sqft",
	multiplier= 9.80665,
    },
    ["g/m2"] = {
	per      = { "g", "m2" },
	utype    = "pressure",
	default  = "lb/sqft",
	multiplier= 9.80665,
    },
    ["kg/ha"] = {
	per      = { "kg", "ha" },
	utype    = "pressure",
	default  = "lb/acre",
	multiplier= 9.80665,
    },
    ["kg/m2"] = {
	per      = { "kg", "m2" },
	utype    = "pressure",
	default  = "lb/sqft",
	multiplier= 9.80665,
    },
    ["lb/1000sqft"] = {
	per      = { "lb", "1000sqft" },
	utype    = "pressure",
	default  = "g/m2",
	multiplier= 9.80665,
    },
    ["lb/acre"] = {
	per      = { "lb", "acre" },
	utype    = "pressure",
	default  = "kg/ha",
	multiplier= 9.80665,
    },
    ["lb/sqft"] = {
	per      = { "lb", "sqft" },
	utype    = "pressure",
	default  = "kg/m2",
	multiplier= 9.80665,
    },
    ["lb/sqyd"] = {
	per      = { "lb", "sqyd" },
	utype    = "pressure",
	default  = "kg/m2",
	multiplier= 9.80665,
    },
    ["LT/acre"] = {
	per      = { "LT", "acre" },
	utype    = "pressure",
	default  = "t/ha",
	multiplier= 9.80665,
    },
    ["MT/ha"] = {
	per      = { "MT", "ha" },
	utype    = "pressure",
	default  = "LT/acre ST/acre",
	multiplier= 9.80665,
    },
    ["oz/sqft"] = {
	per      = { "oz", "sqft" },
	utype    = "pressure",
	default  = "g/m2",
	multiplier= 9.80665,
    },
    ["oz/sqyd"] = {
	per      = { "oz", "sqyd" },
	utype    = "pressure",
	default  = "g/m2",
	multiplier= 9.80665,
    },
    ["ST/acre"] = {
	per      = { "ST", "acre" },
	utype    = "pressure",
	default  = "t/ha",
	multiplier= 9.80665,
    },
    ["t/ha"] = {
	per      = { "t", "ha" },
	utype    = "pressure",
	default  = "LT/acre ST/acre",
	multiplier= 9.80665,
    },
    ["tonne/acre"] = {
	per      = { "tonne", "acre" },
	utype    = "pressure",
	default  = "tonne/ha",
	multiplier= 9.80665,
    },
    ["tonne/ha"] = {
	per      = { "tonne", "ha" },
	utype    = "pressure",
	default  = "tonne/acre",
	multiplier= 9.80665,
    },
    ["kgfpsqcm"] = {
	target   = "kgf/cm2",
    },
    ["kgpsqcm"] = {
	target   = "kg/cm2",
    },
    ["kN/m2"] = {
	target   = "kPa",
    },
    ["lb/in2"] = {
	target   = "lbf/in2",
    },
    ["torr"] = {
	target   = "Torr",
    },
    ["Bq"] = {
	_name1   = "becquerel",
	_symbol  = "Bq",
	utype    = "radioactivity",
	scale    = 1,
	prefixes = 1,
	default  = "pCi",
	link     = "Becquerel",
    },
    ["Ci"] = {
	_name1   = "curie",
	_symbol  = "Ci",
	utype    = "radioactivity",
	scale    = 3.7e10,
	prefixes = 1,
	default  = "GBq",
	link     = "Curie",
    },
    ["Rd"] = {
	_name1   = "rutherford",
	_symbol  = "Rd",
	utype    = "radioactivity",
	scale    = 1e6,
	prefixes = 1,
	default  = "MBq",
	link     = "Rutherford (unit)",
    },
    ["cm/h"] = {
	name1    = "centimetre per hour",
	name1_us = "centimeter per hour",
	name2    = "centimetres per hour",
	name2_us = "centimeters per hour",
	symbol   = "cm/h",
	utype    = "speed",
	scale    = 2.7777777777777775e-6,
	default  = "in/h",
	link     = "Metre per second",
    },
    ["cm/s"] = {
	name1    = "centimetre per second",
	name1_us = "centimeter per second",
	name2    = "centimetres per second",
	name2_us = "centimeters per second",
	symbol   = "cm/s",
	utype    = "speed",
	scale    = 0.01,
	default  = "in/s",
	link     = "Metre per second",
    },
    ["cm/year"] = {
	name1    = "centimetre per year",
	name1_us = "centimeter per year",
	name2    = "centimetres per year",
	name2_us = "centimeters per year",
	symbol   = "cm/year",
	utype    = "speed",
	scale    = 3.168873850681143e-10,
	default  = "in/year",
	link     = "Orders of magnitude (speed)",
    },
    ["foot/s"] = {
	name1    = "foot per second",
	name2    = "foot per second",
	symbol   = "ft/s",
	utype    = "speed",
	scale    = 0.3048,
	default  = "m/s",
    },
    ["ft/min"] = {
	name1    = "foot per minute",
	name2    = "feet per minute",
	symbol   = "ft/min",
	utype    = "speed",
	scale    = 0.00508,
	default  = "m/min",
	link     = "Feet per second",
    },
    ["ft/s"] = {
	name1    = "foot per second",
	name2    = "feet per second",
	symbol   = "ft/s",
	utype    = "speed",
	scale    = 0.3048,
	default  = "m/s",
	link     = "Feet per second",
    },
    ["furlong per fortnight"] = {
	name2    = "furlongs per fortnight",
	symbol   = "furlong per fortnight",
	usename  = 1,
	utype    = "speed",
	scale    = 0.00016630952380952381,
	default  = "km/h mph",
	link     = "FFF system",
    },
    ["in/h"] = {
	name1    = "inch per hour",
	name2    = "inches per hour",
	symbol   = "in/h",
	utype    = "speed",
	scale    = 7.0555555555555559e-6,
	default  = "cm/h",
	link     = "Inch",
    },
    ["in/s"] = {
	name1    = "inch per second",
	name2    = "inches per second",
	symbol   = "in/s",
	utype    = "speed",
	scale    = 0.0254,
	default  = "cm/s",
	link     = "Inch",
    },
    ["in/year"] = {
	name1    = "inch per year",
	name2    = "inches per year",
	symbol   = "in/year",
	utype    = "speed",
	scale    = 8.0489395807301024e-10,
	default  = "cm/year",
	link     = "Orders of magnitude (speed)",
    },
    ["isp"] = {
	name1    = "second",
	symbol   = "s",
	utype    = "speed",
	scale    = 9.80665,
	default  = "km/s",
	link     = "Specific impulse",
    },
    ["km/d"] = {
	name1    = "kilometre per day",
	name1_us = "kilometer per day",
	name2    = "kilometres per day",
	name2_us = "kilometers per day",
	symbol   = "km/d",
	utype    = "speed",
	scale    = 1.1574074074074074e-2,
	default  = "mi/d",
	link     = "Orders of magnitude (speed)",
    },
    ["km/h"] = {
	name1    = "kilometre per hour",
	name1_us = "kilometer per hour",
	name2    = "kilometres per hour",
	name2_us = "kilometers per hour",
	symbol   = "km/h",
	utype    = "speed",
	scale    = 0.27777777777777779,
	default  = "mph",
	link     = "Kilometres per hour",
    },
    ["km/s"] = {
	name1    = "kilometre per second",
	name1_us = "kilometer per second",
	name2    = "kilometres per second",
	name2_us = "kilometers per second",
	symbol   = "km/s",
	utype    = "speed",
	scale    = 1000,
	default  = "mi/s",
	link     = "Metre per second",
    },
    ["kn"] = {
	name1    = "knot",
	symbol   = "kn",
	utype    = "speed",
	scale    = 0.51444444444444448,
	default  = "km/h mph",
	link     = "Knot (unit)",
    },
    ["kNs/kg"] = {
	name2    = "kN&amp;#8209;s/kg",
	symbol   = "kN&amp;#8209;s/kg",
	utype    = "speed",
	scale    = 1000,
	default  = "isp",
	link     = "Specific impulse",
    },
    ["m/min"] = {
	name1    = "metre per minute",
	name1_us = "meter per minute",
	name2    = "metres per minute",
	name2_us = "meters per minute",
	symbol   = "m/min",
	utype    = "speed",
	scale    = 0.016666666666666666,
	default  = "ft/min",
	link     = "Metre per second",
    },
    ["m/s"] = {
	name1    = "metre per second",
	name1_us = "meter per second",
	name2    = "metres per second",
	name2_us = "meters per second",
	symbol   = "m/s",
	utype    = "speed",
	scale    = 1,
	default  = "ft/s",
    },
    ["Mach"] = {
	name2    = "Mach",
	symbol   = "Mach",
	utype    = "speed",
	builtin  = "mach",
	scale    = 0,
	iscomplex= true,
	default  = "km/h mph",
	link     = "Mach number",
    },
    ["mi/d"] = {
	name1    = "mile per day",
	name2    = "miles per day",
	symbol   = "mi/d",
	utype    = "speed",
	scale    = 1.8626666666666667e-2,
	default  = "km/d",
	link     = "Orders of magnitude (speed)",
    },
    ["mi/s"] = {
	name1    = "mile per second",
	name2    = "miles per second",
	symbol   = "mi/s",
	utype    = "speed",
	scale    = 1609.344,
	default  = "km/s",
	link     = "Mile",
    },
    ["mm/h"] = {
	name1    = "millimetre per hour",
	name1_us = "millimeter per hour",
	name2    = "millimetres per hour",
	name2_us = "millimeters per hour",
	symbol   = "mm/h",
	utype    = "speed",
	scale    = 2.7777777777777781e-7,
	default  = "in/h",
	link     = "Metre per second",
    },
    ["mph"] = {
	name1    = "mile per hour",
	name2    = "miles per hour",
	symbol   = "mph",
	utype    = "speed",
	scale    = 0.44704,
	default  = "km/h",
	link     = "Miles per hour",
    },
    ["Ns/kg"] = {
	name2    = "N&amp;#8209;s/kg",
	symbol   = "N&amp;#8209;s/kg",
	utype    = "speed",
	scale    = 1,
	default  = "isp",
	link     = "Specific impulse",
    },
    ["si tsfc"] = {
	name2    = "g/(kN⋅s)",
	symbol   = "g/(kN⋅s)",
	utype    = "speed",
	scale    = 9.9999628621379242e-7,
	invert   = -1,
	iscomplex= true,
	default  = "tsfc",
	link     = "Thrust specific fuel consumption",
    },
    ["tsfc"] = {
	name2    = "lb/(lbf⋅h)",
	symbol   = "lb/(lbf⋅h)",
	utype    = "speed",
	scale    = 2.832545036049801e-5,
	invert   = -1,
	iscomplex= true,
	default  = "si tsfc",
	link     = "Thrust specific fuel consumption",
    },
    ["cm/y"] = {
	target   = "cm/year",
    },
    ["cm/yr"] = {
	target   = "cm/year",
    },
    ["in/y"] = {
	target   = "in/year",
    },
    ["in/yr"] = {
	target   = "in/year",
    },
    ["knot"] = {
	target   = "kn",
    },
    ["knots"] = {
	target   = "kn",
    },
    ["kph"] = {
	target   = "km/h",
    },
    ["mi/h"] = {
	target   = "mph",
    },
    ["mm/s"] = {
	per      = { "mm", "s" },
	utype    = "speed",
	default  = "in/s",
	link     = "Metre per second",
    },
    ["C"] = {
	name1    = "degree Celsius",
	name2    = "degrees Celsius",
	symbol   = "°C",
	usesymbol= 1,
	utype    = "temperature",
	scale    = 1,
	offset   = -273.15,
	iscomplex= true,
	istemperature= true,
	default  = "F",
	link     = "Celsius",
    },
    ["F"] = {
	name1    = "degree Fahrenheit",
	name2    = "degrees Fahrenheit",
	symbol   = "°F",
	usesymbol= 1,
	utype    = "temperature",
	scale    = 0.55555555555555558,
	offset   = 32-273.15*(9/5),
	iscomplex= true,
	istemperature= true,
	default  = "C",
	link     = "Fahrenheit",
    },
    ["K"] = {
	_name1   = "kelvin",
	_symbol  = "K",
	usesymbol= 1,
	utype    = "temperature",
	scale    = 1,
	offset   = 0,
	iscomplex= true,
	istemperature= true,
	prefixes = 1,
	default  = "C F",
	link     = "Kelvin",
    },
    ["keVT"] = {
	name1    = "kiloelectronvolt",
	symbol   = "keV",
	utype    = "temperature",
	scale    = 11.604505e6,
	offset   = 0,
	iscomplex= true,
	default  = "MK",
	link     = "Electronvolt",
    },
    ["R"] = {
	name1    = "degree Rankine",
	name2    = "degrees Rankine",
	symbol   = "°R",
	usesymbol= 1,
	utype    = "temperature",
	scale    = 0.55555555555555558,
	offset   = 0,
	iscomplex= true,
	istemperature= true,
	default  = "K F C",
	link     = "Rankine scale",
    },
    ["Celsius"] = {
	target   = "C",
    },
    ["°C"] = {
	target   = "C",
    },
    ["°F"] = {
	target   = "F",
    },
    ["°R"] = {
	target   = "R",
    },
    ["C-change"] = {
	name1    = "degree Celsius change",
	name2    = "degrees Celsius change",
	symbol   = "°C",
	usesymbol= 1,
	utype    = "temperature change",
	scale    = 1,
	default  = "F-change",
	link     = "Celsius",
    },
    ["F-change"] = {
	name1    = "degree Fahrenheit change",
	name2    = "degrees Fahrenheit change",
	symbol   = "°F",
	usesymbol= 1,
	utype    = "temperature change",
	scale    = 0.55555555555555558,
	default  = "C-change",
	link     = "Fahrenheit",
    },
    ["K-change"] = {
	name1    = "kelvin change",
	name2    = "kelvins change",
	symbol   = "K",
	usesymbol= 1,
	utype    = "temperature change",
	scale    = 1,
	default  = "F-change",
	link     = "Kelvin",
    },
    ["°C-change"] = {
	target   = "C-change",
    },
    ["°F-change"] = {
	target   = "F-change",
    },
    ["century"] = {
	name1    = "century",
	name2    = "centuries",
	symbol   = "ha",
	utype    = "time",
	scale    = 3155760000,
	default  = "Gs",
    },
    ["d"] = {
	name1    = "day",
	symbol   = "d",
	utype    = "time",
	scale    = 86400,
	default  = "ks",
    },
    ["decade"] = {
	name1    = "decade",
	symbol   = "daa",
	utype    = "time",
	scale    = 315576000,
	default  = "Ms",
    },
    ["dog year"] = {
	name1    = "dog year",
	symbol   = "dog yr",
	utype    = "time",
	scale    = 220903200,
	default  = "years",
	link     = "List of unusual units of measurement#Dog year",
    },
    ["fortnight"] = {
	symbol   = "fortnight",
	usename  = 1,
	utype    = "time",
	scale    = 1209600,
	default  = "week",
    },
    ["h"] = {
	name1    = "hour",
	symbol   = "h",
	utype    = "time",
	scale    = 3600,
	default  = "ks",
    },
    ["long billion year"] = {
	name1    = "billion years",
	name2    = "billion years",
	symbol   = "Ta",
	utype    = "time",
	scale    = 31557600000000000000,
	default  = "Es",
	link     = "Annum",
    },
    ["millennium"] = {
	name1    = "millennium",
	name2    = "millennia",
	symbol   = "ka",
	utype    = "time",
	scale    = 31557600000,
	default  = "Gs",
    },
    ["milliard year"] = {
	name1    = "milliard years",
	name2    = "milliard years",
	symbol   = "Ga",
	utype    = "time",
	scale    = 31557600000000000,
	default  = "Ps",
	link     = "Annum",
    },
    ["million year"] = {
	name1    = "million years",
	name2    = "million years",
	symbol   = "Ma",
	utype    = "time",
	scale    = 31557600000000,
	default  = "Ts",
	link     = "Annum",
    },
    ["min"] = {
	name1    = "minute",
	symbol   = "min",
	utype    = "time",
	scale    = 60,
	default  = "s",
    },
    ["month"] = {
	symbol   = "month",
	usename  = 1,
	utype    = "time",
	scale    = 2629800,
	default  = "Ms",
    },
    ["months"] = {
	name1    = "month",
	symbol   = "mo",
	utype    = "time",
	scale    = 2629800,
	default  = "year",
    },
    ["s"] = {
	_name1   = "second",
	_symbol  = "s",
	utype    = "time",
	scale    = 1,
	prefixes = 1,
	default  = "min",
	link     = "Second",
    },
    ["short billion year"] = {
	name1    = "billion years",
	name2    = "billion years",
	symbol   = "Ga",
	utype    = "time",
	scale    = 31557600000000000,
	default  = "Ps",
	link     = "Annum",
    },
    ["short trillion year"] = {
	name1    = "trillion years",
	name2    = "trillion years",
	symbol   = "Ta",
	utype    = "time",
	scale    = 31557600000000000000,
	default  = "Es",
	link     = "Annum",
    },
    ["thousand million year"] = {
	name1    = "thousand million years",
	name2    = "thousand million years",
	symbol   = "Ga",
	utype    = "time",
	scale    = 31557600000000000,
	default  = "Ps",
	link     = "Annum",
    },
    ["wk"] = {
	symbol   = "week",
	usename  = 1,
	utype    = "time",
	scale    = 604800,
	default  = "Ms",
    },
    ["year"] = {
	name1    = "year",
	symbol   = "a",
	utype    = "time",
	scale    = 31557600,
	default  = "Ms",
	link     = "Annum",
    },
    ["years"] = {
	name1    = "year",
	symbol   = "yr",
	utype    = "time",
	scale    = 31557600,
	default  = "Ms",
	link     = "Annum",
    },
    ["byr"] = {
	target   = "short billion year",
    },
    ["day"] = {
	target   = "d",
    },
    ["days"] = {
	target   = "d",
    },
    ["dog yr"] = {
	target   = "dog year",
    },
    ["Gyr"] = {
	target   = "thousand million year",
    },
    ["hour"] = {
	target   = "h",
    },
    ["hours"] = {
	target   = "h",
    },
    ["kMyr"] = {
	target   = "thousand million year",
    },
    ["kmyr"] = {
	target   = "thousand million year",
    },
    ["kyr"] = {
	target   = "millennium",
    },
    ["long byr"] = {
	target   = "long billion year",
    },
    ["minute"] = {
	target   = "min",
    },
    ["minutes"] = {
	target   = "min",
    },
    ["mth"] = {
	target   = "month",
    },
    ["Myr"] = {
	target   = "million year",
    },
    ["myr"] = {
	target   = "million year",
    },
    ["second"] = {
	target   = "s",
    },
    ["seconds"] = {
	target   = "s",
    },
    ["tmyr"] = {
	target   = "thousand million year",
    },
    ["tryr"] = {
	target   = "short trillion year",
    },
    ["tyr"] = {
	target   = "millennium",
    },
    ["week"] = {
	target   = "wk",
    },
    ["weeks"] = {
	target   = "wk",
    },
    ["yr"] = {
	target   = "year",
    },
    ["kg.m"] = {
	name1    = "kilogram metre",
	name1_us = "kilogram meter",
	symbol   = "kg⋅m",
	utype    = "torque",
	scale    = 9.80665,
	default  = "Nm lbft",
	link     = "Kilogram metre (torque)",
    },
    ["kgf.m"] = {
	name1    = "kilogram force-metre",
	name1_us = "kilogram force-meter",
	symbol   = "kgf⋅m",
	utype    = "torque",
	scale    = 9.80665,
	default  = "Nm lbfft",
	link     = "Kilogram metre (torque)",
    },
    ["kgm"] = {
	name1    = "kilogram metre",
	name1_us = "kilogram meter",
	symbol   = "kg⋅m",
	utype    = "torque",
	scale    = 9.80665,
	default  = "Nm lbfft",
	link     = "Kilogram metre (torque)",
    },
    ["lb-fft"] = {
	name1    = "pound force-foot",
	name2    = "pound force-feet",
	symbol   = "ft⋅lb&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "torque",
	scale    = 1.3558179483314004,
	default  = "Nm",
	link     = "Pound-foot (torque)",
    },
    ["lb.ft"] = {
	name1    = "pound force-foot",
	name2    = "pound force-feet",
	symbol   = "lb⋅ft",
	utype    = "torque",
	scale    = 1.3558179483314004,
	default  = "Nm",
	link     = "Pound-foot (torque)",
    },
    ["lb.in"] = {
	name1    = "pound force-inch",
	symbol   = "lb⋅in",
	utype    = "torque",
	scale    = 0.1129848290276167,
	default  = "mN.m",
	link     = "Pound-foot (torque)",
    },
    ["lbfft"] = {
	name1    = "pound force-foot",
	name2    = "pound force-feet",
	symbol   = "lbf⋅ft",
	utype    = "torque",
	scale    = 1.3558179483314004,
	default  = "Nm",
	link     = "Pound-foot (torque)",
    },
    ["lbft"] = {
	name1    = "pound-foot",
	name2    = "pound-feet",
	symbol   = "lb⋅ft",
	utype    = "torque",
	scale    = 1.3558179483314004,
	default  = "Nm",
	link     = "Pound-foot (torque)",
    },
    ["m.kg-f"] = {
	name1    = "metre kilogram-force",
	name1_us = "meter kilogram-force",
	name2    = "metre kilograms-force",
	name2_us = "meter kilograms-force",
	symbol   = "m⋅kg&lt;sub&gt;f&lt;/sub&gt;",
	utype    = "torque",
	scale    = 9.80665,
	default  = "Nm lbfft",
	link     = "Kilogram metre (torque)",
    },
    ["m.kgf"] = {
	name1    = "metre kilogram-force",
	name1_us = "meter kilogram-force",
	name2    = "metre kilograms-force",
	name2_us = "meter kilograms-force",
	symbol   = "m⋅kgf",
	utype    = "torque",
	scale    = 9.80665,
	default  = "Nm lbfft",
	link     = "Kilogram metre (torque)",
    },
    ["mN.m"] = {
	name1    = "millinewton metre",
	name1_us = "millinewton meter",
	symbol   = "mN⋅m",
	utype    = "torque",
	scale    = 0.001,
	default  = "lb.in",
	link     = "Newton metre",
    },
    ["Nm"] = {
	_name1   = "newton metre",
	_name1_us= "newton meter",
	_symbol  = "N⋅m",
	utype    = "torque",
	alttype  = "energy",
	scale    = 1,
	prefixes = 1,
	default  = "lbfft",
	link     = "Newton metre",
    },
    ["kN/m"] = {
	per      = { "kN", "-m-stiff" },
	utype    = "torque",
	default  = "lbf/in",
    },
    ["lbf/in"] = {
	per      = { "lbf", "-in-stiff" },
	utype    = "torque",
	default  = "kN/m",
    },
    ["lb-f.ft"] = {
	target   = "lb-fft",
    },
    ["lbf.ft"] = {
	target   = "lbfft",
    },
    ["lbf·ft"] = {
	target   = "lbfft",
    },
    ["lb·ft"] = {
	target   = "lb.ft",
    },
    ["mkg-f"] = {
	target   = "m.kg-f",
    },
    ["mkgf"] = {
	target   = "m.kgf",
    },
    ["N.m"] = {
	target   = "Nm",
    },
    ["N·m"] = {
	target   = "Nm",
    },
    ["-12USoz(mL)serve"] = {
	name1_us = "12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;mL) serving",
	symbol   = "12&amp;nbsp;US&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;mL) serving",
	sym_us   = "12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;mL) serving",
	utype    = "volume",
	scale    = 0.00035488235475000004,
	default  = "mL",
	link     = "Beverage can#Standard sizes",
    },
    ["-12USoz(ml)serve"] = {
	name1_us = "12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;ml) serving",
	symbol   = "12&amp;nbsp;US&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;ml) serving",
	sym_us   = "12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;ml) serving",
	utype    = "volume",
	scale    = 0.00035488235475000004,
	default  = "ml",
	link     = "Beverage can#Standard sizes",
    },
    ["-12USozserve"] = {
	name1_us = "12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz serving",
	symbol   = "12&amp;nbsp;US&amp;nbsp;fl&amp;nbsp;oz serving",
	sym_us   = "12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz serving",
	utype    = "volume",
	scale    = 0.00035488235475000004,
	default  = "mL",
	link     = "Beverage can#Standard sizes",
    },
    ["acre foot"] = {
	name1    = "acre foot",
	name2    = "acre foot",
	symbol   = "acre⋅ft",
	utype    = "volume",
	scale    = 1233.48183754752,
	default  = "m3",
    },
    ["acre ft"] = {
	name1    = "acre foot",
	name2    = "acre feet",
	symbol   = "acre⋅ft",
	utype    = "volume",
	scale    = 1233.48183754752,
	default  = "m3",
    },
    ["AUtbsp"] = {
	name1    = "Australian tablespoon",
	symbol   = "AU&amp;nbsp;tbsp",
	utype    = "volume",
	scale    = 0.000020,
	default  = "ml",
    },
    ["Bcuft"] = {
	name1    = "billion cubic foot",
	name2    = "billion cubic feet",
	symbol   = "billion cu&amp;nbsp;ft",
	utype    = "volume",
	scale    = 28316846.592,
	default  = "Gl",
	link     = "Cubic foot",
    },
    ["bdft"] = {
	name1    = "board foot",
	name2    = "board feet",
	symbol   = "bd&amp;nbsp;ft",
	utype    = "volume",
	scale    = 0.0023597372167,
	default  = "m3",
    },
    ["board feet"] = {
	name2    = "board feet",
	symbol   = "board foot",
	usename  = 1,
	utype    = "volume",
	scale    = 0.0023597372167,
	default  = "m3",
    },
    ["board foot"] = {
	name2    = "board foot",
	symbol   = "board foot",
	usename  = 1,
	utype    = "volume",
	scale    = 0.0023597372167,
	default  = "m3",
    },
    ["cc"] = {
	name1    = "cubic centimetre",
	name1_us = "cubic centimeter",
	symbol   = "cc",
	utype    = "volume",
	scale    = 0.000001,
	default  = "cuin",
    },
    ["CID"] = {
	name1    = "cubic inch",
	name2    = "cubic inches",
	symbol   = "cu&amp;nbsp;in",
	utype    = "volume",
	scale    = 0.000016387064,
	default  = "cc",
	link     = "Cubic inch#Engine displacement",
    },
    ["cord"] = {
	symbol   = "cord",
	utype    = "volume",
	scale    = 3.624556363776,
	default  = "m3",
	link     = "Cord (unit)",
    },
    ["cufoot"] = {
	name1    = "cubic foot",
	name2    = "cubic foot",
	symbol   = "cu&amp;nbsp;ft",
	utype    = "volume",
	scale    = 0.028316846592,
	default  = "m3",
    },
    ["cuft"] = {
	name1    = "cubic foot",
	name2    = "cubic feet",
	symbol   = "cu&amp;nbsp;ft",
	utype    = "volume",
	scale    = 0.028316846592,
	default  = "m3",
    },
    ["cuin"] = {
	name1    = "cubic inch",
	name2    = "cubic inches",
	symbol   = "cu&amp;nbsp;in",
	utype    = "volume",
	scale    = 0.000016387064,
	default  = "cm3",
    },
    ["cumi"] = {
	name1    = "cubic mile",
	symbol   = "cu&amp;nbsp;mi",
	utype    = "volume",
	scale    = 4168181825.440579584,
	default  = "km3",
    },
    ["cuyd"] = {
	name1    = "cubic yard",
	symbol   = "cu&amp;nbsp;yd",
	utype    = "volume",
	scale    = 0.764554857984,
	default  = "m3",
    },
    ["firkin"] = {
	symbol   = "firkin",
	usename  = 1,
	utype    = "volume",
	scale    = 0.04091481,
	default  = "l impgal USgal",
	link     = "Firkin (unit)",
    },
    ["foot3"] = {
	target   = "cufoot",
    },
    ["Goilbbl"] = {
	name1    = "billion barrels",
	name2    = "billion barrels",
	symbol   = "Gbbl",
	utype    = "volume",
	scale    = 158987294.928,
	default  = "v * 1.58987294928 &lt; 10 ! e6 ! e9 ! m3",
	link     = "Barrel (unit)#Oil barrel",
    },
    ["gr water"] = {
	name1    = "grains water",
	name2    = "grains water",
	symbol   = "gr H&lt;sub&gt;2&lt;/sub&gt;O",
	utype    = "volume",
	scale    = 0.00000006479891,
	default  = "cm3",
	link     = "Grain (unit)",
    },
    ["grt"] = {
	name1    = "gross register ton",
	symbol   = "grt",
	utype    = "volume",
	scale    = 2.8316846592,
	default  = "m3",
	link     = "Gross register tonnage",
    },
    ["impbbl"] = {
	name1    = "imperial barrel",
	symbol   = "imp&amp;nbsp;bbl",
	utype    = "volume",
	scale    = 0.16365924,
	default  = "l impgal USgal",
	link     = "Barrel (unit)",
    },
    ["impbsh"] = {
	name1    = "imperial bushel",
	symbol   = "imp&amp;nbsp;bsh",
	utype    = "volume",
	scale    = 0.03636872,
	default  = "l impgal USdrygal",
    },
    ["impbu"] = {
	name1    = "imperial bushel",
	symbol   = "imp&amp;nbsp;bu",
	utype    = "volume",
	scale    = 0.03636872,
	default  = "m3",
    },
    ["impgal"] = {
	name1    = "imperial gallon",
	symbol   = "imp&amp;nbsp;gal",
	utype    = "volume",
	scale    = 0.00454609,
	default  = "l USgal",
    },
    ["impgi"] = {
	name1    = "gill",
	symbol   = "gi",
	utype    = "volume",
	scale    = 0.0001420653125,
	default  = "ml USoz",
	link     = "Gill (unit)",
    },
    ["impkenning"] = {
	name1    = "imperial kenning",
	symbol   = "kenning",
	utype    = "volume",
	scale    = 0.01818436,
	default  = "l USdrygal",
	link     = "Kenning (unit)",
    },
    ["impoz"] = {
	name1    = "imperial fluid ounce",
	symbol   = "imp&amp;nbsp;fl&amp;nbsp;oz",
	utype    = "volume",
	scale    = 0.0000284130625,
	default  = "ml USoz",
    },
    ["imppk"] = {
	name1    = "imperial peck",
	symbol   = "pk",
	utype    = "volume",
	scale    = 0.00909218,
	default  = "l USdrygal",
	link     = "Peck",
    },
    ["imppt"] = {
	name1    = "imperial pint",
	symbol   = "imp&amp;nbsp;pt",
	utype    = "volume",
	scale    = 0.00056826125,
	default  = "l",
    },
    ["impqt"] = {
	name1    = "imperial quart",
	symbol   = "imp&amp;nbsp;qt",
	utype    = "volume",
	scale    = 0.0011365225,
	default  = "ml USoz",
	customary= 3,
    },
    ["kilderkin"] = {
	symbol   = "kilderkin",
	usename  = 1,
	utype    = "volume",
	scale    = 0.08182962,
	default  = "l impgal USgal",
    },
    ["koilbbl"] = {
	name1    = "thousand barrels",
	name2    = "thousand barrels",
	symbol   = "kbbl",
	utype    = "volume",
	scale    = 158.987294928,
	default  = "v * 1.58987294928 &lt; 10 ! ! e3 ! m3",
	link     = "Barrel (unit)#Oil barrel",
    },
    ["L"] = {
	_name1   = "litre",
	_name1_us= "liter",
	_symbol  = "L",
	utype    = "volume",
	scale    = 0.001,
	prefixes = 1,
	default  = "impgal USgal",
	link     = "Litre",
    },
    ["l"] = {
	_name1   = "litre",
	_name1_us= "liter",
	_symbol  = "l",
	utype    = "volume",
	scale    = 0.001,
	prefixes = 1,
	default  = "impgal USgal",
	link     = "Litre",
    },
    ["m3"] = {
	_name1   = "cubic metre",
	_name1_us= "cubic meter",
	_symbol  = "m&lt;sup&gt;3&lt;/sup&gt;",
	prefix_position= 7,
	utype    = "volume",
	scale    = 1,
	prefixes = 3,
	default  = "cuft",
	link     = "Cubic metre",
    },
    ["Mbbl"] = {
	name1    = "thousand barrels",
	name2    = "thousand barrels",
	symbol   = "Mbbl",
	utype    = "volume",
	scale    = 158.987294928,
	default  = "v * 1.58987294928 &lt; 10 ! e3 ! ! m3",
	link     = "Barrel (unit)#Oil barrel",
    },
    ["MMoilbbl"] = {
	name1    = "million barrels",
	name2    = "million barrels",
	symbol   = "MMbbl",
	utype    = "volume",
	scale    = 158987.294928,
	default  = "v * 1.58987294928 &lt; 10 ! e3 ! e6 ! m3",
	link     = "Barrel (unit)#Oil barrel",
    },
    ["Moilbbl"] = {
	name1    = "million barrels",
	name2    = "million barrels",
	symbol   = "Mbbl",
	utype    = "volume",
	scale    = 158987.294928,
	default  = "v * 1.58987294928 &lt; 10 ! e3 ! e6 ! m3",
	link     = "Barrel (unit)#Oil barrel",
    },
    ["MTON"] = {
	name1    = "measurement ton",
	symbol   = "MTON",
	utype    = "volume",
	scale    = 1.13267386368,
	default  = "m3",
    },
    ["MUSgal"] = {
	name1    = "million US gallons",
	name1_us = "million U.S. gallons",
	name2    = "million US gallons",
	name2_us = "million U.S. gallons",
	symbol   = "million US&amp;nbsp;gal",
	sym_us   = "million U.S.&amp;nbsp;gal",
	utype    = "volume",
	scale    = 3785.411784,
	default  = "Ml",
	link     = "US gallon",
    },
    ["oilbbl"] = {
	name1    = "barrel",
	symbol   = "bbl",
	utype    = "volume",
	scale    = 0.158987294928,
	default  = "m3",
	link     = "Barrel (unit)#Oil barrel",
    },
    ["stere"] = {
	symbol   = "stere",
	usename  = 1,
	utype    = "volume",
	scale    = 1,
	default  = "cuft",
    },
    ["Toilbbl"] = {
	name1    = "trillion barrels",
	name2    = "trillion barrels",
	symbol   = "Tbbl",
	utype    = "volume",
	scale    = 158987294928,
	default  = "v * 1.58987294928 &lt; 10 ! e9 ! e12 ! m3",
	link     = "Barrel (unit)#Oil barrel",
    },
    ["USbbl"] = {
	name1    = "US barrel",
	name1_us = "U.S. barrel",
	symbol   = "US&amp;nbsp;bbl",
	sym_us   = "U.S.&amp;nbsp;bbl",
	utype    = "volume",
	scale    = 0.119240471196,
	default  = "l USgal impgal",
	link     = "Barrel (unit)",
    },
    ["USbeerbbl"] = {
	name1    = "US beer barrel",
	name1_us = "U.S. beer barrel",
	symbol   = "US&amp;nbsp;bbl",
	sym_us   = "U.S.&amp;nbsp;bbl",
	utype    = "volume",
	scale    = 0.117347765304,
	default  = "l USgal impgal",
	link     = "Barrel (unit)",
    },
    ["USbsh"] = {
	name1    = "US bushel",
	name1_us = "U.S. bushel",
	symbol   = "US&amp;nbsp;bsh",
	sym_us   = "U.S.&amp;nbsp;bsh",
	utype    = "volume",
	scale    = 0.03523907016688,
	default  = "l USdrygal impgal",
	link     = "Bushel",
    },
    ["USbu"] = {
	name1    = "US bushel",
	name1_us = "U.S. bushel",
	symbol   = "US&amp;nbsp;bu",
	sym_us   = "U.S.&amp;nbsp;bu",
	utype    = "volume",
	scale    = 0.03523907016688,
	default  = "l USdrygal impgal",
	link     = "Bushel",
    },
    ["USdrybbl"] = {
	name1    = "US dry barrel",
	name1_us = "U.S. dry barrel",
	symbol   = "US&amp;nbsp;dry&amp;nbsp;bbl",
	sym_us   = "U.S.&amp;nbsp;dry&amp;nbsp;bbl",
	utype    = "volume",
	scale    = 0.11562819898508,
	default  = "m3",
	link     = "Barrel (unit)",
    },
    ["USdrygal"] = {
	name1    = "US dry gallon",
	name1_us = "U.S. dry gallon",
	symbol   = "US&amp;nbsp;dry&amp;nbsp;gal",
	sym_us   = "U.S.&amp;nbsp;dry&amp;nbsp;gal",
	utype    = "volume",
	scale    = 0.00440488377086,
	default  = "l",
	link     = "Gallon",
    },
    ["USdrypt"] = {
	name1    = "US dry pint",
	name1_us = "U.S. dry pint",
	symbol   = "US&amp;nbsp;dry&amp;nbsp;pt",
	sym_us   = "U.S.&amp;nbsp;dry&amp;nbsp;pt",
	utype    = "volume",
	scale    = 0.0005506104713575,
	default  = "ml",
	link     = "Pint",
    },
    ["USdryqt"] = {
	name1    = "US dry quart",
	name1_us = "U.S. dry quart",
	symbol   = "US&amp;nbsp;dry&amp;nbsp;qt",
	sym_us   = "U.S.&amp;nbsp;dry&amp;nbsp;qt",
	utype    = "volume",
	scale    = 0.001101220942715,
	default  = "ml",
	link     = "Quart",
    },
    ["USflgal"] = {
	name1    = "US gallon",
	name1_us = "U.S. gallon",
	symbol   = "US fl gal",
	sym_us   = "U.S.&amp;nbsp;fl&amp;nbsp;gal",
	utype    = "volume",
	scale    = 0.003785411784,
	default  = "l impgal",
	link     = "Gallon",
    },
    ["USgal"] = {
	name1    = "US gallon",
	name1_us = "U.S. gallon",
	symbol   = "US&amp;nbsp;gal",
	sym_us   = "U.S.&amp;nbsp;gal",
	utype    = "volume",
	scale    = 0.003785411784,
	default  = "l impgal",
    },
    ["USgi"] = {
	name1    = "gill",
	symbol   = "gi",
	utype    = "volume",
	scale    = 0.0001182941183,
	default  = "ml impoz",
	link     = "Gill (unit)",
    },
    ["USkenning"] = {
	name1    = "US kenning",
	name1_us = "U.S. kenning",
	symbol   = "US&amp;nbsp;kenning",
	sym_us   = "U.S.&amp;nbsp;kenning",
	utype    = "volume",
	scale    = 0.01761953508344,
	default  = "l impgal",
	link     = "Kenning (unit)",
    },
    ["USmin"] = {
	name1    = "US minim",
	name1_us = "U.S. minim",
	symbol   = "US&amp;nbsp;min",
	sym_us   = "U.S.&amp;nbsp;min",
	utype    = "volume",
	scale    = 0.000000061611519921875,
	default  = "ml",
	link     = "Minim (unit)",
    },
    ["USoz"] = {
	name1    = "US fluid ounce",
	name1_us = "U.S. fluid ounce",
	symbol   = "US&amp;nbsp;fl&amp;nbsp;oz",
	sym_us   = "U.S.&amp;nbsp;fl&amp;nbsp;oz",
	utype    = "volume",
	scale    = 0.0000295735295625,
	default  = "ml",
    },
    ["USpk"] = {
	name1    = "US peck",
	name1_us = "U.S. peck",
	symbol   = "US&amp;nbsp;pk",
	sym_us   = "U.S.&amp;nbsp;pk",
	utype    = "volume",
	scale    = 0.00880976754172,
	default  = "l impgal",
	link     = "Peck",
    },
    ["USpt"] = {
	name1    = "US pint",
	name1_us = "U.S. pint",
	symbol   = "US&amp;nbsp;pt",
	sym_us   = "U.S.&amp;nbsp;pt",
	utype    = "volume",
	scale    = 0.000473176473,
	default  = "l imppt",
	link     = "Pint",
    },
    ["USqt"] = {
	name1    = "US quart",
	name1_us = "U.S. quart",
	symbol   = "US&amp;nbsp;qt",
	sym_us   = "U.S.&amp;nbsp;qt",
	utype    = "volume",
	scale    = 0.000946352946,
	default  = "ml",
	link     = "Quart",
	customary= 1,
    },
    ["USquart"] = {
	name1    = "US quart",
	name1_us = "U.S. quart",
	symbol   = "US&amp;nbsp;qt",
	sym_us   = "U.S.&amp;nbsp;qt",
	utype    = "volume",
	scale    = 0.000946352946,
	default  = "ml impoz",
	link     = "Quart",
    },
    ["UStbsp"] = {
	name1    = "US tablespoon",
	name1_us = "U.S. tablespoon",
	symbol   = "US&amp;nbsp;tbsp",
	sym_us   = "U.S.&amp;nbsp;tbsp",
	utype    = "volume",
	scale    = 1.4786764781250001e-5,
	default  = "ml",
    },
    ["winecase"] = {
	symbol   = "case",
	usename  = 1,
	utype    = "volume",
	scale    = 0.009,
	default  = "l",
	link     = "Case (goods)",
    },
    ["*U.S.drygal"] = {
	target   = "USdrygal",
	sp_us    = true,
	customary= 2,
    },
    ["*U.S.gal"] = {
	target   = "USgal",
	sp_us    = true,
	default  = "L impgal",
	customary= 2,
    },
    ["+USdrygal"] = {
	target   = "USdrygal",
	customary= 1,
    },
    ["+usfloz"] = {
	target   = "USoz",
	link     = "Fluid ounce",
	customary= 1,
    },
    ["+USgal"] = {
	target   = "USgal",
	customary= 1,
    },
    ["+USoz"] = {
	target   = "USoz",
	customary= 1,
    },
    ["@impgal"] = {
	target   = "impgal",
	link     = "Gallon",
	customary= 3,
    },
    ["acre feet"] = {
	target   = "acre ft",
    },
    ["acre-feet"] = {
	target   = "acre ft",
    },
    ["acre-ft"] = {
	target   = "acre ft",
    },
    ["acre.foot"] = {
	target   = "acre foot",
    },
    ["acre.ft"] = {
	target   = "acre ft",
    },
    ["acre·ft"] = {
	target   = "acre ft",
    },
    ["bushels"] = {
	target   = "USbsh",
    },
    ["cid"] = {
	target   = "CID",
    },
    ["ft3"] = {
	target   = "cuft",
    },
    ["gal"] = {
	target   = "USgal",
    },
    ["gallon"] = {
	shouldbe = "Use %{USgal%} for US gallons or %{impgal%} for imperial gallons (not %{gallon%})",
    },
    ["gallons"] = {
	shouldbe = "Use %{USgal%} for US gallons or %{impgal%} for imperial gallons (not %{gallons%})",
    },
    ["Gcuft"] = {
	target   = "e9cuft",
    },
    ["impfloz"] = {
	target   = "impoz",
    },
    ["Impgal"] = {
	target   = "impgal",
    },
    ["in3"] = {
	target   = "cuin",
	symbol   = "in&lt;sup&gt;3&lt;/sup&gt;",
    },
    ["kcuft"] = {
	target   = "e3cuft",
    },
    ["kcum"] = {
	target   = "e3m3",
    },
    ["km³"] = {
	target   = "km3",
    },
    ["liter"] = {
	target   = "L",
	sp_us    = true,
    },
    ["liters"] = {
	target   = "L",
	sp_us    = true,
    },
    ["litre"] = {
	target   = "L",
    },
    ["litres"] = {
	target   = "L",
    },
    ["Mcuft"] = {
	target   = "e6cuft",
    },
    ["Mcum"] = {
	target   = "e6m3",
    },
    ["Mft3"] = {
	target   = "e6cuft",
    },
    ["mi3"] = {
	target   = "cumi",
    },
    ["m³"] = {
	target   = "m3",
    },
    ["Pcuft"] = {
	target   = "e15cuft",
    },
    ["pt"] = {
	shouldbe = "Use %{USpt%} for US pints or %{imppt%} for imperial pints (not %{pt%})",
    },
    ["qt"] = {
	shouldbe = "Use %{USqt%} for US quarts or %{impqt%} for imperial quarts (not %{qt%})",
    },
    ["Tcuft"] = {
	target   = "e12cuft",
    },
    ["Tft3"] = {
	target   = "e12cuft",
    },
    ["U.S.bbl"] = {
	target   = "USbbl",
	sp_us    = true,
	default  = "l U.S.gal impgal",
    },
    ["U.S.beerbbl"] = {
	target   = "USbeerbbl",
	sp_us    = true,
	default  = "l U.S.gal impgal",
    },
    ["U.S.bsh"] = {
	target   = "USbsh",
	sp_us    = true,
	default  = "l U.S.drygal impgal",
    },
    ["U.S.bu"] = {
	target   = "USbu",
	sp_us    = true,
	default  = "l U.S.drygal impgal",
    },
    ["U.S.drybbl"] = {
	target   = "USdrybbl",
	sp_us    = true,
    },
    ["U.S.drygal"] = {
	target   = "USdrygal",
	sp_us    = true,
    },
    ["U.S.drypt"] = {
	target   = "USdrypt",
	sp_us    = true,
    },
    ["U.S.dryqt"] = {
	target   = "USdryqt",
	sp_us    = true,
    },
    ["U.S.flgal"] = {
	target   = "USflgal",
	sp_us    = true,
    },
    ["U.S.floz"] = {
	target   = "USoz",
	sp_us    = true,
    },
    ["U.S.gal"] = {
	target   = "USgal",
	sp_us    = true,
	default  = "L impgal",
	link     = "U.S. gallon",
    },
    ["u.s.gal"] = {
	target   = "USgal",
	sp_us    = true,
	default  = "L impgal",
	link     = "U.S. gallon",
    },
    ["U.S.gi"] = {
	target   = "USgi",
	sp_us    = true,
    },
    ["U.S.kenning"] = {
	target   = "USkenning",
	sp_us    = true,
    },
    ["U.S.oz"] = {
	target   = "USoz",
	sp_us    = true,
    },
    ["U.S.pk"] = {
	target   = "USpk",
	sp_us    = true,
    },
    ["U.S.pt"] = {
	target   = "USpt",
	sp_us    = true,
    },
    ["U.S.qt"] = {
	target   = "USqt",
	sp_us    = true,
	default  = "L impqt",
	customary= 2,
    },
    ["usbbl"] = {
	target   = "USbbl",
    },
    ["usbeerbbl"] = {
	target   = "USbeerbbl",
    },
    ["usbsh"] = {
	target   = "USbsh",
    },
    ["usbu"] = {
	target   = "USbu",
    },
    ["usdrybbl"] = {
	target   = "USdrybbl",
    },
    ["usdrygal"] = {
	target   = "USdrygal",
    },
    ["usdrypt"] = {
	target   = "USdrypt",
    },
    ["usdryqt"] = {
	target   = "USdryqt",
    },
    ["USfloz"] = {
	target   = "USoz",
    },
    ["usfloz"] = {
	target   = "USoz",
    },
    ["USGAL"] = {
	target   = "USgal",
    },
    ["usgal"] = {
	target   = "USgal",
    },
    ["usgi"] = {
	target   = "USgi",
    },
    ["uskenning"] = {
	target   = "USkenning",
    },
    ["usoz"] = {
	target   = "USoz",
    },
    ["uspk"] = {
	target   = "USpk",
    },
    ["uspt"] = {
	target   = "USpt",
    },
    ["usqt"] = {
	target   = "USqt",
    },
    ["yd3"] = {
	target   = "cuyd",
    },
    ["cuft/sqmi"] = {
	per      = { "cuft", "sqmi" },
	utype    = "volume per unit area",
	default  = "m3/km2",
    },
    ["m3/ha"] = {
	name1    = "cubic metre per hectare",
	name1_us = "cubic meter per hectare",
	name2    = "cubic metres per hectare",
	name2_us = "cubic meters per hectare",
	symbol   = "m&lt;sup&gt;3&lt;/sup&gt;/ha",
	utype    = "volume per unit area",
	scale    = 0.0001,
	default  = "USbu/acre",
	link     = "Hectare",
    },
    ["m3/km2"] = {
	per      = { "m3", "km2" },
	utype    = "volume per unit area",
	default  = "cuft/sqmi",
    },
    ["U.S.gal/acre"] = {
	per      = { "U.S.gal", "acre" },
	utype    = "volume per unit area",
	default  = "m3/km2",
    },
    ["USbu/acre"] = {
	name2    = "US bushels per acre",
	symbol   = "US bushel per acre",
	usename  = 1,
	utype    = "volume per unit area",
	scale    = 8.7077638761350888e-6,
	default  = "m3/ha",
	link     = "Bushel",
    },
    ["USgal/acre"] = {
	per      = { "USgal", "acre" },
	utype    = "volume per unit area",
	default  = "m3/km2",
    },
    ["cuyd/mi"] = {
	per      = { "cuyd", "mi" },
	utype    = "volume per unit length",
	default  = "m3/km",
    },
    ["m3/km"] = {
	per      = { "m3", "km" },
	utype    = "volume per unit length",
	default  = "cuyd/mi",
    },
    ["mich"] = {
	combination= { "ch", "mi" },
	multiple = { 80 },
	utype    = "length",
    },
    ["michlk"] = {
	combination= { "chlk", "mi" },
	multiple = { 80 },
	utype    = "length",
    },
    ["michainlk"] = {
	combination= { "chainlk", "mi" },
	multiple = { 80 },
	utype    = "length",
    },
    ["miydftin"] = {
	combination= { "in", "ft", "yd", "mi" },
	multiple = { 12, 3, 1760 },
	utype    = "length",
    },
    ["mift"] = {
	combination= { "ft", "mi" },
	multiple = { 5280 },
	utype    = "length",
    },
    ["ydftin"] = {
	combination= { "in", "ft", "yd" },
	multiple = { 12, 3 },
	utype    = "length",
    },
    ["ydft"] = {
	combination= { "ft", "yd" },
	multiple = { 3 },
	utype    = "length",
    },
    ["ftin"] = {
	combination= { "in", "ft" },
	multiple = { 12 },
	utype    = "length",
    },
    ["footin"] = {
	combination= { "in", "foot" },
	multiple = { 12 },
	utype    = "length",
    },
    ["handin"] = {
	combination= { "in", "hand" },
	multiple = { 4 },
	utype    = "length",
    },
    ["lboz"] = {
	combination= { "oz", "lb" },
	multiple = { 16 },
	utype    = "mass",
    },
    ["stlb"] = {
	combination= { "lb", "st" },
	multiple = { 14 },
	utype    = "mass",
    },
    ["stlboz"] = {
	combination= { "oz", "lb", "st" },
	multiple = { 16, 14 },
	utype    = "mass",
    },
    ["st and lb"] = {
	combination= { "lb", "st" },
	multiple = { 14 },
	utype    = "mass",
    },
    ["GN LTf"] = {
	combination= { "GN", "-LTf" },
	utype    = "force",
    },
    ["GN LTf STf"] = {
	combination= { "GN", "-LTf", "-STf" },
	utype    = "force",
    },
    ["GN STf"] = {
	combination= { "GN", "-STf" },
	utype    = "force",
    },
    ["GN STf LTf"] = {
	combination= { "GN", "-STf", "-LTf" },
	utype    = "force",
    },
    ["kN LTf"] = {
	combination= { "kN", "-LTf" },
	utype    = "force",
    },
    ["kN LTf STf"] = {
	combination= { "kN", "-LTf", "-STf" },
	utype    = "force",
    },
    ["kN STf"] = {
	combination= { "kN", "-STf" },
	utype    = "force",
    },
    ["kN STf LTf"] = {
	combination= { "kN", "-STf", "-LTf" },
	utype    = "force",
    },
    ["LTf STf"] = {
	combination= { "-LTf", "-STf" },
	utype    = "force",
    },
    ["MN LTf"] = {
	combination= { "MN", "-LTf" },
	utype    = "force",
    },
    ["MN LTf STf"] = {
	combination= { "MN", "-LTf", "-STf" },
	utype    = "force",
    },
    ["MN STf"] = {
	combination= { "MN", "-STf" },
	utype    = "force",
    },
    ["MN STf LTf"] = {
	combination= { "MN", "-STf", "-LTf" },
	utype    = "force",
    },
    ["STf LTf"] = {
	combination= { "-STf", "-LTf" },
	utype    = "force",
    },
    ["L/100 km mpgimp"] = {
	combination= { "L/100 km", "mpgimp" },
	utype    = "fuel efficiency",
    },
    ["l/100 km mpgimp"] = {
	combination= { "l/100 km", "mpgimp" },
	utype    = "fuel efficiency",
    },
    ["L/100 km mpgUS"] = {
	combination= { "L/100 km", "mpgus" },
	utype    = "fuel efficiency",
    },
    ["L/100 km mpgus"] = {
	combination= { "L/100 km", "mpgus" },
	utype    = "fuel efficiency",
    },
    ["l/100 km mpgus"] = {
	combination= { "l/100 km", "mpgus" },
	utype    = "fuel efficiency",
    },
    ["mpgimp L/100 km"] = {
	combination= { "mpgimp", "L/100 km" },
	utype    = "fuel efficiency",
    },
    ["LT ST t"] = {
	combination= { "lt", "-ST", "t" },
	utype    = "mass",
    },
    ["LT t ST"] = {
	combination= { "lt", "t", "-ST" },
	utype    = "mass",
    },
    ["ST LT t"] = {
	combination= { "-ST", "lt", "t" },
	utype    = "mass",
    },
    ["ST t LT"] = {
	combination= { "-ST", "t", "lt" },
	utype    = "mass",
    },
    ["t LT ST"] = {
	combination= { "t", "lt", "-ST" },
	utype    = "mass",
    },
    ["ton"] = {
	combination= { "LT", "ST" },
	utype    = "mass",
    },
    ["kPa kg/cm2"] = {
	combination= { "kPa", "kgf/cm2" },
	utype    = "pressure",
    },
    ["kPa lb/in2"] = {
	combination= { "kPa", "-lb/in2" },
	utype    = "pressure",
    },
    ["floz"] = {
	combination= { "impoz", "USoz" },
	utype    = "volume",
    },
}

---------------------------------------------------------------------------
-- Do not change the data in this table because it is created by running --
-- a script that reads the wikitext from a wiki page (see note above).   --
---------------------------------------------------------------------------
local default_exceptions = {
	-- Prefixed units with a default different from that of the base unit.
	-- Each key item is a prefixed symbol (unitcode for engineering notation).
	["cm&lt;sup&gt;2&lt;/sup&gt;"] = "sqin",
	["dm&lt;sup&gt;2&lt;/sup&gt;"] = "sqin",
	["e3acre"] = "km2",
	["e3m2"] = "e6sqft",
	["e6acre"] = "km2",
	["e6ha"] = "e6acre",
	["e6km2"] = "e6sqmi",
	["e6m2"] = "e6sqft",
	["e6sqft"] = "v * 9.290304 &lt; 100 ! e3 ! e6 ! m2",
	["e6sqmi"] = "e6km2",
	["hm&lt;sup&gt;2&lt;/sup&gt;"] = "acre",
	["km&lt;sup&gt;2&lt;/sup&gt;"] = "sqmi",
	["mm&lt;sup&gt;2&lt;/sup&gt;"] = "sqin",
	["aJ"] = "eV",
	["e3BTU"] = "MJ",
	["e6BTU"] = "GJ",
	["EJ"] = "kWh",
	["fJ"] = "keV",
	["GJ"] = "kWh",
	["MJ"] = "kWh",
	["PJ"] = "kWh",
	["pJ"] = "MeV",
	["TJ"] = "kWh",
	["YJ"] = "kWh",
	["yJ"] = "μeV",
	["ZJ"] = "kWh",
	["zJ"] = "meV",
	["e12cuft/a"] = "v * 2.8316846592 &lt; 100 ! e9 ! e12 ! m3/a",
	["e12cuft/d"] = "v * 2.8316846592 &lt; 100 ! e9 ! e12 ! m3/d",
	["e12m3/a"] = "Tcuft/a",
	["e12m3/d"] = "Tcuft/d",
	["e3cuft/a"] = "v * 2.8316846592 &lt; 100 ! ! e3 ! m3/a",
	["e3cuft/d"] = "v * 2.8316846592 &lt; 100 ! ! e3 ! m3/d",
	["e3cuft/s"] = "v * 2.8316846592 &lt; 100 ! ! e3 ! m3/s",
	["e3m3/a"] = "v &lt; 28.316846592 ! k ! M ! cuft/a",
	["e3m3/d"] = "v &lt; 28.316846592 ! k ! M ! cuft/d",
	["e3m3/s"] = "v &lt; 28.316846592 ! k ! M ! cuft/s",
	["e3USgal/a"] = "v * 3.785411784 &lt; 1000 ! ! e3 ! m3/a",
	["e6cuft/a"] = "v * 2.8316846592 &lt; 100 ! e3 ! e6 ! m3/a",
	["e6cuft/d"] = "v * 2.8316846592 &lt; 100 ! e3 ! e6 ! m3/d",
	["e6cuft/s"] = "v * 2.8316846592 &lt; 100 ! e3 ! e6 ! m3/s",
	["e6m3/a"] = "v &lt; 28.316846592 ! M ! G ! cuft/a",
	["e6m3/d"] = "v &lt; 28.316846592 ! M ! G ! cuft/d",
	["e6m3/s"] = "v &lt; 28.316846592 ! e6 ! e9 ! cuft/s",
	["e6USgal/a"] = "v * 3.785411784 &lt; 1000 ! e3 ! e6 ! m3/a",
	["e9cuft/a"] = "m3/a",
	["e9cuft/d"] = "v * 2.8316846592 &lt; 100 ! e6 ! e9 ! m3/d",
	["e9m3/a"] = "v &lt; 28.316846592 ! G ! T ! cuft/a",
	["e9m3/d"] = "v &lt; 28.316846592 ! G ! T ! cuft/d",
	["e9m3/s"] = "v &lt; 28.316846592 ! e9 ! e12 ! cuft/s",
	["e9USgal/a"] = "v * 3.785411784 &lt; 1000 ! e6 ! e9 ! m3/a",
	["e9USgal/s"] = "v * 3.785411784 &lt; 1000 ! e6 ! e9 ! m3/s",
	["nN"] = "gr-f",
	["μN"] = "gr-f",
	["mN"] = "oz-f",
	["am"] = "in",
	["cm"] = "in",
	["dam"] = "ft",
	["dm"] = "in",
	["e12km"] = "e12mi",
	["e12mi"] = "e12km",
	["e3AU"] = "ly",
	["e3km"] = "e3mi",
	["e3mi"] = "e3km",
	["e6km"] = "e6mi",
	["e6mi"] = "e6km",
	["e9km"] = "AU",
	["e9mi"] = "e9km",
	["Em"] = "mi",
	["fm"] = "in",
	["Gm"] = "mi",
	["hm"] = "ft",
	["km"] = "mi",
	["mm"] = "in",
	["Mm"] = "mi",
	["nm"] = "in",
	["Pm"] = "mi",
	["pm"] = "in",
	["Tm"] = "mi",
	["Ym"] = "mi",
	["ym"] = "in",
	["Zm"] = "mi",
	["zm"] = "in",
	["μm"] = "in",
	["e12lb"] = "v * 4.5359237 &lt; 10 ! Mt ! Gt",
	["e3lb"] = "v * 4.5359237 &lt; 10 ! kg ! t",
	["e3ozt"] = "v * 0.311034768 &lt; 10 ! kg ! t",
	["e3t"] = "LT ST",
	["e6carat"] = "t",
	["e6lb"] = "v * 4.5359237 &lt; 10 ! t ! kilotonne",
	["e6ozt"] = "lb kg",
	["e6ST"] = "Mt",
	["e6t"] = "LT ST",
	["e9lb"] = "v * 4.5359237 &lt; 10 ! kilotonne ! Mt",
	["e9t"] = "LT ST",
	["Gg"] = "lb",
	["kg"] = "lb",
	["mg"] = "gr",
	["Mg"] = "LT ST",
	["ng"] = "gr",
	["μg"] = "gr",
	["mBq"] = "fCi",
	["kBq"] = "nCi",
	["MBq"] = "μCi",
	["GBq"] = "mCi",
	["TBq"] = "Ci",
	["PBq"] = "kCi",
	["EBq"] = "kCi",
	["fCi"] = "mBq",
	["pCi"] = "Bq",
	["nCi"] = "Bq",
	["μCi"] = "kBq",
	["mCi"] = "MBq",
	["kCi"] = "TBq",
	["MCi"] = "PBq",
	["ns"] = "μs",
	["μs"] = "ms",
	["ms"] = "s",
	["ks"] = "h",
	["Ms"] = "week",
	["Gs"] = "decade",
	["Ts"] = "millennium",
	["Ps"] = "million year",
	["Es"] = "thousand million year",
	["MK"] = "keVT",
	["cL"] = "impoz usoz",
	["cl"] = "impoz usoz",
	["cm&lt;sup&gt;3&lt;/sup&gt;"] = "cuin",
	["dL"] = "impoz usoz",
	["dl"] = "impoz usoz",
	["mm&lt;sup&gt;3&lt;/sup&gt;"] = "cuin",
	["dm&lt;sup&gt;3&lt;/sup&gt;"] = "cuin",
	["e12cuft"] = "v * 2.8316846592 &lt; 100 ! e9 ! e12 ! m3",
	["e12impgal"] = "v * 4.54609 &lt; 1000 ! T ! P ! l",
	["e12m3"] = "v &lt; 28.316846592 ! T ! P ! cuft",
	["e12U.S.gal"] = "v * 3.785411784 &lt; 1000 ! T ! P ! l",
	["e12USgal"] = "v * 3.785411784 &lt; 1000 ! T ! P ! l",
	["e15cuft"] = "v * 2.8316846592 &lt; 100 ! e12 ! e15 ! m3",
	["e15m3"] = "Pcuft",
	["e3bdft"] = "v * 0.23597372167 &lt; 100 ! e3 ! e6 ! m3",
	["e3cuft"] = "v * 2.8316846592 &lt; 100 ! ! e3 ! m3",
	["e3impgal"] = "v * 4.54609 &lt; 1000 ! k ! M ! l",
	["e3m3"] = "v &lt; 28.316846592 ! k ! M ! cuft",
	["e3U.S.gal"] = "v * 3.785411784 &lt; 1000 ! k ! M ! l",
	["e3USgal"] = "v * 3.785411784 &lt; 1000 ! k ! M ! l",
	["e6bdft"] = "v * 0.23597372167 &lt; 100 ! e3 ! e6 ! m3",
	["e6cuft"] = "v * 2.8316846592 &lt; 100 ! e3 ! e6 ! m3",
	["e6cuyd"] = "v * 7.64554857984 &lt; 10 ! e3 ! e6 ! m3",
	["e6impgal"] = "v * 4.54609 &lt; 1000 ! M ! G ! l",
	["e6L"] = "USgal",
	["e6m3"] = "v &lt; 28.316846592 ! M ! G ! cuft",
	["e6U.S.gal"] = "v * 3.785411784 &lt; 1000 ! M ! G ! l",
	["e6USgal"] = "v * 3.785411784 &lt; 1000 ! M ! G ! l",
	["e9bdft"] = "v * 0.23597372167 &lt; 100 ! e6 ! e9 ! m3",
	["e9cuft"] = "v * 2.8316846592 &lt; 100 ! e6 ! e9 ! m3",
	["e9impgal"] = "v * 4.54609 &lt; 1000 ! G ! T ! l",
	["e9m3"] = "v &lt; 28.316846592 ! G ! T ! cuft",
	["e9U.S.gal"] = "v * 3.785411784 &lt; 1000 ! G ! T ! l",
	["e9USgal"] = "v * 3.785411784 &lt; 1000 ! G ! T ! l",
	["GL"] = "cuft",
	["Gl"] = "cuft",
	["kL"] = "cuft",
	["kl"] = "cuft",
	["km&lt;sup&gt;3&lt;/sup&gt;"] = "cumi",
	["mL"] = "impoz usoz",
	["ml"] = "impoz usoz",
	["Ml"] = "v &lt; 28.316846592 ! e3 ! e6 ! cuft",
	["ML"] = "v &lt; 28.316846592 ! e3 ! e6 ! cuft",
	["TL"] = "cumi",
	["Tl"] = "cumi",
	["μL"] = "cuin",
	["μl"] = "cuin",
}

---------------------------------------------------------------------------
-- Do not change the data in this table because it is created by running --
-- a script that reads the wikitext from a wiki page (see note above).   --
---------------------------------------------------------------------------
local link_exceptions = {
	-- Prefixed units with a linked article different from that of the base unit.
	-- Each key item is a prefixed symbol (not unitcode).
	["mm&lt;sup&gt;2&lt;/sup&gt;"] = "Square millimetre",
	["cm&lt;sup&gt;2&lt;/sup&gt;"] = "Square centimetre",
	["dm&lt;sup&gt;2&lt;/sup&gt;"] = "Square decimetre",
	["km&lt;sup&gt;2&lt;/sup&gt;"] = "Square kilometre",
	["kJ"] = "Kilojoule",
	["MJ"] = "Megajoule",
	["fm"] = "Femtometre",
	["pm"] = "Picometre",
	["nm"] = "Nanometre",
	["μm"] = "Micrometre",
	["mm"] = "Millimetre",
	["cm"] = "Centimetre",
	["dm"] = "Decimetre",
	["dam"] = "Decametre",
	["hm"] = "Hectometre",
	["km"] = "Kilometre",
	["Mm"] = "Megametre",
	["Gm"] = "Gigametre",
	["Tm"] = "Terametre",
	["Pm"] = "Petametre",
	["Em"] = "Exametre",
	["Zm"] = "Zettametre",
	["Ym"] = "Yottametre",
	["μg"] = "Microgram",
	["mg"] = "Milligram",
	["kg"] = "Kilogram",
	["Mg"] = "Tonne",
	["yW"] = "Yoctowatt",
	["zW"] = "Zeptowatt",
	["aW"] = "Attowatt",
	["fW"] = "Femtowatt",
	["pW"] = "Picowatt",
	["nW"] = "Nanowatt",
	["μW"] = "Microwatt",
	["mW"] = "Milliwatt",
	["kW"] = "Kilowatt",
	["MW"] = "Megawatt",
	["GW"] = "Gigawatt",
	["TW"] = "Terawatt",
	["PW"] = "Petawatt",
	["EW"] = "Exawatt",
	["ZW"] = "Zettawatt",
	["YW"] = "Yottawatt",
	["as"] = "Attosecond",
	["fs"] = "Femtosecond",
	["ps"] = "Picosecond",
	["ns"] = "Nanosecond",
	["μs"] = "Microsecond",
	["ms"] = "Millisecond",
	["ks"] = "Kilosecond",
	["Ms"] = "Megasecond",
	["Gs"] = "Gigasecond",
	["Ts"] = "Terasecond",
	["Ps"] = "Petasecond",
	["Es"] = "Exasecond",
	["Zs"] = "Zettasecond",
	["Ys"] = "Yottasecond",
	["mm&lt;sup&gt;3&lt;/sup&gt;"] = "Cubic millimetre",
	["cm&lt;sup&gt;3&lt;/sup&gt;"] = "Cubic centimetre",
	["dm&lt;sup&gt;3&lt;/sup&gt;"] = "Cubic decimetre",
	["dam&lt;sup&gt;3&lt;/sup&gt;"] = "Cubic decametre",
	["km&lt;sup&gt;3&lt;/sup&gt;"] = "Cubic kilometre",
	["μL"] = "Microlitre",
	["μl"] = "Microlitre",
	["mL"] = "Millilitre",
	["ml"] = "Millilitre",
	["cL"] = "Centilitre",
	["cl"] = "Centilitre",
	["dL"] = "Decilitre",
	["dl"] = "Decilitre",
	["daL"] = "Decalitre",
	["dal"] = "Decalitre",
	["hL"] = "Hectolitre",
	["hl"] = "Hectolitre",
	["kL"] = "Kilolitre",
	["kl"] = "Kilolitre",
	["ML"] = "Megalitre",
	["Ml"] = "Megalitre",
	["GL"] = "Gigalitre",
	["Gl"] = "Gigalitre",
	["TL"] = "Teralitre",
	["Tl"] = "Teralitre",
	["PL"] = "Petalitre",
	["Pl"] = "Petalitre",
}

---------------------------------------------------------------------------
-- Do not change the data in this table because it is created by running --
-- a script that reads the wikitext from a wiki page (see note above).   --
---------------------------------------------------------------------------
local per_unit_fixups = {
	-- Automatically created per units of form "x/y" may have their unit type
	-- changed, for example, "length/time" is changed to "speed".
	-- Other adjustments can also be specified.
	["/area"] = "per unit area",
	["/volume"] = "per unit volume",
	["area/area"] = "area per unit area",
	["energy/length"] = "energy per unit length",
	["energy/mass"] = "energy per unit mass",
	["energy/time"] = { utype = "power", link = "Power (physics)" },
	["energy/volume"] = "energy per unit volume",
	["force/area"] = { utype = "pressure", link = "Pressure" },
	["length/length"] = { utype = "gradient", link = "Grade (slope)" },
	["length/time"] = { utype = "speed", link = "Speed" },
	["length/time/time"] = { utype = "acceleration", link = "Acceleration" },
	["mass/area"] = { utype = "pressure", multiplier = 9.80665 },
	["mass/length"] = "linear density",
	["mass/mass"] = "concentration",
	["mass/power"] = "mass per unit power",
	["mass/time"] = "mass per unit time",
	["mass/volume"] = { utype = "density", link = "Density" },
	["power/mass"] = "power per unit mass",
	["power/volume"] = { link = "Power density" },
	["pressure/length"] = "fracture gradient",
	["speed/time"] = { utype = "acceleration", link = "Acceleration" },
	["volume/area"] = "volume per unit area",
	["volume/length"] = "volume per unit length",
	["volume/time"] = "flow",
}

return {
	all_units = all_units,
	default_exceptions = default_exceptions,
	link_exceptions = link_exceptions,
	per_unit_fixups = per_unit_fixups,
}</text>
      <sha1>6wzcf8j5sxao123sxexk5xtzh9rc3oo</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Convert/text</title>
    <ns>828</ns>
    <id>39508461</id>
    <revision>
      <id>895419771</id>
      <parentid>845963532</parentid>
      <timestamp>2019-05-04T03:48:21Z</timestamp>
      <contributor>
        <username>Johnuniq</username>
        <id>6036800</id>
      </contributor>
      <comment>update from sandbox per [[Template talk:Convert#Module version 24]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="18706">-- Text used by Module:Convert for enwiki.
-- This is a separate module to simplify translation for use on another wiki.
-- See [[:en:Template:Convert/Transwiki guide]] if copying to another wiki.

-- Some units accept an SI prefix before the unit code, such as "kg" for kilogram.
local SIprefixes = {
	-- The prefix field is what the prefix should be, if different from the prefix used.
	['Y'] = { exponent = 24, name = 'yotta',                  },
	['Z'] = { exponent = 21, name = 'zetta',                  },
	['E'] = { exponent = 18, name = 'exa'  ,                  },
	['P'] = { exponent = 15, name = 'peta' ,                  },
	['T'] = { exponent = 12, name = 'tera' ,                  },
	['G'] = { exponent =  9, name = 'giga' ,                  },
	['M'] = { exponent =  6, name = 'mega' ,                  },
	['k'] = { exponent =  3, name = 'kilo' ,                  },
	['h'] = { exponent =  2, name = 'hecto',                  },
	['da']= { exponent =  1, name = 'deca' , name_us = 'deka' },
	['d'] = { exponent = -1, name = 'deci' ,                  },
	['c'] = { exponent = -2, name = 'centi',                  },
	['m'] = { exponent = -3, name = 'milli',                  },
	['μ'] = { exponent = -6, name = 'micro',                  },  -- key = 'GREEK SMALL LETTER MU' (U+03BC) utf-8 CE BC
	['µ'] = { exponent = -6, name = 'micro', prefix = 'μ'     },  -- key = 'MICRO SIGN' (U+00B5) utf-8 C2 B5
	['u'] = { exponent = -6, name = 'micro', prefix = 'μ'     },  -- not an SI prefix, but allow for people typing this
	['n'] = { exponent = -9, name = 'nano' ,                  },
	['p'] = { exponent =-12, name = 'pico' ,                  },
	['f'] = { exponent =-15, name = 'femto',                  },
	['a'] = { exponent =-18, name = 'atto' ,                  },
	['z'] = { exponent =-21, name = 'zepto',                  },
	['y'] = { exponent =-24, name = 'yocto',                  },
}

-- Some units can be qualified with one of the following prefixes, when linked.
local customary_units = {
	{ "US", link = "United States customary units" },
	{ "U.S.", link = "United States customary units" },
	{ "imperial", link = "Imperial units" },
	{ "imp", link = "Imperial units" },
}

-- Names when using engineering notation (a prefix of "eN" where N is a number; example "e6km").
-- key = { "name", link = "article title", exponent = numeric_key_value }
-- If lk=on and link is defined, the name of the number will appear as a link.
local eng_scales = {
	["3"]  = { "thousand", exponent = 3 },
	["6"]  = { "million", exponent = 6 },
	["9"]  = { "billion", link = "1000000000 (number)", exponent = 9 },
	["12"] = { "trillion", link = "1000000000000 (number)", exponent = 12 },
	["15"] = { "quadrillion", link = "1000000000000000 (number)", exponent = 15 },
}

local all_categories = {
	unit = "[[Category:Convert errors]]",
	option = "[[Category:Convert errors]]",
	warning = '[[Category:Convert invalid options]]',
	tracking = '[[Category:Convert tracking]]',
}

-- For some error messages, the following puts the wanted style around
-- each unit code marked like '...%{ft%}...'.
local unitcode_regex = '%%([{}])'
local unitcode_replace = { ['{'] = '"', ['}'] = '"' }  -- no longer need the more elaborate substitute used before 2013-09-28

-- All messages that may be displayed if a problem occurs.
local all_messages = {
	-- Message format string: $1=title, $2=text, $3=category, $4=anchor.
	-- Each displayed message starts with "Convert:" so can easily locate by searching article.
	cvt_format = '&lt;sup class="noprint Inline-Template" style="white-space:nowrap;"&gt;[&lt;i&gt;[[Help:Convert messages#$4|&lt;span title="Convert: $1"&gt;convert: $2&lt;/span&gt;]]&lt;/i&gt;]&lt;/sup&gt;$3&lt;span class="error"&gt;&lt;/span&gt;',
	cvt_format2 = '&lt;sup class="noprint Inline-Template" style="white-space:nowrap;"&gt;[[Help:Convert messages#$4|&lt;span title="Convert: $1"&gt;$2&lt;/span&gt;]]&lt;/sup&gt;$3&lt;span class="error"&gt;&lt;/span&gt;',
	cvt_format_preview = '&lt;strong class="error"&gt;Error in convert: $1 [[Help:Convert messages#$4|(help)]]&lt;/strong&gt;$3',
	-- Each of following messages is a table:
	-- { [1] = 'title',         -- mouseover title text
	--   [2] = 'text',          -- link text displayed in article
	--   [3] = 'category key',  -- key to lookup category in all_categories
	--   [4] = 'anchor',        -- anchor for link to relevant section on help page
	--   regex = gsub_regex,
	--   replace = gsub_table,
	-- }                    Mouseover title text                           Link text               CatKey     Anchor
	cvt_bad_input      = { 'input "$1" must be a number and unit'       , 'invalid input'       , 'option',  'invalid_input'        },
	cvt_bad_num        = { 'Value "$1" must be a number'                , 'invalid number'      , 'option',  'invalid_number'       },
	cvt_big_prec       = { 'Precision "$1" is too large'                , 'precision too large' , 'option',  'precision_too_large'  },
	cvt_invalid_num    = { 'Number has overflowed'                      , 'number overflow'     , 'option',  'number_overflow'      },
	cvt_no_num         = { 'Needs the number to be converted'           , 'needs a number'      , 'option',  'needs_number'         },
	cvt_no_num2        = { 'Needs another number for a range'           , 'needs another number', 'option',  'needs_another_number' },
	cvt_bad_frac       = { '"$1" needs an integer above 1'              , 'invalid fraction'    , 'option',  'invalid_fraction'     },
	cvt_bad_prec       = { 'Precision "$1" must be an integer'          , 'invalid precision'   , 'option',  'invalid_precision'    },
	cvt_bad_sigfig     = { '"$1" needs a positive integer'              , 'invalid sigfig'      , 'option',  'invalid_sigfig'       },
	cvt_empty_option   = { 'Ignored empty option "$1"'                  , 'empty option'        , 'option',  'empty_option'         },
	cvt_deprecated     = { 'Option "$1" is deprecated'                  , '*'                   , 'option',  'deprecated_option', format = 'cvt_format2', nowarn = true },
	cvt_no_spell       = { 'Spelling is not available'                  , 'bug, ask for help'   , 'option',  'ask_for_help'         },
	cvt_unknown_option = { 'Ignored invalid option "$1"'                , 'invalid option'      , 'option',  'invalid_option'       },
	cvt_wd_fail        = { 'Unable to access Wikidata'                  , 'wikidata problem'    , 'option',  'wikidata_problem'     },
	cvt_bad_default    = { 'Unit "$1" has an invalid default'           , 'bug, ask for help'   , 'unit'  ,  'ask_for_help'         },
	cvt_bad_unit       = { 'Unit "$1" is invalid here'                  , 'unit invalid here'   , 'unit'  ,  'unit_invalid_here'    },
	cvt_no_default     = { 'Unit "$1" has no default output unit'       , 'bug, ask for help'   , 'unit'  ,  'ask_for_help'         },
	cvt_no_unit        = { 'Needs name of unit'                         , 'needs unit name'     , 'unit'  ,  'needs_unit_name'      },
	cvt_unknown        = { 'Unit name "$1" is not known'                , 'unknown unit'        , 'unit'  ,  'unknown_unit'         },
	cvt_should_be      = { '$1'                                         , 'ambiguous unit'      , 'unit'  ,  'ambiguous_unit', regex = unitcode_regex, replace = unitcode_replace },
	cvt_mismatch       = { 'Cannot convert "$1" to "$2"'                , 'unit mismatch'       , 'unit'  ,  'unit_mismatch'        },
	cvt_bug_convert    = { 'Bug: Cannot convert between specified units', 'bug, ask for help'   , 'unit'  ,  'ask_for_help'         },
	cvt_lookup         = { 'Unit "$1" is incorrectly defined'           , 'bug, ask for help'   , 'unit'  ,  'ask_for_help'         },
}

-- Text to join input value/unit with output value/unit.
local disp_joins = {
	-- [1]=before output, [2]=after output, [3]=between outputs in a combination; default "; "
	-- [wantname] gives default abbr=off
	["or"]         = { " or "    , "" , " or ", wantname = true },
	["sqbr-sp"]    = { " ["      , "]" },
	["sqbr-nbsp"]  = { "&amp;nbsp;[" , "]" },
	["comma"]      = { ", "      , "" , ", " },
	["slash-sp"]   = { " / "     , "" , wantname = true },
	["slash-nbsp"] = { "&amp;nbsp;/ ", "" , wantname = true },
	["slash-nosp"] = { "/"       , "" , wantname = true },
	["b"]          = { " ("      , ")" },
	["(or)"]       = { " ("      , ")", " or " },
	["br"]         = { "&lt;br /&gt;"  , "" , wantname = true },
	["br()"]       = { "&lt;br /&gt;(" , ")", wantname = true },
}

-- Text to separate values in a range.
local range_types = {
	-- Specifying a table requires either:
	-- * "off" and "on" values (for "abbr=off" and "abbr=on"), or
	-- * "input" and "output" values (for LHS and RHS);
	-- other fields are optional.
	-- When "adj=on|abbr=off" applies, spaces in range text are replaced with hyphens.
	-- With "exception = true", that also occurs with "adj=on|abbr=on".
	-- If "adj" is defined here, that text (unchanged) is used with "adj=on".
	["+"]      = " + ",
	[","]      = ",&amp;nbsp;",
	[", and"]  = ", and ",
	[", or"]   = ", or ",
	["by"]     = " by ",
	["-"]      = "–",
	["to about"] = " to about ",
	["and"]    = { off = " and ", on = " and ", exception = true },
	["and(-)"] = { input = " and ", output = "–" },
	["or"]     = { off = " or " , on = " or " , exception = true },
	["to"]     = { off = " to " , on = " to " , exception = true },
	["to(-)"]  = { input = "&amp;nbsp;to ", output = "–" },
	["+/-"]    = { off = "&amp;nbsp;±&amp;nbsp;", on = "&amp;nbsp;±&amp;nbsp;", adj = "&amp;nbsp;±&amp;nbsp;", is_range_change = true },
	["by(x)"]  = { input = " by ", output = " ×&amp;nbsp;", out_range_x = true },
	["x"]      = { off = " by ", on = " ×&amp;nbsp;", abbr_range_x = true },
	["xx"]     = "&amp;nbsp;×&amp;nbsp;",
	["*"]      = "×",
	["/"]      = "&amp;thinsp;/&amp;thinsp;",  -- for a table of high/low temperatures with {{convert|83|/|63|F|disp=br()|abbr=values}}
}

local range_aliases = {
	-- ["alternative name for a range"] = "standard range name"
	["–"]        = "-",
	["&amp;ndash;"]  = "-",
	["×"]        = "x",
	["&amp;times;"]  = "x",
	["±"]        = "+/-",
	["&amp;plusmn;"] = "+/-",
}

-- Convert accepts range text delimited with whitespace, for example, {{convert|1 to 2|ft}}.
-- In addition, the following "words" are accepted without spaces, for example, {{convert|1-2|ft}}.
-- Words must be in correct order for searching, for example, 'x' after 'xx'.
local range_words = { '-', '–', 'xx', 'x', '*' }

local ranges = {
	types = range_types,
	aliases = range_aliases,
	words = range_words,
}

-- Valid option names.
local en_option_name = {
	-- ["local text for option name"] = "en name used in this module"
	["$"] = "$",
	["abbr"] = "abbr",
	["adj"] = "adj",
	["comma"] = "comma",
	["debug"] = "debug",
	["disp"] = "disp",
	["frac"] = "frac",
	["input"] = "input",
	["lang"] = "lang",
	["lk"] = "lk",
	["order"] = "order",
	["qid"] = "qid",
	["qual"] = "qual",
	["qualifier"] = "qual",
	["round"] = "round",
	["sigfig"] = "sigfig",
	["sing"] = "adj",                   -- "sing" is an old alias for "adj"
	["sortable"] = "sortable",
	["sp"] = "sp",
	["spell"] = "spell",
	["stylein"] = "stylein",
	["styleout"] = "styleout",
	["tracking"] = "tracking",
}

-- Valid option values.
-- Convention: parms.opt_xxx refers to an option that is set here
-- (not intended to be set by the template which invokes this module).
-- Example: At enwiki, "abbr" includes:
--     ["comma"] = "opt_nocomma"
-- As a result, if the template uses abbr=comma, Module:Convert sets:
--     parms["opt_nocomma"] = true
--     parms["abbr"] = nil
-- Therefore parms.abbr will be nil, or will have one of the listed values
-- that do not start with "opt_".
-- An option value of form "xxx?" is the same as "xxx" but shows the input as deprecated.
local en_option_value = {
	-- $=x is handled as a special case: x should be a currency symbol that will be used instead of "$"
	["abbr"] = {
		-- ["local text for option value"] = "en value used in this module"
		["def"] = "",                   -- ignored (some wrapper templates call convert with "abbr=def" to mean "default abbreviation")
		["h"] = "on",                   -- abbr=on + use "h" for hand unit (default)
		["hh"] = "opt_hand_hh",         -- abbr=on + use "hh" for hand unit
		["in"] = "in",                  -- use symbol for LHS unit
		["none"] = "off",               -- old name for "off"
		["off"] = "off",                -- use name for all units
		["on"] = "on",                  -- use symbol for all units
		["out"] = "out",                -- use symbol for RHS unit (default)
		["unit"] = "unit",              -- abbr=on but abbreviate units only: e6km → million km (not ×10⁶ km)
		["values"] = "opt_values",      -- show only input and output numbers, not units
		["~"] = "opt_also_symbol",      -- show input unit symbol as well as name
	},
	["adj"] = {
		["mid"] = "opt_adjectival, opt_adj_mid",  -- adj=on with user-specified text after input unit (between input and output)
		["off"] = "",                   -- ignored (off is the default)
		["on"] = "opt_adjectival",      -- unit name is singular and hyphenated
		["pre"] = "opt_one_preunit",    -- user-specified text before input unit
		["ri0"] = "opt_ri=0",           -- round input with precision = 0
		["ri1"] = "opt_ri=1",           -- round input with precision = 1
		["ri2"] = "opt_ri=2",           -- round input with precision = 2
		["ri3"] = "opt_ri=3",           -- round input with precision = 3
	},
	["comma"] = {
		["5"] = "opt_comma5",           -- only use numsep grouping if 5 or more digits
		["gaps"] = "opt_gaps",          -- use gaps, not numsep, to separate groups of digits
		["gaps3"] = "opt_gaps, opt_gaps3",  -- group only in threes rather than default of no gap before a single digit after decimal mark
		["off"] = "opt_nocomma",        -- no numsep in input or output numbers
	},
	["debug"] = {
		["yes"] = "opt_sortable_debug", -- make the normally hidden sort key visible
	},
	["disp"] = {
		["5"] = "opt_round=5?",         -- round output value to nearest 5
		["b"] = "b",                    -- join: '(...)'
		["(or)"] = "(or)",              -- join: '(...)' with 'or' between outputs in a combination
		["br"] = "br",                  -- join: '&lt;br /&gt;'
		["br()"] = "br()",              -- join: '&lt;br /&gt;(...)'
		["comma"] = "comma",            -- join: ','
		["flip"] = "opt_flip",          -- reverse order of input/output
		["number"] = "opt_output_number_only",  -- display output value (not input, and not output symbol/name)
		["or"] = "or",                  -- join: 'or'
		["out"] = "opt_output_only",
		["output number only"] = "opt_output_number_only",
		["output only"] = "opt_output_only",
		["preunit"] = "opt_two_preunits",    -- user-specified text before input and output units
		["sqbr"] = "sqbr",              -- join: '[...]'
		["table"] = "opt_table",        -- output is suitable for a table cell with align="right"
		["tablecen"] = "opt_tablecen",  -- output is suitable for a table cell with align="center"
		["unit"] = "opt_input_unit_only", -- display input symbol/name (not output, and not input value)
		["unit or text"] = "opt_input_unit_only, opt_ignore_error", -- display input symbol/name, or given unit code if not known
		["unit2"] = "opt_output_unit_only",
		["x"] = "x",                    -- join: &lt;first&gt;...&lt;second&gt; (user-specified text)
	},
	-- frac=x is handled as a special case: x must be an integer (possibly in local language) = 2 or more
	-- input=x is handled as a special case: x should be &lt;value&gt;&lt;space&gt;&lt;unitcode&gt; or &lt;wikidata-property-id&gt;
	["lang"] = {                        -- language for output digits (both en and local digits are always accepted for input)
		["en"] = "opt_lang_en",         -- use en digits for numbers, regardless of local language
		["local"] = "opt_lang_local",   -- use local digits for numbers (default, although config can change default to en)
	},
	["lk"] = {
		["in"] = "in",                  -- link LHS unit name or symbol
		["off"] = "off",                -- do not link: same as default except for hand unit
		["on"] = "on",                  -- link all unit names or symbols (but not twice for the same unit)
		["out"] = "out",                -- link RHS unit name or symbol
	},
	["order"] = {
		["flip"] = "opt_flip",          -- reverse order of input/output
		["out"] = "opt_order_out",      -- do not show input; instead, use order in output combination, with the first output shown as the input
	},
	-- qid=x is handled as a special case: x should be a Wikidata Q item identifier.
	-- qual=x is handled as a special case: x should be a Wikidata Q item identifier.
	["round"] = {
		["0.5"] = "opt_round=0.5",      -- round output value to nearest 0.5
		["5"] = "opt_round=5",          -- round output value to nearest 5
		["10"] = "opt_round=10",        -- round output value to nearest 10 (same as but clearer than "|-1")
		["25"] = "opt_round=25",        -- round output value to nearest 25
		["50"] = "opt_round=50",        -- round output value to nearest 50
		["each"] = "opt_round_each",    -- using default precision in a range, round each output separately (default uses highest precision of each item in range)
	},
	-- sigfig=x is handled as a special case: x must be an integer (possibly in local language) = 1 or more
	["sortable"] = {
		["off"] = "",                   -- ignored (off is the default)
		["on"] = "opt_sortable_on",     -- output sort key for use in a sortable table, based on value from converting to a standard base unit
		["debug"] = "opt_sortable_on, opt_sortable_debug",  -- |sortable=debug is the same as |sortable=on|debug=yes
	},
	["sp"] = {
		["us"] = "opt_sp_us",           -- use U.S. spelling (like "meter" instead of default "metre")
	},
	["spell"] = {                       -- only English spelling is supported; not scientific notation; only some fractions
		["in"] = "opt_spell_in",        -- spell input value in words
		["In"] = "opt_spell_in, opt_spell_upper",                -- spell input value in words with first letter uppercase
		["on"] = "opt_spell_in, opt_spell_out",                  -- spell input and output values in words
		["On"] = "opt_spell_in, opt_spell_out, opt_spell_upper", -- same, with first letter of first word in result uppercase
	},
	-- stylein=x is handled as a special case: x can be any text
	-- styleout=x is handled as a special case: x can be any text
	-- tracking=x is handled as a special case: x can be any text
}

return {
	SIprefixes = SIprefixes,
	all_categories = all_categories,
	all_messages = all_messages,
	currency = { ['$'] = true, ['£'] = true, ['€'] = true, ['₱'] = true, ['₽'] = true, ['¥'] = true },
	customary_units = customary_units,
	disp_joins = disp_joins,
	en_option_name = en_option_name,
	en_option_value = en_option_value,
	eng_scales = eng_scales,
	ranges = ranges,
}</text>
      <sha1>dhmh4lgsbtokaerxu3h0dg11g442lbk</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Error</title>
    <ns>828</ns>
    <id>38948927</id>
    <revision>
      <id>750709040</id>
      <parentid>636708920</parentid>
      <timestamp>2016-11-21T11:11:11Z</timestamp>
      <contributor>
        <username>Materialscientist</username>
        <id>7852030</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Error]]": [[WP:High-risk templates|Highly visible template]] ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1129">-- This module implements {{error}}.

local p = {}

local function _error(args)
    local tag = mw.ustring.lower(tostring(args.tag))

    -- Work out what html tag we should use.
    if not (tag == 'p' or tag == 'span' or tag == 'div') then
        tag = 'strong'
    end

    -- Generate the html.
    return tostring(mw.html.create(tag)
        :addClass('error')
        :wikitext(tostring(args.message or args[1] or error('no message specified', 2)))
    )
end

function p.error(frame)
    local args
    if type(frame.args) == 'table' then
        -- We're being called via #invoke. The args are passed through to the module
        -- from the template page, so use the args that were passed into the template.
        args = frame.args
    else
        -- We're being called from another module or from the debug console, so assume
        -- the args are passed in directly.
        args = frame
    end
    -- if the message parameter is present but blank, change it to nil so that Lua will
    -- consider it false.
    if args.message == "" then
        args.message = nil
    end
    return _error(args)
end

return p</text>
      <sha1>swpvwjcdmj2mkkmx9f7rbsdrfsnmirh</sha1>
    </revision>
  </page>
  <page>
    <title>Module:For</title>
    <ns>828</ns>
    <id>50413050</id>
    <revision>
      <id>855200211</id>
      <parentid>732878218</parentid>
      <timestamp>2018-08-16T16:25:12Z</timestamp>
      <contributor>
        <username>Nihiltres</username>
        <id>236191</id>
      </contributor>
      <comment>Updated from sandbox: prints error if first parameter is empty (previously defaulted to "other uses"); exact-match "other uses" is still categorized</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1101">local mArguments --initialize lazily
local mHatlist = require('Module:Hatnote list')
local mHatnote = require('Module:Hatnote')
local yesNo = require('Module:Yesno')
local p = {}

--Implements {{For}} from the frame
--uses capitalized "For" to avoid collision with Lua reserved word "for"
function p.For (frame)
	mArguments = require('Module:Arguments')
	return p._For(mArguments.getArgs(frame))
end

--Implements {{For}} but takes a manual arguments table
function p._For (args)
	local use = args[1]
	if (not use) then
		return mHatnote.makeWikitextError(
			'no context parameter provided. Use {{other uses}} for "other uses" hatnotes.',
			'Template:For#Errors',
			args.category
		)
	end
	local pages = {}
	function two (a, b) return a, b, 1 end --lets us run ipairs from 2
	for k, v in two(ipairs(args)) do table.insert(pages, v) end
	return mHatnote._hatnote(
		mHatlist.forSeeTableToString({{use = use, pages = pages}}),
		{selfref = args.selfref}
	) .. (
			(use == 'other uses') and yesNo(args.category) and
			'[[Category:Hatnote templates using unusual parameters]]' or ''
		)
end

return p</text>
      <sha1>srmkrwhq60pn7xsihj11bbl69b9dh96</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Hatnote</title>
    <ns>828</ns>
    <id>42498502</id>
    <revision>
      <id>779487706</id>
      <parentid>726656423</parentid>
      <timestamp>2017-05-09T05:20:32Z</timestamp>
      <contributor>
        <username>JJMC89</username>
        <id>24812038</id>
      </contributor>
      <comment>Add navigation-not-searchable class per [[Special:Permalink/779475248#Add navigation-not-searchable class|request]] (also see [[phab:T164781|T164781]])</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="6703">--------------------------------------------------------------------------------
--                              Module:Hatnote                                --
--                                                                            --
-- This module produces hatnote links and links to related articles. It       --
-- implements the {{hatnote}} and {{format link}} meta-templates and includes --
-- helper functions for other Lua hatnote modules.                            --
--------------------------------------------------------------------------------

local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType
local mArguments -- lazily initialise [[Module:Arguments]]
local yesno -- lazily initialise [[Module:Yesno]]

local p = {}

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

local function getArgs(frame)
	-- Fetches the arguments from the parent frame. Whitespace is trimmed and
	-- blanks are removed.
	mArguments = require('Module:Arguments')
	return mArguments.getArgs(frame, {parentOnly = true})
end

local function removeInitialColon(s)
	-- Removes the initial colon from a string, if present.
	return s:match('^:?(.*)')
end

function p.findNamespaceId(link, removeColon)
	-- Finds the namespace id (namespace number) of a link or a pagename. This
	-- function will not work if the link is enclosed in double brackets. Colons
	-- are trimmed from the start of the link by default. To skip colon
	-- trimming, set the removeColon parameter to false.
	checkType('findNamespaceId', 1, link, 'string')
	checkType('findNamespaceId', 2, removeColon, 'boolean', true)
	if removeColon ~= false then
		link = removeInitialColon(link)
	end
	local namespace = link:match('^(.-):')
	if namespace then
		local nsTable = mw.site.namespaces[namespace]
		if nsTable then
			return nsTable.id
		end
	end
	return 0
end

function p.formatPages(...)
	-- Formats a list of pages using formatLink and returns it as an array. Nil
	-- values are not allowed.
	local pages = {...}
	local ret = {}
	for i, page in ipairs(pages) do
		ret[i] = p._formatLink(page)
	end
	return ret
end

function p.formatPageTables(...)
	-- Takes a list of page/display tables and returns it as a list of
	-- formatted links. Nil values are not allowed.
	local pages = {...}
	local links = {}
	for i, t in ipairs(pages) do
		checkType('formatPageTables', i, t, 'table')
		local link = t[1]
		local display = t[2]
		links[i] = p._formatLink(link, display)
	end
	return links
end

function p.makeWikitextError(msg, helpLink, addTrackingCategory, title)
	-- Formats an error message to be returned to wikitext. If
	-- addTrackingCategory is not false after being returned from
	-- [[Module:Yesno]], and if we are not on a talk page, a tracking category
	-- is added.
	checkType('makeWikitextError', 1, msg, 'string')
	checkType('makeWikitextError', 2, helpLink, 'string', true)
	yesno = require('Module:Yesno')
	title = title or mw.title.getCurrentTitle()
	-- Make the help link text.
	local helpText
	if helpLink then
		helpText = ' ([[' .. helpLink .. '|help]])'
	else
		helpText = ''
	end
	-- Make the category text.
	local category
	if not title.isTalkPage and yesno(addTrackingCategory) ~= false then
		category = 'Hatnote templates with errors'
		category = string.format(
			'[[%s:%s]]',
			mw.site.namespaces[14].name,
			category
		)
	else
		category = ''
	end
	return string.format(
		'&lt;strong class="error"&gt;Error: %s%s.&lt;/strong&gt;%s',
		msg,
		helpText,
		category
	)
end

function p.disambiguate(page, disambiguator)
	-- Formats a page title with a disambiguation parenthetical,
	-- i.e. "Example" → "Example (disambiguation)".
	checkType('disambiguate', 1, page, 'string')
	checkType('disambiguate', 2, disambiguator, 'string', true)
	disambiguator = disambiguator or 'disambiguation'
	return string.format('%s (%s)', page, disambiguator)
end

--------------------------------------------------------------------------------
-- Format link
--
-- Makes a wikilink from the given link and display values. Links are escaped
-- with colons if necessary, and links to sections are detected and displayed
-- with " § " as a separator rather than the standard MediaWiki "#". Used in
-- the {{format hatnote link}} template.
--------------------------------------------------------------------------------

function p.formatLink(frame)
	local args = getArgs(frame)
	local link = args[1]
	local display = args[2]
	if not link then
		return p.makeWikitextError(
			'no link specified',
			'Template:Format hatnote link#Errors',
			args.category
		)
	end
	return p._formatLink(link, display)
end

function p._formatLink(link, display)
	checkType('_formatLink', 1, link, 'string')
	checkType('_formatLink', 2, display, 'string', true)

	-- Remove the initial colon for links where it was specified manually.
	link = removeInitialColon(link)

	-- Find whether a faux display value has been added with the {{!}} magic
	-- word.
	if not display then
		local prePipe, postPipe = link:match('^(.-)|(.*)$')
		link = prePipe or link
		display = postPipe
	end

	-- Find the display value.
	if not display then
		local page, section = link:match('^(.-)#(.*)$')
		if page then
			display = page .. ' §&amp;nbsp;' .. section
		end
	end

	-- Assemble the link.
	if display then
		return string.format(
			'[[:%s|%s]]',
			string.gsub(link, '|(.*)$', ''), --display overwrites manual piping
			display
		)
	else
		return string.format('[[:%s]]', link)
	end
end

--------------------------------------------------------------------------------
-- Hatnote
--
-- Produces standard hatnote text. Implements the {{hatnote}} template.
--------------------------------------------------------------------------------

function p.hatnote(frame)
	local args = getArgs(frame)
	local s = args[1]
	local options = {}
	if not s then
		return p.makeWikitextError(
			'no text specified',
			'Template:Hatnote#Errors',
			args.category
		)
	end
	options.extraclasses = args.extraclasses
	options.selfref = args.selfref
	return p._hatnote(s, options)
end

function p._hatnote(s, options)
	checkType('_hatnote', 1, s, 'string')
	checkType('_hatnote', 2, options, 'table', true)
	options = options or {}
	local classes = {'hatnote', 'navigation-not-searchable'}
	local extraclasses = options.extraclasses
	local selfref = options.selfref
	if type(extraclasses) == 'string' then
		classes[#classes + 1] = extraclasses
	end
	if selfref then
		classes[#classes + 1] = 'selfref'
	end
	return string.format(
		'&lt;div role="note" class="%s"&gt;%s&lt;/div&gt;',
		table.concat(classes, ' '),
		s
	)
end

return p</text>
      <sha1>c5z31x97gktc3q7nnp8mf48t01l4qst</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Hatnote list</title>
    <ns>828</ns>
    <id>50085079</id>
    <revision>
      <id>833955078</id>
      <parentid>833954678</parentid>
      <timestamp>2018-04-03T05:19:54Z</timestamp>
      <contributor>
        <username>Galobtter</username>
        <id>19502780</id>
      </contributor>
      <comment>fix</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="7209">--------------------------------------------------------------------------------
--                           Module:Hatnote list                              --
--                                                                            --
-- This module produces and formats lists for use in hatnotes. In particular, --
-- it implements the for-see list, i.e. lists of "For X, see Y" statements,   --
-- as used in {{about}}, {{redirect}}, and their variants. Also introduced    --
-- are andList &amp; orList helpers for formatting lists with those conjunctions. --
--------------------------------------------------------------------------------

local mArguments --initialize lazily
local mHatnote = require('Module:Hatnote')
local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType
local p = {}

--------------------------------------------------------------------------------
-- List stringification helper functions
--
-- These functions are used for stringifying lists, usually page lists inside
-- the "Y" portion of "For X, see Y" for-see items.
--------------------------------------------------------------------------------

--default options table used across the list stringification functions
local stringifyListDefaultOptions = {
	conjunction = "and",
	separator = ",",
	altSeparator = ";",
	space = " ",
	formatted = false
}

-- Stringifies a list generically; probably shouldn't be used directly
function stringifyList(list, options)
	-- Type-checks, defaults, and a shortcut
	checkType("stringifyList", 1, list, "table")
	if #list == 0 then return nil end
	checkType("stringifyList", 2, options, "table", true)
	options = options or {}
	for k, v in pairs(stringifyListDefaultOptions) do
		if options[k] == nil then options[k] = v end
	end
	local s = options.space
	-- Format the list if requested
	if options.formatted then list = mHatnote.formatPages(unpack(list)) end
	-- Set the separator; if any item contains it, use the alternate separator
	local separator = options.separator
	--searches display text only
	function searchDisp(t, f)
		return string.find(string.sub(t, (string.find(t, '|') or 0) + 1), f)
	end
	for k, v in pairs(list) do
		if searchDisp(v, separator) then
			separator = options.altSeparator
			break
		end
	end
	-- Set the conjunction, apply Oxford comma, and force a comma if #1 has "§"
	local conjunction = s .. options.conjunction .. s
	if #list == 2 and searchDisp(list[1], "§") or #list &gt; 2 then
		conjunction = separator .. conjunction
	end
	-- Return the formatted string
	return mw.text.listToText(list, separator .. s, conjunction)
end

--DRY function
function conjList (conj, list, fmt)
	return stringifyList(list, {conjunction = conj, formatted = fmt})
end

-- Stringifies lists with "and" or "or"
function p.andList (...) return conjList("and", ...) end
function p.orList (...) return conjList("or", ...) end

--------------------------------------------------------------------------------
-- For see
--
-- Makes a "For X, see [[Y]]." list from raw parameters. Intended for the
-- {{about}} and {{redirect}} templates and their variants.
--------------------------------------------------------------------------------

--default options table used across the forSee family of functions
local forSeeDefaultOptions = {
	andKeyword = 'and',
	title = mw.title.getCurrentTitle().text,
	otherText = 'other uses',
	forSeeForm = 'For %s, see %s.',
}

--Collapses duplicate punctuation
function punctuationCollapse (text)
	local replacements = {
		["%.%.$"] = ".",
		["%?%.$"] = "?",
		["%!%.$"] = "!",
		["%.%]%]%.$"] = ".]]",
		["%?%]%]%.$"] = "?]]",
		["%!%]%]%.$"] = "!]]"
	}
	for k, v in pairs(replacements) do text = string.gsub(text, k, v) end
	return text
end

-- Structures arguments into a table for stringification, &amp; options
function p.forSeeArgsToTable (args, from, options)
	-- Type-checks and defaults
	checkType("forSeeArgsToTable", 1, args, 'table')
	checkType("forSeeArgsToTable", 2, from, 'number', true)
	from = from or 1
	checkType("forSeeArgsToTable", 3, options, 'table', true)
	options = options or {}
	for k, v in pairs(forSeeDefaultOptions) do
		if options[k] == nil then options[k] = v end
	end
	-- maxArg's gotten manually because getArgs() and table.maxn aren't friends
	local maxArg = 0
	for k, v in pairs(args) do
		if type(k) == 'number' and k &gt; maxArg then maxArg = k end
	end
	-- Structure the data out from the parameter list:
	-- * forTable is the wrapper table, with forRow rows
	-- * Rows are tables of a "use" string &amp; a "pages" table of pagename strings
	-- * Blanks are left empty for defaulting elsewhere, but can terminate list
	local forTable = {}
	local i = from
	local terminated = false
	-- If there is extra text, and no arguments are given, give nil value
	-- to not produce default of "For other uses, see foo (disambiguation)"
	if options.extratext and i &gt; maxArg then return nil end
	-- Loop to generate rows
	repeat
		-- New empty row
		local forRow = {}
		-- On blank use, assume list's ended &amp; break at end of this loop
		forRow.use = args[i]
		if not args[i] then terminated = true end
		-- New empty list of pages
		forRow.pages = {}
		-- Insert first pages item if present
		table.insert(forRow.pages, args[i + 1])
		-- If the param after next is "and", do inner loop to collect params
		-- until the "and"'s stop. Blanks are ignored: "1|and||and|3" → {1, 3}
		while args[i + 2] == options.andKeyword do
			if args[i + 3] then 
				table.insert(forRow.pages, args[i + 3])
			end
			-- Increment to next "and"
			i = i + 2
		end
		-- Increment to next use
		i = i + 2
		-- Append the row
		table.insert(forTable, forRow)
	until terminated or i &gt; maxArg
	
	return forTable
end

-- Stringifies a table as formatted by forSeeArgsToTable
function p.forSeeTableToString (forSeeTable, options)
	-- Type-checks and defaults
	checkType("forSeeTableToString", 1, forSeeTable, "table", true)
	checkType("forSeeTableToString", 2, options, "table", true)
	options = options or {}
	for k, v in pairs(forSeeDefaultOptions) do
		if options[k] == nil then options[k] = v end
	end
	-- Stringify each for-see item into a list
	local strList = {}
	if forSeeTable then
		for k, v in pairs(forSeeTable) do
			local useStr = v.use or options.otherText
			local pagesStr = p.andList(v.pages, true) or mHatnote._formatLink(mHatnote.disambiguate(options.title))
			local forSeeStr = string.format(options.forSeeForm, useStr, pagesStr)
			forSeeStr = punctuationCollapse(forSeeStr)
			table.insert(strList, forSeeStr)
		end
	end
	if options.extratext then table.insert(strList, punctuationCollapse(options.extratext..'.')) end
	-- Return the concatenated list
	return table.concat(strList, ' ')
end

-- Produces a "For X, see [[Y]]" string from arguments. Expects index gaps
-- but not blank/whitespace values. Ignores named args and args &lt; "from".
function p._forSee (args, from, options)
	local forSeeTable = p.forSeeArgsToTable(args, from, options)
	return p.forSeeTableToString(forSeeTable, options)
end

-- As _forSee, but uses the frame.
function p.forSee (frame, from, options)
	mArguments = require('Module:Arguments')
	return p._forSee(mArguments.getArgs(frame), from, options)
end

return p</text>
      <sha1>2hmyydi47hep0hexbh8sw7ybxc07m5k</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Icon</title>
    <ns>828</ns>
    <id>45181164</id>
    <revision>
      <id>643803192</id>
      <parentid>643801146</parentid>
      <timestamp>2015-01-23T10:26:03Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Icon: [[WP:High-risk templates|High-risk Lua module]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="659">-- This module implements [[Template:Icon]].

local data = mw.loadData('Module:Icon/data')

local p = {}

function p._main(args)
	local code = args.class or args[1]
	local iconData
	if code then
		code = code:match('^%s*(.-)%s*$'):lower() -- trim whitespace and put in lower case
		iconData = data[code]
	end
	if not iconData then
		iconData = data._DEFAULT
	end
	return string.format(
		'[[File:%s%s|%s|link=]]',
		iconData.image,
		iconData.tooltip and '|' .. iconData.tooltip or '',
		args.size or '16x16px'
	)
end

function p.main(frame)
	local args = {}
	for k, v in pairs(frame:getParent().args) do
		args[k] = v
	end
	return p._main(args)
end

return p</text>
      <sha1>4z7aot4f3pniw3w3az56t0kryggws40</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Icon/data</title>
    <ns>828</ns>
    <id>45181103</id>
    <revision>
      <id>892899324</id>
      <parentid>870600408</parentid>
      <timestamp>2019-04-17T15:52:24Z</timestamp>
      <contributor>
        <username>Headbomb</username>
        <id>1461430</id>
      </contributor>
      <comment>vital = { 		image = "Círculos_Concéntricos.svg", 		tooltip = "Vital article", 	}, per [[Template_talk:Icon#Icon_for_Vital_articles]]</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="9015">-- This module stores icon data for [[Module:Icon]].

--------------------------------------------------------------------------------
-- Icon data
--------------------------------------------------------------------------------

local data = {
	fa = {
		image = "Featured article star.svg",
		tooltip = "Featured article",
	},
	far = {
		image = "Cscr-star piece.png",
		tooltip = "Featured article review",
	},
	farc = {
		image = "Cscr-star piece.png",
		tooltip = "Featured article removal candidate",
	},
	ffa = {
		aliases = {"dfa"},
		image = "Featured article star - cross.svg",
		tooltip = "Former featured article",
	},
	fac = {
		aliases = {"fan"},
		image = "Cscr-candidate.svg",
		tooltip = "Featured article candidate",
	},
	ffac = {
		aliases = {"nofa"},
		image = "Featured article star - cross.svg",
		tooltip = "Failed featured article candidate",
	},
	fl = {
		image = "Featured article star.svg",
		tooltip = "Featured list",
	},
	flrc = {
		aliases = {"flr"},
		image = "Cscr-star piece.png",
		tooltip = "Featured list removal candidate",
	},
	ffl = {
		aliases = {"dfl"},
		image = "Cscr-featured-strike.svg",
		tooltip = "Former featured list",
	},
	flc = {
		aliases = {"fln"},
		image = "Cscr-candidate.svg",
		tooltip = "Featured list candidate",
	},
	fflc = {
		aliases = {"nofl"},
		image = "Cscr-former.svg",
		tooltip = "Failed featured list candidate",
	},
	a = {
		image = "Symbol a class.svg",
		tooltip = "A-Class article",
	},
	dac = {
		aliases = {"daa"},
		image = "Symbol unsupport A vote.svg",
		tooltip = "Demoted A-Class article",
	},
	acc = {
		aliases = {"acn", "aac"},
		image = "A candidate.svg",
		tooltip = "A-Class article candidate",
	},
	noac = {
		aliases = {"faac"},
		image = "Symbol unsupport A vote.svg",
		tooltip = "Failed A-Class article candidate",
	},
	ga = {
		image = "Symbol support vote.svg",
		tooltip = "Good article",
	},
	gar = {
		image = "GA Candidate Neutral vote(ChaosNil).svg",
		tooltip = "Good article reassessment",
	},
	dga = {
		image = "Symbol unsupport vote.svg",
		tooltip = "Delisted good article",
	},
	gan = {
		aliases = {"gac"},
		image = "GA candidate.svg",
		tooltip = "Good article nominee",
	},
	ga2 = {
		image = "Symbol neutral vote.svg",
		tooltip = "Good article, 2nd opinion",
	},
	gah = {
		image = "Symbol wait.svg",
		tooltip = "Good article on hold",
	},
	fgan = {
		aliases = {"noga", "gaf", "gf"},
		image = "Symbol oppose vote.svg",
		tooltip = "Failed good article nominee",
	},
	fp = {
		image = "Cscr-featured.svg",
		tooltip = "Featured picture",
	},
	fpc = {
		aliases = {"fpn"},
		image = "Cscr-candidate.svg",
		tooltip = "Featured picture candidate",
	},
	ffp = {
		image = "Cscr-former.svg",
		tooltip = "Former featured picture",
	},
	vp = {
		image = "ENWP VP Logo.svg",
		tooltip = "Valued picture",
	},
	vpc = {
		image = "Valued pics 1.svg",
		tooltip = "Valued picture candidate",
	},
	fs = {
		image = "Cscr-featured.svg",
		tooltip = "Featured sound",
	},
	ffs = {
		image = "Cscr-former.svg",
		tooltip = "Former featured sound",
	},
	fsc = {
		image = "Cscr-candidate.svg",
		tooltip = "Featured sound candidate",
	},
	fpo = {
		image = "Linecons big-star.svg",
		tooltip = "Before the featured portal process ceased in 2017, this had been designated as a featured portal.",
	},
	fpor = {
		image = "Cscr-star piece.png",
		tooltip = "Featured portal review",
	},
	ffpo = {
		image = "Featured article star - cross.svg",
		tooltip = "Former featured portal",
	},
	fpoc = {
		image = "Cscr-candidate.svg",
		tooltip = "Featured portal candidate",
	},
	ft = {
		image = "Cscr-featuredtopic.svg",
		tooltip = "Featured topic",
	},
	ftrc = {
		image = "Cscr-star piece.png",
		tooltip = "Featured topic removal candidate",
	},
	fft = {
		aliases = {"dft"},
		image = "DFT candidate_cluster.svg",
		tooltip = "Former featured topic",
	},
	ftc = {
		aliases = {"ftn"},
		image = "FT candidate cluster.svg",
		tooltip = "Featured topic candidate",
	},
	gt = {
		image = "Support cluster.svg",
		tooltip = "Good topic",
	},
	gtrc = {
		image = "Symbol unsupport vote.svg",
		tooltip = "Good topic removal candidate",
	},
	gtc = {
		aliases = {"gtn"},
		image = "GA candidate cluster.svg",
		tooltip = "Good topic candidate",
	},
	bplus = {
		aliases = {"b+"},
		image = "Symbol bplus class.svg",
		tooltip = "Bplus-Class article",
	},
	b = {
		image = "Symbol b class.svg",
		tooltip = "B-Class article",
	},
	br = {
		aliases = {"bcr"},
		image = "Bclass-checklist.svg",
		tooltip = "B-Class review",
	},
	c = {
		image = "Symbol c class.svg",
		tooltip = "C-Class article",
	},
	start = {
		image = "Symbol start class.svg",
		tooltip = "Start-Class article",
	},
	stub = {
		image = "Symbol stub class.svg",
		tooltip = "Stub-Class article",
	},
	list = {
		aliases = {"comparison"},
		image = "Symbol list class.svg",
		tooltip = "List-Class article",
	},
	no = {
		image = "Crystal button cancel.svg",
		tooltip = "Unknown-Class article",
	},
	book = {
		image = "Symbol book class2.svg",
		tooltip = "Wikipedia book",
	},
	category = {
		aliases = {"cat", "categ"},
		image = "Folder Hexagonal Icon.svg",
		tooltip = "Category",
	},
	disambiguation = {
		aliases = {"dab", "disamb", "disambig"},
		image = "Symbol dab class.svg",
		tooltip = "Disambiguation page",
	},
	image = {
		aliases = {"file"},
		image = "Video-x-generic.svg",
		tooltip = "File",
	},
    needed = {
        image = "Symbol needed class.svg",
        tooltip = "Needed article",
    },
	outline = {
		image = "Global thinking.svg",
		tooltip = "Outline",
	},
        portal = {
		image = "Portal-puzzle.svg",
		tooltip = "Portal",
	},
	project = {
		image = "Symbol information vote.svg",
		tooltip = "Project page",
	},
	redirect = {
		aliases = {"red", "redir"},
		image = "Symbol redirect vote2.svg",
		tooltip = "Redirect",
	},
	template = {
		aliases = {"temp", "templ"},
		image = "Symbol template class.svg",
		tooltip = "Template",
	},
	essay = {
		image = "Essay.svg",
		tooltip = "Essay",
	},
	na = {
		image = "Symbol neutral vote.svg",
		tooltip = "Non-article page",
	},
	aa = {
		image = "Yes check.svg",
		tooltip = "Audited article of limited subject matter",
	},
	da = {
		image = "Symbol oppose vote.svg",
		tooltip = "Demoted article",
	},
	dyk = {
		image = "Symbol question.svg",
		tooltip = "Did You Know?",
	},
	dyk2 = {
		image = "DYK questionmark icon.svg",
		tooltip = "Did You Know?",
	},
	pr = {
		image = "Nuvola apps kedit.png",
		tooltip = "Peer review",
	},
	ppr = {
		image = "Nuvola apps kedit.png",
		tooltip = "Portal peer review",
	},
	q = {
		aliases = {"question"},
		image = "Symbol question.svg",
		tooltip = "Question",
	},
	qi = {
		image = "Quality images logo.svg",
		tooltip = "Quality image on Wikimedia Commons",
	},
	vi = {
		image = "Valued image seal.svg",
		tooltip = "Valued image on Wikimedia Commons",
	},
	tfa = {
		image = "Wikipedia-logo.svg",
		tooltip = "Today's Featured Article",
	},
	tfl = {
		image = "Wikipedia-logo.svg",
		tooltip = "Today's Featured List",
	},
	itn = {
		image = "Globe current.svg",
		tooltip = "In The News",
	},
	otd = {
		image = "Nuvola apps date.svg",
		tooltip = "On This Day",
	},
	wikiproject = {
		image = "People icon.svg",
		tooltip = "WikiProject",
	},
	wikipedia = {
		image = "Wikipedia-logo.svg",
		tooltip = "Wikipedia page",
	},
	commons = {
		image = "Commons-logo.svg",
		tooltip = "Commons page",
	},
	wikiquote = {
		image = "Wikiquote-logo.svg",
		tooltip = "Wikiquote page",
	},
	wikiversity = {
		image = "Wikiversity-logo.svg",
		tooltip = "Wikiversity page",
	},
	wikibooks = {
		image = "Wikibooks-logo.svg",
		tooltip = "Wikibooks page",
	},
	wikisource = {
		image = "Wikisource-logo.svg",
		tooltip = "Wikisource page",
	},
	wiktionary = {
		image = "Wiktionary-logo.svg",
		tooltip = "Wiktionary page",
	},
	wikinews = {
		image = "Wikinews-logo.svg",
		tooltip = "Wikinews page",
	},
	wikispecies = {
		image = "Wikispecies-logo.svg",
		tooltip = "Wikispecies page",
	},
	wikidata = {
		image = "Wikidata-logo.svg",
		tooltip = "Wikidata page",
	},
	wikivoyage = {
		image = "Wikivoyage-logo.svg",
		tooltip = "Wikivoyage page",
	},
	meta = {
		image = "Wikimedia Community Logo.svg",
		tooltip = "Meta-wiki page",
	},
	four = {
		image = "Four Award.svg",
		tooltip = "Four Award",
	},
	million = {
		image = "Million award logo.svg",
		tooltip = "Million Award",
	},
	module = {
		image = "Lua-logo-nolabel.svg",
		tooltip = "Module",
	},
	vital = {
		image = "Círculos_Concéntricos.svg",
		tooltip = "Vital article",
	},
	_DEFAULT = {
		image = "Symbol question.svg",
	}
}

--------------------------------------------------------------------------------
-- End icon data
--------------------------------------------------------------------------------

-- Make aliases work the same as normal keys, and remove the "aliases" subtables. 
for k, t in pairs(data) do
	if t.aliases then
		for i, alias in ipairs(t.aliases) do
			data[alias] = t
		end
		t.aliases = nil
	end
	data[k] = t
end

return data</text>
      <sha1>a8dgbrnmc8lyixix5fkiw5tfctl66dq</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Labelled list hatnote</title>
    <ns>828</ns>
    <id>50971703</id>
    <revision>
      <id>763259375</id>
      <parentid>745988142</parentid>
      <timestamp>2017-02-02T05:26:53Z</timestamp>
      <contributor>
        <username>Nihiltres</username>
        <id>236191</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Module:Labelled list hatnote]]": [[WP:High-risk templates|Highly visible template]] ([Edit=Require template editor access] (indefinite) [Move=Require template editor access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3083">--------------------------------------------------------------------------------
--                               Labelled list                                --
--                                                                            --
-- This module does the core work of creating a hatnote composed of a list    --
-- prefixed by a colon-terminated label, i.e. "LABEL: [andList of pages]",    --
-- for {{see also}} and similar templates.                                    --
--------------------------------------------------------------------------------

local mHatnote = require('Module:Hatnote')
local mHatlist = require('Module:Hatnote list')
local mArguments --initialize lazily
local p = {}

-- Defaults global to this module
local defaults = {
	label = 'See also', --Final fallback for label argument
	labelForm = '%s: %s',
	prefixes = {'label', 'label ', 'l'},
	template = 'Module:Labelled list hatnote'
}

-- Helper function that pre-combines display parameters into page arguments.
-- Also compresses sparse arrays, as a desirable side-effect.
function p.preprocessDisplays (args, prefixes)
	-- Prefixes specify which parameters, in order, to check for display options
	-- They each have numbers auto-appended, e.g. 'label1', 'label 1', &amp; 'l1'
	prefixes = prefixes or defaults.prefixes
	local pages = {}
	for k, v in pairs(args) do
		if type(k) == 'number' then
			local display
			for i = 1, #prefixes do
				display = args[prefixes[i] .. k]
				if display then break end
			end
			local page = display and
				string.format('%s|%s', string.gsub(v, '|.*$', ''), display) or v
			pages[#pages + 1] = page
		end
	end
	return pages
end

-- Produces a labelled pages-list hatnote.
-- The main frame (template definition) takes 1 or 2 arguments, for a singular
-- and (optionally) plural label respectively:
-- * {{#invoke:Labelled list hatnote|labelledList|Singular label|Plural label}}
-- The resulting template takes pagename &amp; label parameters normally.
function p.labelledList (frame)
	mArguments = require('Module:Arguments')
	local labels = {frame.args[1] or defaults.label}
	labels[2] = frame.args[2] or labels[1]
	local template = frame:getParent():getTitle()
	local args = mArguments.getArgs(frame, {parentOnly = true})
	local pages = p.preprocessDisplays(args)
	local options = {
		extraclasses = frame.args.extraclasses,
		category = args.category,
		selfref = frame.args.selfref or args.selfref,
		template = template
	}
	return p._labelledList(pages, labels, options)
end

function p._labelledList (pages, labels, options)
	labels = labels or {}
	if #pages == 0 then
		return mHatnote.makeWikitextError(
			'no page names specified',
			(options.template or defaults.template) .. '#Errors',
			options.category
		)
	end
	label = (#pages == 1 and labels[1] or labels[2]) or defaults.label
	local text = string.format(
		options.labelForm or defaults.labelForm,
		label,
		mHatlist.andList(pages, true)
	)
	local hnOptions = {
		extraclasses = options.extraclasses,
		selfref = options.selfref
	}
	return mHatnote._hatnote(text, hnOptions)
end

return p</text>
      <sha1>932zychfwl5xu5castj2k9j5qs6lzif</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Lang</title>
    <ns>828</ns>
    <id>55674518</id>
    <revision>
      <id>922166160</id>
      <parentid>922094906</parentid>
      <timestamp>2019-10-20T11:20:25Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>sync from sandbox;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="66003">--[=[

Lua support for the {{lang}}, {{lang-xx}}, and {{transl}} templates and replacement of various supporting templates. 

]=]

require('Module:No globals');

local initial_style_state;														-- set by lang_xx_normal() and lang_xx_italic()

local getArgs = require ('Module:Arguments').getArgs;
local unicode = require ("Module:Unicode data");								-- for is_latin() and is_rtl()
local yesno = require ('Module:Yesno');

local lang_name_table = mw.loadData ('Module:Language/name/data');

local synonym_table = mw.loadData ('Module:Lang/ISO 639 synonyms');				-- ISO 639-2/639-2T code translation to 639-1 code

local lang_data =  mw.loadData ('Module:Lang/data');							-- language name override and transliteration tool-tip tables

local namespace = mw.title.getCurrentTitle().namespace;							-- used for categorization

local this_wiki_lang = mw.language.getContentLanguage().code;					-- get this wiki's language

local maint_cats = {};															-- maintenance categories go here
local maint_msgs = {};															-- and their messages go here


--[[--------------------------&lt; I S _ S E T &gt;------------------------------------------------------------------

Returns true if argument is set; false otherwise. Argument is 'set' when it exists (not nil) or when it is not an empty string.

]]

local function is_set( var )
	return not (var == nil or var == '');
end


--[[--------------------------&lt; I N V E R T  _ I T A L I C S &gt;-------------------------------------------------

This function attempts to invert the italic markup a args.text by adding/removing leading/trailing italic markup
in args.text.  Like |italic=unset, |italic=invert disables automatic italic markup.  Individual leading/trailing
apostrophes are converted to their html numeric entity equivalent so that the new italic markup doesn't become
bold markup inadvertently.

Leading and trailing wiki markup is extracted from args.text into separate table elements.  Addition, removal,
replacement of wiki markup is handled by a string.gsub() replacement table operating only on these separate elements.
In the string.gsub() matching pattern, '.*' matches empty string as well as the three expected wiki markup patterns.

This function expects that markup in args.text is complete and correct; if it is not, oddness may result.

]]

local function invert_italics (source)
	local invert_pattern_table = {												-- leading/trailing markup add/remove/replace patterns
		[""]="\'\'",															-- empty string becomes italic markup
		["\'\'"]="",															-- italic markup becomes empty string
		["\'\'\'"]="\'\'\'\'\'",												-- bold becomes bold italic
		["\'\'\'\'\'"]="\'\'\'",												-- bold italic become bold
		};
	local seg = {};

	source = source:gsub ("%f[\']\'%f[^\']", '&amp;#39;');							-- protect single quote marks from being interpreted as bold markup

	seg[1] = source:match ('^(\'\'+%f[^\']).+') or '';							-- get leading markup, if any; ignore single quote
	seg[3] = source:match ('.+(%f[\']\'\'+)$') or '';							-- get trailing markup, if any; ignore single quote

	if '' ~= seg[1] and '' ~= seg[3] then										-- extract the 'text' 
		seg[2] = source:match ('^\'\'+%f[^\'](.+)%f[\']\'\'+$')					-- from between leading and trailing markup
	elseif '' ~= seg[1] then
		seg[2] = source:match ('^\'\'+%f[^\'](.+)')								-- following leading markup
	elseif '' ~= seg[3] then
		seg[2] = source:match ('(.+)%f[\']\'\'+$')								-- preceding trailing markup
	else
		seg[2] = source															-- when there is no markup
	end

	seg[1] = invert_pattern_table[seg[1]] or seg[1];							-- replace leading markup according to pattern table
	seg[3] = invert_pattern_table[seg[3]] or seg[3];							-- replace leading markup according to pattern table

	return table.concat (seg);													-- put it all back together and done
end


--[[--------------------------&lt; V A L I D A T E _ I T A L I C &gt;------------------------------------------------

validates |italic= or |italics= assigned values.

When |italic= is set and has an acceptible assigned value, return the matching css font-style property value or,
for the special case 'default', return nil.

When |italic= is not set, or has an unacceptible assigned value, return nil and a nil error message.

When both |italic= and |italics= are set, returns nil and a 'conflicting' error message.

The return value nil causes the calling lang, lang_xx, or transl function to set args.italic according to the template's
defined default ('inherit' for {{lang}}, 'inherit' or 'italic' for {{lang-xx}} depending on
the individual template's requirements, 'italic' for {{transl}}) or to the value appropriate to |script=, if set ({{lang}}
and {{lang-xx}} only).

Accepted values and the values that this function returns are are:
	nil		-	when |italic= absent or not set; returns nil
	default	-	for completeness, should rarely if ever be used; returns nil
	yes		-	force args.text to be rendered in italic font; returns 'italic'
	no		-	force args.text to be rendered in normal font; returns 'normal'
	unset	-	disables font control so that font-style applied to text is dictated by markup inside or outside the template; returns 'inherit'
	invert	-	disables font control so that font-style applied to text is dictated by markup outside or inverted inside the template; returns 'invert'

]]

local function validate_italic (args)
	local properties = {['yes'] = 'italic', ['no'] = 'normal', ['unset'] = 'inherit', ['invert'] = 'invert', ['default'] = nil};
	
	local count = 0
	for _, arg in pairs {'italic', 'italics', 'i'} do
		if args[arg] then
			count = count + 1
		end
	end

	if count &gt; 1 then															-- return nil and an error message if more than one is set 
		return nil, 'only one of &amp;#124;italic=, &amp;#124;italics=, or &amp;#124;i= can be specified';
	end
	
	return properties[args.italic or args.italics or args.i], nil;				-- return an appropriate value and a nil error message
end


--[=[--------------------------&lt; V A L I D A T E _ C A T _ A R G S &gt;----------------------------------------------------------

Default behavior of the {{lang}} and {{lang-xx}} templates is to add categorization when the templates are used in mainspace.
This default functionality may be suppressed by setting |nocat=yes or |cat=no.  This function selects one of these two parameters
to control categorization.

Because having two parameters with 'opposite' names and 'opposite' values is confusing, this function accepts only affirmative
values for |nocat= and only negative values for |cat=; in both cases the 'other' sense (and non-sense) is not accepted and the
parameter is treated as if it were not set in the template.

Sets args.nocat to true if categorization is to be turned off; to nil if the default behavior should apply.

Accepted values for |nocat= are the text strings:
	'yes', 'y', 'true', 't', on, '1'		-- [[Module:Yesno]] returns logical true for all of these; false or nil else
for |cat=
	'no', 'n', 'false', 'f', 'off', '0'		-- [[Module:Yesno]] returns logical false for all of these; true or nil else

]=]

local function validate_cat_args (args)
	if not (args.nocat or args.cat) then										-- both are nil, so categorize
		return;
	end
	
	if false == yesno (args.cat) or true == yesno (args.nocat) then
		args.nocat = true;														-- set to true when args.nocat is affirmative; nil else (as if the parameter were not set in the template)
	else																		-- args.nocat is the parameter actually used.
		args.nocat = nil;
	end
end


--[[--------------------------&lt; I N _ A R R A Y &gt;--------------------------------------------------------------

Whether needle is in haystack

]]

local function in_array ( needle, haystack )
	if needle == nil then
		return false;
	end
	for n,v in ipairs( haystack ) do
		if v == needle then
			return n;
		end
	end
	return false;
end


--[[--------------------------&lt; F O R M A T _ I E T F _ T A G &gt;------------------------------------------------

prettify ietf tags to use recommended subtag formats:
	code: lower case
	script: sentence case
	region: upper case
	variant: lower case

]]

local function format_ietf_tag (code, script, region, variant)
	local out = {};

	table.insert (out, code:lower());
	if is_set (script) then
		script = script:lower():gsub ('^%a', string.upper);
		table.insert (out, script);
	end

	if is_set (region) then
		table.insert (out, region:upper());
	end
	
	if is_set (variant) then
		table.insert (out, variant:lower());
	end
	
	return table.concat (out, '-');
end


--[[--------------------------&lt; G E T _ I E T F _ P A R T S &gt;--------------------------------------------------

extracts and returns IETF language tag parts:
	primary language subtag (required) - 2 or 3 character IANA language code
	script subtag - four character IANA script code
	region subtag - two-letter or three digit IANA region code
	variant subtag - four digit or 5-8 alnum variant code
	private subtag - x- followed by 1-8 alnum private code; only supported with the primary language tag

in any one of these forms
	lang					lang-variant
	lang-script				lang-script-variant
	lang-region				lang-region-variant
	lang-script-region		lang-script-region-variant
	lang-x-private	
	
each of lang, script, region, variant, and private, when used, must be valid

Languages with both two- and three-character code synonyms are promoted to the two-character synonym because
the IANA registry file omits the synonymous three-character code; we cannot depend on browsers understanding
the synonymous three-character codes in the lang= attribute.

For {{lang-xx}} templates, the parameters |script=, |region=, and |variant= are supported (not supported in {{lang}}
because those parameters are superfluous to the IETF subtags in |code=)

returns six  values; all lower case.  Valid parts are returned as themselves; omitted parts are returned as empty strings, invalid
parts are returned as nil; the sixth returned item is an error message (if an error detected) or nil.

see http://www.rfc-editor.org/rfc/bcp/bcp47.txt section 2.1

]]

local function get_ietf_parts (source, args_script, args_region, args_variant)
	local code, script, region, variant, private;								-- ietf tag parts

	if not is_set (source) then
		return nil, nil, nil, nil, nil, 'missing language tag';
	end

	local pattern = {															-- table of tables holding acceptibe ietf tag patterns and short names of the ietf part captured by the pattern
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%a%a)%-(%d%d%d%d)$', 's', 'r', 'v'}, 				-- 1 -  ll-Ssss-RR-variant (where variant is 4 digits)
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d)%-(%d%d%d%d)$', 's', 'r', 'v'},				-- 2 -  ll-Ssss-DDD-variant (where region is 3 digits; variant is 4 digits)
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%a%a)%-(%w%w%w%w%w%w?%w?%w?)$', 's', 'r', 'v'},		-- 3 -  ll-Ssss-RR-variant (where variant is 5-8 alnum characters)
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d)%-(%w%w%w%w%w%w?%w?%w?)$', 's', 'r', 'v'},	-- 4 -  ll-Ssss-DDD-variant (where region is 3 digits; variant is 5-8 alnum characters)
		
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d%d)$', 's', 'v'},						-- 5 -  ll-Ssss-variant (where variant is 4 digits)
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%w%w%w%w%w%w?%w?%w?)$', 's', 'v'},			-- 6 -  ll-Ssss-variant (where variant is 5-8 alnum characters)
		
		{'^(%a%a%a?)%-(%a%a)%-(%d%d%d%d)$', 'r', 'v'},							-- 7 -  ll-RR-variant (where variant is 4 digits)
		{'^(%a%a%a?)%-(%d%d%d)%-(%d%d%d%d)$', 'r', 'v'},						-- 8 -  ll-DDD-variant (where region is 3 digits; variant is 4 digits)
		{'^(%a%a%a?)%-(%a%a)%-(%w%w%w%w%w%w?%w?%w?)$', 'r', 'v'},				-- 9 -  ll-RR-variant (where variant is 5-8 alnum characters)
		{'^(%a%a%a?)%-(%d%d%d)%-(%w%w%w%w%w%w?%w?%w?)$', 'r', 'v'},				-- 10 - ll-DDD-variant (where region is 3 digits; variant is 5-8 alnum characters)
		
		{'^(%a%a%a?)%-(%d%d%d%d)$', 'v'},										-- 11 - ll-variant (where variant is 4 digits)
		{'^(%a%a%a?)%-(%w%w%w%w%w%w?%w?%w?)$', 'v'},							-- 12 - ll-variant (where variant is 5-8 alnum characters)
		
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%a%a)$', 's', 'r'},							-- 13 - ll-Ssss-RR
		{'^(%a%a%a?)%-(%a%a%a%a)%-(%d%d%d)$', 's', 'r'},						-- 14 - ll-Ssss-DDD (region is 3 digits)
		
		{'^(%a%a%a?)%-(%a%a%a%a)$', 's'},										-- 15 - ll-Ssss
		
		{'^(%a%a%a?)%-(%a%a)$', 'r'},											-- 16 - ll-RR
		{'^(%a%a%a?)%-(%d%d%d)$', 'r'},											-- 17 - ll-DDD (region is 3 digits)
		
		{'^(%a%a%a?)$'},														-- 18 - ll
		
		{'^(%a%a%a?)%-x%-(%w%w?%w?%w?%w?%w?%w?%w?)$', 'p'},						-- 19 - ll-x-pppppppp (private is 1-8 alnum characters)
		}

	local t = {};																-- table of captures; serves as a translator between captured ietf tag parts and named variables

	for i, v in ipairs (pattern) do												-- spin through the pattern table looking for a match
		local c1, c2, c3, c4;													-- captures in the 'pattern' from the pattern table go here
	
		c1, c2, c3, c4 = source:match (pattern[i][1]);							-- one or more captures set if source matches pattern[i])
			if c1 then															-- c1 always set on match
				code = c1;														-- first capture is always code
				t = {
					[pattern[i][2] or 'x'] = c2,								-- fill the table of captures with the rest of the captures
					[pattern[i][3] or 'x'] = c3,								-- take index names from pattern table and assign sequential captures
					[pattern[i][4] or 'x'] = c4,								-- index name may be nil in pattern[i] table so "or 'x'" spoofs a name for this index in this table
					};
				script = t.s or '';												-- translate table contents to named variables;
				region = t.r or '';												-- absent table entries are nil so set named ietf parts to empty string for concatenation
				variant= t.v or '';
				private = t.p or '';
				break;															-- and done
			end
	end

	if not code then
		return nil, nil, nil, nil, nil, table.concat ({'unrecognized language tag: ', source});		-- don't know what we got but it is malformed
	end

	code = code:lower();														-- ensure that we use and return lower case version of this
	
	if not (lang_data.override[code] or lang_name_table.lang[code]) then
		return nil, nil, nil, nil, nil, table.concat ({'unrecognized language code: ', code});		-- invalid language code, don't know about the others (don't care?)
	end
	
	if synonym_table[code] then													-- if 639-2/639-2T code has a 639-1 synonym
		table.insert (maint_cats, table.concat ({'Lang and lang-xx code promoted to ISO 639-1|', code}));
		table.insert (maint_msgs, table.concat ({'code: ', code, ' promoted to code: ', synonym_table[code]}));
		code = synonym_table[code];												-- use the synonym
	end

	if is_set (script) then
		if is_set (args_script) then
			return code, nil, nil, nil, nil, 'redundant script tag';			-- both code with script and |script= not allowed
		end
	else
		script = args_script or '';												-- use args.script if provided
	end 

	if is_set (script) then
		script = script:lower();												-- ensure that we use and return lower case version of this
		if not lang_name_table.script[script] then
			return code, nil, nil, nil, nil, table.concat ({'unrecognized script: ', script, ' for code: ', code});	-- language code ok, invalid script, don't know about the others (don't care?)
		end
	end
	if lang_name_table.suppressed[script] then									-- ensure that code-script does not use a suppressed script
		if in_array (code, lang_name_table.suppressed[script]) then
			return code, nil, nil, nil, nil, table.concat ({'script: ', script, ' not supported for code: ', code});	-- language code ok, script is suppressed for this code
		end
	end

	if is_set (region) then
		if is_set (args_region) then
			return code, nil, nil, nil, nil, 'redundant region tag';			-- both code with region and |region= not allowed
		end
	else
		region = args_region or '';												-- use args.region if provided
	end 

	if is_set (region) then
		region = region:lower();												-- ensure that we use and return lower case version of this
		if not lang_name_table.region[region] then
			return code, script, nil, nil, nil, table.concat ({'unrecognized region: ', region, ' for code: ', code});
		end
	end
	
	if is_set (variant) then
		if is_set (args_variant) then
			return code, nil, nil, nil, nil, 'redundant variant tag';			-- both code with variant and |variant= not allowed
		end
	else
		variant = args_variant or '';											-- use args.variant if provided
	end 

	if is_set (variant) then
		variant = variant:lower();												-- ensure that we use and return lower case version of this
		if not lang_name_table.variant[variant] then							-- make sure variant is valid
			return code, script, region, nil, nil, table.concat ({'unrecognized variant: ', variant});
		end																		-- does this duplicate/replace tests in lang() and lang_xx()?
		if is_set (script) then													-- if script set it must be part of the 'prefix'
			if not in_array (table.concat ({code, '-', script}), lang_name_table.variant[variant]['prefixes']) then
				return code, script, region, nil, nil, table.concat ({'unrecognized variant: ', variant, ' for code-script pair: ', code, '-', script});
			end
		else
			if not in_array (code, lang_name_table.variant[variant]['prefixes']) then
				return code, script, region, nil, nil, table.concat ({'unrecognized variant: ', variant, ' for code: ', code});
			end				
		end
	end
	
	if is_set (private) then
		private = private:lower();												-- ensure that we use and return lower case version of this
		if not lang_data.override[table.concat ({code, '-x-', private})] then	-- make sure private tag is valid; note that index 
			return code, script, region, nil, nil, table.concat ({'unrecognized private tag: ', private});
		end
	end
	return code, script, region, variant, private, nil;							-- return the good bits; make sure that msg is nil
end


--[[--------------------------&lt; M A K E _ E R R O R _ M S G &gt;--------------------------------------------------

assembles an error message from template name, message text, help link, and error category.

]]

local function make_error_msg (msg, args, template)
	local out = {};
	local category;
	
	if 'transl' == template then
		category = 'transl';
	else
		category = 'lang and lang-xx'
	end
	
	table.insert (out, table.concat ({'&amp;#x5B;', args.text or 'undefined', '&amp;#x5D; '}));	-- for error messages output args.text if available
	table.insert (out, table.concat ({'&lt;span style=\"font-size:100%; font-style:normal;\" class=\"error\"&gt;error: {{', template, '}}: '}));
	table.insert (out, msg);
	table.insert (out, table.concat ({' ([[:Category:', category, ' template errors|help]])'}));
	table.insert (out, '&lt;/span&gt;');
	
	if (0 == namespace) and not args.nocat then						-- only categorize in article space
		table.insert (out, table.concat ({'[[Category:', category, ' template errors]]'}));
	end

	return table.concat (out);
end
	

--[=[-------------------------&lt; M A K E _ W I K I L I N K &gt;----------------------------------------------------

Makes a wikilink; when both link and display text is provided, returns a wikilink in the form [[L|D]]; if only
link is provided, returns a wikilink in the form [[L]]; if neither are provided or link is omitted, returns an
empty string.

]=]

local function make_wikilink (link, display)
	if is_set (link) then
		if is_set (display) then
			return table.concat ({'[[', link, '|', display, ']]'});
		else
			return table.concat ({'[[', link, ']]'});
		end
	else
		return '';
	end
end


--[[--------------------------&lt; D I V _ M A R K U P _ A D D &gt;--------------------------------------------------

adds &lt;i&gt; and &lt;/i&gt; tags to list-item text or to implied &lt;p&gt;..&lt;/p&gt; text.  mixed not supported

]]

local function div_markup_add (text, style)
local implied_p = {};

	if text:find ('^\n[%*:;#]') then											-- look for list markup; list markup must begin at start of text
		if 'italic' == style then
			return mw.ustring.gsub (text, '(\n[%*:;#]+)([^\n]+)', '%1&lt;i&gt;%2&lt;/i&gt;');	-- insert italic markup at each list item
		else
			return text;
		end
	end

	if text:find ('\n+') then													-- look for any number of \n characters in text
		text = text:gsub ('([^\n])\n([^\n])', '%1 %2');							-- replace single newline characters with a space character which mimics mediawiki

		if 'italic' == style then
			text = text:gsub('[^\n]+', '&lt;p&gt;&lt;i&gt;%1&lt;/i&gt;&lt;/p&gt;');						-- insert p and italic markup tags at each impled p (two or more consecutive '\n\n' sequences)
		else
			text = text:gsub ('[^\n]+', '&lt;p&gt;%1&lt;/p&gt;');							-- insert p markup at each impled p
			text = text:gsub ('\n', '');										-- strip newline characters
		end
	end

	return text;
end


--[[--------------------------&lt; M A K E _ T E X T _ H T M L &gt;--------------------------------------------------

Add the html markup to text according to the type of content that it is: &lt;span&gt; or &lt;i&gt; tags for inline content or
&lt;div&gt; tags for block content

]]

local function make_text_html (code, text, tag, rtl, style, size, language)
	local html = {};
	local style_added = '';

	if text:match ('^%*') then
		table.insert (html, '&amp;#42;');											-- move proto language text prefix outside of italic markup if any; use numeric entity because plane splat confuses MediaWiki
		text = text:gsub ('^%*', '');											-- remove the splat from the text
	end

	if 'span' == tag then														-- default html tag for inline content
		if 'italic' == style then												-- but if italic
			tag = 'i';															-- change to &lt;i&gt; tags
		end
	else																		-- must be div so go
		text = div_markup_add (text, style);									-- handle implied &lt;p&gt;, implied &lt;p&gt; with &lt;i&gt;, and list markup (*;:#) with &lt;i&gt;
	end

	table.insert (html, table.concat ({'&lt;', tag}));								-- open the &lt;i&gt;, &lt;span&gt;, or &lt;div&gt; html tag
	table.insert (html, table.concat ({' lang="', code, '\"'}));				-- add language attribute

	if rtl or unicode.is_rtl(text) then
		table.insert (html, ' dir="rtl"');										-- add direction attribute for right to left languages
	end

	if 'normal' == style then													-- when |italic=no
		table.insert (html, ' style=\"font-style:normal;');						-- override external markup, if any
		style_added = '\"';														-- remember that style attribute added and is not yet closed
	end

	if is_set (size) then														-- when |size=&lt;something&gt;
		if is_set (style_added) then
			table.insert (html, table.concat ({' font-size:', size, ';'}));		-- add when style attribute already inserted
		else
			table.insert (html, table.concat ({' style=\"font-size:', size, ';'}));	-- create style attribute
			style_added = '\"';													-- remember that style attribute added and is not yet closed
		end
	end

	if is_set (language) then
		table.insert (html, table.concat ({style_added, ' title=\"', language}));	--start the title text
		if language:find ('languages') then
			table.insert (html, ' collective text\"');							-- for collective languages
		else
			table.insert (html, ' language text\"');							-- for individual languages
		end
		table.insert (html, '&gt;');												-- close the opening html tag
	else
		table.insert (html, table.concat ({style_added, '&gt;'}));					-- close the style attribute and close opening html tag
	end
	table.insert (html, text);													-- insert the text

	table.insert (html, table.concat ({'&lt;/', tag, '&gt;'}));						-- close the &lt;i&gt;, &lt;span&gt;, or &lt;div&gt; html tag

	if rtl then																	-- legacy; shouldn't be necessary because all of the rtl text is wrapped inside an html tag with dir="rtl" attribute 
		table.insert (html, '&amp;lrm;');											-- make sure the browser knows that we're at the end of the rtl
	end
	
	return table.concat (html);													-- put it all together and done
end


--[=[-------------------------&lt; M A K E _ C A T E G O R Y &gt;----------------------------------------------------

For individual language, &lt;language&gt;, returns:
	[[Category:Articles containing &lt;language&gt;-language text]]

for English:
	[[Category:Articles containing explicitly cited English-language text]]
	
for artificial languages (code: art)
	[[Category:Articles containing constructed-language text]]

for ISO 639-2 collective languages (and for 639-1 bh):
	[[Category:Articles with text from the &lt;language&gt; languages collective]]

]=]

local function make_category (code, language_name, nocat)
	local cat = {};
	
	if (0 ~= namespace) or nocat then											-- only categorize in article space
		return '';																-- return empty string for concatenation
	end
	
	if language_name:find ('languages') then
		return table.concat ({'[[Category:Articles with text from the ', language_name, ' collective]]'});
	end
		
	table.insert (cat, '[[Category:Articles containing ');
	
	if 'en' == code then
		table.insert (cat, 'explicitly cited English');
	elseif 'art' == code then
		table.insert (cat, 'constructed')
	else
		table.insert (cat, language_name);
	end
	
	table.insert (cat, '-language text]]');

	return table.concat (cat);	
end


--[[--------------------------&lt; M A K E _ T R A N S L I T &gt;----------------------------------------------------

return translit &lt;i lang=xx-Latn&gt;...&lt;/i&gt; where xx is the language code; else return empty string

The value |script= is not used in {{transl}} for this purpose; instead it uses |code.  Because language scripts
are listed in the {{transl}} switches they are included in the data tables.  The script parameter is introduced
at {{Language with name and transliteration}}.  If |script= is set, this function uses it in preference to code.

To avoid confusion, in this module and the templates that use it, the transliteration script parameter is renamed
to be |translit-script= (in this function, tscript)

This function is used by both lang_xx() and transl()
	lang_xx() always provides code, language_name, and translit; may provide tscript; never provides style
	transl() always provides language_name, translit, and one of code or tscript, never both; always provides style

For {{transl}}, style only applies when a language code is provided
]]

local function make_translit (code, language_name, translit, std, tscript, style)
	local title;
	local tout = {};
	local title_table = lang_data.translit_title_table;							-- table of transliteration standards and the language codes and scripts that apply to those standards
	
	if is_set (code) then														-- when a language code is provided (always with {{lang-xx}} templates, not always with {{transl}})
		if not style then														-- nil for the default italic style
			table.insert (tout, "&lt;i lang=\"");									-- so use &lt;i&gt; tag
		else
			table.insert (tout, table.concat ({'&lt;span style=\"font-style:', style, '\" lang=\"'}));	-- non-standard style, construct a span tag for it
		end
		table.insert (tout, code);
		table.insert (tout, "-Latn\" title=\"");								-- transliterations are always Latin script
	else
		table.insert (tout, "&lt;span title=\"");									-- when no language code: no lang= attribute, not italic ({{transl}} only)
	end
	
	std = std and std:lower();													-- lower case for table indexing
	
	if not is_set (std) and not is_set (tscript) then							-- when neither standard nor script specified
		table.insert (tout, language_name);										-- write a generic tool tip
		if not language_name:find ('languages') then							-- collective language names (plural 'languages' is part of the name)
			table.insert (tout, '-language')									-- skip this text (individual and macro languages only)
		end
		table.insert (tout, ' romanization');									-- finish the tool tip; use romanization when neither script nor standard supplied
	elseif is_set (std) and is_set (tscript) then								-- when both are specified
		if title_table[std] then												-- and if standard is legitimate
			if title_table[std][tscript] then									-- and if script for that standard is legitimate
				table.insert (tout, table.concat ({title_table[std][tscript:lower()], ' (', lang_name_table.script[tscript][1], ' script) transliteration'}));	-- add the appropriate text to the tool tip
			else
				table.insert (tout, title_table[std]['default']);				-- use the default if script not in std table; TODO: maint cat? error message because script not found for this standard?
			end
		else
			return '';															-- invalid standard, setup for error message
		end

	elseif is_set (std) then													-- translit-script not set, use language code
		if not title_table[std] then return ''; end								-- invalid standard, setup for error message
		
		if title_table[std][code] then											-- if language code is in the table (transl may not provide a language code)
			table.insert (tout, table.concat ({title_table[std][code:lower()], ' (', lang_name_table.lang[code][1], ' language) transliteration'}));	-- add the appropriate text to the tool tip
		else																	-- code doesn't match
			table.insert (tout, title_table[std]['default']);					-- so use the standard's default
		end
	else																		-- here if translit-script set but translit-std not set
		if title_table['no_std'][tscript] then
			table.insert (tout, title_table['no_std'][tscript]);				-- use translit-script if set
		elseif title_table['no_std'][code] then
			table.insert (tout, title_table['no_std'][code]);					-- use language code
		else
			if is_set (tscript) then
				table.insert (tout, table.concat ({language_name, '-script transliteration'}));	-- write a script tool tip
			elseif is_set (code) then
				if not language_name:find ('languages') then					-- collective language names (plural 'languages' is part of the name)
					table.insert (tout, '-language')							-- skip this text (individual and macro languages only)
				end
				table.insert (tout, ' transliteration');						-- finish the tool tip
			else
				table.insert (tout, ' transliteration');						-- generic tool tip (can we ever get here?)
			end
		end
	end

	table.insert (tout, '"&gt;');
	table.insert (tout, translit);
	if is_set (code) and not style then											-- when a language code is provided (always with {{lang-xx}} templates, not always with {{transl}})
		table.insert (tout, "&lt;/i&gt;");											-- close the italic tag
	else
		table.insert (tout, "&lt;/span&gt;");											-- no language code so close the span tag
	end
	return table.concat (tout);
end


--[[--------------------------&lt; V A L I D A T E _ T E X T &gt;----------------------------------------------------

This function checks the content of args.text and returns empty string if nothing is amiss else it returns an
error message.  The tests are for empty or missing text and for improper or disallowed use of apostrophe markup.

Italic rendering is controlled by the |italic= template parameter so italic markup should never appear in args.text
either as ''itself'' or as '''''bold italic''''' unless |italic=unset or |italic=invert.

]]

local function validate_text (template, args)
	if not is_set (args.text) then
		return make_error_msg ('no text', args, template);
	end

	if args.text:find ("%f[\']\'\'\'\'%f[^\']") or args.text:find ("\'\'\'\'\'[\']+") then	-- because we're looking, look for 4 appostrophes or 6+ appostrophes
		return make_error_msg ('text has malformed markup', args, template);
	end

	local style = args.italic;

	if ('unset' ~= style) and ('invert' ~=style) then
		if args.text:find ("%f[\']\'\'%f[^\']") or args.text:find ("%f[\']\'\'\'\'\'%f[^\']") then	-- italic but not bold, or bold italic
			return make_error_msg ('text has italic markup', args, template);
		end
	end
end


--[[--------------------------&lt; R E N D E R _ M A I N T &gt;------------------------------------------------------

render mainenance messages and categories

]]

local function render_maint(nocat)
	local maint = {};
	
	if 0 &lt; #maint_msgs then														-- when there are maintenance messages
		table.insert (maint, table.concat ({'&lt;span class="lang-comment" style="font-style:normal; display:none; color:#33aa33; margin-left:0.3em"&gt;'}));	-- opening &lt;span&gt; tag
		for _, msg in ipairs (maint_msgs) do
			table.insert (maint, table.concat ({msg, ' '}));					-- add message strings
		end
		table.insert (maint, '&lt;/span&gt;');										-- close the span
	end
	
	if (0 &lt; #maint_cats) and (0 == namespace) and not nocat then				-- when there are maintenance categories; article namespace only
		for _, cat in ipairs (maint_cats) do
			table.insert (maint, table.concat ({'[[Category:', cat, ']]'}));	-- format and add the categories
		end
	end
	
	return table.concat (maint);
end


--[[--------------------------&lt; P R O T O _ P R E F I X &gt;------------------------------------------------------

for proto languages, text is prefixed with a splat.  We do that here as a flag for make_text_html() so that a splat
will be rendered outside of italic markup (if used).  If the first character in text here is already a splat, we
do nothing

]]

local function proto_prefix (text, language_name)
	if language_name:find ('^Proto%-') and not text:find ('^*') then			-- language is a proto and text does not already have leading splat
		return table.concat ({'*', text});										-- prefix proto language text with a splat
	end
	
	return text;
end


--[[--------------------------&lt; H A S _ P O E M _ T A G &gt;------------------------------------------------------

looks for a poem strip marker in text; returns true when found; false else

auto-italic detection disabled when text has poem stripmarker because it is not possible for this code to know
the content that will replace the stripmarker.

]]

local function has_poem_tag (text)
	return text:find ('\127[^\127]*UNIQ%-%-poem%-[%a%d]+%-QINU[^\127]*\127') and true or false;
end


--[[--------------------------&lt; H T M L _ T A G _ S E L E C T &gt;------------------------------------------------

Inspects content of and selectively trims text.  Returns text and the name of an appropriate html tag for text.

If text contains:
	\n\n	text has implied &lt;p&gt;..&lt;/p&gt; tags - trim leading and trailing whitespace and return 
If text begins with list markup:
	\n*		unordered
	\n;		definition
	\n:		definition
	\n#		ordered
trim all leading whitespace except  \n and trim all trailing whitespace

If text contains &lt;poem&gt;...&lt;/poem&gt; stripmarker, return text unmodified and choose &lt;div&gt;..&lt;/div&gt; tags because 
the stripmarker is replaced with text wrapped in &lt;div&gt;..&lt;/div&gt; tags.

]]

local function html_tag_select (text)
	local tag;
	
	if has_poem_tag (text) then													-- contains poem stripmarker (we can't know the content of that)
		tag = 'div';															-- poem replacement is in div tags so lang must use div tags
	elseif mw.text.trim (text):find ('\n\n+') then								-- contains implied p tags
		text = mw.text.trim (text);												-- trim leading and trailing whitespace characters
		tag = 'div';															-- must be div because span may not contain p tags (added later by MediaWiki); poem replacement is in div tags
	elseif text:find ('\n[%*:;%#]') then										-- if text has list markup
		text = text:gsub ('^[\t\r\f ]*', ''):gsub ('%s*$', '');					-- trim all whitespace except leading newline character '\n'
		tag = 'div';															-- must be div because span may not contain ul, dd, dl, ol tags (added later by MediaWiki)
	else
		text = mw.text.trim (text);												-- plain text
		tag = 'span';															-- so span is fine
	end
	
	return text, tag;
end


--[[--------------------------&lt; L A N G &gt;----------------------------------------------------------------------

entry point for {{lang}}

there should be no reason to set parameters in the {{lang}} {{#invoke:}}
	&lt;includeonly&gt;{{#invoke:lang|lang}}&lt;/includeonly&gt;

parameters are received from the template's frame (parent frame)

]]

local function _lang (args)
	local out = {};
	local language_name;														-- used to make category names
	local subtags = {};															-- IETF subtags script, region, variant, and private
	local code;																	-- the language code
	local msg;																	-- for error messages
	local tag = 'span';															-- initial value for make_text_html()
	local template = args.template or 'lang';

	if args[1] and args.code then
		return make_error_msg ('conflicting: {{{1}}} and &amp;#124;code=', args, template);
	else
		args.code = args[1] or args.code;										-- prefer args.code
	end

	if args[2] and args.text then
		return make_error_msg ('conflicting: {{{2}}} and &amp;#124;text=', args, template);
	else
		args.text = args[2] or args.text;										-- prefer args.text
	end
	
	msg = validate_text ('lang', args);											-- ensure that |text= is set
	if is_set (msg) then														-- msg is an already-formatted error message
		return msg;
	end
	
	args.text, tag = html_tag_select (args.text);								-- inspects text; returns appropriate html tag with text trimmed accordingly

	validate_cat_args (args);													-- determine if categorization should be suppressed

	args.rtl = args.rtl == 'yes';												-- convert to boolean: 'yes' -&gt; true, other values -&gt; false

	code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (args.code);	-- |script=, |region=, |variant= not supported because they should be part of args.code ({{{1}}} in {{lang}})

	if msg then
		return make_error_msg ( msg, args, template);
	end

	args.italic, msg = validate_italic (args);
	if msg then
		return make_error_msg (msg, args, template);
	end

	if nil == args.italic then													-- nil when |italic= absent or not set or |italic=default; args.italic controls
		if ('latn' == subtags.script) or								 		-- script is latn
			(this_wiki_lang ~= code and not is_set (subtags.script) and not has_poem_tag (args.text) and unicode.is_Latin (args.text)) then -- text not this wiki's language, no script specified and not in poem markup but is wholly latn script (auto-italics)
				args.italic = 'italic';											-- DEFAULT for {{lang}} templates is upright; but if latn script set for font-style:italic
		else
			args.italic = 'inherit';											-- italic not set; script not latn; inherit current style
		end
	end
	
	if is_set (subtags.script) then												-- if script set, override rtl setting
		if in_array (subtags.script, lang_data.rtl_scripts) then
			args.rtl = true;													-- script is an rtl script
		else
			args.rtl = false;													-- script is not an rtl script
		end
	end

	args.code = format_ietf_tag (code, subtags.script, subtags.region, subtags.variant);	-- format to recommended subtag styles; private omitted because private

	subtags.private = subtags.private and table.concat ({code, '-x-', subtags.private}) or nil;		-- assemble a complete private ietf subtag; args.code does not get private subtag

	if is_set (subtags.private) and lang_data.override[subtags.private] then	-- get the language name for categorization
		language_name = lang_data.override[subtags.private][1];					-- first look for private use tag language name
	elseif lang_data.override[code] then
		language_name = lang_data.override[code][1]								-- then language names taken from the override table
	elseif lang_name_table.lang[code] then
		language_name = lang_name_table.lang[code][1];							-- table entries sometimes have multiple names, always take the first one
	end

	if 'invert' == args.italic and 'span' == tag then							-- invert only supported for in-line content
		args.text = invert_italics (args.text)
	end
	
	args.text = proto_prefix (args.text, language_name);						-- prefix proto-language text with a splat

	table.insert (out, make_text_html (args.code, args.text, tag, args.rtl, args.italic, args.size, language_name));
	table.insert (out, make_category (code, language_name, args.nocat));
	table.insert (out, render_maint(args.nocat));								-- maintenance messages and categories

	return table.concat (out);													-- put it all together and done
end


--[[--------------------------&lt; L A N G &gt;----------------------------------------------------------------------

entry point for {{lang}}

there should be no reason to set parameters in the {{lang}} {{#invoke:}}
	&lt;includeonly&gt;{{#invoke:lang|lang}}&lt;/includeonly&gt;

parameters are received from the template's frame (parent frame)

]]

local function lang (frame)
	local args = getArgs (frame, {												-- this code so that we can detect and handle wiki list markup in text
		valueFunc = function (key, value)
			if 2 == key or 'text' == key then									-- the 'text' parameter; do not trim wite space
				return value;													-- return untrimmed 'text'
			elseif value then													-- all other values: if the value is not nil
				value = mw.text.trim (value);									-- trim whitespace
				if '' ~= value then												-- empty string when value was only whitespace
					return value;
				end
			end
			return nil;															-- value was empty or contained only whitespace
		end																		-- end of valueFunc
		});

	return _lang (args);
end


--[[--------------------------&lt; L A N G _ X X &gt;----------------------------------------------------------------

For the {{lang-xx}} templates, the only parameter required to be set in the template is the language code.  All
other parameters can, usually should, be written in the template call.  For {{lang-xx}} templates for languages
that can have multiple writing systems, it may be appropriate to set |script= as well.

For each {{lang-xx}} template choose the appropriate entry-point function so that this function knows the default
styling that should be applied to text.

For normal, upright style:
	&lt;includeonly&gt;{{#invoke:lang|lang_xx_inherit|code=xx}}&lt;/includeonly&gt;
For italic style:
	&lt;includeonly&gt;{{#invoke:lang|lang_xx_italic|code=xx}}&lt;/includeonly&gt;

All other parameters should be received from the template's frame (parent frame)

Supported parameters are:
	|code = (required) the IANA language code
	|script = IANA script code; especially for use with languages that use multiple writing systems
	|region = IANA region code
	|variant = IANA variant code
	|text = (required) the displayed text in language specified by code
	|link = boolean false ('no') does not link code-spcified language name to associated language article
	|rtl = boolean true ('yes') identifies the language specified by code as a right-to-left language
	|nocat = boolean true ('yes') inhibits normal categorization; error categories are not affected
	|cat = boolian false ('no') opposite form of |nocat=
	|italic = boolean true ('yes') renders displayed text in italic font; boolean false ('no') renders displayed text in normal font; not set renders according to initial_style_state
	|lit = text that is a literal translation of text
	|label = 'none' to suppress all labeling (language name, 'translit.', 'lit.')
				any other text replaces language-name label - automatic wikilinking disabled
	
	for those {{lang-xx}} templates that support transliteration (those templates where |text= is not entirely latn script):
	|translit = text that is a transliteration of text
	|translit-std = the standard that applies to the transliteration
	|translit-script = ISO 15924 script name; falls back to code

For {{lang-xx}}, the positional parameters are:
	{{{1}}}	text
	{{{2}}}	transliterated text
	{{{3}}}	literal translation text
no other positional parameters are allowed

]]

local function _lang_xx (args)
	local out = {};
	local language_name;														-- used to make display text, article links
	local category_name;														-- same as language_name except that it retains any parenthetical disambiguators (if any) from the data set
	local subtags = {};															-- IETF subtags script, region, and variant
	local code;																	-- the language code

	local translit_script_name;													-- name associated with IANA (ISO 15924) script code
	local translit;
	local translit_title;
	local msg;																	-- for error messages
	local tag = 'span';															-- initial value for make_text_html()

	if args[1] and args.text then
		return make_error_msg ('conflicting: {{{1}}} and &amp;#124;text=', args, 'lang-xx');
	else
		args.text = args[1] or args.text;										-- prefer args.text
	end
	
	msg = validate_text ('lang-xx', args);										-- ensure that |text= is set, does not contain italic markup and is protected from improper bolding
	if is_set (msg) then
		return msg;
	end

	args.text, tag = html_tag_select (args.text);								-- inspects text; returns appropriate html tag with text trimmed accordingly

	if args[2] and args.translit then
		return make_error_msg ('conflicting: {{{2}}} and &amp;#124;translit=', args, 'lang-xx');
	else
		args.translit = args[2] or args.translit								-- prefer args.translit
	end
	
	if args[3] and (args.translation or args.lit) then
		return make_error_msg ('conflicting: {{{3}}} and &amp;#124;lit= or &amp;#124;translation=', args, 'lang-xx');
	elseif args.translation and args.lit then
		return make_error_msg ('conflicting: &amp;#124;lit= and &amp;#124;translation=', args, 'lang-xx');
	else
		args.translation = args[3] or args.translation or args.lit;				-- prefer args.translation
	end

	if args.links and args.link then
		return make_error_msg ('conflicting: &amp;#124;links= and &amp;#124;link=', args, 'lang-xx');
	else
		args.link = args.link or args.links;									-- prefer args.link
	end

	validate_cat_args (args);													-- determine if categorization should be suppressed

	args.rtl = args.rtl == 'yes';												-- convert to boolean: 'yes' -&gt; true, other values -&gt; false

	code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (args.code, args.script, args.region, args.variant);	-- private omitted because private

	if msg then																	-- if an error detected then there is an error message
		return make_error_msg (msg, args, 'lang-xx');
	end
	
	args.italic, msg = validate_italic (args);
	if msg then
		return make_error_msg (msg, args, 'lang-xx');
	end

	if nil == args.italic then													-- args.italic controls
		if is_set (subtags.script) then
			if 'latn' == subtags.script then
				args.italic = 'italic';											-- |script=Latn; set for font-style:italic
			else
				args.italic = initial_style_state;								-- italic not set; script is not latn; set for font-style:&lt;initial_style_state&gt;
			end
		else
			args.italic = initial_style_state;									-- here when |italic= and |script= not set; set for font-style:&lt;initial_style_state&gt;
		end
	end
	
	if is_set (subtags.script) then												-- if script set override rtl setting
		if in_array (subtags.script, lang_data.rtl_scripts) then
			args.rtl = true;													-- script is an rtl script
		else
			args.rtl = false;													-- script is not an rtl script
		end
	end

	args.code = format_ietf_tag (code, subtags.script, subtags.region, subtags.variant);	-- format to recommended subtag styles
	
	subtags.private = subtags.private and table.concat ({code, '-x-', subtags.private}) or nil;		-- assemble a complete private ietf subtag; args.code does not get private subtag

	if is_set (subtags.private) and lang_data.override[subtags.private] then	-- get the language name for categorization
		language_name = lang_data.override[subtags.private][1];					-- first look for private use tag language name
	elseif lang_data.override[args.code:lower()] then							-- look for whole IETF tag in override table
		language_name = lang_data.override[args.code:lower()][1];				-- args.code:lower() because format_ietf_tag() returns mixed case
	elseif lang_data.override[code] then										-- not there so try basic language code
		language_name = lang_data.override[code][1];
	elseif not is_set (subtags.variant) then									
		if lang_name_table.lang[code] then
			language_name = lang_name_table.lang[code][1];						-- table entries sometimes have multiple names, always take the first one
		end
	else																		-- TODO: is this the right thing to do: take language display name from variants table?
		if lang_name_table.variant[subtags.variant] then						-- TODO: there is some discussion at Template talk:Lang about having a label parameter for use when variant name is not desired among other things
			language_name = lang_name_table.variant[subtags.variant]['descriptions'][1];	-- table entries sometimes have multiple names, always take the first one
		end
	end

	category_name = language_name;												-- category names retain IANA parenthetical diambiguators (if any)
	language_name = language_name:gsub ('%s+%b()', '');							-- remove IANA parenthetical disambiguators or qualifiers from names that have them

	if args.label then
		if 'none' ~= args.label then
			table.insert (out, table.concat ({args.label, ': '}));				-- custom label
		end
	else
		if 'no' == args.link then
			table.insert (out, language_name);									-- language name without wikilink
		else
			if language_name:find ('languages') then
				table.insert (out, make_wikilink (language_name));				-- collective language name uses simple wikilink
			elseif lang_data.article_name[code] then
				table.insert (out, make_wikilink (lang_data.article_name[code][1], language_name));	-- language name with wikilink from override data
			else
				table.insert (out, make_wikilink (language_name .. ' language', language_name));	-- language name with wikilink
			end
		end
		table.insert (out, ': ');												-- separator
	end

	if 'invert' == args.italic then
		args.text = invert_italics (args.text)
	end
	
	args.text = proto_prefix (args.text, language_name);						-- prefix proto-language text with a splat

	table.insert (out, make_text_html (args.code, args.text, tag, args.rtl, args.italic, args.size))

	if is_set (args.translit) and not unicode.is_Latin (args.text) then			-- transliteration (not supported in {{lang}}); not supported when args.text is wholly latn text (this is an imperfect test)
		table.insert (out, ', ');												-- comma to separate text from translit
		if 'none' ~= args.label then
			table.insert (out, '&lt;small&gt;');
			if lang_name_table.script[args['translit-script']] then				-- when |translit-script= is set, try to use the script's name
				translit_script_name = lang_name_table.script[args['translit-script'][1]];
			else
				translit_script_name = language_name;							-- fall back on language name
			end
			translit_title = mw.title.makeTitle (0, table.concat ({'Romanization of ', translit_script_name}));		-- make a title object
			if translit_title.exists and ('no' ~= args.link) then
				table.insert (out, make_wikilink ('Romanization of ' .. translit_script_name or language_name, 'romanized') .. ':');	-- make a wikilink if there is an article to link to
			else
				table.insert (out, 'romanized:');								-- else plain text
			end
			table.insert (out, '&amp;nbsp;&lt;/small&gt;');								-- close the small tag
		end
		
		translit = make_translit (args.code, language_name, args.translit, args['translit-std'], args['translit-script'])
		if is_set (translit) then
			table.insert (out, translit);
		else
			return make_error_msg (table.concat ({'invalid translit-std: \'', args['translit-std'] or '[missing]'}), args, 'lang-xx');
		end
	end
	
	if is_set (args.translation) then											-- translation (not supported in {{lang}})
		table.insert (out, ', ');
		if 'none' ~= args.label then
			table.insert (out, '&lt;small&gt;');
			if 'no' == args.link then
				table.insert (out, '&lt;abbr title="literal translation"&gt;lit.&lt;/abbr&gt;');
			else
				table.insert (out, make_wikilink ('Literal translation', 'lit.'));
			end
			table.insert (out, "&amp;nbsp;&lt;/small&gt;");
		end
		table.insert (out, table.concat ({'&amp;#39;', args.translation, '&amp;#39;'}));	-- use html entities to avoid wiki markup confusion
	end
	
	table.insert (out, make_category (code, category_name, args.nocat));
	table.insert (out, render_maint(args.nocat));								-- maintenance messages and categories

	return table.concat (out);													-- put it all together and done
end


--[[--------------------------&lt; L A N G _ X X _ A R G S _ G E T &gt;----------------------------------------------

common function to get args table from {{lang-??}} templates

returns table of args

]]

local function lang_xx_args_get (frame)
	local args = getArgs(frame,
		{
		parentFirst= true,														-- parameters in the template override parameters set in the {{#invoke:}}
		valueFunc = function (key, value)
			if 1 == key then													-- the 'text' parameter; do not trim wite space
				return value;													-- return untrimmed 'text'
			elseif value then													-- all other values: if the value is not nil
				value = mw.text.trim (value);									-- trim whitespace
				if '' ~= value then												-- empty string when value was only whitespace
					return value;
				end
			end
			return nil;															-- value was empty or contained only whitespace
		end																		-- end of valueFunc
	});

	return args;
end


--[[--------------------------&lt; L A N G _ X X _ I T A L I C &gt;--------------------------------------------------

Entry point for those {{lang-xx}} templates that call lang_xx_italic().  Sets the initial style state to italic.

]]

local function lang_xx_italic (frame)
	local args = lang_xx_args_get (frame);
	
	initial_style_state = 'italic';
	return _lang_xx (args);
end


--[[--------------------------&lt; _ L A N G _ X X _ I T A L I C &gt;------------------------------------------------

Entry point ffrom another module.  Sets the initial style state to italic.

]]

local function _lang_xx_italic (args)
	initial_style_state = 'italic';
	return _lang_xx (args);
end


--[[--------------------------&lt; L A N G _ X X _ I N H E R I T &gt;------------------------------------------------

Entry point for those {{lang-xx}} templates that call lang_xx_inherit().  Sets the initial style state to inherit.

]]

local function lang_xx_inherit (frame)
	local args = lang_xx_args_get (frame);

	initial_style_state = 'inherit';
	return _lang_xx (args);
end


--[[--------------------------&lt; _ L A N G _ X X _ I N H E R I T &gt;----------------------------------------------

Entry point from another module.  Sets the initial style state to inherit.

]]

local function _lang_xx_inherit (args)
	initial_style_state = 'inherit';
	return _lang_xx (args);
end


--[[--------------------------&lt; _ I S _ I E T F _ T A G &gt;------------------------------------------------------

Returns true when a language name associated with IETF language tag exists; nil else.  IETF language tag must be valid.

All code combinations supported by {{lang}} and the {{lang-xx}} templates are supported by this function.

The purpose of this function is to replace {{#ifexist:Template:ISO 639 name xx|&lt;exists&gt;|&lt;does not exist&gt;}} in
templates that are better served by using {{#invoke:lang|name_from_tag|&lt;code&gt;}}

Module entry point from another module

]]

local function _is_ietf_tag (tag)												-- entry point when this module is require()d into another
	local c, s, r, v, p, err;													-- code, script, region, private, error message
	
	c, s, r, v, p, err = get_ietf_parts (tag);									-- disassemble tag into constituent part and validate
	return ((c and not err) and true) or nil;									-- return true when code portion has a value without error message; nil else
end


--[[--------------------------&lt; I S _ I E T F _ T A G &gt;--------------------------------------------------------

Module entry point from an {{#invoke:}}

]]

local function is_ietf_tag (frame)												-- entry point from an {{#invoke:Lang|is_ietf_tag|&lt;ietf tag&gt;}}
	return _is_ietf_tag (frame.args[1]);										-- frame.args[1] is the ietf language tag
end


--[[--------------------------&lt; _ N A M E _ F R O M _ C O D E &gt;------------------------------------------------

Returns language name associated with IETF language tag if valid; empty string else.

All code combinations supported by {{lang}} and the {{lang-xx}} templates are supported by this function.

Set invoke's |link= parameter to yes to get wikilinked version of the language name.

Module entry point from another module

]]

local function _name_from_tag (args)
	local subtags = {};															-- IETF subtags script, region, variant, and private
	local raw_code = args[1];													-- save a copy of the input IETF subtag
	local link = 'yes' == args['link'];											-- make a boolean
	local code;																	-- the language code
	local msg;																	-- gets an error message if IETF language tag is malformed or invalid
	local language_name = '';
	
	code, subtags.script, subtags.region, subtags.variant, subtags.private, msg = get_ietf_parts (raw_code);
	if msg then
		local template = (args['template'] and table.concat ({'{{', args['template'], '}}: '})) or '';	-- make template name (if provided by the template)
		return table.concat ({'&lt;span style=\"font-size:100%; font-style:normal;\" class=\"error\"&gt;error: ', template, msg, '&lt;/span&gt;'});
	end

	if lang_data.override[raw_code:lower()] then								-- look for whole IETF tag in override table (force lower case)
		language_name = lang_data.override[raw_code:lower()][1];
	elseif lang_data.override[code] then										-- not there so try basic language code in override table
		language_name = lang_data.override[code][1];
	elseif not is_set (subtags.variant) then									
		if lang_name_table.lang[code] then
			language_name = lang_name_table.lang[code][1];						-- table entries sometimes have multiple names, always take the first one
		end
	else																		-- TODO: is this the right thing to do: take language display name from variants table?
		if lang_name_table.variant[subtags.variant] then						-- TODO: there is some discussion at Template talk:Lang about having a label parameter for use when variant name is not desired among other things
			language_name = lang_name_table.variant[subtags.variant]['descriptions'][1];	-- table entries sometimes have multiple names, always take the first one
		end
	end

	language_name = language_name:gsub ('%s+%b()', '');							-- remove IANA parenthetical disambiguators or qualifiers from names that have them

	if link then																-- when |link=yes, wikilink the language name
		if language_name:find ('languages') then
			return make_wikilink (language_name);								-- collective language name uses simple wikilink
		elseif lang_data.article_name[code] then
			return make_wikilink (lang_data.article_name[code][1], language_name);	-- language name with wikilink from override data
		else
			return make_wikilink (language_name .. ' language', language_name);	-- language name with wikilink
		end
	end

	return language_name;

end


--[[--------------------------&lt; N A M E _ F R O M _ C O D E &gt;--------------------------------------------------

Module entry point from an {{#invoke:}}

]]

local function name_from_tag (frame)											-- entry point from an {{#invoke:Lang|name_from_tag|&lt;ietf tag&gt;|link=&lt;yes&gt;|template=&lt;template name&gt;}}
	return _name_from_tag (frame.args);											-- pass-on the args table, nothing else
end


--[[--------------------------&lt; _ T A G _ F R O M _ N A M E &gt;--------------------------------------------------

Returns the ietf language tag associated with the language name.  Spelling of language name must be correct
according to the spelling in the source tables.  When a standard language name has a parenthetical disambiguator,
that disambiguator must be omitted (they are not present in the data name-to-tag tables).

Module entry point from another module

]]

local function _tag_from_name (args)											-- entry point from another module
	local msg;

	if args[1] and '' ~= args[1] then
		local data = mw.loadData ('Module:Lang/name to tag');					-- get the reversed data tables
		local lang = args[1]:lower();											-- allow any-case for the language name (speeling must till be correct)
		local tag = data.rev_lang_data[lang] or data.rev_lang_name_table[lang];-- get the code; look first in the override then in the standard

		if tag then
			return tag;															-- language name found so return tag and done
		else
			msg = 'language: ' .. args[1] .. ' not found'						-- language name not found, error message
		end
	else
		msg = 'missing language name'											-- language name not provided, error message
	end

	local template = '';
	if args.template and '' ~= args.template then
		template = table.concat ({'{{', args['template'], '}}: '});				-- make template name (if provided by the template)
	end
	return table.concat ({'&lt;span style=\"font-size:100%; font-style:normal;\" class=\"error\"&gt;error: ', template, msg, '&lt;/span&gt;'});
end


--[[--------------------------&lt; T A G _ F R O M _ N A M E &gt;----------------------------------------------------

Module entry point from an {{#invoke:}}

]]

local function tag_from_name (frame)											-- entry point from an {{#invoke:Lang|tag_from_name|&lt;language name&gt;|link=&lt;yes&gt;|template=&lt;template name&gt;}}
	return _tag_from_name (frame.args);											-- pass-on the args table, nothing else
end


--[[--------------------------&lt; _ T R A N S L &gt;----------------------------------------------------------------

Module entry point from another module

]]

local function _transl (args)
	local title_table = lang_data.translit_title_table;							-- table of transliteration standards and the language codes and scripts that apply to those standards
	local language_name;														-- language name that matches language code; used for tool tip
	local translit;																-- translitterated text to display
	local script;																-- IANA script
	local msg;																	-- for when called functions return an error message

	if is_set (args[3]) then													-- [3] set when {{transl|code|standard|text}}
		args.text = args[3];													-- get the transliterated text
		args.translit_std = args[2] and args[2]:lower();						-- get the standard; lower case for table indexing

		if not title_table[args.translit_std] then
			return make_error_msg (table.concat ({'unrecognized transliteration standard: ', args.translit_std}), args, 'transl');
		end
	else
		if is_set (args[2]) then												-- [2] set when {{transl|code|text}}
			args.text = args[2];												-- get the transliterated text
		else
			if args[1] and args[1]:match ('^%a%a%a?%a?$') then					-- args[2] missing; is args[1] a code or its it the transliterated text?
				return make_error_msg ('no text', args, 'transl');				-- args[1] is a code so we're missing text
			else
				args.text = args[1];											-- args[1] is not a code so we're missing that; assign args.text for error message
				return make_error_msg ('missing language / script code', args, 'transl');
			end
		end
	end

	if is_set (args[1]) then													-- IANA language code used for html lang= attribute; or ISO 15924 script code
		if args[1]:match ('^%a%a%a?%a?$') then									-- args[1] has correct form?
			args.code = args[1]:lower();										-- use the language/script code; only (2, 3, or 4 alpha characters); lower case because table indexes are lower case
		else
			return make_error_msg (table.concat ({'unrecognized language / script code: ', args[1]}), args, 'transl');	-- invalid language / script code
		end
	else
		return make_error_msg ('missing language / script code', args, 'transl');			-- missing language / script code so quit
	end

	args.italic, msg = validate_italic (args);
	if msg then
		return make_error_msg (msg, args, 'transl');
	end
	
	if 'italic' == args.italic then												-- 'italic' when |italic=yes; because that is same as absent or not set and |italic=default
		args.italic = nil;														-- set to nil; 
	end

	if lang_data.override[args.code] then										-- is code a language code defined in the override table?
		language_name = lang_data.override[args.code][1];
	elseif lang_name_table.lang[args.code] then									-- is code a language code defined in the standard language code tables?
		language_name = lang_name_table.lang[args.code][1];
	elseif lang_name_table.script[args.code] then								-- if here, code is not a language code; is it a script code?
		language_name = lang_name_table.script[args.code][1];
		script = args.code;														-- code was an ISO 15924 script so use that instead
		args.code = '';															-- unset because not a language code
	else
		return make_error_msg (table.concat ({'unrecognized language / script code: ', args.code}), args, 'transl');	-- invalid language / script code
	end
																				-- here only when all parameters passed to make_translit() are valid
	return make_translit (args.code, language_name, args.text, args.translit_std, script, args.italic);
end


--[[--------------------------&lt; T R A N S L &gt;------------------------------------------------------------------

Module entry point from an {{#invoke:}}

]]

local function transl (frame)
	local args = getArgs(frame);												-- no {{#invoke:}} parameters
	return _transl (args);
end


--[[--------------------------&lt; E X P O R T E D   F U N C T I O N S &gt;------------------------------------------
]]

return {
	lang = lang,																-- entry point for {{lang}}
	lang_xx_inherit = lang_xx_inherit,											-- entry points for {{lang-??}}
	lang_xx_italic = lang_xx_italic,
	is_ietf_tag = is_ietf_tag,
	tag_from_name = tag_from_name,												-- returns ietf tag associated with language name
	name_from_tag = name_from_tag,												-- used for template documentation; possible use in ISO 639 name from code templates
	transl = transl,															-- entry point for {{transl}}

	_lang = _lang,																-- entry points when this module is require()d into other modules
	_lang_xx_inherit = _lang_xx_inherit,
	_lang_xx_italic = _lang_xx_italic,
	_is_ietf_tag = _is_ietf_tag,
	_tag_from_name = _tag_from_name, 
	_name_from_tag = _name_from_tag,
	_transl = _transl,

--deprecated entry points:
	code_from_name = tag_from_name,												-- code is wrong; should be tag; these here to ease transition to the proper name
	is_ietf_code = is_ietf_tag,
	name_from_code = name_from_tag,

	_code_from_name = _tag_from_name,
	_is_ietf_code = _is_ietf_tag,
	_name_from_code = _name_from_tag,
	};</text>
      <sha1>4gdvyb2ogwdugjln5il2non6lmc8hsc</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Lang/ISO 639 synonyms</title>
    <ns>828</ns>
    <id>56040973</id>
    <revision>
      <id>815286590</id>
      <parentid>815266850</parentid>
      <timestamp>2017-12-13T23:10:47Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3163">-- File-Date: 2013-01-11
return {
	["aar"] = "aa",
	["abk"] = "ab",
	["afr"] = "af",
	["aka"] = "ak",
	["amh"] = "am",
	["ara"] = "ar",
	["arg"] = "an",
	["asm"] = "as",
	["ava"] = "av",
	["ave"] = "ae",
	["aym"] = "ay",
	["aze"] = "az",
	["bak"] = "ba",
	["bam"] = "bm",
	["bel"] = "be",
	["ben"] = "bn",
	["bih"] = "bh",
	["bis"] = "bi",
	["bod"] = "bo",
	["bos"] = "bs",
	["bre"] = "br",
	["bul"] = "bg",
	["cat"] = "ca",
	["ces"] = "cs",
	["cha"] = "ch",
	["che"] = "ce",
	["chu"] = "cu",
	["chv"] = "cv",
	["cor"] = "kw",
	["cos"] = "co",
	["cre"] = "cr",
	["cym"] = "cy",
	["dan"] = "da",
	["deu"] = "de",
	["div"] = "dv",
	["dzo"] = "dz",
	["ell"] = "el",
	["eng"] = "en",
	["epo"] = "eo",
	["est"] = "et",
	["eus"] = "eu",
	["ewe"] = "ee",
	["fao"] = "fo",
	["fas"] = "fa",
	["fij"] = "fj",
	["fin"] = "fi",
	["fra"] = "fr",
	["fry"] = "fy",
	["ful"] = "ff",
	["gla"] = "gd",
	["gle"] = "ga",
	["glg"] = "gl",
	["glv"] = "gv",
	["grn"] = "gn",
	["guj"] = "gu",
	["hat"] = "ht",
	["hau"] = "ha",
	["heb"] = "he",
	["her"] = "hz",
	["hin"] = "hi",
	["hmo"] = "ho",
	["hrv"] = "hr",
	["hun"] = "hu",
	["hye"] = "hy",
	["ibo"] = "ig",
	["ido"] = "io",
	["iii"] = "ii",
	["iku"] = "iu",
	["ile"] = "ie",
	["ina"] = "ia",
	["ind"] = "id",
	["ipk"] = "ik",
	["isl"] = "is",
	["ita"] = "it",
	["jav"] = "jv",
	["jpn"] = "ja",
	["kal"] = "kl",
	["kan"] = "kn",
	["kas"] = "ks",
	["kat"] = "ka",
	["kau"] = "kr",
	["kaz"] = "kk",
	["khm"] = "km",
	["kik"] = "ki",
	["kin"] = "rw",
	["kir"] = "ky",
	["kom"] = "kv",
	["kon"] = "kg",
	["kor"] = "ko",
	["kua"] = "kj",
	["kur"] = "ku",
	["lao"] = "lo",
	["lat"] = "la",
	["lav"] = "lv",
	["lim"] = "li",
	["lin"] = "ln",
	["lit"] = "lt",
	["ltz"] = "lb",
	["lub"] = "lu",
	["lug"] = "lg",
	["mah"] = "mh",
	["mal"] = "ml",
	["mar"] = "mr",
	["mkd"] = "mk",
	["mlg"] = "mg",
	["mlt"] = "mt",
	["mon"] = "mn",
	["mri"] = "mi",
	["msa"] = "ms",
	["mya"] = "my",
	["nau"] = "na",
	["nav"] = "nv",
	["nbl"] = "nr",
	["nde"] = "nd",
	["ndo"] = "ng",
	["nep"] = "ne",
	["nld"] = "nl",
	["nno"] = "nn",
	["nob"] = "nb",
	["nor"] = "no",
	["nya"] = "ny",
	["oci"] = "oc",
	["oji"] = "oj",
	["ori"] = "or",
	["orm"] = "om",
	["oss"] = "os",
	["pan"] = "pa",
	["pli"] = "pi",
	["pol"] = "pl",
	["por"] = "pt",
	["pus"] = "ps",
	["que"] = "qu",
	["roh"] = "rm",
	["ron"] = "ro",
	["run"] = "rn",
	["rus"] = "ru",
	["sag"] = "sg",
	["san"] = "sa",
	["sin"] = "si",
	["slk"] = "sk",
	["slv"] = "sl",
	["sme"] = "se",
	["smo"] = "sm",
	["sna"] = "sn",
	["snd"] = "sd",
	["som"] = "so",
	["sot"] = "st",
	["spa"] = "es",
	["sqi"] = "sq",
	["srd"] = "sc",
	["srp"] = "sr",
	["ssw"] = "ss",
	["sun"] = "su",
	["swa"] = "sw",
	["swe"] = "sv",
	["tah"] = "ty",
	["tam"] = "ta",
	["tat"] = "tt",
	["tel"] = "te",
	["tgk"] = "tg",
	["tgl"] = "tl",
	["tha"] = "th",
	["tir"] = "ti",
	["ton"] = "to",
	["tsn"] = "tn",
	["tso"] = "ts",
	["tuk"] = "tk",
	["tur"] = "tr",
	["twi"] = "tw",
	["uig"] = "ug",
	["ukr"] = "uk",
	["urd"] = "ur",
	["uzb"] = "uz",
	["ven"] = "ve",
	["vie"] = "vi",
	["vol"] = "vo",
	["wln"] = "wa",
	["wol"] = "wo",
	["xho"] = "xh",
	["yid"] = "yi",
	["yor"] = "yo",
	["zha"] = "za",
	["zho"] = "zh",
	["zul"] = "zu"
	}</text>
      <sha1>shzq5qyzo42nqfska6amwdq4g8lois9</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Lang/data</title>
    <ns>828</ns>
    <id>55691537</id>
    <revision>
      <id>925976665</id>
      <parentid>924385079</parentid>
      <timestamp>2019-11-13T14:15:20Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>mis-x-colog → ksh-x-colog;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="13011">local lang_data = {};


--[[--------------------------&lt; O V E R R I D E &gt;--------------------------------------------------------------

Language codes and names in this table override the BCP47 names in Module:Language/name/data.

code indexes in this table shall always be lower case
]]

local override = {
-- ISO 639-1 codes
	["ab"] = {"Abkhazian"},														-- IANA name is Abkhazian; override wp_languages {"Abkhaz"}; to achieve this, use |label=
	["bh"] = {"Bihari languages"},												-- only ISO 639-1 collective; defined here to override improper redefinition (Bihari) in wp_languages
	["cu"] = {"Church Slavonic"},												-- 2nd IANA name;
	["de-at"] = {"Austrian German"},											-- these code-region and code-variant to match en.wiki article names
	["de-ch"] = {"Swiss German"},
	["en-au"] = {"Australian English"},
	["en-ca"] = {"Canadian English"},
	["en-emodeng"] = {"Early Modern English"},
	["en-gb"] = {"British English"},
	["en-ie"] = {"Irish English"},
	["en-nz"] = {"New Zealand English"},
	["en-us"] = {"American English"},
	["en-za"] = {"South African English"},
	["fy"] = {"West Frisian"},													-- IANA name is Western Frisian
	["ps"] = {"Pashto"},														-- IANA name is Pushto
	["si"] = {"Sinhala"},														-- IANA name is Sinhala, Sinhalese; override wp_languages {"Sinhalese"}; see Module talk:Language/data/wp languages#Request to undo an edit
	["sr-cyrl"] = {"Serbian"},													-- override wp_languages Serbian Cyrillic; to achieve this, use |label=

-- ISO 639-2, -3 codes
	["arc"] = {"Aramaic"},														-- IANA names are: Official Aramaic (700-300 BCE), Imperial Aramaic (700-300 BCE);
	["ber"] = {"Berber languages"},												-- ISO 639-2 collective; defined here to override redefinition in wp_languages
	["bla"] = {"Blackfoot"},													-- IANA, ISO 639-2, -3 name is Siksika; to match en.wiki article title
	["bua"] = {"Buryat"},														-- IANA name Buriat; this is a macro language; these four use wp preferred transliteration;
	["bxm"] = {"Mongolian Buryat"},												-- IANA name Mongolia Buriat; these three all redirect to Buryat
	["bxr"] = {"Russian Buryat"},												-- IANA name Russia Buriat;
	["bxu"] = {"Chinese Buryat"},												-- IANA name China Buriat;
	["byr"] = {"Yipma"},														-- IANA names are Baruya and Yipma
	["cel"] = {"Celtic languages"},												-- ISO 639-2 collective; defined here to override improper redefinition ('Proto-Celtic') in wp_languages; use cel-x-proto instead
	["egy"] = {"Ancient Egyptian"},												-- IANA name is Egyptian (Ancient); distinguish from contemporary arz: Egyptian Arabic 
	["frr"] = {"North Frisian"},												-- IANA name is Northern Frisian
	["frs"] = {"East Frisian Low Saxon"},										-- IANA name is Eastern Frisian
	["gem"] = {"Germanic languages"},											-- ISO 639-2 collective; defined here to override improper redefinition ('Proto-Germanic') in wp_languages; use gem-x-proto instead
	["ilo"] = {"Ilocano"},														-- IANA, ISO 639-2, -3 name is Iloko; to match en.wiki article title
	["jam"] = {"Jamaican Patois"},												-- IANA name is Jamaican Creole English
	["mhr"] = {"Meadow Mari"},													-- IANA name is Eastern Mari
	["mid"] = {"Modern Mandaic"},												-- IANA name is Mandaic
	["mla"] = {"Tamambo"},														-- wp_languages name is Medieval Latin; IANA and ISO 639-1 name is Malo
	["myn"] = {"Mayan languages"},												-- ISO 639-2 collective; defined here to override redefinition in wp_languages
	["nah"] = {"Nahuatl languages"},											-- ISO 639-2 collective; defined here to override redefinition in wp_languages
	["nan-tw"] = {"Taiwanese Hokkien"},											-- make room for IANA / 639-3 nan Min Nan Chinese; match en.wiki article title
	["nrf"] = {"Norman"},														-- not quite a collective - IANA name: Jèrriais; categorizes to Norman-language text
	["nzi"] = {"Nzema"},														-- IANA, ISO 639-2, -3 name is Nzima; to match en.wiki article title
	["orv"] = {"Old East Slavic"},												-- IANA name is Old Russian
	["pms"] = {"Piedmontese"},													-- IANA / 639-3 name is Piemontese; to match en.wiki article title
	["pra"] = {"Prakrit languages"},											-- ISO 639-2 collective; defined here to override redefinition in wp_languages
	["roa"] = {"Romance languages"},											-- ISO 639-2 collective; defined here to override improper redefinition (Jèrriais) in wp_language; IANA name is "Romance languages"
	["sal"] = {"Salishan languages"},											-- ISO 639-2 collective; defined here to override redefinition in wp_languages
	["sla"] = {"Slavic languages"},												-- ISO 639-2 collective; defined here to override redefinition in wp_languages
	["son"] = {"Songhai languages"},											-- ISO 639-2 collective; defined here to override redefinition in wp_languages
	["stq"] = {"Saterland Frisian"},											-- IANA name is Saterfriesisch
	["und"] = {"undetermined"},													-- capitalization to match existing category
	["wen"] = {"Sorbian languages"},											-- ISO 639-2 collective; defined here to override redefinition in wp_languages
	["wrg"] = {"Warrongo"},														-- IANA name is Warungu
	["xal-ru"] = {"Kalmyk"},													-- to match en.wiki article title
	
-- private use codes
	["cel-x-proto"] = {"Proto-Celtic"},											-- cel in IANA is Celtic languages
	["gem-x-proto"] = {"Proto-Germanic"},										-- gem in IANA is Germanic languages
	["grc-x-aeolic"] = {"Aeolic Greek"},										-- these grc-x-... codes are preferred alternates to the non-standard catchall code grc-gre
	["grc-x-attic"] = {"Attic Greek"},
	["grc-x-biblical"] = {"Biblical Greek"},
	["grc-x-byzant"] = {"Byzantine Greek"},
	["grc-x-classic"] = {"Classical Greek"},
	["grc-x-doric"] = {"Doric Greek"},
	["grc-x-hellen"] = {"Hellenistic Greek"},
	["grc-x-ionic"] = {"Ionic Greek"},
	["grc-x-koine"] = {"Koinē Greek"},
	["grc-x-medieval"] = {"Medieval Greek"},
	["grc-x-patris"] = {"Patristic Greek"},
	["grk-x-proto"] = {"Proto-Greek"},											-- grk in IANA is Greek languages
	["iir-x-proto"] = {"Proto-Indo-Iranian"},									-- iir in IANA is Indo-Iranian Languages
	["ira-x-proto"] = {"Proto-Iranian"},										-- ira in IANA is Iranian languages
	["itc-x-proto"] = {"Proto-Italic"},											-- itc in IANA is Italic languages
	["ksh-x-colog"] = {"Colognian"},											-- en.wiki article is Colognian; ksh (Kölsch) redirects there
	["mis-x-ripuar"] = {"Ripuarian"},											-- replaces improper use of ksh in wp_languages
	["sla-x-proto"] = {"Proto-Slavic"},											-- sla in IANA is Slavic languages
	["yuf-x-hav"] = {"Havasupai"},												-- IANA name for these three is Havasupai-Walapai-Yavapai
	["yuf-x-wal"] = {"Walapai"},
	["yuf-x-yav"] = {"Yavapai"},
	}


--[[--------------------------&lt; A R T I C L E _ L I N K &gt;------------------------------------------------------

for those rare occasions when article titles don't fit with the normal '&lt;language name&gt;-language', this table
maps language code to article title.  Use of this table should be avoided and the use of redirects preferred as
that is the long-standing method of handling article names that don't fit with the normal pattern

]]

local article_name = {
	["lij"] = {"Ligurian (Romance language)"},									-- see Template_talk:Lang#Ligurian_dab
	['mnh'] = {"Mono language (Congo)"},										-- see Template_talk:Lang#Mono_languages
	['mnr'] = {"Mono language (California)"},
	['mru'] = {"Mono language (Cameroon)"},
	['mte'] = {"Mono-Alu language"},
	["xlg"] = {"Ligurian language (ancient)"},									-- see Template_talk:Lang#Ligurian_dab
	}


--[=[-------------------------&lt; R T L _ S C R I P T S &gt;--------------------------------------------------------

ISO 15924 scripts that are written right-to-left.  Data in this table taken from [[ISO 15924#List of codes]]

last update to this list: 2017-12-24

]=]

local rtl_scripts = {
	'adlm', 'arab', 'aran', 'armi', 'avst', 'cprt', 'egyd', 'egyh', 'hatr', 'hebr',
	'hung', 'inds', 'khar', 'lydi', 'mand', 'mani', 'mend', 'merc', 'mero', 'narb',
	'nbat', 'nkoo', 'orkh', 'palm', 'phli', 'phlp', 'phlv', 'phnx', 'prti', 'rohg',
	'samr', 'sarb', 'sogd', 'sogo', 'syrc', 'syre', 'syrj', 'syrn', 'thaa', 'wole',
	};


--[[--------------------------&lt; T R A N S L I T   T I T L E S &gt;------------------------------------------------

This is a table of tables of transliteration standards and the language codes or language scripts that apply to
those standards.  This table is used to create the tool-tip text associated with the transliterated text displayed
by some of the {{lang-??}} templates.

These tables are more-or-less copied directly from {{transl}}.  The standard 'NO_STD' is a construct to allow for
the cases when no |std= parameter value is provided.

]]

local translit_title_table = {
	['ahl'] = {
		['default'] = 'Academy of the Hebrew Language transliteration',
		},

	['ala'] = {
		['default'] = 'American Library Association – Library of Congress transliteration',
		},

	['ala-lc'] = {
		['default'] = 'American Library Association – Library of Congress transliteration',
		},

	['batr'] = {
		['default'] = 'Bikdash Arabic Transliteration Rules',
		},

	['bgn/pcgn'] = {
		['default'] = 'Board on Geographic Names / Permanent Committee on Geographical Names transliteration',
		},

	['din'] = {
		['ar'] = 'DIN 31635 Arabic',
		['fa'] = 'DIN 31635 Arabic',
		['ku'] = 'DIN 31635 Arabic',
		['ps'] = 'DIN 31635 Arabic',
		['tg'] = 'DIN 31635 Arabic',
		['ug'] = 'DIN 31635 Arabic',
		['ur'] = 'DIN 31635 Arabic',
		['arab'] = 'DIN 31635 Arabic',

		['default'] = 'DIN transliteration',
		},

	['eae'] = {
		['default'] = 'Encyclopaedia Aethiopica transliteration',
		},

	['hepburn'] = {
		['default'] = 'Hepburn transliteration',
		},

	['iast'] = {
		['default'] = 'International Alphabet of Sanskrit transliteration',
		},

	['iso'] = {																	-- when a transliteration standard is supplied
		['ab'] = 'ISO 9 Cyrillic',
		['ba'] = 'ISO 9 Cyrillic',
		['be'] = 'ISO 9 Cyrillic',
		['bg'] = 'ISO 9 Cyrillic',
		['kk'] = 'ISO 9 Cyrillic',
		['ky'] = 'ISO 9 Cyrillic',
		['mn'] = 'ISO 9 Cyrillic',
		['ru'] = 'ISO 9 Cyrillic',
		['tg'] = 'ISO 9 Cyrillic',
		['uk'] = 'ISO 9 Cyrillic',
		['bua'] = 'ISO 9 Cyrillic',
		['sah'] = 'ISO 9 Cyrillic',
		['tut'] = 'ISO 9 Cyrillic',
		['xal'] = 'ISO 9 Cyrillic',
		['cyrl'] = 'ISO 9 Cyrillic',

		['ar'] = 'ISO 233 Arabic',
		['ku'] = 'ISO 233 Arabic',
		['ps'] = 'ISO 233 Arabic',
		['ug'] = 'ISO 233 Arabic',
		['ur'] = 'ISO 233 Arabic',
		['arab'] = 'ISO 233 Arabic',

		['he'] = 'ISO 259 Hebrew',
		['yi'] = 'ISO 259 Hebrew',
		['hebr'] = 'ISO 259 Hebrew',

		['el'] = 'ISO 843 Greek',
		['grc'] = 'ISO 843 Greek',

		['ja'] = 'ISO 3602 Japanese',
		['hira'] = 'ISO 3602 Japanese',
		['hrkt'] = 'ISO 3602 Japanese',
		['jpan'] = 'ISO 3602 Japanese',
		['kana'] = 'ISO 3602 Japanese',

		['zh'] = 'ISO 7098 Chinese',
		['chi'] = 'ISO 7098 Chinese',
		['pny'] = 'ISO 7098 Chinese',
		['zho'] = 'ISO 7098 Chinese',
--		['han'] = 'ISO 7098 Chinese',											-- unicode alias of Hani? doesn't belong here? should be Hani?
		['hans'] = 'ISO 7098 Chinese',
		['hant'] = 'ISO 7098 Chinese',

		['ka'] = 'ISO 9984 Georgian',
		['kat'] = 'ISO 9984 Georgian',

		['arm'] = 'ISO 9985 Armenian',
		['hy'] = 'ISO 9985 Armenian',

		['th'] = 'ISO 11940 Thai',
		['tha'] = 'ISO 11940 Thai',

		['ko'] = 'ISO 11941 Korean',
		['kor'] = 'ISO 11941 Korean',

		['bn'] = 'ISO 15919 Indic',
		['dra'] = 'ISO 15919 Indic',
		['gu'] = 'ISO 15919 Indic',
		['hi'] = 'ISO 15919 Indic',
		['inc'] = 'ISO 15919 Indic',
		['kn'] = 'ISO 15919 Indic',
		['ml'] = 'ISO 15919 Indic',
		['mr'] = 'ISO 15919 Indic',
		['sa'] = 'ISO 15919 Indic',
		['ta'] = 'ISO 15919 Indic',
		['te'] = 'ISO 15919 Indic',
		['beng'] = 'ISO 15919 Indic',
		['brah'] = 'ISO 15919 Indic',
		['deva'] = 'ISO 15919 Indic',

		['default'] = 'ISO transliteration',
		},

	['mr'] = {
		['default'] = 'McCune–Reischauer transliteration',
		},

	['nihon-shiki'] = {
		['default'] = 'Nihon-shiki transliteration',
		},

	['no_std'] = {																-- when no transliteration standard is supplied
		['akk'] = 'Semitic transliteration',
		['sem'] = 'Semitic transliteration',
		['phnx'] = 'Semitic transliteration',
		['xsux'] = 'Cuneiform transliteration',
		},

	['pinyin'] = {
		['default'] = 'Pinyin transliteration',
		},

	['rr'] = {
		['default'] = 'Revised Romanization of Korean transliteration',
		},

	['rtgs'] = {
		['default'] = 'Royal Thai General System of Transcription',
		},
	
	['satts'] = {
		['default'] = 'Standard Arabic Technical Transliteration System transliteration',
		},

	['ungegn'] = {
		['default'] = 'United Nations Group of Experts on Geographical Names transliteration',
		},

	['wehr'] = {
		['default'] = 'Hans Wehr transliteration',
		},
	};


return
	{
	override = override,
	article_name = article_name,
	rtl_scripts = rtl_scripts,
	is_rtl_script = is_rtl_script,
	translit_title_table = translit_title_table,
	};</text>
      <sha1>r8f0aank4wvy7708ypaawf15j1zc56b</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/ISO 639-3</title>
    <ns>828</ns>
    <id>42492522</id>
    <revision>
      <id>905080681</id>
      <parentid>889390475</parentid>
      <timestamp>2019-07-06T18:20:40Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>update to 2019-04-08 data;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="209790">-- File-Date: 2019-04-08
return {
	["aaa"] = {"Ghotuo"},
	["aab"] = {"Alumu-Tesu"},
	["aac"] = {"Ari"},
	["aad"] = {"Amal"},
	["aae"] = {"Arbëreshë Albanian"},
	["aaf"] = {"Aranadan"},
	["aag"] = {"Ambrak"},
	["aah"] = {"Abu' Arapesh"},
	["aai"] = {"Arifama-Miniafia"},
	["aak"] = {"Ankave"},
	["aal"] = {"Afade"},
	["aan"] = {"Anambé"},
	["aao"] = {"Algerian Saharan Arabic"},
	["aap"] = {"Pará Arára"},
	["aaq"] = {"Eastern Abnaki"},
	["aar"] = {"Afar"},
	["aas"] = {"Aasáx"},
	["aat"] = {"Arvanitika Albanian"},
	["aau"] = {"Abau"},
	["aaw"] = {"Solong"},
	["aax"] = {"Mandobo Atas"},
	["aaz"] = {"Amarasi"},
	["aba"] = {"Abé"},
	["abb"] = {"Bankon"},
	["abc"] = {"Ambala Ayta"},
	["abd"] = {"Manide"},
	["abe"] = {"Western Abnaki"},
	["abf"] = {"Abai Sungai"},
	["abg"] = {"Abaga"},
	["abh"] = {"Tajiki Arabic"},
	["abi"] = {"Abidji"},
	["abj"] = {"Aka-Bea"},
	["abk"] = {"Abkhazian"},
	["abl"] = {"Lampung Nyo"},
	["abm"] = {"Abanyom"},
	["abn"] = {"Abua"},
	["abo"] = {"Abon"},
	["abp"] = {"Abellen Ayta"},
	["abq"] = {"Abaza"},
	["abr"] = {"Abron"},
	["abs"] = {"Ambonese Malay"},
	["abt"] = {"Ambulas"},
	["abu"] = {"Abure"},
	["abv"] = {"Baharna Arabic"},
	["abw"] = {"Pal"},
	["abx"] = {"Inabaknon"},
	["aby"] = {"Aneme Wake"},
	["abz"] = {"Abui"},
	["aca"] = {"Achagua"},
	["acb"] = {"Áncá"},
	["acd"] = {"Gikyode"},
	["ace"] = {"Achinese"},
	["acf"] = {"Saint Lucian Creole French"},
	["ach"] = {"Acoli"},
	["aci"] = {"Aka-Cari"},
	["ack"] = {"Aka-Kora"},
	["acl"] = {"Akar-Bale"},
	["acm"] = {"Mesopotamian Arabic"},
	["acn"] = {"Achang"},
	["acp"] = {"Eastern Acipa"},
	["acq"] = {"Ta'izzi-Adeni Arabic"},
	["acr"] = {"Achi"},
	["acs"] = {"Acroá"},
	["act"] = {"Achterhoeks"},
	["acu"] = {"Achuar-Shiwiar"},
	["acv"] = {"Achumawi"},
	["acw"] = {"Hijazi Arabic"},
	["acx"] = {"Omani Arabic"},
	["acy"] = {"Cypriot Arabic"},
	["acz"] = {"Acheron"},
	["ada"] = {"Adangme"},
	["adb"] = {"Adabe"},
	["add"] = {"Dzodinka", "Lidzonka"},
	["ade"] = {"Adele"},
	["adf"] = {"Dhofari Arabic"},
	["adg"] = {"Andegerebinha"},
	["adh"] = {"Adhola"},
	["adi"] = {"Adi"},
	["adj"] = {"Adioukrou"},
	["adl"] = {"Galo"},
	["adn"] = {"Adang"},
	["ado"] = {"Abu"},
	["adq"] = {"Adangbe"},
	["adr"] = {"Adonara"},
	["ads"] = {"Adamorobe Sign Language"},
	["adt"] = {"Adnyamathanha"},
	["adu"] = {"Aduge"},
	["adw"] = {"Amundava"},
	["adx"] = {"Amdo Tibetan"},
	["ady"] = {"Adygei", "Adyghe"},
	["adz"] = {"Adzera"},
	["aea"] = {"Areba"},
	["aeb"] = {"Tunisian Arabic"},
	["aec"] = {"Saidi Arabic"},
	["aed"] = {"Argentine Sign Language"},
	["aee"] = {"Northeast Pashai", "Northeast Pashayi"},
	["aek"] = {"Haeke"},
	["ael"] = {"Ambele"},
	["aem"] = {"Arem"},
	["aen"] = {"Armenian Sign Language"},
	["aeq"] = {"Aer"},
	["aer"] = {"Eastern Arrernte"},
	["aes"] = {"Alsea"},
	["aeu"] = {"Akeu"},
	["aew"] = {"Ambakich"},
	["aey"] = {"Amele"},
	["aez"] = {"Aeka"},
	["afb"] = {"Gulf Arabic"},
	["afd"] = {"Andai"},
	["afe"] = {"Putukwam"},
	["afg"] = {"Afghan Sign Language"},
	["afh"] = {"Afrihili"},
	["afi"] = {"Akrukay", "Chini"},
	["afk"] = {"Nanubae"},
	["afn"] = {"Defaka"},
	["afo"] = {"Eloyi"},
	["afp"] = {"Tapei"},
	["afr"] = {"Afrikaans"},
	["afs"] = {"Afro-Seminole Creole"},
	["aft"] = {"Afitti"},
	["afu"] = {"Awutu"},
	["afz"] = {"Obokuitai"},
	["aga"] = {"Aguano"},
	["agb"] = {"Legbo"},
	["agc"] = {"Agatu"},
	["agd"] = {"Agarabi"},
	["age"] = {"Angal"},
	["agf"] = {"Arguni"},
	["agg"] = {"Angor"},
	["agh"] = {"Ngelima"},
	["agi"] = {"Agariya"},
	["agj"] = {"Argobba"},
	["agk"] = {"Isarog Agta"},
	["agl"] = {"Fembe"},
	["agm"] = {"Angaataha"},
	["agn"] = {"Agutaynen"},
	["ago"] = {"Tainae"},
	["agq"] = {"Aghem"},
	["agr"] = {"Aguaruna"},
	["ags"] = {"Esimbi"},
	["agt"] = {"Central Cagayan Agta"},
	["agu"] = {"Aguacateco"},
	["agv"] = {"Remontado Dumagat"},
	["agw"] = {"Kahua"},
	["agx"] = {"Aghul"},
	["agy"] = {"Southern Alta"},
	["agz"] = {"Mt. Iriga Agta"},
	["aha"] = {"Ahanta"},
	["ahb"] = {"Axamb"},
	["ahg"] = {"Qimant"},
	["ahh"] = {"Aghu"},
	["ahi"] = {"Tiagbamrin Aizi"},
	["ahk"] = {"Akha"},
	["ahl"] = {"Igo"},
	["ahm"] = {"Mobumrin Aizi"},
	["ahn"] = {"Àhàn"},
	["aho"] = {"Ahom"},
	["ahp"] = {"Aproumu Aizi"},
	["ahr"] = {"Ahirani"},
	["ahs"] = {"Ashe"},
	["aht"] = {"Ahtena"},
	["aia"] = {"Arosi"},
	["aib"] = {"Ainu (China)"},
	["aic"] = {"Ainbai"},
	["aid"] = {"Alngith"},
	["aie"] = {"Amara"},
	["aif"] = {"Agi"},
	["aig"] = {"Antigua and Barbuda Creole English"},
	["aih"] = {"Ai-Cham"},
	["aii"] = {"Assyrian Neo-Aramaic"},
	["aij"] = {"Lishanid Noshan"},
	["aik"] = {"Ake"},
	["ail"] = {"Aimele"},
	["aim"] = {"Aimol"},
	["ain"] = {"Ainu (Japan)"},
	["aio"] = {"Aiton"},
	["aip"] = {"Burumakok"},
	["aiq"] = {"Aimaq"},
	["air"] = {"Airoran"},
	["ait"] = {"Arikem"},
	["aiw"] = {"Aari"},
	["aix"] = {"Aighon"},
	["aiy"] = {"Ali"},
	["aja"] = {"Aja (South Sudan)"},
	["ajg"] = {"Aja (Benin)"},
	["aji"] = {"Ajië"},
	["ajn"] = {"Andajin"},
	["ajp"] = {"South Levantine Arabic"},
	["ajt"] = {"Judeo-Tunisian Arabic"},
	["aju"] = {"Judeo-Moroccan Arabic"},
	["ajw"] = {"Ajawa"},
	["ajz"] = {"Amri Karbi"},
	["aka"] = {"Akan"},
	["akb"] = {"Batak Angkola"},
	["akc"] = {"Mpur"},
	["akd"] = {"Ukpet-Ehom"},
	["ake"] = {"Akawaio"},
	["akf"] = {"Akpa"},
	["akg"] = {"Anakalangu"},
	["akh"] = {"Angal Heneng"},
	["aki"] = {"Aiome"},
	["akj"] = {"Aka-Jeru"},
	["akk"] = {"Akkadian"},
	["akl"] = {"Aklanon"},
	["akm"] = {"Aka-Bo"},
	["ako"] = {"Akurio"},
	["akp"] = {"Siwu"},
	["akq"] = {"Ak"},
	["akr"] = {"Araki"},
	["aks"] = {"Akaselem"},
	["akt"] = {"Akolet"},
	["aku"] = {"Akum"},
	["akv"] = {"Akhvakh"},
	["akw"] = {"Akwa"},
	["akx"] = {"Aka-Kede"},
	["aky"] = {"Aka-Kol"},
	["akz"] = {"Alabama"},
	["ala"] = {"Alago"},
	["alc"] = {"Qawasqar"},
	["ald"] = {"Alladian"},
	["ale"] = {"Aleut"},
	["alf"] = {"Alege"},
	["alh"] = {"Alawa"},
	["ali"] = {"Amaimon"},
	["alj"] = {"Alangan"},
	["alk"] = {"Alak"},
	["all"] = {"Allar"},
	["alm"] = {"Amblong"},
	["aln"] = {"Gheg Albanian"},
	["alo"] = {"Larike-Wakasihu"},
	["alp"] = {"Alune"},
	["alq"] = {"Algonquin"},
	["alr"] = {"Alutor"},
	["als"] = {"Tosk Albanian"},
	["alt"] = {"Southern Altai"},
	["alu"] = {"'Are'are"},
	["alw"] = {"Alaba-K’abeena", "Wanbasana"},
	["alx"] = {"Amol"},
	["aly"] = {"Alyawarr"},
	["alz"] = {"Alur"},
	["ama"] = {"Amanayé"},
	["amb"] = {"Ambo"},
	["amc"] = {"Amahuaca"},
	["ame"] = {"Yanesha'"},
	["amf"] = {"Hamer-Banna"},
	["amg"] = {"Amurdak"},
	["amh"] = {"Amharic"},
	["ami"] = {"Amis"},
	["amj"] = {"Amdang"},
	["amk"] = {"Ambai"},
	["aml"] = {"War-Jaintia"},
	["amm"] = {"Ama (Papua New Guinea)"},
	["amn"] = {"Amanab"},
	["amo"] = {"Amo"},
	["amp"] = {"Alamblak"},
	["amq"] = {"Amahai"},
	["amr"] = {"Amarakaeri"},
	["ams"] = {"Southern Amami-Oshima"},
	["amt"] = {"Amto"},
	["amu"] = {"Guerrero Amuzgo"},
	["amv"] = {"Ambelau"},
	["amw"] = {"Western Neo-Aramaic"},
	["amx"] = {"Anmatyerre"},
	["amy"] = {"Ami"},
	["amz"] = {"Atampaya"},
	["ana"] = {"Andaqui"},
	["anb"] = {"Andoa"},
	["anc"] = {"Ngas"},
	["and"] = {"Ansus"},
	["ane"] = {"Xârâcùù"},
	["anf"] = {"Animere"},
	["ang"] = {"Old English (ca. 450-1100)"},
	["anh"] = {"Nend"},
	["ani"] = {"Andi"},
	["anj"] = {"Anor"},
	["ank"] = {"Goemai"},
	["anl"] = {"Anu-Hkongso Chin"},
	["anm"] = {"Anal"},
	["ann"] = {"Obolo"},
	["ano"] = {"Andoque"},
	["anp"] = {"Angika"},
	["anq"] = {"Jarawa (India)"},
	["anr"] = {"Andh"},
	["ans"] = {"Anserma"},
	["ant"] = {"Antakarinya", "Antikarinya"},
	["anu"] = {"Anuak"},
	["anv"] = {"Denya"},
	["anw"] = {"Anaang"},
	["anx"] = {"Andra-Hus"},
	["any"] = {"Anyin"},
	["anz"] = {"Anem"},
	["aoa"] = {"Angolar"},
	["aob"] = {"Abom"},
	["aoc"] = {"Pemon"},
	["aod"] = {"Andarum"},
	["aoe"] = {"Angal Enen"},
	["aof"] = {"Bragat"},
	["aog"] = {"Angoram"},
	["aoh"] = {"Arma"},
	["aoi"] = {"Anindilyakwa"},
	["aoj"] = {"Mufian"},
	["aok"] = {"Arhö"},
	["aol"] = {"Alor"},
	["aom"] = {"Ömie"},
	["aon"] = {"Bumbita Arapesh"},
	["aor"] = {"Aore"},
	["aos"] = {"Taikat"},
	["aot"] = {"A'tong", "Atong (India)"},
	["aou"] = {"A'ou"},
	["aox"] = {"Atorada"},
	["aoz"] = {"Uab Meto"},
	["apb"] = {"Sa'a"},
	["apc"] = {"North Levantine Arabic"},
	["apd"] = {"Sudanese Arabic"},
	["ape"] = {"Bukiyip"},
	["apf"] = {"Pahanan Agta"},
	["apg"] = {"Ampanang"},
	["aph"] = {"Athpariya"},
	["api"] = {"Apiaká"},
	["apj"] = {"Jicarilla Apache"},
	["apk"] = {"Kiowa Apache"},
	["apl"] = {"Lipan Apache"},
	["apm"] = {"Mescalero-Chiricahua Apache"},
	["apn"] = {"Apinayé"},
	["apo"] = {"Ambul"},
	["app"] = {"Apma"},
	["apq"] = {"A-Pucikwar"},
	["apr"] = {"Arop-Lokep"},
	["aps"] = {"Arop-Sissano"},
	["apt"] = {"Apatani"},
	["apu"] = {"Apurinã"},
	["apv"] = {"Alapmunte"},
	["apw"] = {"Western Apache"},
	["apx"] = {"Aputai"},
	["apy"] = {"Apalaí"},
	["apz"] = {"Safeyoka"},
	["aqc"] = {"Archi"},
	["aqd"] = {"Ampari Dogon"},
	["aqg"] = {"Arigidi"},
	["aqm"] = {"Atohwaim"},
	["aqn"] = {"Northern Alta"},
	["aqp"] = {"Atakapa"},
	["aqr"] = {"Arhâ"},
	["aqt"] = {"Angaité"},
	["aqz"] = {"Akuntsu"},
	["ara"] = {"Arabic"},
	["arb"] = {"Standard Arabic"},
	["arc"] = {"Imperial Aramaic (700-300 BCE)", "Official Aramaic (700-300 BCE)"},
	["ard"] = {"Arabana"},
	["are"] = {"Western Arrarnta"},
	["arg"] = {"Aragonese"},
	["arh"] = {"Arhuaco"},
	["ari"] = {"Arikara"},
	["arj"] = {"Arapaso"},
	["ark"] = {"Arikapú"},
	["arl"] = {"Arabela"},
	["arn"] = {"Mapuche", "Mapudungun"},
	["aro"] = {"Araona"},
	["arp"] = {"Arapaho"},
	["arq"] = {"Algerian Arabic"},
	["arr"] = {"Karo (Brazil)"},
	["ars"] = {"Najdi Arabic"},
	["aru"] = {"Arawá", "Aruá (Amazonas State)"},
	["arv"] = {"Arbore"},
	["arw"] = {"Arawak"},
	["arx"] = {"Aruá (Rodonia State)"},
	["ary"] = {"Moroccan Arabic"},
	["arz"] = {"Egyptian Arabic"},
	["asa"] = {"Asu (Tanzania)"},
	["asb"] = {"Assiniboine"},
	["asc"] = {"Casuarina Coast Asmat"},
	["ase"] = {"American Sign Language"},
	["asf"] = {"Auslan", "Australian Sign Language"},
	["asg"] = {"Cishingini"},
	["ash"] = {"Abishira"},
	["asi"] = {"Buruwai"},
	["asj"] = {"Sari"},
	["ask"] = {"Ashkun"},
	["asl"] = {"Asilulu"},
	["asm"] = {"Assamese"},
	["asn"] = {"Xingú Asuriní"},
	["aso"] = {"Dano"},
	["asp"] = {"Algerian Sign Language"},
	["asq"] = {"Austrian Sign Language"},
	["asr"] = {"Asuri"},
	["ass"] = {"Ipulo"},
	["ast"] = {"Asturian", "Asturleonese", "Bable", "Leonese"},
	["asu"] = {"Tocantins Asurini"},
	["asv"] = {"Asoa"},
	["asw"] = {"Australian Aborigines Sign Language"},
	["asx"] = {"Muratayak"},
	["asy"] = {"Yaosakor Asmat"},
	["asz"] = {"As"},
	["ata"] = {"Pele-Ata"},
	["atb"] = {"Zaiwa"},
	["atc"] = {"Atsahuaca"},
	["atd"] = {"Ata Manobo"},
	["ate"] = {"Atemble"},
	["atg"] = {"Ivbie North-Okpela-Arhe"},
	["ati"] = {"Attié"},
	["atj"] = {"Atikamekw"},
	["atk"] = {"Ati"},
	["atl"] = {"Mt. Iraya Agta"},
	["atm"] = {"Ata"},
	["atn"] = {"Ashtiani"},
	["ato"] = {"Atong (Cameroon)"},
	["atp"] = {"Pudtol Atta"},
	["atq"] = {"Aralle-Tabulahan"},
	["atr"] = {"Waimiri-Atroari"},
	["ats"] = {"Gros Ventre"},
	["att"] = {"Pamplona Atta"},
	["atu"] = {"Reel"},
	["atv"] = {"Northern Altai"},
	["atw"] = {"Atsugewi"},
	["atx"] = {"Arutani"},
	["aty"] = {"Aneityum"},
	["atz"] = {"Arta"},
	["aua"] = {"Asumboa"},
	["aub"] = {"Alugu"},
	["auc"] = {"Waorani"},
	["aud"] = {"Anuta"},
	["aug"] = {"Aguna"},
	["auh"] = {"Aushi"},
	["aui"] = {"Anuki"},
	["auj"] = {"Awjilah"},
	["auk"] = {"Heyo"},
	["aul"] = {"Aulua"},
	["aum"] = {"Asu (Nigeria)"},
	["aun"] = {"Molmo One"},
	["auo"] = {"Auyokawa"},
	["aup"] = {"Makayam"},
	["auq"] = {"Anus", "Korur"},
	["aur"] = {"Aruek"},
	["aut"] = {"Austral"},
	["auu"] = {"Auye"},
	["auw"] = {"Awyi"},
	["aux"] = {"Aurá"},
	["auy"] = {"Awiyaana"},
	["auz"] = {"Uzbeki Arabic"},
	["ava"] = {"Avaric"},
	["avb"] = {"Avau"},
	["avd"] = {"Alviri-Vidari"},
	["ave"] = {"Avestan"},
	["avi"] = {"Avikam"},
	["avk"] = {"Kotava"},
	["avl"] = {"Eastern Egyptian Bedawi Arabic"},
	["avm"] = {"Angkamuthi"},
	["avn"] = {"Avatime"},
	["avo"] = {"Agavotaguerra"},
	["avs"] = {"Aushiri"},
	["avt"] = {"Au"},
	["avu"] = {"Avokaya"},
	["avv"] = {"Avá-Canoeiro"},
	["awa"] = {"Awadhi"},
	["awb"] = {"Awa (Papua New Guinea)"},
	["awc"] = {"Cicipu"},
	["awe"] = {"Awetí"},
	["awg"] = {"Anguthimri"},
	["awh"] = {"Awbono"},
	["awi"] = {"Aekyom"},
	["awk"] = {"Awabakal"},
	["awm"] = {"Arawum"},
	["awn"] = {"Awngi"},
	["awo"] = {"Awak"},
	["awr"] = {"Awera"},
	["aws"] = {"South Awyu"},
	["awt"] = {"Araweté"},
	["awu"] = {"Central Awyu"},
	["awv"] = {"Jair Awyu"},
	["aww"] = {"Awun"},
	["awx"] = {"Awara"},
	["awy"] = {"Edera Awyu"},
	["axb"] = {"Abipon"},
	["axe"] = {"Ayerrerenge"},
	["axg"] = {"Mato Grosso Arára"},
	["axk"] = {"Yaka (Central African Republic)"},
	["axl"] = {"Lower Southern Aranda"},
	["axm"] = {"Middle Armenian"},
	["axx"] = {"Xârâgurè"},
	["aya"] = {"Awar"},
	["ayb"] = {"Ayizo Gbe"},
	["ayc"] = {"Southern Aymara"},
	["ayd"] = {"Ayabadhu"},
	["aye"] = {"Ayere"},
	["ayg"] = {"Ginyanga"},
	["ayh"] = {"Hadrami Arabic"},
	["ayi"] = {"Leyigha"},
	["ayk"] = {"Akuku"},
	["ayl"] = {"Libyan Arabic"},
	["aym"] = {"Aymara"},
	["ayn"] = {"Sanaani Arabic"},
	["ayo"] = {"Ayoreo"},
	["ayp"] = {"North Mesopotamian Arabic"},
	["ayq"] = {"Ayi (Papua New Guinea)"},
	["ayr"] = {"Central Aymara"},
	["ays"] = {"Sorsogon Ayta"},
	["ayt"] = {"Magbukun Ayta"},
	["ayu"] = {"Ayu"},
	["ayy"] = {"Tayabas Ayta"},
	["ayz"] = {"Mai Brat"},
	["aza"] = {"Azha"},
	["azb"] = {"South Azerbaijani"},
	["azd"] = {"Eastern Durango Nahuatl"},
	["aze"] = {"Azerbaijani"},
	["azg"] = {"San Pedro Amuzgos Amuzgo"},
	["azj"] = {"North Azerbaijani"},
	["azm"] = {"Ipalapa Amuzgo"},
	["azn"] = {"Western Durango Nahuatl"},
	["azo"] = {"Awing"},
	["azt"] = {"Faire Atta"},
	["azz"] = {"Highland Puebla Nahuatl"},
	["baa"] = {"Babatana"},
	["bab"] = {"Bainouk-Gunyuño"},
	["bac"] = {"Badui"},
	["bae"] = {"Baré"},
	["baf"] = {"Nubaca"},
	["bag"] = {"Tuki"},
	["bah"] = {"Bahamas Creole English"},
	["baj"] = {"Barakai"},
	["bak"] = {"Bashkir"},
	["bal"] = {"Baluchi"},
	["bam"] = {"Bambara"},
	["ban"] = {"Balinese"},
	["bao"] = {"Waimaha"},
	["bap"] = {"Bantawa"},
	["bar"] = {"Bavarian"},
	["bas"] = {"Basa (Cameroon)"},
	["bau"] = {"Bada (Nigeria)"},
	["bav"] = {"Vengo"},
	["baw"] = {"Bambili-Bambui"},
	["bax"] = {"Bamun"},
	["bay"] = {"Batuley"},
	["bba"] = {"Baatonum"},
	["bbb"] = {"Barai"},
	["bbc"] = {"Batak Toba"},
	["bbd"] = {"Bau"},
	["bbe"] = {"Bangba"},
	["bbf"] = {"Baibai"},
	["bbg"] = {"Barama"},
	["bbh"] = {"Bugan"},
	["bbi"] = {"Barombi"},
	["bbj"] = {"Ghomálá'"},
	["bbk"] = {"Babanki"},
	["bbl"] = {"Bats"},
	["bbm"] = {"Babango"},
	["bbn"] = {"Uneapa"},
	["bbo"] = {"Konabéré", "Northern Bobo Madaré"},
	["bbp"] = {"West Central Banda"},
	["bbq"] = {"Bamali"},
	["bbr"] = {"Girawa"},
	["bbs"] = {"Bakpinka"},
	["bbt"] = {"Mburku"},
	["bbu"] = {"Kulung (Nigeria)"},
	["bbv"] = {"Karnai"},
	["bbw"] = {"Baba"},
	["bbx"] = {"Bubia"},
	["bby"] = {"Befang"},
	["bbz"] = {"Babalia Creole Arabic"},
	["bca"] = {"Central Bai"},
	["bcb"] = {"Bainouk-Samik"},
	["bcc"] = {"Southern Balochi"},
	["bcd"] = {"North Babar"},
	["bce"] = {"Bamenyam"},
	["bcf"] = {"Bamu"},
	["bcg"] = {"Baga Pokur"},
	["bch"] = {"Bariai"},
	["bci"] = {"Baoulé"},
	["bcj"] = {"Bardi"},
	["bck"] = {"Bunuba"},
	["bcl"] = {"Central Bikol"},
	["bcm"] = {"Bannoni"},
	["bcn"] = {"Bali (Nigeria)"},
	["bco"] = {"Kaluli"},
	["bcp"] = {"Bali (Democratic Republic of Congo)"},
	["bcq"] = {"Bench"},
	["bcr"] = {"Babine"},
	["bcs"] = {"Kohumono"},
	["bct"] = {"Bendi"},
	["bcu"] = {"Awad Bing"},
	["bcv"] = {"Shoo-Minda-Nye"},
	["bcw"] = {"Bana"},
	["bcy"] = {"Bacama"},
	["bcz"] = {"Bainouk-Gunyaamolo"},
	["bda"] = {"Bayot"},
	["bdb"] = {"Basap"},
	["bdc"] = {"Emberá-Baudó"},
	["bdd"] = {"Bunama"},
	["bde"] = {"Bade"},
	["bdf"] = {"Biage"},
	["bdg"] = {"Bonggi"},
	["bdh"] = {"Baka (South Sudan)"},
	["bdi"] = {"Burun"},
	["bdj"] = {"Bai", "Bai (South Sudan)"},
	["bdk"] = {"Budukh"},
	["bdl"] = {"Indonesian Bajau"},
	["bdm"] = {"Buduma"},
	["bdn"] = {"Baldemu"},
	["bdo"] = {"Morom"},
	["bdp"] = {"Bende"},
	["bdq"] = {"Bahnar"},
	["bdr"] = {"West Coast Bajau"},
	["bds"] = {"Burunge"},
	["bdt"] = {"Bokoto"},
	["bdu"] = {"Oroko"},
	["bdv"] = {"Bodo Parja"},
	["bdw"] = {"Baham"},
	["bdx"] = {"Budong-Budong"},
	["bdy"] = {"Bandjalang"},
	["bdz"] = {"Badeshi"},
	["bea"] = {"Beaver"},
	["beb"] = {"Bebele"},
	["bec"] = {"Iceve-Maci"},
	["bed"] = {"Bedoanas"},
	["bee"] = {"Byangsi"},
	["bef"] = {"Benabena"},
	["beg"] = {"Belait"},
	["beh"] = {"Biali"},
	["bei"] = {"Bekati'"},
	["bej"] = {"Bedawiyet", "Beja"},
	["bek"] = {"Bebeli"},
	["bel"] = {"Belarusian"},
	["bem"] = {"Bemba (Zambia)"},
	["ben"] = {"Bengali"},
	["beo"] = {"Beami"},
	["bep"] = {"Besoa"},
	["beq"] = {"Beembe"},
	["bes"] = {"Besme"},
	["bet"] = {"Guiberoua Béte"},
	["beu"] = {"Blagar"},
	["bev"] = {"Daloa Bété"},
	["bew"] = {"Betawi"},
	["bex"] = {"Jur Modo"},
	["bey"] = {"Beli (Papua New Guinea)"},
	["bez"] = {"Bena (Tanzania)"},
	["bfa"] = {"Bari"},
	["bfb"] = {"Pauri Bareli"},
	["bfc"] = {"Northern Bai", "Panyi Bai"},
	["bfd"] = {"Bafut"},
	["bfe"] = {"Betaf", "Tena"},
	["bff"] = {"Bofi"},
	["bfg"] = {"Busang Kayan"},
	["bfh"] = {"Blafe"},
	["bfi"] = {"British Sign Language"},
	["bfj"] = {"Bafanji"},
	["bfk"] = {"Ban Khor Sign Language"},
	["bfl"] = {"Banda-Ndélé"},
	["bfm"] = {"Mmen"},
	["bfn"] = {"Bunak"},
	["bfo"] = {"Malba Birifor"},
	["bfp"] = {"Beba"},
	["bfq"] = {"Badaga"},
	["bfr"] = {"Bazigar"},
	["bfs"] = {"Southern Bai"},
	["bft"] = {"Balti"},
	["bfu"] = {"Gahri"},
	["bfw"] = {"Bondo"},
	["bfx"] = {"Bantayanon"},
	["bfy"] = {"Bagheli"},
	["bfz"] = {"Mahasu Pahari"},
	["bga"] = {"Gwamhi-Wuri"},
	["bgb"] = {"Bobongko"},
	["bgc"] = {"Haryanvi"},
	["bgd"] = {"Rathwi Bareli"},
	["bge"] = {"Bauria"},
	["bgf"] = {"Bangandu"},
	["bgg"] = {"Bugun"},
	["bgi"] = {"Giangan"},
	["bgj"] = {"Bangolan"},
	["bgk"] = {"Bit", "Buxinhua"},
	["bgl"] = {"Bo (Laos)"},
	["bgn"] = {"Western Balochi"},
	["bgo"] = {"Baga Koga"},
	["bgp"] = {"Eastern Balochi"},
	["bgq"] = {"Bagri"},
	["bgr"] = {"Bawm Chin"},
	["bgs"] = {"Tagabawa"},
	["bgt"] = {"Bughotu"},
	["bgu"] = {"Mbongno"},
	["bgv"] = {"Warkay-Bipim"},
	["bgw"] = {"Bhatri"},
	["bgx"] = {"Balkan Gagauz Turkish"},
	["bgy"] = {"Benggoi"},
	["bgz"] = {"Banggai"},
	["bha"] = {"Bharia"},
	["bhb"] = {"Bhili"},
	["bhc"] = {"Biga"},
	["bhd"] = {"Bhadrawahi"},
	["bhe"] = {"Bhaya"},
	["bhf"] = {"Odiai"},
	["bhg"] = {"Binandere"},
	["bhh"] = {"Bukharic"},
	["bhi"] = {"Bhilali"},
	["bhj"] = {"Bahing"},
	["bhl"] = {"Bimin"},
	["bhm"] = {"Bathari"},
	["bhn"] = {"Bohtan Neo-Aramaic"},
	["bho"] = {"Bhojpuri"},
	["bhp"] = {"Bima"},
	["bhq"] = {"Tukang Besi South"},
	["bhr"] = {"Bara Malagasy"},
	["bhs"] = {"Buwal"},
	["bht"] = {"Bhattiyali"},
	["bhu"] = {"Bhunjia"},
	["bhv"] = {"Bahau"},
	["bhw"] = {"Biak"},
	["bhx"] = {"Bhalay"},
	["bhy"] = {"Bhele"},
	["bhz"] = {"Bada (Indonesia)"},
	["bia"] = {"Badimaya"},
	["bib"] = {"Bisa", "Bissa"},
	["bic"] = {"Bikaru"},
	["bid"] = {"Bidiyo"},
	["bie"] = {"Bepour"},
	["bif"] = {"Biafada"},
	["big"] = {"Biangai"},
	["bij"] = {"Vaghat-Ya-Bijim-Legeri"},
	["bik"] = {"Bikol"},
	["bil"] = {"Bile"},
	["bim"] = {"Bimoba"},
	["bin"] = {"Bini", "Edo"},
	["bio"] = {"Nai"},
	["bip"] = {"Bila"},
	["biq"] = {"Bipi"},
	["bir"] = {"Bisorio"},
	["bis"] = {"Bislama"},
	["bit"] = {"Berinomo"},
	["biu"] = {"Biete"},
	["biv"] = {"Southern Birifor"},
	["biw"] = {"Kol (Cameroon)"},
	["bix"] = {"Bijori"},
	["biy"] = {"Birhor"},
	["biz"] = {"Baloi"},
	["bja"] = {"Budza"},
	["bjb"] = {"Banggarla"},
	["bjc"] = {"Bariji"},
	["bje"] = {"Biao-Jiao Mien"},
	["bjf"] = {"Barzani Jewish Neo-Aramaic"},
	["bjg"] = {"Bidyogo"},
	["bjh"] = {"Bahinemo"},
	["bji"] = {"Burji"},
	["bjj"] = {"Kanauji"},
	["bjk"] = {"Barok"},
	["bjl"] = {"Bulu (Papua New Guinea)"},
	["bjm"] = {"Bajelani"},
	["bjn"] = {"Banjar"},
	["bjo"] = {"Mid-Southern Banda"},
	["bjp"] = {"Fanamaket"},
	["bjr"] = {"Binumarien"},
	["bjs"] = {"Bajan"},
	["bjt"] = {"Balanta-Ganja"},
	["bju"] = {"Busuu"},
	["bjv"] = {"Bedjond"},
	["bjw"] = {"Bakwé"},
	["bjx"] = {"Banao Itneg"},
	["bjy"] = {"Bayali"},
	["bjz"] = {"Baruga"},
	["bka"] = {"Kyak"},
	["bkc"] = {"Baka (Cameroon)"},
	["bkd"] = {"Binukid", "Talaandig"},
	["bkf"] = {"Beeke"},
	["bkg"] = {"Buraka"},
	["bkh"] = {"Bakoko"},
	["bki"] = {"Baki"},
	["bkj"] = {"Pande"},
	["bkk"] = {"Brokskat"},
	["bkl"] = {"Berik"},
	["bkm"] = {"Kom (Cameroon)"},
	["bkn"] = {"Bukitan"},
	["bko"] = {"Kwa'"},
	["bkp"] = {"Boko (Democratic Republic of Congo)"},
	["bkq"] = {"Bakairí"},
	["bkr"] = {"Bakumpai"},
	["bks"] = {"Northern Sorsoganon"},
	["bkt"] = {"Boloki"},
	["bku"] = {"Buhid"},
	["bkv"] = {"Bekwarra"},
	["bkw"] = {"Bekwel"},
	["bkx"] = {"Baikeno"},
	["bky"] = {"Bokyi"},
	["bkz"] = {"Bungku"},
	["bla"] = {"Siksika"},
	["blb"] = {"Bilua"},
	["blc"] = {"Bella Coola"},
	["bld"] = {"Bolango"},
	["ble"] = {"Balanta-Kentohe"},
	["blf"] = {"Buol"},
	["blg"] = {"Balau"},
	["blh"] = {"Kuwaa"},
	["bli"] = {"Bolia"},
	["blj"] = {"Bolongan"},
	["blk"] = {"Pa'O", "Pa'o Karen"},
	["bll"] = {"Biloxi"},
	["blm"] = {"Beli (South Sudan)"},
	["bln"] = {"Southern Catanduanes Bikol"},
	["blo"] = {"Anii"},
	["blp"] = {"Blablanga"},
	["blq"] = {"Baluan-Pam"},
	["blr"] = {"Blang"},
	["bls"] = {"Balaesang"},
	["blt"] = {"Tai Dam"},
	["blv"] = {"Bolo", "Kibala"},
	["blw"] = {"Balangao"},
	["blx"] = {"Mag-Indi Ayta"},
	["bly"] = {"Notre"},
	["blz"] = {"Balantak"},
	["bma"] = {"Lame"},
	["bmb"] = {"Bembe"},
	["bmc"] = {"Biem"},
	["bmd"] = {"Baga Manduri"},
	["bme"] = {"Limassa"},
	["bmf"] = {"Bom-Kim"},
	["bmg"] = {"Bamwe"},
	["bmh"] = {"Kein"},
	["bmi"] = {"Bagirmi"},
	["bmj"] = {"Bote-Majhi"},
	["bmk"] = {"Ghayavi"},
	["bml"] = {"Bomboli"},
	["bmm"] = {"Northern Betsimisaraka Malagasy"},
	["bmn"] = {"Bina (Papua New Guinea)"},
	["bmo"] = {"Bambalang"},
	["bmp"] = {"Bulgebi"},
	["bmq"] = {"Bomu"},
	["bmr"] = {"Muinane"},
	["bms"] = {"Bilma Kanuri"},
	["bmt"] = {"Biao Mon"},
	["bmu"] = {"Somba-Siawari"},
	["bmv"] = {"Bum"},
	["bmw"] = {"Bomwali"},
	["bmx"] = {"Baimak"},
	["bmz"] = {"Baramu"},
	["bna"] = {"Bonerate"},
	["bnb"] = {"Bookan"},
	["bnc"] = {"Bontok"},
	["bnd"] = {"Banda (Indonesia)"},
	["bne"] = {"Bintauna"},
	["bnf"] = {"Masiwang"},
	["bng"] = {"Benga"},
	["bni"] = {"Bangi"},
	["bnj"] = {"Eastern Tawbuid"},
	["bnk"] = {"Bierebo"},
	["bnl"] = {"Boon"},
	["bnm"] = {"Batanga"},
	["bnn"] = {"Bunun"},
	["bno"] = {"Bantoanon"},
	["bnp"] = {"Bola"},
	["bnq"] = {"Bantik"},
	["bnr"] = {"Butmas-Tur"},
	["bns"] = {"Bundeli"},
	["bnu"] = {"Bentong"},
	["bnv"] = {"Beneraf", "Bonerif", "Edwas"},
	["bnw"] = {"Bisis"},
	["bnx"] = {"Bangubangu"},
	["bny"] = {"Bintulu"},
	["bnz"] = {"Beezen"},
	["boa"] = {"Bora"},
	["bob"] = {"Aweer"},
	["bod"] = {"Tibetan"},
	["boe"] = {"Mundabli"},
	["bof"] = {"Bolon"},
	["bog"] = {"Bamako Sign Language"},
	["boh"] = {"Boma"},
	["boi"] = {"Barbareño"},
	["boj"] = {"Anjam"},
	["bok"] = {"Bonjo"},
	["bol"] = {"Bole"},
	["bom"] = {"Berom"},
	["bon"] = {"Bine"},
	["boo"] = {"Tiemacèwè Bozo"},
	["bop"] = {"Bonkiman"},
	["boq"] = {"Bogaya"},
	["bor"] = {"Borôro"},
	["bos"] = {"Bosnian"},
	["bot"] = {"Bongo"},
	["bou"] = {"Bondei"},
	["bov"] = {"Tuwuli"},
	["bow"] = {"Rema"},
	["box"] = {"Buamu"},
	["boy"] = {"Bodo (Central African Republic)"},
	["boz"] = {"Tiéyaxo Bozo"},
	["bpa"] = {"Daakaka"},
	["bpb"] = {"Barbacoas"},
	["bpd"] = {"Banda-Banda"},
	["bpg"] = {"Bonggo"},
	["bph"] = {"Botlikh"},
	["bpi"] = {"Bagupi"},
	["bpj"] = {"Binji"},
	["bpk"] = {"'Ôrôê", "Orowe"},
	["bpl"] = {"Broome Pearling Lugger Pidgin"},
	["bpm"] = {"Biyom"},
	["bpn"] = {"Dzao Min"},
	["bpo"] = {"Anasi"},
	["bpp"] = {"Kaure"},
	["bpq"] = {"Banda Malay"},
	["bpr"] = {"Koronadal Blaan"},
	["bps"] = {"Sarangani Blaan"},
	["bpt"] = {"Barrow Point"},
	["bpu"] = {"Bongu"},
	["bpv"] = {"Bian Marind"},
	["bpw"] = {"Bo (Papua New Guinea)"},
	["bpx"] = {"Palya Bareli"},
	["bpy"] = {"Bishnupriya"},
	["bpz"] = {"Bilba"},
	["bqa"] = {"Tchumbuli"},
	["bqb"] = {"Bagusa"},
	["bqc"] = {"Boko (Benin)", "Boo"},
	["bqd"] = {"Bung"},
	["bqf"] = {"Baga Kaloum"},
	["bqg"] = {"Bago-Kusuntu"},
	["bqh"] = {"Baima"},
	["bqi"] = {"Bakhtiari"},
	["bqj"] = {"Bandial"},
	["bqk"] = {"Banda-Mbrès"},
	["bql"] = {"Bilakura"},
	["bqm"] = {"Wumboko"},
	["bqn"] = {"Bulgarian Sign Language"},
	["bqo"] = {"Balo"},
	["bqp"] = {"Busa"},
	["bqq"] = {"Biritai"},
	["bqr"] = {"Burusu"},
	["bqs"] = {"Bosngun"},
	["bqt"] = {"Bamukumbit"},
	["bqu"] = {"Boguru"},
	["bqv"] = {"Begbere-Ejar", "Koro Wachi"},
	["bqw"] = {"Buru (Nigeria)"},
	["bqx"] = {"Baangi"},
	["bqy"] = {"Bengkala Sign Language"},
	["bqz"] = {"Bakaka"},
	["bra"] = {"Braj"},
	["brb"] = {"Lave"},
	["brc"] = {"Berbice Creole Dutch"},
	["brd"] = {"Baraamu"},
	["bre"] = {"Breton"},
	["brf"] = {"Bera"},
	["brg"] = {"Baure"},
	["brh"] = {"Brahui"},
	["bri"] = {"Mokpwe"},
	["brj"] = {"Bieria"},
	["brk"] = {"Birked"},
	["brl"] = {"Birwa"},
	["brm"] = {"Barambu"},
	["brn"] = {"Boruca"},
	["bro"] = {"Brokkat"},
	["brp"] = {"Barapasi"},
	["brq"] = {"Breri"},
	["brr"] = {"Birao"},
	["brs"] = {"Baras"},
	["brt"] = {"Bitare"},
	["bru"] = {"Eastern Bru"},
	["brv"] = {"Western Bru"},
	["brw"] = {"Bellari"},
	["brx"] = {"Bodo (India)"},
	["bry"] = {"Burui"},
	["brz"] = {"Bilbil"},
	["bsa"] = {"Abinomn"},
	["bsb"] = {"Brunei Bisaya"},
	["bsc"] = {"Bassari", "Oniyan"},
	["bse"] = {"Wushi"},
	["bsf"] = {"Bauchi"},
	["bsg"] = {"Bashkardi"},
	["bsh"] = {"Kati"},
	["bsi"] = {"Bassossi"},
	["bsj"] = {"Bangwinji"},
	["bsk"] = {"Burushaski"},
	["bsl"] = {"Basa-Gumna"},
	["bsm"] = {"Busami"},
	["bsn"] = {"Barasana-Eduria"},
	["bso"] = {"Buso"},
	["bsp"] = {"Baga Sitemu"},
	["bsq"] = {"Bassa"},
	["bsr"] = {"Bassa-Kontagora"},
	["bss"] = {"Akoose"},
	["bst"] = {"Basketo"},
	["bsu"] = {"Bahonsuai"},
	["bsv"] = {"Baga Sobané"},
	["bsw"] = {"Baiso"},
	["bsx"] = {"Yangkam"},
	["bsy"] = {"Sabah Bisaya"},
	["bta"] = {"Bata"},
	["btc"] = {"Bati (Cameroon)"},
	["btd"] = {"Batak Dairi"},
	["bte"] = {"Gamo-Ningi"},
	["btf"] = {"Birgit"},
	["btg"] = {"Gagnoa Bété"},
	["bth"] = {"Biatah Bidayuh"},
	["bti"] = {"Burate"},
	["btj"] = {"Bacanese Malay"},
	["btm"] = {"Batak Mandailing"},
	["btn"] = {"Ratagnon"},
	["bto"] = {"Rinconada Bikol"},
	["btp"] = {"Budibud"},
	["btq"] = {"Batek"},
	["btr"] = {"Baetora"},
	["bts"] = {"Batak Simalungun"},
	["btt"] = {"Bete-Bendi"},
	["btu"] = {"Batu"},
	["btv"] = {"Bateri"},
	["btw"] = {"Butuanon"},
	["btx"] = {"Batak Karo"},
	["bty"] = {"Bobot"},
	["btz"] = {"Batak Alas-Kluet"},
	["bua"] = {"Buriat"},
	["bub"] = {"Bua"},
	["buc"] = {"Bushi"},
	["bud"] = {"Ntcham"},
	["bue"] = {"Beothuk"},
	["buf"] = {"Bushoong"},
	["bug"] = {"Buginese"},
	["buh"] = {"Younuo Bunu"},
	["bui"] = {"Bongili"},
	["buj"] = {"Basa-Gurmana"},
	["buk"] = {"Bugawac"},
	["bul"] = {"Bulgarian"},
	["bum"] = {"Bulu (Cameroon)"},
	["bun"] = {"Sherbro"},
	["buo"] = {"Terei"},
	["bup"] = {"Busoa"},
	["buq"] = {"Brem"},
	["bus"] = {"Bokobaru"},
	["but"] = {"Bungain"},
	["buu"] = {"Budu"},
	["buv"] = {"Bun"},
	["buw"] = {"Bubi"},
	["bux"] = {"Boghom"},
	["buy"] = {"Bullom So"},
	["buz"] = {"Bukwen"},
	["bva"] = {"Barein"},
	["bvb"] = {"Bube"},
	["bvc"] = {"Baelelea"},
	["bvd"] = {"Baeggu"},
	["bve"] = {"Berau Malay"},
	["bvf"] = {"Boor"},
	["bvg"] = {"Bonkeng"},
	["bvh"] = {"Bure"},
	["bvi"] = {"Belanda Viri"},
	["bvj"] = {"Baan"},
	["bvk"] = {"Bukat"},
	["bvl"] = {"Bolivian Sign Language"},
	["bvm"] = {"Bamunka"},
	["bvn"] = {"Buna"},
	["bvo"] = {"Bolgo"},
	["bvp"] = {"Bumang"},
	["bvq"] = {"Birri"},
	["bvr"] = {"Burarra"},
	["bvt"] = {"Bati (Indonesia)"},
	["bvu"] = {"Bukit Malay"},
	["bvv"] = {"Baniva"},
	["bvw"] = {"Boga"},
	["bvx"] = {"Dibole"},
	["bvy"] = {"Baybayanon"},
	["bvz"] = {"Bauzi"},
	["bwa"] = {"Bwatoo"},
	["bwb"] = {"Namosi-Naitasiri-Serua"},
	["bwc"] = {"Bwile"},
	["bwd"] = {"Bwaidoka"},
	["bwe"] = {"Bwe Karen"},
	["bwf"] = {"Boselewa"},
	["bwg"] = {"Barwe"},
	["bwh"] = {"Bishuo"},
	["bwi"] = {"Baniwa"},
	["bwj"] = {"Láá Láá Bwamu"},
	["bwk"] = {"Bauwaki"},
	["bwl"] = {"Bwela"},
	["bwm"] = {"Biwat"},
	["bwn"] = {"Wunai Bunu"},
	["bwo"] = {"Borna (Ethiopia)", "Boro (Ethiopia)"},
	["bwp"] = {"Mandobo Bawah"},
	["bwq"] = {"Southern Bobo Madaré"},
	["bwr"] = {"Bura-Pabir"},
	["bws"] = {"Bomboma"},
	["bwt"] = {"Bafaw-Balong"},
	["bwu"] = {"Buli (Ghana)"},
	["bww"] = {"Bwa"},
	["bwx"] = {"Bu-Nao Bunu"},
	["bwy"] = {"Cwi Bwamu"},
	["bwz"] = {"Bwisi"},
	["bxa"] = {"Tairaha"},
	["bxb"] = {"Belanda Bor"},
	["bxc"] = {"Molengue"},
	["bxd"] = {"Pela"},
	["bxe"] = {"Birale"},
	["bxf"] = {"Bilur", "Minigir"},
	["bxg"] = {"Bangala"},
	["bxh"] = {"Buhutu"},
	["bxi"] = {"Pirlatapa"},
	["bxj"] = {"Bayungu"},
	["bxk"] = {"Bukusu", "Lubukusu"},
	["bxl"] = {"Jalkunan"},
	["bxm"] = {"Mongolia Buriat"},
	["bxn"] = {"Burduna"},
	["bxo"] = {"Barikanchi"},
	["bxp"] = {"Bebil"},
	["bxq"] = {"Beele"},
	["bxr"] = {"Russia Buriat"},
	["bxs"] = {"Busam"},
	["bxu"] = {"China Buriat"},
	["bxv"] = {"Berakou"},
	["bxw"] = {"Bankagooma"},
	["bxz"] = {"Binahari"},
	["bya"] = {"Batak"},
	["byb"] = {"Bikya"},
	["byc"] = {"Ubaghara"},
	["byd"] = {"Benyadu'"},
	["bye"] = {"Pouye"},
	["byf"] = {"Bete"},
	["byg"] = {"Baygo"},
	["byh"] = {"Bhujel"},
	["byi"] = {"Buyu"},
	["byj"] = {"Bina (Nigeria)"},
	["byk"] = {"Biao"},
	["byl"] = {"Bayono"},
	["bym"] = {"Bidjara"},
	["byn"] = {"Bilin", "Blin"},
	["byo"] = {"Biyo"},
	["byp"] = {"Bumaji"},
	["byq"] = {"Basay"},
	["byr"] = {"Baruya", "Yipma"},
	["bys"] = {"Burak"},
	["byt"] = {"Berti"},
	["byv"] = {"Medumba"},
	["byw"] = {"Belhariya"},
	["byx"] = {"Qaqet"},
	["byz"] = {"Banaro"},
	["bza"] = {"Bandi"},
	["bzb"] = {"Andio"},
	["bzc"] = {"Southern Betsimisaraka Malagasy"},
	["bzd"] = {"Bribri"},
	["bze"] = {"Jenaama Bozo"},
	["bzf"] = {"Boikin"},
	["bzg"] = {"Babuza"},
	["bzh"] = {"Mapos Buang"},
	["bzi"] = {"Bisu"},
	["bzj"] = {"Belize Kriol English"},
	["bzk"] = {"Nicaragua Creole English"},
	["bzl"] = {"Boano (Sulawesi)"},
	["bzm"] = {"Bolondo"},
	["bzn"] = {"Boano (Maluku)"},
	["bzo"] = {"Bozaba"},
	["bzp"] = {"Kemberano"},
	["bzq"] = {"Buli (Indonesia)"},
	["bzr"] = {"Biri"},
	["bzs"] = {"Brazilian Sign Language"},
	["bzt"] = {"Brithenig"},
	["bzu"] = {"Burmeso"},
	["bzv"] = {"Naami"},
	["bzw"] = {"Basa (Nigeria)"},
	["bzx"] = {"Kɛlɛngaxo Bozo"},
	["bzy"] = {"Obanliku"},
	["bzz"] = {"Evant"},
	["caa"] = {"Chortí"},
	["cab"] = {"Garifuna"},
	["cac"] = {"Chuj"},
	["cad"] = {"Caddo"},
	["cae"] = {"Laalaa", "Lehar"},
	["caf"] = {"Southern Carrier"},
	["cag"] = {"Nivaclé"},
	["cah"] = {"Cahuarano"},
	["caj"] = {"Chané"},
	["cak"] = {"Cakchiquel", "Kaqchikel"},
	["cal"] = {"Carolinian"},
	["cam"] = {"Cemuhî"},
	["can"] = {"Chambri"},
	["cao"] = {"Chácobo"},
	["cap"] = {"Chipaya"},
	["caq"] = {"Car Nicobarese"},
	["car"] = {"Galibi Carib"},
	["cas"] = {"Tsimané"},
	["cat"] = {"Catalan", "Valencian"},
	["cav"] = {"Cavineña"},
	["caw"] = {"Callawalla"},
	["cax"] = {"Chiquitano"},
	["cay"] = {"Cayuga"},
	["caz"] = {"Canichana"},
	["cbb"] = {"Cabiyarí"},
	["cbc"] = {"Carapana"},
	["cbd"] = {"Carijona"},
	["cbg"] = {"Chimila"},
	["cbi"] = {"Chachi"},
	["cbj"] = {"Ede Cabe"},
	["cbk"] = {"Chavacano"},
	["cbl"] = {"Bualkhaw Chin"},
	["cbn"] = {"Nyahkur"},
	["cbo"] = {"Izora"},
	["cbq"] = {"Cuba", "Tsucuba"},
	["cbr"] = {"Cashibo-Cacataibo"},
	["cbs"] = {"Cashinahua"},
	["cbt"] = {"Chayahuita"},
	["cbu"] = {"Candoshi-Shapra"},
	["cbv"] = {"Cacua"},
	["cbw"] = {"Kinabalian"},
	["cby"] = {"Carabayo"},
	["cca"] = {"Cauca"},
	["ccc"] = {"Chamicuro"},
	["ccd"] = {"Cafundo Creole"},
	["cce"] = {"Chopi"},
	["ccg"] = {"Samba Daka"},
	["cch"] = {"Atsam"},
	["ccj"] = {"Kasanga"},
	["ccl"] = {"Cutchi-Swahili"},
	["ccm"] = {"Malaccan Creole Malay"},
	["cco"] = {"Comaltepec Chinantec"},
	["ccp"] = {"Chakma"},
	["ccr"] = {"Cacaopera"},
	["cda"] = {"Choni"},
	["cde"] = {"Chenchu"},
	["cdf"] = {"Chiru"},
	["cdg"] = {"Chamari"},
	["cdh"] = {"Chambeali"},
	["cdi"] = {"Chodri"},
	["cdj"] = {"Churahi"},
	["cdm"] = {"Chepang"},
	["cdn"] = {"Chaudangsi"},
	["cdo"] = {"Min Dong Chinese"},
	["cdr"] = {"Cinda-Regi-Tiyal"},
	["cds"] = {"Chadian Sign Language"},
	["cdy"] = {"Chadong"},
	["cdz"] = {"Koda"},
	["cea"] = {"Lower Chehalis"},
	["ceb"] = {"Cebuano"},
	["ceg"] = {"Chamacoco"},
	["cek"] = {"Eastern Khumi Chin"},
	["cen"] = {"Cen"},
	["ces"] = {"Czech"},
	["cet"] = {"Centúúm"},
	["cey"] = {"Ekai Chin"},
	["cfa"] = {"Dijim-Bwilim"},
	["cfd"] = {"Cara"},
	["cfg"] = {"Como Karim"},
	["cfm"] = {"Falam Chin"},
	["cga"] = {"Changriwa"},
	["cgc"] = {"Kagayanen"},
	["cgg"] = {"Chiga"},
	["cgk"] = {"Chocangacakha"},
	["cha"] = {"Chamorro"},
	["chb"] = {"Chibcha"},
	["chc"] = {"Catawba"},
	["chd"] = {"Highland Oaxaca Chontal"},
	["che"] = {"Chechen"},
	["chf"] = {"Tabasco Chontal"},
	["chg"] = {"Chagatai"},
	["chh"] = {"Chinook"},
	["chj"] = {"Ojitlán Chinantec"},
	["chk"] = {"Chuukese"},
	["chl"] = {"Cahuilla"},
	["chm"] = {"Mari (Russia)"},
	["chn"] = {"Chinook jargon"},
	["cho"] = {"Choctaw"},
	["chp"] = {"Chipewyan", "Dene Suline"},
	["chq"] = {"Quiotepec Chinantec"},
	["chr"] = {"Cherokee"},
	["cht"] = {"Cholón"},
	["chu"] = {"Church Slavic", "Church Slavonic", "Old Bulgarian", "Old Church Slavonic", "Old Slavonic"},
	["chv"] = {"Chuvash"},
	["chw"] = {"Chuwabu"},
	["chx"] = {"Chantyal"},
	["chy"] = {"Cheyenne"},
	["chz"] = {"Ozumacín Chinantec"},
	["cia"] = {"Cia-Cia"},
	["cib"] = {"Ci Gbe"},
	["cic"] = {"Chickasaw"},
	["cid"] = {"Chimariko"},
	["cie"] = {"Cineni"},
	["cih"] = {"Chinali"},
	["cik"] = {"Chitkuli Kinnauri"},
	["cim"] = {"Cimbrian"},
	["cin"] = {"Cinta Larga"},
	["cip"] = {"Chiapanec"},
	["cir"] = {"Haméa", "Méa", "Tiri"},
	["ciw"] = {"Chippewa"},
	["ciy"] = {"Chaima"},
	["cja"] = {"Western Cham"},
	["cje"] = {"Chru"},
	["cjh"] = {"Upper Chehalis"},
	["cji"] = {"Chamalal"},
	["cjk"] = {"Chokwe"},
	["cjm"] = {"Eastern Cham"},
	["cjn"] = {"Chenapian"},
	["cjo"] = {"Ashéninka Pajonal"},
	["cjp"] = {"Cabécar"},
	["cjs"] = {"Shor"},
	["cjv"] = {"Chuave"},
	["cjy"] = {"Jinyu Chinese"},
	["ckb"] = {"Central Kurdish"},
	["ckh"] = {"Chak"},
	["ckl"] = {"Cibak"},
	["ckn"] = {"Kaang Chin"},
	["cko"] = {"Anufo"},
	["ckq"] = {"Kajakse"},
	["ckr"] = {"Kairak"},
	["cks"] = {"Tayo"},
	["ckt"] = {"Chukot"},
	["cku"] = {"Koasati"},
	["ckv"] = {"Kavalan"},
	["ckx"] = {"Caka"},
	["cky"] = {"Cakfem-Mushere"},
	["ckz"] = {"Cakchiquel-Quiché Mixed Language"},
	["cla"] = {"Ron"},
	["clc"] = {"Chilcotin"},
	["cld"] = {"Chaldean Neo-Aramaic"},
	["cle"] = {"Lealao Chinantec"},
	["clh"] = {"Chilisso"},
	["cli"] = {"Chakali"},
	["clj"] = {"Laitu Chin"},
	["clk"] = {"Idu-Mishmi"},
	["cll"] = {"Chala"},
	["clm"] = {"Clallam"},
	["clo"] = {"Lowland Oaxaca Chontal"},
	["clt"] = {"Lautu Chin"},
	["clu"] = {"Caluyanun"},
	["clw"] = {"Chulym"},
	["cly"] = {"Eastern Highland Chatino"},
	["cma"] = {"Maa"},
	["cme"] = {"Cerma"},
	["cmg"] = {"Classical Mongolian"},
	["cmi"] = {"Emberá-Chamí"},
	["cml"] = {"Campalagian"},
	["cmm"] = {"Michigamea"},
	["cmn"] = {"Mandarin Chinese"},
	["cmo"] = {"Central Mnong"},
	["cmr"] = {"Mro-Khimi Chin"},
	["cms"] = {"Messapic"},
	["cmt"] = {"Camtho"},
	["cna"] = {"Changthang"},
	["cnb"] = {"Chinbon Chin"},
	["cnc"] = {"Côông"},
	["cng"] = {"Northern Qiang"},
	["cnh"] = {"Haka Chin", "Hakha Chin"},
	["cni"] = {"Asháninka"},
	["cnk"] = {"Khumi Chin"},
	["cnl"] = {"Lalana Chinantec"},
	["cno"] = {"Con"},
	["cnr"] = {"Montenegrin"},
	["cns"] = {"Central Asmat"},
	["cnt"] = {"Tepetotutla Chinantec"},
	["cnu"] = {"Chenoua"},
	["cnw"] = {"Ngawn Chin"},
	["cnx"] = {"Middle Cornish"},
	["coa"] = {"Cocos Islands Malay"},
	["cob"] = {"Chicomuceltec"},
	["coc"] = {"Cocopa"},
	["cod"] = {"Cocama-Cocamilla"},
	["coe"] = {"Koreguaje"},
	["cof"] = {"Colorado"},
	["cog"] = {"Chong"},
	["coh"] = {"Chichonyi-Chidzihana-Chikauma", "Chonyi-Dzihana-Kauma"},
	["coj"] = {"Cochimi"},
	["cok"] = {"Santa Teresa Cora"},
	["col"] = {"Columbia-Wenatchi"},
	["com"] = {"Comanche"},
	["con"] = {"Cofán"},
	["coo"] = {"Comox"},
	["cop"] = {"Coptic"},
	["coq"] = {"Coquille"},
	["cor"] = {"Cornish"},
	["cos"] = {"Corsican"},
	["cot"] = {"Caquinte"},
	["cou"] = {"Wamey"},
	["cov"] = {"Cao Miao"},
	["cow"] = {"Cowlitz"},
	["cox"] = {"Nanti"},
	["coz"] = {"Chochotec"},
	["cpa"] = {"Palantla Chinantec"},
	["cpb"] = {"Ucayali-Yurúa Ashéninka"},
	["cpc"] = {"Ajyíninka Apurucayali"},
	["cpg"] = {"Cappadocian Greek"},
	["cpi"] = {"Chinese Pidgin English"},
	["cpn"] = {"Cherepon"},
	["cpo"] = {"Kpeego"},
	["cps"] = {"Capiznon"},
	["cpu"] = {"Pichis Ashéninka"},
	["cpx"] = {"Pu-Xian Chinese"},
	["cpy"] = {"South Ucayali Ashéninka"},
	["cqd"] = {"Chuanqiandian Cluster Miao"},
	["cra"] = {"Chara"},
	["crb"] = {"Island Carib"},
	["crc"] = {"Lonwolwol"},
	["crd"] = {"Coeur d'Alene"},
	["cre"] = {"Cree"},
	["crf"] = {"Caramanta"},
	["crg"] = {"Michif"},
	["crh"] = {"Crimean Tatar", "Crimean Turkish"},
	["cri"] = {"Sãotomense"},
	["crj"] = {"Southern East Cree"},
	["crk"] = {"Plains Cree"},
	["crl"] = {"Northern East Cree"},
	["crm"] = {"Moose Cree"},
	["crn"] = {"El Nayar Cora"},
	["cro"] = {"Crow"},
	["crq"] = {"Iyo'wujwa Chorote"},
	["crr"] = {"Carolina Algonquian"},
	["crs"] = {"Seselwa Creole French"},
	["crt"] = {"Iyojwa'ja Chorote"},
	["crv"] = {"Chaura"},
	["crw"] = {"Chrau"},
	["crx"] = {"Carrier"},
	["cry"] = {"Cori"},
	["crz"] = {"Cruzeño"},
	["csa"] = {"Chiltepec Chinantec"},
	["csb"] = {"Kashubian"},
	["csc"] = {"Catalan Sign Language", "Lengua de señas catalana", "Llengua de Signes Catalana"},
	["csd"] = {"Chiangmai Sign Language"},
	["cse"] = {"Czech Sign Language"},
	["csf"] = {"Cuba Sign Language"},
	["csg"] = {"Chilean Sign Language"},
	["csh"] = {"Asho Chin"},
	["csi"] = {"Coast Miwok"},
	["csj"] = {"Songlai Chin"},
	["csk"] = {"Jola-Kasa"},
	["csl"] = {"Chinese Sign Language"},
	["csm"] = {"Central Sierra Miwok"},
	["csn"] = {"Colombian Sign Language"},
	["cso"] = {"Sochiapam Chinantec", "Sochiapan Chinantec"},
	["csq"] = {"Croatia Sign Language"},
	["csr"] = {"Costa Rican Sign Language"},
	["css"] = {"Southern Ohlone"},
	["cst"] = {"Northern Ohlone"},
	["csv"] = {"Sumtu Chin"},
	["csw"] = {"Swampy Cree"},
	["csy"] = {"Siyin Chin"},
	["csz"] = {"Coos"},
	["cta"] = {"Tataltepec Chatino"},
	["ctc"] = {"Chetco"},
	["ctd"] = {"Tedim Chin"},
	["cte"] = {"Tepinapa Chinantec"},
	["ctg"] = {"Chittagonian"},
	["cth"] = {"Thaiphum Chin"},
	["ctl"] = {"Tlacoatzintepec Chinantec"},
	["ctm"] = {"Chitimacha"},
	["ctn"] = {"Chhintange"},
	["cto"] = {"Emberá-Catío"},
	["ctp"] = {"Western Highland Chatino"},
	["cts"] = {"Northern Catanduanes Bikol"},
	["ctt"] = {"Wayanad Chetti"},
	["ctu"] = {"Chol"},
	["ctz"] = {"Zacatepec Chatino"},
	["cua"] = {"Cua"},
	["cub"] = {"Cubeo"},
	["cuc"] = {"Usila Chinantec"},
	["cug"] = {"Chungmboko", "Cung"},
	["cuh"] = {"Chuka", "Gichuka"},
	["cui"] = {"Cuiba"},
	["cuj"] = {"Mashco Piro"},
	["cuk"] = {"San Blas Kuna"},
	["cul"] = {"Culina", "Kulina"},
	["cuo"] = {"Cumanagoto"},
	["cup"] = {"Cupeño"},
	["cuq"] = {"Cun"},
	["cur"] = {"Chhulung"},
	["cut"] = {"Teutila Cuicatec"},
	["cuu"] = {"Tai Ya"},
	["cuv"] = {"Cuvok"},
	["cuw"] = {"Chukwa"},
	["cux"] = {"Tepeuxila Cuicatec"},
	["cuy"] = {"Cuitlatec"},
	["cvg"] = {"Chug"},
	["cvn"] = {"Valle Nacional Chinantec"},
	["cwa"] = {"Kabwa"},
	["cwb"] = {"Maindo"},
	["cwd"] = {"Woods Cree"},
	["cwe"] = {"Kwere"},
	["cwg"] = {"Cheq Wong", "Chewong"},
	["cwt"] = {"Kuwaataay"},
	["cya"] = {"Nopala Chatino"},
	["cyb"] = {"Cayubaba"},
	["cym"] = {"Welsh"},
	["cyo"] = {"Cuyonon"},
	["czh"] = {"Huizhou Chinese"},
	["czk"] = {"Knaanic"},
	["czn"] = {"Zenzontepec Chatino"},
	["czo"] = {"Min Zhong Chinese"},
	["czt"] = {"Zotung Chin"},
	["daa"] = {"Dangaléat"},
	["dac"] = {"Dambi"},
	["dad"] = {"Marik"},
	["dae"] = {"Duupa"},
	["dag"] = {"Dagbani"},
	["dah"] = {"Gwahatike"},
	["dai"] = {"Day"},
	["daj"] = {"Dar Fur Daju"},
	["dak"] = {"Dakota"},
	["dal"] = {"Dahalo"},
	["dam"] = {"Damakawa"},
	["dan"] = {"Danish"},
	["dao"] = {"Daai Chin"},
	["daq"] = {"Dandami Maria"},
	["dar"] = {"Dargwa"},
	["das"] = {"Daho-Doo"},
	["dau"] = {"Dar Sila Daju"},
	["dav"] = {"Dawida", "Taita"},
	["daw"] = {"Davawenyo"},
	["dax"] = {"Dayi"},
	["daz"] = {"Dao"},
	["dba"] = {"Bangime"},
	["dbb"] = {"Deno"},
	["dbd"] = {"Dadiya"},
	["dbe"] = {"Dabe"},
	["dbf"] = {"Edopi"},
	["dbg"] = {"Dogul Dom Dogon"},
	["dbi"] = {"Doka"},
	["dbj"] = {"Ida'an"},
	["dbl"] = {"Dyirbal"},
	["dbm"] = {"Duguri"},
	["dbn"] = {"Duriankere"},
	["dbo"] = {"Dulbu"},
	["dbp"] = {"Duwai"},
	["dbq"] = {"Daba"},
	["dbr"] = {"Dabarre"},
	["dbt"] = {"Ben Tey Dogon"},
	["dbu"] = {"Bondum Dom Dogon"},
	["dbv"] = {"Dungu"},
	["dbw"] = {"Bankan Tey Dogon"},
	["dby"] = {"Dibiyaso"},
	["dcc"] = {"Deccan"},
	["dcr"] = {"Negerhollands"},
	["dda"] = {"Dadi Dadi"},
	["ddd"] = {"Dongotono"},
	["dde"] = {"Doondo"},
	["ddg"] = {"Fataluku"},
	["ddi"] = {"West Goodenough"},
	["ddj"] = {"Jaru"},
	["ddn"] = {"Dendi (Benin)"},
	["ddo"] = {"Dido"},
	["ddr"] = {"Dhudhuroa"},
	["dds"] = {"Donno So Dogon"},
	["ddw"] = {"Dawera-Daweloor"},
	["dec"] = {"Dagik"},
	["ded"] = {"Dedua"},
	["dee"] = {"Dewoin"},
	["def"] = {"Dezfuli"},
	["deg"] = {"Degema"},
	["deh"] = {"Dehwari"},
	["dei"] = {"Demisa"},
	["dek"] = {"Dek"},
	["del"] = {"Delaware"},
	["dem"] = {"Dem"},
	["den"] = {"Slave (Athapascan)"},
	["dep"] = {"Pidgin Delaware"},
	["deq"] = {"Dendi (Central African Republic)"},
	["der"] = {"Deori"},
	["des"] = {"Desano"},
	["deu"] = {"German"},
	["dev"] = {"Domung"},
	["dez"] = {"Dengese"},
	["dga"] = {"Southern Dagaare"},
	["dgb"] = {"Bunoge Dogon"},
	["dgc"] = {"Casiguran Dumagat Agta"},
	["dgd"] = {"Dagaari Dioula"},
	["dge"] = {"Degenan"},
	["dgg"] = {"Doga"},
	["dgh"] = {"Dghwede"},
	["dgi"] = {"Northern Dagara"},
	["dgk"] = {"Dagba"},
	["dgl"] = {"Andaandi", "Dongolawi"},
	["dgn"] = {"Dagoman"},
	["dgo"] = {"Dogri (individual language)"},
	["dgr"] = {"Dogrib"},
	["dgs"] = {"Dogoso"},
	["dgt"] = {"Ndra'ngith"},
	["dgu"] = {"Degaru"},
	["dgw"] = {"Daungwurrung"},
	["dgx"] = {"Doghoro"},
	["dgz"] = {"Daga"},
	["dhd"] = {"Dhundari"},
	["dhg"] = {"Dhangu", "Dhangu-Djangu", "Djangu"},
	["dhi"] = {"Dhimal"},
	["dhl"] = {"Dhalandji"},
	["dhm"] = {"Zemba"},
	["dhn"] = {"Dhanki"},
	["dho"] = {"Dhodia"},
	["dhr"] = {"Dhargari"},
	["dhs"] = {"Dhaiso"},
	["dhu"] = {"Dhurga"},
	["dhv"] = {"Dehu", "Drehu"},
	["dhw"] = {"Dhanwar (Nepal)"},
	["dhx"] = {"Dhungaloo"},
	["dia"] = {"Dia"},
	["dib"] = {"South Central Dinka"},
	["dic"] = {"Lakota Dida"},
	["did"] = {"Didinga"},
	["dif"] = {"Dieri", "Diyari"},
	["dig"] = {"Chidigo", "Digo"},
	["dih"] = {"Kumiai"},
	["dii"] = {"Dimbong"},
	["dij"] = {"Dai"},
	["dik"] = {"Southwestern Dinka"},
	["dil"] = {"Dilling"},
	["dim"] = {"Dime"},
	["din"] = {"Dinka"},
	["dio"] = {"Dibo"},
	["dip"] = {"Northeastern Dinka"},
	["diq"] = {"Dimli (individual language)"},
	["dir"] = {"Dirim"},
	["dis"] = {"Dimasa"},
	["diu"] = {"Diriku"},
	["div"] = {"Dhivehi", "Divehi", "Maldivian"},
	["diw"] = {"Northwestern Dinka"},
	["dix"] = {"Dixon Reef"},
	["diy"] = {"Diuwe"},
	["diz"] = {"Ding"},
	["dja"] = {"Djadjawurrung"},
	["djb"] = {"Djinba"},
	["djc"] = {"Dar Daju Daju"},
	["djd"] = {"Djamindjung", "Ngaliwurru"},
	["dje"] = {"Zarma"},
	["djf"] = {"Djangun"},
	["dji"] = {"Djinang"},
	["djj"] = {"Djeebbana"},
	["djk"] = {"Businenge Tongo", "Eastern Maroon Creole", "Nenge"},
	["djm"] = {"Jamsay Dogon"},
	["djn"] = {"Djauan", "Jawoyn"},
	["djo"] = {"Jangkang"},
	["djr"] = {"Djambarrpuyngu"},
	["dju"] = {"Kapriman"},
	["djw"] = {"Djawi"},
	["dka"] = {"Dakpakha"},
	["dkk"] = {"Dakka"},
	["dkr"] = {"Kuijau"},
	["dks"] = {"Southeastern Dinka"},
	["dkx"] = {"Mazagway"},
	["dlg"] = {"Dolgan"},
	["dlk"] = {"Dahalik"},
	["dlm"] = {"Dalmatian"},
	["dln"] = {"Darlong"},
	["dma"] = {"Duma"},
	["dmb"] = {"Mombo Dogon"},
	["dmc"] = {"Gavak"},
	["dmd"] = {"Madhi Madhi"},
	["dme"] = {"Dugwor"},
	["dmg"] = {"Upper Kinabatangan"},
	["dmk"] = {"Domaaki"},
	["dml"] = {"Dameli"},
	["dmm"] = {"Dama"},
	["dmo"] = {"Kemedzung"},
	["dmr"] = {"East Damar"},
	["dms"] = {"Dampelas"},
	["dmu"] = {"Dubu", "Tebi"},
	["dmv"] = {"Dumpas"},
	["dmw"] = {"Mudburra"},
	["dmx"] = {"Dema"},
	["dmy"] = {"Demta", "Sowari"},
	["dna"] = {"Upper Grand Valley Dani"},
	["dnd"] = {"Daonda"},
	["dne"] = {"Ndendeule"},
	["dng"] = {"Dungan"},
	["dni"] = {"Lower Grand Valley Dani"},
	["dnj"] = {"Dan"},
	["dnk"] = {"Dengka"},
	["dnn"] = {"Dzùùngoo"},
	["dno"] = {"Ndrulo", "Northern Lendu"},
	["dnr"] = {"Danaru"},
	["dnt"] = {"Mid Grand Valley Dani"},
	["dnu"] = {"Danau"},
	["dnv"] = {"Danu"},
	["dnw"] = {"Western Dani"},
	["dny"] = {"Dení"},
	["doa"] = {"Dom"},
	["dob"] = {"Dobu"},
	["doc"] = {"Northern Dong"},
	["doe"] = {"Doe"},
	["dof"] = {"Domu"},
	["doh"] = {"Dong"},
	["doi"] = {"Dogri (macrolanguage)"},
	["dok"] = {"Dondo"},
	["dol"] = {"Doso"},
	["don"] = {"Toura (Papua New Guinea)"},
	["doo"] = {"Dongo"},
	["dop"] = {"Lukpa"},
	["doq"] = {"Dominican Sign Language"},
	["dor"] = {"Dori'o"},
	["dos"] = {"Dogosé"},
	["dot"] = {"Dass"},
	["dov"] = {"Dombe"},
	["dow"] = {"Doyayo"},
	["dox"] = {"Bussa"},
	["doy"] = {"Dompo"},
	["doz"] = {"Dorze"},
	["dpp"] = {"Papar"},
	["drb"] = {"Dair"},
	["drc"] = {"Minderico"},
	["drd"] = {"Darmiya"},
	["dre"] = {"Dolpo"},
	["drg"] = {"Rungus"},
	["dri"] = {"C'Lela"},
	["drl"] = {"Paakantyi"},
	["drn"] = {"West Damar"},
	["dro"] = {"Daro-Matu Melanau"},
	["drq"] = {"Dura"},
	["drr"] = {"Dororo"},
	["drs"] = {"Gedeo"},
	["drt"] = {"Drents"},
	["dru"] = {"Rukai"},
	["dry"] = {"Darai"},
	["dsb"] = {"Lower Sorbian"},
	["dse"] = {"Dutch Sign Language"},
	["dsh"] = {"Daasanach"},
	["dsi"] = {"Disa"},
	["dsl"] = {"Danish Sign Language"},
	["dsn"] = {"Dusner"},
	["dso"] = {"Desiya"},
	["dsq"] = {"Tadaksahak"},
	["dta"] = {"Daur"},
	["dtb"] = {"Labuk-Kinabatangan Kadazan"},
	["dtd"] = {"Ditidaht"},
	["dth"] = {"Adithinngithigh"},
	["dti"] = {"Ana Tinga Dogon"},
	["dtk"] = {"Tene Kan Dogon"},
	["dtm"] = {"Tomo Kan Dogon"},
	["dtn"] = {"Daatsʼíin"},
	["dto"] = {"Tommo So Dogon"},
	["dtp"] = {"Central Dusun", "Kadazan Dusun"},
	["dtr"] = {"Lotud"},
	["dts"] = {"Toro So Dogon"},
	["dtt"] = {"Toro Tegu Dogon"},
	["dtu"] = {"Tebul Ure Dogon"},
	["dty"] = {"Dotyali"},
	["dua"] = {"Duala"},
	["dub"] = {"Dubli"},
	["duc"] = {"Duna"},
	["due"] = {"Umiray Dumaget Agta"},
	["duf"] = {"Drubea", "Dumbea"},
	["dug"] = {"Chiduruma", "Duruma"},
	["duh"] = {"Dungra Bhil"},
	["dui"] = {"Dumun"},
	["duk"] = {"Uyajitaya"},
	["dul"] = {"Alabat Island Agta"},
	["dum"] = {"Middle Dutch (ca. 1050-1350)"},
	["dun"] = {"Dusun Deyah"},
	["duo"] = {"Dupaninan Agta"},
	["dup"] = {"Duano"},
	["duq"] = {"Dusun Malang"},
	["dur"] = {"Dii"},
	["dus"] = {"Dumi"},
	["duu"] = {"Drung"},
	["duv"] = {"Duvle"},
	["duw"] = {"Dusun Witu"},
	["dux"] = {"Duungooma"},
	["duy"] = {"Dicamay Agta"},
	["duz"] = {"Duli-Gey"},
	["dva"] = {"Duau"},
	["dwa"] = {"Diri"},
	["dwr"] = {"Dawro"},
	["dws"] = {"Dutton World Speedwords"},
	["dwu"] = {"Dhuwal"},
	["dww"] = {"Dawawa"},
	["dwy"] = {"Dhuwaya"},
	["dwz"] = {"Dewas Rai"},
	["dya"] = {"Dyan"},
	["dyb"] = {"Dyaberdyaber"},
	["dyd"] = {"Dyugun"},
	["dyg"] = {"Villa Viciosa Agta"},
	["dyi"] = {"Djimini Senoufo"},
	["dym"] = {"Yanda Dom Dogon"},
	["dyn"] = {"Dhanggatti", "Dyangadi"},
	["dyo"] = {"Jola-Fonyi"},
	["dyu"] = {"Dyula"},
	["dyy"] = {"Djabugay", "Dyaabugay"},
	["dza"] = {"Tunzu"},
	["dze"] = {"Djiwarli"},
	["dzg"] = {"Dazaga"},
	["dzl"] = {"Dzalakha"},
	["dzn"] = {"Dzando"},
	["dzo"] = {"Dzongkha"},
	["eaa"] = {"Karenggapa"},
	["ebg"] = {"Ebughu"},
	["ebk"] = {"Eastern Bontok"},
	["ebo"] = {"Teke-Ebo"},
	["ebr"] = {"Ebrié"},
	["ebu"] = {"Embu", "Kiembu"},
	["ecr"] = {"Eteocretan"},
	["ecs"] = {"Ecuadorian Sign Language"},
	["ecy"] = {"Eteocypriot"},
	["eee"] = {"E"},
	["efa"] = {"Efai"},
	["efe"] = {"Efe"},
	["efi"] = {"Efik"},
	["ega"] = {"Ega"},
	["egl"] = {"Emilian"},
	["ego"] = {"Eggon"},
	["egy"] = {"Egyptian (Ancient)"},
	["ehu"] = {"Ehueun"},
	["eip"] = {"Eipomek"},
	["eit"] = {"Eitiep"},
	["eiv"] = {"Askopan"},
	["eja"] = {"Ejamat"},
	["eka"] = {"Ekajuk"},
	["ekc"] = {"Eastern Karnic"},
	["eke"] = {"Ekit"},
	["ekg"] = {"Ekari"},
	["eki"] = {"Eki"},
	["ekk"] = {"Standard Estonian"},
	["ekl"] = {"Kol", "Kol (Bangladesh)"},
	["ekm"] = {"Elip"},
	["eko"] = {"Koti"},
	["ekp"] = {"Ekpeye"},
	["ekr"] = {"Yace"},
	["eky"] = {"Eastern Kayah"},
	["ele"] = {"Elepi"},
	["elh"] = {"El Hugeirat"},
	["eli"] = {"Nding"},
	["elk"] = {"Elkei"},
	["ell"] = {"Modern Greek (1453-)"},
	["elm"] = {"Eleme"},
	["elo"] = {"El Molo"},
	["elu"] = {"Elu"},
	["elx"] = {"Elamite"},
	["ema"] = {"Emai-Iuleha-Ora"},
	["emb"] = {"Embaloh"},
	["eme"] = {"Emerillon"},
	["emg"] = {"Eastern Meohang"},
	["emi"] = {"Mussau-Emira"},
	["emk"] = {"Eastern Maninkakan"},
	["emm"] = {"Mamulique"},
	["emn"] = {"Eman"},
	["emp"] = {"Northern Emberá"},
	["ems"] = {"Pacific Gulf Yupik"},
	["emu"] = {"Eastern Muria"},
	["emw"] = {"Emplawas"},
	["emx"] = {"Erromintxela"},
	["emy"] = {"Epigraphic Mayan"},
	["ena"] = {"Apali"},
	["enb"] = {"Markweeta"},
	["enc"] = {"En"},
	["end"] = {"Ende"},
	["enf"] = {"Forest Enets"},
	["eng"] = {"English"},
	["enh"] = {"Tundra Enets"},
	["enl"] = {"Enlhet"},
	["enm"] = {"Middle English (1100-1500)"},
	["enn"] = {"Engenni"},
	["eno"] = {"Enggano"},
	["enq"] = {"Enga"},
	["enr"] = {"Emem", "Emumu"},
	["enu"] = {"Enu"},
	["env"] = {"Enwan (Edu State)"},
	["enw"] = {"Enwan (Akwa Ibom State)"},
	["enx"] = {"Enxet"},
	["eot"] = {"Beti (Côte d'Ivoire)"},
	["epi"] = {"Epie"},
	["epo"] = {"Esperanto"},
	["era"] = {"Eravallan"},
	["erg"] = {"Sie"},
	["erh"] = {"Eruwa"},
	["eri"] = {"Ogea"},
	["erk"] = {"South Efate"},
	["ero"] = {"Horpa"},
	["err"] = {"Erre"},
	["ers"] = {"Ersu"},
	["ert"] = {"Eritai"},
	["erw"] = {"Erokwanas"},
	["ese"] = {"Ese Ejja"},
	["esg"] = {"Aheri Gondi"},
	["esh"] = {"Eshtehardi"},
	["esi"] = {"North Alaskan Inupiatun"},
	["esk"] = {"Northwest Alaska Inupiatun"},
	["esl"] = {"Egypt Sign Language"},
	["esm"] = {"Esuma"},
	["esn"] = {"Salvadoran Sign Language"},
	["eso"] = {"Estonian Sign Language"},
	["esq"] = {"Esselen"},
	["ess"] = {"Central Siberian Yupik"},
	["est"] = {"Estonian"},
	["esu"] = {"Central Yupik"},
	["esy"] = {"Eskayan"},
	["etb"] = {"Etebi"},
	["etc"] = {"Etchemin"},
	["eth"] = {"Ethiopian Sign Language"},
	["etn"] = {"Eton (Vanuatu)"},
	["eto"] = {"Eton (Cameroon)"},
	["etr"] = {"Edolo"},
	["ets"] = {"Yekhee"},
	["ett"] = {"Etruscan"},
	["etu"] = {"Ejagham"},
	["etx"] = {"Eten"},
	["etz"] = {"Semimi"},
	["eus"] = {"Basque"},
	["eve"] = {"Even"},
	["evh"] = {"Uvbie"},
	["evn"] = {"Evenki"},
	["ewe"] = {"Ewe"},
	["ewo"] = {"Ewondo"},
	["ext"] = {"Extremaduran"},
	["eya"] = {"Eyak"},
	["eyo"] = {"Keiyo"},
	["eza"] = {"Ezaa"},
	["eze"] = {"Uzekwe"},
	["faa"] = {"Fasu"},
	["fab"] = {"Fa d'Ambu"},
	["fad"] = {"Wagi"},
	["faf"] = {"Fagani"},
	["fag"] = {"Finongan"},
	["fah"] = {"Baissa Fali"},
	["fai"] = {"Faiwol"},
	["faj"] = {"Faita"},
	["fak"] = {"Fang (Cameroon)"},
	["fal"] = {"South Fali"},
	["fam"] = {"Fam"},
	["fan"] = {"Fang (Equatorial Guinea)"},
	["fao"] = {"Faroese"},
	["fap"] = {"Paloor"},
	["far"] = {"Fataleka"},
	["fas"] = {"Persian"},
	["fat"] = {"Fanti"},
	["fau"] = {"Fayu"},
	["fax"] = {"Fala"},
	["fay"] = {"Southwestern Fars"},
	["faz"] = {"Northwestern Fars"},
	["fbl"] = {"West Albay Bikol"},
	["fcs"] = {"Quebec Sign Language"},
	["fer"] = {"Feroge"},
	["ffi"] = {"Foia Foia"},
	["ffm"] = {"Maasina Fulfulde"},
	["fgr"] = {"Fongoro"},
	["fia"] = {"Nobiin"},
	["fie"] = {"Fyer"},
	["fij"] = {"Fijian"},
	["fil"] = {"Filipino", "Pilipino"},
	["fin"] = {"Finnish"},
	["fip"] = {"Fipa"},
	["fir"] = {"Firan"},
	["fit"] = {"Tornedalen Finnish"},
	["fiw"] = {"Fiwaga"},
	["fkk"] = {"Kirya-Konzəl"},
	["fkv"] = {"Kven Finnish"},
	["fla"] = {"Kalispel-Pend d'Oreille"},
	["flh"] = {"Foau"},
	["fli"] = {"Fali"},
	["fll"] = {"North Fali"},
	["fln"] = {"Flinders Island"},
	["flr"] = {"Fuliiru"},
	["fly"] = {"Flaaitaal", "Tsotsitaal"},
	["fmp"] = {"Fe'fe'"},
	["fmu"] = {"Far Western Muria"},
	["fnb"] = {"Fanbak"},
	["fng"] = {"Fanagalo"},
	["fni"] = {"Fania"},
	["fod"] = {"Foodo"},
	["foi"] = {"Foi"},
	["fom"] = {"Foma"},
	["fon"] = {"Fon"},
	["for"] = {"Fore"},
	["fos"] = {"Siraya"},
	["fpe"] = {"Fernando Po Creole English"},
	["fqs"] = {"Fas"},
	["fra"] = {"French"},
	["frc"] = {"Cajun French"},
	["frd"] = {"Fordata"},
	["frk"] = {"Frankish"},
	["frm"] = {"Middle French (ca. 1400-1600)"},
	["fro"] = {"Old French (842-ca. 1400)"},
	["frp"] = {"Arpitan", "Francoprovençal"},
	["frq"] = {"Forak"},
	["frr"] = {"Northern Frisian"},
	["frs"] = {"Eastern Frisian"},
	["frt"] = {"Fortsenal"},
	["fry"] = {"Western Frisian"},
	["fse"] = {"Finnish Sign Language"},
	["fsl"] = {"French Sign Language"},
	["fss"] = {"finlandssvenskt teckenspråk", "Finland-Swedish Sign Language", "suomenruotsalainen viittomakieli"},
	["fub"] = {"Adamawa Fulfulde"},
	["fuc"] = {"Pulaar"},
	["fud"] = {"East Futuna"},
	["fue"] = {"Borgu Fulfulde"},
	["fuf"] = {"Pular"},
	["fuh"] = {"Western Niger Fulfulde"},
	["fui"] = {"Bagirmi Fulfulde"},
	["fuj"] = {"Ko"},
	["ful"] = {"Fulah"},
	["fum"] = {"Fum"},
	["fun"] = {"Fulniô"},
	["fuq"] = {"Central-Eastern Niger Fulfulde"},
	["fur"] = {"Friulian"},
	["fut"] = {"Futuna-Aniwa"},
	["fuu"] = {"Furu"},
	["fuv"] = {"Nigerian Fulfulde"},
	["fuy"] = {"Fuyug"},
	["fvr"] = {"Fur"},
	["fwa"] = {"Fwâi"},
	["fwe"] = {"Fwe"},
	["gaa"] = {"Ga"},
	["gab"] = {"Gabri"},
	["gac"] = {"Mixed Great Andamanese"},
	["gad"] = {"Gaddang"},
	["gae"] = {"Guarequena"},
	["gaf"] = {"Gende"},
	["gag"] = {"Gagauz"},
	["gah"] = {"Alekano"},
	["gai"] = {"Borei"},
	["gaj"] = {"Gadsup"},
	["gak"] = {"Gamkonora"},
	["gal"] = {"Galolen"},
	["gam"] = {"Kandawo"},
	["gan"] = {"Gan Chinese"},
	["gao"] = {"Gants"},
	["gap"] = {"Gal"},
	["gaq"] = {"Gata'"},
	["gar"] = {"Galeya"},
	["gas"] = {"Adiwasi Garasia"},
	["gat"] = {"Kenati"},
	["gau"] = {"Mudhili Gadaba"},
	["gaw"] = {"Nobonob"},
	["gax"] = {"Borana-Arsi-Guji Oromo"},
	["gay"] = {"Gayo"},
	["gaz"] = {"West Central Oromo"},
	["gba"] = {"Gbaya (Central African Republic)"},
	["gbb"] = {"Kaytetye"},
	["gbd"] = {"Karajarri"},
	["gbe"] = {"Niksek"},
	["gbf"] = {"Gaikundi"},
	["gbg"] = {"Gbanziri"},
	["gbh"] = {"Defi Gbe"},
	["gbi"] = {"Galela"},
	["gbj"] = {"Bodo Gadaba"},
	["gbk"] = {"Gaddi"},
	["gbl"] = {"Gamit"},
	["gbm"] = {"Garhwali"},
	["gbn"] = {"Mo'da"},
	["gbo"] = {"Northern Grebo"},
	["gbp"] = {"Gbaya-Bossangoa"},
	["gbq"] = {"Gbaya-Bozoum"},
	["gbr"] = {"Gbagyi"},
	["gbs"] = {"Gbesi Gbe"},
	["gbu"] = {"Gagadu"},
	["gbv"] = {"Gbanu"},
	["gbw"] = {"Gabi-Gabi"},
	["gbx"] = {"Eastern Xwla Gbe"},
	["gby"] = {"Gbari"},
	["gbz"] = {"Zoroastrian Dari"},
	["gcc"] = {"Mali"},
	["gcd"] = {"Ganggalida"},
	["gce"] = {"Galice"},
	["gcf"] = {"Guadeloupean Creole French"},
	["gcl"] = {"Grenadian Creole English"},
	["gcn"] = {"Gaina"},
	["gcr"] = {"Guianese Creole French"},
	["gct"] = {"Colonia Tovar German"},
	["gda"] = {"Gade Lohar"},
	["gdb"] = {"Pottangi Ollar Gadaba"},
	["gdc"] = {"Gugu Badhun"},
	["gdd"] = {"Gedaged"},
	["gde"] = {"Gude"},
	["gdf"] = {"Guduf-Gava"},
	["gdg"] = {"Ga'dang"},
	["gdh"] = {"Gadjerawang"},
	["gdi"] = {"Gundi"},
	["gdj"] = {"Gurdjar"},
	["gdk"] = {"Gadang"},
	["gdl"] = {"Dirasha"},
	["gdm"] = {"Laal"},
	["gdn"] = {"Umanakaina"},
	["gdo"] = {"Ghodoberi"},
	["gdq"] = {"Mehri"},
	["gdr"] = {"Wipi"},
	["gds"] = {"Ghandruk Sign Language"},
	["gdt"] = {"Kungardutyi"},
	["gdu"] = {"Gudu"},
	["gdx"] = {"Godwari"},
	["gea"] = {"Geruma"},
	["geb"] = {"Kire"},
	["gec"] = {"Gboloo Grebo"},
	["ged"] = {"Gade"},
	["geg"] = {"Gengle"},
	["geh"] = {"Hutterisch", "Hutterite German"},
	["gei"] = {"Gebe"},
	["gej"] = {"Gen"},
	["gek"] = {"Ywom"},
	["gel"] = {"ut-Ma'in"},
	["geq"] = {"Geme"},
	["ges"] = {"Geser-Gorom"},
	["gev"] = {"Eviya"},
	["gew"] = {"Gera"},
	["gex"] = {"Garre"},
	["gey"] = {"Enya"},
	["gez"] = {"Geez"},
	["gfk"] = {"Patpatar"},
	["gft"] = {"Gafat"},
	["gga"] = {"Gao"},
	["ggb"] = {"Gbii"},
	["ggd"] = {"Gugadj"},
	["gge"] = {"Gurr-goni"},
	["ggg"] = {"Gurgula"},
	["ggk"] = {"Kungarakany"},
	["ggl"] = {"Ganglau"},
	["ggt"] = {"Gitua"},
	["ggu"] = {"Gagu", "Gban"},
	["ggw"] = {"Gogodala"},
	["gha"] = {"Ghadamès"},
	["ghc"] = {"Hiberno-Scottish Gaelic"},
	["ghe"] = {"Southern Ghale"},
	["ghh"] = {"Northern Ghale"},
	["ghk"] = {"Geko Karen"},
	["ghl"] = {"Ghulfan"},
	["ghn"] = {"Ghanongga"},
	["gho"] = {"Ghomara"},
	["ghr"] = {"Ghera"},
	["ghs"] = {"Guhu-Samane"},
	["ght"] = {"Kuke", "Kutang Ghale"},
	["gia"] = {"Kija"},
	["gib"] = {"Gibanawa"},
	["gic"] = {"Gail"},
	["gid"] = {"Gidar"},
	["gie"] = {"Gaɓogbo", "Guébie"},
	["gig"] = {"Goaria"},
	["gih"] = {"Githabul"},
	["gil"] = {"Gilbertese"},
	["gim"] = {"Gimi (Eastern Highlands)"},
	["gin"] = {"Hinukh"},
	["gip"] = {"Gimi (West New Britain)"},
	["giq"] = {"Green Gelao"},
	["gir"] = {"Red Gelao"},
	["gis"] = {"North Giziga"},
	["git"] = {"Gitxsan"},
	["giu"] = {"Mulao"},
	["giw"] = {"White Gelao"},
	["gix"] = {"Gilima"},
	["giy"] = {"Giyug"},
	["giz"] = {"South Giziga"},
	["gji"] = {"Geji"},
	["gjk"] = {"Kachi Koli"},
	["gjm"] = {"Gunditjmara"},
	["gjn"] = {"Gonja"},
	["gjr"] = {"Gurindji Kriol"},
	["gju"] = {"Gujari"},
	["gka"] = {"Guya"},
	["gkd"] = {"Magɨ (Madang Province)"},
	["gke"] = {"Ndai"},
	["gkn"] = {"Gokana"},
	["gko"] = {"Kok-Nar"},
	["gkp"] = {"Guinea Kpelle"},
	["gku"] = {"ǂUngkue"},
	["gla"] = {"Gaelic", "Scottish Gaelic"},
	["glc"] = {"Bon Gula"},
	["gld"] = {"Nanai"},
	["gle"] = {"Irish"},
	["glg"] = {"Galician"},
	["glh"] = {"Northwest Pashai", "Northwest Pashayi"},
	["gli"] = {"Guliguli"},
	["glj"] = {"Gula Iro"},
	["glk"] = {"Gilaki"},
	["gll"] = {"Garlali"},
	["glo"] = {"Galambu"},
	["glr"] = {"Glaro-Twabo"},
	["glu"] = {"Gula (Chad)"},
	["glv"] = {"Manx"},
	["glw"] = {"Glavda"},
	["gly"] = {"Gule"},
	["gma"] = {"Gambera"},
	["gmb"] = {"Gula'alaa"},
	["gmd"] = {"Mághdì"},
	["gmg"] = {"Magɨyi"},
	["gmh"] = {"Middle High German (ca. 1050-1500)"},
	["gml"] = {"Middle Low German"},
	["gmm"] = {"Gbaya-Mbodomo"},
	["gmn"] = {"Gimnime"},
	["gmu"] = {"Gumalu"},
	["gmv"] = {"Gamo"},
	["gmx"] = {"Magoma"},
	["gmy"] = {"Mycenaean Greek"},
	["gmz"] = {"Mgbolizhia"},
	["gna"] = {"Kaansa"},
	["gnb"] = {"Gangte"},
	["gnc"] = {"Guanche"},
	["gnd"] = {"Zulgo-Gemzek"},
	["gne"] = {"Ganang"},
	["gng"] = {"Ngangam"},
	["gnh"] = {"Lere"},
	["gni"] = {"Gooniyandi"},
	["gnj"] = {"Ngen"},
	["gnk"] = {"ǁGana"},
	["gnl"] = {"Gangulu"},
	["gnm"] = {"Ginuman"},
	["gnn"] = {"Gumatj"},
	["gno"] = {"Northern Gondi"},
	["gnq"] = {"Gana"},
	["gnr"] = {"Gureng Gureng"},
	["gnt"] = {"Guntai"},
	["gnu"] = {"Gnau"},
	["gnw"] = {"Western Bolivian Guaraní"},
	["gnz"] = {"Ganzi"},
	["goa"] = {"Guro"},
	["gob"] = {"Playero"},
	["goc"] = {"Gorakor"},
	["god"] = {"Godié"},
	["goe"] = {"Gongduk"},
	["gof"] = {"Gofa"},
	["gog"] = {"Gogo"},
	["goh"] = {"Old High German (ca. 750-1050)"},
	["goi"] = {"Gobasi"},
	["goj"] = {"Gowlan"},
	["gok"] = {"Gowli"},
	["gol"] = {"Gola"},
	["gom"] = {"Goan Konkani"},
	["gon"] = {"Gondi"},
	["goo"] = {"Gone Dau"},
	["gop"] = {"Yeretuar"},
	["goq"] = {"Gorap"},
	["gor"] = {"Gorontalo"},
	["gos"] = {"Gronings"},
	["got"] = {"Gothic"},
	["gou"] = {"Gavar"},
	["gow"] = {"Gorowa"},
	["gox"] = {"Gobu"},
	["goy"] = {"Goundo"},
	["goz"] = {"Gozarkhani"},
	["gpa"] = {"Gupa-Abawa"},
	["gpe"] = {"Ghanaian Pidgin English"},
	["gpn"] = {"Taiap"},
	["gqa"] = {"Ga'anda"},
	["gqi"] = {"Guiqiong"},
	["gqn"] = {"Guana (Brazil)"},
	["gqr"] = {"Gor"},
	["gqu"] = {"Qau"},
	["gra"] = {"Rajput Garasia"},
	["grb"] = {"Grebo"},
	["grc"] = {"Ancient Greek (to 1453)"},
	["grd"] = {"Guruntum-Mbaaru"},
	["grg"] = {"Madi"},
	["grh"] = {"Gbiri-Niragu"},
	["gri"] = {"Ghari"},
	["grj"] = {"Southern Grebo"},
	["grm"] = {"Kota Marudu Talantang"},
	["grn"] = {"Guarani"},
	["gro"] = {"Groma"},
	["grq"] = {"Gorovu"},
	["grr"] = {"Taznatit"},
	["grs"] = {"Gresi"},
	["grt"] = {"Garo"},
	["gru"] = {"Kistane"},
	["grv"] = {"Central Grebo"},
	["grw"] = {"Gweda"},
	["grx"] = {"Guriaso"},
	["gry"] = {"Barclayville Grebo"},
	["grz"] = {"Guramalum"},
	["gse"] = {"Ghanaian Sign Language"},
	["gsg"] = {"German Sign Language"},
	["gsl"] = {"Gusilay"},
	["gsm"] = {"Guatemalan Sign Language"},
	["gsn"] = {"Gusan", "Nema"},
	["gso"] = {"Southwest Gbaya"},
	["gsp"] = {"Wasembo"},
	["gss"] = {"Greek Sign Language"},
	["gsw"] = {"Alemannic", "Alsatian", "Swiss German"},
	["gta"] = {"Guató"},
	["gtu"] = {"Aghu-Tharnggala"},
	["gua"] = {"Shiki"},
	["gub"] = {"Guajajára"},
	["guc"] = {"Wayuu"},
	["gud"] = {"Yocoboué Dida"},
	["gue"] = {"Gurindji"},
	["guf"] = {"Gupapuyngu"},
	["gug"] = {"Paraguayan Guaraní"},
	["guh"] = {"Guahibo"},
	["gui"] = {"Eastern Bolivian Guaraní"},
	["guj"] = {"Gujarati"},
	["guk"] = {"Gumuz"},
	["gul"] = {"Sea Island Creole English"},
	["gum"] = {"Guambiano"},
	["gun"] = {"Mbyá Guaraní"},
	["guo"] = {"Guayabero"},
	["gup"] = {"Gunwinggu"},
	["guq"] = {"Aché"},
	["gur"] = {"Farefare"},
	["gus"] = {"Guinean Sign Language"},
	["gut"] = {"Maléku Jaíka"},
	["guu"] = {"Yanomamö"},
	["guw"] = {"Gun"},
	["gux"] = {"Gourmanchéma"},
	["guz"] = {"Ekegusii", "Gusii"},
	["gva"] = {"Guana (Paraguay)"},
	["gvc"] = {"Guanano"},
	["gve"] = {"Duwet"},
	["gvf"] = {"Golin"},
	["gvj"] = {"Guajá"},
	["gvl"] = {"Gulay"},
	["gvm"] = {"Gurmana"},
	["gvn"] = {"Kuku-Yalanji"},
	["gvo"] = {"Gavião Do Jiparaná"},
	["gvp"] = {"Pará Gavião"},
	["gvr"] = {"Gurung"},
	["gvs"] = {"Gumawana"},
	["gvy"] = {"Guyani"},
	["gwa"] = {"Mbato"},
	["gwb"] = {"Gwa"},
	["gwc"] = {"Kalami"},
	["gwd"] = {"Gawwada"},
	["gwe"] = {"Gweno"},
	["gwf"] = {"Gowro"},
	["gwg"] = {"Moo"},
	["gwi"] = {"Gwichʼin"},
	["gwj"] = {"ǀGwi"},
	["gwm"] = {"Awngthim"},
	["gwn"] = {"Gwandara"},
	["gwr"] = {"Gwere"},
	["gwt"] = {"Gawar-Bati"},
	["gwu"] = {"Guwamu"},
	["gww"] = {"Kwini"},
	["gwx"] = {"Gua"},
	["gxx"] = {"Wè Southern"},
	["gya"] = {"Northwest Gbaya"},
	["gyb"] = {"Garus"},
	["gyd"] = {"Kayardild"},
	["gye"] = {"Gyem"},
	["gyf"] = {"Gungabula"},
	["gyg"] = {"Gbayi"},
	["gyi"] = {"Gyele"},
	["gyl"] = {"Gayil"},
	["gym"] = {"Ngäbere"},
	["gyn"] = {"Guyanese Creole English"},
	["gyo"] = {"Gyalsumdo"},
	["gyr"] = {"Guarayu"},
	["gyy"] = {"Gunya"},
	["gza"] = {"Ganza"},
	["gzi"] = {"Gazi"},
	["gzn"] = {"Gane"},
	["haa"] = {"Han"},
	["hab"] = {"Hanoi Sign Language"},
	["hac"] = {"Gurani"},
	["had"] = {"Hatam"},
	["hae"] = {"Eastern Oromo"},
	["haf"] = {"Haiphong Sign Language"},
	["hag"] = {"Hanga"},
	["hah"] = {"Hahon"},
	["hai"] = {"Haida"},
	["haj"] = {"Hajong"},
	["hak"] = {"Hakka Chinese"},
	["hal"] = {"Halang"},
	["ham"] = {"Hewa"},
	["han"] = {"Hangaza"},
	["hao"] = {"Hakö"},
	["hap"] = {"Hupla"},
	["haq"] = {"Ha"},
	["har"] = {"Harari"},
	["has"] = {"Haisla"},
	["hat"] = {"Haitian", "Haitian Creole"},
	["hau"] = {"Hausa"},
	["hav"] = {"Havu"},
	["haw"] = {"Hawaiian"},
	["hax"] = {"Southern Haida"},
	["hay"] = {"Haya"},
	["haz"] = {"Hazaragi"},
	["hba"] = {"Hamba"},
	["hbb"] = {"Huba"},
	["hbn"] = {"Heiban"},
	["hbo"] = {"Ancient Hebrew"},
	["hbs"] = {"Serbo-Croatian"},
	["hbu"] = {"Habu"},
	["hca"] = {"Andaman Creole Hindi"},
	["hch"] = {"Huichol"},
	["hdn"] = {"Northern Haida"},
	["hds"] = {"Honduras Sign Language"},
	["hdy"] = {"Hadiyya"},
	["hea"] = {"Northern Qiandong Miao"},
	["heb"] = {"Hebrew"},
	["hed"] = {"Herdé"},
	["heg"] = {"Helong"},
	["heh"] = {"Hehe"},
	["hei"] = {"Heiltsuk"},
	["hem"] = {"Hemba"},
	["her"] = {"Herero"},
	["hgm"] = {"Haiǁom"},
	["hgw"] = {"Haigwai"},
	["hhi"] = {"Hoia Hoia"},
	["hhr"] = {"Kerak"},
	["hhy"] = {"Hoyahoya"},
	["hia"] = {"Lamang"},
	["hib"] = {"Hibito"},
	["hid"] = {"Hidatsa"},
	["hif"] = {"Fiji Hindi"},
	["hig"] = {"Kamwe"},
	["hih"] = {"Pamosu"},
	["hii"] = {"Hinduri"},
	["hij"] = {"Hijuk"},
	["hik"] = {"Seit-Kaitetu"},
	["hil"] = {"Hiligaynon"},
	["hin"] = {"Hindi"},
	["hio"] = {"Tsoa"},
	["hir"] = {"Himarimã"},
	["hit"] = {"Hittite"},
	["hiw"] = {"Hiw"},
	["hix"] = {"Hixkaryána"},
	["hji"] = {"Haji"},
	["hka"] = {"Kahe"},
	["hke"] = {"Hunde"},
	["hkk"] = {"Hunjara-Kaina Ke"},
	["hkn"] = {"Mel-Khaonh"},
	["hks"] = {"Heung Kong Sau Yue", "Hong Kong Sign Language"},
	["hla"] = {"Halia"},
	["hlb"] = {"Halbi"},
	["hld"] = {"Halang Doan"},
	["hle"] = {"Hlersu"},
	["hlt"] = {"Matu Chin"},
	["hlu"] = {"Hieroglyphic Luwian"},
	["hma"] = {"Southern Mashan Hmong", "Southern Mashan Miao"},
	["hmb"] = {"Humburi Senni Songhay"},
	["hmc"] = {"Central Huishui Hmong", "Central Huishui Miao"},
	["hmd"] = {"A-hmaos", "Da-Hua Miao", "Large Flowery Miao"},
	["hme"] = {"Eastern Huishui Hmong", "Eastern Huishui Miao"},
	["hmf"] = {"Hmong Don"},
	["hmg"] = {"Southwestern Guiyang Hmong"},
	["hmh"] = {"Southwestern Huishui Hmong", "Southwestern Huishui Miao"},
	["hmi"] = {"Northern Huishui Hmong", "Northern Huishui Miao"},
	["hmj"] = {"Ge", "Gejia"},
	["hmk"] = {"Maek"},
	["hml"] = {"Luopohe Hmong", "Luopohe Miao"},
	["hmm"] = {"Central Mashan Hmong", "Central Mashan Miao"},
	["hmn"] = {"Hmong", "Mong"},
	["hmo"] = {"Hiri Motu"},
	["hmp"] = {"Northern Mashan Hmong", "Northern Mashan Miao"},
	["hmq"] = {"Eastern Qiandong Miao"},
	["hmr"] = {"Hmar"},
	["hms"] = {"Southern Qiandong Miao"},
	["hmt"] = {"Hamtai"},
	["hmu"] = {"Hamap"},
	["hmv"] = {"Hmong Dô"},
	["hmw"] = {"Western Mashan Hmong", "Western Mashan Miao"},
	["hmy"] = {"Southern Guiyang Hmong", "Southern Guiyang Miao"},
	["hmz"] = {"Hmong Shua", "Sinicized Miao"},
	["hna"] = {"Mina (Cameroon)"},
	["hnd"] = {"Southern Hindko"},
	["hne"] = {"Chhattisgarhi"},
	["hnh"] = {"ǁAni"},
	["hni"] = {"Hani"},
	["hnj"] = {"Hmong Njua", "Mong Leng", "Mong Njua"},
	["hnn"] = {"Hanunoo"},
	["hno"] = {"Northern Hindko"},
	["hns"] = {"Caribbean Hindustani"},
	["hnu"] = {"Hung"},
	["hoa"] = {"Hoava"},
	["hob"] = {"Mari (Madang Province)"},
	["hoc"] = {"Ho"},
	["hod"] = {"Holma"},
	["hoe"] = {"Horom"},
	["hoh"] = {"Hobyót"},
	["hoi"] = {"Holikachuk"},
	["hoj"] = {"Hadothi", "Haroti"},
	["hol"] = {"Holu"},
	["hom"] = {"Homa"},
	["hoo"] = {"Holoholo"},
	["hop"] = {"Hopi"},
	["hor"] = {"Horo"},
	["hos"] = {"Ho Chi Minh City Sign Language"},
	["hot"] = {"Hote", "Malê"},
	["hov"] = {"Hovongan"},
	["how"] = {"Honi"},
	["hoy"] = {"Holiya"},
	["hoz"] = {"Hozo"},
	["hpo"] = {"Hpon"},
	["hps"] = {"Hawai'i Pidgin Sign Language", "Hawai'i Sign Language (HSL)"},
	["hra"] = {"Hrangkhol"},
	["hrc"] = {"Niwer Mil"},
	["hre"] = {"Hre"},
	["hrk"] = {"Haruku"},
	["hrm"] = {"Horned Miao"},
	["hro"] = {"Haroi"},
	["hrp"] = {"Nhirrpi"},
	["hrt"] = {"Hértevin"},
	["hru"] = {"Hruso"},
	["hrv"] = {"Croatian"},
	["hrw"] = {"Warwar Feni"},
	["hrx"] = {"Hunsrik"},
	["hrz"] = {"Harzani"},
	["hsb"] = {"Upper Sorbian"},
	["hsh"] = {"Hungarian Sign Language"},
	["hsl"] = {"Hausa Sign Language"},
	["hsn"] = {"Xiang Chinese"},
	["hss"] = {"Harsusi"},
	["hti"] = {"Hoti"},
	["hto"] = {"Minica Huitoto"},
	["hts"] = {"Hadza"},
	["htu"] = {"Hitu"},
	["htx"] = {"Middle Hittite"},
	["hub"] = {"Huambisa"},
	["huc"] = {"ǂHua"},
	["hud"] = {"Huaulu"},
	["hue"] = {"San Francisco Del Mar Huave"},
	["huf"] = {"Humene"},
	["hug"] = {"Huachipaeri"},
	["huh"] = {"Huilliche"},
	["hui"] = {"Huli"},
	["huj"] = {"Northern Guiyang Hmong", "Northern Guiyang Miao"},
	["huk"] = {"Hulung"},
	["hul"] = {"Hula"},
	["hum"] = {"Hungana"},
	["hun"] = {"Hungarian"},
	["huo"] = {"Hu"},
	["hup"] = {"Hupa"},
	["huq"] = {"Tsat"},
	["hur"] = {"Halkomelem"},
	["hus"] = {"Huastec"},
	["hut"] = {"Humla"},
	["huu"] = {"Murui Huitoto"},
	["huv"] = {"San Mateo Del Mar Huave"},
	["huw"] = {"Hukumina"},
	["hux"] = {"Nüpode Huitoto"},
	["huy"] = {"Hulaulá"},
	["huz"] = {"Hunzib"},
	["hvc"] = {"Haitian Vodoun Culture Language"},
	["hve"] = {"San Dionisio Del Mar Huave"},
	["hvk"] = {"Haveke"},
	["hvn"] = {"Sabu"},
	["hvv"] = {"Santa María Del Mar Huave"},
	["hwa"] = {"Wané"},
	["hwc"] = {"Hawai'i Creole English", "Hawai'i Pidgin"},
	["hwo"] = {"Hwana"},
	["hya"] = {"Hya"},
	["hye"] = {"Armenian"},
	["hyw"] = {"Western Armenian"},
	["iai"] = {"Iaai"},
	["ian"] = {"Iatmul"},
	["iar"] = {"Purari"},
	["iba"] = {"Iban"},
	["ibb"] = {"Ibibio"},
	["ibd"] = {"Iwaidja"},
	["ibe"] = {"Akpes"},
	["ibg"] = {"Ibanag"},
	["ibh"] = {"Bih"},
	["ibl"] = {"Ibaloi"},
	["ibm"] = {"Agoi"},
	["ibn"] = {"Ibino"},
	["ibo"] = {"Igbo"},
	["ibr"] = {"Ibuoro"},
	["ibu"] = {"Ibu"},
	["iby"] = {"Ibani"},
	["ica"] = {"Ede Ica"},
	["ich"] = {"Etkywan"},
	["icl"] = {"Icelandic Sign Language"},
	["icr"] = {"Islander Creole English"},
	["ida"] = {"Idakho-Isukha-Tiriki", "Luidakho-Luisukha-Lutirichi"},
	["idb"] = {"Indo-Portuguese"},
	["idc"] = {"Ajiya", "Idon"},
	["idd"] = {"Ede Idaca"},
	["ide"] = {"Idere"},
	["idi"] = {"Idi"},
	["ido"] = {"Ido"},
	["idr"] = {"Indri"},
	["ids"] = {"Idesa"},
	["idt"] = {"Idaté"},
	["idu"] = {"Idoma"},
	["ifa"] = {"Amganad Ifugao"},
	["ifb"] = {"Ayangan Ifugao", "Batad Ifugao"},
	["ife"] = {"Ifè"},
	["iff"] = {"Ifo"},
	["ifk"] = {"Tuwali Ifugao"},
	["ifm"] = {"Teke-Fuumu"},
	["ifu"] = {"Mayoyao Ifugao"},
	["ify"] = {"Keley-I Kallahan"},
	["igb"] = {"Ebira"},
	["ige"] = {"Igede"},
	["igg"] = {"Igana"},
	["igl"] = {"Igala"},
	["igm"] = {"Kanggape"},
	["ign"] = {"Ignaciano"},
	["igo"] = {"Isebe"},
	["igs"] = {"Interglossa"},
	["igw"] = {"Igwe"},
	["ihb"] = {"Iha Based Pidgin"},
	["ihi"] = {"Ihievbe"},
	["ihp"] = {"Iha"},
	["ihw"] = {"Bidhawal"},
	["iii"] = {"Nuosu", "Sichuan Yi"},
	["iin"] = {"Thiin"},
	["ijc"] = {"Izon"},
	["ije"] = {"Biseni"},
	["ijj"] = {"Ede Ije"},
	["ijn"] = {"Kalabari"},
	["ijs"] = {"Southeast Ijo"},
	["ike"] = {"Eastern Canadian Inuktitut"},
	["iki"] = {"Iko"},
	["ikk"] = {"Ika"},
	["ikl"] = {"Ikulu"},
	["iko"] = {"Olulumo-Ikom"},
	["ikp"] = {"Ikpeshi"},
	["ikr"] = {"Ikaranggal"},
	["iks"] = {"Inuit Sign Language"},
	["ikt"] = {"Inuinnaqtun", "Western Canadian Inuktitut"},
	["iku"] = {"Inuktitut"},
	["ikv"] = {"Iku-Gora-Ankwa"},
	["ikw"] = {"Ikwere"},
	["ikx"] = {"Ik"},
	["ikz"] = {"Ikizu"},
	["ila"] = {"Ile Ape"},
	["ilb"] = {"Ila"},
	["ile"] = {"Interlingue", "Occidental"},
	["ilg"] = {"Garig-Ilgar"},
	["ili"] = {"Ili Turki"},
	["ilk"] = {"Ilongot"},
	["ilm"] = {"Iranun (Malaysia)"},
	["ilo"] = {"Iloko"},
	["ilp"] = {"Iranun (Philippines)"},
	["ils"] = {"International Sign"},
	["ilu"] = {"Ili'uun"},
	["ilv"] = {"Ilue"},
	["ima"] = {"Mala Malasar"},
	["imi"] = {"Anamgura"},
	["iml"] = {"Miluk"},
	["imn"] = {"Imonda"},
	["imo"] = {"Imbongu"},
	["imr"] = {"Imroing"},
	["ims"] = {"Marsian"},
	["imy"] = {"Milyan"},
	["ina"] = {"Interlingua (International Auxiliary Language Association)"},
	["inb"] = {"Inga"},
	["ind"] = {"Indonesian"},
	["ing"] = {"Degexit'an"},
	["inh"] = {"Ingush"},
	["inj"] = {"Jungle Inga"},
	["inl"] = {"Indonesian Sign Language"},
	["inm"] = {"Minaean"},
	["inn"] = {"Isinai"},
	["ino"] = {"Inoke-Yate"},
	["inp"] = {"Iñapari"},
	["ins"] = {"Indian Sign Language"},
	["int"] = {"Intha"},
	["inz"] = {"Ineseño"},
	["ior"] = {"Inor"},
	["iou"] = {"Tuma-Irumu"},
	["iow"] = {"Iowa-Oto"},
	["ipi"] = {"Ipili"},
	["ipk"] = {"Inupiaq"},
	["ipo"] = {"Ipiko"},
	["iqu"] = {"Iquito"},
	["iqw"] = {"Ikwo"},
	["ire"] = {"Iresim"},
	["irh"] = {"Irarutu"},
	["iri"] = {"Irigwe", "Rigwe"},
	["irk"] = {"Iraqw"},
	["irn"] = {"Irántxe"},
	["irr"] = {"Ir"},
	["iru"] = {"Irula"},
	["irx"] = {"Kamberau"},
	["iry"] = {"Iraya"},
	["isa"] = {"Isabi"},
	["isc"] = {"Isconahua"},
	["isd"] = {"Isnag"},
	["ise"] = {"Italian Sign Language"},
	["isg"] = {"Irish Sign Language"},
	["ish"] = {"Esan"},
	["isi"] = {"Nkem-Nkum"},
	["isk"] = {"Ishkashimi"},
	["isl"] = {"Icelandic"},
	["ism"] = {"Masimasi"},
	["isn"] = {"Isanzu"},
	["iso"] = {"Isoko"},
	["isr"] = {"Israeli Sign Language"},
	["ist"] = {"Istriot"},
	["isu"] = {"Isu (Menchum Division)"},
	["ita"] = {"Italian"},
	["itb"] = {"Binongan Itneg"},
	["itd"] = {"Southern Tidung"},
	["ite"] = {"Itene"},
	["iti"] = {"Inlaod Itneg"},
	["itk"] = {"Judeo-Italian"},
	["itl"] = {"Itelmen"},
	["itm"] = {"Itu Mbon Uzo"},
	["ito"] = {"Itonama"},
	["itr"] = {"Iteri"},
	["its"] = {"Isekiri"},
	["itt"] = {"Maeng Itneg"},
	["itv"] = {"Itawit"},
	["itw"] = {"Ito"},
	["itx"] = {"Itik"},
	["ity"] = {"Moyadan Itneg"},
	["itz"] = {"Itzá"},
	["ium"] = {"Iu Mien"},
	["ivb"] = {"Ibatan"},
	["ivv"] = {"Ivatan"},
	["iwk"] = {"I-Wak"},
	["iwm"] = {"Iwam"},
	["iwo"] = {"Iwur"},
	["iws"] = {"Sepik Iwam"},
	["ixc"] = {"Ixcatec"},
	["ixl"] = {"Ixil"},
	["iya"] = {"Iyayu"},
	["iyo"] = {"Mesaka"},
	["iyx"] = {"Yaka (Congo)"},
	["izh"] = {"Ingrian"},
	["izr"] = {"Izere"},
	["izz"] = {"Izii"},
	["jaa"] = {"Jamamadí"},
	["jab"] = {"Hyam"},
	["jac"] = {"Jakalteko", "Popti'"},
	["jad"] = {"Jahanka"},
	["jae"] = {"Yabem"},
	["jaf"] = {"Jara"},
	["jah"] = {"Jah Hut"},
	["jaj"] = {"Zazao"},
	["jak"] = {"Jakun"},
	["jal"] = {"Yalahatan"},
	["jam"] = {"Jamaican Creole English"},
	["jan"] = {"Jandai"},
	["jao"] = {"Yanyuwa"},
	["jaq"] = {"Yaqay"},
	["jas"] = {"New Caledonian Javanese"},
	["jat"] = {"Jakati"},
	["jau"] = {"Yaur"},
	["jav"] = {"Javanese"},
	["jax"] = {"Jambi Malay"},
	["jay"] = {"Nhangu", "Yan-nhangu"},
	["jaz"] = {"Jawe"},
	["jbe"] = {"Judeo-Berber"},
	["jbi"] = {"Badjiri"},
	["jbj"] = {"Arandai"},
	["jbk"] = {"Barikewa"},
	["jbn"] = {"Nafusi"},
	["jbo"] = {"Lojban"},
	["jbr"] = {"Jofotek-Bromnya"},
	["jbt"] = {"Jabutí"},
	["jbu"] = {"Jukun Takum"},
	["jbw"] = {"Yawijibaya"},
	["jcs"] = {"Jamaican Country Sign Language"},
	["jct"] = {"Krymchak"},
	["jda"] = {"Jad"},
	["jdg"] = {"Jadgali"},
	["jdt"] = {"Judeo-Tat"},
	["jeb"] = {"Jebero"},
	["jee"] = {"Jerung"},
	["jeh"] = {"Jeh"},
	["jei"] = {"Yei"},
	["jek"] = {"Jeri Kuo"},
	["jel"] = {"Yelmek"},
	["jen"] = {"Dza"},
	["jer"] = {"Jere"},
	["jet"] = {"Manem"},
	["jeu"] = {"Jonkor Bourmataguil"},
	["jgb"] = {"Ngbee"},
	["jge"] = {"Judeo-Georgian"},
	["jgk"] = {"Gwak"},
	["jgo"] = {"Ngomba"},
	["jhi"] = {"Jehai"},
	["jhs"] = {"Jhankot Sign Language"},
	["jia"] = {"Jina"},
	["jib"] = {"Jibu"},
	["jic"] = {"Tol"},
	["jid"] = {"Bu"},
	["jie"] = {"Jilbe"},
	["jig"] = {"Djingili", "Jingulu"},
	["jih"] = {"Shangzhai", "sTodsde"},
	["jii"] = {"Jiiddu"},
	["jil"] = {"Jilim"},
	["jim"] = {"Jimi (Cameroon)"},
	["jio"] = {"Jiamao"},
	["jiq"] = {"Guanyinqiao", "Lavrung"},
	["jit"] = {"Jita"},
	["jiu"] = {"Youle Jinuo"},
	["jiv"] = {"Shuar"},
	["jiy"] = {"Buyuan Jinuo"},
	["jje"] = {"Jejueo"},
	["jjr"] = {"Bankal"},
	["jka"] = {"Kaera"},
	["jkm"] = {"Mobwa Karen"},
	["jko"] = {"Kubo"},
	["jkp"] = {"Paku Karen"},
	["jkr"] = {"Koro (India)"},
	["jku"] = {"Labir"},
	["jle"] = {"Ngile"},
	["jls"] = {"Jamaican Sign Language"},
	["jma"] = {"Dima"},
	["jmb"] = {"Zumbun"},
	["jmc"] = {"Machame"},
	["jmd"] = {"Yamdena"},
	["jmi"] = {"Jimi (Nigeria)"},
	["jml"] = {"Jumli"},
	["jmn"] = {"Makuri Naga"},
	["jmr"] = {"Kamara"},
	["jms"] = {"Mashi (Nigeria)"},
	["jmw"] = {"Mouwase"},
	["jmx"] = {"Western Juxtlahuaca Mixtec"},
	["jna"] = {"Jangshung"},
	["jnd"] = {"Jandavra"},
	["jng"] = {"Yangman"},
	["jni"] = {"Janji"},
	["jnj"] = {"Yemsa"},
	["jnl"] = {"Rawat"},
	["jns"] = {"Jaunsari"},
	["job"] = {"Joba"},
	["jod"] = {"Wojenaka"},
	["jog"] = {"Jogi"},
	["jor"] = {"Jorá"},
	["jos"] = {"Jordanian Sign Language"},
	["jow"] = {"Jowulu"},
	["jpa"] = {"Jewish Palestinian Aramaic"},
	["jpn"] = {"Japanese"},
	["jpr"] = {"Judeo-Persian"},
	["jqr"] = {"Jaqaru"},
	["jra"] = {"Jarai"},
	["jrb"] = {"Judeo-Arabic"},
	["jrr"] = {"Jiru"},
	["jrt"] = {"Jorto"},
	["jru"] = {"Japrería"},
	["jsl"] = {"Japanese Sign Language"},
	["jua"] = {"Júma"},
	["jub"] = {"Wannu"},
	["juc"] = {"Jurchen"},
	["jud"] = {"Worodougou"},
	["juh"] = {"Hõne"},
	["jui"] = {"Ngadjuri"},
	["juk"] = {"Wapan"},
	["jul"] = {"Jirel"},
	["jum"] = {"Jumjum"},
	["jun"] = {"Juang"},
	["juo"] = {"Jiba"},
	["jup"] = {"Hupdë"},
	["jur"] = {"Jurúna"},
	["jus"] = {"Jumla Sign Language"},
	["jut"] = {"Jutish"},
	["juu"] = {"Ju"},
	["juw"] = {"Wãpha"},
	["juy"] = {"Juray"},
	["jvd"] = {"Javindo"},
	["jvn"] = {"Caribbean Javanese"},
	["jwi"] = {"Jwira-Pepesa"},
	["jya"] = {"Jiarong"},
	["jye"] = {"Judeo-Yemeni Arabic"},
	["jyy"] = {"Jaya"},
	["kaa"] = {"Kara-Kalpak"},
	["kab"] = {"Kabyle"},
	["kac"] = {"Jingpho", "Kachin"},
	["kad"] = {"Adara"},
	["kae"] = {"Ketangalan"},
	["kaf"] = {"Katso"},
	["kag"] = {"Kajaman"},
	["kah"] = {"Kara (Central African Republic)"},
	["kai"] = {"Karekare"},
	["kaj"] = {"Jju"},
	["kak"] = {"Kalanguya", "Kayapa Kallahan"},
	["kal"] = {"Greenlandic", "Kalaallisut"},
	["kam"] = {"Kamba (Kenya)"},
	["kan"] = {"Kannada"},
	["kao"] = {"Xaasongaxango"},
	["kap"] = {"Bezhta"},
	["kaq"] = {"Capanahua"},
	["kas"] = {"Kashmiri"},
	["kat"] = {"Georgian"},
	["kau"] = {"Kanuri"},
	["kav"] = {"Katukína"},
	["kaw"] = {"Kawi"},
	["kax"] = {"Kao"},
	["kay"] = {"Kamayurá"},
	["kaz"] = {"Kazakh"},
	["kba"] = {"Kalarko"},
	["kbb"] = {"Kaxuiâna"},
	["kbc"] = {"Kadiwéu"},
	["kbd"] = {"Kabardian"},
	["kbe"] = {"Kanju"},
	["kbg"] = {"Khamba"},
	["kbh"] = {"Camsá"},
	["kbi"] = {"Kaptiau"},
	["kbj"] = {"Kari"},
	["kbk"] = {"Grass Koiari"},
	["kbl"] = {"Kanembu"},
	["kbm"] = {"Iwal"},
	["kbn"] = {"Kare (Central African Republic)"},
	["kbo"] = {"Keliko"},
	["kbp"] = {"Kabiyè"},
	["kbq"] = {"Kamano"},
	["kbr"] = {"Kafa"},
	["kbs"] = {"Kande"},
	["kbt"] = {"Abadi"},
	["kbu"] = {"Kabutra"},
	["kbv"] = {"Dera (Indonesia)"},
	["kbw"] = {"Kaiep"},
	["kbx"] = {"Ap Ma"},
	["kby"] = {"Manga Kanuri"},
	["kbz"] = {"Duhwa"},
	["kca"] = {"Khanty"},
	["kcb"] = {"Kawacha"},
	["kcc"] = {"Lubila"},
	["kcd"] = {"Ngkâlmpw Kanum"},
	["kce"] = {"Kaivi"},
	["kcf"] = {"Ukaan"},
	["kcg"] = {"Tyap"},
	["kch"] = {"Vono"},
	["kci"] = {"Kamantan"},
	["kcj"] = {"Kobiana"},
	["kck"] = {"Kalanga"},
	["kcl"] = {"Kala", "Kela (Papua New Guinea)"},
	["kcm"] = {"Gula (Central African Republic)"},
	["kcn"] = {"Nubi"},
	["kco"] = {"Kinalakna"},
	["kcp"] = {"Kanga"},
	["kcq"] = {"Kamo"},
	["kcr"] = {"Katla"},
	["kcs"] = {"Koenoem"},
	["kct"] = {"Kaian"},
	["kcu"] = {"Kami (Tanzania)"},
	["kcv"] = {"Kete"},
	["kcw"] = {"Kabwari"},
	["kcx"] = {"Kachama-Ganjule"},
	["kcy"] = {"Korandje"},
	["kcz"] = {"Konongo"},
	["kda"] = {"Worimi"},
	["kdc"] = {"Kutu"},
	["kdd"] = {"Yankunytjatjara"},
	["kde"] = {"Makonde"},
	["kdf"] = {"Mamusi"},
	["kdg"] = {"Seba"},
	["kdh"] = {"Tem"},
	["kdi"] = {"Kumam"},
	["kdj"] = {"Karamojong"},
	["kdk"] = {"Kwényi", "Numèè"},
	["kdl"] = {"Tsikimba"},
	["kdm"] = {"Kagoma"},
	["kdn"] = {"Kunda"},
	["kdp"] = {"Kaningdon-Nindem"},
	["kdq"] = {"Koch"},
	["kdr"] = {"Karaim"},
	["kdt"] = {"Kuy"},
	["kdu"] = {"Kadaru"},
	["kdw"] = {"Koneraw"},
	["kdx"] = {"Kam"},
	["kdy"] = {"Keder", "Keijar"},
	["kdz"] = {"Kwaja"},
	["kea"] = {"Kabuverdianu"},
	["keb"] = {"Kélé"},
	["kec"] = {"Keiga"},
	["ked"] = {"Kerewe"},
	["kee"] = {"Eastern Keres"},
	["kef"] = {"Kpessi"},
	["keg"] = {"Tese"},
	["keh"] = {"Keak"},
	["kei"] = {"Kei"},
	["kej"] = {"Kadar"},
	["kek"] = {"Kekchí"},
	["kel"] = {"Kela (Democratic Republic of Congo)"},
	["kem"] = {"Kemak"},
	["ken"] = {"Kenyang"},
	["keo"] = {"Kakwa"},
	["kep"] = {"Kaikadi"},
	["keq"] = {"Kamar"},
	["ker"] = {"Kera"},
	["kes"] = {"Kugbo"},
	["ket"] = {"Ket"},
	["keu"] = {"Akebu"},
	["kev"] = {"Kanikkaran"},
	["kew"] = {"West Kewa"},
	["kex"] = {"Kukna"},
	["key"] = {"Kupia"},
	["kez"] = {"Kukele"},
	["kfa"] = {"Kodava"},
	["kfb"] = {"Northwestern Kolami"},
	["kfc"] = {"Konda-Dora"},
	["kfd"] = {"Korra Koraga"},
	["kfe"] = {"Kota (India)"},
	["kff"] = {"Koya"},
	["kfg"] = {"Kudiya"},
	["kfh"] = {"Kurichiya"},
	["kfi"] = {"Kannada Kurumba"},
	["kfj"] = {"Kemiehua"},
	["kfk"] = {"Kinnauri"},
	["kfl"] = {"Kung"},
	["kfm"] = {"Khunsari"},
	["kfn"] = {"Kuk"},
	["kfo"] = {"Koro (Côte d'Ivoire)"},
	["kfp"] = {"Korwa"},
	["kfq"] = {"Korku"},
	["kfr"] = {"Kachhi", "Kutchi"},
	["kfs"] = {"Bilaspuri"},
	["kft"] = {"Kanjari"},
	["kfu"] = {"Katkari"},
	["kfv"] = {"Kurmukar"},
	["kfw"] = {"Kharam Naga"},
	["kfx"] = {"Kullu Pahari"},
	["kfy"] = {"Kumaoni"},
	["kfz"] = {"Koromfé"},
	["kga"] = {"Koyaga"},
	["kgb"] = {"Kawe"},
	["kge"] = {"Komering"},
	["kgf"] = {"Kube"},
	["kgg"] = {"Kusunda"},
	["kgi"] = {"Selangor Sign Language"},
	["kgj"] = {"Gamale Kham"},
	["kgk"] = {"Kaiwá"},
	["kgl"] = {"Kunggari"},
	["kgm"] = {"Karipúna"},
	["kgn"] = {"Karingani"},
	["kgo"] = {"Krongo"},
	["kgp"] = {"Kaingang"},
	["kgq"] = {"Kamoro"},
	["kgr"] = {"Abun"},
	["kgs"] = {"Kumbainggar"},
	["kgt"] = {"Somyev"},
	["kgu"] = {"Kobol"},
	["kgv"] = {"Karas"},
	["kgw"] = {"Karon Dori"},
	["kgx"] = {"Kamaru"},
	["kgy"] = {"Kyerung"},
	["kha"] = {"Khasi"},
	["khb"] = {"Lü"},
	["khc"] = {"Tukang Besi North"},
	["khd"] = {"Bädi Kanum"},
	["khe"] = {"Korowai"},
	["khf"] = {"Khuen"},
	["khg"] = {"Khams Tibetan"},
	["khh"] = {"Kehu"},
	["khj"] = {"Kuturmi"},
	["khk"] = {"Halh Mongolian"},
	["khl"] = {"Lusi"},
	["khm"] = {"Central Khmer", "Khmer"},
	["khn"] = {"Khandesi"},
	["kho"] = {"Khotanese", "Sakan"},
	["khp"] = {"Kapauri", "Kapori"},
	["khq"] = {"Koyra Chiini Songhay"},
	["khr"] = {"Kharia"},
	["khs"] = {"Kasua"},
	["kht"] = {"Khamti"},
	["khu"] = {"Nkhumbi"},
	["khv"] = {"Khvarshi"},
	["khw"] = {"Khowar"},
	["khx"] = {"Kanu"},
	["khy"] = {"Kele (Democratic Republic of Congo)"},
	["khz"] = {"Keapara"},
	["kia"] = {"Kim"},
	["kib"] = {"Koalib"},
	["kic"] = {"Kickapoo"},
	["kid"] = {"Koshin"},
	["kie"] = {"Kibet"},
	["kif"] = {"Eastern Parbate Kham"},
	["kig"] = {"Kimaama", "Kimaghima"},
	["kih"] = {"Kilmeri"},
	["kii"] = {"Kitsai"},
	["kij"] = {"Kilivila"},
	["kik"] = {"Gikuyu", "Kikuyu"},
	["kil"] = {"Kariya"},
	["kim"] = {"Karagas"},
	["kin"] = {"Kinyarwanda"},
	["kio"] = {"Kiowa"},
	["kip"] = {"Sheshi Kham"},
	["kiq"] = {"Kosadle", "Kosare"},
	["kir"] = {"Kirghiz", "Kyrgyz"},
	["kis"] = {"Kis"},
	["kit"] = {"Agob"},
	["kiu"] = {"Kirmanjki (individual language)"},
	["kiv"] = {"Kimbu"},
	["kiw"] = {"Northeast Kiwai"},
	["kix"] = {"Khiamniungan Naga"},
	["kiy"] = {"Kirikiri"},
	["kiz"] = {"Kisi"},
	["kja"] = {"Mlap"},
	["kjb"] = {"Kanjobal", "Q'anjob'al"},
	["kjc"] = {"Coastal Konjo"},
	["kjd"] = {"Southern Kiwai"},
	["kje"] = {"Kisar"},
	["kjf"] = {"Khalaj"},
	["kjg"] = {"Khmu"},
	["kjh"] = {"Khakas"},
	["kji"] = {"Zabana"},
	["kjj"] = {"Khinalugh"},
	["kjk"] = {"Highland Konjo"},
	["kjl"] = {"Western Parbate Kham"},
	["kjm"] = {"Kháng"},
	["kjn"] = {"Kunjen"},
	["kjo"] = {"Harijan Kinnauri"},
	["kjp"] = {"Pwo Eastern Karen"},
	["kjq"] = {"Western Keres"},
	["kjr"] = {"Kurudu"},
	["kjs"] = {"East Kewa"},
	["kjt"] = {"Phrae Pwo Karen"},
	["kju"] = {"Kashaya"},
	["kjv"] = {"Kaikavian Literary Language"},
	["kjx"] = {"Ramopa"},
	["kjy"] = {"Erave"},
	["kjz"] = {"Bumthangkha"},
	["kka"] = {"Kakanda"},
	["kkb"] = {"Kwerisa"},
	["kkc"] = {"Odoodee"},
	["kkd"] = {"Kinuku"},
	["kke"] = {"Kakabe"},
	["kkf"] = {"Kalaktang Monpa"},
	["kkg"] = {"Mabaka Valley Kalinga"},
	["kkh"] = {"Khün"},
	["kki"] = {"Kagulu"},
	["kkj"] = {"Kako"},
	["kkk"] = {"Kokota"},
	["kkl"] = {"Kosarek Yale"},
	["kkm"] = {"Kiong"},
	["kkn"] = {"Kon Keu"},
	["kko"] = {"Karko"},
	["kkp"] = {"Gugubera", "Koko-Bera"},
	["kkq"] = {"Kaiku"},
	["kkr"] = {"Kir-Balar"},
	["kks"] = {"Giiwo"},
	["kkt"] = {"Koi"},
	["kku"] = {"Tumi"},
	["kkv"] = {"Kangean"},
	["kkw"] = {"Teke-Kukuya"},
	["kkx"] = {"Kohin"},
	["kky"] = {"Guguyimidjir", "Guugu Yimidhirr"},
	["kkz"] = {"Kaska"},
	["kla"] = {"Klamath-Modoc"},
	["klb"] = {"Kiliwa"},
	["klc"] = {"Kolbila"},
	["kld"] = {"Gamilaraay"},
	["kle"] = {"Kulung (Nepal)"},
	["klf"] = {"Kendeje"},
	["klg"] = {"Tagakaulo"},
	["klh"] = {"Weliki"},
	["kli"] = {"Kalumpang"},
	["klj"] = {"Turkic Khalaj"},
	["klk"] = {"Kono (Nigeria)"},
	["kll"] = {"Kagan Kalagan"},
	["klm"] = {"Migum"},
	["kln"] = {"Kalenjin"},
	["klo"] = {"Kapya"},
	["klp"] = {"Kamasa"},
	["klq"] = {"Rumu"},
	["klr"] = {"Khaling"},
	["kls"] = {"Kalasha"},
	["klt"] = {"Nukna"},
	["klu"] = {"Klao"},
	["klv"] = {"Maskelynes"},
	["klw"] = {"Lindu", "Tado"},
	["klx"] = {"Koluwawa"},
	["kly"] = {"Kalao"},
	["klz"] = {"Kabola"},
	["kma"] = {"Konni"},
	["kmb"] = {"Kimbundu"},
	["kmc"] = {"Southern Dong"},
	["kmd"] = {"Majukayang Kalinga"},
	["kme"] = {"Bakole"},
	["kmf"] = {"Kare (Papua New Guinea)"},
	["kmg"] = {"Kâte"},
	["kmh"] = {"Kalam"},
	["kmi"] = {"Kami (Nigeria)"},
	["kmj"] = {"Kumarbhag Paharia"},
	["kmk"] = {"Limos Kalinga"},
	["kml"] = {"Tanudan Kalinga"},
	["kmm"] = {"Kom (India)"},
	["kmn"] = {"Awtuw"},
	["kmo"] = {"Kwoma"},
	["kmp"] = {"Gimme"},
	["kmq"] = {"Kwama"},
	["kmr"] = {"Northern Kurdish"},
	["kms"] = {"Kamasau"},
	["kmt"] = {"Kemtuik"},
	["kmu"] = {"Kanite"},
	["kmv"] = {"Karipúna Creole French"},
	["kmw"] = {"Komo (Democratic Republic of Congo)"},
	["kmx"] = {"Waboda"},
	["kmy"] = {"Koma"},
	["kmz"] = {"Khorasani Turkish"},
	["kna"] = {"Dera (Nigeria)"},
	["knb"] = {"Lubuagan Kalinga"},
	["knc"] = {"Central Kanuri"},
	["knd"] = {"Konda"},
	["kne"] = {"Kankanaey"},
	["knf"] = {"Mankanya"},
	["kng"] = {"Koongo"},
	["kni"] = {"Kanufi"},
	["knj"] = {"Western Kanjobal"},
	["knk"] = {"Kuranko"},
	["knl"] = {"Keninjal"},
	["knm"] = {"Kanamarí"},
	["knn"] = {"Konkani (individual language)"},
	["kno"] = {"Kono (Sierra Leone)"},
	["knp"] = {"Kwanja"},
	["knq"] = {"Kintaq"},
	["knr"] = {"Kaningra"},
	["kns"] = {"Kensiu"},
	["knt"] = {"Panoan Katukína"},
	["knu"] = {"Kono (Guinea)"},
	["knv"] = {"Tabo"},
	["knw"] = {"Kung-Ekoka"},
	["knx"] = {"Kendayan", "Salako"},
	["kny"] = {"Kanyok"},
	["knz"] = {"Kalamsé"},
	["koa"] = {"Konomala"},
	["koc"] = {"Kpati"},
	["kod"] = {"Kodi"},
	["koe"] = {"Kacipo-Balesi"},
	["kof"] = {"Kubi"},
	["kog"] = {"Cogui", "Kogi"},
	["koh"] = {"Koyo"},
	["koi"] = {"Komi-Permyak"},
	["kok"] = {"Konkani (macrolanguage)"},
	["kol"] = {"Kol (Papua New Guinea)"},
	["kom"] = {"Komi"},
	["kon"] = {"Kongo"},
	["koo"] = {"Konzo"},
	["kop"] = {"Waube"},
	["koq"] = {"Kota (Gabon)"},
	["kor"] = {"Korean"},
	["kos"] = {"Kosraean"},
	["kot"] = {"Lagwan"},
	["kou"] = {"Koke"},
	["kov"] = {"Kudu-Camo"},
	["kow"] = {"Kugama"},
	["koy"] = {"Koyukon"},
	["koz"] = {"Korak"},
	["kpa"] = {"Kutto"},
	["kpb"] = {"Mullu Kurumba"},
	["kpc"] = {"Curripaco"},
	["kpd"] = {"Koba"},
	["kpe"] = {"Kpelle"},
	["kpf"] = {"Komba"},
	["kpg"] = {"Kapingamarangi"},
	["kph"] = {"Kplang"},
	["kpi"] = {"Kofei"},
	["kpj"] = {"Karajá"},
	["kpk"] = {"Kpan"},
	["kpl"] = {"Kpala"},
	["kpm"] = {"Koho"},
	["kpn"] = {"Kepkiriwát"},
	["kpo"] = {"Ikposo"},
	["kpq"] = {"Korupun-Sela"},
	["kpr"] = {"Korafe-Yegha"},
	["kps"] = {"Tehit"},
	["kpt"] = {"Karata"},
	["kpu"] = {"Kafoa"},
	["kpv"] = {"Komi-Zyrian"},
	["kpw"] = {"Kobon"},
	["kpx"] = {"Mountain Koiali"},
	["kpy"] = {"Koryak"},
	["kpz"] = {"Kupsabiny"},
	["kqa"] = {"Mum"},
	["kqb"] = {"Kovai"},
	["kqc"] = {"Doromu-Koki"},
	["kqd"] = {"Koy Sanjaq Surat"},
	["kqe"] = {"Kalagan"},
	["kqf"] = {"Kakabai"},
	["kqg"] = {"Khe"},
	["kqh"] = {"Kisankasa"},
	["kqi"] = {"Koitabu"},
	["kqj"] = {"Koromira"},
	["kqk"] = {"Kotafon Gbe"},
	["kql"] = {"Kyenele"},
	["kqm"] = {"Khisa"},
	["kqn"] = {"Kaonde"},
	["kqo"] = {"Eastern Krahn"},
	["kqp"] = {"Kimré"},
	["kqq"] = {"Krenak"},
	["kqr"] = {"Kimaragang"},
	["kqs"] = {"Northern Kissi"},
	["kqt"] = {"Klias River Kadazan"},
	["kqu"] = {"Seroa"},
	["kqv"] = {"Okolod"},
	["kqw"] = {"Kandas"},
	["kqx"] = {"Mser"},
	["kqy"] = {"Koorete"},
	["kqz"] = {"Korana"},
	["kra"] = {"Kumhali"},
	["krb"] = {"Karkin"},
	["krc"] = {"Karachay-Balkar"},
	["krd"] = {"Kairui-Midiki"},
	["kre"] = {"Panará"},
	["krf"] = {"Koro (Vanuatu)"},
	["krh"] = {"Kurama"},
	["kri"] = {"Krio"},
	["krj"] = {"Kinaray-A"},
	["krk"] = {"Kerek"},
	["krl"] = {"Karelian"},
	["krn"] = {"Sapo"},
	["krp"] = {"Korop"},
	["krr"] = {"Krung"},
	["krs"] = {"Gbaya (Sudan)"},
	["krt"] = {"Tumari Kanuri"},
	["kru"] = {"Kurukh"},
	["krv"] = {"Kavet"},
	["krw"] = {"Western Krahn"},
	["krx"] = {"Karon"},
	["kry"] = {"Kryts"},
	["krz"] = {"Sota Kanum"},
	["ksa"] = {"Shuwa-Zamani"},
	["ksb"] = {"Shambala"},
	["ksc"] = {"Southern Kalinga"},
	["ksd"] = {"Kuanua"},
	["kse"] = {"Kuni"},
	["ksf"] = {"Bafia"},
	["ksg"] = {"Kusaghe"},
	["ksh"] = {"Kölsch"},
	["ksi"] = {"I'saka", "Krisa"},
	["ksj"] = {"Uare"},
	["ksk"] = {"Kansa"},
	["ksl"] = {"Kumalu"},
	["ksm"] = {"Kumba"},
	["ksn"] = {"Kasiguranin"},
	["kso"] = {"Kofa"},
	["ksp"] = {"Kaba"},
	["ksq"] = {"Kwaami"},
	["ksr"] = {"Borong"},
	["kss"] = {"Southern Kisi"},
	["kst"] = {"Winyé"},
	["ksu"] = {"Khamyang"},
	["ksv"] = {"Kusu"},
	["ksw"] = {"S'gaw Karen"},
	["ksx"] = {"Kedang"},
	["ksy"] = {"Kharia Thar"},
	["ksz"] = {"Kodaku"},
	["kta"] = {"Katua"},
	["ktb"] = {"Kambaata"},
	["ktc"] = {"Kholok"},
	["ktd"] = {"Kokata", "Kukatha"},
	["kte"] = {"Nubri"},
	["ktf"] = {"Kwami"},
	["ktg"] = {"Kalkutung"},
	["kth"] = {"Karanga"},
	["kti"] = {"North Muyu"},
	["ktj"] = {"Plapo Krumen"},
	["ktk"] = {"Kaniet"},
	["ktl"] = {"Koroshi"},
	["ktm"] = {"Kurti"},
	["ktn"] = {"Karitiâna"},
	["kto"] = {"Kuot"},
	["ktp"] = {"Kaduo"},
	["ktq"] = {"Katabaga"},
	["kts"] = {"South Muyu"},
	["ktt"] = {"Ketum"},
	["ktu"] = {"Kituba (Democratic Republic of Congo)"},
	["ktv"] = {"Eastern Katu"},
	["ktw"] = {"Kato"},
	["ktx"] = {"Kaxararí"},
	["kty"] = {"Kango (Bas-Uélé District)"},
	["ktz"] = {"Juǀʼhoan", "Juǀʼhoansi"},
	["kua"] = {"Kuanyama", "Kwanyama"},
	["kub"] = {"Kutep"},
	["kuc"] = {"Kwinsu"},
	["kud"] = {"'Auhelawa"},
	["kue"] = {"Kuman (Papua New Guinea)"},
	["kuf"] = {"Western Katu"},
	["kug"] = {"Kupa"},
	["kuh"] = {"Kushi"},
	["kui"] = {"Kuikúro-Kalapálo"},
	["kuj"] = {"Kuria"},
	["kuk"] = {"Kepo'"},
	["kul"] = {"Kulere"},
	["kum"] = {"Kumyk"},
	["kun"] = {"Kunama"},
	["kuo"] = {"Kumukio"},
	["kup"] = {"Kunimaipa"},
	["kuq"] = {"Karipuna"},
	["kur"] = {"Kurdish"},
	["kus"] = {"Kusaal"},
	["kut"] = {"Kutenai"},
	["kuu"] = {"Upper Kuskokwim"},
	["kuv"] = {"Kur"},
	["kuw"] = {"Kpagua"},
	["kux"] = {"Kukatja"},
	["kuy"] = {"Kuuku-Ya'u"},
	["kuz"] = {"Kunza"},
	["kva"] = {"Bagvalal"},
	["kvb"] = {"Kubu"},
	["kvc"] = {"Kove"},
	["kvd"] = {"Kui (Indonesia)"},
	["kve"] = {"Kalabakan"},
	["kvf"] = {"Kabalai"},
	["kvg"] = {"Kuni-Boazi"},
	["kvh"] = {"Komodo"},
	["kvi"] = {"Kwang"},
	["kvj"] = {"Psikye"},
	["kvk"] = {"Korean Sign Language"},
	["kvl"] = {"Kayaw"},
	["kvm"] = {"Kendem"},
	["kvn"] = {"Border Kuna"},
	["kvo"] = {"Dobel"},
	["kvp"] = {"Kompane"},
	["kvq"] = {"Geba Karen"},
	["kvr"] = {"Kerinci"},
	["kvt"] = {"Lahta", "Lahta Karen"},
	["kvu"] = {"Yinbaw Karen"},
	["kvv"] = {"Kola"},
	["kvw"] = {"Wersing"},
	["kvx"] = {"Parkari Koli"},
	["kvy"] = {"Yintale", "Yintale Karen"},
	["kvz"] = {"Tsakwambo", "Tsaukambo"},
	["kwa"] = {"Dâw"},
	["kwb"] = {"Kwa"},
	["kwc"] = {"Likwala"},
	["kwd"] = {"Kwaio"},
	["kwe"] = {"Kwerba"},
	["kwf"] = {"Kwara'ae"},
	["kwg"] = {"Sara Kaba Deme"},
	["kwh"] = {"Kowiai"},
	["kwi"] = {"Awa-Cuaiquer"},
	["kwj"] = {"Kwanga"},
	["kwk"] = {"Kwakiutl"},
	["kwl"] = {"Kofyar"},
	["kwm"] = {"Kwambi"},
	["kwn"] = {"Kwangali"},
	["kwo"] = {"Kwomtari"},
	["kwp"] = {"Kodia"},
	["kwr"] = {"Kwer"},
	["kws"] = {"Kwese"},
	["kwt"] = {"Kwesten"},
	["kwu"] = {"Kwakum"},
	["kwv"] = {"Sara Kaba Náà"},
	["kww"] = {"Kwinti"},
	["kwx"] = {"Khirwar"},
	["kwy"] = {"San Salvador Kongo"},
	["kwz"] = {"Kwadi"},
	["kxa"] = {"Kairiru"},
	["kxb"] = {"Krobu"},
	["kxc"] = {"Khonso", "Konso"},
	["kxd"] = {"Brunei"},
	["kxf"] = {"Manumanaw", "Manumanaw Karen"},
	["kxh"] = {"Karo (Ethiopia)"},
	["kxi"] = {"Keningau Murut"},
	["kxj"] = {"Kulfa"},
	["kxk"] = {"Zayein Karen"},
	["kxl"] = {"Nepali Kurux"},
	["kxm"] = {"Northern Khmer"},
	["kxn"] = {"Kanowit-Tanjong Melanau"},
	["kxo"] = {"Kanoé"},
	["kxp"] = {"Wadiyara Koli"},
	["kxq"] = {"Smärky Kanum"},
	["kxr"] = {"Koro (Papua New Guinea)"},
	["kxs"] = {"Kangjia"},
	["kxt"] = {"Koiwat"},
	["kxu"] = {"Kui (India)"},
	["kxv"] = {"Kuvi"},
	["kxw"] = {"Konai"},
	["kxx"] = {"Likuba"},
	["kxy"] = {"Kayong"},
	["kxz"] = {"Kerewo"},
	["kya"] = {"Kwaya"},
	["kyb"] = {"Butbut Kalinga"},
	["kyc"] = {"Kyaka"},
	["kyd"] = {"Karey"},
	["kye"] = {"Krache"},
	["kyf"] = {"Kouya"},
	["kyg"] = {"Keyagana"},
	["kyh"] = {"Karok"},
	["kyi"] = {"Kiput"},
	["kyj"] = {"Karao"},
	["kyk"] = {"Kamayo"},
	["kyl"] = {"Kalapuya"},
	["kym"] = {"Kpatili"},
	["kyn"] = {"Northern Binukidnon"},
	["kyo"] = {"Kelon"},
	["kyp"] = {"Kang"},
	["kyq"] = {"Kenga"},
	["kyr"] = {"Kuruáya"},
	["kys"] = {"Baram Kayan"},
	["kyt"] = {"Kayagar"},
	["kyu"] = {"Western Kayah"},
	["kyv"] = {"Kayort"},
	["kyw"] = {"Kudmali"},
	["kyx"] = {"Rapoisi"},
	["kyy"] = {"Kambaira"},
	["kyz"] = {"Kayabí"},
	["kza"] = {"Western Karaboro"},
	["kzb"] = {"Kaibobo"},
	["kzc"] = {"Bondoukou Kulango"},
	["kzd"] = {"Kadai"},
	["kze"] = {"Kosena"},
	["kzf"] = {"Da'a Kaili"},
	["kzg"] = {"Kikai"},
	["kzi"] = {"Kelabit"},
	["kzk"] = {"Kazukuru"},
	["kzl"] = {"Kayeli"},
	["kzm"] = {"Kais"},
	["kzn"] = {"Kokola"},
	["kzo"] = {"Kaningi"},
	["kzp"] = {"Kaidipang"},
	["kzq"] = {"Kaike"},
	["kzr"] = {"Karang"},
	["kzs"] = {"Sugut Dusun"},
	["kzu"] = {"Kayupulau"},
	["kzv"] = {"Komyandaret"},
	["kzw"] = {"Karirí-Xocó"},
	["kzx"] = {"Kamarian"},
	["kzy"] = {"Kango (Tshopo District)"},
	["kzz"] = {"Kalabra"},
	["laa"] = {"Southern Subanen"},
	["lab"] = {"Linear A"},
	["lac"] = {"Lacandon"},
	["lad"] = {"Ladino"},
	["lae"] = {"Pattani"},
	["laf"] = {"Lafofa"},
	["lag"] = {"Langi"},
	["lah"] = {"Lahnda"},
	["lai"] = {"Lambya"},
	["laj"] = {"Lango (Uganda)"},
	["lak"] = {"Laka (Nigeria)"},
	["lal"] = {"Lalia"},
	["lam"] = {"Lamba"},
	["lan"] = {"Laru"},
	["lao"] = {"Lao"},
	["lap"] = {"Laka (Chad)"},
	["laq"] = {"Qabiao"},
	["lar"] = {"Larteh"},
	["las"] = {"Lama (Togo)"},
	["lat"] = {"Latin"},
	["lau"] = {"Laba"},
	["lav"] = {"Latvian"},
	["law"] = {"Lauje"},
	["lax"] = {"Tiwa"},
	["lay"] = {"Lama Bai"},
	["laz"] = {"Aribwatsa"},
	["lbb"] = {"Label"},
	["lbc"] = {"Lakkia"},
	["lbe"] = {"Lak"},
	["lbf"] = {"Tinani"},
	["lbg"] = {"Laopang"},
	["lbi"] = {"La'bi"},
	["lbj"] = {"Ladakhi"},
	["lbk"] = {"Central Bontok"},
	["lbl"] = {"Libon Bikol"},
	["lbm"] = {"Lodhi"},
	["lbn"] = {"Rmeet"},
	["lbo"] = {"Laven"},
	["lbq"] = {"Wampar"},
	["lbr"] = {"Lohorung"},
	["lbs"] = {"Libyan Sign Language"},
	["lbt"] = {"Lachi"},
	["lbu"] = {"Labu"},
	["lbv"] = {"Lavatbura-Lamusong"},
	["lbw"] = {"Tolaki"},
	["lbx"] = {"Lawangan"},
	["lby"] = {"Lamalama", "Lamu-Lamu"},
	["lbz"] = {"Lardil"},
	["lcc"] = {"Legenyem"},
	["lcd"] = {"Lola"},
	["lce"] = {"Loncong", "Sekak"},
	["lcf"] = {"Lubu"},
	["lch"] = {"Luchazi"},
	["lcl"] = {"Lisela"},
	["lcm"] = {"Tungag"},
	["lcp"] = {"Western Lawa"},
	["lcq"] = {"Luhu"},
	["lcs"] = {"Lisabata-Nuniali"},
	["lda"] = {"Kla-Dan"},
	["ldb"] = {"Dũya"},
	["ldd"] = {"Luri"},
	["ldg"] = {"Lenyima"},
	["ldh"] = {"Lamja-Dengsa-Tola"},
	["ldi"] = {"Laari"},
	["ldj"] = {"Lemoro"},
	["ldk"] = {"Leelau"},
	["ldl"] = {"Kaan"},
	["ldm"] = {"Landoma"},
	["ldn"] = {"Láadan"},
	["ldo"] = {"Loo"},
	["ldp"] = {"Tso"},
	["ldq"] = {"Lufu"},
	["lea"] = {"Lega-Shabunda"},
	["leb"] = {"Lala-Bisa"},
	["lec"] = {"Leco"},
	["led"] = {"Lendu"},
	["lee"] = {"Lyélé"},
	["lef"] = {"Lelemi"},
	["leh"] = {"Lenje"},
	["lei"] = {"Lemio"},
	["lej"] = {"Lengola"},
	["lek"] = {"Leipon"},
	["lel"] = {"Lele (Democratic Republic of Congo)"},
	["lem"] = {"Nomaande"},
	["len"] = {"Lenca"},
	["leo"] = {"Leti (Cameroon)"},
	["lep"] = {"Lepcha"},
	["leq"] = {"Lembena"},
	["ler"] = {"Lenkau"},
	["les"] = {"Lese"},
	["let"] = {"Amio-Gelimi", "Lesing-Gelimi"},
	["leu"] = {"Kara (Papua New Guinea)"},
	["lev"] = {"Lamma"},
	["lew"] = {"Ledo Kaili"},
	["lex"] = {"Luang"},
	["ley"] = {"Lemolang"},
	["lez"] = {"Lezghian"},
	["lfa"] = {"Lefa"},
	["lfn"] = {"Lingua Franca Nova"},
	["lga"] = {"Lungga"},
	["lgb"] = {"Laghu"},
	["lgg"] = {"Lugbara"},
	["lgh"] = {"Laghuu"},
	["lgi"] = {"Lengilu"},
	["lgk"] = {"Lingarak", "Neverver"},
	["lgl"] = {"Wala"},
	["lgm"] = {"Lega-Mwenga"},
	["lgn"] = {"Opuuo", "T'apo"},
	["lgq"] = {"Logba"},
	["lgr"] = {"Lengo"},
	["lgt"] = {"Pahi"},
	["lgu"] = {"Longgu"},
	["lgz"] = {"Ligenza"},
	["lha"] = {"Laha (Viet Nam)"},
	["lhh"] = {"Laha (Indonesia)"},
	["lhi"] = {"Lahu Shi"},
	["lhl"] = {"Lahul Lohar"},
	["lhm"] = {"Lhomi"},
	["lhn"] = {"Lahanan"},
	["lhp"] = {"Lhokpu"},
	["lhs"] = {"Mlahsö"},
	["lht"] = {"Lo-Toga"},
	["lhu"] = {"Lahu"},
	["lia"] = {"West-Central Limba"},
	["lib"] = {"Likum"},
	["lic"] = {"Hlai"},
	["lid"] = {"Nyindrou"},
	["lie"] = {"Likila"},
	["lif"] = {"Limbu"},
	["lig"] = {"Ligbi"},
	["lih"] = {"Lihir"},
	["lij"] = {"Ligurian"},
	["lik"] = {"Lika"},
	["lil"] = {"Lillooet"},
	["lim"] = {"Limburgan", "Limburger", "Limburgish"},
	["lin"] = {"Lingala"},
	["lio"] = {"Liki"},
	["lip"] = {"Sekpele"},
	["liq"] = {"Libido"},
	["lir"] = {"Liberian English"},
	["lis"] = {"Lisu"},
	["lit"] = {"Lithuanian"},
	["liu"] = {"Logorik"},
	["liv"] = {"Liv"},
	["liw"] = {"Col"},
	["lix"] = {"Liabuku"},
	["liy"] = {"Banda-Bambari"},
	["liz"] = {"Libinza"},
	["lja"] = {"Golpa"},
	["lje"] = {"Rampi"},
	["lji"] = {"Laiyolo"},
	["ljl"] = {"Li'o"},
	["ljp"] = {"Lampung Api"},
	["ljw"] = {"Yirandali"},
	["ljx"] = {"Yuru"},
	["lka"] = {"Lakalei"},
	["lkb"] = {"Kabras", "Lukabaras"},
	["lkc"] = {"Kucong"},
	["lkd"] = {"Lakondê"},
	["lke"] = {"Kenyi"},
	["lkh"] = {"Lakha"},
	["lki"] = {"Laki"},
	["lkj"] = {"Remun"},
	["lkl"] = {"Laeko-Libuat"},
	["lkm"] = {"Kalaamaya"},
	["lkn"] = {"Lakon", "Vure"},
	["lko"] = {"Khayo", "Olukhayo"},
	["lkr"] = {"Päri"},
	["lks"] = {"Kisa", "Olushisa"},
	["lkt"] = {"Lakota"},
	["lku"] = {"Kungkari"},
	["lky"] = {"Lokoya"},
	["lla"] = {"Lala-Roba"},
	["llb"] = {"Lolo"},
	["llc"] = {"Lele (Guinea)"},
	["lld"] = {"Ladin"},
	["lle"] = {"Lele (Papua New Guinea)"},
	["llf"] = {"Hermit"},
	["llg"] = {"Lole"},
	["llh"] = {"Lamu"},
	["lli"] = {"Teke-Laali"},
	["llj"] = {"Ladji Ladji"},
	["llk"] = {"Lelak"},
	["lll"] = {"Lilau"},
	["llm"] = {"Lasalimu"},
	["lln"] = {"Lele (Chad)"},
	["llp"] = {"North Efate"},
	["llq"] = {"Lolak"},
	["lls"] = {"Lithuanian Sign Language"},
	["llu"] = {"Lau"},
	["llx"] = {"Lauan"},
	["lma"] = {"East Limba"},
	["lmb"] = {"Merei"},
	["lmc"] = {"Limilngan"},
	["lmd"] = {"Lumun"},
	["lme"] = {"Pévé"},
	["lmf"] = {"South Lembata"},
	["lmg"] = {"Lamogai"},
	["lmh"] = {"Lambichhong"},
	["lmi"] = {"Lombi"},
	["lmj"] = {"West Lembata"},
	["lmk"] = {"Lamkang"},
	["lml"] = {"Hano"},
	["lmn"] = {"Lambadi"},
	["lmo"] = {"Lombard"},
	["lmp"] = {"Limbum"},
	["lmq"] = {"Lamatuka"},
	["lmr"] = {"Lamalera"},
	["lmu"] = {"Lamenu"},
	["lmv"] = {"Lomaiviti"},
	["lmw"] = {"Lake Miwok"},
	["lmx"] = {"Laimbue"},
	["lmy"] = {"Lamboya"},
	["lmz"] = {"Lumbee"},
	["lna"] = {"Langbashe"},
	["lnb"] = {"Mbalanhu"},
	["lnd"] = {"Lun Bawang", "Lundayeh"},
	["lng"] = {"Langobardic"},
	["lnh"] = {"Lanoh"},
	["lni"] = {"Daantanai'"},
	["lnj"] = {"Leningitij"},
	["lnl"] = {"South Central Banda"},
	["lnm"] = {"Langam"},
	["lnn"] = {"Lorediakarkar"},
	["lno"] = {"Lango (South Sudan)"},
	["lns"] = {"Lamnso'"},
	["lnu"] = {"Longuda"},
	["lnw"] = {"Lanima"},
	["lnz"] = {"Lonzo"},
	["loa"] = {"Loloda"},
	["lob"] = {"Lobi"},
	["loc"] = {"Inonhan"},
	["loe"] = {"Saluan"},
	["lof"] = {"Logol"},
	["log"] = {"Logo"},
	["loh"] = {"Narim"},
	["loi"] = {"Loma (Côte d'Ivoire)"},
	["loj"] = {"Lou"},
	["lok"] = {"Loko"},
	["lol"] = {"Mongo"},
	["lom"] = {"Loma (Liberia)"},
	["lon"] = {"Malawi Lomwe"},
	["loo"] = {"Lombo"},
	["lop"] = {"Lopa"},
	["loq"] = {"Lobala"},
	["lor"] = {"Téén"},
	["los"] = {"Loniu"},
	["lot"] = {"Otuho"},
	["lou"] = {"Louisiana Creole"},
	["lov"] = {"Lopi"},
	["low"] = {"Tampias Lobu"},
	["lox"] = {"Loun"},
	["loy"] = {"Loke"},
	["loz"] = {"Lozi"},
	["lpa"] = {"Lelepa"},
	["lpe"] = {"Lepki"},
	["lpn"] = {"Long Phuri Naga"},
	["lpo"] = {"Lipo"},
	["lpx"] = {"Lopit"},
	["lra"] = {"Rara Bakati'"},
	["lrc"] = {"Northern Luri"},
	["lre"] = {"Laurentian"},
	["lrg"] = {"Laragia"},
	["lri"] = {"Marachi", "Olumarachi"},
	["lrk"] = {"Loarki"},
	["lrl"] = {"Lari"},
	["lrm"] = {"Marama", "Olumarama"},
	["lrn"] = {"Lorang"},
	["lro"] = {"Laro"},
	["lrr"] = {"Southern Yamphu"},
	["lrt"] = {"Larantuka Malay"},
	["lrv"] = {"Larevat"},
	["lrz"] = {"Lemerig"},
	["lsa"] = {"Lasgerdi"},
	["lsd"] = {"Lishana Deni"},
	["lse"] = {"Lusengo"},
	["lsh"] = {"Lish"},
	["lsi"] = {"Lashi"},
	["lsl"] = {"Latvian Sign Language"},
	["lsm"] = {"Olusamia", "Saamia"},
	["lsn"] = {"Tibetan Sign Language"},
	["lso"] = {"Laos Sign Language"},
	["lsp"] = {"Lengua de Señas Panameñas", "Panamanian Sign Language"},
	["lsr"] = {"Aruop"},
	["lss"] = {"Lasi"},
	["lst"] = {"Trinidad and Tobago Sign Language"},
	["lsv"] = {"Sivia Sign Language"},
	["lsy"] = {"Mauritian Sign Language"},
	["ltc"] = {"Late Middle Chinese"},
	["ltg"] = {"Latgalian"},
	["lth"] = {"Thur"},
	["lti"] = {"Leti (Indonesia)"},
	["ltn"] = {"Latundê"},
	["lto"] = {"Olutsotso", "Tsotso"},
	["lts"] = {"Lutachoni", "Tachoni"},
	["ltu"] = {"Latu"},
	["ltz"] = {"Letzeburgesch", "Luxembourgish"},
	["lua"] = {"Luba-Lulua"},
	["lub"] = {"Luba-Katanga"},
	["luc"] = {"Aringa"},
	["lud"] = {"Ludian"},
	["lue"] = {"Luvale"},
	["luf"] = {"Laua"},
	["lug"] = {"Ganda"},
	["lui"] = {"Luiseno"},
	["luj"] = {"Luna"},
	["luk"] = {"Lunanakha"},
	["lul"] = {"Olu'bo"},
	["lum"] = {"Luimbi"},
	["lun"] = {"Lunda"},
	["luo"] = {"Dholuo", "Luo (Kenya and Tanzania)"},
	["lup"] = {"Lumbu"},
	["luq"] = {"Lucumi"},
	["lur"] = {"Laura"},
	["lus"] = {"Lushai"},
	["lut"] = {"Lushootseed"},
	["luu"] = {"Lumba-Yakkha"},
	["luv"] = {"Luwati"},
	["luw"] = {"Luo (Cameroon)"},
	["luy"] = {"Luyia", "Oluluyia"},
	["luz"] = {"Southern Luri"},
	["lva"] = {"Maku'a"},
	["lvi"] = {"Lavi"},
	["lvk"] = {"Lavukaleve"},
	["lvs"] = {"Standard Latvian"},
	["lvu"] = {"Levuka"},
	["lwa"] = {"Lwalu"},
	["lwe"] = {"Lewo Eleng"},
	["lwg"] = {"Oluwanga", "Wanga"},
	["lwh"] = {"White Lachi"},
	["lwl"] = {"Eastern Lawa"},
	["lwm"] = {"Laomian"},
	["lwo"] = {"Luwo"},
	["lws"] = {"Malawian Sign Language"},
	["lwt"] = {"Lewotobi"},
	["lwu"] = {"Lawu"},
	["lww"] = {"Lewo"},
	["lya"] = {"Layakha"},
	["lyg"] = {"Lyngngam"},
	["lyn"] = {"Luyana"},
	["lzh"] = {"Literary Chinese"},
	["lzl"] = {"Litzlitz"},
	["lzn"] = {"Leinong Naga"},
	["lzz"] = {"Laz"},
	["maa"] = {"San Jerónimo Tecóatl Mazatec"},
	["mab"] = {"Yutanduchi Mixtec"},
	["mad"] = {"Madurese"},
	["mae"] = {"Bo-Rukul"},
	["maf"] = {"Mafa"},
	["mag"] = {"Magahi"},
	["mah"] = {"Marshallese"},
	["mai"] = {"Maithili"},
	["maj"] = {"Jalapa De Díaz Mazatec"},
	["mak"] = {"Makasar"},
	["mal"] = {"Malayalam"},
	["mam"] = {"Mam"},
	["man"] = {"Manding", "Mandingo"},
	["maq"] = {"Chiquihuitlán Mazatec"},
	["mar"] = {"Marathi"},
	["mas"] = {"Masai"},
	["mat"] = {"San Francisco Matlatzinca"},
	["mau"] = {"Huautla Mazatec"},
	["mav"] = {"Sateré-Mawé"},
	["maw"] = {"Mampruli"},
	["max"] = {"North Moluccan Malay"},
	["maz"] = {"Central Mazahua"},
	["mba"] = {"Higaonon"},
	["mbb"] = {"Western Bukidnon Manobo"},
	["mbc"] = {"Macushi"},
	["mbd"] = {"Dibabawon Manobo"},
	["mbe"] = {"Molale"},
	["mbf"] = {"Baba Malay"},
	["mbh"] = {"Mangseng"},
	["mbi"] = {"Ilianen Manobo"},
	["mbj"] = {"Nadëb"},
	["mbk"] = {"Malol"},
	["mbl"] = {"Maxakalí"},
	["mbm"] = {"Ombamba"},
	["mbn"] = {"Macaguán"},
	["mbo"] = {"Mbo (Cameroon)"},
	["mbp"] = {"Malayo"},
	["mbq"] = {"Maisin"},
	["mbr"] = {"Nukak Makú"},
	["mbs"] = {"Sarangani Manobo"},
	["mbt"] = {"Matigsalug Manobo"},
	["mbu"] = {"Mbula-Bwazza"},
	["mbv"] = {"Mbulungish"},
	["mbw"] = {"Maring"},
	["mbx"] = {"Mari (East Sepik Province)"},
	["mby"] = {"Memoni"},
	["mbz"] = {"Amoltepec Mixtec"},
	["mca"] = {"Maca"},
	["mcb"] = {"Machiguenga"},
	["mcc"] = {"Bitur"},
	["mcd"] = {"Sharanahua"},
	["mce"] = {"Itundujia Mixtec"},
	["mcf"] = {"Matsés"},
	["mcg"] = {"Mapoyo"},
	["mch"] = {"Maquiritari"},
	["mci"] = {"Mese"},
	["mcj"] = {"Mvanip"},
	["mck"] = {"Mbunda"},
	["mcl"] = {"Macaguaje"},
	["mcm"] = {"Malaccan Creole Portuguese"},
	["mcn"] = {"Masana"},
	["mco"] = {"Coatlán Mixe"},
	["mcp"] = {"Makaa"},
	["mcq"] = {"Ese"},
	["mcr"] = {"Menya"},
	["mcs"] = {"Mambai"},
	["mct"] = {"Mengisa"},
	["mcu"] = {"Cameroon Mambila"},
	["mcv"] = {"Minanibai"},
	["mcw"] = {"Mawa (Chad)"},
	["mcx"] = {"Mpiemo"},
	["mcy"] = {"South Watut"},
	["mcz"] = {"Mawan"},
	["mda"] = {"Mada (Nigeria)"},
	["mdb"] = {"Morigi"},
	["mdc"] = {"Male (Papua New Guinea)"},
	["mdd"] = {"Mbum"},
	["mde"] = {"Maba (Chad)"},
	["mdf"] = {"Moksha"},
	["mdg"] = {"Massalat"},
	["mdh"] = {"Maguindanaon"},
	["mdi"] = {"Mamvu"},
	["mdj"] = {"Mangbetu"},
	["mdk"] = {"Mangbutu"},
	["mdl"] = {"Maltese Sign Language"},
	["mdm"] = {"Mayogo"},
	["mdn"] = {"Mbati"},
	["mdp"] = {"Mbala"},
	["mdq"] = {"Mbole"},
	["mdr"] = {"Mandar"},
	["mds"] = {"Maria (Papua New Guinea)"},
	["mdt"] = {"Mbere"},
	["mdu"] = {"Mboko"},
	["mdv"] = {"Santa Lucía Monteverde Mixtec"},
	["mdw"] = {"Mbosi"},
	["mdx"] = {"Dizin"},
	["mdy"] = {"Male (Ethiopia)"},
	["mdz"] = {"Suruí Do Pará"},
	["mea"] = {"Menka"},
	["meb"] = {"Ikobi"},
	["mec"] = {"Marra"},
	["med"] = {"Melpa"},
	["mee"] = {"Mengen"},
	["mef"] = {"Megam"},
	["meh"] = {"Southwestern Tlaxiaco Mixtec"},
	["mei"] = {"Midob"},
	["mej"] = {"Meyah"},
	["mek"] = {"Mekeo"},
	["mel"] = {"Central Melanau"},
	["mem"] = {"Mangala"},
	["men"] = {"Mende (Sierra Leone)"},
	["meo"] = {"Kedah Malay"},
	["mep"] = {"Miriwoong"},
	["meq"] = {"Merey"},
	["mer"] = {"Meru"},
	["mes"] = {"Masmaje"},
	["met"] = {"Mato"},
	["meu"] = {"Motu"},
	["mev"] = {"Mano"},
	["mew"] = {"Maaka"},
	["mey"] = {"Hassaniyya"},
	["mez"] = {"Menominee"},
	["mfa"] = {"Pattani Malay"},
	["mfb"] = {"Bangka"},
	["mfc"] = {"Mba"},
	["mfd"] = {"Mendankwe-Nkwen"},
	["mfe"] = {"Morisyen"},
	["mff"] = {"Naki"},
	["mfg"] = {"Mogofin"},
	["mfh"] = {"Matal"},
	["mfi"] = {"Wandala"},
	["mfj"] = {"Mefele"},
	["mfk"] = {"North Mofu"},
	["mfl"] = {"Putai"},
	["mfm"] = {"Marghi South"},
	["mfn"] = {"Cross River Mbembe"},
	["mfo"] = {"Mbe"},
	["mfp"] = {"Makassar Malay"},
	["mfq"] = {"Moba"},
	["mfr"] = {"Marrithiyel"},
	["mfs"] = {"Mexican Sign Language"},
	["mft"] = {"Mokerang"},
	["mfu"] = {"Mbwela"},
	["mfv"] = {"Mandjak"},
	["mfw"] = {"Mulaha"},
	["mfx"] = {"Melo"},
	["mfy"] = {"Mayo"},
	["mfz"] = {"Mabaan"},
	["mga"] = {"Middle Irish (900-1200)"},
	["mgb"] = {"Mararit"},
	["mgc"] = {"Morokodo"},
	["mgd"] = {"Moru"},
	["mge"] = {"Mango"},
	["mgf"] = {"Maklew"},
	["mgg"] = {"Mpumpong"},
	["mgh"] = {"Makhuwa-Meetto"},
	["mgi"] = {"Lijili"},
	["mgj"] = {"Abureni"},
	["mgk"] = {"Mawes"},
	["mgl"] = {"Maleu-Kilenge"},
	["mgm"] = {"Mambae"},
	["mgn"] = {"Mbangi"},
	["mgo"] = {"Meta'"},
	["mgp"] = {"Eastern Magar"},
	["mgq"] = {"Malila"},
	["mgr"] = {"Mambwe-Lungu"},
	["mgs"] = {"Manda (Tanzania)"},
	["mgt"] = {"Mongol"},
	["mgu"] = {"Mailu"},
	["mgv"] = {"Matengo"},
	["mgw"] = {"Matumbi"},
	["mgy"] = {"Mbunga"},
	["mgz"] = {"Mbugwe"},
	["mha"] = {"Manda (India)"},
	["mhb"] = {"Mahongwe"},
	["mhc"] = {"Mocho"},
	["mhd"] = {"Mbugu"},
	["mhe"] = {"Besisi", "Mah Meri"},
	["mhf"] = {"Mamaa"},
	["mhg"] = {"Margu"},
	["mhi"] = {"Ma'di"},
	["mhj"] = {"Mogholi"},
	["mhk"] = {"Mungaka"},
	["mhl"] = {"Mauwake"},
	["mhm"] = {"Makhuwa-Moniga"},
	["mhn"] = {"Mócheno"},
	["mho"] = {"Mashi (Zambia)"},
	["mhp"] = {"Balinese Malay"},
	["mhq"] = {"Mandan"},
	["mhr"] = {"Eastern Mari"},
	["mhs"] = {"Buru (Indonesia)"},
	["mht"] = {"Mandahuaca"},
	["mhu"] = {"Darang Deng", "Digaro-Mishmi"},
	["mhw"] = {"Mbukushu"},
	["mhx"] = {"Lhaovo", "Maru"},
	["mhy"] = {"Ma'anyan"},
	["mhz"] = {"Mor (Mor Islands)"},
	["mia"] = {"Miami"},
	["mib"] = {"Atatláhuca Mixtec"},
	["mic"] = {"Micmac", "Mi'kmaq"},
	["mid"] = {"Mandaic"},
	["mie"] = {"Ocotepec Mixtec"},
	["mif"] = {"Mofu-Gudur"},
	["mig"] = {"San Miguel El Grande Mixtec"},
	["mih"] = {"Chayuco Mixtec"},
	["mii"] = {"Chigmecatitlán Mixtec"},
	["mij"] = {"Abar", "Mungbam"},
	["mik"] = {"Mikasuki"},
	["mil"] = {"Peñoles Mixtec"},
	["mim"] = {"Alacatlatzala Mixtec"},
	["min"] = {"Minangkabau"},
	["mio"] = {"Pinotepa Nacional Mixtec"},
	["mip"] = {"Apasco-Apoala Mixtec"},
	["miq"] = {"Mískito"},
	["mir"] = {"Isthmus Mixe"},
	["mis"] = {"Uncoded languages"},
	["mit"] = {"Southern Puebla Mixtec"},
	["miu"] = {"Cacaloxtepec Mixtec"},
	["miw"] = {"Akoye"},
	["mix"] = {"Mixtepec Mixtec"},
	["miy"] = {"Ayutla Mixtec"},
	["miz"] = {"Coatzospan Mixtec"},
	["mjb"] = {"Makalero"},
	["mjc"] = {"San Juan Colorado Mixtec"},
	["mjd"] = {"Northwest Maidu"},
	["mje"] = {"Muskum"},
	["mjg"] = {"Tu"},
	["mjh"] = {"Mwera (Nyasa)"},
	["mji"] = {"Kim Mun"},
	["mjj"] = {"Mawak"},
	["mjk"] = {"Matukar"},
	["mjl"] = {"Mandeali"},
	["mjm"] = {"Medebur"},
	["mjn"] = {"Ma (Papua New Guinea)"},
	["mjo"] = {"Malankuravan"},
	["mjp"] = {"Malapandaram"},
	["mjq"] = {"Malaryan"},
	["mjr"] = {"Malavedan"},
	["mjs"] = {"Miship"},
	["mjt"] = {"Sauria Paharia"},
	["mju"] = {"Manna-Dora"},
	["mjv"] = {"Mannan"},
	["mjw"] = {"Karbi"},
	["mjx"] = {"Mahali"},
	["mjy"] = {"Mahican"},
	["mjz"] = {"Majhi"},
	["mka"] = {"Mbre"},
	["mkb"] = {"Mal Paharia"},
	["mkc"] = {"Siliput"},
	["mkd"] = {"Macedonian"},
	["mke"] = {"Mawchi"},
	["mkf"] = {"Miya"},
	["mkg"] = {"Mak (China)"},
	["mki"] = {"Dhatki"},
	["mkj"] = {"Mokilese"},
	["mkk"] = {"Byep"},
	["mkl"] = {"Mokole"},
	["mkm"] = {"Moklen"},
	["mkn"] = {"Kupang Malay"},
	["mko"] = {"Mingang Doso"},
	["mkp"] = {"Moikodi"},
	["mkq"] = {"Bay Miwok"},
	["mkr"] = {"Malas"},
	["mks"] = {"Silacayoapan Mixtec"},
	["mkt"] = {"Vamale"},
	["mku"] = {"Konyanka Maninka"},
	["mkv"] = {"Mafea"},
	["mkw"] = {"Kituba (Congo)"},
	["mkx"] = {"Kinamiging Manobo"},
	["mky"] = {"East Makian"},
	["mkz"] = {"Makasae"},
	["mla"] = {"Malo"},
	["mlb"] = {"Mbule"},
	["mlc"] = {"Cao Lan"},
	["mle"] = {"Manambu"},
	["mlf"] = {"Mal"},
	["mlg"] = {"Malagasy"},
	["mlh"] = {"Mape"},
	["mli"] = {"Malimpung"},
	["mlj"] = {"Miltu"},
	["mlk"] = {"Ilwana", "Kiwilwana"},
	["mll"] = {"Malua Bay"},
	["mlm"] = {"Mulam"},
	["mln"] = {"Malango"},
	["mlo"] = {"Mlomp"},
	["mlp"] = {"Bargam"},
	["mlq"] = {"Western Maninkakan"},
	["mlr"] = {"Vame"},
	["mls"] = {"Masalit"},
	["mlt"] = {"Maltese"},
	["mlu"] = {"To'abaita"},
	["mlv"] = {"Motlav", "Mwotlap"},
	["mlw"] = {"Moloko"},
	["mlx"] = {"Malfaxal", "Naha'ai"},
	["mlz"] = {"Malaynon"},
	["mma"] = {"Mama"},
	["mmb"] = {"Momina"},
	["mmc"] = {"Michoacán Mazahua"},
	["mmd"] = {"Maonan"},
	["mme"] = {"Mae"},
	["mmf"] = {"Mundat"},
	["mmg"] = {"North Ambrym"},
	["mmh"] = {"Mehináku"},
	["mmi"] = {"Musar"},
	["mmj"] = {"Majhwar"},
	["mmk"] = {"Mukha-Dora"},
	["mml"] = {"Man Met"},
	["mmm"] = {"Maii"},
	["mmn"] = {"Mamanwa"},
	["mmo"] = {"Mangga Buang"},
	["mmp"] = {"Siawi"},
	["mmq"] = {"Musak"},
	["mmr"] = {"Western Xiangxi Miao"},
	["mmt"] = {"Malalamai"},
	["mmu"] = {"Mmaala"},
	["mmv"] = {"Miriti"},
	["mmw"] = {"Emae"},
	["mmx"] = {"Madak"},
	["mmy"] = {"Migaama"},
	["mmz"] = {"Mabaale"},
	["mna"] = {"Mbula"},
	["mnb"] = {"Muna"},
	["mnc"] = {"Manchu"},
	["mnd"] = {"Mondé"},
	["mne"] = {"Naba"},
	["mnf"] = {"Mundani"},
	["mng"] = {"Eastern Mnong"},
	["mnh"] = {"Mono (Democratic Republic of Congo)"},
	["mni"] = {"Manipuri"},
	["mnj"] = {"Munji"},
	["mnk"] = {"Mandinka"},
	["mnl"] = {"Tiale"},
	["mnm"] = {"Mapena"},
	["mnn"] = {"Southern Mnong"},
	["mnp"] = {"Min Bei Chinese"},
	["mnq"] = {"Minriq"},
	["mnr"] = {"Mono (USA)"},
	["mns"] = {"Mansi"},
	["mnu"] = {"Mer"},
	["mnv"] = {"Rennell-Bellona"},
	["mnw"] = {"Mon"},
	["mnx"] = {"Manikion"},
	["mny"] = {"Manyawa"},
	["mnz"] = {"Moni"},
	["moa"] = {"Mwan"},
	["moc"] = {"Mocoví"},
	["mod"] = {"Mobilian"},
	["moe"] = {"Montagnais"},
	["mog"] = {"Mongondow"},
	["moh"] = {"Mohawk"},
	["moi"] = {"Mboi"},
	["moj"] = {"Monzombo"},
	["mok"] = {"Morori"},
	["mom"] = {"Mangue"},
	["mon"] = {"Mongolian"},
	["moo"] = {"Monom"},
	["mop"] = {"Mopán Maya"},
	["moq"] = {"Mor (Bomberai Peninsula)"},
	["mor"] = {"Moro"},
	["mos"] = {"Mossi"},
	["mot"] = {"Barí"},
	["mou"] = {"Mogum"},
	["mov"] = {"Mohave"},
	["mow"] = {"Moi (Congo)"},
	["mox"] = {"Molima"},
	["moy"] = {"Shekkacho"},
	["moz"] = {"Gergiko", "Mukulu"},
	["mpa"] = {"Mpoto"},
	["mpb"] = {"Malak Malak", "Mullukmulluk"},
	["mpc"] = {"Mangarrayi"},
	["mpd"] = {"Machinere"},
	["mpe"] = {"Majang"},
	["mpg"] = {"Marba"},
	["mph"] = {"Maung"},
	["mpi"] = {"Mpade"},
	["mpj"] = {"Martu Wangka", "Wangkajunga"},
	["mpk"] = {"Mbara (Chad)"},
	["mpl"] = {"Middle Watut"},
	["mpm"] = {"Yosondúa Mixtec"},
	["mpn"] = {"Mindiri"},
	["mpo"] = {"Miu"},
	["mpp"] = {"Migabac"},
	["mpq"] = {"Matís"},
	["mpr"] = {"Vangunu"},
	["mps"] = {"Dadibi"},
	["mpt"] = {"Mian"},
	["mpu"] = {"Makuráp"},
	["mpv"] = {"Mungkip"},
	["mpw"] = {"Mapidian"},
	["mpx"] = {"Misima-Panaeati"},
	["mpy"] = {"Mapia"},
	["mpz"] = {"Mpi"},
	["mqa"] = {"Maba (Indonesia)"},
	["mqb"] = {"Mbuko"},
	["mqc"] = {"Mangole"},
	["mqe"] = {"Matepi"},
	["mqf"] = {"Momuna"},
	["mqg"] = {"Kota Bangun Kutai Malay"},
	["mqh"] = {"Tlazoyaltepec Mixtec"},
	["mqi"] = {"Mariri"},
	["mqj"] = {"Mamasa"},
	["mqk"] = {"Rajah Kabunsuwan Manobo"},
	["mql"] = {"Mbelime"},
	["mqm"] = {"South Marquesan"},
	["mqn"] = {"Moronene"},
	["mqo"] = {"Modole"},
	["mqp"] = {"Manipa"},
	["mqq"] = {"Minokok"},
	["mqr"] = {"Mander"},
	["mqs"] = {"West Makian"},
	["mqt"] = {"Mok"},
	["mqu"] = {"Mandari"},
	["mqv"] = {"Mosimo"},
	["mqw"] = {"Murupi"},
	["mqx"] = {"Mamuju"},
	["mqy"] = {"Manggarai"},
	["mqz"] = {"Pano"},
	["mra"] = {"Mlabri"},
	["mrb"] = {"Marino"},
	["mrc"] = {"Maricopa"},
	["mrd"] = {"Western Magar"},
	["mre"] = {"Martha's Vineyard Sign Language"},
	["mrf"] = {"Elseng"},
	["mrg"] = {"Mising"},
	["mrh"] = {"Mara Chin"},
	["mri"] = {"Maori"},
	["mrj"] = {"Western Mari"},
	["mrk"] = {"Hmwaveke"},
	["mrl"] = {"Mortlockese"},
	["mrm"] = {"Merlav", "Mwerlap"},
	["mrn"] = {"Cheke Holo"},
	["mro"] = {"Mru"},
	["mrp"] = {"Morouas"},
	["mrq"] = {"North Marquesan"},
	["mrr"] = {"Maria (India)"},
	["mrs"] = {"Maragus"},
	["mrt"] = {"Marghi Central"},
	["mru"] = {"Mono (Cameroon)"},
	["mrv"] = {"Mangareva"},
	["mrw"] = {"Maranao"},
	["mrx"] = {"Dineor", "Maremgi"},
	["mry"] = {"Mandaya"},
	["mrz"] = {"Marind"},
	["msa"] = {"Malay (macrolanguage)"},
	["msb"] = {"Masbatenyo"},
	["msc"] = {"Sankaran Maninka"},
	["msd"] = {"Yucatec Maya Sign Language"},
	["mse"] = {"Musey"},
	["msf"] = {"Mekwei"},
	["msg"] = {"Moraid"},
	["msh"] = {"Masikoro Malagasy"},
	["msi"] = {"Sabah Malay"},
	["msj"] = {"Ma (Democratic Republic of Congo)"},
	["msk"] = {"Mansaka"},
	["msl"] = {"Molof", "Poule"},
	["msm"] = {"Agusan Manobo"},
	["msn"] = {"Vurës"},
	["mso"] = {"Mombum"},
	["msp"] = {"Maritsauá"},
	["msq"] = {"Caac"},
	["msr"] = {"Mongolian Sign Language"},
	["mss"] = {"West Masela"},
	["msu"] = {"Musom"},
	["msv"] = {"Maslam"},
	["msw"] = {"Mansoanka"},
	["msx"] = {"Moresada"},
	["msy"] = {"Aruamu"},
	["msz"] = {"Momare"},
	["mta"] = {"Cotabato Manobo"},
	["mtb"] = {"Anyin Morofo"},
	["mtc"] = {"Munit"},
	["mtd"] = {"Mualang"},
	["mte"] = {"Mono (Solomon Islands)"},
	["mtf"] = {"Murik (Papua New Guinea)"},
	["mtg"] = {"Una"},
	["mth"] = {"Munggui"},
	["mti"] = {"Maiwa (Papua New Guinea)"},
	["mtj"] = {"Moskona"},
	["mtk"] = {"Mbe'"},
	["mtl"] = {"Montol"},
	["mtm"] = {"Mator"},
	["mtn"] = {"Matagalpa"},
	["mto"] = {"Totontepec Mixe"},
	["mtp"] = {"Wichí Lhamtés Nocten"},
	["mtq"] = {"Muong"},
	["mtr"] = {"Mewari"},
	["mts"] = {"Yora"},
	["mtt"] = {"Mota"},
	["mtu"] = {"Tututepec Mixtec"},
	["mtv"] = {"Asaro'o"},
	["mtw"] = {"Southern Binukidnon"},
	["mtx"] = {"Tidaá Mixtec"},
	["mty"] = {"Nabi"},
	["mua"] = {"Mundang"},
	["mub"] = {"Mubi"},
	["muc"] = {"Ajumbu"},
	["mud"] = {"Mednyj Aleut"},
	["mue"] = {"Media Lengua"},
	["mug"] = {"Musgu"},
	["muh"] = {"Mündü"},
	["mui"] = {"Musi"},
	["muj"] = {"Mabire"},
	["muk"] = {"Mugom"},
	["mul"] = {"Multiple languages"},
	["mum"] = {"Maiwala"},
	["muo"] = {"Nyong"},
	["mup"] = {"Malvi"},
	["muq"] = {"Eastern Xiangxi Miao"},
	["mur"] = {"Murle"},
	["mus"] = {"Creek"},
	["mut"] = {"Western Muria"},
	["muu"] = {"Yaaku"},
	["muv"] = {"Muthuvan"},
	["mux"] = {"Bo-Ung"},
	["muy"] = {"Muyang"},
	["muz"] = {"Mursi"},
	["mva"] = {"Manam"},
	["mvb"] = {"Mattole"},
	["mvd"] = {"Mamboru"},
	["mve"] = {"Marwari (Pakistan)"},
	["mvf"] = {"Peripheral Mongolian"},
	["mvg"] = {"Yucuañe Mixtec"},
	["mvh"] = {"Mulgi"},
	["mvi"] = {"Miyako"},
	["mvk"] = {"Mekmek"},
	["mvl"] = {"Mbara (Australia)"},
	["mvm"] = {"Muya"},
	["mvn"] = {"Minaveha"},
	["mvo"] = {"Marovo"},
	["mvp"] = {"Duri"},
	["mvq"] = {"Moere"},
	["mvr"] = {"Marau"},
	["mvs"] = {"Massep"},
	["mvt"] = {"Mpotovoro"},
	["mvu"] = {"Marfa"},
	["mvv"] = {"Tagal Murut"},
	["mvw"] = {"Machinga"},
	["mvx"] = {"Meoswar"},
	["mvy"] = {"Indus Kohistani"},
	["mvz"] = {"Mesqan"},
	["mwa"] = {"Mwatebu"},
	["mwb"] = {"Juwal"},
	["mwc"] = {"Are"},
	["mwe"] = {"Mwera (Chimwera)"},
	["mwf"] = {"Murrinh-Patha"},
	["mwg"] = {"Aiklep"},
	["mwh"] = {"Mouk-Aria"},
	["mwi"] = {"Labo", "Ninde"},
	["mwk"] = {"Kita Maninkakan"},
	["mwl"] = {"Mirandese"},
	["mwm"] = {"Sar"},
	["mwn"] = {"Nyamwanga"},
	["mwo"] = {"Central Maewo"},
	["mwp"] = {"Kala Lagaw Ya"},
	["mwq"] = {"Mün Chin"},
	["mwr"] = {"Marwari"},
	["mws"] = {"Mwimbi-Muthambi"},
	["mwt"] = {"Moken"},
	["mwu"] = {"Mittu"},
	["mwv"] = {"Mentawai"},
	["mww"] = {"Hmong Daw"},
	["mwz"] = {"Moingi"},
	["mxa"] = {"Northwest Oaxaca Mixtec"},
	["mxb"] = {"Tezoatlán Mixtec"},
	["mxc"] = {"Manyika"},
	["mxd"] = {"Modang"},
	["mxe"] = {"Mele-Fila"},
	["mxf"] = {"Malgbe"},
	["mxg"] = {"Mbangala"},
	["mxh"] = {"Mvuba"},
	["mxi"] = {"Mozarabic"},
	["mxj"] = {"Geman Deng", "Miju-Mishmi"},
	["mxk"] = {"Monumbo"},
	["mxl"] = {"Maxi Gbe"},
	["mxm"] = {"Meramera"},
	["mxn"] = {"Moi (Indonesia)"},
	["mxo"] = {"Mbowe"},
	["mxp"] = {"Tlahuitoltepec Mixe"},
	["mxq"] = {"Juquila Mixe"},
	["mxr"] = {"Murik (Malaysia)"},
	["mxs"] = {"Huitepec Mixtec"},
	["mxt"] = {"Jamiltepec Mixtec"},
	["mxu"] = {"Mada (Cameroon)"},
	["mxv"] = {"Metlatónoc Mixtec"},
	["mxw"] = {"Namo"},
	["mxx"] = {"Mahou", "Mawukakan"},
	["mxy"] = {"Southeastern Nochixtlán Mixtec"},
	["mxz"] = {"Central Masela"},
	["mya"] = {"Burmese"},
	["myb"] = {"Mbay"},
	["myc"] = {"Mayeka"},
	["mye"] = {"Myene"},
	["myf"] = {"Bambassi"},
	["myg"] = {"Manta"},
	["myh"] = {"Makah"},
	["myj"] = {"Mangayat"},
	["myk"] = {"Mamara Senoufo"},
	["myl"] = {"Moma"},
	["mym"] = {"Me'en"},
	["myo"] = {"Anfillo"},
	["myp"] = {"Pirahã"},
	["myr"] = {"Muniche"},
	["mys"] = {"Mesmes"},
	["myu"] = {"Mundurukú"},
	["myv"] = {"Erzya"},
	["myw"] = {"Muyuw"},
	["myx"] = {"Masaaba"},
	["myy"] = {"Macuna"},
	["myz"] = {"Classical Mandaic"},
	["mza"] = {"Santa María Zacatepec Mixtec"},
	["mzb"] = {"Tumzabt"},
	["mzc"] = {"Madagascar Sign Language"},
	["mzd"] = {"Malimba"},
	["mze"] = {"Morawa"},
	["mzg"] = {"Monastic Sign Language"},
	["mzh"] = {"Wichí Lhamtés Güisnay"},
	["mzi"] = {"Ixcatlán Mazatec"},
	["mzj"] = {"Manya"},
	["mzk"] = {"Nigeria Mambila"},
	["mzl"] = {"Mazatlán Mixe"},
	["mzm"] = {"Mumuye"},
	["mzn"] = {"Mazanderani"},
	["mzo"] = {"Matipuhy"},
	["mzp"] = {"Movima"},
	["mzq"] = {"Mori Atas"},
	["mzr"] = {"Marúbo"},
	["mzs"] = {"Macanese"},
	["mzt"] = {"Mintil"},
	["mzu"] = {"Inapang"},
	["mzv"] = {"Manza"},
	["mzw"] = {"Deg"},
	["mzx"] = {"Mawayana"},
	["mzy"] = {"Mozambican Sign Language"},
	["mzz"] = {"Maiadomu"},
	["naa"] = {"Namla"},
	["nab"] = {"Southern Nambikuára"},
	["nac"] = {"Narak"},
	["nae"] = {"Naka'ela"},
	["naf"] = {"Nabak"},
	["nag"] = {"Naga Pidgin"},
	["naj"] = {"Nalu"},
	["nak"] = {"Nakanai"},
	["nal"] = {"Nalik"},
	["nam"] = {"Ngan'gityemerri"},
	["nan"] = {"Min Nan Chinese"},
	["nao"] = {"Naaba"},
	["nap"] = {"Neapolitan"},
	["naq"] = {"Khoekhoe", "Nama (Namibia)"},
	["nar"] = {"Iguta"},
	["nas"] = {"Naasioi"},
	["nat"] = {"Ca̱hungwa̱rya̱", "Hungworo"},
	["nau"] = {"Nauru"},
	["nav"] = {"Navaho", "Navajo"},
	["naw"] = {"Nawuri"},
	["nax"] = {"Nakwi"},
	["nay"] = {"Ngarrindjeri"},
	["naz"] = {"Coatepec Nahuatl"},
	["nba"] = {"Nyemba"},
	["nbb"] = {"Ndoe"},
	["nbc"] = {"Chang Naga"},
	["nbd"] = {"Ngbinda"},
	["nbe"] = {"Konyak Naga"},
	["nbg"] = {"Nagarchal"},
	["nbh"] = {"Ngamo"},
	["nbi"] = {"Mao Naga"},
	["nbj"] = {"Ngarinyman"},
	["nbk"] = {"Nake"},
	["nbl"] = {"South Ndebele"},
	["nbm"] = {"Ngbaka Ma'bo"},
	["nbn"] = {"Kuri"},
	["nbo"] = {"Nkukoli"},
	["nbp"] = {"Nnam"},
	["nbq"] = {"Nggem"},
	["nbr"] = {"Numana"},
	["nbs"] = {"Namibian Sign Language"},
	["nbt"] = {"Na"},
	["nbu"] = {"Rongmei Naga"},
	["nbv"] = {"Ngamambo"},
	["nbw"] = {"Southern Ngbandi"},
	["nby"] = {"Ningera"},
	["nca"] = {"Iyo"},
	["ncb"] = {"Central Nicobarese"},
	["ncc"] = {"Ponam"},
	["ncd"] = {"Nachering"},
	["nce"] = {"Yale"},
	["ncf"] = {"Notsi"},
	["ncg"] = {"Nisga'a"},
	["nch"] = {"Central Huasteca Nahuatl"},
	["nci"] = {"Classical Nahuatl"},
	["ncj"] = {"Northern Puebla Nahuatl"},
	["nck"] = {"Na-kara"},
	["ncl"] = {"Michoacán Nahuatl"},
	["ncm"] = {"Nambo"},
	["ncn"] = {"Nauna"},
	["nco"] = {"Sibe"},
	["ncq"] = {"Northern Katang"},
	["ncr"] = {"Ncane"},
	["ncs"] = {"Nicaraguan Sign Language"},
	["nct"] = {"Chothe Naga"},
	["ncu"] = {"Chumburung"},
	["ncx"] = {"Central Puebla Nahuatl"},
	["ncz"] = {"Natchez"},
	["nda"] = {"Ndasa"},
	["ndb"] = {"Kenswei Nsei"},
	["ndc"] = {"Ndau"},
	["ndd"] = {"Nde-Nsele-Nta"},
	["nde"] = {"North Ndebele"},
	["ndf"] = {"Nadruvian"},
	["ndg"] = {"Ndengereko"},
	["ndh"] = {"Ndali"},
	["ndi"] = {"Samba Leko"},
	["ndj"] = {"Ndamba"},
	["ndk"] = {"Ndaka"},
	["ndl"] = {"Ndolo"},
	["ndm"] = {"Ndam"},
	["ndn"] = {"Ngundi"},
	["ndo"] = {"Ndonga"},
	["ndp"] = {"Ndo"},
	["ndq"] = {"Ndombe"},
	["ndr"] = {"Ndoola"},
	["nds"] = {"Low German", "Low Saxon"},
	["ndt"] = {"Ndunga"},
	["ndu"] = {"Dugun"},
	["ndv"] = {"Ndut"},
	["ndw"] = {"Ndobo"},
	["ndx"] = {"Nduga"},
	["ndy"] = {"Lutos"},
	["ndz"] = {"Ndogo"},
	["nea"] = {"Eastern Ngad'a"},
	["neb"] = {"Toura (Côte d'Ivoire)"},
	["nec"] = {"Nedebang"},
	["ned"] = {"Nde-Gbite"},
	["nee"] = {"Nêlêmwa-Nixumwak"},
	["nef"] = {"Nefamese"},
	["neg"] = {"Negidal"},
	["neh"] = {"Nyenkha"},
	["nei"] = {"Neo-Hittite"},
	["nej"] = {"Neko"},
	["nek"] = {"Neku"},
	["nem"] = {"Nemi"},
	["nen"] = {"Nengone"},
	["neo"] = {"Ná-Meo"},
	["nep"] = {"Nepali (macrolanguage)"},
	["neq"] = {"North Central Mixe"},
	["ner"] = {"Yahadian"},
	["nes"] = {"Bhoti Kinnauri"},
	["net"] = {"Nete"},
	["neu"] = {"Neo"},
	["nev"] = {"Nyaheun"},
	["new"] = {"Nepal Bhasa", "Newari"},
	["nex"] = {"Neme"},
	["ney"] = {"Neyo"},
	["nez"] = {"Nez Perce"},
	["nfa"] = {"Dhao"},
	["nfd"] = {"Ahwai"},
	["nfl"] = {"Äiwoo", "Ayiwo"},
	["nfr"] = {"Nafaanra"},
	["nfu"] = {"Mfumte"},
	["nga"] = {"Ngbaka"},
	["ngb"] = {"Northern Ngbandi"},
	["ngc"] = {"Ngombe (Democratic Republic of Congo)"},
	["ngd"] = {"Ngando (Central African Republic)"},
	["nge"] = {"Ngemba"},
	["ngg"] = {"Ngbaka Manza"},
	["ngh"] = {"Nǁng"},
	["ngi"] = {"Ngizim"},
	["ngj"] = {"Ngie"},
	["ngk"] = {"Dalabon"},
	["ngl"] = {"Lomwe"},
	["ngm"] = {"Ngatik Men's Creole"},
	["ngn"] = {"Ngwo"},
	["ngo"] = {"Ngoni"},
	["ngp"] = {"Ngulu"},
	["ngq"] = {"Ngoreme", "Ngurimi"},
	["ngr"] = {"Engdewu"},
	["ngs"] = {"Gvoko"},
	["ngt"] = {"Kriang", "Ngeq"},
	["ngu"] = {"Guerrero Nahuatl"},
	["ngv"] = {"Nagumi"},
	["ngw"] = {"Ngwaba"},
	["ngx"] = {"Nggwahyi"},
	["ngy"] = {"Tibea"},
	["ngz"] = {"Ngungwel"},
	["nha"] = {"Nhanda"},
	["nhb"] = {"Beng"},
	["nhc"] = {"Tabasco Nahuatl"},
	["nhd"] = {"Ava Guaraní", "Chiripá"},
	["nhe"] = {"Eastern Huasteca Nahuatl"},
	["nhf"] = {"Nhuwala"},
	["nhg"] = {"Tetelcingo Nahuatl"},
	["nhh"] = {"Nahari"},
	["nhi"] = {"Zacatlán-Ahuacatlán-Tepetzintla Nahuatl"},
	["nhk"] = {"Isthmus-Cosoleacaque Nahuatl"},
	["nhm"] = {"Morelos Nahuatl"},
	["nhn"] = {"Central Nahuatl"},
	["nho"] = {"Takuu"},
	["nhp"] = {"Isthmus-Pajapan Nahuatl"},
	["nhq"] = {"Huaxcaleca Nahuatl"},
	["nhr"] = {"Naro"},
	["nht"] = {"Ometepec Nahuatl"},
	["nhu"] = {"Noone"},
	["nhv"] = {"Temascaltepec Nahuatl"},
	["nhw"] = {"Western Huasteca Nahuatl"},
	["nhx"] = {"Isthmus-Mecayapan Nahuatl"},
	["nhy"] = {"Northern Oaxaca Nahuatl"},
	["nhz"] = {"Santa María La Alta Nahuatl"},
	["nia"] = {"Nias"},
	["nib"] = {"Nakame"},
	["nid"] = {"Ngandi"},
	["nie"] = {"Niellim"},
	["nif"] = {"Nek"},
	["nig"] = {"Ngalakgan"},
	["nih"] = {"Nyiha (Tanzania)"},
	["nii"] = {"Nii"},
	["nij"] = {"Ngaju"},
	["nik"] = {"Southern Nicobarese"},
	["nil"] = {"Nila"},
	["nim"] = {"Nilamba"},
	["nin"] = {"Ninzo"},
	["nio"] = {"Nganasan"},
	["niq"] = {"Nandi"},
	["nir"] = {"Nimboran"},
	["nis"] = {"Nimi"},
	["nit"] = {"Southeastern Kolami"},
	["niu"] = {"Niuean"},
	["niv"] = {"Gilyak"},
	["niw"] = {"Nimo"},
	["nix"] = {"Hema"},
	["niy"] = {"Ngiti"},
	["niz"] = {"Ningil"},
	["nja"] = {"Nzanyi"},
	["njb"] = {"Nocte Naga"},
	["njd"] = {"Ndonde Hamba"},
	["njh"] = {"Lotha Naga"},
	["nji"] = {"Gudanji"},
	["njj"] = {"Njen"},
	["njl"] = {"Njalgulgule"},
	["njm"] = {"Angami Naga"},
	["njn"] = {"Liangmai Naga"},
	["njo"] = {"Ao Naga"},
	["njr"] = {"Njerep"},
	["njs"] = {"Nisa"},
	["njt"] = {"Ndyuka-Trio Pidgin"},
	["nju"] = {"Ngadjunmaya"},
	["njx"] = {"Kunyi"},
	["njy"] = {"Njyem"},
	["njz"] = {"Nyishi"},
	["nka"] = {"Nkoya"},
	["nkb"] = {"Khoibu Naga"},
	["nkc"] = {"Nkongho"},
	["nkd"] = {"Koireng"},
	["nke"] = {"Duke"},
	["nkf"] = {"Inpui Naga"},
	["nkg"] = {"Nekgini"},
	["nkh"] = {"Khezha Naga"},
	["nki"] = {"Thangal Naga"},
	["nkj"] = {"Nakai"},
	["nkk"] = {"Nokuku"},
	["nkm"] = {"Namat"},
	["nkn"] = {"Nkangala"},
	["nko"] = {"Nkonya"},
	["nkp"] = {"Niuatoputapu"},
	["nkq"] = {"Nkami"},
	["nkr"] = {"Nukuoro"},
	["nks"] = {"North Asmat"},
	["nkt"] = {"Nyika (Tanzania)"},
	["nku"] = {"Bouna Kulango"},
	["nkv"] = {"Nyika (Malawi and Zambia)"},
	["nkw"] = {"Nkutu"},
	["nkx"] = {"Nkoroo"},
	["nkz"] = {"Nkari"},
	["nla"] = {"Ngombale"},
	["nlc"] = {"Nalca"},
	["nld"] = {"Dutch", "Flemish"},
	["nle"] = {"East Nyala"},
	["nlg"] = {"Gela"},
	["nli"] = {"Grangali"},
	["nlj"] = {"Nyali"},
	["nlk"] = {"Ninia Yali"},
	["nll"] = {"Nihali"},
	["nlm"] = {"Mankiyali"},
	["nlo"] = {"Ngul"},
	["nlq"] = {"Lao Naga"},
	["nlu"] = {"Nchumbulu"},
	["nlv"] = {"Orizaba Nahuatl"},
	["nlw"] = {"Walangama"},
	["nlx"] = {"Nahali"},
	["nly"] = {"Nyamal"},
	["nlz"] = {"Nalögo"},
	["nma"] = {"Maram Naga"},
	["nmb"] = {"Big Nambas", "V'ënen Taut"},
	["nmc"] = {"Ngam"},
	["nmd"] = {"Ndumu"},
	["nme"] = {"Mzieme Naga"},
	["nmf"] = {"Tangkhul Naga (India)"},
	["nmg"] = {"Kwasio"},
	["nmh"] = {"Monsang Naga"},
	["nmi"] = {"Nyam"},
	["nmj"] = {"Ngombe (Central African Republic)"},
	["nmk"] = {"Namakura"},
	["nml"] = {"Ndemli"},
	["nmm"] = {"Manangba"},
	["nmn"] = {"ǃXóõ"},
	["nmo"] = {"Moyon Naga"},
	["nmp"] = {"Nimanbur"},
	["nmq"] = {"Nambya"},
	["nmr"] = {"Nimbari"},
	["nms"] = {"Letemboi"},
	["nmt"] = {"Namonuito"},
	["nmu"] = {"Northeast Maidu"},
	["nmv"] = {"Ngamini"},
	["nmw"] = {"Nimoa", "Rifao"},
	["nmx"] = {"Nama (Papua New Guinea)"},
	["nmy"] = {"Namuyi"},
	["nmz"] = {"Nawdm"},
	["nna"] = {"Nyangumarta"},
	["nnb"] = {"Nande"},
	["nnc"] = {"Nancere"},
	["nnd"] = {"West Ambae"},
	["nne"] = {"Ngandyera"},
	["nnf"] = {"Ngaing"},
	["nng"] = {"Maring Naga"},
	["nnh"] = {"Ngiemboon"},
	["nni"] = {"North Nuaulu"},
	["nnj"] = {"Nyangatom"},
	["nnk"] = {"Nankina"},
	["nnl"] = {"Northern Rengma Naga"},
	["nnm"] = {"Namia"},
	["nnn"] = {"Ngete"},
	["nno"] = {"Norwegian Nynorsk"},
	["nnp"] = {"Wancho Naga"},
	["nnq"] = {"Ngindo"},
	["nnr"] = {"Narungga"},
	["nnt"] = {"Nanticoke"},
	["nnu"] = {"Dwang"},
	["nnv"] = {"Nugunu (Australia)"},
	["nnw"] = {"Southern Nuni"},
	["nny"] = {"Nyangga"},
	["nnz"] = {"Nda'nda'"},
	["noa"] = {"Woun Meu"},
	["nob"] = {"Norwegian Bokmål"},
	["noc"] = {"Nuk"},
	["nod"] = {"Northern Thai"},
	["noe"] = {"Nimadi"},
	["nof"] = {"Nomane"},
	["nog"] = {"Nogai"},
	["noh"] = {"Nomu"},
	["noi"] = {"Noiri"},
	["noj"] = {"Nonuya"},
	["nok"] = {"Nooksack"},
	["nol"] = {"Nomlaki"},
	["nom"] = {"Nocamán"},
	["non"] = {"Old Norse"},
	["nop"] = {"Numanggang"},
	["noq"] = {"Ngongo"},
	["nor"] = {"Norwegian"},
	["nos"] = {"Eastern Nisu"},
	["not"] = {"Nomatsiguenga"},
	["nou"] = {"Ewage-Notu"},
	["nov"] = {"Novial"},
	["now"] = {"Nyambo"},
	["noy"] = {"Noy"},
	["noz"] = {"Nayi"},
	["npa"] = {"Nar Phu"},
	["npb"] = {"Nupbikha"},
	["npg"] = {"Ponyo-Gongwang Naga"},
	["nph"] = {"Phom Naga"},
	["npi"] = {"Nepali (individual language)"},
	["npl"] = {"Southeastern Puebla Nahuatl"},
	["npn"] = {"Mondropolon"},
	["npo"] = {"Pochuri Naga"},
	["nps"] = {"Nipsan"},
	["npu"] = {"Puimei Naga"},
	["npx"] = {"Noipx"},
	["npy"] = {"Napu"},
	["nqg"] = {"Southern Nago"},
	["nqk"] = {"Kura Ede Nago"},
	["nql"] = {"Ngendelengo"},
	["nqm"] = {"Ndom"},
	["nqn"] = {"Nen"},
	["nqo"] = {"N'Ko"},
	["nqq"] = {"Kyan-Karyaw Naga"},
	["nqy"] = {"Akyaung Ari Naga"},
	["nra"] = {"Ngom"},
	["nrb"] = {"Nara"},
	["nrc"] = {"Noric"},
	["nre"] = {"Southern Rengma Naga"},
	["nrf"] = {"Guernésiais", "Jèrriais"},
	["nrg"] = {"Narango"},
	["nri"] = {"Chokri Naga"},
	["nrk"] = {"Ngarla"},
	["nrl"] = {"Ngarluma"},
	["nrm"] = {"Narom"},
	["nrn"] = {"Norn"},
	["nrp"] = {"North Picene"},
	["nrr"] = {"Nora", "Norra"},
	["nrt"] = {"Northern Kalapuya"},
	["nru"] = {"Narua"},
	["nrx"] = {"Ngurmbur"},
	["nrz"] = {"Lala"},
	["nsa"] = {"Sangtam Naga"},
	["nsc"] = {"Nshi"},
	["nsd"] = {"Southern Nisu"},
	["nse"] = {"Nsenga"},
	["nsf"] = {"Northwestern Nisu"},
	["nsg"] = {"Ngasa"},
	["nsh"] = {"Ngoshie"},
	["nsi"] = {"Nigerian Sign Language"},
	["nsk"] = {"Naskapi"},
	["nsl"] = {"Norwegian Sign Language"},
	["nsm"] = {"Sumi Naga"},
	["nsn"] = {"Nehan"},
	["nso"] = {"Northern Sotho", "Pedi", "Sepedi"},
	["nsp"] = {"Nepalese Sign Language"},
	["nsq"] = {"Northern Sierra Miwok"},
	["nsr"] = {"Maritime Sign Language"},
	["nss"] = {"Nali"},
	["nst"] = {"Tase Naga"},
	["nsu"] = {"Sierra Negra Nahuatl"},
	["nsv"] = {"Southwestern Nisu"},
	["nsw"] = {"Navut"},
	["nsx"] = {"Nsongo"},
	["nsy"] = {"Nasal"},
	["nsz"] = {"Nisenan"},
	["ntd"] = {"Northern Tidung"},
	["nte"] = {"Nathembo"},
	["ntg"] = {"Ngantangarra"},
	["nti"] = {"Natioro"},
	["ntj"] = {"Ngaanyatjarra"},
	["ntk"] = {"Ikoma-Nata-Isenye"},
	["ntm"] = {"Nateni"},
	["nto"] = {"Ntomba"},
	["ntp"] = {"Northern Tepehuan"},
	["ntr"] = {"Delo"},
	["ntu"] = {"Natügu"},
	["ntw"] = {"Nottoway"},
	["ntx"] = {"Tangkhul Naga (Myanmar)"},
	["nty"] = {"Mantsi"},
	["ntz"] = {"Natanzi"},
	["nua"] = {"Yuanga"},
	["nuc"] = {"Nukuini"},
	["nud"] = {"Ngala"},
	["nue"] = {"Ngundu"},
	["nuf"] = {"Nusu"},
	["nug"] = {"Nungali"},
	["nuh"] = {"Ndunda"},
	["nui"] = {"Ngumbi"},
	["nuj"] = {"Nyole"},
	["nuk"] = {"Nuuchahnulth", "Nuu-chah-nulth"},
	["nul"] = {"Nusa Laut"},
	["num"] = {"Niuafo'ou"},
	["nun"] = {"Anong"},
	["nuo"] = {"Nguôn"},
	["nup"] = {"Nupe-Nupe-Tako"},
	["nuq"] = {"Nukumanu"},
	["nur"] = {"Nukuria"},
	["nus"] = {"Nuer"},
	["nut"] = {"Nung (Viet Nam)"},
	["nuu"] = {"Ngbundu"},
	["nuv"] = {"Northern Nuni"},
	["nuw"] = {"Nguluwan"},
	["nux"] = {"Mehek"},
	["nuy"] = {"Nunggubuyu"},
	["nuz"] = {"Tlamacazapa Nahuatl"},
	["nvh"] = {"Nasarian"},
	["nvm"] = {"Namiae"},
	["nvo"] = {"Nyokon"},
	["nwa"] = {"Nawathinehena"},
	["nwb"] = {"Nyabwa"},
	["nwc"] = {"Classical Nepal Bhasa", "Classical Newari", "Old Newari"},
	["nwe"] = {"Ngwe"},
	["nwg"] = {"Ngayawung"},
	["nwi"] = {"Southwest Tanna"},
	["nwm"] = {"Nyamusa-Molo"},
	["nwo"] = {"Nauo"},
	["nwr"] = {"Nawaru"},
	["nwx"] = {"Middle Newar"},
	["nwy"] = {"Nottoway-Meherrin"},
	["nxa"] = {"Nauete"},
	["nxd"] = {"Ngando (Democratic Republic of Congo)"},
	["nxe"] = {"Nage"},
	["nxg"] = {"Ngad'a"},
	["nxi"] = {"Nindi"},
	["nxk"] = {"Koki Naga"},
	["nxl"] = {"South Nuaulu"},
	["nxm"] = {"Numidian"},
	["nxn"] = {"Ngawun"},
	["nxo"] = {"Ndambomo"},
	["nxq"] = {"Naxi"},
	["nxr"] = {"Ninggerum"},
	["nxu"] = {"Narau"},
	["nxx"] = {"Nafri"},
	["nya"] = {"Chewa", "Chichewa", "Nyanja"},
	["nyb"] = {"Nyangbo"},
	["nyc"] = {"Nyanga-li"},
	["nyd"] = {"Nyore", "Olunyole"},
	["nye"] = {"Nyengo"},
	["nyf"] = {"Giryama", "Kigiryama"},
	["nyg"] = {"Nyindu"},
	["nyh"] = {"Nyikina"},
	["nyi"] = {"Ama (Sudan)"},
	["nyj"] = {"Nyanga"},
	["nyk"] = {"Nyaneka"},
	["nyl"] = {"Nyeu"},
	["nym"] = {"Nyamwezi"},
	["nyn"] = {"Nyankole"},
	["nyo"] = {"Nyoro"},
	["nyp"] = {"Nyang'i"},
	["nyq"] = {"Nayini"},
	["nyr"] = {"Nyiha (Malawi)"},
	["nys"] = {"Nyungar"},
	["nyt"] = {"Nyawaygi"},
	["nyu"] = {"Nyungwe"},
	["nyv"] = {"Nyulnyul"},
	["nyw"] = {"Nyaw"},
	["nyx"] = {"Nganyaywana"},
	["nyy"] = {"Nyakyusa-Ngonde"},
	["nza"] = {"Tigon Mbembe"},
	["nzb"] = {"Njebi"},
	["nzd"] = {"Nzadi"},
	["nzi"] = {"Nzima"},
	["nzk"] = {"Nzakara"},
	["nzm"] = {"Zeme Naga"},
	["nzs"] = {"New Zealand Sign Language"},
	["nzu"] = {"Teke-Nzikou"},
	["nzy"] = {"Nzakambay"},
	["nzz"] = {"Nanga Dama Dogon"},
	["oaa"] = {"Orok"},
	["oac"] = {"Oroch"},
	["oar"] = {"Ancient Aramaic (up to 700 BCE)", "Old Aramaic (up to 700 BCE)"},
	["oav"] = {"Old Avar"},
	["obi"] = {"Obispeño"},
	["obk"] = {"Southern Bontok"},
	["obl"] = {"Oblo"},
	["obm"] = {"Moabite"},
	["obo"] = {"Obo Manobo"},
	["obr"] = {"Old Burmese"},
	["obt"] = {"Old Breton"},
	["obu"] = {"Obulom"},
	["oca"] = {"Ocaina"},
	["och"] = {"Old Chinese"},
	["oci"] = {"Occitan (post 1500)"},
	["oco"] = {"Old Cornish"},
	["ocu"] = {"Atzingo Matlatzinca"},
	["oda"] = {"Odut"},
	["odk"] = {"Od"},
	["odt"] = {"Old Dutch"},
	["odu"] = {"Odual"},
	["ofo"] = {"Ofo"},
	["ofs"] = {"Old Frisian"},
	["ofu"] = {"Efutop"},
	["ogb"] = {"Ogbia"},
	["ogc"] = {"Ogbah"},
	["oge"] = {"Old Georgian"},
	["ogg"] = {"Ogbogolo"},
	["ogo"] = {"Khana"},
	["ogu"] = {"Ogbronuagum"},
	["oht"] = {"Old Hittite"},
	["ohu"] = {"Old Hungarian"},
	["oia"] = {"Oirata"},
	["oin"] = {"Inebu One"},
	["ojb"] = {"Northwestern Ojibwa"},
	["ojc"] = {"Central Ojibwa"},
	["ojg"] = {"Eastern Ojibwa"},
	["oji"] = {"Ojibwa"},
	["ojp"] = {"Old Japanese"},
	["ojs"] = {"Severn Ojibwa"},
	["ojv"] = {"Ontong Java"},
	["ojw"] = {"Western Ojibwa"},
	["oka"] = {"Okanagan"},
	["okb"] = {"Okobo"},
	["okd"] = {"Okodia"},
	["oke"] = {"Okpe (Southwestern Edo)"},
	["okg"] = {"Koko Babangk"},
	["okh"] = {"Koresh-e Rostam"},
	["oki"] = {"Okiek"},
	["okj"] = {"Oko-Juwoi"},
	["okk"] = {"Kwamtim One"},
	["okl"] = {"Old Kentish Sign Language"},
	["okm"] = {"Middle Korean (10th-16th cent.)"},
	["okn"] = {"Oki-No-Erabu"},
	["oko"] = {"Old Korean (3rd-9th cent.)"},
	["okr"] = {"Kirike"},
	["oks"] = {"Oko-Eni-Osayen"},
	["oku"] = {"Oku"},
	["okv"] = {"Orokaiva"},
	["okx"] = {"Okpe (Northwestern Edo)"},
	["ola"] = {"Walungge"},
	["old"] = {"Mochi"},
	["ole"] = {"Olekha"},
	["olk"] = {"Olkol"},
	["olm"] = {"Oloma"},
	["olo"] = {"Livvi"},
	["olr"] = {"Olrat"},
	["olt"] = {"Old Lithuanian"},
	["olu"] = {"Kuvale"},
	["oma"] = {"Omaha-Ponca"},
	["omb"] = {"East Ambae"},
	["omc"] = {"Mochica"},
	["omg"] = {"Omagua"},
	["omi"] = {"Omi"},
	["omk"] = {"Omok"},
	["oml"] = {"Ombo"},
	["omn"] = {"Minoan"},
	["omo"] = {"Utarmbung"},
	["omp"] = {"Old Manipuri"},
	["omr"] = {"Old Marathi"},
	["omt"] = {"Omotik"},
	["omu"] = {"Omurano"},
	["omw"] = {"South Tairora"},
	["omx"] = {"Old Mon"},
	["ona"] = {"Ona"},
	["onb"] = {"Lingao"},
	["one"] = {"Oneida"},
	["ong"] = {"Olo"},
	["oni"] = {"Onin"},
	["onj"] = {"Onjob"},
	["onk"] = {"Kabore One"},
	["onn"] = {"Onobasulu"},
	["ono"] = {"Onondaga"},
	["onp"] = {"Sartang"},
	["onr"] = {"Northern One"},
	["ons"] = {"Ono"},
	["ont"] = {"Ontenu"},
	["onu"] = {"Unua"},
	["onw"] = {"Old Nubian"},
	["onx"] = {"Onin Based Pidgin"},
	["ood"] = {"Tohono O'odham"},
	["oog"] = {"Ong"},
	["oon"] = {"Önge"},
	["oor"] = {"Oorlams"},
	["oos"] = {"Old Ossetic"},
	["opa"] = {"Okpamheri"},
	["opk"] = {"Kopkaka"},
	["opm"] = {"Oksapmin"},
	["opo"] = {"Opao"},
	["opt"] = {"Opata"},
	["opy"] = {"Ofayé"},
	["ora"] = {"Oroha"},
	["orc"] = {"Orma"},
	["ore"] = {"Orejón"},
	["org"] = {"Oring"},
	["orh"] = {"Oroqen"},
	["ori"] = {"Oriya (macrolanguage)"},
	["orm"] = {"Oromo"},
	["orn"] = {"Orang Kanaq"},
	["oro"] = {"Orokolo"},
	["orr"] = {"Oruma"},
	["ors"] = {"Orang Seletar"},
	["ort"] = {"Adivasi Oriya"},
	["oru"] = {"Ormuri"},
	["orv"] = {"Old Russian"},
	["orw"] = {"Oro Win"},
	["orx"] = {"Oro"},
	["ory"] = {"Odia", "Oriya (individual language)"},
	["orz"] = {"Ormu"},
	["osa"] = {"Osage"},
	["osc"] = {"Oscan"},
	["osi"] = {"Osing"},
	["oso"] = {"Ososo"},
	["osp"] = {"Old Spanish"},
	["oss"] = {"Ossetian", "Ossetic"},
	["ost"] = {"Osatu"},
	["osu"] = {"Southern One"},
	["osx"] = {"Old Saxon"},
	["ota"] = {"Ottoman Turkish (1500-1928)"},
	["otb"] = {"Old Tibetan"},
	["otd"] = {"Ot Danum"},
	["ote"] = {"Mezquital Otomi"},
	["oti"] = {"Oti"},
	["otk"] = {"Old Turkish"},
	["otl"] = {"Tilapa Otomi"},
	["otm"] = {"Eastern Highland Otomi"},
	["otn"] = {"Tenango Otomi"},
	["otq"] = {"Querétaro Otomi"},
	["otr"] = {"Otoro"},
	["ots"] = {"Estado de México Otomi"},
	["ott"] = {"Temoaya Otomi"},
	["otu"] = {"Otuke"},
	["otw"] = {"Ottawa"},
	["otx"] = {"Texcatepec Otomi"},
	["oty"] = {"Old Tamil"},
	["otz"] = {"Ixtenco Otomi"},
	["oua"] = {"Tagargrent"},
	["oub"] = {"Glio-Oubi"},
	["oue"] = {"Oune"},
	["oui"] = {"Old Uighur"},
	["oum"] = {"Ouma"},
	["ovd"] = {"Elfdalian", "Övdalian"},
	["owi"] = {"Owiniga"},
	["owl"] = {"Old Welsh"},
	["oyb"] = {"Oy"},
	["oyd"] = {"Oyda"},
	["oym"] = {"Wayampi"},
	["oyy"] = {"Oya'oya"},
	["ozm"] = {"Koonzime"},
	["pab"] = {"Parecís"},
	["pac"] = {"Pacoh"},
	["pad"] = {"Paumarí"},
	["pae"] = {"Pagibete"},
	["paf"] = {"Paranawát"},
	["pag"] = {"Pangasinan"},
	["pah"] = {"Tenharim"},
	["pai"] = {"Pe"},
	["pak"] = {"Parakanã"},
	["pal"] = {"Pahlavi"},
	["pam"] = {"Kapampangan", "Pampanga"},
	["pan"] = {"Panjabi", "Punjabi"},
	["pao"] = {"Northern Paiute"},
	["pap"] = {"Papiamento"},
	["paq"] = {"Parya"},
	["par"] = {"Panamint", "Timbisha"},
	["pas"] = {"Papasena"},
	["pat"] = {"Papitalai"},
	["pau"] = {"Palauan"},
	["pav"] = {"Pakaásnovos"},
	["paw"] = {"Pawnee"},
	["pax"] = {"Pankararé"},
	["pay"] = {"Pech"},
	["paz"] = {"Pankararú"},
	["pbb"] = {"Páez"},
	["pbc"] = {"Patamona"},
	["pbe"] = {"Mezontla Popoloca"},
	["pbf"] = {"Coyotepec Popoloca"},
	["pbg"] = {"Paraujano"},
	["pbh"] = {"E'ñapa Woromaipu"},
	["pbi"] = {"Parkwa"},
	["pbl"] = {"Mak (Nigeria)"},
	["pbm"] = {"Puebla Mazatec"},
	["pbn"] = {"Kpasam"},
	["pbo"] = {"Papel"},
	["pbp"] = {"Badyara"},
	["pbr"] = {"Pangwa"},
	["pbs"] = {"Central Pame"},
	["pbt"] = {"Southern Pashto"},
	["pbu"] = {"Northern Pashto"},
	["pbv"] = {"Pnar"},
	["pby"] = {"Pyu (Papua New Guinea)"},
	["pca"] = {"Santa Inés Ahuatempan Popoloca"},
	["pcb"] = {"Pear"},
	["pcc"] = {"Bouyei"},
	["pcd"] = {"Picard"},
	["pce"] = {"Ruching Palaung"},
	["pcf"] = {"Paliyan"},
	["pcg"] = {"Paniya"},
	["pch"] = {"Pardhan"},
	["pci"] = {"Duruwa"},
	["pcj"] = {"Parenga"},
	["pck"] = {"Paite Chin"},
	["pcl"] = {"Pardhi"},
	["pcm"] = {"Nigerian Pidgin"},
	["pcn"] = {"Piti"},
	["pcp"] = {"Pacahuara"},
	["pcw"] = {"Pyapun"},
	["pda"] = {"Anam"},
	["pdc"] = {"Pennsylvania German"},
	["pdi"] = {"Pa Di"},
	["pdn"] = {"Fedan", "Podena"},
	["pdo"] = {"Padoe"},
	["pdt"] = {"Plautdietsch"},
	["pdu"] = {"Kayan"},
	["pea"] = {"Peranakan Indonesian"},
	["peb"] = {"Eastern Pomo"},
	["ped"] = {"Mala (Papua New Guinea)"},
	["pee"] = {"Taje"},
	["pef"] = {"Northeastern Pomo"},
	["peg"] = {"Pengo"},
	["peh"] = {"Bonan"},
	["pei"] = {"Chichimeca-Jonaz"},
	["pej"] = {"Northern Pomo"},
	["pek"] = {"Penchal"},
	["pel"] = {"Pekal"},
	["pem"] = {"Phende"},
	["peo"] = {"Old Persian (ca. 600-400 B.C.)"},
	["pep"] = {"Kunja"},
	["peq"] = {"Southern Pomo"},
	["pes"] = {"Iranian Persian"},
	["pev"] = {"Pémono"},
	["pex"] = {"Petats"},
	["pey"] = {"Petjo"},
	["pez"] = {"Eastern Penan"},
	["pfa"] = {"Pááfang"},
	["pfe"] = {"Peere"},
	["pfl"] = {"Pfaelzisch"},
	["pga"] = {"Sudanese Creole Arabic"},
	["pgd"] = {"Gāndhārī"},
	["pgg"] = {"Pangwali"},
	["pgi"] = {"Pagi"},
	["pgk"] = {"Rerep"},
	["pgl"] = {"Primitive Irish"},
	["pgn"] = {"Paelignian"},
	["pgs"] = {"Pangseng"},
	["pgu"] = {"Pagu"},
	["pgz"] = {"Papua New Guinean Sign Language"},
	["pha"] = {"Pa-Hng"},
	["phd"] = {"Phudagi"},
	["phg"] = {"Phuong"},
	["phh"] = {"Phukha"},
	["phk"] = {"Phake"},
	["phl"] = {"Palula", "Phalura"},
	["phm"] = {"Phimbi"},
	["phn"] = {"Phoenician"},
	["pho"] = {"Phunoi"},
	["phq"] = {"Phana'"},
	["phr"] = {"Pahari-Potwari"},
	["pht"] = {"Phu Thai"},
	["phu"] = {"Phuan"},
	["phv"] = {"Pahlavani"},
	["phw"] = {"Phangduwali"},
	["pia"] = {"Pima Bajo"},
	["pib"] = {"Yine"},
	["pic"] = {"Pinji"},
	["pid"] = {"Piaroa"},
	["pie"] = {"Piro"},
	["pif"] = {"Pingelapese"},
	["pig"] = {"Pisabo"},
	["pih"] = {"Pitcairn-Norfolk"},
	["pii"] = {"Pini"},
	["pij"] = {"Pijao"},
	["pil"] = {"Yom"},
	["pim"] = {"Powhatan"},
	["pin"] = {"Piame"},
	["pio"] = {"Piapoco"},
	["pip"] = {"Pero"},
	["pir"] = {"Piratapuyo"},
	["pis"] = {"Pijin"},
	["pit"] = {"Pitta Pitta"},
	["piu"] = {"Pintupi-Luritja"},
	["piv"] = {"Pileni", "Vaeakau-Taumako"},
	["piw"] = {"Pimbwe"},
	["pix"] = {"Piu"},
	["piy"] = {"Piya-Kwonci"},
	["piz"] = {"Pije"},
	["pjt"] = {"Pitjantjatjara"},
	["pka"] = {"Ardhamāgadhī Prākrit"},
	["pkb"] = {"Kipfokomo", "Pokomo"},
	["pkc"] = {"Paekche"},
	["pkg"] = {"Pak-Tong"},
	["pkh"] = {"Pankhu"},
	["pkn"] = {"Pakanha"},
	["pko"] = {"Pökoot"},
	["pkp"] = {"Pukapuka"},
	["pkr"] = {"Attapady Kurumba"},
	["pks"] = {"Pakistan Sign Language"},
	["pkt"] = {"Maleng"},
	["pku"] = {"Paku"},
	["pla"] = {"Miani"},
	["plb"] = {"Polonombauk"},
	["plc"] = {"Central Palawano"},
	["pld"] = {"Polari"},
	["ple"] = {"Palu'e"},
	["plg"] = {"Pilagá"},
	["plh"] = {"Paulohi"},
	["pli"] = {"Pali"},
	["plj"] = {"Polci"},
	["plk"] = {"Kohistani Shina"},
	["pll"] = {"Shwe Palaung"},
	["pln"] = {"Palenquero"},
	["plo"] = {"Oluta Popoluca"},
	["plp"] = {"Palpa"},
	["plq"] = {"Palaic"},
	["plr"] = {"Palaka Senoufo"},
	["pls"] = {"San Marcos Tlacoyalco Popoloca", "San Marcos Tlalcoyalco Popoloca"},
	["plt"] = {"Plateau Malagasy"},
	["plu"] = {"Palikúr"},
	["plv"] = {"Southwest Palawano"},
	["plw"] = {"Brooke's Point Palawano"},
	["ply"] = {"Bolyu"},
	["plz"] = {"Paluan"},
	["pma"] = {"Paama"},
	["pmb"] = {"Pambia"},
	["pmd"] = {"Pallanganmiddang"},
	["pme"] = {"Pwaamei"},
	["pmf"] = {"Pamona"},
	["pmh"] = {"Māhārāṣṭri Prākrit"},
	["pmi"] = {"Northern Pumi"},
	["pmj"] = {"Southern Pumi"},
	["pmk"] = {"Pamlico"},
	["pml"] = {"Lingua Franca"},
	["pmm"] = {"Pomo"},
	["pmn"] = {"Pam"},
	["pmo"] = {"Pom"},
	["pmq"] = {"Northern Pame"},
	["pmr"] = {"Paynamar"},
	["pms"] = {"Piemontese"},
	["pmt"] = {"Tuamotuan"},
	["pmw"] = {"Plains Miwok"},
	["pmx"] = {"Poumei Naga"},
	["pmy"] = {"Papuan Malay"},
	["pmz"] = {"Southern Pame"},
	["pna"] = {"Punan Bah-Biau"},
	["pnb"] = {"Western Panjabi"},
	["pnc"] = {"Pannei"},
	["pnd"] = {"Mpinda"},
	["pne"] = {"Western Penan"},
	["png"] = {"Pongu"},
	["pnh"] = {"Penrhyn"},
	["pni"] = {"Aoheng"},
	["pnj"] = {"Pinjarup"},
	["pnk"] = {"Paunaka"},
	["pnl"] = {"Paleni"},
	["pnm"] = {"Punan Batu 1"},
	["pnn"] = {"Pinai-Hagahai"},
	["pno"] = {"Panobo"},
	["pnp"] = {"Pancana"},
	["pnq"] = {"Pana (Burkina Faso)"},
	["pnr"] = {"Panim"},
	["pns"] = {"Ponosakan"},
	["pnt"] = {"Pontic"},
	["pnu"] = {"Jiongnai Bunu"},
	["pnv"] = {"Pinigura"},
	["pnw"] = {"Banyjima", "Panytyima"},
	["pnx"] = {"Phong-Kniang"},
	["pny"] = {"Pinyin"},
	["pnz"] = {"Pana (Central African Republic)"},
	["poc"] = {"Poqomam"},
	["poe"] = {"San Juan Atzingo Popoloca"},
	["pof"] = {"Poke"},
	["pog"] = {"Potiguára"},
	["poh"] = {"Poqomchi'"},
	["poi"] = {"Highland Popoluca"},
	["pok"] = {"Pokangá"},
	["pol"] = {"Polish"},
	["pom"] = {"Southeastern Pomo"},
	["pon"] = {"Pohnpeian"},
	["poo"] = {"Central Pomo"},
	["pop"] = {"Pwapwâ"},
	["poq"] = {"Texistepec Popoluca"},
	["por"] = {"Portuguese"},
	["pos"] = {"Sayula Popoluca"},
	["pot"] = {"Potawatomi"},
	["pov"] = {"Upper Guinea Crioulo"},
	["pow"] = {"San Felipe Otlaltepec Popoloca"},
	["pox"] = {"Polabian"},
	["poy"] = {"Pogolo"},
	["ppe"] = {"Papi"},
	["ppi"] = {"Paipai"},
	["ppk"] = {"Uma"},
	["ppl"] = {"Nicarao", "Pipil"},
	["ppm"] = {"Papuma"},
	["ppn"] = {"Papapana"},
	["ppo"] = {"Folopa"},
	["ppp"] = {"Pelende"},
	["ppq"] = {"Pei"},
	["pps"] = {"San Luís Temalacayuca Popoloca"},
	["ppt"] = {"Pare"},
	["ppu"] = {"Papora"},
	["pqa"] = {"Pa'a"},
	["pqm"] = {"Malecite-Passamaquoddy"},
	["prc"] = {"Parachi"},
	["prd"] = {"Parsi-Dari"},
	["pre"] = {"Principense"},
	["prf"] = {"Paranan"},
	["prg"] = {"Prussian"},
	["prh"] = {"Porohanon"},
	["pri"] = {"Paicî"},
	["prk"] = {"Parauk"},
	["prl"] = {"Peruvian Sign Language"},
	["prm"] = {"Kibiri"},
	["prn"] = {"Prasuni"},
	["pro"] = {"Old Occitan (to 1500)", "Old Provençal (to 1500)"},
	["prp"] = {"Parsi"},
	["prq"] = {"Ashéninka Perené"},
	["prr"] = {"Puri"},
	["prs"] = {"Afghan Persian", "Dari"},
	["prt"] = {"Phai"},
	["pru"] = {"Puragi"},
	["prw"] = {"Parawen"},
	["prx"] = {"Purik"},
	["prz"] = {"Providencia Sign Language"},
	["psa"] = {"Asue Awyu"},
	["psc"] = {"Persian Sign Language"},
	["psd"] = {"Plains Indian Sign Language"},
	["pse"] = {"Central Malay"},
	["psg"] = {"Penang Sign Language"},
	["psh"] = {"Southwest Pashai", "Southwest Pashayi"},
	["psi"] = {"Southeast Pashai", "Southeast Pashayi"},
	["psl"] = {"Puerto Rican Sign Language"},
	["psm"] = {"Pauserna"},
	["psn"] = {"Panasuan"},
	["pso"] = {"Polish Sign Language"},
	["psp"] = {"Philippine Sign Language"},
	["psq"] = {"Pasi"},
	["psr"] = {"Portuguese Sign Language"},
	["pss"] = {"Kaulong"},
	["pst"] = {"Central Pashto"},
	["psu"] = {"Sauraseni Prākrit"},
	["psw"] = {"Port Sandwich"},
	["psy"] = {"Piscataway"},
	["pta"] = {"Pai Tavytera"},
	["pth"] = {"Pataxó Hã-Ha-Hãe"},
	["pti"] = {"Pindiini", "Wangkatha"},
	["ptn"] = {"Patani"},
	["pto"] = {"Zo'é"},
	["ptp"] = {"Patep"},
	["ptq"] = {"Pattapu"},
	["ptr"] = {"Piamatsina"},
	["ptt"] = {"Enrekang"},
	["ptu"] = {"Bambam"},
	["ptv"] = {"Port Vato"},
	["ptw"] = {"Pentlatch"},
	["pty"] = {"Pathiya"},
	["pua"] = {"Western Highland Purepecha"},
	["pub"] = {"Purum"},
	["puc"] = {"Punan Merap"},
	["pud"] = {"Punan Aput"},
	["pue"] = {"Puelche"},
	["puf"] = {"Punan Merah"},
	["pug"] = {"Phuie"},
	["pui"] = {"Puinave"},
	["puj"] = {"Punan Tubu"},
	["pum"] = {"Puma"},
	["puo"] = {"Puoc"},
	["pup"] = {"Pulabu"},
	["puq"] = {"Puquina"},
	["pur"] = {"Puruborá"},
	["pus"] = {"Pashto", "Pushto"},
	["put"] = {"Putoh"},
	["puu"] = {"Punu"},
	["puw"] = {"Puluwatese"},
	["pux"] = {"Puare"},
	["puy"] = {"Purisimeño"},
	["pwa"] = {"Pawaia"},
	["pwb"] = {"Panawa"},
	["pwg"] = {"Gapapaiwa"},
	["pwi"] = {"Patwin"},
	["pwm"] = {"Molbog"},
	["pwn"] = {"Paiwan"},
	["pwo"] = {"Pwo Western Karen"},
	["pwr"] = {"Powari"},
	["pww"] = {"Pwo Northern Karen"},
	["pxm"] = {"Quetzaltepec Mixe"},
	["pye"] = {"Pye Krumen"},
	["pym"] = {"Fyam"},
	["pyn"] = {"Poyanáwa"},
	["pys"] = {"Lengua de Señas del Paraguay", "Paraguayan Sign Language"},
	["pyu"] = {"Puyuma"},
	["pyx"] = {"Pyu (Myanmar)"},
	["pyy"] = {"Pyen"},
	["pzn"] = {"Para Naga"},
	["qua"] = {"Quapaw"},
	["qub"] = {"Huallaga Huánuco Quechua"},
	["quc"] = {"K'iche'", "Quiché"},
	["qud"] = {"Calderón Highland Quichua"},
	["que"] = {"Quechua"},
	["quf"] = {"Lambayeque Quechua"},
	["qug"] = {"Chimborazo Highland Quichua"},
	["quh"] = {"South Bolivian Quechua"},
	["qui"] = {"Quileute"},
	["quk"] = {"Chachapoyas Quechua"},
	["qul"] = {"North Bolivian Quechua"},
	["qum"] = {"Sipacapense"},
	["qun"] = {"Quinault"},
	["qup"] = {"Southern Pastaza Quechua"},
	["quq"] = {"Quinqui"},
	["qur"] = {"Yanahuanca Pasco Quechua"},
	["qus"] = {"Santiago del Estero Quichua"},
	["quv"] = {"Sacapulteco"},
	["quw"] = {"Tena Lowland Quichua"},
	["qux"] = {"Yauyos Quechua"},
	["quy"] = {"Ayacucho Quechua"},
	["quz"] = {"Cusco Quechua"},
	["qva"] = {"Ambo-Pasco Quechua"},
	["qvc"] = {"Cajamarca Quechua"},
	["qve"] = {"Eastern Apurímac Quechua"},
	["qvh"] = {"Huamalíes-Dos de Mayo Huánuco Quechua"},
	["qvi"] = {"Imbabura Highland Quichua"},
	["qvj"] = {"Loja Highland Quichua"},
	["qvl"] = {"Cajatambo North Lima Quechua"},
	["qvm"] = {"Margos-Yarowilca-Lauricocha Quechua"},
	["qvn"] = {"North Junín Quechua"},
	["qvo"] = {"Napo Lowland Quechua"},
	["qvp"] = {"Pacaraos Quechua"},
	["qvs"] = {"San Martín Quechua"},
	["qvw"] = {"Huaylla Wanca Quechua"},
	["qvy"] = {"Queyu"},
	["qvz"] = {"Northern Pastaza Quichua"},
	["qwa"] = {"Corongo Ancash Quechua"},
	["qwc"] = {"Classical Quechua"},
	["qwh"] = {"Huaylas Ancash Quechua"},
	["qwm"] = {"Kuman (Russia)"},
	["qws"] = {"Sihuas Ancash Quechua"},
	["qwt"] = {"Kwalhioqua-Tlatskanai"},
	["qxa"] = {"Chiquián Ancash Quechua"},
	["qxc"] = {"Chincha Quechua"},
	["qxh"] = {"Panao Huánuco Quechua"},
	["qxl"] = {"Salasaca Highland Quichua"},
	["qxn"] = {"Northern Conchucos Ancash Quechua"},
	["qxo"] = {"Southern Conchucos Ancash Quechua"},
	["qxp"] = {"Puno Quechua"},
	["qxq"] = {"Qashqa'i"},
	["qxr"] = {"Cañar Highland Quichua"},
	["qxs"] = {"Southern Qiang"},
	["qxt"] = {"Santa Ana de Tusi Pasco Quechua"},
	["qxu"] = {"Arequipa-La Unión Quechua"},
	["qxw"] = {"Jauja Wanca Quechua"},
	["qya"] = {"Quenya"},
	["qyp"] = {"Quiripi"},
	["raa"] = {"Dungmali"},
	["rab"] = {"Camling"},
	["rac"] = {"Rasawa"},
	["rad"] = {"Rade"},
	["raf"] = {"Western Meohang"},
	["rag"] = {"Logooli", "Lulogooli"},
	["rah"] = {"Rabha"},
	["rai"] = {"Ramoaaina"},
	["raj"] = {"Rajasthani"},
	["rak"] = {"Tulu-Bohuai"},
	["ral"] = {"Ralte"},
	["ram"] = {"Canela"},
	["ran"] = {"Riantana"},
	["rao"] = {"Rao"},
	["rap"] = {"Rapanui"},
	["raq"] = {"Saam"},
	["rar"] = {"Cook Islands Maori", "Rarotongan"},
	["ras"] = {"Tegali"},
	["rat"] = {"Razajerdi"},
	["rau"] = {"Raute"},
	["rav"] = {"Sampang"},
	["raw"] = {"Rawang"},
	["rax"] = {"Rang"},
	["ray"] = {"Rapa"},
	["raz"] = {"Rahambuu"},
	["rbb"] = {"Rumai Palaung"},
	["rbk"] = {"Northern Bontok"},
	["rbl"] = {"Miraya Bikol"},
	["rbp"] = {"Barababaraba"},
	["rcf"] = {"Réunion Creole French"},
	["rdb"] = {"Rudbari"},
	["rea"] = {"Rerau"},
	["reb"] = {"Rembong"},
	["ree"] = {"Rejang Kayan"},
	["reg"] = {"Kara (Tanzania)"},
	["rei"] = {"Reli"},
	["rej"] = {"Rejang"},
	["rel"] = {"Rendille"},
	["rem"] = {"Remo"},
	["ren"] = {"Rengao"},
	["rer"] = {"Rer Bare"},
	["res"] = {"Reshe"},
	["ret"] = {"Retta"},
	["rey"] = {"Reyesano"},
	["rga"] = {"Roria"},
	["rge"] = {"Romano-Greek"},
	["rgk"] = {"Rangkas"},
	["rgn"] = {"Romagnol"},
	["rgr"] = {"Resígaro"},
	["rgs"] = {"Southern Roglai"},
	["rgu"] = {"Ringgou"},
	["rhg"] = {"Rohingya"},
	["rhp"] = {"Yahang"},
	["ria"] = {"Riang (India)"},
	["rif"] = {"Tarifit"},
	["ril"] = {"Riang (Myanmar)", "Riang Lang"},
	["rim"] = {"Nyaturu"},
	["rin"] = {"Nungu"},
	["rir"] = {"Ribun"},
	["rit"] = {"Ritharrngu"},
	["riu"] = {"Riung"},
	["rjg"] = {"Rajong"},
	["rji"] = {"Raji"},
	["rjs"] = {"Rajbanshi"},
	["rka"] = {"Kraol"},
	["rkb"] = {"Rikbaktsa"},
	["rkh"] = {"Rakahanga-Manihiki"},
	["rki"] = {"Rakhine"},
	["rkm"] = {"Marka"},
	["rkt"] = {"Kamta", "Rangpuri"},
	["rkw"] = {"Arakwal"},
	["rma"] = {"Rama"},
	["rmb"] = {"Rembarrnga"},
	["rmc"] = {"Carpathian Romani"},
	["rmd"] = {"Traveller Danish"},
	["rme"] = {"Angloromani"},
	["rmf"] = {"Kalo Finnish Romani"},
	["rmg"] = {"Traveller Norwegian"},
	["rmh"] = {"Murkim"},
	["rmi"] = {"Lomavren"},
	["rmk"] = {"Romkun"},
	["rml"] = {"Baltic Romani"},
	["rmm"] = {"Roma"},
	["rmn"] = {"Balkan Romani"},
	["rmo"] = {"Sinte Romani"},
	["rmp"] = {"Rempi"},
	["rmq"] = {"Caló"},
	["rms"] = {"Romanian Sign Language"},
	["rmt"] = {"Domari"},
	["rmu"] = {"Tavringer Romani"},
	["rmv"] = {"Romanova"},
	["rmw"] = {"Welsh Romani"},
	["rmx"] = {"Romam"},
	["rmy"] = {"Vlax Romani"},
	["rmz"] = {"Marma"},
	["rnd"] = {"Ruund"},
	["rng"] = {"Ronga"},
	["rnl"] = {"Ranglong"},
	["rnn"] = {"Roon"},
	["rnp"] = {"Rongpo"},
	["rnr"] = {"Nari Nari"},
	["rnw"] = {"Rungwa"},
	["rob"] = {"Tae'"},
	["roc"] = {"Cacgia Roglai"},
	["rod"] = {"Rogo"},
	["roe"] = {"Ronji"},
	["rof"] = {"Rombo"},
	["rog"] = {"Northern Roglai"},
	["roh"] = {"Romansh"},
	["rol"] = {"Romblomanon"},
	["rom"] = {"Romany"},
	["ron"] = {"Moldavian", "Moldovan", "Romanian"},
	["roo"] = {"Rotokas"},
	["rop"] = {"Kriol"},
	["ror"] = {"Rongga"},
	["rou"] = {"Runga"},
	["row"] = {"Dela-Oenale"},
	["rpn"] = {"Repanbitip"},
	["rpt"] = {"Rapting"},
	["rri"] = {"Ririo"},
	["rro"] = {"Waima"},
	["rrt"] = {"Arritinngithigh"},
	["rsb"] = {"Romano-Serbian"},
	["rsl"] = {"Russian Sign Language"},
	["rsm"] = {"Miriwoong Sign Language"},
	["rtc"] = {"Rungtu Chin"},
	["rth"] = {"Ratahan"},
	["rtm"] = {"Rotuman"},
	["rts"] = {"Yurats"},
	["rtw"] = {"Rathawi"},
	["rub"] = {"Gungu"},
	["ruc"] = {"Ruuli"},
	["rue"] = {"Rusyn"},
	["ruf"] = {"Luguru"},
	["rug"] = {"Roviana"},
	["ruh"] = {"Ruga"},
	["rui"] = {"Rufiji"},
	["ruk"] = {"Che"},
	["run"] = {"Rundi"},
	["ruo"] = {"Istro Romanian"},
	["rup"] = {"Aromanian", "Arumanian", "Macedo-Romanian"},
	["ruq"] = {"Megleno Romanian"},
	["rus"] = {"Russian"},
	["rut"] = {"Rutul"},
	["ruu"] = {"Lanas Lobu"},
	["ruy"] = {"Mala (Nigeria)"},
	["ruz"] = {"Ruma"},
	["rwa"] = {"Rawo"},
	["rwk"] = {"Rwa"},
	["rwm"] = {"Amba (Uganda)"},
	["rwo"] = {"Rawa"},
	["rwr"] = {"Marwari (India)"},
	["rxd"] = {"Ngardi"},
	["rxw"] = {"Garuwali", "Karuwali"},
	["ryn"] = {"Northern Amami-Oshima"},
	["rys"] = {"Yaeyama"},
	["ryu"] = {"Central Okinawan"},
	["rzh"] = {"Rāziḥī"},
	["saa"] = {"Saba"},
	["sab"] = {"Buglere"},
	["sac"] = {"Meskwaki"},
	["sad"] = {"Sandawe"},
	["sae"] = {"Sabanê"},
	["saf"] = {"Safaliba"},
	["sag"] = {"Sango"},
	["sah"] = {"Yakut"},
	["saj"] = {"Sahu"},
	["sak"] = {"Sake"},
	["sam"] = {"Samaritan Aramaic"},
	["san"] = {"Sanskrit"},
	["sao"] = {"Sause"},
	["saq"] = {"Samburu"},
	["sar"] = {"Saraveca"},
	["sas"] = {"Sasak"},
	["sat"] = {"Santali"},
	["sau"] = {"Saleman"},
	["sav"] = {"Saafi-Saafi"},
	["saw"] = {"Sawi"},
	["sax"] = {"Sa"},
	["say"] = {"Saya"},
	["saz"] = {"Saurashtra"},
	["sba"] = {"Ngambay"},
	["sbb"] = {"Simbo"},
	["sbc"] = {"Kele (Papua New Guinea)"},
	["sbd"] = {"Southern Samo"},
	["sbe"] = {"Saliba"},
	["sbf"] = {"Chabu", "Shabo"},
	["sbg"] = {"Seget"},
	["sbh"] = {"Sori-Harengan"},
	["sbi"] = {"Seti"},
	["sbj"] = {"Surbakhal"},
	["sbk"] = {"Safwa"},
	["sbl"] = {"Botolan Sambal"},
	["sbm"] = {"Sagala"},
	["sbn"] = {"Sindhi Bhil"},
	["sbo"] = {"Sabüm"},
	["sbp"] = {"Sangu (Tanzania)"},
	["sbq"] = {"Sileibi"},
	["sbr"] = {"Sembakung Murut"},
	["sbs"] = {"Subiya"},
	["sbt"] = {"Kimki"},
	["sbu"] = {"Stod Bhoti"},
	["sbv"] = {"Sabine"},
	["sbw"] = {"Simba"},
	["sbx"] = {"Seberuang"},
	["sby"] = {"Soli"},
	["sbz"] = {"Sara Kaba"},
	["scb"] = {"Chut"},
	["sce"] = {"Dongxiang"},
	["scf"] = {"San Miguel Creole French"},
	["scg"] = {"Sanggau"},
	["sch"] = {"Sakachep"},
	["sci"] = {"Sri Lankan Creole Malay"},
	["sck"] = {"Sadri"},
	["scl"] = {"Shina"},
	["scn"] = {"Sicilian"},
	["sco"] = {"Scots"},
	["scp"] = {"Helambu Sherpa", "Hyolmo"},
	["scq"] = {"Sa'och"},
	["scs"] = {"North Slavey"},
	["sct"] = {"Southern Katang"},
	["scu"] = {"Shumcho"},
	["scv"] = {"Sheni"},
	["scw"] = {"Sha"},
	["scx"] = {"Sicel"},
	["sda"] = {"Toraja-Sa'dan"},
	["sdb"] = {"Shabak"},
	["sdc"] = {"Sassarese Sardinian"},
	["sde"] = {"Surubu"},
	["sdf"] = {"Sarli"},
	["sdg"] = {"Savi"},
	["sdh"] = {"Southern Kurdish"},
	["sdj"] = {"Suundi"},
	["sdk"] = {"Sos Kundi"},
	["sdl"] = {"Saudi Arabian Sign Language"},
	["sdm"] = {"Semandang"},
	["sdn"] = {"Gallurese Sardinian"},
	["sdo"] = {"Bukar-Sadung Bidayuh"},
	["sdp"] = {"Sherdukpen"},
	["sdr"] = {"Oraon Sadri"},
	["sds"] = {"Sened"},
	["sdt"] = {"Shuadit"},
	["sdu"] = {"Sarudu"},
	["sdx"] = {"Sibu Melanau"},
	["sdz"] = {"Sallands"},
	["sea"] = {"Semai"},
	["seb"] = {"Shempire Senoufo"},
	["sec"] = {"Sechelt"},
	["sed"] = {"Sedang"},
	["see"] = {"Seneca"},
	["sef"] = {"Cebaara Senoufo"},
	["seg"] = {"Segeju"},
	["seh"] = {"Sena"},
	["sei"] = {"Seri"},
	["sej"] = {"Sene"},
	["sek"] = {"Sekani"},
	["sel"] = {"Selkup"},
	["sen"] = {"Nanerigé Sénoufo"},
	["seo"] = {"Suarmin"},
	["sep"] = {"Sìcìté Sénoufo"},
	["seq"] = {"Senara Sénoufo"},
	["ser"] = {"Serrano"},
	["ses"] = {"Koyraboro Senni Songhai"},
	["set"] = {"Sentani"},
	["seu"] = {"Serui-Laut"},
	["sev"] = {"Nyarafolo Senoufo"},
	["sew"] = {"Sewa Bay"},
	["sey"] = {"Secoya"},
	["sez"] = {"Senthang Chin"},
	["sfb"] = {"French Belgian Sign Language", "Langue des signes de Belgique Francophone"},
	["sfe"] = {"Eastern Subanen"},
	["sfm"] = {"Small Flowery Miao"},
	["sfs"] = {"South African Sign Language"},
	["sfw"] = {"Sehwi"},
	["sga"] = {"Old Irish (to 900)"},
	["sgb"] = {"Mag-antsi Ayta"},
	["sgc"] = {"Kipsigis"},
	["sgd"] = {"Surigaonon"},
	["sge"] = {"Segai"},
	["sgg"] = {"Swiss-German Sign Language"},
	["sgh"] = {"Shughni"},
	["sgi"] = {"Suga"},
	["sgj"] = {"Surgujia"},
	["sgk"] = {"Sangkong"},
	["sgm"] = {"Singa"},
	["sgp"] = {"Singpho"},
	["sgr"] = {"Sangisari"},
	["sgs"] = {"Samogitian"},
	["sgt"] = {"Brokpake"},
	["sgu"] = {"Salas"},
	["sgw"] = {"Sebat Bet Gurage"},
	["sgx"] = {"Sierra Leone Sign Language"},
	["sgy"] = {"Sanglechi"},
	["sgz"] = {"Sursurunga"},
	["sha"] = {"Shall-Zwall"},
	["shb"] = {"Ninam"},
	["shc"] = {"Sonde"},
	["shd"] = {"Kundal Shahi"},
	["she"] = {"Sheko"},
	["shg"] = {"Shua"},
	["shh"] = {"Shoshoni"},
	["shi"] = {"Tachelhit"},
	["shj"] = {"Shatt"},
	["shk"] = {"Shilluk"},
	["shl"] = {"Shendu"},
	["shm"] = {"Shahrudi"},
	["shn"] = {"Shan"},
	["sho"] = {"Shanga"},
	["shp"] = {"Shipibo-Conibo"},
	["shq"] = {"Sala"},
	["shr"] = {"Shi"},
	["shs"] = {"Shuswap"},
	["sht"] = {"Shasta"},
	["shu"] = {"Chadian Arabic"},
	["shv"] = {"Shehri"},
	["shw"] = {"Shwai"},
	["shx"] = {"She"},
	["shy"] = {"Tachawit"},
	["shz"] = {"Syenara Senoufo"},
	["sia"] = {"Akkala Sami"},
	["sib"] = {"Sebop"},
	["sid"] = {"Sidamo"},
	["sie"] = {"Simaa"},
	["sif"] = {"Siamou"},
	["sig"] = {"Paasaal"},
	["sih"] = {"Sîshëë", "Zire"},
	["sii"] = {"Shom Peng"},
	["sij"] = {"Numbami"},
	["sik"] = {"Sikiana"},
	["sil"] = {"Tumulung Sisaala"},
	["sim"] = {"Mende (Papua New Guinea)"},
	["sin"] = {"Sinhala", "Sinhalese"},
	["sip"] = {"Sikkimese"},
	["siq"] = {"Sonia"},
	["sir"] = {"Siri"},
	["sis"] = {"Siuslaw"},
	["siu"] = {"Sinagen"},
	["siv"] = {"Sumariup"},
	["siw"] = {"Siwai"},
	["six"] = {"Sumau"},
	["siy"] = {"Sivandi"},
	["siz"] = {"Siwi"},
	["sja"] = {"Epena"},
	["sjb"] = {"Sajau Basap"},
	["sjd"] = {"Kildin Sami"},
	["sje"] = {"Pite Sami"},
	["sjg"] = {"Assangori"},
	["sjk"] = {"Kemi Sami"},
	["sjl"] = {"Miji", "Sajalong"},
	["sjm"] = {"Mapun"},
	["sjn"] = {"Sindarin"},
	["sjo"] = {"Xibe"},
	["sjp"] = {"Surjapuri"},
	["sjr"] = {"Siar-Lak"},
	["sjs"] = {"Senhaja De Srair"},
	["sjt"] = {"Ter Sami"},
	["sju"] = {"Ume Sami"},
	["sjw"] = {"Shawnee"},
	["ska"] = {"Skagit"},
	["skb"] = {"Saek"},
	["skc"] = {"Ma Manda"},
	["skd"] = {"Southern Sierra Miwok"},
	["ske"] = {"Seke (Vanuatu)"},
	["skf"] = {"Sakirabiá"},
	["skg"] = {"Sakalava Malagasy"},
	["skh"] = {"Sikule"},
	["ski"] = {"Sika"},
	["skj"] = {"Seke (Nepal)"},
	["skm"] = {"Kutong"},
	["skn"] = {"Kolibugan Subanon"},
	["sko"] = {"Seko Tengah"},
	["skp"] = {"Sekapan"},
	["skq"] = {"Sininkere"},
	["skr"] = {"Saraiki", "Seraiki"},
	["sks"] = {"Maia"},
	["skt"] = {"Sakata"},
	["sku"] = {"Sakao"},
	["skv"] = {"Skou"},
	["skw"] = {"Skepi Creole Dutch"},
	["skx"] = {"Seko Padang"},
	["sky"] = {"Sikaiana"},
	["skz"] = {"Sekar"},
	["slc"] = {"Sáliba"},
	["sld"] = {"Sissala"},
	["sle"] = {"Sholaga"},
	["slf"] = {"Swiss-Italian Sign Language"},
	["slg"] = {"Selungai Murut"},
	["slh"] = {"Southern Puget Sound Salish"},
	["sli"] = {"Lower Silesian"},
	["slj"] = {"Salumá"},
	["slk"] = {"Slovak"},
	["sll"] = {"Salt-Yui"},
	["slm"] = {"Pangutaran Sama"},
	["sln"] = {"Salinan"},
	["slp"] = {"Lamaholot"},
	["slq"] = {"Salchuq"},
	["slr"] = {"Salar"},
	["sls"] = {"Singapore Sign Language"},
	["slt"] = {"Sila"},
	["slu"] = {"Selaru"},
	["slv"] = {"Slovenian"},
	["slw"] = {"Sialum"},
	["slx"] = {"Salampasu"},
	["sly"] = {"Selayar"},
	["slz"] = {"Ma'ya"},
	["sma"] = {"Southern Sami"},
	["smb"] = {"Simbari"},
	["smc"] = {"Som"},
	["smd"] = {"Sama"},
	["sme"] = {"Northern Sami"},
	["smf"] = {"Auwe"},
	["smg"] = {"Simbali"},
	["smh"] = {"Samei"},
	["smj"] = {"Lule Sami"},
	["smk"] = {"Bolinao"},
	["sml"] = {"Central Sama"},
	["smm"] = {"Musasa"},
	["smn"] = {"Inari Sami"},
	["smo"] = {"Samoan"},
	["smp"] = {"Samaritan"},
	["smq"] = {"Samo"},
	["smr"] = {"Simeulue"},
	["sms"] = {"Skolt Sami"},
	["smt"] = {"Simte"},
	["smu"] = {"Somray"},
	["smv"] = {"Samvedi"},
	["smw"] = {"Sumbawa"},
	["smx"] = {"Samba"},
	["smy"] = {"Semnani"},
	["smz"] = {"Simeku"},
	["sna"] = {"Shona"},
	["snb"] = {"Sebuyau"},
	["snc"] = {"Sinaugoro"},
	["snd"] = {"Sindhi"},
	["sne"] = {"Bau Bidayuh"},
	["snf"] = {"Noon"},
	["sng"] = {"Sanga (Democratic Republic of Congo)"},
	["sni"] = {"Sensi"},
	["snj"] = {"Riverain Sango"},
	["snk"] = {"Soninke"},
	["snl"] = {"Sangil"},
	["snm"] = {"Southern Ma'di"},
	["snn"] = {"Siona"},
	["sno"] = {"Snohomish"},
	["snp"] = {"Siane"},
	["snq"] = {"Sangu (Gabon)"},
	["snr"] = {"Sihan"},
	["sns"] = {"Nahavaq", "South West Bay"},
	["snu"] = {"Senggi", "Viid"},
	["snv"] = {"Sa'ban"},
	["snw"] = {"Selee"},
	["snx"] = {"Sam"},
	["sny"] = {"Saniyo-Hiyewe"},
	["snz"] = {"Kou"},
	["soa"] = {"Thai Song"},
	["sob"] = {"Sobei"},
	["soc"] = {"So (Democratic Republic of Congo)"},
	["sod"] = {"Songoora"},
	["soe"] = {"Songomeno"},
	["sog"] = {"Sogdian"},
	["soh"] = {"Aka"},
	["soi"] = {"Sonha"},
	["soj"] = {"Soi"},
	["sok"] = {"Sokoro"},
	["sol"] = {"Solos"},
	["som"] = {"Somali"},
	["soo"] = {"Songo"},
	["sop"] = {"Songe"},
	["soq"] = {"Kanasi"},
	["sor"] = {"Somrai"},
	["sos"] = {"Seeku"},
	["sot"] = {"Southern Sotho"},
	["sou"] = {"Southern Thai"},
	["sov"] = {"Sonsorol"},
	["sow"] = {"Sowanda"},
	["sox"] = {"Swo"},
	["soy"] = {"Miyobe"},
	["soz"] = {"Temi"},
	["spa"] = {"Castilian", "Spanish"},
	["spb"] = {"Sepa (Indonesia)"},
	["spc"] = {"Sapé"},
	["spd"] = {"Saep"},
	["spe"] = {"Sepa (Papua New Guinea)"},
	["spg"] = {"Sian"},
	["spi"] = {"Saponi"},
	["spk"] = {"Sengo"},
	["spl"] = {"Selepet"},
	["spm"] = {"Akukem"},
	["spn"] = {"Sanapaná"},
	["spo"] = {"Spokane"},
	["spp"] = {"Supyire Senoufo"},
	["spq"] = {"Loreto-Ucayali Spanish"},
	["spr"] = {"Saparua"},
	["sps"] = {"Saposa"},
	["spt"] = {"Spiti Bhoti"},
	["spu"] = {"Sapuan"},
	["spv"] = {"Kosli", "Sambalpuri"},
	["spx"] = {"South Picene"},
	["spy"] = {"Sabaot"},
	["sqa"] = {"Shama-Sambuga"},
	["sqh"] = {"Shau"},
	["sqi"] = {"Albanian"},
	["sqk"] = {"Albanian Sign Language"},
	["sqm"] = {"Suma"},
	["sqn"] = {"Susquehannock"},
	["sqo"] = {"Sorkhei"},
	["sqq"] = {"Sou"},
	["sqr"] = {"Siculo Arabic"},
	["sqs"] = {"Sri Lankan Sign Language"},
	["sqt"] = {"Soqotri"},
	["squ"] = {"Squamish"},
	["sra"] = {"Saruga"},
	["srb"] = {"Sora"},
	["src"] = {"Logudorese Sardinian"},
	["srd"] = {"Sardinian"},
	["sre"] = {"Sara"},
	["srf"] = {"Nafi"},
	["srg"] = {"Sulod"},
	["srh"] = {"Sarikoli"},
	["sri"] = {"Siriano"},
	["srk"] = {"Serudung Murut"},
	["srl"] = {"Isirawa"},
	["srm"] = {"Saramaccan"},
	["srn"] = {"Sranan Tongo"},
	["sro"] = {"Campidanese Sardinian"},
	["srp"] = {"Serbian"},
	["srq"] = {"Sirionó"},
	["srr"] = {"Serer"},
	["srs"] = {"Sarsi"},
	["srt"] = {"Sauri"},
	["sru"] = {"Suruí"},
	["srv"] = {"Southern Sorsoganon"},
	["srw"] = {"Serua"},
	["srx"] = {"Sirmauri"},
	["sry"] = {"Sera"},
	["srz"] = {"Shahmirzadi"},
	["ssb"] = {"Southern Sama"},
	["ssc"] = {"Suba-Simbiti"},
	["ssd"] = {"Siroi"},
	["sse"] = {"Balangingi", "Bangingih Sama"},
	["ssf"] = {"Thao"},
	["ssg"] = {"Seimat"},
	["ssh"] = {"Shihhi Arabic"},
	["ssi"] = {"Sansi"},
	["ssj"] = {"Sausi"},
	["ssk"] = {"Sunam"},
	["ssl"] = {"Western Sisaala"},
	["ssm"] = {"Semnam"},
	["ssn"] = {"Waata"},
	["sso"] = {"Sissano"},
	["ssp"] = {"Spanish Sign Language"},
	["ssq"] = {"So'a"},
	["ssr"] = {"Swiss-French Sign Language"},
	["sss"] = {"Sô"},
	["sst"] = {"Sinasina"},
	["ssu"] = {"Susuami"},
	["ssv"] = {"Shark Bay"},
	["ssw"] = {"Swati"},
	["ssx"] = {"Samberigi"},
	["ssy"] = {"Saho"},
	["ssz"] = {"Sengseng"},
	["sta"] = {"Settla"},
	["stb"] = {"Northern Subanen"},
	["std"] = {"Sentinel"},
	["ste"] = {"Liana-Seti"},
	["stf"] = {"Seta"},
	["stg"] = {"Trieng"},
	["sth"] = {"Shelta"},
	["sti"] = {"Bulo Stieng"},
	["stj"] = {"Matya Samo"},
	["stk"] = {"Arammba"},
	["stl"] = {"Stellingwerfs"},
	["stm"] = {"Setaman"},
	["stn"] = {"Owa"},
	["sto"] = {"Stoney"},
	["stp"] = {"Southeastern Tepehuan"},
	["stq"] = {"Saterfriesisch"},
	["str"] = {"Straits Salish"},
	["sts"] = {"Shumashti"},
	["stt"] = {"Budeh Stieng"},
	["stu"] = {"Samtao"},
	["stv"] = {"Silt'e"},
	["stw"] = {"Satawalese"},
	["sty"] = {"Siberian Tatar"},
	["sua"] = {"Sulka"},
	["sub"] = {"Suku"},
	["suc"] = {"Western Subanon"},
	["sue"] = {"Suena"},
	["sug"] = {"Suganga"},
	["sui"] = {"Suki"},
	["suj"] = {"Shubi"},
	["suk"] = {"Sukuma"},
	["sun"] = {"Sundanese"},
	["suq"] = {"Suri"},
	["sur"] = {"Mwaghavul"},
	["sus"] = {"Susu"},
	["sut"] = {"Subtiaba"},
	["suv"] = {"Puroik"},
	["suw"] = {"Sumbwa"},
	["sux"] = {"Sumerian"},
	["suy"] = {"Suyá"},
	["suz"] = {"Sunwar"},
	["sva"] = {"Svan"},
	["svb"] = {"Ulau-Suain"},
	["svc"] = {"Vincentian Creole English"},
	["sve"] = {"Serili"},
	["svk"] = {"Slovakian Sign Language"},
	["svm"] = {"Slavomolisano"},
	["svs"] = {"Savosavo"},
	["svx"] = {"Skalvian"},
	["swa"] = {"Swahili (macrolanguage)"},
	["swb"] = {"Maore Comorian"},
	["swc"] = {"Congo Swahili"},
	["swe"] = {"Swedish"},
	["swf"] = {"Sere"},
	["swg"] = {"Swabian"},
	["swh"] = {"Kiswahili", "Swahili (individual language)"},
	["swi"] = {"Sui"},
	["swj"] = {"Sira"},
	["swk"] = {"Malawi Sena"},
	["swl"] = {"Swedish Sign Language"},
	["swm"] = {"Samosa"},
	["swn"] = {"Sawknah"},
	["swo"] = {"Shanenawa"},
	["swp"] = {"Suau"},
	["swq"] = {"Sharwa"},
	["swr"] = {"Saweru"},
	["sws"] = {"Seluwasan"},
	["swt"] = {"Sawila"},
	["swu"] = {"Suwawa"},
	["swv"] = {"Shekhawati"},
	["sww"] = {"Sowa"},
	["swx"] = {"Suruahá"},
	["swy"] = {"Sarua"},
	["sxb"] = {"Suba"},
	["sxc"] = {"Sicanian"},
	["sxe"] = {"Sighu"},
	["sxg"] = {"Shixing", "Shuhi"},
	["sxk"] = {"Southern Kalapuya"},
	["sxl"] = {"Selian"},
	["sxm"] = {"Samre"},
	["sxn"] = {"Sangir"},
	["sxo"] = {"Sorothaptic"},
	["sxr"] = {"Saaroa"},
	["sxs"] = {"Sasaru"},
	["sxu"] = {"Upper Saxon"},
	["sxw"] = {"Saxwe Gbe"},
	["sya"] = {"Siang"},
	["syb"] = {"Central Subanen"},
	["syc"] = {"Classical Syriac"},
	["syi"] = {"Seki"},
	["syk"] = {"Sukur"},
	["syl"] = {"Sylheti"},
	["sym"] = {"Maya Samo"},
	["syn"] = {"Senaya"},
	["syo"] = {"Suoy"},
	["syr"] = {"Syriac"},
	["sys"] = {"Sinyar"},
	["syw"] = {"Kagate"},
	["syx"] = {"Samay"},
	["syy"] = {"Al-Sayyid Bedouin Sign Language"},
	["sza"] = {"Semelai"},
	["szb"] = {"Ngalum"},
	["szc"] = {"Semaq Beri"},
	["szd"] = {"Seru"},
	["sze"] = {"Seze"},
	["szg"] = {"Sengele"},
	["szl"] = {"Silesian"},
	["szn"] = {"Sula"},
	["szp"] = {"Suabo"},
	["szs"] = {"Solomon Islands Sign Language"},
	["szv"] = {"Isu (Fako Division)"},
	["szw"] = {"Sawai"},
	["szy"] = {"Sakizaya"},
	["taa"] = {"Lower Tanana"},
	["tab"] = {"Tabassaran"},
	["tac"] = {"Lowland Tarahumara"},
	["tad"] = {"Tause"},
	["tae"] = {"Tariana"},
	["taf"] = {"Tapirapé"},
	["tag"] = {"Tagoi"},
	["tah"] = {"Tahitian"},
	["taj"] = {"Eastern Tamang"},
	["tak"] = {"Tala"},
	["tal"] = {"Tal"},
	["tam"] = {"Tamil"},
	["tan"] = {"Tangale"},
	["tao"] = {"Yami"},
	["tap"] = {"Taabwa"},
	["taq"] = {"Tamasheq"},
	["tar"] = {"Central Tarahumara"},
	["tas"] = {"Tay Boi"},
	["tat"] = {"Tatar"},
	["tau"] = {"Upper Tanana"},
	["tav"] = {"Tatuyo"},
	["taw"] = {"Tai"},
	["tax"] = {"Tamki"},
	["tay"] = {"Atayal"},
	["taz"] = {"Tocho"},
	["tba"] = {"Aikanã"},
	["tbb"] = {"Tapeba"},
	["tbc"] = {"Takia"},
	["tbd"] = {"Kaki Ae"},
	["tbe"] = {"Tanimbili"},
	["tbf"] = {"Mandara"},
	["tbg"] = {"North Tairora"},
	["tbh"] = {"Dharawal", "Thurawal"},
	["tbi"] = {"Gaam"},
	["tbj"] = {"Tiang"},
	["tbk"] = {"Calamian Tagbanwa"},
	["tbl"] = {"Tboli"},
	["tbm"] = {"Tagbu"},
	["tbn"] = {"Barro Negro Tunebo"},
	["tbo"] = {"Tawala"},
	["tbp"] = {"Diebroud", "Taworta"},
	["tbr"] = {"Tumtum"},
	["tbs"] = {"Tanguat"},
	["tbt"] = {"Tembo (Kitembo)"},
	["tbu"] = {"Tubar"},
	["tbv"] = {"Tobo"},
	["tbw"] = {"Tagbanwa"},
	["tbx"] = {"Kapin"},
	["tby"] = {"Tabaru"},
	["tbz"] = {"Ditammari"},
	["tca"] = {"Ticuna"},
	["tcb"] = {"Tanacross"},
	["tcc"] = {"Datooga"},
	["tcd"] = {"Tafi"},
	["tce"] = {"Southern Tutchone"},
	["tcf"] = {"Malinaltepec Me'phaa", "Malinaltepec Tlapanec"},
	["tcg"] = {"Tamagario"},
	["tch"] = {"Turks And Caicos Creole English"},
	["tci"] = {"Wára"},
	["tck"] = {"Tchitchege"},
	["tcl"] = {"Taman (Myanmar)"},
	["tcm"] = {"Tanahmerah"},
	["tcn"] = {"Tichurong"},
	["tco"] = {"Taungyo"},
	["tcp"] = {"Tawr Chin"},
	["tcq"] = {"Kaiy"},
	["tcs"] = {"Torres Strait Creole", "Yumplatok"},
	["tct"] = {"T'en"},
	["tcu"] = {"Southeastern Tarahumara"},
	["tcw"] = {"Tecpatlán Totonac"},
	["tcx"] = {"Toda"},
	["tcy"] = {"Tulu"},
	["tcz"] = {"Thado Chin"},
	["tda"] = {"Tagdal"},
	["tdb"] = {"Panchpargania"},
	["tdc"] = {"Emberá-Tadó"},
	["tdd"] = {"Tai Nüa"},
	["tde"] = {"Tiranige Diga Dogon"},
	["tdf"] = {"Talieng"},
	["tdg"] = {"Western Tamang"},
	["tdh"] = {"Thulung"},
	["tdi"] = {"Tomadino"},
	["tdj"] = {"Tajio"},
	["tdk"] = {"Tambas"},
	["tdl"] = {"Sur"},
	["tdm"] = {"Taruma"},
	["tdn"] = {"Tondano"},
	["tdo"] = {"Teme"},
	["tdq"] = {"Tita"},
	["tdr"] = {"Todrah"},
	["tds"] = {"Doutai"},
	["tdt"] = {"Tetun Dili"},
	["tdv"] = {"Toro"},
	["tdx"] = {"Tandroy-Mahafaly Malagasy"},
	["tdy"] = {"Tadyawan"},
	["tea"] = {"Temiar"},
	["teb"] = {"Tetete"},
	["tec"] = {"Terik"},
	["ted"] = {"Tepo Krumen"},
	["tee"] = {"Huehuetla Tepehua"},
	["tef"] = {"Teressa"},
	["teg"] = {"Teke-Tege"},
	["teh"] = {"Tehuelche"},
	["tei"] = {"Torricelli"},
	["tek"] = {"Ibali Teke"},
	["tel"] = {"Telugu"},
	["tem"] = {"Timne"},
	["ten"] = {"Tama (Colombia)"},
	["teo"] = {"Teso"},
	["tep"] = {"Tepecano"},
	["teq"] = {"Temein"},
	["ter"] = {"Tereno"},
	["tes"] = {"Tengger"},
	["tet"] = {"Tetum"},
	["teu"] = {"Soo"},
	["tev"] = {"Teor"},
	["tew"] = {"Tewa (USA)"},
	["tex"] = {"Tennet"},
	["tey"] = {"Tulishi"},
	["tez"] = {"Tetserret"},
	["tfi"] = {"Tofin Gbe"},
	["tfn"] = {"Tanaina"},
	["tfo"] = {"Tefaro"},
	["tfr"] = {"Teribe"},
	["tft"] = {"Ternate"},
	["tga"] = {"Sagalla"},
	["tgb"] = {"Tobilung"},
	["tgc"] = {"Tigak"},
	["tgd"] = {"Ciwogai"},
	["tge"] = {"Eastern Gorkha Tamang"},
	["tgf"] = {"Chalikha"},
	["tgh"] = {"Tobagonian Creole English"},
	["tgi"] = {"Lawunuia"},
	["tgj"] = {"Tagin"},
	["tgk"] = {"Tajik"},
	["tgl"] = {"Tagalog"},
	["tgn"] = {"Tandaganon"},
	["tgo"] = {"Sudest"},
	["tgp"] = {"Tangoa"},
	["tgq"] = {"Tring"},
	["tgr"] = {"Tareng"},
	["tgs"] = {"Nume"},
	["tgt"] = {"Central Tagbanwa"},
	["tgu"] = {"Tanggu"},
	["tgv"] = {"Tingui-Boto"},
	["tgw"] = {"Tagwana Senoufo"},
	["tgx"] = {"Tagish"},
	["tgy"] = {"Togoyo"},
	["tgz"] = {"Tagalaka"},
	["tha"] = {"Thai"},
	["thd"] = {"Kuuk Thaayorre", "Thayore"},
	["the"] = {"Chitwania Tharu"},
	["thf"] = {"Thangmi"},
	["thh"] = {"Northern Tarahumara"},
	["thi"] = {"Tai Long"},
	["thk"] = {"Kitharaka", "Tharaka"},
	["thl"] = {"Dangaura Tharu"},
	["thm"] = {"Aheu"},
	["thn"] = {"Thachanadan"},
	["thp"] = {"Thompson"},
	["thq"] = {"Kochila Tharu"},
	["thr"] = {"Rana Tharu"},
	["ths"] = {"Thakali"},
	["tht"] = {"Tahltan"},
	["thu"] = {"Thuri"},
	["thv"] = {"Tahaggart Tamahaq"},
	["thw"] = {"Thudam"},
	["thy"] = {"Tha"},
	["thz"] = {"Tayart Tamajeq"},
	["tia"] = {"Tidikelt Tamazight"},
	["tic"] = {"Tira"},
	["tif"] = {"Tifal"},
	["tig"] = {"Tigre"},
	["tih"] = {"Timugon Murut"},
	["tii"] = {"Tiene"},
	["tij"] = {"Tilung"},
	["tik"] = {"Tikar"},
	["til"] = {"Tillamook"},
	["tim"] = {"Timbe"},
	["tin"] = {"Tindi"},
	["tio"] = {"Teop"},
	["tip"] = {"Trimuris"},
	["tiq"] = {"Tiéfo"},
	["tir"] = {"Tigrinya"},
	["tis"] = {"Masadiit Itneg"},
	["tit"] = {"Tinigua"},
	["tiu"] = {"Adasen"},
	["tiv"] = {"Tiv"},
	["tiw"] = {"Tiwi"},
	["tix"] = {"Southern Tiwa"},
	["tiy"] = {"Tiruray"},
	["tiz"] = {"Tai Hongjin"},
	["tja"] = {"Tajuasohn"},
	["tjg"] = {"Tunjung"},
	["tji"] = {"Northern Tujia"},
	["tjj"] = {"Tjungundji"},
	["tjl"] = {"Tai Laing"},
	["tjm"] = {"Timucua"},
	["tjn"] = {"Tonjon"},
	["tjo"] = {"Temacine Tamazight"},
	["tjp"] = {"Tjupany"},
	["tjs"] = {"Southern Tujia"},
	["tju"] = {"Tjurruru"},
	["tjw"] = {"Djabwurrung"},
	["tka"] = {"Truká"},
	["tkb"] = {"Buksa"},
	["tkd"] = {"Tukudede"},
	["tke"] = {"Takwane"},
	["tkf"] = {"Tukumanféd"},
	["tkg"] = {"Tesaka Malagasy"},
	["tkl"] = {"Tokelau"},
	["tkm"] = {"Takelma"},
	["tkn"] = {"Toku-No-Shima"},
	["tkp"] = {"Tikopia"},
	["tkq"] = {"Tee"},
	["tkr"] = {"Tsakhur"},
	["tks"] = {"Takestani"},
	["tkt"] = {"Kathoriya Tharu"},
	["tku"] = {"Upper Necaxa Totonac"},
	["tkv"] = {"Mur Pano"},
	["tkw"] = {"Teanu"},
	["tkx"] = {"Tangko"},
	["tkz"] = {"Takua"},
	["tla"] = {"Southwestern Tepehuan"},
	["tlb"] = {"Tobelo"},
	["tlc"] = {"Yecuatla Totonac"},
	["tld"] = {"Talaud"},
	["tlf"] = {"Telefol"},
	["tlg"] = {"Tofanma"},
	["tlh"] = {"Klingon", "tlhIngan Hol"},
	["tli"] = {"Tlingit"},
	["tlj"] = {"Talinga-Bwisi"},
	["tlk"] = {"Taloki"},
	["tll"] = {"Tetela"},
	["tlm"] = {"Tolomako"},
	["tln"] = {"Talondo'"},
	["tlo"] = {"Talodi"},
	["tlp"] = {"Filomena Mata-Coahuitlán Totonac"},
	["tlq"] = {"Tai Loi"},
	["tlr"] = {"Talise"},
	["tls"] = {"Tambotalo"},
	["tlt"] = {"Sou Nama", "Teluti"},
	["tlu"] = {"Tulehu"},
	["tlv"] = {"Taliabu"},
	["tlx"] = {"Khehek"},
	["tly"] = {"Talysh"},
	["tma"] = {"Tama (Chad)"},
	["tmb"] = {"Avava", "Katbol"},
	["tmc"] = {"Tumak"},
	["tmd"] = {"Haruai"},
	["tme"] = {"Tremembé"},
	["tmf"] = {"Toba-Maskoy"},
	["tmg"] = {"Ternateño"},
	["tmh"] = {"Tamashek"},
	["tmi"] = {"Tutuba"},
	["tmj"] = {"Samarokena"},
	["tmk"] = {"Northwestern Tamang"},
	["tml"] = {"Tamnim Citak"},
	["tmm"] = {"Tai Thanh"},
	["tmn"] = {"Taman (Indonesia)"},
	["tmo"] = {"Temoq"},
	["tmq"] = {"Tumleo"},
	["tmr"] = {"Jewish Babylonian Aramaic (ca. 200-1200 CE)"},
	["tms"] = {"Tima"},
	["tmt"] = {"Tasmate"},
	["tmu"] = {"Iau"},
	["tmv"] = {"Tembo (Motembo)"},
	["tmw"] = {"Temuan"},
	["tmy"] = {"Tami"},
	["tmz"] = {"Tamanaku"},
	["tna"] = {"Tacana"},
	["tnb"] = {"Western Tunebo"},
	["tnc"] = {"Tanimuca-Retuarã"},
	["tnd"] = {"Angosturas Tunebo"},
	["tng"] = {"Tobanga"},
	["tnh"] = {"Maiani"},
	["tni"] = {"Tandia"},
	["tnk"] = {"Kwamera"},
	["tnl"] = {"Lenakel"},
	["tnm"] = {"Tabla"},
	["tnn"] = {"North Tanna"},
	["tno"] = {"Toromono"},
	["tnp"] = {"Whitesands"},
	["tnq"] = {"Taino"},
	["tnr"] = {"Ménik"},
	["tns"] = {"Tenis"},
	["tnt"] = {"Tontemboan"},
	["tnu"] = {"Tay Khang"},
	["tnv"] = {"Tangchangya"},
	["tnw"] = {"Tonsawang"},
	["tnx"] = {"Tanema"},
	["tny"] = {"Tongwe"},
	["tnz"] = {"Ten'edn"},
	["tob"] = {"Toba"},
	["toc"] = {"Coyutla Totonac"},
	["tod"] = {"Toma"},
	["tof"] = {"Gizrra"},
	["tog"] = {"Tonga (Nyasa)"},
	["toh"] = {"Gitonga"},
	["toi"] = {"Tonga (Zambia)"},
	["toj"] = {"Tojolabal"},
	["tol"] = {"Tolowa"},
	["tom"] = {"Tombulu"},
	["ton"] = {"Tonga (Tonga Islands)"},
	["too"] = {"Xicotepec De Juárez Totonac"},
	["top"] = {"Papantla Totonac"},
	["toq"] = {"Toposa"},
	["tor"] = {"Togbo-Vara Banda"},
	["tos"] = {"Highland Totonac"},
	["tou"] = {"Tho"},
	["tov"] = {"Upper Taromi"},
	["tow"] = {"Jemez"},
	["tox"] = {"Tobian"},
	["toy"] = {"Topoiyo"},
	["toz"] = {"To"},
	["tpa"] = {"Taupota"},
	["tpc"] = {"Azoyú Me'phaa", "Azoyú Tlapanec"},
	["tpe"] = {"Tippera"},
	["tpf"] = {"Tarpia"},
	["tpg"] = {"Kula"},
	["tpi"] = {"Tok Pisin"},
	["tpj"] = {"Tapieté"},
	["tpk"] = {"Tupinikin"},
	["tpl"] = {"Tlacoapa Me'phaa", "Tlacoapa Tlapanec"},
	["tpm"] = {"Tampulma"},
	["tpn"] = {"Tupinambá"},
	["tpo"] = {"Tai Pao"},
	["tpp"] = {"Pisaflores Tepehua"},
	["tpq"] = {"Tukpa"},
	["tpr"] = {"Tuparí"},
	["tpt"] = {"Tlachichilco Tepehua"},
	["tpu"] = {"Tampuan"},
	["tpv"] = {"Tanapag"},
	["tpw"] = {"Tupí"},
	["tpx"] = {"Acatepec Me'phaa", "Acatepec Tlapanec"},
	["tpy"] = {"Trumai"},
	["tpz"] = {"Tinputz"},
	["tqb"] = {"Tembé"},
	["tql"] = {"Lehali"},
	["tqm"] = {"Turumsa"},
	["tqn"] = {"Tenino"},
	["tqo"] = {"Toaripi"},
	["tqp"] = {"Tomoip"},
	["tqq"] = {"Tunni"},
	["tqr"] = {"Torona"},
	["tqt"] = {"Western Totonac"},
	["tqu"] = {"Touo"},
	["tqw"] = {"Tonkawa"},
	["tra"] = {"Tirahi"},
	["trb"] = {"Terebu"},
	["trc"] = {"Copala Triqui"},
	["trd"] = {"Turi"},
	["tre"] = {"East Tarangan"},
	["trf"] = {"Trinidadian Creole English"},
	["trg"] = {"Lishán Didán"},
	["trh"] = {"Turaka"},
	["tri"] = {"Trió"},
	["trj"] = {"Toram"},
	["trl"] = {"Traveller Scottish"},
	["trm"] = {"Tregami"},
	["trn"] = {"Trinitario"},
	["tro"] = {"Tarao Naga"},
	["trp"] = {"Kok Borok"},
	["trq"] = {"San Martín Itunyoso Triqui"},
	["trr"] = {"Taushiro"},
	["trs"] = {"Chicahuaxtla Triqui"},
	["trt"] = {"Tunggare"},
	["tru"] = {"Surayt", "Turoyo"},
	["trv"] = {"Taroko"},
	["trw"] = {"Torwali"},
	["trx"] = {"Tringgus-Sembaan Bidayuh"},
	["try"] = {"Turung"},
	["trz"] = {"Torá"},
	["tsa"] = {"Tsaangi"},
	["tsb"] = {"Tsamai"},
	["tsc"] = {"Tswa"},
	["tsd"] = {"Tsakonian"},
	["tse"] = {"Tunisian Sign Language"},
	["tsg"] = {"Tausug"},
	["tsh"] = {"Tsuvan"},
	["tsi"] = {"Tsimshian"},
	["tsj"] = {"Tshangla"},
	["tsk"] = {"Tseku"},
	["tsl"] = {"Ts'ün-Lao"},
	["tsm"] = {"Türk İşaret Dili", "Turkish Sign Language"},
	["tsn"] = {"Tswana"},
	["tso"] = {"Tsonga"},
	["tsp"] = {"Northern Toussian"},
	["tsq"] = {"Thai Sign Language"},
	["tsr"] = {"Akei"},
	["tss"] = {"Taiwan Sign Language"},
	["tst"] = {"Tondi Songway Kiini"},
	["tsu"] = {"Tsou"},
	["tsv"] = {"Tsogo"},
	["tsw"] = {"Tsishingini"},
	["tsx"] = {"Mubami"},
	["tsy"] = {"Tebul Sign Language"},
	["tsz"] = {"Purepecha"},
	["tta"] = {"Tutelo"},
	["ttb"] = {"Gaa"},
	["ttc"] = {"Tektiteko"},
	["ttd"] = {"Tauade"},
	["tte"] = {"Bwanabwana"},
	["ttf"] = {"Tuotomb"},
	["ttg"] = {"Tutong"},
	["tth"] = {"Upper Ta'oih"},
	["tti"] = {"Tobati"},
	["ttj"] = {"Tooro"},
	["ttk"] = {"Totoro"},
	["ttl"] = {"Totela"},
	["ttm"] = {"Northern Tutchone"},
	["ttn"] = {"Towei"},
	["tto"] = {"Lower Ta'oih"},
	["ttp"] = {"Tombelala"},
	["ttq"] = {"Tawallammat Tamajaq"},
	["ttr"] = {"Tera"},
	["tts"] = {"Northeastern Thai"},
	["ttt"] = {"Muslim Tat"},
	["ttu"] = {"Torau"},
	["ttv"] = {"Titan"},
	["ttw"] = {"Long Wat"},
	["tty"] = {"Sikaritai"},
	["ttz"] = {"Tsum"},
	["tua"] = {"Wiarumus"},
	["tub"] = {"Tübatulabal"},
	["tuc"] = {"Mutu"},
	["tud"] = {"Tuxá"},
	["tue"] = {"Tuyuca"},
	["tuf"] = {"Central Tunebo"},
	["tug"] = {"Tunia"},
	["tuh"] = {"Taulil"},
	["tui"] = {"Tupuri"},
	["tuj"] = {"Tugutil"},
	["tuk"] = {"Turkmen"},
	["tul"] = {"Tula"},
	["tum"] = {"Tumbuka"},
	["tun"] = {"Tunica"},
	["tuo"] = {"Tucano"},
	["tuq"] = {"Tedaga"},
	["tur"] = {"Turkish"},
	["tus"] = {"Tuscarora"},
	["tuu"] = {"Tututni"},
	["tuv"] = {"Turkana"},
	["tux"] = {"Tuxináwa"},
	["tuy"] = {"Tugen"},
	["tuz"] = {"Turka"},
	["tva"] = {"Vaghua"},
	["tvd"] = {"Tsuvadi"},
	["tve"] = {"Te'un"},
	["tvk"] = {"Southeast Ambrym"},
	["tvl"] = {"Tuvalu"},
	["tvm"] = {"Tela-Masbuar"},
	["tvn"] = {"Tavoyan"},
	["tvo"] = {"Tidore"},
	["tvs"] = {"Taveta"},
	["tvt"] = {"Tutsa Naga"},
	["tvu"] = {"Tunen"},
	["tvw"] = {"Sedoa"},
	["tvx"] = {"Taivoan"},
	["tvy"] = {"Timor Pidgin"},
	["twa"] = {"Twana"},
	["twb"] = {"Western Tawbuid"},
	["twc"] = {"Teshenawa"},
	["twd"] = {"Twents"},
	["twe"] = {"Tewa (Indonesia)"},
	["twf"] = {"Northern Tiwa"},
	["twg"] = {"Tereweng"},
	["twh"] = {"Tai Dón"},
	["twi"] = {"Twi"},
	["twl"] = {"Tawara"},
	["twm"] = {"Tawang Monpa"},
	["twn"] = {"Twendi"},
	["two"] = {"Tswapong"},
	["twp"] = {"Ere"},
	["twq"] = {"Tasawaq"},
	["twr"] = {"Southwestern Tarahumara"},
	["twt"] = {"Turiwára"},
	["twu"] = {"Termanu"},
	["tww"] = {"Tuwari"},
	["twx"] = {"Tewe"},
	["twy"] = {"Tawoyan"},
	["txa"] = {"Tombonuo"},
	["txb"] = {"Tokharian B"},
	["txc"] = {"Tsetsaut"},
	["txe"] = {"Totoli"},
	["txg"] = {"Tangut"},
	["txh"] = {"Thracian"},
	["txi"] = {"Ikpeng"},
	["txj"] = {"Tarjumo"},
	["txm"] = {"Tomini"},
	["txn"] = {"West Tarangan"},
	["txo"] = {"Toto"},
	["txq"] = {"Tii"},
	["txr"] = {"Tartessian"},
	["txs"] = {"Tonsea"},
	["txt"] = {"Citak"},
	["txu"] = {"Kayapó"},
	["txx"] = {"Tatana"},
	["txy"] = {"Tanosy Malagasy"},
	["tya"] = {"Tauya"},
	["tye"] = {"Kyanga"},
	["tyh"] = {"O'du"},
	["tyi"] = {"Teke-Tsaayi"},
	["tyj"] = {"Tai Do", "Tai Yo"},
	["tyl"] = {"Thu Lao"},
	["tyn"] = {"Kombai"},
	["typ"] = {"Thaypan"},
	["tyr"] = {"Tai Daeng"},
	["tys"] = {"Tày Sa Pa"},
	["tyt"] = {"Tày Tac"},
	["tyu"] = {"Kua"},
	["tyv"] = {"Tuvinian"},
	["tyx"] = {"Teke-Tyee"},
	["tyz"] = {"Tày"},
	["tza"] = {"Tanzanian Sign Language"},
	["tzh"] = {"Tzeltal"},
	["tzj"] = {"Tz'utujil"},
	["tzl"] = {"Talossan"},
	["tzm"] = {"Central Atlas Tamazight"},
	["tzn"] = {"Tugun"},
	["tzo"] = {"Tzotzil"},
	["tzx"] = {"Tabriak"},
	["uam"] = {"Uamué"},
	["uan"] = {"Kuan"},
	["uar"] = {"Tairuma"},
	["uba"] = {"Ubang"},
	["ubi"] = {"Ubi"},
	["ubl"] = {"Buhi'non Bikol"},
	["ubr"] = {"Ubir"},
	["ubu"] = {"Umbu-Ungu"},
	["uby"] = {"Ubykh"},
	["uda"] = {"Uda"},
	["ude"] = {"Udihe"},
	["udg"] = {"Muduga"},
	["udi"] = {"Udi"},
	["udj"] = {"Ujir"},
	["udl"] = {"Wuzlam"},
	["udm"] = {"Udmurt"},
	["udu"] = {"Uduk"},
	["ues"] = {"Kioko"},
	["ufi"] = {"Ufim"},
	["uga"] = {"Ugaritic"},
	["ugb"] = {"Kuku-Ugbanh"},
	["uge"] = {"Ughele"},
	["ugn"] = {"Ugandan Sign Language"},
	["ugo"] = {"Ugong"},
	["ugy"] = {"Uruguayan Sign Language"},
	["uha"] = {"Uhami"},
	["uhn"] = {"Damal"},
	["uig"] = {"Uighur", "Uyghur"},
	["uis"] = {"Uisai"},
	["uiv"] = {"Iyive"},
	["uji"] = {"Tanjijili"},
	["uka"] = {"Kaburi"},
	["ukg"] = {"Ukuriguma"},
	["ukh"] = {"Ukhwejo"},
	["ukk"] = {"Muak Sa-aak"},
	["ukl"] = {"Ukrainian Sign Language"},
	["ukp"] = {"Ukpe-Bayobiri"},
	["ukq"] = {"Ukwa"},
	["ukr"] = {"Ukrainian"},
	["uks"] = {"Kaapor Sign Language", "Urubú-Kaapor Sign Language"},
	["uku"] = {"Ukue"},
	["ukw"] = {"Ukwuani-Aboh-Ndoni"},
	["uky"] = {"Kuuk-Yak"},
	["ula"] = {"Fungwa"},
	["ulb"] = {"Ulukwumi"},
	["ulc"] = {"Ulch"},
	["ule"] = {"Lule"},
	["ulf"] = {"Afra", "Usku"},
	["uli"] = {"Ulithian"},
	["ulk"] = {"Meriam Mir"},
	["ull"] = {"Ullatan"},
	["ulm"] = {"Ulumanda'"},
	["uln"] = {"Unserdeutsch"},
	["ulu"] = {"Uma' Lung"},
	["ulw"] = {"Ulwa"},
	["uma"] = {"Umatilla"},
	["umb"] = {"Umbundu"},
	["umc"] = {"Marrucinian"},
	["umd"] = {"Umbindhamu"},
	["umg"] = {"Morrobalama", "Umbuygamu"},
	["umi"] = {"Ukit"},
	["umm"] = {"Umon"},
	["umn"] = {"Makyan Naga"},
	["umo"] = {"Umotína"},
	["ump"] = {"Umpila"},
	["umr"] = {"Umbugarla"},
	["ums"] = {"Pendau"},
	["umu"] = {"Munsee"},
	["una"] = {"North Watut"},
	["und"] = {"Undetermined"},
	["une"] = {"Uneme"},
	["ung"] = {"Ngarinyin"},
	["unk"] = {"Enawené-Nawé"},
	["unm"] = {"Unami"},
	["unn"] = {"Kurnai"},
	["unr"] = {"Mundari"},
	["unu"] = {"Unubahe"},
	["unx"] = {"Munda"},
	["unz"] = {"Unde Kaili"},
	["upi"] = {"Umeda"},
	["upv"] = {"Uripiv-Wala-Rano-Atchin"},
	["ura"] = {"Urarina"},
	["urb"] = {"Kaapor", "Urubú-Kaapor"},
	["urc"] = {"Urningangg"},
	["urd"] = {"Urdu"},
	["ure"] = {"Uru"},
	["urf"] = {"Uradhi"},
	["urg"] = {"Urigina"},
	["urh"] = {"Urhobo"},
	["uri"] = {"Urim"},
	["urk"] = {"Urak Lawoi'"},
	["url"] = {"Urali"},
	["urm"] = {"Urapmin"},
	["urn"] = {"Uruangnirin"},
	["uro"] = {"Ura (Papua New Guinea)"},
	["urp"] = {"Uru-Pa-In"},
	["urr"] = {"Lehalurup", "Löyöp"},
	["urt"] = {"Urat"},
	["uru"] = {"Urumi"},
	["urv"] = {"Uruava"},
	["urw"] = {"Sop"},
	["urx"] = {"Urimo"},
	["ury"] = {"Orya"},
	["urz"] = {"Uru-Eu-Wau-Wau"},
	["usa"] = {"Usarufa"},
	["ush"] = {"Ushojo"},
	["usi"] = {"Usui"},
	["usk"] = {"Usaghade"},
	["usp"] = {"Uspanteco"},
	["uss"] = {"us-Saare"},
	["usu"] = {"Uya"},
	["uta"] = {"Otank"},
	["ute"] = {"Ute-Southern Paiute"},
	["uth"] = {"ut-Hun"},
	["utp"] = {"Amba (Solomon Islands)"},
	["utr"] = {"Etulo"},
	["utu"] = {"Utu"},
	["uum"] = {"Urum"},
	["uun"] = {"Kulon-Pazeh"},
	["uur"] = {"Ura (Vanuatu)"},
	["uuu"] = {"U"},
	["uve"] = {"Fagauvea", "West Uvean"},
	["uvh"] = {"Uri"},
	["uvl"] = {"Lote"},
	["uwa"] = {"Kuku-Uwanh"},
	["uya"] = {"Doko-Uyanga"},
	["uzb"] = {"Uzbek"},
	["uzn"] = {"Northern Uzbek"},
	["uzs"] = {"Southern Uzbek"},
	["vaa"] = {"Vaagri Booli"},
	["vae"] = {"Vale"},
	["vaf"] = {"Vafsi"},
	["vag"] = {"Vagla"},
	["vah"] = {"Varhadi-Nagpuri"},
	["vai"] = {"Vai"},
	["vaj"] = {"Northwestern ǃKung", "Sekele", "Vasekele"},
	["val"] = {"Vehes"},
	["vam"] = {"Vanimo"},
	["van"] = {"Valman"},
	["vao"] = {"Vao"},
	["vap"] = {"Vaiphei"},
	["var"] = {"Huarijio"},
	["vas"] = {"Vasavi"},
	["vau"] = {"Vanuma"},
	["vav"] = {"Varli"},
	["vay"] = {"Wayu"},
	["vbb"] = {"Southeast Babar"},
	["vbk"] = {"Southwestern Bontok"},
	["vec"] = {"Venetian"},
	["ved"] = {"Veddah"},
	["vel"] = {"Veluws"},
	["vem"] = {"Vemgo-Mabas"},
	["ven"] = {"Venda"},
	["veo"] = {"Ventureño"},
	["vep"] = {"Veps"},
	["ver"] = {"Mom Jango"},
	["vgr"] = {"Vaghri"},
	["vgt"] = {"Flemish Sign Language", "Vlaamse Gebarentaal"},
	["vic"] = {"Virgin Islands Creole English"},
	["vid"] = {"Vidunda"},
	["vie"] = {"Vietnamese"},
	["vif"] = {"Vili"},
	["vig"] = {"Viemo"},
	["vil"] = {"Vilela"},
	["vin"] = {"Vinza"},
	["vis"] = {"Vishavan"},
	["vit"] = {"Viti"},
	["viv"] = {"Iduna"},
	["vka"] = {"Kariyarra"},
	["vki"] = {"Ija-Zuba"},
	["vkj"] = {"Kujarge"},
	["vkk"] = {"Kaur"},
	["vkl"] = {"Kulisusu"},
	["vkm"] = {"Kamakan"},
	["vko"] = {"Kodeoha"},
	["vkp"] = {"Korlai Creole Portuguese"},
	["vkt"] = {"Tenggarong Kutai Malay"},
	["vku"] = {"Kurrama"},
	["vlp"] = {"Valpei"},
	["vls"] = {"Vlaams"},
	["vma"] = {"Martuyhunira"},
	["vmb"] = {"Barbaram"},
	["vmc"] = {"Juxtlahuaca Mixtec"},
	["vmd"] = {"Mudu Koraga"},
	["vme"] = {"East Masela"},
	["vmf"] = {"Mainfränkisch"},
	["vmg"] = {"Lungalunga"},
	["vmh"] = {"Maraghei"},
	["vmi"] = {"Miwa"},
	["vmj"] = {"Ixtayutla Mixtec"},
	["vmk"] = {"Makhuwa-Shirima"},
	["vml"] = {"Malgana"},
	["vmm"] = {"Mitlatongo Mixtec"},
	["vmp"] = {"Soyaltepec Mazatec"},
	["vmq"] = {"Soyaltepec Mixtec"},
	["vmr"] = {"Marenje"},
	["vms"] = {"Moksela"},
	["vmu"] = {"Muluridyi"},
	["vmv"] = {"Valley Maidu"},
	["vmw"] = {"Makhuwa"},
	["vmx"] = {"Tamazola Mixtec"},
	["vmy"] = {"Ayautla Mazatec"},
	["vmz"] = {"Mazatlán Mazatec"},
	["vnk"] = {"Lovono", "Vano"},
	["vnm"] = {"Neve'ei", "Vinmavis"},
	["vnp"] = {"Vunapu"},
	["vol"] = {"Volapük"},
	["vor"] = {"Voro"},
	["vot"] = {"Votic"},
	["vra"] = {"Vera'a"},
	["vro"] = {"Võro"},
	["vrs"] = {"Varisi"},
	["vrt"] = {"Banam Bay", "Burmbar"},
	["vsi"] = {"Moldova Sign Language"},
	["vsl"] = {"Venezuelan Sign Language"},
	["vsv"] = {"Llengua de signes valenciana", "Valencian Sign Language"},
	["vto"] = {"Vitou"},
	["vum"] = {"Vumbu"},
	["vun"] = {"Vunjo"},
	["vut"] = {"Vute"},
	["vwa"] = {"Awa (China)"},
	["waa"] = {"Walla Walla"},
	["wab"] = {"Wab"},
	["wac"] = {"Wasco-Wishram"},
	["wad"] = {"Wandamen"},
	["wae"] = {"Walser"},
	["waf"] = {"Wakoná"},
	["wag"] = {"Wa'ema"},
	["wah"] = {"Watubela"},
	["wai"] = {"Wares"},
	["waj"] = {"Waffa"},
	["wal"] = {"Wolaitta", "Wolaytta"},
	["wam"] = {"Wampanoag"},
	["wan"] = {"Wan"},
	["wao"] = {"Wappo"},
	["wap"] = {"Wapishana"},
	["waq"] = {"Wagiman"},
	["war"] = {"Waray (Philippines)"},
	["was"] = {"Washo"},
	["wat"] = {"Kaninuwa"},
	["wau"] = {"Waurá"},
	["wav"] = {"Waka"},
	["waw"] = {"Waiwai"},
	["wax"] = {"Marangis", "Watam"},
	["way"] = {"Wayana"},
	["waz"] = {"Wampur"},
	["wba"] = {"Warao"},
	["wbb"] = {"Wabo"},
	["wbe"] = {"Waritai"},
	["wbf"] = {"Wara"},
	["wbh"] = {"Wanda"},
	["wbi"] = {"Vwanji"},
	["wbj"] = {"Alagwa"},
	["wbk"] = {"Waigali"},
	["wbl"] = {"Wakhi"},
	["wbm"] = {"Wa"},
	["wbp"] = {"Warlpiri"},
	["wbq"] = {"Waddar"},
	["wbr"] = {"Wagdi"},
	["wbs"] = {"West Bengal Sign Language"},
	["wbt"] = {"Warnman"},
	["wbv"] = {"Wajarri"},
	["wbw"] = {"Woi"},
	["wca"] = {"Yanomámi"},
	["wci"] = {"Waci Gbe"},
	["wdd"] = {"Wandji"},
	["wdg"] = {"Wadaginam"},
	["wdj"] = {"Wadjiginy"},
	["wdk"] = {"Wadikali"},
	["wdu"] = {"Wadjigu"},
	["wdy"] = {"Wadjabangayi"},
	["wea"] = {"Wewaw"},
	["wec"] = {"Wè Western"},
	["wed"] = {"Wedau"},
	["weg"] = {"Wergaia"},
	["weh"] = {"Weh"},
	["wei"] = {"Kiunum"},
	["wem"] = {"Weme Gbe"},
	["weo"] = {"Wemale"},
	["wep"] = {"Westphalien"},
	["wer"] = {"Weri"},
	["wes"] = {"Cameroon Pidgin"},
	["wet"] = {"Perai"},
	["weu"] = {"Rawngtu Chin"},
	["wew"] = {"Wejewa"},
	["wfg"] = {"Yafi", "Zorop"},
	["wga"] = {"Wagaya"},
	["wgb"] = {"Wagawaga"},
	["wgg"] = {"Wangganguru", "Wangkangurru"},
	["wgi"] = {"Wahgi"},
	["wgo"] = {"Waigeo"},
	["wgu"] = {"Wirangu"},
	["wgy"] = {"Warrgamay"},
	["wha"] = {"Manusela", "Sou Upaa"},
	["whg"] = {"North Wahgi"},
	["whk"] = {"Wahau Kenyah"},
	["whu"] = {"Wahau Kayan"},
	["wib"] = {"Southern Toussian"},
	["wic"] = {"Wichita"},
	["wie"] = {"Wik-Epa"},
	["wif"] = {"Wik-Keyangan"},
	["wig"] = {"Wik Ngathan"},
	["wih"] = {"Wik-Me'anha"},
	["wii"] = {"Minidien"},
	["wij"] = {"Wik-Iiyanh"},
	["wik"] = {"Wikalkan"},
	["wil"] = {"Wilawila"},
	["wim"] = {"Wik-Mungkan"},
	["win"] = {"Ho-Chunk"},
	["wir"] = {"Wiraféd"},
	["wiu"] = {"Wiru"},
	["wiv"] = {"Vitu"},
	["wiy"] = {"Wiyot"},
	["wja"] = {"Waja"},
	["wji"] = {"Warji"},
	["wka"] = {"Kw'adza"},
	["wkb"] = {"Kumbaran"},
	["wkd"] = {"Mo", "Wakde"},
	["wkl"] = {"Kalanadi"},
	["wkr"] = {"Keerray-Woorroong"},
	["wku"] = {"Kunduvadi"},
	["wkw"] = {"Wakawaka"},
	["wky"] = {"Wangkayutyuru"},
	["wla"] = {"Walio"},
	["wlc"] = {"Mwali Comorian"},
	["wle"] = {"Wolane"},
	["wlg"] = {"Kunbarlang"},
	["wli"] = {"Waioli"},
	["wlk"] = {"Wailaki"},
	["wll"] = {"Wali (Sudan)"},
	["wlm"] = {"Middle Welsh"},
	["wln"] = {"Walloon"},
	["wlo"] = {"Wolio"},
	["wlr"] = {"Wailapa"},
	["wls"] = {"Wallisian"},
	["wlu"] = {"Wuliwuli"},
	["wlv"] = {"Wichí Lhamtés Vejoz"},
	["wlw"] = {"Walak"},
	["wlx"] = {"Wali (Ghana)"},
	["wly"] = {"Waling"},
	["wma"] = {"Mawa (Nigeria)"},
	["wmb"] = {"Wambaya"},
	["wmc"] = {"Wamas"},
	["wmd"] = {"Mamaindé"},
	["wme"] = {"Wambule"},
	["wmh"] = {"Waima'a"},
	["wmi"] = {"Wamin"},
	["wmm"] = {"Maiwa (Indonesia)"},
	["wmn"] = {"Waamwang"},
	["wmo"] = {"Wom (Papua New Guinea)"},
	["wms"] = {"Wambon"},
	["wmt"] = {"Walmajarri"},
	["wmw"] = {"Mwani"},
	["wmx"] = {"Womo"},
	["wnb"] = {"Wanambre"},
	["wnc"] = {"Wantoat"},
	["wnd"] = {"Wandarang"},
	["wne"] = {"Waneci"},
	["wng"] = {"Wanggom"},
	["wni"] = {"Ndzwani Comorian"},
	["wnk"] = {"Wanukaka"},
	["wnm"] = {"Wanggamala"},
	["wnn"] = {"Wunumara"},
	["wno"] = {"Wano"},
	["wnp"] = {"Wanap"},
	["wnu"] = {"Usan"},
	["wnw"] = {"Wintu"},
	["wny"] = {"Waanyi", "Wanyi"},
	["woa"] = {"Kuwema", "Tyaraity"},
	["wob"] = {"Wè Northern"},
	["woc"] = {"Wogeo"},
	["wod"] = {"Wolani"},
	["woe"] = {"Woleaian"},
	["wof"] = {"Gambian Wolof"},
	["wog"] = {"Wogamusin"},
	["woi"] = {"Kamang"},
	["wok"] = {"Longto"},
	["wol"] = {"Wolof"},
	["wom"] = {"Wom (Nigeria)"},
	["won"] = {"Wongo"},
	["woo"] = {"Manombai"},
	["wor"] = {"Woria"},
	["wos"] = {"Hanga Hundi"},
	["wow"] = {"Wawonii"},
	["woy"] = {"Weyto"},
	["wpc"] = {"Maco"},
	["wra"] = {"Warapu"},
	["wrb"] = {"Waluwarra", "Warluwara"},
	["wrd"] = {"Warduji"},
	["wrg"] = {"Gudjal", "Warungu"},
	["wrh"] = {"Wiradjuri"},
	["wri"] = {"Wariyangga"},
	["wrk"] = {"Garrwa"},
	["wrl"] = {"Warlmanpa"},
	["wrm"] = {"Warumungu"},
	["wrn"] = {"Warnang"},
	["wro"] = {"Worrorra"},
	["wrp"] = {"Waropen"},
	["wrr"] = {"Wardaman"},
	["wrs"] = {"Waris"},
	["wru"] = {"Waru"},
	["wrv"] = {"Waruna"},
	["wrw"] = {"Gugu Warra"},
	["wrx"] = {"Wae Rana"},
	["wry"] = {"Merwari"},
	["wrz"] = {"Waray (Australia)"},
	["wsa"] = {"Warembori"},
	["wsg"] = {"Adilabad Gondi"},
	["wsi"] = {"Wusi"},
	["wsk"] = {"Waskia"},
	["wsr"] = {"Owenia"},
	["wss"] = {"Wasa"},
	["wsu"] = {"Wasu"},
	["wsv"] = {"Wotapuri-Katarqalai"},
	["wtf"] = {"Watiwa"},
	["wth"] = {"Wathawurrung"},
	["wti"] = {"Berta"},
	["wtk"] = {"Watakataui"},
	["wtm"] = {"Mewati"},
	["wtw"] = {"Wotu"},
	["wua"] = {"Wikngenchera"},
	["wub"] = {"Wunambal"},
	["wud"] = {"Wudu"},
	["wuh"] = {"Wutunhua"},
	["wul"] = {"Silimo"},
	["wum"] = {"Wumbvu"},
	["wun"] = {"Bungu"},
	["wur"] = {"Wurrugu"},
	["wut"] = {"Wutung"},
	["wuu"] = {"Wu Chinese"},
	["wuv"] = {"Wuvulu-Aua"},
	["wux"] = {"Wulna"},
	["wuy"] = {"Wauyai"},
	["wwa"] = {"Waama"},
	["wwb"] = {"Wakabunga"},
	["wwo"] = {"Dorig", "Wetamut"},
	["wwr"] = {"Warrwa"},
	["www"] = {"Wawa"},
	["wxa"] = {"Waxianghua"},
	["wxw"] = {"Wardandi"},
	["wya"] = {"Wyandot"},
	["wyb"] = {"Wangaaybuwan-Ngiyambaa"},
	["wyi"] = {"Woiwurrung"},
	["wym"] = {"Wymysorys"},
	["wyr"] = {"Wayoró"},
	["wyy"] = {"Western Fijian"},
	["xaa"] = {"Andalusian Arabic"},
	["xab"] = {"Sambe"},
	["xac"] = {"Kachari"},
	["xad"] = {"Adai"},
	["xae"] = {"Aequian"},
	["xag"] = {"Aghwan"},
	["xai"] = {"Kaimbé"},
	["xaj"] = {"Ararandewára"},
	["xak"] = {"Máku"},
	["xal"] = {"Kalmyk", "Oirat"},
	["xam"] = {"ǀXam"},
	["xan"] = {"Xamtanga"},
	["xao"] = {"Khao"},
	["xap"] = {"Apalachee"},
	["xaq"] = {"Aquitanian"},
	["xar"] = {"Karami"},
	["xas"] = {"Kamas"},
	["xat"] = {"Katawixi"},
	["xau"] = {"Kauwera"},
	["xav"] = {"Xavánte"},
	["xaw"] = {"Kawaiisu"},
	["xay"] = {"Kayan Mahakam"},
	["xbb"] = {"Lower Burdekin"},
	["xbc"] = {"Bactrian"},
	["xbd"] = {"Bindal"},
	["xbe"] = {"Bigambal"},
	["xbg"] = {"Bunganditj"},
	["xbi"] = {"Kombio"},
	["xbj"] = {"Birrpayi"},
	["xbm"] = {"Middle Breton"},
	["xbn"] = {"Kenaboi"},
	["xbo"] = {"Bolgarian"},
	["xbp"] = {"Bibbulman"},
	["xbr"] = {"Kambera"},
	["xbw"] = {"Kambiwá"},
	["xby"] = {"Batjala", "Batyala"},
	["xcb"] = {"Cumbric"},
	["xcc"] = {"Camunic"},
	["xce"] = {"Celtiberian"},
	["xcg"] = {"Cisalpine Gaulish"},
	["xch"] = {"Chemakum", "Chimakum"},
	["xcl"] = {"Classical Armenian"},
	["xcm"] = {"Comecrudo"},
	["xcn"] = {"Cotoname"},
	["xco"] = {"Chorasmian"},
	["xcr"] = {"Carian"},
	["xct"] = {"Classical Tibetan"},
	["xcu"] = {"Curonian"},
	["xcv"] = {"Chuvantsy"},
	["xcw"] = {"Coahuilteco"},
	["xcy"] = {"Cayuse"},
	["xda"] = {"Darkinyung"},
	["xdc"] = {"Dacian"},
	["xdk"] = {"Dharuk"},
	["xdm"] = {"Edomite"},
	["xdo"] = {"Kwandu"},
	["xdy"] = {"Malayic Dayak"},
	["xeb"] = {"Eblan"},
	["xed"] = {"Hdi"},
	["xeg"] = {"ǁXegwi"},
	["xel"] = {"Kelo"},
	["xem"] = {"Kembayan"},
	["xep"] = {"Epi-Olmec"},
	["xer"] = {"Xerénte"},
	["xes"] = {"Kesawai"},
	["xet"] = {"Xetá"},
	["xeu"] = {"Keoru-Ahia"},
	["xfa"] = {"Faliscan"},
	["xga"] = {"Galatian"},
	["xgb"] = {"Gbin"},
	["xgd"] = {"Gudang"},
	["xgf"] = {"Gabrielino-Fernandeño"},
	["xgg"] = {"Goreng"},
	["xgi"] = {"Garingbal"},
	["xgl"] = {"Galindan"},
	["xgm"] = {"Dharumbal", "Guwinmal"},
	["xgr"] = {"Garza"},
	["xgu"] = {"Unggumi"},
	["xgw"] = {"Guwa"},
	["xha"] = {"Harami"},
	["xhc"] = {"Hunnic"},
	["xhd"] = {"Hadrami"},
	["xhe"] = {"Khetrani"},
	["xho"] = {"Xhosa"},
	["xhr"] = {"Hernican"},
	["xht"] = {"Hattic"},
	["xhu"] = {"Hurrian"},
	["xhv"] = {"Khua"},
	["xib"] = {"Iberian"},
	["xii"] = {"Xiri"},
	["xil"] = {"Illyrian"},
	["xin"] = {"Xinca"},
	["xir"] = {"Xiriâna"},
	["xis"] = {"Kisan"},
	["xiv"] = {"Indus Valley Language"},
	["xiy"] = {"Xipaya"},
	["xjb"] = {"Minjungbal"},
	["xjt"] = {"Jaitmatang"},
	["xka"] = {"Kalkoti"},
	["xkb"] = {"Northern Nago"},
	["xkc"] = {"Kho'ini"},
	["xkd"] = {"Mendalam Kayan"},
	["xke"] = {"Kereho"},
	["xkf"] = {"Khengkha"},
	["xkg"] = {"Kagoro"},
	["xki"] = {"Kenyan Sign Language"},
	["xkj"] = {"Kajali"},
	["xkk"] = {"Kaco'"},
	["xkl"] = {"Mainstream Kenyah"},
	["xkn"] = {"Kayan River Kayan"},
	["xko"] = {"Kiorr"},
	["xkp"] = {"Kabatei"},
	["xkq"] = {"Koroni"},
	["xkr"] = {"Xakriabá"},
	["xks"] = {"Kumbewaha"},
	["xkt"] = {"Kantosi"},
	["xku"] = {"Kaamba"},
	["xkv"] = {"Kgalagadi"},
	["xkw"] = {"Kembra"},
	["xkx"] = {"Karore"},
	["xky"] = {"Uma' Lasan"},
	["xkz"] = {"Kurtokha"},
	["xla"] = {"Kamula"},
	["xlb"] = {"Loup B"},
	["xlc"] = {"Lycian"},
	["xld"] = {"Lydian"},
	["xle"] = {"Lemnian"},
	["xlg"] = {"Ligurian (Ancient)"},
	["xli"] = {"Liburnian"},
	["xln"] = {"Alanic"},
	["xlo"] = {"Loup A"},
	["xlp"] = {"Lepontic"},
	["xls"] = {"Lusitanian"},
	["xlu"] = {"Cuneiform Luwian"},
	["xly"] = {"Elymian"},
	["xma"] = {"Mushungulu"},
	["xmb"] = {"Mbonga"},
	["xmc"] = {"Makhuwa-Marrevone"},
	["xmd"] = {"Mbudum"},
	["xme"] = {"Median"},
	["xmf"] = {"Mingrelian"},
	["xmg"] = {"Mengaka"},
	["xmh"] = {"Kugu-Muminh"},
	["xmj"] = {"Majera"},
	["xmk"] = {"Ancient Macedonian"},
	["xml"] = {"Malaysian Sign Language"},
	["xmm"] = {"Manado Malay"},
	["xmn"] = {"Manichaean Middle Persian"},
	["xmo"] = {"Morerebi"},
	["xmp"] = {"Kuku-Mu'inh"},
	["xmq"] = {"Kuku-Mangk"},
	["xmr"] = {"Meroitic"},
	["xms"] = {"Moroccan Sign Language"},
	["xmt"] = {"Matbat"},
	["xmu"] = {"Kamu"},
	["xmv"] = {"Antankarana Malagasy", "Tankarana Malagasy"},
	["xmw"] = {"Tsimihety Malagasy"},
	["xmx"] = {"Maden"},
	["xmy"] = {"Mayaguduna"},
	["xmz"] = {"Mori Bawah"},
	["xna"] = {"Ancient North Arabian"},
	["xnb"] = {"Kanakanabu"},
	["xng"] = {"Middle Mongolian"},
	["xnh"] = {"Kuanhua"},
	["xni"] = {"Ngarigu"},
	["xnk"] = {"Nganakarti"},
	["xnn"] = {"Northern Kankanay"},
	["xno"] = {"Anglo-Norman"},
	["xnr"] = {"Kangri"},
	["xns"] = {"Kanashi"},
	["xnt"] = {"Narragansett"},
	["xnu"] = {"Nukunul"},
	["xny"] = {"Nyiyaparli"},
	["xnz"] = {"Kenzi", "Mattoki"},
	["xoc"] = {"O'chi'chi'"},
	["xod"] = {"Kokoda"},
	["xog"] = {"Soga"},
	["xoi"] = {"Kominimung"},
	["xok"] = {"Xokleng"},
	["xom"] = {"Komo (Sudan)"},
	["xon"] = {"Konkomba"},
	["xoo"] = {"Xukurú"},
	["xop"] = {"Kopar"},
	["xor"] = {"Korubo"},
	["xow"] = {"Kowaki"},
	["xpa"] = {"Pirriya"},
	["xpc"] = {"Pecheneg"},
	["xpe"] = {"Liberia Kpelle"},
	["xpg"] = {"Phrygian"},
	["xpi"] = {"Pictish"},
	["xpj"] = {"Mpalitjanh"},
	["xpk"] = {"Kulina Pano"},
	["xpm"] = {"Pumpokol"},
	["xpn"] = {"Kapinawá"},
	["xpo"] = {"Pochutec"},
	["xpp"] = {"Puyo-Paekche"},
	["xpq"] = {"Mohegan-Pequot"},
	["xpr"] = {"Parthian"},
	["xps"] = {"Pisidian"},
	["xpt"] = {"Punthamara"},
	["xpu"] = {"Punic"},
	["xpy"] = {"Puyo"},
	["xqa"] = {"Karakhanid"},
	["xqt"] = {"Qatabanian"},
	["xra"] = {"Krahô"},
	["xrb"] = {"Eastern Karaboro"},
	["xrd"] = {"Gundungurra"},
	["xre"] = {"Kreye"},
	["xrg"] = {"Minang"},
	["xri"] = {"Krikati-Timbira"},
	["xrm"] = {"Armazic"},
	["xrn"] = {"Arin"},
	["xrq"] = {"Karranga"},
	["xrr"] = {"Raetic"},
	["xrt"] = {"Aranama-Tamique"},
	["xru"] = {"Marriammu"},
	["xrw"] = {"Karawa"},
	["xsa"] = {"Sabaean"},
	["xsb"] = {"Sambal"},
	["xsc"] = {"Scythian"},
	["xsd"] = {"Sidetic"},
	["xse"] = {"Sempan"},
	["xsh"] = {"Shamang"},
	["xsi"] = {"Sio"},
	["xsj"] = {"Subi"},
	["xsl"] = {"South Slavey"},
	["xsm"] = {"Kasem"},
	["xsn"] = {"Sanga (Nigeria)"},
	["xso"] = {"Solano"},
	["xsp"] = {"Silopi"},
	["xsq"] = {"Makhuwa-Saka"},
	["xsr"] = {"Sherpa"},
	["xss"] = {"Assan"},
	["xsu"] = {"Sanumá"},
	["xsv"] = {"Sudovian"},
	["xsy"] = {"Saisiyat"},
	["xta"] = {"Alcozauca Mixtec"},
	["xtb"] = {"Chazumba Mixtec"},
	["xtc"] = {"Katcha-Kadugli-Miri"},
	["xtd"] = {"Diuxi-Tilantongo Mixtec"},
	["xte"] = {"Ketengban"},
	["xtg"] = {"Transalpine Gaulish"},
	["xth"] = {"Yitha Yitha"},
	["xti"] = {"Sinicahua Mixtec"},
	["xtj"] = {"San Juan Teita Mixtec"},
	["xtl"] = {"Tijaltepec Mixtec"},
	["xtm"] = {"Magdalena Peñasco Mixtec"},
	["xtn"] = {"Northern Tlaxiaco Mixtec"},
	["xto"] = {"Tokharian A"},
	["xtp"] = {"San Miguel Piedras Mixtec"},
	["xtq"] = {"Tumshuqese"},
	["xtr"] = {"Early Tripuri"},
	["xts"] = {"Sindihui Mixtec"},
	["xtt"] = {"Tacahua Mixtec"},
	["xtu"] = {"Cuyamecalco Mixtec"},
	["xtv"] = {"Thawa"},
	["xtw"] = {"Tawandê"},
	["xty"] = {"Yoloxochitl Mixtec"},
	["xtz"] = {"Tasmanian"},
	["xua"] = {"Alu Kurumba"},
	["xub"] = {"Betta Kurumba"},
	["xud"] = {"Umiida"},
	["xug"] = {"Kunigami"},
	["xuj"] = {"Jennu Kurumba"},
	["xul"] = {"Ngunawal"},
	["xum"] = {"Umbrian"},
	["xun"] = {"Unggaranggu"},
	["xuo"] = {"Kuo"},
	["xup"] = {"Upper Umpqua"},
	["xur"] = {"Urartian"},
	["xut"] = {"Kuthant"},
	["xuu"] = {"Khwedam", "Kxoe"},
	["xve"] = {"Venetic"},
	["xvi"] = {"Kamviri"},
	["xvn"] = {"Vandalic"},
	["xvo"] = {"Volscian"},
	["xvs"] = {"Vestinian"},
	["xwa"] = {"Kwaza"},
	["xwc"] = {"Woccon"},
	["xwd"] = {"Wadi Wadi"},
	["xwe"] = {"Xwela Gbe"},
	["xwg"] = {"Kwegu"},
	["xwj"] = {"Wajuk"},
	["xwk"] = {"Wangkumara"},
	["xwl"] = {"Western Xwla Gbe"},
	["xwo"] = {"Written Oirat"},
	["xwr"] = {"Kwerba Mamberamo"},
	["xwt"] = {"Wotjobaluk"},
	["xww"] = {"Wemba Wemba"},
	["xxb"] = {"Boro (Ghana)"},
	["xxk"] = {"Ke'o"},
	["xxm"] = {"Minkin"},
	["xxr"] = {"Koropó"},
	["xxt"] = {"Tambora"},
	["xya"] = {"Yaygir"},
	["xyb"] = {"Yandjibara"},
	["xyj"] = {"Mayi-Yapi"},
	["xyk"] = {"Mayi-Kulan"},
	["xyl"] = {"Yalakalore"},
	["xyt"] = {"Mayi-Thakurti"},
	["xyy"] = {"Yorta Yorta"},
	["xzh"] = {"Zhang-Zhung"},
	["xzm"] = {"Zemgalian"},
	["xzp"] = {"Ancient Zapotec"},
	["yaa"] = {"Yaminahua"},
	["yab"] = {"Yuhup"},
	["yac"] = {"Pass Valley Yali"},
	["yad"] = {"Yagua"},
	["yae"] = {"Pumé"},
	["yaf"] = {"Yaka (Democratic Republic of Congo)"},
	["yag"] = {"Yámana"},
	["yah"] = {"Yazgulyam"},
	["yai"] = {"Yagnobi"},
	["yaj"] = {"Banda-Yangere"},
	["yak"] = {"Yakama"},
	["yal"] = {"Yalunka"},
	["yam"] = {"Yamba"},
	["yan"] = {"Mayangna"},
	["yao"] = {"Yao"},
	["yap"] = {"Yapese"},
	["yaq"] = {"Yaqui"},
	["yar"] = {"Yabarana"},
	["yas"] = {"Nugunu (Cameroon)"},
	["yat"] = {"Yambeta"},
	["yau"] = {"Yuwana"},
	["yav"] = {"Yangben"},
	["yaw"] = {"Yawalapití"},
	["yax"] = {"Yauma"},
	["yay"] = {"Agwagwune"},
	["yaz"] = {"Lokaa"},
	["yba"] = {"Yala"},
	["ybb"] = {"Yemba"},
	["ybe"] = {"West Yugur"},
	["ybh"] = {"Yakha"},
	["ybi"] = {"Yamphu"},
	["ybj"] = {"Hasha"},
	["ybk"] = {"Bokha"},
	["ybl"] = {"Yukuben"},
	["ybm"] = {"Yaben"},
	["ybn"] = {"Yabaâna"},
	["ybo"] = {"Yabong"},
	["ybx"] = {"Yawiyo"},
	["yby"] = {"Yaweyuha"},
	["ych"] = {"Chesu"},
	["ycl"] = {"Lolopo"},
	["ycn"] = {"Yucuna"},
	["ycp"] = {"Chepya"},
	["yda"] = {"Yanda"},
	["ydd"] = {"Eastern Yiddish"},
	["yde"] = {"Yangum Dey"},
	["ydg"] = {"Yidgha"},
	["ydk"] = {"Yoidik"},
	["yea"] = {"Ravula"},
	["yec"] = {"Yeniche"},
	["yee"] = {"Yimas"},
	["yei"] = {"Yeni"},
	["yej"] = {"Yevanic"},
	["yel"] = {"Yela"},
	["yer"] = {"Tarok"},
	["yes"] = {"Nyankpa"},
	["yet"] = {"Yetfa"},
	["yeu"] = {"Yerukula"},
	["yev"] = {"Yapunda"},
	["yey"] = {"Yeyi"},
	["yga"] = {"Malyangapa"},
	["ygi"] = {"Yiningayi"},
	["ygl"] = {"Yangum Gel"},
	["ygm"] = {"Yagomi"},
	["ygp"] = {"Gepo"},
	["ygr"] = {"Yagaria"},
	["ygs"] = {"Yolŋu Sign Language"},
	["ygu"] = {"Yugul"},
	["ygw"] = {"Yagwoia"},
	["yha"] = {"Baha Buyang"},
	["yhd"] = {"Judeo-Iraqi Arabic"},
	["yhl"] = {"Hlepho Phowa"},
	["yhs"] = {"Yan-nhaŋu Sign Language"},
	["yia"] = {"Yinggarda"},
	["yid"] = {"Yiddish"},
	["yif"] = {"Ache"},
	["yig"] = {"Wusa Nasu"},
	["yih"] = {"Western Yiddish"},
	["yii"] = {"Yidiny"},
	["yij"] = {"Yindjibarndi"},
	["yik"] = {"Dongshanba Lalo"},
	["yil"] = {"Yindjilandji"},
	["yim"] = {"Yimchungru Naga"},
	["yin"] = {"Riang Lai", "Yinchia"},
	["yip"] = {"Pholo"},
	["yiq"] = {"Miqie"},
	["yir"] = {"North Awyu"},
	["yis"] = {"Yis"},
	["yit"] = {"Eastern Lalu"},
	["yiu"] = {"Awu"},
	["yiv"] = {"Northern Nisu"},
	["yix"] = {"Axi Yi"},
	["yiz"] = {"Azhe"},
	["yka"] = {"Yakan"},
	["ykg"] = {"Northern Yukaghir"},
	["yki"] = {"Yoke"},
	["ykk"] = {"Yakaikeke"},
	["ykl"] = {"Khlula"},
	["ykm"] = {"Kap"},
	["ykn"] = {"Kua-nsi"},
	["yko"] = {"Yasa"},
	["ykr"] = {"Yekora"},
	["ykt"] = {"Kathu"},
	["yku"] = {"Kuamasi"},
	["yky"] = {"Yakoma"},
	["yla"] = {"Yaul"},
	["ylb"] = {"Yaleba"},
	["yle"] = {"Yele"},
	["ylg"] = {"Yelogu"},
	["yli"] = {"Angguruk Yali"},
	["yll"] = {"Yil"},
	["ylm"] = {"Limi"},
	["yln"] = {"Langnian Buyang"},
	["ylo"] = {"Naluo Yi"},
	["ylr"] = {"Yalarnnga"},
	["ylu"] = {"Aribwaung"},
	["yly"] = {"Nyâlayu", "Nyelâyu"},
	["ymb"] = {"Yambes"},
	["ymc"] = {"Southern Muji"},
	["ymd"] = {"Muda"},
	["yme"] = {"Yameo"},
	["ymg"] = {"Yamongeri"},
	["ymh"] = {"Mili"},
	["ymi"] = {"Moji"},
	["ymk"] = {"Makwe"},
	["yml"] = {"Iamalele"},
	["ymm"] = {"Maay"},
	["ymn"] = {"Sunum", "Yamna"},
	["ymo"] = {"Yangum Mon"},
	["ymp"] = {"Yamap"},
	["ymq"] = {"Qila Muji"},
	["ymr"] = {"Malasar"},
	["yms"] = {"Mysian"},
	["ymx"] = {"Northern Muji"},
	["ymz"] = {"Muzi"},
	["yna"] = {"Aluo"},
	["ynd"] = {"Yandruwandha"},
	["yne"] = {"Lang'e"},
	["yng"] = {"Yango"},
	["ynk"] = {"Naukan Yupik"},
	["ynl"] = {"Yangulam"},
	["ynn"] = {"Yana"},
	["yno"] = {"Yong"},
	["ynq"] = {"Yendang"},
	["yns"] = {"Yansi"},
	["ynu"] = {"Yahuna"},
	["yob"] = {"Yoba"},
	["yog"] = {"Yogad"},
	["yoi"] = {"Yonaguni"},
	["yok"] = {"Yokuts"},
	["yol"] = {"Yola"},
	["yom"] = {"Yombe"},
	["yon"] = {"Yongkom"},
	["yor"] = {"Yoruba"},
	["yot"] = {"Yotti"},
	["yox"] = {"Yoron"},
	["yoy"] = {"Yoy"},
	["ypa"] = {"Phala"},
	["ypb"] = {"Labo Phowa"},
	["ypg"] = {"Phola"},
	["yph"] = {"Phupha"},
	["ypm"] = {"Phuma"},
	["ypn"] = {"Ani Phowa"},
	["ypo"] = {"Alo Phola"},
	["ypp"] = {"Phupa"},
	["ypz"] = {"Phuza"},
	["yra"] = {"Yerakai"},
	["yrb"] = {"Yareba"},
	["yre"] = {"Yaouré"},
	["yrk"] = {"Nenets"},
	["yrl"] = {"Nhengatu"},
	["yrm"] = {"Yirrk-Mel"},
	["yrn"] = {"Yerong"},
	["yro"] = {"Yaroamë"},
	["yrs"] = {"Yarsun"},
	["yrw"] = {"Yarawata"},
	["yry"] = {"Yarluyandi"},
	["ysc"] = {"Yassic"},
	["ysd"] = {"Samatao"},
	["ysg"] = {"Sonaga"},
	["ysl"] = {"Yugoslavian Sign Language"},
	["ysn"] = {"Sani"},
	["yso"] = {"Nisi (China)"},
	["ysp"] = {"Southern Lolopo"},
	["ysr"] = {"Sirenik Yupik"},
	["yss"] = {"Yessan-Mayo"},
	["ysy"] = {"Sanie"},
	["yta"] = {"Talu"},
	["ytl"] = {"Tanglang"},
	["ytp"] = {"Thopho"},
	["ytw"] = {"Yout Wam"},
	["yty"] = {"Yatay"},
	["yua"] = {"Yucatec Maya", "Yucateco"},
	["yub"] = {"Yugambal"},
	["yuc"] = {"Yuchi"},
	["yud"] = {"Judeo-Tripolitanian Arabic"},
	["yue"] = {"Yue Chinese"},
	["yuf"] = {"Havasupai-Walapai-Yavapai"},
	["yug"] = {"Yug"},
	["yui"] = {"Yurutí"},
	["yuj"] = {"Karkar-Yuri"},
	["yuk"] = {"Yuki"},
	["yul"] = {"Yulu"},
	["yum"] = {"Quechan"},
	["yun"] = {"Bena (Nigeria)"},
	["yup"] = {"Yukpa"},
	["yuq"] = {"Yuqui"},
	["yur"] = {"Yurok"},
	["yut"] = {"Yopno"},
	["yuw"] = {"Yau (Morobe Province)"},
	["yux"] = {"Southern Yukaghir"},
	["yuy"] = {"East Yugur"},
	["yuz"] = {"Yuracare"},
	["yva"] = {"Yawa"},
	["yvt"] = {"Yavitero"},
	["ywa"] = {"Kalou"},
	["ywg"] = {"Yinhawangka"},
	["ywl"] = {"Western Lalu"},
	["ywn"] = {"Yawanawa"},
	["ywq"] = {"Wuding-Luquan Yi"},
	["ywr"] = {"Yawuru"},
	["ywt"] = {"Central Lalo", "Xishanba Lalo"},
	["ywu"] = {"Wumeng Nasu"},
	["yww"] = {"Yawarawarga"},
	["yxa"] = {"Mayawali"},
	["yxg"] = {"Yagara"},
	["yxl"] = {"Yardliyawarra"},
	["yxm"] = {"Yinwum"},
	["yxu"] = {"Yuyu"},
	["yxy"] = {"Yabula Yabula"},
	["yyr"] = {"Yir Yoront"},
	["yyu"] = {"Yau (Sandaun Province)"},
	["yyz"] = {"Ayizi"},
	["yzg"] = {"E'ma Buyang"},
	["yzk"] = {"Zokhuo"},
	["zaa"] = {"Sierra de Juárez Zapotec"},
	["zab"] = {"San Juan Guelavía Zapotec", "Western Tlacolula Valley Zapotec"},
	["zac"] = {"Ocotlán Zapotec"},
	["zad"] = {"Cajonos Zapotec"},
	["zae"] = {"Yareni Zapotec"},
	["zaf"] = {"Ayoquesco Zapotec"},
	["zag"] = {"Zaghawa"},
	["zah"] = {"Zangwal"},
	["zai"] = {"Isthmus Zapotec"},
	["zaj"] = {"Zaramo"},
	["zak"] = {"Zanaki"},
	["zal"] = {"Zauzou"},
	["zam"] = {"Miahuatlán Zapotec"},
	["zao"] = {"Ozolotepec Zapotec"},
	["zap"] = {"Zapotec"},
	["zaq"] = {"Aloápam Zapotec"},
	["zar"] = {"Rincón Zapotec"},
	["zas"] = {"Santo Domingo Albarradas Zapotec"},
	["zat"] = {"Tabaa Zapotec"},
	["zau"] = {"Zangskari"},
	["zav"] = {"Yatzachi Zapotec"},
	["zaw"] = {"Mitla Zapotec"},
	["zax"] = {"Xadani Zapotec"},
	["zay"] = {"Zaysete", "Zayse-Zergulla"},
	["zaz"] = {"Zari"},
	["zbc"] = {"Central Berawan"},
	["zbe"] = {"East Berawan"},
	["zbl"] = {"Bliss", "Blissymbolics", "Blissymbols"},
	["zbt"] = {"Batui"},
	["zbw"] = {"West Berawan"},
	["zca"] = {"Coatecas Altas Zapotec"},
	["zch"] = {"Central Hongshuihe Zhuang"},
	["zdj"] = {"Ngazidja Comorian"},
	["zea"] = {"Zeeuws"},
	["zeg"] = {"Zenag"},
	["zeh"] = {"Eastern Hongshuihe Zhuang"},
	["zen"] = {"Zenaga"},
	["zga"] = {"Kinga"},
	["zgb"] = {"Guibei Zhuang"},
	["zgh"] = {"Standard Moroccan Tamazight"},
	["zgm"] = {"Minz Zhuang"},
	["zgn"] = {"Guibian Zhuang"},
	["zgr"] = {"Magori"},
	["zha"] = {"Chuang", "Zhuang"},
	["zhb"] = {"Zhaba"},
	["zhd"] = {"Dai Zhuang"},
	["zhi"] = {"Zhire"},
	["zhn"] = {"Nong Zhuang"},
	["zho"] = {"Chinese"},
	["zhw"] = {"Zhoa"},
	["zia"] = {"Zia"},
	["zib"] = {"Zimbabwe Sign Language"},
	["zik"] = {"Zimakani"},
	["zil"] = {"Zialo"},
	["zim"] = {"Mesme"},
	["zin"] = {"Zinza"},
	["zir"] = {"Ziriya"},
	["ziw"] = {"Zigula"},
	["ziz"] = {"Zizilivakan"},
	["zka"] = {"Kaimbulawa"},
	["zkb"] = {"Koibal"},
	["zkd"] = {"Kadu"},
	["zkg"] = {"Koguryo"},
	["zkh"] = {"Khorezmian"},
	["zkk"] = {"Karankawa"},
	["zkn"] = {"Kanan"},
	["zko"] = {"Kott"},
	["zkp"] = {"São Paulo Kaingáng"},
	["zkr"] = {"Zakhring"},
	["zkt"] = {"Kitan"},
	["zku"] = {"Kaurna"},
	["zkv"] = {"Krevinian"},
	["zkz"] = {"Khazar"},
	["zlj"] = {"Liujiang Zhuang"},
	["zlm"] = {"Malay (individual language)"},
	["zln"] = {"Lianshan Zhuang"},
	["zlq"] = {"Liuqian Zhuang"},
	["zma"] = {"Manda (Australia)"},
	["zmb"] = {"Zimba"},
	["zmc"] = {"Margany"},
	["zmd"] = {"Maridan"},
	["zme"] = {"Mangerr"},
	["zmf"] = {"Mfinu"},
	["zmg"] = {"Marti Ke"},
	["zmh"] = {"Makolkol"},
	["zmi"] = {"Negeri Sembilan Malay"},
	["zmj"] = {"Maridjabin"},
	["zmk"] = {"Mandandanyi"},
	["zml"] = {"Matngala"},
	["zmm"] = {"Marimanindji", "Marramaninyshi"},
	["zmn"] = {"Mbangwe"},
	["zmo"] = {"Molo"},
	["zmp"] = {"Mpuono"},
	["zmq"] = {"Mituku"},
	["zmr"] = {"Maranunggu"},
	["zms"] = {"Mbesa"},
	["zmt"] = {"Maringarr"},
	["zmu"] = {"Muruwari"},
	["zmv"] = {"Mbariman-Gudhinma"},
	["zmw"] = {"Mbo (Democratic Republic of Congo)"},
	["zmx"] = {"Bomitaba"},
	["zmy"] = {"Mariyedi"},
	["zmz"] = {"Mbandja"},
	["zna"] = {"Zan Gula"},
	["zne"] = {"Zande (individual language)"},
	["zng"] = {"Mang"},
	["znk"] = {"Manangkari"},
	["zns"] = {"Mangas"},
	["zoc"] = {"Copainalá Zoque"},
	["zoh"] = {"Chimalapa Zoque"},
	["zom"] = {"Zou"},
	["zoo"] = {"Asunción Mixtepec Zapotec"},
	["zoq"] = {"Tabasco Zoque"},
	["zor"] = {"Rayón Zoque"},
	["zos"] = {"Francisco León Zoque"},
	["zpa"] = {"Lachiguiri Zapotec"},
	["zpb"] = {"Yautepec Zapotec"},
	["zpc"] = {"Choapan Zapotec"},
	["zpd"] = {"Southeastern Ixtlán Zapotec"},
	["zpe"] = {"Petapa Zapotec"},
	["zpf"] = {"San Pedro Quiatoni Zapotec"},
	["zpg"] = {"Guevea De Humboldt Zapotec"},
	["zph"] = {"Totomachapan Zapotec"},
	["zpi"] = {"Santa María Quiegolani Zapotec"},
	["zpj"] = {"Quiavicuzas Zapotec"},
	["zpk"] = {"Tlacolulita Zapotec"},
	["zpl"] = {"Lachixío Zapotec"},
	["zpm"] = {"Mixtepec Zapotec"},
	["zpn"] = {"Santa Inés Yatzechi Zapotec"},
	["zpo"] = {"Amatlán Zapotec"},
	["zpp"] = {"El Alto Zapotec"},
	["zpq"] = {"Zoogocho Zapotec"},
	["zpr"] = {"Santiago Xanica Zapotec"},
	["zps"] = {"Coatlán Zapotec"},
	["zpt"] = {"San Vicente Coatlán Zapotec"},
	["zpu"] = {"Yalálag Zapotec"},
	["zpv"] = {"Chichicapan Zapotec"},
	["zpw"] = {"Zaniza Zapotec"},
	["zpx"] = {"San Baltazar Loxicha Zapotec"},
	["zpy"] = {"Mazaltepec Zapotec"},
	["zpz"] = {"Texmelucan Zapotec"},
	["zqe"] = {"Qiubei Zhuang"},
	["zra"] = {"Kara (Korea)"},
	["zrg"] = {"Mirgan"},
	["zrn"] = {"Zerenkel"},
	["zro"] = {"Záparo"},
	["zrp"] = {"Zarphatic"},
	["zrs"] = {"Mairasi"},
	["zsa"] = {"Sarasira"},
	["zsk"] = {"Kaskean"},
	["zsl"] = {"Zambian Sign Language"},
	["zsm"] = {"Standard Malay"},
	["zsr"] = {"Southern Rincon Zapotec"},
	["zsu"] = {"Sukurum"},
	["zte"] = {"Elotepec Zapotec"},
	["ztg"] = {"Xanaguía Zapotec"},
	["ztl"] = {"Lapaguía-Guivini Zapotec"},
	["ztm"] = {"San Agustín Mixtepec Zapotec"},
	["ztn"] = {"Santa Catarina Albarradas Zapotec"},
	["ztp"] = {"Loxicha Zapotec"},
	["ztq"] = {"Quioquitani-Quierí Zapotec"},
	["zts"] = {"Tilquiapan Zapotec"},
	["ztt"] = {"Tejalapan Zapotec"},
	["ztu"] = {"Güilá Zapotec"},
	["ztx"] = {"Zaachila Zapotec"},
	["zty"] = {"Yatee Zapotec"},
	["zua"] = {"Zeem"},
	["zuh"] = {"Tokano"},
	["zul"] = {"Zulu"},
	["zum"] = {"Kumzari"},
	["zun"] = {"Zuni"},
	["zuy"] = {"Zumaya"},
	["zwa"] = {"Zay"},
	["zxx"] = {"No linguistic content", "Not applicable"},
	["zyb"] = {"Yongbei Zhuang"},
	["zyg"] = {"Yang Zhuang"},
	["zyj"] = {"Youjiang Zhuang"},
	["zyn"] = {"Yongnan Zhuang"},
	["zyp"] = {"Zyphe Chin"},
	["zza"] = {"Dimili", "Dimli (macrolanguage)", "Kirdki", "Kirmanjki (macrolanguage)", "Zaza", "Zazaki"},
	["zzj"] = {"Zuojiang Zhuang"}
	}</text>
      <sha1>5sg5qewve084k3rzvi9y90j1g3teas1</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/iana languages</title>
    <ns>828</ns>
    <id>42493523</id>
    <revision>
      <id>920741951</id>
      <parentid>920740516</parentid>
      <timestamp>2019-10-11T15:31:41Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>update to 2019-09-16 data;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="213963">-- File-Date: 2019-09-16
return {
	["aa"] = {"Afar"},
	["ab"] = {"Abkhazian"},
	["ae"] = {"Avestan"},
	["af"] = {"Afrikaans"},
	["ak"] = {"Akan"},
	["am"] = {"Amharic"},
	["an"] = {"Aragonese"},
	["ar"] = {"Arabic"},
	["as"] = {"Assamese"},
	["av"] = {"Avaric"},
	["ay"] = {"Aymara"},
	["az"] = {"Azerbaijani"},
	["ba"] = {"Bashkir"},
	["be"] = {"Belarusian"},
	["bg"] = {"Bulgarian"},
	["bh"] = {"Bihari languages"},
	["bi"] = {"Bislama"},
	["bm"] = {"Bambara"},
	["bn"] = {"Bengali", "Bangla"},
	["bo"] = {"Tibetan"},
	["br"] = {"Breton"},
	["bs"] = {"Bosnian"},
	["ca"] = {"Catalan", "Valencian"},
	["ce"] = {"Chechen"},
	["ch"] = {"Chamorro"},
	["co"] = {"Corsican"},
	["cr"] = {"Cree"},
	["cs"] = {"Czech"},
	["cu"] = {"Church Slavic", "Church Slavonic", "Old Bulgarian", "Old Church Slavonic", "Old Slavonic"},
	["cv"] = {"Chuvash"},
	["cy"] = {"Welsh"},
	["da"] = {"Danish"},
	["de"] = {"German"},
	["dv"] = {"Dhivehi", "Divehi", "Maldivian"},
	["dz"] = {"Dzongkha"},
	["ee"] = {"Ewe"},
	["el"] = {"Modern Greek (1453-)"},
	["en"] = {"English"},
	["eo"] = {"Esperanto"},
	["es"] = {"Spanish", "Castilian"},
	["et"] = {"Estonian"},
	["eu"] = {"Basque"},
	["fa"] = {"Persian"},
	["ff"] = {"Fulah"},
	["fi"] = {"Finnish"},
	["fj"] = {"Fijian"},
	["fo"] = {"Faroese"},
	["fr"] = {"French"},
	["fy"] = {"Western Frisian"},
	["ga"] = {"Irish"},
	["gd"] = {"Scottish Gaelic", "Gaelic"},
	["gl"] = {"Galician"},
	["gn"] = {"Guarani"},
	["gu"] = {"Gujarati"},
	["gv"] = {"Manx"},
	["ha"] = {"Hausa"},
	["he"] = {"Hebrew"},
	["hi"] = {"Hindi"},
	["ho"] = {"Hiri Motu"},
	["hr"] = {"Croatian"},
	["ht"] = {"Haitian", "Haitian Creole"},
	["hu"] = {"Hungarian"},
	["hy"] = {"Armenian"},
	["hz"] = {"Herero"},
	["ia"] = {"Interlingua (International Auxiliary Language Association)"},
	["id"] = {"Indonesian"},
	["ie"] = {"Interlingue", "Occidental"},
	["ig"] = {"Igbo"},
	["ii"] = {"Sichuan Yi", "Nuosu"},
	["ik"] = {"Inupiaq"},
	["io"] = {"Ido"},
	["is"] = {"Icelandic"},
	["it"] = {"Italian"},
	["iu"] = {"Inuktitut"},
	["ja"] = {"Japanese"},
	["jv"] = {"Javanese"},
	["ka"] = {"Georgian"},
	["kg"] = {"Kongo"},
	["ki"] = {"Kikuyu", "Gikuyu"},
	["kj"] = {"Kuanyama", "Kwanyama"},
	["kk"] = {"Kazakh"},
	["kl"] = {"Kalaallisut", "Greenlandic"},
	["km"] = {"Khmer", "Central Khmer"},
	["kn"] = {"Kannada"},
	["ko"] = {"Korean"},
	["kr"] = {"Kanuri"},
	["ks"] = {"Kashmiri"},
	["ku"] = {"Kurdish"},
	["kv"] = {"Komi"},
	["kw"] = {"Cornish"},
	["ky"] = {"Kirghiz", "Kyrgyz"},
	["la"] = {"Latin"},
	["lb"] = {"Luxembourgish", "Letzeburgesch"},
	["lg"] = {"Ganda", "Luganda"},
	["li"] = {"Limburgan", "Limburger", "Limburgish"},
	["ln"] = {"Lingala"},
	["lo"] = {"Lao"},
	["lt"] = {"Lithuanian"},
	["lu"] = {"Luba-Katanga"},
	["lv"] = {"Latvian"},
	["mg"] = {"Malagasy"},
	["mh"] = {"Marshallese"},
	["mi"] = {"Maori"},
	["mk"] = {"Macedonian"},
	["ml"] = {"Malayalam"},
	["mn"] = {"Mongolian"},
	["mr"] = {"Marathi"},
	["ms"] = {"Malay (macrolanguage)"},
	["mt"] = {"Maltese"},
	["my"] = {"Burmese"},
	["na"] = {"Nauru"},
	["nb"] = {"Norwegian Bokmål"},
	["nd"] = {"North Ndebele"},
	["ne"] = {"Nepali (macrolanguage)"},
	["ng"] = {"Ndonga"},
	["nl"] = {"Dutch", "Flemish"},
	["nn"] = {"Norwegian Nynorsk"},
	["no"] = {"Norwegian"},
	["nr"] = {"South Ndebele"},
	["nv"] = {"Navajo", "Navaho"},
	["ny"] = {"Nyanja", "Chewa", "Chichewa"},
	["oc"] = {"Occitan (post 1500)"},
	["oj"] = {"Ojibwa"},
	["om"] = {"Oromo"},
	["or"] = {"Oriya (macrolanguage)", "Odia (macrolanguage)"},
	["os"] = {"Ossetian", "Ossetic"},
	["pa"] = {"Panjabi", "Punjabi"},
	["pi"] = {"Pali"},
	["pl"] = {"Polish"},
	["ps"] = {"Pushto", "Pashto"},
	["pt"] = {"Portuguese"},
	["qu"] = {"Quechua"},
	["rm"] = {"Romansh"},
	["rn"] = {"Rundi"},
	["ro"] = {"Romanian", "Moldavian", "Moldovan"},
	["ru"] = {"Russian"},
	["rw"] = {"Kinyarwanda"},
	["sa"] = {"Sanskrit"},
	["sc"] = {"Sardinian"},
	["sd"] = {"Sindhi"},
	["se"] = {"Northern Sami"},
	["sg"] = {"Sango"},
	["sh"] = {"Serbo-Croatian"},
	["si"] = {"Sinhala", "Sinhalese"},
	["sk"] = {"Slovak"},
	["sl"] = {"Slovenian"},
	["sm"] = {"Samoan"},
	["sn"] = {"Shona"},
	["so"] = {"Somali"},
	["sq"] = {"Albanian"},
	["sr"] = {"Serbian"},
	["ss"] = {"Swati"},
	["st"] = {"Southern Sotho"},
	["su"] = {"Sundanese"},
	["sv"] = {"Swedish"},
	["sw"] = {"Swahili (macrolanguage)"},
	["ta"] = {"Tamil"},
	["te"] = {"Telugu"},
	["tg"] = {"Tajik"},
	["th"] = {"Thai"},
	["ti"] = {"Tigrinya"},
	["tk"] = {"Turkmen"},
	["tl"] = {"Tagalog"},
	["tn"] = {"Tswana"},
	["to"] = {"Tonga (Tonga Islands)"},
	["tr"] = {"Turkish"},
	["ts"] = {"Tsonga"},
	["tt"] = {"Tatar"},
	["tw"] = {"Twi"},
	["ty"] = {"Tahitian"},
	["ug"] = {"Uighur", "Uyghur"},
	["uk"] = {"Ukrainian"},
	["ur"] = {"Urdu"},
	["uz"] = {"Uzbek"},
	["ve"] = {"Venda"},
	["vi"] = {"Vietnamese"},
	["vo"] = {"Volapük"},
	["wa"] = {"Walloon"},
	["wo"] = {"Wolof"},
	["xh"] = {"Xhosa"},
	["yi"] = {"Yiddish"},
	["yo"] = {"Yoruba"},
	["za"] = {"Zhuang", "Chuang"},
	["zh"] = {"Chinese"},
	["zu"] = {"Zulu"},
	["aaa"] = {"Ghotuo"},
	["aab"] = {"Alumu-Tesu"},
	["aac"] = {"Ari"},
	["aad"] = {"Amal"},
	["aae"] = {"Arbëreshë Albanian"},
	["aaf"] = {"Aranadan"},
	["aag"] = {"Ambrak"},
	["aah"] = {"Abu' Arapesh"},
	["aai"] = {"Arifama-Miniafia"},
	["aak"] = {"Ankave"},
	["aal"] = {"Afade"},
	["aan"] = {"Anambé"},
	["aao"] = {"Algerian Saharan Arabic"},
	["aap"] = {"Pará Arára"},
	["aaq"] = {"Eastern Abnaki"},
	["aas"] = {"Aasáx"},
	["aat"] = {"Arvanitika Albanian"},
	["aau"] = {"Abau"},
	["aav"] = {"Austro-Asiatic languages"},
	["aaw"] = {"Solong"},
	["aax"] = {"Mandobo Atas"},
	["aaz"] = {"Amarasi"},
	["aba"] = {"Abé"},
	["abb"] = {"Bankon"},
	["abc"] = {"Ambala Ayta"},
	["abd"] = {"Manide"},
	["abe"] = {"Western Abnaki"},
	["abf"] = {"Abai Sungai"},
	["abg"] = {"Abaga"},
	["abh"] = {"Tajiki Arabic"},
	["abi"] = {"Abidji"},
	["abj"] = {"Aka-Bea"},
	["abl"] = {"Lampung Nyo"},
	["abm"] = {"Abanyom"},
	["abn"] = {"Abua"},
	["abo"] = {"Abon"},
	["abp"] = {"Abellen Ayta"},
	["abq"] = {"Abaza"},
	["abr"] = {"Abron"},
	["abs"] = {"Ambonese Malay"},
	["abt"] = {"Ambulas"},
	["abu"] = {"Abure"},
	["abv"] = {"Baharna Arabic"},
	["abw"] = {"Pal"},
	["abx"] = {"Inabaknon"},
	["aby"] = {"Aneme Wake"},
	["abz"] = {"Abui"},
	["aca"] = {"Achagua"},
	["acb"] = {"Áncá"},
	["acd"] = {"Gikyode"},
	["ace"] = {"Achinese"},
	["acf"] = {"Saint Lucian Creole French"},
	["ach"] = {"Acoli"},
	["aci"] = {"Aka-Cari"},
	["ack"] = {"Aka-Kora"},
	["acl"] = {"Akar-Bale"},
	["acm"] = {"Mesopotamian Arabic"},
	["acn"] = {"Achang"},
	["acp"] = {"Eastern Acipa"},
	["acq"] = {"Ta'izzi-Adeni Arabic"},
	["acr"] = {"Achi"},
	["acs"] = {"Acroá"},
	["act"] = {"Achterhoeks"},
	["acu"] = {"Achuar-Shiwiar"},
	["acv"] = {"Achumawi"},
	["acw"] = {"Hijazi Arabic"},
	["acx"] = {"Omani Arabic"},
	["acy"] = {"Cypriot Arabic"},
	["acz"] = {"Acheron"},
	["ada"] = {"Adangme"},
	["adb"] = {"Adabe"},
	["add"] = {"Lidzonka", "Dzodinka"},
	["ade"] = {"Adele"},
	["adf"] = {"Dhofari Arabic"},
	["adg"] = {"Andegerebinha"},
	["adh"] = {"Adhola"},
	["adi"] = {"Adi"},
	["adj"] = {"Adioukrou"},
	["adl"] = {"Galo"},
	["adn"] = {"Adang"},
	["ado"] = {"Abu"},
	["adq"] = {"Adangbe"},
	["adr"] = {"Adonara"},
	["ads"] = {"Adamorobe Sign Language"},
	["adt"] = {"Adnyamathanha"},
	["adu"] = {"Aduge"},
	["adw"] = {"Amundava"},
	["adx"] = {"Amdo Tibetan"},
	["ady"] = {"Adyghe", "Adygei"},
	["adz"] = {"Adzera"},
	["aea"] = {"Areba"},
	["aeb"] = {"Tunisian Arabic"},
	["aec"] = {"Saidi Arabic"},
	["aed"] = {"Argentine Sign Language"},
	["aee"] = {"Northeast Pashai", "Northeast Pashayi"},
	["aek"] = {"Haeke"},
	["ael"] = {"Ambele"},
	["aem"] = {"Arem"},
	["aen"] = {"Armenian Sign Language"},
	["aeq"] = {"Aer"},
	["aer"] = {"Eastern Arrernte"},
	["aes"] = {"Alsea"},
	["aeu"] = {"Akeu"},
	["aew"] = {"Ambakich"},
	["aey"] = {"Amele"},
	["aez"] = {"Aeka"},
	["afa"] = {"Afro-Asiatic languages"},
	["afb"] = {"Gulf Arabic"},
	["afd"] = {"Andai"},
	["afe"] = {"Putukwam"},
	["afg"] = {"Afghan Sign Language"},
	["afh"] = {"Afrihili"},
	["afi"] = {"Akrukay", "Chini"},
	["afk"] = {"Nanubae"},
	["afn"] = {"Defaka"},
	["afo"] = {"Eloyi"},
	["afp"] = {"Tapei"},
	["afs"] = {"Afro-Seminole Creole"},
	["aft"] = {"Afitti"},
	["afu"] = {"Awutu"},
	["afz"] = {"Obokuitai"},
	["aga"] = {"Aguano"},
	["agb"] = {"Legbo"},
	["agc"] = {"Agatu"},
	["agd"] = {"Agarabi"},
	["age"] = {"Angal"},
	["agf"] = {"Arguni"},
	["agg"] = {"Angor"},
	["agh"] = {"Ngelima"},
	["agi"] = {"Agariya"},
	["agj"] = {"Argobba"},
	["agk"] = {"Isarog Agta"},
	["agl"] = {"Fembe"},
	["agm"] = {"Angaataha"},
	["agn"] = {"Agutaynen"},
	["ago"] = {"Tainae"},
	["agq"] = {"Aghem"},
	["agr"] = {"Aguaruna"},
	["ags"] = {"Esimbi"},
	["agt"] = {"Central Cagayan Agta"},
	["agu"] = {"Aguacateco"},
	["agv"] = {"Remontado Dumagat"},
	["agw"] = {"Kahua"},
	["agx"] = {"Aghul"},
	["agy"] = {"Southern Alta"},
	["agz"] = {"Mt. Iriga Agta"},
	["aha"] = {"Ahanta"},
	["ahb"] = {"Axamb"},
	["ahg"] = {"Qimant"},
	["ahh"] = {"Aghu"},
	["ahi"] = {"Tiagbamrin Aizi"},
	["ahk"] = {"Akha"},
	["ahl"] = {"Igo"},
	["ahm"] = {"Mobumrin Aizi"},
	["ahn"] = {"Àhàn"},
	["aho"] = {"Ahom"},
	["ahp"] = {"Aproumu Aizi"},
	["ahr"] = {"Ahirani"},
	["ahs"] = {"Ashe"},
	["aht"] = {"Ahtena"},
	["aia"] = {"Arosi"},
	["aib"] = {"Ainu (China)"},
	["aic"] = {"Ainbai"},
	["aid"] = {"Alngith"},
	["aie"] = {"Amara"},
	["aif"] = {"Agi"},
	["aig"] = {"Antigua and Barbuda Creole English"},
	["aih"] = {"Ai-Cham"},
	["aii"] = {"Assyrian Neo-Aramaic"},
	["aij"] = {"Lishanid Noshan"},
	["aik"] = {"Ake"},
	["ail"] = {"Aimele"},
	["aim"] = {"Aimol"},
	["ain"] = {"Ainu (Japan)"},
	["aio"] = {"Aiton"},
	["aip"] = {"Burumakok"},
	["aiq"] = {"Aimaq"},
	["air"] = {"Airoran"},
	["ait"] = {"Arikem"},
	["aiw"] = {"Aari"},
	["aix"] = {"Aighon"},
	["aiy"] = {"Ali"},
	["aja"] = {"Aja (South Sudan)"},
	["ajg"] = {"Aja (Benin)"},
	["aji"] = {"Ajië"},
	["ajn"] = {"Andajin"},
	["ajp"] = {"South Levantine Arabic"},
	["ajt"] = {"Judeo-Tunisian Arabic"},
	["aju"] = {"Judeo-Moroccan Arabic"},
	["ajw"] = {"Ajawa"},
	["ajz"] = {"Amri Karbi"},
	["akb"] = {"Batak Angkola"},
	["akc"] = {"Mpur"},
	["akd"] = {"Ukpet-Ehom"},
	["ake"] = {"Akawaio"},
	["akf"] = {"Akpa"},
	["akg"] = {"Anakalangu"},
	["akh"] = {"Angal Heneng"},
	["aki"] = {"Aiome"},
	["akj"] = {"Aka-Jeru"},
	["akk"] = {"Akkadian"},
	["akl"] = {"Aklanon"},
	["akm"] = {"Aka-Bo"},
	["ako"] = {"Akurio"},
	["akp"] = {"Siwu"},
	["akq"] = {"Ak"},
	["akr"] = {"Araki"},
	["aks"] = {"Akaselem"},
	["akt"] = {"Akolet"},
	["aku"] = {"Akum"},
	["akv"] = {"Akhvakh"},
	["akw"] = {"Akwa"},
	["akx"] = {"Aka-Kede"},
	["aky"] = {"Aka-Kol"},
	["akz"] = {"Alabama"},
	["ala"] = {"Alago"},
	["alc"] = {"Qawasqar"},
	["ald"] = {"Alladian"},
	["ale"] = {"Aleut"},
	["alf"] = {"Alege"},
	["alg"] = {"Algonquian languages"},
	["alh"] = {"Alawa"},
	["ali"] = {"Amaimon"},
	["alj"] = {"Alangan"},
	["alk"] = {"Alak"},
	["all"] = {"Allar"},
	["alm"] = {"Amblong"},
	["aln"] = {"Gheg Albanian"},
	["alo"] = {"Larike-Wakasihu"},
	["alp"] = {"Alune"},
	["alq"] = {"Algonquin"},
	["alr"] = {"Alutor"},
	["als"] = {"Tosk Albanian"},
	["alt"] = {"Southern Altai"},
	["alu"] = {"'Are'are"},
	["alv"] = {"Atlantic-Congo languages"},
	["alw"] = {"Alaba-K’abeena", "Wanbasana"},
	["alx"] = {"Amol"},
	["aly"] = {"Alyawarr"},
	["alz"] = {"Alur"},
	["ama"] = {"Amanayé"},
	["amb"] = {"Ambo"},
	["amc"] = {"Amahuaca"},
	["ame"] = {"Yanesha'"},
	["amf"] = {"Hamer-Banna"},
	["amg"] = {"Amurdak"},
	["ami"] = {"Amis"},
	["amj"] = {"Amdang"},
	["amk"] = {"Ambai"},
	["aml"] = {"War-Jaintia"},
	["amm"] = {"Ama (Papua New Guinea)"},
	["amn"] = {"Amanab"},
	["amo"] = {"Amo"},
	["amp"] = {"Alamblak"},
	["amq"] = {"Amahai"},
	["amr"] = {"Amarakaeri"},
	["ams"] = {"Southern Amami-Oshima"},
	["amt"] = {"Amto"},
	["amu"] = {"Guerrero Amuzgo"},
	["amv"] = {"Ambelau"},
	["amw"] = {"Western Neo-Aramaic"},
	["amx"] = {"Anmatyerre"},
	["amy"] = {"Ami"},
	["amz"] = {"Atampaya"},
	["ana"] = {"Andaqui"},
	["anb"] = {"Andoa"},
	["anc"] = {"Ngas"},
	["and"] = {"Ansus"},
	["ane"] = {"Xârâcùù"},
	["anf"] = {"Animere"},
	["ang"] = {"Old English (ca. 450-1100)"},
	["anh"] = {"Nend"},
	["ani"] = {"Andi"},
	["anj"] = {"Anor"},
	["ank"] = {"Goemai"},
	["anl"] = {"Anu-Hkongso Chin"},
	["anm"] = {"Anal"},
	["ann"] = {"Obolo"},
	["ano"] = {"Andoque"},
	["anp"] = {"Angika"},
	["anq"] = {"Jarawa (India)"},
	["anr"] = {"Andh"},
	["ans"] = {"Anserma"},
	["ant"] = {"Antakarinya", "Antikarinya"},
	["anu"] = {"Anuak"},
	["anv"] = {"Denya"},
	["anw"] = {"Anaang"},
	["anx"] = {"Andra-Hus"},
	["any"] = {"Anyin"},
	["anz"] = {"Anem"},
	["aoa"] = {"Angolar"},
	["aob"] = {"Abom"},
	["aoc"] = {"Pemon"},
	["aod"] = {"Andarum"},
	["aoe"] = {"Angal Enen"},
	["aof"] = {"Bragat"},
	["aog"] = {"Angoram"},
	["aoh"] = {"Arma"},
	["aoi"] = {"Anindilyakwa"},
	["aoj"] = {"Mufian"},
	["aok"] = {"Arhö"},
	["aol"] = {"Alor"},
	["aom"] = {"Ömie"},
	["aon"] = {"Bumbita Arapesh"},
	["aor"] = {"Aore"},
	["aos"] = {"Taikat"},
	["aot"] = {"Atong (India)", "A'tong"},
	["aou"] = {"A'ou"},
	["aox"] = {"Atorada"},
	["aoz"] = {"Uab Meto"},
	["apa"] = {"Apache languages"},
	["apb"] = {"Sa'a"},
	["apc"] = {"North Levantine Arabic"},
	["apd"] = {"Sudanese Arabic"},
	["ape"] = {"Bukiyip"},
	["apf"] = {"Pahanan Agta"},
	["apg"] = {"Ampanang"},
	["aph"] = {"Athpariya"},
	["api"] = {"Apiaká"},
	["apj"] = {"Jicarilla Apache"},
	["apk"] = {"Kiowa Apache"},
	["apl"] = {"Lipan Apache"},
	["apm"] = {"Mescalero-Chiricahua Apache"},
	["apn"] = {"Apinayé"},
	["apo"] = {"Ambul"},
	["app"] = {"Apma"},
	["apq"] = {"A-Pucikwar"},
	["apr"] = {"Arop-Lokep"},
	["aps"] = {"Arop-Sissano"},
	["apt"] = {"Apatani"},
	["apu"] = {"Apurinã"},
	["apv"] = {"Alapmunte"},
	["apw"] = {"Western Apache"},
	["apx"] = {"Aputai"},
	["apy"] = {"Apalaí"},
	["apz"] = {"Safeyoka"},
	["aqa"] = {"Alacalufan languages"},
	["aqc"] = {"Archi"},
	["aqd"] = {"Ampari Dogon"},
	["aqg"] = {"Arigidi"},
	["aql"] = {"Algic languages"},
	["aqm"] = {"Atohwaim"},
	["aqn"] = {"Northern Alta"},
	["aqp"] = {"Atakapa"},
	["aqr"] = {"Arhâ"},
	["aqt"] = {"Angaité"},
	["aqz"] = {"Akuntsu"},
	["arb"] = {"Standard Arabic"},
	["arc"] = {"Official Aramaic (700-300 BCE)", "Imperial Aramaic (700-300 BCE)"},
	["ard"] = {"Arabana"},
	["are"] = {"Western Arrarnta"},
	["arh"] = {"Arhuaco"},
	["ari"] = {"Arikara"},
	["arj"] = {"Arapaso"},
	["ark"] = {"Arikapú"},
	["arl"] = {"Arabela"},
	["arn"] = {"Mapudungun", "Mapuche"},
	["aro"] = {"Araona"},
	["arp"] = {"Arapaho"},
	["arq"] = {"Algerian Arabic"},
	["arr"] = {"Karo (Brazil)"},
	["ars"] = {"Najdi Arabic"},
	["art"] = {"Artificial languages"},
	["aru"] = {"Aruá (Amazonas State)", "Arawá"},
	["arv"] = {"Arbore"},
	["arw"] = {"Arawak"},
	["arx"] = {"Aruá (Rodonia State)"},
	["ary"] = {"Moroccan Arabic"},
	["arz"] = {"Egyptian Arabic"},
	["asa"] = {"Asu (Tanzania)"},
	["asb"] = {"Assiniboine"},
	["asc"] = {"Casuarina Coast Asmat"},
	["ase"] = {"American Sign Language"},
	["asf"] = {"Auslan", "Australian Sign Language"},
	["asg"] = {"Cishingini"},
	["ash"] = {"Abishira"},
	["asi"] = {"Buruwai"},
	["asj"] = {"Sari"},
	["ask"] = {"Ashkun"},
	["asl"] = {"Asilulu"},
	["asn"] = {"Xingú Asuriní"},
	["aso"] = {"Dano"},
	["asp"] = {"Algerian Sign Language"},
	["asq"] = {"Austrian Sign Language"},
	["asr"] = {"Asuri"},
	["ass"] = {"Ipulo"},
	["ast"] = {"Asturian", "Asturleonese", "Bable", "Leonese"},
	["asu"] = {"Tocantins Asurini"},
	["asv"] = {"Asoa"},
	["asw"] = {"Australian Aborigines Sign Language"},
	["asx"] = {"Muratayak"},
	["asy"] = {"Yaosakor Asmat"},
	["asz"] = {"As"},
	["ata"] = {"Pele-Ata"},
	["atb"] = {"Zaiwa"},
	["atc"] = {"Atsahuaca"},
	["atd"] = {"Ata Manobo"},
	["ate"] = {"Atemble"},
	["atg"] = {"Ivbie North-Okpela-Arhe"},
	["ath"] = {"Athapascan languages"},
	["ati"] = {"Attié"},
	["atj"] = {"Atikamekw"},
	["atk"] = {"Ati"},
	["atl"] = {"Mt. Iraya Agta"},
	["atm"] = {"Ata"},
	["atn"] = {"Ashtiani"},
	["ato"] = {"Atong (Cameroon)"},
	["atp"] = {"Pudtol Atta"},
	["atq"] = {"Aralle-Tabulahan"},
	["atr"] = {"Waimiri-Atroari"},
	["ats"] = {"Gros Ventre"},
	["att"] = {"Pamplona Atta"},
	["atu"] = {"Reel"},
	["atv"] = {"Northern Altai"},
	["atw"] = {"Atsugewi"},
	["atx"] = {"Arutani"},
	["aty"] = {"Aneityum"},
	["atz"] = {"Arta"},
	["aua"] = {"Asumboa"},
	["aub"] = {"Alugu"},
	["auc"] = {"Waorani"},
	["aud"] = {"Anuta"},
	["auf"] = {"Arauan languages"},
	["aug"] = {"Aguna"},
	["auh"] = {"Aushi"},
	["aui"] = {"Anuki"},
	["auj"] = {"Awjilah"},
	["auk"] = {"Heyo"},
	["aul"] = {"Aulua"},
	["aum"] = {"Asu (Nigeria)"},
	["aun"] = {"Molmo One"},
	["auo"] = {"Auyokawa"},
	["aup"] = {"Makayam"},
	["auq"] = {"Anus", "Korur"},
	["aur"] = {"Aruek"},
	["aus"] = {"Australian languages"},
	["aut"] = {"Austral"},
	["auu"] = {"Auye"},
	["auw"] = {"Awyi"},
	["aux"] = {"Aurá"},
	["auy"] = {"Awiyaana"},
	["auz"] = {"Uzbeki Arabic"},
	["avb"] = {"Avau"},
	["avd"] = {"Alviri-Vidari"},
	["avi"] = {"Avikam"},
	["avk"] = {"Kotava"},
	["avl"] = {"Eastern Egyptian Bedawi Arabic"},
	["avm"] = {"Angkamuthi"},
	["avn"] = {"Avatime"},
	["avo"] = {"Agavotaguerra"},
	["avs"] = {"Aushiri"},
	["avt"] = {"Au"},
	["avu"] = {"Avokaya"},
	["avv"] = {"Avá-Canoeiro"},
	["awa"] = {"Awadhi"},
	["awb"] = {"Awa (Papua New Guinea)"},
	["awc"] = {"Cicipu"},
	["awd"] = {"Arawakan languages"},
	["awe"] = {"Awetí"},
	["awg"] = {"Anguthimri"},
	["awh"] = {"Awbono"},
	["awi"] = {"Aekyom"},
	["awk"] = {"Awabakal"},
	["awm"] = {"Arawum"},
	["awn"] = {"Awngi"},
	["awo"] = {"Awak"},
	["awr"] = {"Awera"},
	["aws"] = {"South Awyu"},
	["awt"] = {"Araweté"},
	["awu"] = {"Central Awyu"},
	["awv"] = {"Jair Awyu"},
	["aww"] = {"Awun"},
	["awx"] = {"Awara"},
	["awy"] = {"Edera Awyu"},
	["axb"] = {"Abipon"},
	["axe"] = {"Ayerrerenge"},
	["axg"] = {"Mato Grosso Arára"},
	["axk"] = {"Yaka (Central African Republic)"},
	["axl"] = {"Lower Southern Aranda"},
	["axm"] = {"Middle Armenian"},
	["axx"] = {"Xârâgurè"},
	["aya"] = {"Awar"},
	["ayb"] = {"Ayizo Gbe"},
	["ayc"] = {"Southern Aymara"},
	["ayd"] = {"Ayabadhu"},
	["aye"] = {"Ayere"},
	["ayg"] = {"Ginyanga"},
	["ayh"] = {"Hadrami Arabic"},
	["ayi"] = {"Leyigha"},
	["ayk"] = {"Akuku"},
	["ayl"] = {"Libyan Arabic"},
	["ayn"] = {"Sanaani Arabic"},
	["ayo"] = {"Ayoreo"},
	["ayp"] = {"North Mesopotamian Arabic"},
	["ayq"] = {"Ayi (Papua New Guinea)"},
	["ayr"] = {"Central Aymara"},
	["ays"] = {"Sorsogon Ayta"},
	["ayt"] = {"Magbukun Ayta"},
	["ayu"] = {"Ayu"},
	["ayy"] = {"Tayabas Ayta"},
	["ayz"] = {"Mai Brat"},
	["aza"] = {"Azha"},
	["azb"] = {"South Azerbaijani"},
	["azc"] = {"Uto-Aztecan languages"},
	["azd"] = {"Eastern Durango Nahuatl"},
	["azg"] = {"San Pedro Amuzgos Amuzgo"},
	["azj"] = {"North Azerbaijani"},
	["azm"] = {"Ipalapa Amuzgo"},
	["azn"] = {"Western Durango Nahuatl"},
	["azo"] = {"Awing"},
	["azt"] = {"Faire Atta"},
	["azz"] = {"Highland Puebla Nahuatl"},
	["baa"] = {"Babatana"},
	["bab"] = {"Bainouk-Gunyuño"},
	["bac"] = {"Badui"},
	["bad"] = {"Banda languages"},
	["bae"] = {"Baré"},
	["baf"] = {"Nubaca"},
	["bag"] = {"Tuki"},
	["bah"] = {"Bahamas Creole English"},
	["bai"] = {"Bamileke languages"},
	["baj"] = {"Barakai"},
	["bal"] = {"Baluchi"},
	["ban"] = {"Balinese"},
	["bao"] = {"Waimaha"},
	["bap"] = {"Bantawa"},
	["bar"] = {"Bavarian"},
	["bas"] = {"Basa (Cameroon)"},
	["bat"] = {"Baltic languages"},
	["bau"] = {"Bada (Nigeria)"},
	["bav"] = {"Vengo"},
	["baw"] = {"Bambili-Bambui"},
	["bax"] = {"Bamun"},
	["bay"] = {"Batuley"},
	["bba"] = {"Baatonum"},
	["bbb"] = {"Barai"},
	["bbc"] = {"Batak Toba"},
	["bbd"] = {"Bau"},
	["bbe"] = {"Bangba"},
	["bbf"] = {"Baibai"},
	["bbg"] = {"Barama"},
	["bbh"] = {"Bugan"},
	["bbi"] = {"Barombi"},
	["bbj"] = {"Ghomálá'"},
	["bbk"] = {"Babanki"},
	["bbl"] = {"Bats"},
	["bbm"] = {"Babango"},
	["bbn"] = {"Uneapa"},
	["bbo"] = {"Northern Bobo Madaré", "Konabéré"},
	["bbp"] = {"West Central Banda"},
	["bbq"] = {"Bamali"},
	["bbr"] = {"Girawa"},
	["bbs"] = {"Bakpinka"},
	["bbt"] = {"Mburku"},
	["bbu"] = {"Kulung (Nigeria)"},
	["bbv"] = {"Karnai"},
	["bbw"] = {"Baba"},
	["bbx"] = {"Bubia"},
	["bby"] = {"Befang"},
	["bbz"] = {"Babalia Creole Arabic"},
	["bca"] = {"Central Bai"},
	["bcb"] = {"Bainouk-Samik"},
	["bcc"] = {"Southern Balochi"},
	["bcd"] = {"North Babar"},
	["bce"] = {"Bamenyam"},
	["bcf"] = {"Bamu"},
	["bcg"] = {"Baga Pokur"},
	["bch"] = {"Bariai"},
	["bci"] = {"Baoulé"},
	["bcj"] = {"Bardi"},
	["bck"] = {"Bunuba"},
	["bcl"] = {"Central Bikol"},
	["bcm"] = {"Bannoni"},
	["bcn"] = {"Bali (Nigeria)"},
	["bco"] = {"Kaluli"},
	["bcp"] = {"Bali (Democratic Republic of Congo)"},
	["bcq"] = {"Bench"},
	["bcr"] = {"Babine"},
	["bcs"] = {"Kohumono"},
	["bct"] = {"Bendi"},
	["bcu"] = {"Awad Bing"},
	["bcv"] = {"Shoo-Minda-Nye"},
	["bcw"] = {"Bana"},
	["bcy"] = {"Bacama"},
	["bcz"] = {"Bainouk-Gunyaamolo"},
	["bda"] = {"Bayot"},
	["bdb"] = {"Basap"},
	["bdc"] = {"Emberá-Baudó"},
	["bdd"] = {"Bunama"},
	["bde"] = {"Bade"},
	["bdf"] = {"Biage"},
	["bdg"] = {"Bonggi"},
	["bdh"] = {"Baka (South Sudan)"},
	["bdi"] = {"Burun"},
	["bdj"] = {"Bai (South Sudan)", "Bai"},
	["bdk"] = {"Budukh"},
	["bdl"] = {"Indonesian Bajau"},
	["bdm"] = {"Buduma"},
	["bdn"] = {"Baldemu"},
	["bdo"] = {"Morom"},
	["bdp"] = {"Bende"},
	["bdq"] = {"Bahnar"},
	["bdr"] = {"West Coast Bajau"},
	["bds"] = {"Burunge"},
	["bdt"] = {"Bokoto"},
	["bdu"] = {"Oroko"},
	["bdv"] = {"Bodo Parja"},
	["bdw"] = {"Baham"},
	["bdx"] = {"Budong-Budong"},
	["bdy"] = {"Bandjalang"},
	["bdz"] = {"Badeshi"},
	["bea"] = {"Beaver"},
	["beb"] = {"Bebele"},
	["bec"] = {"Iceve-Maci"},
	["bed"] = {"Bedoanas"},
	["bee"] = {"Byangsi"},
	["bef"] = {"Benabena"},
	["beg"] = {"Belait"},
	["beh"] = {"Biali"},
	["bei"] = {"Bekati'"},
	["bej"] = {"Beja", "Bedawiyet"},
	["bek"] = {"Bebeli"},
	["bem"] = {"Bemba (Zambia)"},
	["beo"] = {"Beami"},
	["bep"] = {"Besoa"},
	["beq"] = {"Beembe"},
	["ber"] = {"Berber languages"},
	["bes"] = {"Besme"},
	["bet"] = {"Guiberoua Béte"},
	["beu"] = {"Blagar"},
	["bev"] = {"Daloa Bété"},
	["bew"] = {"Betawi"},
	["bex"] = {"Jur Modo"},
	["bey"] = {"Beli (Papua New Guinea)"},
	["bez"] = {"Bena (Tanzania)"},
	["bfa"] = {"Bari"},
	["bfb"] = {"Pauri Bareli"},
	["bfc"] = {"Panyi Bai", "Northern Bai"},
	["bfd"] = {"Bafut"},
	["bfe"] = {"Betaf", "Tena"},
	["bff"] = {"Bofi"},
	["bfg"] = {"Busang Kayan"},
	["bfh"] = {"Blafe"},
	["bfi"] = {"British Sign Language"},
	["bfj"] = {"Bafanji"},
	["bfk"] = {"Ban Khor Sign Language"},
	["bfl"] = {"Banda-Ndélé"},
	["bfm"] = {"Mmen"},
	["bfn"] = {"Bunak"},
	["bfo"] = {"Malba Birifor"},
	["bfp"] = {"Beba"},
	["bfq"] = {"Badaga"},
	["bfr"] = {"Bazigar"},
	["bfs"] = {"Southern Bai"},
	["bft"] = {"Balti"},
	["bfu"] = {"Gahri"},
	["bfw"] = {"Bondo"},
	["bfx"] = {"Bantayanon"},
	["bfy"] = {"Bagheli"},
	["bfz"] = {"Mahasu Pahari"},
	["bga"] = {"Gwamhi-Wuri"},
	["bgb"] = {"Bobongko"},
	["bgc"] = {"Haryanvi"},
	["bgd"] = {"Rathwi Bareli"},
	["bge"] = {"Bauria"},
	["bgf"] = {"Bangandu"},
	["bgg"] = {"Bugun"},
	["bgi"] = {"Giangan"},
	["bgj"] = {"Bangolan"},
	["bgk"] = {"Bit", "Buxinhua"},
	["bgl"] = {"Bo (Laos)"},
	["bgn"] = {"Western Balochi"},
	["bgo"] = {"Baga Koga"},
	["bgp"] = {"Eastern Balochi"},
	["bgq"] = {"Bagri"},
	["bgr"] = {"Bawm Chin"},
	["bgs"] = {"Tagabawa"},
	["bgt"] = {"Bughotu"},
	["bgu"] = {"Mbongno"},
	["bgv"] = {"Warkay-Bipim"},
	["bgw"] = {"Bhatri"},
	["bgx"] = {"Balkan Gagauz Turkish"},
	["bgy"] = {"Benggoi"},
	["bgz"] = {"Banggai"},
	["bha"] = {"Bharia"},
	["bhb"] = {"Bhili"},
	["bhc"] = {"Biga"},
	["bhd"] = {"Bhadrawahi"},
	["bhe"] = {"Bhaya"},
	["bhf"] = {"Odiai"},
	["bhg"] = {"Binandere"},
	["bhh"] = {"Bukharic"},
	["bhi"] = {"Bhilali"},
	["bhj"] = {"Bahing"},
	["bhl"] = {"Bimin"},
	["bhm"] = {"Bathari"},
	["bhn"] = {"Bohtan Neo-Aramaic"},
	["bho"] = {"Bhojpuri"},
	["bhp"] = {"Bima"},
	["bhq"] = {"Tukang Besi South"},
	["bhr"] = {"Bara Malagasy"},
	["bhs"] = {"Buwal"},
	["bht"] = {"Bhattiyali"},
	["bhu"] = {"Bhunjia"},
	["bhv"] = {"Bahau"},
	["bhw"] = {"Biak"},
	["bhx"] = {"Bhalay"},
	["bhy"] = {"Bhele"},
	["bhz"] = {"Bada (Indonesia)"},
	["bia"] = {"Badimaya"},
	["bib"] = {"Bissa", "Bisa"},
	["bic"] = {"Bikaru"},
	["bid"] = {"Bidiyo"},
	["bie"] = {"Bepour"},
	["bif"] = {"Biafada"},
	["big"] = {"Biangai"},
	["bij"] = {"Vaghat-Ya-Bijim-Legeri"},
	["bik"] = {"Bikol"},
	["bil"] = {"Bile"},
	["bim"] = {"Bimoba"},
	["bin"] = {"Bini", "Edo"},
	["bio"] = {"Nai"},
	["bip"] = {"Bila"},
	["biq"] = {"Bipi"},
	["bir"] = {"Bisorio"},
	["bit"] = {"Berinomo"},
	["biu"] = {"Biete"},
	["biv"] = {"Southern Birifor"},
	["biw"] = {"Kol (Cameroon)"},
	["bix"] = {"Bijori"},
	["biy"] = {"Birhor"},
	["biz"] = {"Baloi"},
	["bja"] = {"Budza"},
	["bjb"] = {"Banggarla"},
	["bjc"] = {"Bariji"},
	["bje"] = {"Biao-Jiao Mien"},
	["bjf"] = {"Barzani Jewish Neo-Aramaic"},
	["bjg"] = {"Bidyogo"},
	["bjh"] = {"Bahinemo"},
	["bji"] = {"Burji"},
	["bjj"] = {"Kanauji"},
	["bjk"] = {"Barok"},
	["bjl"] = {"Bulu (Papua New Guinea)"},
	["bjm"] = {"Bajelani"},
	["bjn"] = {"Banjar"},
	["bjo"] = {"Mid-Southern Banda"},
	["bjp"] = {"Fanamaket"},
	["bjr"] = {"Binumarien"},
	["bjs"] = {"Bajan"},
	["bjt"] = {"Balanta-Ganja"},
	["bju"] = {"Busuu"},
	["bjv"] = {"Bedjond"},
	["bjw"] = {"Bakwé"},
	["bjx"] = {"Banao Itneg"},
	["bjy"] = {"Bayali"},
	["bjz"] = {"Baruga"},
	["bka"] = {"Kyak"},
	["bkc"] = {"Baka (Cameroon)"},
	["bkd"] = {"Binukid", "Talaandig"},
	["bkf"] = {"Beeke"},
	["bkg"] = {"Buraka"},
	["bkh"] = {"Bakoko"},
	["bki"] = {"Baki"},
	["bkj"] = {"Pande"},
	["bkk"] = {"Brokskat"},
	["bkl"] = {"Berik"},
	["bkm"] = {"Kom (Cameroon)"},
	["bkn"] = {"Bukitan"},
	["bko"] = {"Kwa'"},
	["bkp"] = {"Boko (Democratic Republic of Congo)"},
	["bkq"] = {"Bakairí"},
	["bkr"] = {"Bakumpai"},
	["bks"] = {"Northern Sorsoganon"},
	["bkt"] = {"Boloki"},
	["bku"] = {"Buhid"},
	["bkv"] = {"Bekwarra"},
	["bkw"] = {"Bekwel"},
	["bkx"] = {"Baikeno"},
	["bky"] = {"Bokyi"},
	["bkz"] = {"Bungku"},
	["bla"] = {"Siksika"},
	["blb"] = {"Bilua"},
	["blc"] = {"Bella Coola"},
	["bld"] = {"Bolango"},
	["ble"] = {"Balanta-Kentohe"},
	["blf"] = {"Buol"},
	["blg"] = {"Balau"},
	["blh"] = {"Kuwaa"},
	["bli"] = {"Bolia"},
	["blj"] = {"Bolongan"},
	["blk"] = {"Pa'o Karen", "Pa'O"},
	["bll"] = {"Biloxi"},
	["blm"] = {"Beli (South Sudan)"},
	["bln"] = {"Southern Catanduanes Bikol"},
	["blo"] = {"Anii"},
	["blp"] = {"Blablanga"},
	["blq"] = {"Baluan-Pam"},
	["blr"] = {"Blang"},
	["bls"] = {"Balaesang"},
	["blt"] = {"Tai Dam"},
	["blv"] = {"Kibala", "Bolo"},
	["blw"] = {"Balangao"},
	["blx"] = {"Mag-Indi Ayta"},
	["bly"] = {"Notre"},
	["blz"] = {"Balantak"},
	["bma"] = {"Lame"},
	["bmb"] = {"Bembe"},
	["bmc"] = {"Biem"},
	["bmd"] = {"Baga Manduri"},
	["bme"] = {"Limassa"},
	["bmf"] = {"Bom-Kim"},
	["bmg"] = {"Bamwe"},
	["bmh"] = {"Kein"},
	["bmi"] = {"Bagirmi"},
	["bmj"] = {"Bote-Majhi"},
	["bmk"] = {"Ghayavi"},
	["bml"] = {"Bomboli"},
	["bmm"] = {"Northern Betsimisaraka Malagasy"},
	["bmn"] = {"Bina (Papua New Guinea)"},
	["bmo"] = {"Bambalang"},
	["bmp"] = {"Bulgebi"},
	["bmq"] = {"Bomu"},
	["bmr"] = {"Muinane"},
	["bms"] = {"Bilma Kanuri"},
	["bmt"] = {"Biao Mon"},
	["bmu"] = {"Somba-Siawari"},
	["bmv"] = {"Bum"},
	["bmw"] = {"Bomwali"},
	["bmx"] = {"Baimak"},
	["bmz"] = {"Baramu"},
	["bna"] = {"Bonerate"},
	["bnb"] = {"Bookan"},
	["bnc"] = {"Bontok"},
	["bnd"] = {"Banda (Indonesia)"},
	["bne"] = {"Bintauna"},
	["bnf"] = {"Masiwang"},
	["bng"] = {"Benga"},
	["bni"] = {"Bangi"},
	["bnj"] = {"Eastern Tawbuid"},
	["bnk"] = {"Bierebo"},
	["bnl"] = {"Boon"},
	["bnm"] = {"Batanga"},
	["bnn"] = {"Bunun"},
	["bno"] = {"Bantoanon"},
	["bnp"] = {"Bola"},
	["bnq"] = {"Bantik"},
	["bnr"] = {"Butmas-Tur"},
	["bns"] = {"Bundeli"},
	["bnt"] = {"Bantu languages"},
	["bnu"] = {"Bentong"},
	["bnv"] = {"Bonerif", "Beneraf", "Edwas"},
	["bnw"] = {"Bisis"},
	["bnx"] = {"Bangubangu"},
	["bny"] = {"Bintulu"},
	["bnz"] = {"Beezen"},
	["boa"] = {"Bora"},
	["bob"] = {"Aweer"},
	["boe"] = {"Mundabli"},
	["bof"] = {"Bolon"},
	["bog"] = {"Bamako Sign Language"},
	["boh"] = {"Boma"},
	["boi"] = {"Barbareño"},
	["boj"] = {"Anjam"},
	["bok"] = {"Bonjo"},
	["bol"] = {"Bole"},
	["bom"] = {"Berom"},
	["bon"] = {"Bine"},
	["boo"] = {"Tiemacèwè Bozo"},
	["bop"] = {"Bonkiman"},
	["boq"] = {"Bogaya"},
	["bor"] = {"Borôro"},
	["bot"] = {"Bongo"},
	["bou"] = {"Bondei"},
	["bov"] = {"Tuwuli"},
	["bow"] = {"Rema"},
	["box"] = {"Buamu"},
	["boy"] = {"Bodo (Central African Republic)"},
	["boz"] = {"Tiéyaxo Bozo"},
	["bpa"] = {"Daakaka"},
	["bpb"] = {"Barbacoas"},
	["bpd"] = {"Banda-Banda"},
	["bpg"] = {"Bonggo"},
	["bph"] = {"Botlikh"},
	["bpi"] = {"Bagupi"},
	["bpj"] = {"Binji"},
	["bpk"] = {"Orowe", "'Ôrôê"},
	["bpl"] = {"Broome Pearling Lugger Pidgin"},
	["bpm"] = {"Biyom"},
	["bpn"] = {"Dzao Min"},
	["bpo"] = {"Anasi"},
	["bpp"] = {"Kaure"},
	["bpq"] = {"Banda Malay"},
	["bpr"] = {"Koronadal Blaan"},
	["bps"] = {"Sarangani Blaan"},
	["bpt"] = {"Barrow Point"},
	["bpu"] = {"Bongu"},
	["bpv"] = {"Bian Marind"},
	["bpw"] = {"Bo (Papua New Guinea)"},
	["bpx"] = {"Palya Bareli"},
	["bpy"] = {"Bishnupriya"},
	["bpz"] = {"Bilba"},
	["bqa"] = {"Tchumbuli"},
	["bqb"] = {"Bagusa"},
	["bqc"] = {"Boko (Benin)", "Boo"},
	["bqd"] = {"Bung"},
	["bqf"] = {"Baga Kaloum"},
	["bqg"] = {"Bago-Kusuntu"},
	["bqh"] = {"Baima"},
	["bqi"] = {"Bakhtiari"},
	["bqj"] = {"Bandial"},
	["bqk"] = {"Banda-Mbrès"},
	["bql"] = {"Bilakura"},
	["bqm"] = {"Wumboko"},
	["bqn"] = {"Bulgarian Sign Language"},
	["bqo"] = {"Balo"},
	["bqp"] = {"Busa"},
	["bqq"] = {"Biritai"},
	["bqr"] = {"Burusu"},
	["bqs"] = {"Bosngun"},
	["bqt"] = {"Bamukumbit"},
	["bqu"] = {"Boguru"},
	["bqv"] = {"Koro Wachi", "Begbere-Ejar"},
	["bqw"] = {"Buru (Nigeria)"},
	["bqx"] = {"Baangi"},
	["bqy"] = {"Bengkala Sign Language"},
	["bqz"] = {"Bakaka"},
	["bra"] = {"Braj"},
	["brb"] = {"Lave"},
	["brc"] = {"Berbice Creole Dutch"},
	["brd"] = {"Baraamu"},
	["brf"] = {"Bera"},
	["brg"] = {"Baure"},
	["brh"] = {"Brahui"},
	["bri"] = {"Mokpwe"},
	["brj"] = {"Bieria"},
	["brk"] = {"Birked"},
	["brl"] = {"Birwa"},
	["brm"] = {"Barambu"},
	["brn"] = {"Boruca"},
	["bro"] = {"Brokkat"},
	["brp"] = {"Barapasi"},
	["brq"] = {"Breri"},
	["brr"] = {"Birao"},
	["brs"] = {"Baras"},
	["brt"] = {"Bitare"},
	["bru"] = {"Eastern Bru"},
	["brv"] = {"Western Bru"},
	["brw"] = {"Bellari"},
	["brx"] = {"Bodo (India)"},
	["bry"] = {"Burui"},
	["brz"] = {"Bilbil"},
	["bsa"] = {"Abinomn"},
	["bsb"] = {"Brunei Bisaya"},
	["bsc"] = {"Bassari", "Oniyan"},
	["bse"] = {"Wushi"},
	["bsf"] = {"Bauchi"},
	["bsg"] = {"Bashkardi"},
	["bsh"] = {"Kati"},
	["bsi"] = {"Bassossi"},
	["bsj"] = {"Bangwinji"},
	["bsk"] = {"Burushaski"},
	["bsl"] = {"Basa-Gumna"},
	["bsm"] = {"Busami"},
	["bsn"] = {"Barasana-Eduria"},
	["bso"] = {"Buso"},
	["bsp"] = {"Baga Sitemu"},
	["bsq"] = {"Bassa"},
	["bsr"] = {"Bassa-Kontagora"},
	["bss"] = {"Akoose"},
	["bst"] = {"Basketo"},
	["bsu"] = {"Bahonsuai"},
	["bsv"] = {"Baga Sobané"},
	["bsw"] = {"Baiso"},
	["bsx"] = {"Yangkam"},
	["bsy"] = {"Sabah Bisaya"},
	["bta"] = {"Bata"},
	["btc"] = {"Bati (Cameroon)"},
	["btd"] = {"Batak Dairi"},
	["bte"] = {"Gamo-Ningi"},
	["btf"] = {"Birgit"},
	["btg"] = {"Gagnoa Bété"},
	["bth"] = {"Biatah Bidayuh"},
	["bti"] = {"Burate"},
	["btj"] = {"Bacanese Malay"},
	["btk"] = {"Batak languages"},
	["btm"] = {"Batak Mandailing"},
	["btn"] = {"Ratagnon"},
	["bto"] = {"Rinconada Bikol"},
	["btp"] = {"Budibud"},
	["btq"] = {"Batek"},
	["btr"] = {"Baetora"},
	["bts"] = {"Batak Simalungun"},
	["btt"] = {"Bete-Bendi"},
	["btu"] = {"Batu"},
	["btv"] = {"Bateri"},
	["btw"] = {"Butuanon"},
	["btx"] = {"Batak Karo"},
	["bty"] = {"Bobot"},
	["btz"] = {"Batak Alas-Kluet"},
	["bua"] = {"Buriat"},
	["bub"] = {"Bua"},
	["buc"] = {"Bushi"},
	["bud"] = {"Ntcham"},
	["bue"] = {"Beothuk"},
	["buf"] = {"Bushoong"},
	["bug"] = {"Buginese"},
	["buh"] = {"Younuo Bunu"},
	["bui"] = {"Bongili"},
	["buj"] = {"Basa-Gurmana"},
	["buk"] = {"Bugawac"},
	["bum"] = {"Bulu (Cameroon)"},
	["bun"] = {"Sherbro"},
	["buo"] = {"Terei"},
	["bup"] = {"Busoa"},
	["buq"] = {"Brem"},
	["bus"] = {"Bokobaru"},
	["but"] = {"Bungain"},
	["buu"] = {"Budu"},
	["buv"] = {"Bun"},
	["buw"] = {"Bubi"},
	["bux"] = {"Boghom"},
	["buy"] = {"Bullom So"},
	["buz"] = {"Bukwen"},
	["bva"] = {"Barein"},
	["bvb"] = {"Bube"},
	["bvc"] = {"Baelelea"},
	["bvd"] = {"Baeggu"},
	["bve"] = {"Berau Malay"},
	["bvf"] = {"Boor"},
	["bvg"] = {"Bonkeng"},
	["bvh"] = {"Bure"},
	["bvi"] = {"Belanda Viri"},
	["bvj"] = {"Baan"},
	["bvk"] = {"Bukat"},
	["bvl"] = {"Bolivian Sign Language"},
	["bvm"] = {"Bamunka"},
	["bvn"] = {"Buna"},
	["bvo"] = {"Bolgo"},
	["bvp"] = {"Bumang"},
	["bvq"] = {"Birri"},
	["bvr"] = {"Burarra"},
	["bvt"] = {"Bati (Indonesia)"},
	["bvu"] = {"Bukit Malay"},
	["bvv"] = {"Baniva"},
	["bvw"] = {"Boga"},
	["bvx"] = {"Dibole"},
	["bvy"] = {"Baybayanon"},
	["bvz"] = {"Bauzi"},
	["bwa"] = {"Bwatoo"},
	["bwb"] = {"Namosi-Naitasiri-Serua"},
	["bwc"] = {"Bwile"},
	["bwd"] = {"Bwaidoka"},
	["bwe"] = {"Bwe Karen"},
	["bwf"] = {"Boselewa"},
	["bwg"] = {"Barwe"},
	["bwh"] = {"Bishuo"},
	["bwi"] = {"Baniwa"},
	["bwj"] = {"Láá Láá Bwamu"},
	["bwk"] = {"Bauwaki"},
	["bwl"] = {"Bwela"},
	["bwm"] = {"Biwat"},
	["bwn"] = {"Wunai Bunu"},
	["bwo"] = {"Boro (Ethiopia)", "Borna (Ethiopia)"},
	["bwp"] = {"Mandobo Bawah"},
	["bwq"] = {"Southern Bobo Madaré"},
	["bwr"] = {"Bura-Pabir"},
	["bws"] = {"Bomboma"},
	["bwt"] = {"Bafaw-Balong"},
	["bwu"] = {"Buli (Ghana)"},
	["bww"] = {"Bwa"},
	["bwx"] = {"Bu-Nao Bunu"},
	["bwy"] = {"Cwi Bwamu"},
	["bwz"] = {"Bwisi"},
	["bxa"] = {"Tairaha"},
	["bxb"] = {"Belanda Bor"},
	["bxc"] = {"Molengue"},
	["bxd"] = {"Pela"},
	["bxe"] = {"Birale"},
	["bxf"] = {"Bilur", "Minigir"},
	["bxg"] = {"Bangala"},
	["bxh"] = {"Buhutu"},
	["bxi"] = {"Pirlatapa"},
	["bxj"] = {"Bayungu"},
	["bxk"] = {"Bukusu", "Lubukusu"},
	["bxl"] = {"Jalkunan"},
	["bxm"] = {"Mongolia Buriat"},
	["bxn"] = {"Burduna"},
	["bxo"] = {"Barikanchi"},
	["bxp"] = {"Bebil"},
	["bxq"] = {"Beele"},
	["bxr"] = {"Russia Buriat"},
	["bxs"] = {"Busam"},
	["bxu"] = {"China Buriat"},
	["bxv"] = {"Berakou"},
	["bxw"] = {"Bankagooma"},
	["bxz"] = {"Binahari"},
	["bya"] = {"Batak"},
	["byb"] = {"Bikya"},
	["byc"] = {"Ubaghara"},
	["byd"] = {"Benyadu'"},
	["bye"] = {"Pouye"},
	["byf"] = {"Bete"},
	["byg"] = {"Baygo"},
	["byh"] = {"Bhujel"},
	["byi"] = {"Buyu"},
	["byj"] = {"Bina (Nigeria)"},
	["byk"] = {"Biao"},
	["byl"] = {"Bayono"},
	["bym"] = {"Bidjara"},
	["byn"] = {"Bilin", "Blin"},
	["byo"] = {"Biyo"},
	["byp"] = {"Bumaji"},
	["byq"] = {"Basay"},
	["byr"] = {"Baruya", "Yipma"},
	["bys"] = {"Burak"},
	["byt"] = {"Berti"},
	["byv"] = {"Medumba"},
	["byw"] = {"Belhariya"},
	["byx"] = {"Qaqet"},
	["byz"] = {"Banaro"},
	["bza"] = {"Bandi"},
	["bzb"] = {"Andio"},
	["bzc"] = {"Southern Betsimisaraka Malagasy"},
	["bzd"] = {"Bribri"},
	["bze"] = {"Jenaama Bozo"},
	["bzf"] = {"Boikin"},
	["bzg"] = {"Babuza"},
	["bzh"] = {"Mapos Buang"},
	["bzi"] = {"Bisu"},
	["bzj"] = {"Belize Kriol English"},
	["bzk"] = {"Nicaragua Creole English"},
	["bzl"] = {"Boano (Sulawesi)"},
	["bzm"] = {"Bolondo"},
	["bzn"] = {"Boano (Maluku)"},
	["bzo"] = {"Bozaba"},
	["bzp"] = {"Kemberano"},
	["bzq"] = {"Buli (Indonesia)"},
	["bzr"] = {"Biri"},
	["bzs"] = {"Brazilian Sign Language"},
	["bzt"] = {"Brithenig"},
	["bzu"] = {"Burmeso"},
	["bzv"] = {"Naami"},
	["bzw"] = {"Basa (Nigeria)"},
	["bzx"] = {"Kɛlɛngaxo Bozo"},
	["bzy"] = {"Obanliku"},
	["bzz"] = {"Evant"},
	["caa"] = {"Chortí"},
	["cab"] = {"Garifuna"},
	["cac"] = {"Chuj"},
	["cad"] = {"Caddo"},
	["cae"] = {"Lehar", "Laalaa"},
	["caf"] = {"Southern Carrier"},
	["cag"] = {"Nivaclé"},
	["cah"] = {"Cahuarano"},
	["cai"] = {"Central American Indian languages"},
	["caj"] = {"Chané"},
	["cak"] = {"Kaqchikel", "Cakchiquel"},
	["cal"] = {"Carolinian"},
	["cam"] = {"Cemuhî"},
	["can"] = {"Chambri"},
	["cao"] = {"Chácobo"},
	["cap"] = {"Chipaya"},
	["caq"] = {"Car Nicobarese"},
	["car"] = {"Galibi Carib"},
	["cas"] = {"Tsimané"},
	["cau"] = {"Caucasian languages"},
	["cav"] = {"Cavineña"},
	["caw"] = {"Callawalla"},
	["cax"] = {"Chiquitano"},
	["cay"] = {"Cayuga"},
	["caz"] = {"Canichana"},
	["cba"] = {"Chibchan languages"},
	["cbb"] = {"Cabiyarí"},
	["cbc"] = {"Carapana"},
	["cbd"] = {"Carijona"},
	["cbg"] = {"Chimila"},
	["cbi"] = {"Chachi"},
	["cbj"] = {"Ede Cabe"},
	["cbk"] = {"Chavacano"},
	["cbl"] = {"Bualkhaw Chin"},
	["cbn"] = {"Nyahkur"},
	["cbo"] = {"Izora"},
	["cbq"] = {"Tsucuba", "Cuba"},
	["cbr"] = {"Cashibo-Cacataibo"},
	["cbs"] = {"Cashinahua"},
	["cbt"] = {"Chayahuita"},
	["cbu"] = {"Candoshi-Shapra"},
	["cbv"] = {"Cacua"},
	["cbw"] = {"Kinabalian"},
	["cby"] = {"Carabayo"},
	["cca"] = {"Cauca"},
	["ccc"] = {"Chamicuro"},
	["ccd"] = {"Cafundo Creole"},
	["cce"] = {"Chopi"},
	["ccg"] = {"Samba Daka"},
	["cch"] = {"Atsam"},
	["ccj"] = {"Kasanga"},
	["ccl"] = {"Cutchi-Swahili"},
	["ccm"] = {"Malaccan Creole Malay"},
	["ccn"] = {"North Caucasian languages"},
	["cco"] = {"Comaltepec Chinantec"},
	["ccp"] = {"Chakma"},
	["ccr"] = {"Cacaopera"},
	["ccs"] = {"South Caucasian languages"},
	["cda"] = {"Choni"},
	["cdc"] = {"Chadic languages"},
	["cdd"] = {"Caddoan languages"},
	["cde"] = {"Chenchu"},
	["cdf"] = {"Chiru"},
	["cdg"] = {"Chamari"},
	["cdh"] = {"Chambeali"},
	["cdi"] = {"Chodri"},
	["cdj"] = {"Churahi"},
	["cdm"] = {"Chepang"},
	["cdn"] = {"Chaudangsi"},
	["cdo"] = {"Min Dong Chinese"},
	["cdr"] = {"Cinda-Regi-Tiyal"},
	["cds"] = {"Chadian Sign Language"},
	["cdy"] = {"Chadong"},
	["cdz"] = {"Koda"},
	["cea"] = {"Lower Chehalis"},
	["ceb"] = {"Cebuano"},
	["ceg"] = {"Chamacoco"},
	["cek"] = {"Eastern Khumi Chin"},
	["cel"] = {"Celtic languages"},
	["cen"] = {"Cen"},
	["cet"] = {"Centúúm"},
	["cey"] = {"Ekai Chin"},
	["cfa"] = {"Dijim-Bwilim"},
	["cfd"] = {"Cara"},
	["cfg"] = {"Como Karim"},
	["cfm"] = {"Falam Chin"},
	["cga"] = {"Changriwa"},
	["cgc"] = {"Kagayanen"},
	["cgg"] = {"Chiga"},
	["cgk"] = {"Chocangacakha"},
	["chb"] = {"Chibcha"},
	["chc"] = {"Catawba"},
	["chd"] = {"Highland Oaxaca Chontal"},
	["chf"] = {"Tabasco Chontal"},
	["chg"] = {"Chagatai"},
	["chh"] = {"Chinook"},
	["chj"] = {"Ojitlán Chinantec"},
	["chk"] = {"Chuukese"},
	["chl"] = {"Cahuilla"},
	["chm"] = {"Mari (Russia)"},
	["chn"] = {"Chinook jargon"},
	["cho"] = {"Choctaw"},
	["chp"] = {"Chipewyan", "Dene Suline"},
	["chq"] = {"Quiotepec Chinantec"},
	["chr"] = {"Cherokee"},
	["cht"] = {"Cholón"},
	["chw"] = {"Chuwabu"},
	["chx"] = {"Chantyal"},
	["chy"] = {"Cheyenne"},
	["chz"] = {"Ozumacín Chinantec"},
	["cia"] = {"Cia-Cia"},
	["cib"] = {"Ci Gbe"},
	["cic"] = {"Chickasaw"},
	["cid"] = {"Chimariko"},
	["cie"] = {"Cineni"},
	["cih"] = {"Chinali"},
	["cik"] = {"Chitkuli Kinnauri"},
	["cim"] = {"Cimbrian"},
	["cin"] = {"Cinta Larga"},
	["cip"] = {"Chiapanec"},
	["cir"] = {"Tiri", "Haméa", "Méa"},
	["ciw"] = {"Chippewa"},
	["ciy"] = {"Chaima"},
	["cja"] = {"Western Cham"},
	["cje"] = {"Chru"},
	["cjh"] = {"Upper Chehalis"},
	["cji"] = {"Chamalal"},
	["cjk"] = {"Chokwe"},
	["cjm"] = {"Eastern Cham"},
	["cjn"] = {"Chenapian"},
	["cjo"] = {"Ashéninka Pajonal"},
	["cjp"] = {"Cabécar"},
	["cjs"] = {"Shor"},
	["cjv"] = {"Chuave"},
	["cjy"] = {"Jinyu Chinese"},
	["ckb"] = {"Central Kurdish"},
	["ckh"] = {"Chak"},
	["ckl"] = {"Cibak"},
	["ckn"] = {"Kaang Chin"},
	["cko"] = {"Anufo"},
	["ckq"] = {"Kajakse"},
	["ckr"] = {"Kairak"},
	["cks"] = {"Tayo"},
	["ckt"] = {"Chukot"},
	["cku"] = {"Koasati"},
	["ckv"] = {"Kavalan"},
	["ckx"] = {"Caka"},
	["cky"] = {"Cakfem-Mushere"},
	["ckz"] = {"Cakchiquel-Quiché Mixed Language"},
	["cla"] = {"Ron"},
	["clc"] = {"Chilcotin"},
	["cld"] = {"Chaldean Neo-Aramaic"},
	["cle"] = {"Lealao Chinantec"},
	["clh"] = {"Chilisso"},
	["cli"] = {"Chakali"},
	["clj"] = {"Laitu Chin"},
	["clk"] = {"Idu-Mishmi"},
	["cll"] = {"Chala"},
	["clm"] = {"Clallam"},
	["clo"] = {"Lowland Oaxaca Chontal"},
	["clt"] = {"Lautu Chin"},
	["clu"] = {"Caluyanun"},
	["clw"] = {"Chulym"},
	["cly"] = {"Eastern Highland Chatino"},
	["cma"] = {"Maa"},
	["cmc"] = {"Chamic languages"},
	["cme"] = {"Cerma"},
	["cmg"] = {"Classical Mongolian"},
	["cmi"] = {"Emberá-Chamí"},
	["cml"] = {"Campalagian"},
	["cmm"] = {"Michigamea"},
	["cmn"] = {"Mandarin Chinese"},
	["cmo"] = {"Central Mnong"},
	["cmr"] = {"Mro-Khimi Chin"},
	["cms"] = {"Messapic"},
	["cmt"] = {"Camtho"},
	["cna"] = {"Changthang"},
	["cnb"] = {"Chinbon Chin"},
	["cnc"] = {"Côông"},
	["cng"] = {"Northern Qiang"},
	["cnh"] = {"Hakha Chin", "Haka Chin"},
	["cni"] = {"Asháninka"},
	["cnk"] = {"Khumi Chin"},
	["cnl"] = {"Lalana Chinantec"},
	["cno"] = {"Con"},
	["cnr"] = {"Montenegrin"},
	["cns"] = {"Central Asmat"},
	["cnt"] = {"Tepetotutla Chinantec"},
	["cnu"] = {"Chenoua"},
	["cnw"] = {"Ngawn Chin"},
	["cnx"] = {"Middle Cornish"},
	["coa"] = {"Cocos Islands Malay"},
	["cob"] = {"Chicomuceltec"},
	["coc"] = {"Cocopa"},
	["cod"] = {"Cocama-Cocamilla"},
	["coe"] = {"Koreguaje"},
	["cof"] = {"Colorado"},
	["cog"] = {"Chong"},
	["coh"] = {"Chonyi-Dzihana-Kauma", "Chichonyi-Chidzihana-Chikauma"},
	["coj"] = {"Cochimi"},
	["cok"] = {"Santa Teresa Cora"},
	["col"] = {"Columbia-Wenatchi"},
	["com"] = {"Comanche"},
	["con"] = {"Cofán"},
	["coo"] = {"Comox"},
	["cop"] = {"Coptic"},
	["coq"] = {"Coquille"},
	["cot"] = {"Caquinte"},
	["cou"] = {"Wamey"},
	["cov"] = {"Cao Miao"},
	["cow"] = {"Cowlitz"},
	["cox"] = {"Nanti"},
	["coz"] = {"Chochotec"},
	["cpa"] = {"Palantla Chinantec"},
	["cpb"] = {"Ucayali-Yurúa Ashéninka"},
	["cpc"] = {"Ajyíninka Apurucayali"},
	["cpe"] = {"English-based creoles and pidgins"},
	["cpf"] = {"French-based creoles and pidgins"},
	["cpg"] = {"Cappadocian Greek"},
	["cpi"] = {"Chinese Pidgin English"},
	["cpn"] = {"Cherepon"},
	["cpo"] = {"Kpeego"},
	["cpp"] = {"Portuguese-based creoles and pidgins"},
	["cps"] = {"Capiznon"},
	["cpu"] = {"Pichis Ashéninka"},
	["cpx"] = {"Pu-Xian Chinese"},
	["cpy"] = {"South Ucayali Ashéninka"},
	["cqd"] = {"Chuanqiandian Cluster Miao"},
	["cra"] = {"Chara"},
	["crb"] = {"Island Carib"},
	["crc"] = {"Lonwolwol"},
	["crd"] = {"Coeur d'Alene"},
	["crf"] = {"Caramanta"},
	["crg"] = {"Michif"},
	["crh"] = {"Crimean Tatar", "Crimean Turkish"},
	["cri"] = {"Sãotomense"},
	["crj"] = {"Southern East Cree"},
	["crk"] = {"Plains Cree"},
	["crl"] = {"Northern East Cree"},
	["crm"] = {"Moose Cree"},
	["crn"] = {"El Nayar Cora"},
	["cro"] = {"Crow"},
	["crp"] = {"Creoles and pidgins"},
	["crq"] = {"Iyo'wujwa Chorote"},
	["crr"] = {"Carolina Algonquian"},
	["crs"] = {"Seselwa Creole French"},
	["crt"] = {"Iyojwa'ja Chorote"},
	["crv"] = {"Chaura"},
	["crw"] = {"Chrau"},
	["crx"] = {"Carrier"},
	["cry"] = {"Cori"},
	["crz"] = {"Cruzeño"},
	["csa"] = {"Chiltepec Chinantec"},
	["csb"] = {"Kashubian"},
	["csc"] = {"Catalan Sign Language", "Lengua de señas catalana", "Llengua de Signes Catalana"},
	["csd"] = {"Chiangmai Sign Language"},
	["cse"] = {"Czech Sign Language"},
	["csf"] = {"Cuba Sign Language"},
	["csg"] = {"Chilean Sign Language"},
	["csh"] = {"Asho Chin"},
	["csi"] = {"Coast Miwok"},
	["csj"] = {"Songlai Chin"},
	["csk"] = {"Jola-Kasa"},
	["csl"] = {"Chinese Sign Language"},
	["csm"] = {"Central Sierra Miwok"},
	["csn"] = {"Colombian Sign Language"},
	["cso"] = {"Sochiapam Chinantec", "Sochiapan Chinantec"},
	["csq"] = {"Croatia Sign Language"},
	["csr"] = {"Costa Rican Sign Language"},
	["css"] = {"Southern Ohlone"},
	["cst"] = {"Northern Ohlone"},
	["csu"] = {"Central Sudanic languages"},
	["csv"] = {"Sumtu Chin"},
	["csw"] = {"Swampy Cree"},
	["csy"] = {"Siyin Chin"},
	["csz"] = {"Coos"},
	["cta"] = {"Tataltepec Chatino"},
	["ctc"] = {"Chetco"},
	["ctd"] = {"Tedim Chin"},
	["cte"] = {"Tepinapa Chinantec"},
	["ctg"] = {"Chittagonian"},
	["cth"] = {"Thaiphum Chin"},
	["ctl"] = {"Tlacoatzintepec Chinantec"},
	["ctm"] = {"Chitimacha"},
	["ctn"] = {"Chhintange"},
	["cto"] = {"Emberá-Catío"},
	["ctp"] = {"Western Highland Chatino"},
	["cts"] = {"Northern Catanduanes Bikol"},
	["ctt"] = {"Wayanad Chetti"},
	["ctu"] = {"Chol"},
	["ctz"] = {"Zacatepec Chatino"},
	["cua"] = {"Cua"},
	["cub"] = {"Cubeo"},
	["cuc"] = {"Usila Chinantec"},
	["cug"] = {"Chungmboko", "Cung"},
	["cuh"] = {"Chuka", "Gichuka"},
	["cui"] = {"Cuiba"},
	["cuj"] = {"Mashco Piro"},
	["cuk"] = {"San Blas Kuna"},
	["cul"] = {"Culina", "Kulina"},
	["cuo"] = {"Cumanagoto"},
	["cup"] = {"Cupeño"},
	["cuq"] = {"Cun"},
	["cur"] = {"Chhulung"},
	["cus"] = {"Cushitic languages"},
	["cut"] = {"Teutila Cuicatec"},
	["cuu"] = {"Tai Ya"},
	["cuv"] = {"Cuvok"},
	["cuw"] = {"Chukwa"},
	["cux"] = {"Tepeuxila Cuicatec"},
	["cuy"] = {"Cuitlatec"},
	["cvg"] = {"Chug"},
	["cvn"] = {"Valle Nacional Chinantec"},
	["cwa"] = {"Kabwa"},
	["cwb"] = {"Maindo"},
	["cwd"] = {"Woods Cree"},
	["cwe"] = {"Kwere"},
	["cwg"] = {"Chewong", "Cheq Wong"},
	["cwt"] = {"Kuwaataay"},
	["cya"] = {"Nopala Chatino"},
	["cyb"] = {"Cayubaba"},
	["cyo"] = {"Cuyonon"},
	["czh"] = {"Huizhou Chinese"},
	["czk"] = {"Knaanic"},
	["czn"] = {"Zenzontepec Chatino"},
	["czo"] = {"Min Zhong Chinese"},
	["czt"] = {"Zotung Chin"},
	["daa"] = {"Dangaléat"},
	["dac"] = {"Dambi"},
	["dad"] = {"Marik"},
	["dae"] = {"Duupa"},
	["dag"] = {"Dagbani"},
	["dah"] = {"Gwahatike"},
	["dai"] = {"Day"},
	["daj"] = {"Dar Fur Daju"},
	["dak"] = {"Dakota"},
	["dal"] = {"Dahalo"},
	["dam"] = {"Damakawa"},
	["dao"] = {"Daai Chin"},
	["daq"] = {"Dandami Maria"},
	["dar"] = {"Dargwa"},
	["das"] = {"Daho-Doo"},
	["dau"] = {"Dar Sila Daju"},
	["dav"] = {"Taita", "Dawida"},
	["daw"] = {"Davawenyo"},
	["dax"] = {"Dayi"},
	["day"] = {"Land Dayak languages"},
	["daz"] = {"Dao"},
	["dba"] = {"Bangime"},
	["dbb"] = {"Deno"},
	["dbd"] = {"Dadiya"},
	["dbe"] = {"Dabe"},
	["dbf"] = {"Edopi"},
	["dbg"] = {"Dogul Dom Dogon"},
	["dbi"] = {"Doka"},
	["dbj"] = {"Ida'an"},
	["dbl"] = {"Dyirbal"},
	["dbm"] = {"Duguri"},
	["dbn"] = {"Duriankere"},
	["dbo"] = {"Dulbu"},
	["dbp"] = {"Duwai"},
	["dbq"] = {"Daba"},
	["dbr"] = {"Dabarre"},
	["dbt"] = {"Ben Tey Dogon"},
	["dbu"] = {"Bondum Dom Dogon"},
	["dbv"] = {"Dungu"},
	["dbw"] = {"Bankan Tey Dogon"},
	["dby"] = {"Dibiyaso"},
	["dcc"] = {"Deccan"},
	["dcr"] = {"Negerhollands"},
	["dda"] = {"Dadi Dadi"},
	["ddd"] = {"Dongotono"},
	["dde"] = {"Doondo"},
	["ddg"] = {"Fataluku"},
	["ddi"] = {"West Goodenough"},
	["ddj"] = {"Jaru"},
	["ddn"] = {"Dendi (Benin)"},
	["ddo"] = {"Dido"},
	["ddr"] = {"Dhudhuroa"},
	["dds"] = {"Donno So Dogon"},
	["ddw"] = {"Dawera-Daweloor"},
	["dec"] = {"Dagik"},
	["ded"] = {"Dedua"},
	["dee"] = {"Dewoin"},
	["def"] = {"Dezfuli"},
	["deg"] = {"Degema"},
	["deh"] = {"Dehwari"},
	["dei"] = {"Demisa"},
	["dek"] = {"Dek"},
	["del"] = {"Delaware"},
	["dem"] = {"Dem"},
	["den"] = {"Slave (Athapascan)"},
	["dep"] = {"Pidgin Delaware"},
	["deq"] = {"Dendi (Central African Republic)"},
	["der"] = {"Deori"},
	["des"] = {"Desano"},
	["dev"] = {"Domung"},
	["dez"] = {"Dengese"},
	["dga"] = {"Southern Dagaare"},
	["dgb"] = {"Bunoge Dogon"},
	["dgc"] = {"Casiguran Dumagat Agta"},
	["dgd"] = {"Dagaari Dioula"},
	["dge"] = {"Degenan"},
	["dgg"] = {"Doga"},
	["dgh"] = {"Dghwede"},
	["dgi"] = {"Northern Dagara"},
	["dgk"] = {"Dagba"},
	["dgl"] = {"Andaandi", "Dongolawi"},
	["dgn"] = {"Dagoman"},
	["dgo"] = {"Dogri (individual language)"},
	["dgr"] = {"Dogrib"},
	["dgs"] = {"Dogoso"},
	["dgt"] = {"Ndra'ngith"},
	["dgu"] = {"Degaru"},
	["dgw"] = {"Daungwurrung"},
	["dgx"] = {"Doghoro"},
	["dgz"] = {"Daga"},
	["dhd"] = {"Dhundari"},
	["dhg"] = {"Dhangu-Djangu", "Dhangu", "Djangu"},
	["dhi"] = {"Dhimal"},
	["dhl"] = {"Dhalandji"},
	["dhm"] = {"Zemba"},
	["dhn"] = {"Dhanki"},
	["dho"] = {"Dhodia"},
	["dhr"] = {"Dhargari"},
	["dhs"] = {"Dhaiso"},
	["dhu"] = {"Dhurga"},
	["dhv"] = {"Dehu", "Drehu"},
	["dhw"] = {"Dhanwar (Nepal)"},
	["dhx"] = {"Dhungaloo"},
	["dia"] = {"Dia"},
	["dib"] = {"South Central Dinka"},
	["dic"] = {"Lakota Dida"},
	["did"] = {"Didinga"},
	["dif"] = {"Dieri", "Diyari"},
	["dig"] = {"Digo", "Chidigo"},
	["dih"] = {"Kumiai"},
	["dii"] = {"Dimbong"},
	["dij"] = {"Dai"},
	["dik"] = {"Southwestern Dinka"},
	["dil"] = {"Dilling"},
	["dim"] = {"Dime"},
	["din"] = {"Dinka"},
	["dio"] = {"Dibo"},
	["dip"] = {"Northeastern Dinka"},
	["diq"] = {"Dimli (individual language)"},
	["dir"] = {"Dirim"},
	["dis"] = {"Dimasa"},
	["diu"] = {"Diriku"},
	["diw"] = {"Northwestern Dinka"},
	["dix"] = {"Dixon Reef"},
	["diy"] = {"Diuwe"},
	["diz"] = {"Ding"},
	["dja"] = {"Djadjawurrung"},
	["djb"] = {"Djinba"},
	["djc"] = {"Dar Daju Daju"},
	["djd"] = {"Djamindjung", "Ngaliwurru"},
	["dje"] = {"Zarma"},
	["djf"] = {"Djangun"},
	["dji"] = {"Djinang"},
	["djj"] = {"Djeebbana"},
	["djk"] = {"Eastern Maroon Creole", "Businenge Tongo", "Nenge"},
	["djm"] = {"Jamsay Dogon"},
	["djn"] = {"Jawoyn", "Djauan"},
	["djo"] = {"Jangkang"},
	["djr"] = {"Djambarrpuyngu"},
	["dju"] = {"Kapriman"},
	["djw"] = {"Djawi"},
	["dka"] = {"Dakpakha"},
	["dkk"] = {"Dakka"},
	["dkr"] = {"Kuijau"},
	["dks"] = {"Southeastern Dinka"},
	["dkx"] = {"Mazagway"},
	["dlg"] = {"Dolgan"},
	["dlk"] = {"Dahalik"},
	["dlm"] = {"Dalmatian"},
	["dln"] = {"Darlong"},
	["dma"] = {"Duma"},
	["dmb"] = {"Mombo Dogon"},
	["dmc"] = {"Gavak"},
	["dmd"] = {"Madhi Madhi"},
	["dme"] = {"Dugwor"},
	["dmg"] = {"Upper Kinabatangan"},
	["dmk"] = {"Domaaki"},
	["dml"] = {"Dameli"},
	["dmm"] = {"Dama"},
	["dmn"] = {"Mande languages"},
	["dmo"] = {"Kemedzung"},
	["dmr"] = {"East Damar"},
	["dms"] = {"Dampelas"},
	["dmu"] = {"Dubu", "Tebi"},
	["dmv"] = {"Dumpas"},
	["dmw"] = {"Mudburra"},
	["dmx"] = {"Dema"},
	["dmy"] = {"Demta", "Sowari"},
	["dna"] = {"Upper Grand Valley Dani"},
	["dnd"] = {"Daonda"},
	["dne"] = {"Ndendeule"},
	["dng"] = {"Dungan"},
	["dni"] = {"Lower Grand Valley Dani"},
	["dnj"] = {"Dan"},
	["dnk"] = {"Dengka"},
	["dnn"] = {"Dzùùngoo"},
	["dno"] = {"Ndrulo", "Northern Lendu"},
	["dnr"] = {"Danaru"},
	["dnt"] = {"Mid Grand Valley Dani"},
	["dnu"] = {"Danau"},
	["dnv"] = {"Danu"},
	["dnw"] = {"Western Dani"},
	["dny"] = {"Dení"},
	["doa"] = {"Dom"},
	["dob"] = {"Dobu"},
	["doc"] = {"Northern Dong"},
	["doe"] = {"Doe"},
	["dof"] = {"Domu"},
	["doh"] = {"Dong"},
	["doi"] = {"Dogri (macrolanguage)"},
	["dok"] = {"Dondo"},
	["dol"] = {"Doso"},
	["don"] = {"Toura (Papua New Guinea)"},
	["doo"] = {"Dongo"},
	["dop"] = {"Lukpa"},
	["doq"] = {"Dominican Sign Language"},
	["dor"] = {"Dori'o"},
	["dos"] = {"Dogosé"},
	["dot"] = {"Dass"},
	["dov"] = {"Dombe"},
	["dow"] = {"Doyayo"},
	["dox"] = {"Bussa"},
	["doy"] = {"Dompo"},
	["doz"] = {"Dorze"},
	["dpp"] = {"Papar"},
	["dra"] = {"Dravidian languages"},
	["drb"] = {"Dair"},
	["drc"] = {"Minderico"},
	["drd"] = {"Darmiya"},
	["dre"] = {"Dolpo"},
	["drg"] = {"Rungus"},
	["dri"] = {"C'Lela"},
	["drl"] = {"Paakantyi"},
	["drn"] = {"West Damar"},
	["dro"] = {"Daro-Matu Melanau"},
	["drq"] = {"Dura"},
	["drr"] = {"Dororo"},
	["drs"] = {"Gedeo"},
	["drt"] = {"Drents"},
	["dru"] = {"Rukai"},
	["dry"] = {"Darai"},
	["dsb"] = {"Lower Sorbian"},
	["dse"] = {"Dutch Sign Language"},
	["dsh"] = {"Daasanach"},
	["dsi"] = {"Disa"},
	["dsl"] = {"Danish Sign Language"},
	["dsn"] = {"Dusner"},
	["dso"] = {"Desiya"},
	["dsq"] = {"Tadaksahak"},
	["dta"] = {"Daur"},
	["dtb"] = {"Labuk-Kinabatangan Kadazan"},
	["dtd"] = {"Ditidaht"},
	["dth"] = {"Adithinngithigh"},
	["dti"] = {"Ana Tinga Dogon"},
	["dtk"] = {"Tene Kan Dogon"},
	["dtm"] = {"Tomo Kan Dogon"},
	["dtn"] = {"Daatsʼíin"},
	["dto"] = {"Tommo So Dogon"},
	["dtp"] = {"Kadazan Dusun", "Central Dusun"},
	["dtr"] = {"Lotud"},
	["dts"] = {"Toro So Dogon"},
	["dtt"] = {"Toro Tegu Dogon"},
	["dtu"] = {"Tebul Ure Dogon"},
	["dty"] = {"Dotyali"},
	["dua"] = {"Duala"},
	["dub"] = {"Dubli"},
	["duc"] = {"Duna"},
	["due"] = {"Umiray Dumaget Agta"},
	["duf"] = {"Dumbea", "Drubea"},
	["dug"] = {"Duruma", "Chiduruma"},
	["duh"] = {"Dungra Bhil"},
	["dui"] = {"Dumun"},
	["duk"] = {"Uyajitaya"},
	["dul"] = {"Alabat Island Agta"},
	["dum"] = {"Middle Dutch (ca. 1050-1350)"},
	["dun"] = {"Dusun Deyah"},
	["duo"] = {"Dupaninan Agta"},
	["dup"] = {"Duano"},
	["duq"] = {"Dusun Malang"},
	["dur"] = {"Dii"},
	["dus"] = {"Dumi"},
	["duu"] = {"Drung"},
	["duv"] = {"Duvle"},
	["duw"] = {"Dusun Witu"},
	["dux"] = {"Duungooma"},
	["duy"] = {"Dicamay Agta"},
	["duz"] = {"Duli-Gey"},
	["dva"] = {"Duau"},
	["dwa"] = {"Diri"},
	["dwr"] = {"Dawro"},
	["dws"] = {"Dutton World Speedwords"},
	["dwu"] = {"Dhuwal"},
	["dww"] = {"Dawawa"},
	["dwy"] = {"Dhuwaya"},
	["dwz"] = {"Dewas Rai"},
	["dya"] = {"Dyan"},
	["dyb"] = {"Dyaberdyaber"},
	["dyd"] = {"Dyugun"},
	["dyg"] = {"Villa Viciosa Agta"},
	["dyi"] = {"Djimini Senoufo"},
	["dym"] = {"Yanda Dom Dogon"},
	["dyn"] = {"Dyangadi", "Dhanggatti"},
	["dyo"] = {"Jola-Fonyi"},
	["dyu"] = {"Dyula"},
	["dyy"] = {"Djabugay", "Dyaabugay"},
	["dza"] = {"Tunzu"},
	["dze"] = {"Djiwarli"},
	["dzg"] = {"Dazaga"},
	["dzl"] = {"Dzalakha"},
	["dzn"] = {"Dzando"},
	["eaa"] = {"Karenggapa"},
	["ebg"] = {"Ebughu"},
	["ebk"] = {"Eastern Bontok"},
	["ebo"] = {"Teke-Ebo"},
	["ebr"] = {"Ebrié"},
	["ebu"] = {"Embu", "Kiembu"},
	["ecr"] = {"Eteocretan"},
	["ecs"] = {"Ecuadorian Sign Language"},
	["ecy"] = {"Eteocypriot"},
	["eee"] = {"E"},
	["efa"] = {"Efai"},
	["efe"] = {"Efe"},
	["efi"] = {"Efik"},
	["ega"] = {"Ega"},
	["egl"] = {"Emilian"},
	["ego"] = {"Eggon"},
	["egx"] = {"Egyptian languages"},
	["egy"] = {"Egyptian (Ancient)"},
	["ehu"] = {"Ehueun"},
	["eip"] = {"Eipomek"},
	["eit"] = {"Eitiep"},
	["eiv"] = {"Askopan"},
	["eja"] = {"Ejamat"},
	["eka"] = {"Ekajuk"},
	["ekc"] = {"Eastern Karnic"},
	["eke"] = {"Ekit"},
	["ekg"] = {"Ekari"},
	["eki"] = {"Eki"},
	["ekk"] = {"Standard Estonian"},
	["ekl"] = {"Kol (Bangladesh)", "Kol"},
	["ekm"] = {"Elip"},
	["eko"] = {"Koti"},
	["ekp"] = {"Ekpeye"},
	["ekr"] = {"Yace"},
	["eky"] = {"Eastern Kayah"},
	["ele"] = {"Elepi"},
	["elh"] = {"El Hugeirat"},
	["eli"] = {"Nding"},
	["elk"] = {"Elkei"},
	["elm"] = {"Eleme"},
	["elo"] = {"El Molo"},
	["elu"] = {"Elu"},
	["elx"] = {"Elamite"},
	["ema"] = {"Emai-Iuleha-Ora"},
	["emb"] = {"Embaloh"},
	["eme"] = {"Emerillon"},
	["emg"] = {"Eastern Meohang"},
	["emi"] = {"Mussau-Emira"},
	["emk"] = {"Eastern Maninkakan"},
	["emm"] = {"Mamulique"},
	["emn"] = {"Eman"},
	["emp"] = {"Northern Emberá"},
	["ems"] = {"Pacific Gulf Yupik"},
	["emu"] = {"Eastern Muria"},
	["emw"] = {"Emplawas"},
	["emx"] = {"Erromintxela"},
	["emy"] = {"Epigraphic Mayan"},
	["ena"] = {"Apali"},
	["enb"] = {"Markweeta"},
	["enc"] = {"En"},
	["end"] = {"Ende"},
	["enf"] = {"Forest Enets"},
	["enh"] = {"Tundra Enets"},
	["enl"] = {"Enlhet"},
	["enm"] = {"Middle English (1100-1500)"},
	["enn"] = {"Engenni"},
	["eno"] = {"Enggano"},
	["enq"] = {"Enga"},
	["enr"] = {"Emumu", "Emem"},
	["enu"] = {"Enu"},
	["env"] = {"Enwan (Edu State)"},
	["enw"] = {"Enwan (Akwa Ibom State)"},
	["enx"] = {"Enxet"},
	["eot"] = {"Beti (Côte d'Ivoire)"},
	["epi"] = {"Epie"},
	["era"] = {"Eravallan"},
	["erg"] = {"Sie"},
	["erh"] = {"Eruwa"},
	["eri"] = {"Ogea"},
	["erk"] = {"South Efate"},
	["ero"] = {"Horpa"},
	["err"] = {"Erre"},
	["ers"] = {"Ersu"},
	["ert"] = {"Eritai"},
	["erw"] = {"Erokwanas"},
	["ese"] = {"Ese Ejja"},
	["esg"] = {"Aheri Gondi"},
	["esh"] = {"Eshtehardi"},
	["esi"] = {"North Alaskan Inupiatun"},
	["esk"] = {"Northwest Alaska Inupiatun"},
	["esl"] = {"Egypt Sign Language"},
	["esm"] = {"Esuma"},
	["esn"] = {"Salvadoran Sign Language"},
	["eso"] = {"Estonian Sign Language"},
	["esq"] = {"Esselen"},
	["ess"] = {"Central Siberian Yupik"},
	["esu"] = {"Central Yupik"},
	["esx"] = {"Eskimo-Aleut languages"},
	["esy"] = {"Eskayan"},
	["etb"] = {"Etebi"},
	["etc"] = {"Etchemin"},
	["eth"] = {"Ethiopian Sign Language"},
	["etn"] = {"Eton (Vanuatu)"},
	["eto"] = {"Eton (Cameroon)"},
	["etr"] = {"Edolo"},
	["ets"] = {"Yekhee"},
	["ett"] = {"Etruscan"},
	["etu"] = {"Ejagham"},
	["etx"] = {"Eten"},
	["etz"] = {"Semimi"},
	["euq"] = {"Basque (family)"},
	["eve"] = {"Even"},
	["evh"] = {"Uvbie"},
	["evn"] = {"Evenki"},
	["ewo"] = {"Ewondo"},
	["ext"] = {"Extremaduran"},
	["eya"] = {"Eyak"},
	["eyo"] = {"Keiyo"},
	["eza"] = {"Ezaa"},
	["eze"] = {"Uzekwe"},
	["faa"] = {"Fasu"},
	["fab"] = {"Fa d'Ambu"},
	["fad"] = {"Wagi"},
	["faf"] = {"Fagani"},
	["fag"] = {"Finongan"},
	["fah"] = {"Baissa Fali"},
	["fai"] = {"Faiwol"},
	["faj"] = {"Faita"},
	["fak"] = {"Fang (Cameroon)"},
	["fal"] = {"South Fali"},
	["fam"] = {"Fam"},
	["fan"] = {"Fang (Equatorial Guinea)"},
	["fap"] = {"Paloor"},
	["far"] = {"Fataleka"},
	["fat"] = {"Fanti"},
	["fau"] = {"Fayu"},
	["fax"] = {"Fala"},
	["fay"] = {"Southwestern Fars"},
	["faz"] = {"Northwestern Fars"},
	["fbl"] = {"West Albay Bikol"},
	["fcs"] = {"Quebec Sign Language"},
	["fer"] = {"Feroge"},
	["ffi"] = {"Foia Foia"},
	["ffm"] = {"Maasina Fulfulde"},
	["fgr"] = {"Fongoro"},
	["fia"] = {"Nobiin"},
	["fie"] = {"Fyer"},
	["fil"] = {"Filipino", "Pilipino"},
	["fip"] = {"Fipa"},
	["fir"] = {"Firan"},
	["fit"] = {"Tornedalen Finnish"},
	["fiu"] = {"Finno-Ugrian languages"},
	["fiw"] = {"Fiwaga"},
	["fkk"] = {"Kirya-Konzəl"},
	["fkv"] = {"Kven Finnish"},
	["fla"] = {"Kalispel-Pend d'Oreille"},
	["flh"] = {"Foau"},
	["fli"] = {"Fali"},
	["fll"] = {"North Fali"},
	["fln"] = {"Flinders Island"},
	["flr"] = {"Fuliiru"},
	["fly"] = {"Flaaitaal", "Tsotsitaal"},
	["fmp"] = {"Fe'fe'"},
	["fmu"] = {"Far Western Muria"},
	["fnb"] = {"Fanbak"},
	["fng"] = {"Fanagalo"},
	["fni"] = {"Fania"},
	["fod"] = {"Foodo"},
	["foi"] = {"Foi"},
	["fom"] = {"Foma"},
	["fon"] = {"Fon"},
	["for"] = {"Fore"},
	["fos"] = {"Siraya"},
	["fox"] = {"Formosan languages"},
	["fpe"] = {"Fernando Po Creole English"},
	["fqs"] = {"Fas"},
	["frc"] = {"Cajun French"},
	["frd"] = {"Fordata"},
	["frk"] = {"Frankish"},
	["frm"] = {"Middle French (ca. 1400-1600)"},
	["fro"] = {"Old French (842-ca. 1400)"},
	["frp"] = {"Arpitan", "Francoprovençal"},
	["frq"] = {"Forak"},
	["frr"] = {"Northern Frisian"},
	["frs"] = {"Eastern Frisian"},
	["frt"] = {"Fortsenal"},
	["fse"] = {"Finnish Sign Language"},
	["fsl"] = {"French Sign Language"},
	["fss"] = {"Finland-Swedish Sign Language", "finlandssvenskt teckenspråk", "suomenruotsalainen viittomakieli"},
	["fub"] = {"Adamawa Fulfulde"},
	["fuc"] = {"Pulaar"},
	["fud"] = {"East Futuna"},
	["fue"] = {"Borgu Fulfulde"},
	["fuf"] = {"Pular"},
	["fuh"] = {"Western Niger Fulfulde"},
	["fui"] = {"Bagirmi Fulfulde"},
	["fuj"] = {"Ko"},
	["fum"] = {"Fum"},
	["fun"] = {"Fulniô"},
	["fuq"] = {"Central-Eastern Niger Fulfulde"},
	["fur"] = {"Friulian"},
	["fut"] = {"Futuna-Aniwa"},
	["fuu"] = {"Furu"},
	["fuv"] = {"Nigerian Fulfulde"},
	["fuy"] = {"Fuyug"},
	["fvr"] = {"Fur"},
	["fwa"] = {"Fwâi"},
	["fwe"] = {"Fwe"},
	["gaa"] = {"Ga"},
	["gab"] = {"Gabri"},
	["gac"] = {"Mixed Great Andamanese"},
	["gad"] = {"Gaddang"},
	["gae"] = {"Guarequena"},
	["gaf"] = {"Gende"},
	["gag"] = {"Gagauz"},
	["gah"] = {"Alekano"},
	["gai"] = {"Borei"},
	["gaj"] = {"Gadsup"},
	["gak"] = {"Gamkonora"},
	["gal"] = {"Galolen"},
	["gam"] = {"Kandawo"},
	["gan"] = {"Gan Chinese"},
	["gao"] = {"Gants"},
	["gap"] = {"Gal"},
	["gaq"] = {"Gata'"},
	["gar"] = {"Galeya"},
	["gas"] = {"Adiwasi Garasia"},
	["gat"] = {"Kenati"},
	["gau"] = {"Mudhili Gadaba"},
	["gaw"] = {"Nobonob"},
	["gax"] = {"Borana-Arsi-Guji Oromo"},
	["gay"] = {"Gayo"},
	["gaz"] = {"West Central Oromo"},
	["gba"] = {"Gbaya (Central African Republic)"},
	["gbb"] = {"Kaytetye"},
	["gbd"] = {"Karajarri"},
	["gbe"] = {"Niksek"},
	["gbf"] = {"Gaikundi"},
	["gbg"] = {"Gbanziri"},
	["gbh"] = {"Defi Gbe"},
	["gbi"] = {"Galela"},
	["gbj"] = {"Bodo Gadaba"},
	["gbk"] = {"Gaddi"},
	["gbl"] = {"Gamit"},
	["gbm"] = {"Garhwali"},
	["gbn"] = {"Mo'da"},
	["gbo"] = {"Northern Grebo"},
	["gbp"] = {"Gbaya-Bossangoa"},
	["gbq"] = {"Gbaya-Bozoum"},
	["gbr"] = {"Gbagyi"},
	["gbs"] = {"Gbesi Gbe"},
	["gbu"] = {"Gagadu"},
	["gbv"] = {"Gbanu"},
	["gbw"] = {"Gabi-Gabi"},
	["gbx"] = {"Eastern Xwla Gbe"},
	["gby"] = {"Gbari"},
	["gbz"] = {"Zoroastrian Dari"},
	["gcc"] = {"Mali"},
	["gcd"] = {"Ganggalida"},
	["gce"] = {"Galice"},
	["gcf"] = {"Guadeloupean Creole French"},
	["gcl"] = {"Grenadian Creole English"},
	["gcn"] = {"Gaina"},
	["gcr"] = {"Guianese Creole French"},
	["gct"] = {"Colonia Tovar German"},
	["gda"] = {"Gade Lohar"},
	["gdb"] = {"Pottangi Ollar Gadaba"},
	["gdc"] = {"Gugu Badhun"},
	["gdd"] = {"Gedaged"},
	["gde"] = {"Gude"},
	["gdf"] = {"Guduf-Gava"},
	["gdg"] = {"Ga'dang"},
	["gdh"] = {"Gadjerawang"},
	["gdi"] = {"Gundi"},
	["gdj"] = {"Gurdjar"},
	["gdk"] = {"Gadang"},
	["gdl"] = {"Dirasha"},
	["gdm"] = {"Laal"},
	["gdn"] = {"Umanakaina"},
	["gdo"] = {"Ghodoberi"},
	["gdq"] = {"Mehri"},
	["gdr"] = {"Wipi"},
	["gds"] = {"Ghandruk Sign Language"},
	["gdt"] = {"Kungardutyi"},
	["gdu"] = {"Gudu"},
	["gdx"] = {"Godwari"},
	["gea"] = {"Geruma"},
	["geb"] = {"Kire"},
	["gec"] = {"Gboloo Grebo"},
	["ged"] = {"Gade"},
	["geg"] = {"Gengle"},
	["geh"] = {"Hutterite German", "Hutterisch"},
	["gei"] = {"Gebe"},
	["gej"] = {"Gen"},
	["gek"] = {"Ywom"},
	["gel"] = {"ut-Ma'in"},
	["gem"] = {"Germanic languages"},
	["geq"] = {"Geme"},
	["ges"] = {"Geser-Gorom"},
	["gev"] = {"Eviya"},
	["gew"] = {"Gera"},
	["gex"] = {"Garre"},
	["gey"] = {"Enya"},
	["gez"] = {"Geez"},
	["gfk"] = {"Patpatar"},
	["gft"] = {"Gafat"},
	["gga"] = {"Gao"},
	["ggb"] = {"Gbii"},
	["ggd"] = {"Gugadj"},
	["gge"] = {"Gurr-goni"},
	["ggg"] = {"Gurgula"},
	["ggk"] = {"Kungarakany"},
	["ggl"] = {"Ganglau"},
	["ggt"] = {"Gitua"},
	["ggu"] = {"Gagu", "Gban"},
	["ggw"] = {"Gogodala"},
	["gha"] = {"Ghadamès"},
	["ghc"] = {"Hiberno-Scottish Gaelic"},
	["ghe"] = {"Southern Ghale"},
	["ghh"] = {"Northern Ghale"},
	["ghk"] = {"Geko Karen"},
	["ghl"] = {"Ghulfan"},
	["ghn"] = {"Ghanongga"},
	["gho"] = {"Ghomara"},
	["ghr"] = {"Ghera"},
	["ghs"] = {"Guhu-Samane"},
	["ght"] = {"Kuke", "Kutang Ghale"},
	["gia"] = {"Kija"},
	["gib"] = {"Gibanawa"},
	["gic"] = {"Gail"},
	["gid"] = {"Gidar"},
	["gie"] = {"Gaɓogbo", "Guébie"},
	["gig"] = {"Goaria"},
	["gih"] = {"Githabul"},
	["gil"] = {"Gilbertese"},
	["gim"] = {"Gimi (Eastern Highlands)"},
	["gin"] = {"Hinukh"},
	["gip"] = {"Gimi (West New Britain)"},
	["giq"] = {"Green Gelao"},
	["gir"] = {"Red Gelao"},
	["gis"] = {"North Giziga"},
	["git"] = {"Gitxsan"},
	["giu"] = {"Mulao"},
	["giw"] = {"White Gelao"},
	["gix"] = {"Gilima"},
	["giy"] = {"Giyug"},
	["giz"] = {"South Giziga"},
	["gji"] = {"Geji"},
	["gjk"] = {"Kachi Koli"},
	["gjm"] = {"Gunditjmara"},
	["gjn"] = {"Gonja"},
	["gjr"] = {"Gurindji Kriol"},
	["gju"] = {"Gujari"},
	["gka"] = {"Guya"},
	["gkd"] = {"Magɨ (Madang Province)"},
	["gke"] = {"Ndai"},
	["gkn"] = {"Gokana"},
	["gko"] = {"Kok-Nar"},
	["gkp"] = {"Guinea Kpelle"},
	["gku"] = {"ǂUngkue"},
	["glc"] = {"Bon Gula"},
	["gld"] = {"Nanai"},
	["glh"] = {"Northwest Pashai", "Northwest Pashayi"},
	["gli"] = {"Guliguli"},
	["glj"] = {"Gula Iro"},
	["glk"] = {"Gilaki"},
	["gll"] = {"Garlali"},
	["glo"] = {"Galambu"},
	["glr"] = {"Glaro-Twabo"},
	["glu"] = {"Gula (Chad)"},
	["glw"] = {"Glavda"},
	["gly"] = {"Gule"},
	["gma"] = {"Gambera"},
	["gmb"] = {"Gula'alaa"},
	["gmd"] = {"Mághdì"},
	["gme"] = {"East Germanic languages"},
	["gmg"] = {"Magɨyi"},
	["gmh"] = {"Middle High German (ca. 1050-1500)"},
	["gml"] = {"Middle Low German"},
	["gmm"] = {"Gbaya-Mbodomo"},
	["gmn"] = {"Gimnime"},
	["gmq"] = {"North Germanic languages"},
	["gmu"] = {"Gumalu"},
	["gmv"] = {"Gamo"},
	["gmw"] = {"West Germanic languages"},
	["gmx"] = {"Magoma"},
	["gmy"] = {"Mycenaean Greek"},
	["gmz"] = {"Mgbolizhia"},
	["gna"] = {"Kaansa"},
	["gnb"] = {"Gangte"},
	["gnc"] = {"Guanche"},
	["gnd"] = {"Zulgo-Gemzek"},
	["gne"] = {"Ganang"},
	["gng"] = {"Ngangam"},
	["gnh"] = {"Lere"},
	["gni"] = {"Gooniyandi"},
	["gnj"] = {"Ngen"},
	["gnk"] = {"ǁGana"},
	["gnl"] = {"Gangulu"},
	["gnm"] = {"Ginuman"},
	["gnn"] = {"Gumatj"},
	["gno"] = {"Northern Gondi"},
	["gnq"] = {"Gana"},
	["gnr"] = {"Gureng Gureng"},
	["gnt"] = {"Guntai"},
	["gnu"] = {"Gnau"},
	["gnw"] = {"Western Bolivian Guaraní"},
	["gnz"] = {"Ganzi"},
	["goa"] = {"Guro"},
	["gob"] = {"Playero"},
	["goc"] = {"Gorakor"},
	["god"] = {"Godié"},
	["goe"] = {"Gongduk"},
	["gof"] = {"Gofa"},
	["gog"] = {"Gogo"},
	["goh"] = {"Old High German (ca. 750-1050)"},
	["goi"] = {"Gobasi"},
	["goj"] = {"Gowlan"},
	["gok"] = {"Gowli"},
	["gol"] = {"Gola"},
	["gom"] = {"Goan Konkani"},
	["gon"] = {"Gondi"},
	["goo"] = {"Gone Dau"},
	["gop"] = {"Yeretuar"},
	["goq"] = {"Gorap"},
	["gor"] = {"Gorontalo"},
	["gos"] = {"Gronings"},
	["got"] = {"Gothic"},
	["gou"] = {"Gavar"},
	["gow"] = {"Gorowa"},
	["gox"] = {"Gobu"},
	["goy"] = {"Goundo"},
	["goz"] = {"Gozarkhani"},
	["gpa"] = {"Gupa-Abawa"},
	["gpe"] = {"Ghanaian Pidgin English"},
	["gpn"] = {"Taiap"},
	["gqa"] = {"Ga'anda"},
	["gqi"] = {"Guiqiong"},
	["gqn"] = {"Guana (Brazil)"},
	["gqr"] = {"Gor"},
	["gqu"] = {"Qau"},
	["gra"] = {"Rajput Garasia"},
	["grb"] = {"Grebo"},
	["grc"] = {"Ancient Greek (to 1453)"},
	["grd"] = {"Guruntum-Mbaaru"},
	["grg"] = {"Madi"},
	["grh"] = {"Gbiri-Niragu"},
	["gri"] = {"Ghari"},
	["grj"] = {"Southern Grebo"},
	["grk"] = {"Greek languages"},
	["grm"] = {"Kota Marudu Talantang"},
	["gro"] = {"Groma"},
	["grq"] = {"Gorovu"},
	["grr"] = {"Taznatit"},
	["grs"] = {"Gresi"},
	["grt"] = {"Garo"},
	["gru"] = {"Kistane"},
	["grv"] = {"Central Grebo"},
	["grw"] = {"Gweda"},
	["grx"] = {"Guriaso"},
	["gry"] = {"Barclayville Grebo"},
	["grz"] = {"Guramalum"},
	["gse"] = {"Ghanaian Sign Language"},
	["gsg"] = {"German Sign Language"},
	["gsl"] = {"Gusilay"},
	["gsm"] = {"Guatemalan Sign Language"},
	["gsn"] = {"Nema", "Gusan"},
	["gso"] = {"Southwest Gbaya"},
	["gsp"] = {"Wasembo"},
	["gss"] = {"Greek Sign Language"},
	["gsw"] = {"Swiss German", "Alemannic", "Alsatian"},
	["gta"] = {"Guató"},
	["gtu"] = {"Aghu-Tharnggala"},
	["gua"] = {"Shiki"},
	["gub"] = {"Guajajára"},
	["guc"] = {"Wayuu"},
	["gud"] = {"Yocoboué Dida"},
	["gue"] = {"Gurindji"},
	["guf"] = {"Gupapuyngu"},
	["gug"] = {"Paraguayan Guaraní"},
	["guh"] = {"Guahibo"},
	["gui"] = {"Eastern Bolivian Guaraní"},
	["guk"] = {"Gumuz"},
	["gul"] = {"Sea Island Creole English"},
	["gum"] = {"Guambiano"},
	["gun"] = {"Mbyá Guaraní"},
	["guo"] = {"Guayabero"},
	["gup"] = {"Gunwinggu"},
	["guq"] = {"Aché"},
	["gur"] = {"Farefare"},
	["gus"] = {"Guinean Sign Language"},
	["gut"] = {"Maléku Jaíka"},
	["guu"] = {"Yanomamö"},
	["guw"] = {"Gun"},
	["gux"] = {"Gourmanchéma"},
	["guz"] = {"Gusii", "Ekegusii"},
	["gva"] = {"Guana (Paraguay)"},
	["gvc"] = {"Guanano"},
	["gve"] = {"Duwet"},
	["gvf"] = {"Golin"},
	["gvj"] = {"Guajá"},
	["gvl"] = {"Gulay"},
	["gvm"] = {"Gurmana"},
	["gvn"] = {"Kuku-Yalanji"},
	["gvo"] = {"Gavião Do Jiparaná"},
	["gvp"] = {"Pará Gavião"},
	["gvr"] = {"Gurung"},
	["gvs"] = {"Gumawana"},
	["gvy"] = {"Guyani"},
	["gwa"] = {"Mbato"},
	["gwb"] = {"Gwa"},
	["gwc"] = {"Kalami"},
	["gwd"] = {"Gawwada"},
	["gwe"] = {"Gweno"},
	["gwf"] = {"Gowro"},
	["gwg"] = {"Moo"},
	["gwi"] = {"Gwichʼin"},
	["gwj"] = {"ǀGwi"},
	["gwm"] = {"Awngthim"},
	["gwn"] = {"Gwandara"},
	["gwr"] = {"Gwere"},
	["gwt"] = {"Gawar-Bati"},
	["gwu"] = {"Guwamu"},
	["gww"] = {"Kwini"},
	["gwx"] = {"Gua"},
	["gxx"] = {"Wè Southern"},
	["gya"] = {"Northwest Gbaya"},
	["gyb"] = {"Garus"},
	["gyd"] = {"Kayardild"},
	["gye"] = {"Gyem"},
	["gyf"] = {"Gungabula"},
	["gyg"] = {"Gbayi"},
	["gyi"] = {"Gyele"},
	["gyl"] = {"Gayil"},
	["gym"] = {"Ngäbere"},
	["gyn"] = {"Guyanese Creole English"},
	["gyo"] = {"Gyalsumdo"},
	["gyr"] = {"Guarayu"},
	["gyy"] = {"Gunya"},
	["gza"] = {"Ganza"},
	["gzi"] = {"Gazi"},
	["gzn"] = {"Gane"},
	["haa"] = {"Han"},
	["hab"] = {"Hanoi Sign Language"},
	["hac"] = {"Gurani"},
	["had"] = {"Hatam"},
	["hae"] = {"Eastern Oromo"},
	["haf"] = {"Haiphong Sign Language"},
	["hag"] = {"Hanga"},
	["hah"] = {"Hahon"},
	["hai"] = {"Haida"},
	["haj"] = {"Hajong"},
	["hak"] = {"Hakka Chinese"},
	["hal"] = {"Halang"},
	["ham"] = {"Hewa"},
	["han"] = {"Hangaza"},
	["hao"] = {"Hakö"},
	["hap"] = {"Hupla"},
	["haq"] = {"Ha"},
	["har"] = {"Harari"},
	["has"] = {"Haisla"},
	["hav"] = {"Havu"},
	["haw"] = {"Hawaiian"},
	["hax"] = {"Southern Haida"},
	["hay"] = {"Haya"},
	["haz"] = {"Hazaragi"},
	["hba"] = {"Hamba"},
	["hbb"] = {"Huba"},
	["hbn"] = {"Heiban"},
	["hbo"] = {"Ancient Hebrew"},
	["hbu"] = {"Habu"},
	["hca"] = {"Andaman Creole Hindi"},
	["hch"] = {"Huichol"},
	["hdn"] = {"Northern Haida"},
	["hds"] = {"Honduras Sign Language"},
	["hdy"] = {"Hadiyya"},
	["hea"] = {"Northern Qiandong Miao"},
	["hed"] = {"Herdé"},
	["heg"] = {"Helong"},
	["heh"] = {"Hehe"},
	["hei"] = {"Heiltsuk"},
	["hem"] = {"Hemba"},
	["hgm"] = {"Haiǁom"},
	["hgw"] = {"Haigwai"},
	["hhi"] = {"Hoia Hoia"},
	["hhr"] = {"Kerak"},
	["hhy"] = {"Hoyahoya"},
	["hia"] = {"Lamang"},
	["hib"] = {"Hibito"},
	["hid"] = {"Hidatsa"},
	["hif"] = {"Fiji Hindi"},
	["hig"] = {"Kamwe"},
	["hih"] = {"Pamosu"},
	["hii"] = {"Hinduri"},
	["hij"] = {"Hijuk"},
	["hik"] = {"Seit-Kaitetu"},
	["hil"] = {"Hiligaynon"},
	["him"] = {"Himachali languages", "Western Pahari languages"},
	["hio"] = {"Tsoa"},
	["hir"] = {"Himarimã"},
	["hit"] = {"Hittite"},
	["hiw"] = {"Hiw"},
	["hix"] = {"Hixkaryána"},
	["hji"] = {"Haji"},
	["hka"] = {"Kahe"},
	["hke"] = {"Hunde"},
	["hkk"] = {"Hunjara-Kaina Ke"},
	["hkn"] = {"Mel-Khaonh"},
	["hks"] = {"Hong Kong Sign Language", "Heung Kong Sau Yue"},
	["hla"] = {"Halia"},
	["hlb"] = {"Halbi"},
	["hld"] = {"Halang Doan"},
	["hle"] = {"Hlersu"},
	["hlt"] = {"Matu Chin"},
	["hlu"] = {"Hieroglyphic Luwian"},
	["hma"] = {"Southern Mashan Hmong", "Southern Mashan Miao"},
	["hmb"] = {"Humburi Senni Songhay"},
	["hmc"] = {"Central Huishui Hmong", "Central Huishui Miao"},
	["hmd"] = {"Large Flowery Miao", "A-hmaos", "Da-Hua Miao"},
	["hme"] = {"Eastern Huishui Hmong", "Eastern Huishui Miao"},
	["hmf"] = {"Hmong Don"},
	["hmg"] = {"Southwestern Guiyang Hmong"},
	["hmh"] = {"Southwestern Huishui Hmong", "Southwestern Huishui Miao"},
	["hmi"] = {"Northern Huishui Hmong", "Northern Huishui Miao"},
	["hmj"] = {"Ge", "Gejia"},
	["hmk"] = {"Maek"},
	["hml"] = {"Luopohe Hmong", "Luopohe Miao"},
	["hmm"] = {"Central Mashan Hmong", "Central Mashan Miao"},
	["hmn"] = {"Hmong", "Mong"},
	["hmp"] = {"Northern Mashan Hmong", "Northern Mashan Miao"},
	["hmq"] = {"Eastern Qiandong Miao"},
	["hmr"] = {"Hmar"},
	["hms"] = {"Southern Qiandong Miao"},
	["hmt"] = {"Hamtai"},
	["hmu"] = {"Hamap"},
	["hmv"] = {"Hmong Dô"},
	["hmw"] = {"Western Mashan Hmong", "Western Mashan Miao"},
	["hmx"] = {"Hmong-Mien languages"},
	["hmy"] = {"Southern Guiyang Hmong", "Southern Guiyang Miao"},
	["hmz"] = {"Hmong Shua", "Sinicized Miao"},
	["hna"] = {"Mina (Cameroon)"},
	["hnd"] = {"Southern Hindko"},
	["hne"] = {"Chhattisgarhi"},
	["hnh"] = {"ǁAni"},
	["hni"] = {"Hani"},
	["hnj"] = {"Hmong Njua", "Mong Leng", "Mong Njua"},
	["hnn"] = {"Hanunoo"},
	["hno"] = {"Northern Hindko"},
	["hns"] = {"Caribbean Hindustani"},
	["hnu"] = {"Hung"},
	["hoa"] = {"Hoava"},
	["hob"] = {"Mari (Madang Province)"},
	["hoc"] = {"Ho"},
	["hod"] = {"Holma"},
	["hoe"] = {"Horom"},
	["hoh"] = {"Hobyót"},
	["hoi"] = {"Holikachuk"},
	["hoj"] = {"Hadothi", "Haroti"},
	["hok"] = {"Hokan languages"},
	["hol"] = {"Holu"},
	["hom"] = {"Homa"},
	["hoo"] = {"Holoholo"},
	["hop"] = {"Hopi"},
	["hor"] = {"Horo"},
	["hos"] = {"Ho Chi Minh City Sign Language"},
	["hot"] = {"Hote", "Malê"},
	["hov"] = {"Hovongan"},
	["how"] = {"Honi"},
	["hoy"] = {"Holiya"},
	["hoz"] = {"Hozo"},
	["hpo"] = {"Hpon"},
	["hps"] = {"Hawai'i Sign Language (HSL)", "Hawai'i Pidgin Sign Language"},
	["hra"] = {"Hrangkhol"},
	["hrc"] = {"Niwer Mil"},
	["hre"] = {"Hre"},
	["hrk"] = {"Haruku"},
	["hrm"] = {"Horned Miao"},
	["hro"] = {"Haroi"},
	["hrp"] = {"Nhirrpi"},
	["hrt"] = {"Hértevin"},
	["hru"] = {"Hruso"},
	["hrw"] = {"Warwar Feni"},
	["hrx"] = {"Hunsrik"},
	["hrz"] = {"Harzani"},
	["hsb"] = {"Upper Sorbian"},
	["hsh"] = {"Hungarian Sign Language"},
	["hsl"] = {"Hausa Sign Language"},
	["hsn"] = {"Xiang Chinese"},
	["hss"] = {"Harsusi"},
	["hti"] = {"Hoti"},
	["hto"] = {"Minica Huitoto"},
	["hts"] = {"Hadza"},
	["htu"] = {"Hitu"},
	["htx"] = {"Middle Hittite"},
	["hub"] = {"Huambisa"},
	["huc"] = {"ǂHua"},
	["hud"] = {"Huaulu"},
	["hue"] = {"San Francisco Del Mar Huave"},
	["huf"] = {"Humene"},
	["hug"] = {"Huachipaeri"},
	["huh"] = {"Huilliche"},
	["hui"] = {"Huli"},
	["huj"] = {"Northern Guiyang Hmong", "Northern Guiyang Miao"},
	["huk"] = {"Hulung"},
	["hul"] = {"Hula"},
	["hum"] = {"Hungana"},
	["huo"] = {"Hu"},
	["hup"] = {"Hupa"},
	["huq"] = {"Tsat"},
	["hur"] = {"Halkomelem"},
	["hus"] = {"Huastec"},
	["hut"] = {"Humla"},
	["huu"] = {"Murui Huitoto"},
	["huv"] = {"San Mateo Del Mar Huave"},
	["huw"] = {"Hukumina"},
	["hux"] = {"Nüpode Huitoto"},
	["huy"] = {"Hulaulá"},
	["huz"] = {"Hunzib"},
	["hvc"] = {"Haitian Vodoun Culture Language"},
	["hve"] = {"San Dionisio Del Mar Huave"},
	["hvk"] = {"Haveke"},
	["hvn"] = {"Sabu"},
	["hvv"] = {"Santa María Del Mar Huave"},
	["hwa"] = {"Wané"},
	["hwc"] = {"Hawai'i Creole English", "Hawai'i Pidgin"},
	["hwo"] = {"Hwana"},
	["hya"] = {"Hya"},
	["hyw"] = {"Western Armenian"},
	["hyx"] = {"Armenian (family)"},
	["iai"] = {"Iaai"},
	["ian"] = {"Iatmul"},
	["iar"] = {"Purari"},
	["iba"] = {"Iban"},
	["ibb"] = {"Ibibio"},
	["ibd"] = {"Iwaidja"},
	["ibe"] = {"Akpes"},
	["ibg"] = {"Ibanag"},
	["ibh"] = {"Bih"},
	["ibl"] = {"Ibaloi"},
	["ibm"] = {"Agoi"},
	["ibn"] = {"Ibino"},
	["ibr"] = {"Ibuoro"},
	["ibu"] = {"Ibu"},
	["iby"] = {"Ibani"},
	["ica"] = {"Ede Ica"},
	["ich"] = {"Etkywan"},
	["icl"] = {"Icelandic Sign Language"},
	["icr"] = {"Islander Creole English"},
	["ida"] = {"Idakho-Isukha-Tiriki", "Luidakho-Luisukha-Lutirichi"},
	["idb"] = {"Indo-Portuguese"},
	["idc"] = {"Idon", "Ajiya"},
	["idd"] = {"Ede Idaca"},
	["ide"] = {"Idere"},
	["idi"] = {"Idi"},
	["idr"] = {"Indri"},
	["ids"] = {"Idesa"},
	["idt"] = {"Idaté"},
	["idu"] = {"Idoma"},
	["ifa"] = {"Amganad Ifugao"},
	["ifb"] = {"Batad Ifugao", "Ayangan Ifugao"},
	["ife"] = {"Ifè"},
	["iff"] = {"Ifo"},
	["ifk"] = {"Tuwali Ifugao"},
	["ifm"] = {"Teke-Fuumu"},
	["ifu"] = {"Mayoyao Ifugao"},
	["ify"] = {"Keley-I Kallahan"},
	["igb"] = {"Ebira"},
	["ige"] = {"Igede"},
	["igg"] = {"Igana"},
	["igl"] = {"Igala"},
	["igm"] = {"Kanggape"},
	["ign"] = {"Ignaciano"},
	["igo"] = {"Isebe"},
	["igs"] = {"Interglossa"},
	["igw"] = {"Igwe"},
	["ihb"] = {"Iha Based Pidgin"},
	["ihi"] = {"Ihievbe"},
	["ihp"] = {"Iha"},
	["ihw"] = {"Bidhawal"},
	["iin"] = {"Thiin"},
	["iir"] = {"Indo-Iranian languages"},
	["ijc"] = {"Izon"},
	["ije"] = {"Biseni"},
	["ijj"] = {"Ede Ije"},
	["ijn"] = {"Kalabari"},
	["ijo"] = {"Ijo languages"},
	["ijs"] = {"Southeast Ijo"},
	["ike"] = {"Eastern Canadian Inuktitut"},
	["iki"] = {"Iko"},
	["ikk"] = {"Ika"},
	["ikl"] = {"Ikulu"},
	["iko"] = {"Olulumo-Ikom"},
	["ikp"] = {"Ikpeshi"},
	["ikr"] = {"Ikaranggal"},
	["iks"] = {"Inuit Sign Language"},
	["ikt"] = {"Inuinnaqtun", "Western Canadian Inuktitut"},
	["ikv"] = {"Iku-Gora-Ankwa"},
	["ikw"] = {"Ikwere"},
	["ikx"] = {"Ik"},
	["ikz"] = {"Ikizu"},
	["ila"] = {"Ile Ape"},
	["ilb"] = {"Ila"},
	["ilg"] = {"Garig-Ilgar"},
	["ili"] = {"Ili Turki"},
	["ilk"] = {"Ilongot"},
	["ilm"] = {"Iranun (Malaysia)"},
	["ilo"] = {"Iloko"},
	["ilp"] = {"Iranun (Philippines)"},
	["ils"] = {"International Sign"},
	["ilu"] = {"Ili'uun"},
	["ilv"] = {"Ilue"},
	["ima"] = {"Mala Malasar"},
	["imi"] = {"Anamgura"},
	["iml"] = {"Miluk"},
	["imn"] = {"Imonda"},
	["imo"] = {"Imbongu"},
	["imr"] = {"Imroing"},
	["ims"] = {"Marsian"},
	["imy"] = {"Milyan"},
	["inb"] = {"Inga"},
	["inc"] = {"Indic languages"},
	["ine"] = {"Indo-European languages"},
	["ing"] = {"Degexit'an"},
	["inh"] = {"Ingush"},
	["inj"] = {"Jungle Inga"},
	["inl"] = {"Indonesian Sign Language"},
	["inm"] = {"Minaean"},
	["inn"] = {"Isinai"},
	["ino"] = {"Inoke-Yate"},
	["inp"] = {"Iñapari"},
	["ins"] = {"Indian Sign Language"},
	["int"] = {"Intha"},
	["inz"] = {"Ineseño"},
	["ior"] = {"Inor"},
	["iou"] = {"Tuma-Irumu"},
	["iow"] = {"Iowa-Oto"},
	["ipi"] = {"Ipili"},
	["ipo"] = {"Ipiko"},
	["iqu"] = {"Iquito"},
	["iqw"] = {"Ikwo"},
	["ira"] = {"Iranian languages"},
	["ire"] = {"Iresim"},
	["irh"] = {"Irarutu"},
	["iri"] = {"Rigwe", "Irigwe"},
	["irk"] = {"Iraqw"},
	["irn"] = {"Irántxe"},
	["iro"] = {"Iroquoian languages"},
	["irr"] = {"Ir"},
	["iru"] = {"Irula"},
	["irx"] = {"Kamberau"},
	["iry"] = {"Iraya"},
	["isa"] = {"Isabi"},
	["isc"] = {"Isconahua"},
	["isd"] = {"Isnag"},
	["ise"] = {"Italian Sign Language"},
	["isg"] = {"Irish Sign Language"},
	["ish"] = {"Esan"},
	["isi"] = {"Nkem-Nkum"},
	["isk"] = {"Ishkashimi"},
	["ism"] = {"Masimasi"},
	["isn"] = {"Isanzu"},
	["iso"] = {"Isoko"},
	["isr"] = {"Israeli Sign Language"},
	["ist"] = {"Istriot"},
	["isu"] = {"Isu (Menchum Division)"},
	["itb"] = {"Binongan Itneg"},
	["itc"] = {"Italic languages"},
	["itd"] = {"Southern Tidung"},
	["ite"] = {"Itene"},
	["iti"] = {"Inlaod Itneg"},
	["itk"] = {"Judeo-Italian"},
	["itl"] = {"Itelmen"},
	["itm"] = {"Itu Mbon Uzo"},
	["ito"] = {"Itonama"},
	["itr"] = {"Iteri"},
	["its"] = {"Isekiri"},
	["itt"] = {"Maeng Itneg"},
	["itv"] = {"Itawit"},
	["itw"] = {"Ito"},
	["itx"] = {"Itik"},
	["ity"] = {"Moyadan Itneg"},
	["itz"] = {"Itzá"},
	["ium"] = {"Iu Mien"},
	["ivb"] = {"Ibatan"},
	["ivv"] = {"Ivatan"},
	["iwk"] = {"I-Wak"},
	["iwm"] = {"Iwam"},
	["iwo"] = {"Iwur"},
	["iws"] = {"Sepik Iwam"},
	["ixc"] = {"Ixcatec"},
	["ixl"] = {"Ixil"},
	["iya"] = {"Iyayu"},
	["iyo"] = {"Mesaka"},
	["iyx"] = {"Yaka (Congo)"},
	["izh"] = {"Ingrian"},
	["izr"] = {"Izere"},
	["izz"] = {"Izii"},
	["jaa"] = {"Jamamadí"},
	["jab"] = {"Hyam"},
	["jac"] = {"Popti'", "Jakalteko"},
	["jad"] = {"Jahanka"},
	["jae"] = {"Yabem"},
	["jaf"] = {"Jara"},
	["jah"] = {"Jah Hut"},
	["jaj"] = {"Zazao"},
	["jak"] = {"Jakun"},
	["jal"] = {"Yalahatan"},
	["jam"] = {"Jamaican Creole English"},
	["jan"] = {"Jandai"},
	["jao"] = {"Yanyuwa"},
	["jaq"] = {"Yaqay"},
	["jas"] = {"New Caledonian Javanese"},
	["jat"] = {"Jakati"},
	["jau"] = {"Yaur"},
	["jax"] = {"Jambi Malay"},
	["jay"] = {"Yan-nhangu", "Nhangu"},
	["jaz"] = {"Jawe"},
	["jbe"] = {"Judeo-Berber"},
	["jbi"] = {"Badjiri"},
	["jbj"] = {"Arandai"},
	["jbk"] = {"Barikewa"},
	["jbn"] = {"Nafusi"},
	["jbo"] = {"Lojban"},
	["jbr"] = {"Jofotek-Bromnya"},
	["jbt"] = {"Jabutí"},
	["jbu"] = {"Jukun Takum"},
	["jbw"] = {"Yawijibaya"},
	["jcs"] = {"Jamaican Country Sign Language"},
	["jct"] = {"Krymchak"},
	["jda"] = {"Jad"},
	["jdg"] = {"Jadgali"},
	["jdt"] = {"Judeo-Tat"},
	["jeb"] = {"Jebero"},
	["jee"] = {"Jerung"},
	["jeh"] = {"Jeh"},
	["jei"] = {"Yei"},
	["jek"] = {"Jeri Kuo"},
	["jel"] = {"Yelmek"},
	["jen"] = {"Dza"},
	["jer"] = {"Jere"},
	["jet"] = {"Manem"},
	["jeu"] = {"Jonkor Bourmataguil"},
	["jgb"] = {"Ngbee"},
	["jge"] = {"Judeo-Georgian"},
	["jgk"] = {"Gwak"},
	["jgo"] = {"Ngomba"},
	["jhi"] = {"Jehai"},
	["jhs"] = {"Jhankot Sign Language"},
	["jia"] = {"Jina"},
	["jib"] = {"Jibu"},
	["jic"] = {"Tol"},
	["jid"] = {"Bu"},
	["jie"] = {"Jilbe"},
	["jig"] = {"Jingulu", "Djingili"},
	["jih"] = {"sTodsde", "Shangzhai"},
	["jii"] = {"Jiiddu"},
	["jil"] = {"Jilim"},
	["jim"] = {"Jimi (Cameroon)"},
	["jio"] = {"Jiamao"},
	["jiq"] = {"Guanyinqiao", "Lavrung"},
	["jit"] = {"Jita"},
	["jiu"] = {"Youle Jinuo"},
	["jiv"] = {"Shuar"},
	["jiy"] = {"Buyuan Jinuo"},
	["jje"] = {"Jejueo"},
	["jjr"] = {"Bankal"},
	["jka"] = {"Kaera"},
	["jkm"] = {"Mobwa Karen"},
	["jko"] = {"Kubo"},
	["jkp"] = {"Paku Karen"},
	["jkr"] = {"Koro (India)"},
	["jku"] = {"Labir"},
	["jle"] = {"Ngile"},
	["jls"] = {"Jamaican Sign Language"},
	["jma"] = {"Dima"},
	["jmb"] = {"Zumbun"},
	["jmc"] = {"Machame"},
	["jmd"] = {"Yamdena"},
	["jmi"] = {"Jimi (Nigeria)"},
	["jml"] = {"Jumli"},
	["jmn"] = {"Makuri Naga"},
	["jmr"] = {"Kamara"},
	["jms"] = {"Mashi (Nigeria)"},
	["jmw"] = {"Mouwase"},
	["jmx"] = {"Western Juxtlahuaca Mixtec"},
	["jna"] = {"Jangshung"},
	["jnd"] = {"Jandavra"},
	["jng"] = {"Yangman"},
	["jni"] = {"Janji"},
	["jnj"] = {"Yemsa"},
	["jnl"] = {"Rawat"},
	["jns"] = {"Jaunsari"},
	["job"] = {"Joba"},
	["jod"] = {"Wojenaka"},
	["jog"] = {"Jogi"},
	["jor"] = {"Jorá"},
	["jos"] = {"Jordanian Sign Language"},
	["jow"] = {"Jowulu"},
	["jpa"] = {"Jewish Palestinian Aramaic"},
	["jpr"] = {"Judeo-Persian"},
	["jpx"] = {"Japanese (family)"},
	["jqr"] = {"Jaqaru"},
	["jra"] = {"Jarai"},
	["jrb"] = {"Judeo-Arabic"},
	["jrr"] = {"Jiru"},
	["jrt"] = {"Jorto"},
	["jru"] = {"Japrería"},
	["jsl"] = {"Japanese Sign Language"},
	["jua"] = {"Júma"},
	["jub"] = {"Wannu"},
	["juc"] = {"Jurchen"},
	["jud"] = {"Worodougou"},
	["juh"] = {"Hõne"},
	["jui"] = {"Ngadjuri"},
	["juk"] = {"Wapan"},
	["jul"] = {"Jirel"},
	["jum"] = {"Jumjum"},
	["jun"] = {"Juang"},
	["juo"] = {"Jiba"},
	["jup"] = {"Hupdë"},
	["jur"] = {"Jurúna"},
	["jus"] = {"Jumla Sign Language"},
	["jut"] = {"Jutish"},
	["juu"] = {"Ju"},
	["juw"] = {"Wãpha"},
	["juy"] = {"Juray"},
	["jvd"] = {"Javindo"},
	["jvn"] = {"Caribbean Javanese"},
	["jwi"] = {"Jwira-Pepesa"},
	["jya"] = {"Jiarong"},
	["jye"] = {"Judeo-Yemeni Arabic"},
	["jyy"] = {"Jaya"},
	["kaa"] = {"Kara-Kalpak"},
	["kab"] = {"Kabyle"},
	["kac"] = {"Kachin", "Jingpho"},
	["kad"] = {"Adara"},
	["kae"] = {"Ketangalan"},
	["kaf"] = {"Katso"},
	["kag"] = {"Kajaman"},
	["kah"] = {"Kara (Central African Republic)"},
	["kai"] = {"Karekare"},
	["kaj"] = {"Jju"},
	["kak"] = {"Kalanguya", "Kayapa Kallahan"},
	["kam"] = {"Kamba (Kenya)"},
	["kao"] = {"Xaasongaxango"},
	["kap"] = {"Bezhta"},
	["kaq"] = {"Capanahua"},
	["kar"] = {"Karen languages"},
	["kav"] = {"Katukína"},
	["kaw"] = {"Kawi"},
	["kax"] = {"Kao"},
	["kay"] = {"Kamayurá"},
	["kba"] = {"Kalarko"},
	["kbb"] = {"Kaxuiâna"},
	["kbc"] = {"Kadiwéu"},
	["kbd"] = {"Kabardian"},
	["kbe"] = {"Kanju"},
	["kbg"] = {"Khamba"},
	["kbh"] = {"Camsá"},
	["kbi"] = {"Kaptiau"},
	["kbj"] = {"Kari"},
	["kbk"] = {"Grass Koiari"},
	["kbl"] = {"Kanembu"},
	["kbm"] = {"Iwal"},
	["kbn"] = {"Kare (Central African Republic)"},
	["kbo"] = {"Keliko"},
	["kbp"] = {"Kabiyè"},
	["kbq"] = {"Kamano"},
	["kbr"] = {"Kafa"},
	["kbs"] = {"Kande"},
	["kbt"] = {"Abadi"},
	["kbu"] = {"Kabutra"},
	["kbv"] = {"Dera (Indonesia)"},
	["kbw"] = {"Kaiep"},
	["kbx"] = {"Ap Ma"},
	["kby"] = {"Manga Kanuri"},
	["kbz"] = {"Duhwa"},
	["kca"] = {"Khanty"},
	["kcb"] = {"Kawacha"},
	["kcc"] = {"Lubila"},
	["kcd"] = {"Ngkâlmpw Kanum"},
	["kce"] = {"Kaivi"},
	["kcf"] = {"Ukaan"},
	["kcg"] = {"Tyap"},
	["kch"] = {"Vono"},
	["kci"] = {"Kamantan"},
	["kcj"] = {"Kobiana"},
	["kck"] = {"Kalanga"},
	["kcl"] = {"Kela (Papua New Guinea)", "Kala"},
	["kcm"] = {"Gula (Central African Republic)"},
	["kcn"] = {"Nubi"},
	["kco"] = {"Kinalakna"},
	["kcp"] = {"Kanga"},
	["kcq"] = {"Kamo"},
	["kcr"] = {"Katla"},
	["kcs"] = {"Koenoem"},
	["kct"] = {"Kaian"},
	["kcu"] = {"Kami (Tanzania)"},
	["kcv"] = {"Kete"},
	["kcw"] = {"Kabwari"},
	["kcx"] = {"Kachama-Ganjule"},
	["kcy"] = {"Korandje"},
	["kcz"] = {"Konongo"},
	["kda"] = {"Worimi"},
	["kdc"] = {"Kutu"},
	["kdd"] = {"Yankunytjatjara"},
	["kde"] = {"Makonde"},
	["kdf"] = {"Mamusi"},
	["kdg"] = {"Seba"},
	["kdh"] = {"Tem"},
	["kdi"] = {"Kumam"},
	["kdj"] = {"Karamojong"},
	["kdk"] = {"Numèè", "Kwényi"},
	["kdl"] = {"Tsikimba"},
	["kdm"] = {"Kagoma"},
	["kdn"] = {"Kunda"},
	["kdo"] = {"Kordofanian languages"},
	["kdp"] = {"Kaningdon-Nindem"},
	["kdq"] = {"Koch"},
	["kdr"] = {"Karaim"},
	["kdt"] = {"Kuy"},
	["kdu"] = {"Kadaru"},
	["kdw"] = {"Koneraw"},
	["kdx"] = {"Kam"},
	["kdy"] = {"Keder", "Keijar"},
	["kdz"] = {"Kwaja"},
	["kea"] = {"Kabuverdianu"},
	["keb"] = {"Kélé"},
	["kec"] = {"Keiga"},
	["ked"] = {"Kerewe"},
	["kee"] = {"Eastern Keres"},
	["kef"] = {"Kpessi"},
	["keg"] = {"Tese"},
	["keh"] = {"Keak"},
	["kei"] = {"Kei"},
	["kej"] = {"Kadar"},
	["kek"] = {"Kekchí"},
	["kel"] = {"Kela (Democratic Republic of Congo)"},
	["kem"] = {"Kemak"},
	["ken"] = {"Kenyang"},
	["keo"] = {"Kakwa"},
	["kep"] = {"Kaikadi"},
	["keq"] = {"Kamar"},
	["ker"] = {"Kera"},
	["kes"] = {"Kugbo"},
	["ket"] = {"Ket"},
	["keu"] = {"Akebu"},
	["kev"] = {"Kanikkaran"},
	["kew"] = {"West Kewa"},
	["kex"] = {"Kukna"},
	["key"] = {"Kupia"},
	["kez"] = {"Kukele"},
	["kfa"] = {"Kodava"},
	["kfb"] = {"Northwestern Kolami"},
	["kfc"] = {"Konda-Dora"},
	["kfd"] = {"Korra Koraga"},
	["kfe"] = {"Kota (India)"},
	["kff"] = {"Koya"},
	["kfg"] = {"Kudiya"},
	["kfh"] = {"Kurichiya"},
	["kfi"] = {"Kannada Kurumba"},
	["kfj"] = {"Kemiehua"},
	["kfk"] = {"Kinnauri"},
	["kfl"] = {"Kung"},
	["kfm"] = {"Khunsari"},
	["kfn"] = {"Kuk"},
	["kfo"] = {"Koro (Côte d'Ivoire)"},
	["kfp"] = {"Korwa"},
	["kfq"] = {"Korku"},
	["kfr"] = {"Kachhi", "Kutchi"},
	["kfs"] = {"Bilaspuri"},
	["kft"] = {"Kanjari"},
	["kfu"] = {"Katkari"},
	["kfv"] = {"Kurmukar"},
	["kfw"] = {"Kharam Naga"},
	["kfx"] = {"Kullu Pahari"},
	["kfy"] = {"Kumaoni"},
	["kfz"] = {"Koromfé"},
	["kga"] = {"Koyaga"},
	["kgb"] = {"Kawe"},
	["kge"] = {"Komering"},
	["kgf"] = {"Kube"},
	["kgg"] = {"Kusunda"},
	["kgi"] = {"Selangor Sign Language"},
	["kgj"] = {"Gamale Kham"},
	["kgk"] = {"Kaiwá"},
	["kgl"] = {"Kunggari"},
	["kgm"] = {"Karipúna"},
	["kgn"] = {"Karingani"},
	["kgo"] = {"Krongo"},
	["kgp"] = {"Kaingang"},
	["kgq"] = {"Kamoro"},
	["kgr"] = {"Abun"},
	["kgs"] = {"Kumbainggar"},
	["kgt"] = {"Somyev"},
	["kgu"] = {"Kobol"},
	["kgv"] = {"Karas"},
	["kgw"] = {"Karon Dori"},
	["kgx"] = {"Kamaru"},
	["kgy"] = {"Kyerung"},
	["kha"] = {"Khasi"},
	["khb"] = {"Lü"},
	["khc"] = {"Tukang Besi North"},
	["khd"] = {"Bädi Kanum"},
	["khe"] = {"Korowai"},
	["khf"] = {"Khuen"},
	["khg"] = {"Khams Tibetan"},
	["khh"] = {"Kehu"},
	["khi"] = {"Khoisan languages"},
	["khj"] = {"Kuturmi"},
	["khk"] = {"Halh Mongolian"},
	["khl"] = {"Lusi"},
	["khn"] = {"Khandesi"},
	["kho"] = {"Khotanese", "Sakan"},
	["khp"] = {"Kapori", "Kapauri"},
	["khq"] = {"Koyra Chiini Songhay"},
	["khr"] = {"Kharia"},
	["khs"] = {"Kasua"},
	["kht"] = {"Khamti"},
	["khu"] = {"Nkhumbi"},
	["khv"] = {"Khvarshi"},
	["khw"] = {"Khowar"},
	["khx"] = {"Kanu"},
	["khy"] = {"Kele (Democratic Republic of Congo)"},
	["khz"] = {"Keapara"},
	["kia"] = {"Kim"},
	["kib"] = {"Koalib"},
	["kic"] = {"Kickapoo"},
	["kid"] = {"Koshin"},
	["kie"] = {"Kibet"},
	["kif"] = {"Eastern Parbate Kham"},
	["kig"] = {"Kimaama", "Kimaghima"},
	["kih"] = {"Kilmeri"},
	["kii"] = {"Kitsai"},
	["kij"] = {"Kilivila"},
	["kil"] = {"Kariya"},
	["kim"] = {"Karagas"},
	["kio"] = {"Kiowa"},
	["kip"] = {"Sheshi Kham"},
	["kiq"] = {"Kosadle", "Kosare"},
	["kis"] = {"Kis"},
	["kit"] = {"Agob"},
	["kiu"] = {"Kirmanjki (individual language)"},
	["kiv"] = {"Kimbu"},
	["kiw"] = {"Northeast Kiwai"},
	["kix"] = {"Khiamniungan Naga"},
	["kiy"] = {"Kirikiri"},
	["kiz"] = {"Kisi"},
	["kja"] = {"Mlap"},
	["kjb"] = {"Q'anjob'al", "Kanjobal"},
	["kjc"] = {"Coastal Konjo"},
	["kjd"] = {"Southern Kiwai"},
	["kje"] = {"Kisar"},
	["kjf"] = {"Khalaj"},
	["kjg"] = {"Khmu"},
	["kjh"] = {"Khakas"},
	["kji"] = {"Zabana"},
	["kjj"] = {"Khinalugh"},
	["kjk"] = {"Highland Konjo"},
	["kjl"] = {"Western Parbate Kham"},
	["kjm"] = {"Kháng"},
	["kjn"] = {"Kunjen"},
	["kjo"] = {"Harijan Kinnauri"},
	["kjp"] = {"Pwo Eastern Karen"},
	["kjq"] = {"Western Keres"},
	["kjr"] = {"Kurudu"},
	["kjs"] = {"East Kewa"},
	["kjt"] = {"Phrae Pwo Karen"},
	["kju"] = {"Kashaya"},
	["kjv"] = {"Kaikavian Literary Language"},
	["kjx"] = {"Ramopa"},
	["kjy"] = {"Erave"},
	["kjz"] = {"Bumthangkha"},
	["kka"] = {"Kakanda"},
	["kkb"] = {"Kwerisa"},
	["kkc"] = {"Odoodee"},
	["kkd"] = {"Kinuku"},
	["kke"] = {"Kakabe"},
	["kkf"] = {"Kalaktang Monpa"},
	["kkg"] = {"Mabaka Valley Kalinga"},
	["kkh"] = {"Khün"},
	["kki"] = {"Kagulu"},
	["kkj"] = {"Kako"},
	["kkk"] = {"Kokota"},
	["kkl"] = {"Kosarek Yale"},
	["kkm"] = {"Kiong"},
	["kkn"] = {"Kon Keu"},
	["kko"] = {"Karko"},
	["kkp"] = {"Gugubera", "Koko-Bera"},
	["kkq"] = {"Kaiku"},
	["kkr"] = {"Kir-Balar"},
	["kks"] = {"Giiwo"},
	["kkt"] = {"Koi"},
	["kku"] = {"Tumi"},
	["kkv"] = {"Kangean"},
	["kkw"] = {"Teke-Kukuya"},
	["kkx"] = {"Kohin"},
	["kky"] = {"Guugu Yimidhirr", "Guguyimidjir"},
	["kkz"] = {"Kaska"},
	["kla"] = {"Klamath-Modoc"},
	["klb"] = {"Kiliwa"},
	["klc"] = {"Kolbila"},
	["kld"] = {"Gamilaraay"},
	["kle"] = {"Kulung (Nepal)"},
	["klf"] = {"Kendeje"},
	["klg"] = {"Tagakaulo"},
	["klh"] = {"Weliki"},
	["kli"] = {"Kalumpang"},
	["klj"] = {"Turkic Khalaj"},
	["klk"] = {"Kono (Nigeria)"},
	["kll"] = {"Kagan Kalagan"},
	["klm"] = {"Migum"},
	["kln"] = {"Kalenjin"},
	["klo"] = {"Kapya"},
	["klp"] = {"Kamasa"},
	["klq"] = {"Rumu"},
	["klr"] = {"Khaling"},
	["kls"] = {"Kalasha"},
	["klt"] = {"Nukna"},
	["klu"] = {"Klao"},
	["klv"] = {"Maskelynes"},
	["klw"] = {"Tado", "Lindu"},
	["klx"] = {"Koluwawa"},
	["kly"] = {"Kalao"},
	["klz"] = {"Kabola"},
	["kma"] = {"Konni"},
	["kmb"] = {"Kimbundu"},
	["kmc"] = {"Southern Dong"},
	["kmd"] = {"Majukayang Kalinga"},
	["kme"] = {"Bakole"},
	["kmf"] = {"Kare (Papua New Guinea)"},
	["kmg"] = {"Kâte"},
	["kmh"] = {"Kalam"},
	["kmi"] = {"Kami (Nigeria)"},
	["kmj"] = {"Kumarbhag Paharia"},
	["kmk"] = {"Limos Kalinga"},
	["kml"] = {"Tanudan Kalinga"},
	["kmm"] = {"Kom (India)"},
	["kmn"] = {"Awtuw"},
	["kmo"] = {"Kwoma"},
	["kmp"] = {"Gimme"},
	["kmq"] = {"Kwama"},
	["kmr"] = {"Northern Kurdish"},
	["kms"] = {"Kamasau"},
	["kmt"] = {"Kemtuik"},
	["kmu"] = {"Kanite"},
	["kmv"] = {"Karipúna Creole French"},
	["kmw"] = {"Komo (Democratic Republic of Congo)"},
	["kmx"] = {"Waboda"},
	["kmy"] = {"Koma"},
	["kmz"] = {"Khorasani Turkish"},
	["kna"] = {"Dera (Nigeria)"},
	["knb"] = {"Lubuagan Kalinga"},
	["knc"] = {"Central Kanuri"},
	["knd"] = {"Konda"},
	["kne"] = {"Kankanaey"},
	["knf"] = {"Mankanya"},
	["kng"] = {"Koongo"},
	["kni"] = {"Kanufi"},
	["knj"] = {"Western Kanjobal"},
	["knk"] = {"Kuranko"},
	["knl"] = {"Keninjal"},
	["knm"] = {"Kanamarí"},
	["knn"] = {"Konkani (individual language)"},
	["kno"] = {"Kono (Sierra Leone)"},
	["knp"] = {"Kwanja"},
	["knq"] = {"Kintaq"},
	["knr"] = {"Kaningra"},
	["kns"] = {"Kensiu"},
	["knt"] = {"Panoan Katukína"},
	["knu"] = {"Kono (Guinea)"},
	["knv"] = {"Tabo"},
	["knw"] = {"Kung-Ekoka"},
	["knx"] = {"Kendayan", "Salako"},
	["kny"] = {"Kanyok"},
	["knz"] = {"Kalamsé"},
	["koa"] = {"Konomala"},
	["koc"] = {"Kpati"},
	["kod"] = {"Kodi"},
	["koe"] = {"Kacipo-Balesi"},
	["kof"] = {"Kubi"},
	["kog"] = {"Cogui", "Kogi"},
	["koh"] = {"Koyo"},
	["koi"] = {"Komi-Permyak"},
	["kok"] = {"Konkani (macrolanguage)"},
	["kol"] = {"Kol (Papua New Guinea)"},
	["koo"] = {"Konzo"},
	["kop"] = {"Waube"},
	["koq"] = {"Kota (Gabon)"},
	["kos"] = {"Kosraean"},
	["kot"] = {"Lagwan"},
	["kou"] = {"Koke"},
	["kov"] = {"Kudu-Camo"},
	["kow"] = {"Kugama"},
	["koy"] = {"Koyukon"},
	["koz"] = {"Korak"},
	["kpa"] = {"Kutto"},
	["kpb"] = {"Mullu Kurumba"},
	["kpc"] = {"Curripaco"},
	["kpd"] = {"Koba"},
	["kpe"] = {"Kpelle"},
	["kpf"] = {"Komba"},
	["kpg"] = {"Kapingamarangi"},
	["kph"] = {"Kplang"},
	["kpi"] = {"Kofei"},
	["kpj"] = {"Karajá"},
	["kpk"] = {"Kpan"},
	["kpl"] = {"Kpala"},
	["kpm"] = {"Koho"},
	["kpn"] = {"Kepkiriwát"},
	["kpo"] = {"Ikposo"},
	["kpq"] = {"Korupun-Sela"},
	["kpr"] = {"Korafe-Yegha"},
	["kps"] = {"Tehit"},
	["kpt"] = {"Karata"},
	["kpu"] = {"Kafoa"},
	["kpv"] = {"Komi-Zyrian"},
	["kpw"] = {"Kobon"},
	["kpx"] = {"Mountain Koiali"},
	["kpy"] = {"Koryak"},
	["kpz"] = {"Kupsabiny"},
	["kqa"] = {"Mum"},
	["kqb"] = {"Kovai"},
	["kqc"] = {"Doromu-Koki"},
	["kqd"] = {"Koy Sanjaq Surat"},
	["kqe"] = {"Kalagan"},
	["kqf"] = {"Kakabai"},
	["kqg"] = {"Khe"},
	["kqh"] = {"Kisankasa"},
	["kqi"] = {"Koitabu"},
	["kqj"] = {"Koromira"},
	["kqk"] = {"Kotafon Gbe"},
	["kql"] = {"Kyenele"},
	["kqm"] = {"Khisa"},
	["kqn"] = {"Kaonde"},
	["kqo"] = {"Eastern Krahn"},
	["kqp"] = {"Kimré"},
	["kqq"] = {"Krenak"},
	["kqr"] = {"Kimaragang"},
	["kqs"] = {"Northern Kissi"},
	["kqt"] = {"Klias River Kadazan"},
	["kqu"] = {"Seroa"},
	["kqv"] = {"Okolod"},
	["kqw"] = {"Kandas"},
	["kqx"] = {"Mser"},
	["kqy"] = {"Koorete"},
	["kqz"] = {"Korana"},
	["kra"] = {"Kumhali"},
	["krb"] = {"Karkin"},
	["krc"] = {"Karachay-Balkar"},
	["krd"] = {"Kairui-Midiki"},
	["kre"] = {"Panará"},
	["krf"] = {"Koro (Vanuatu)"},
	["krh"] = {"Kurama"},
	["kri"] = {"Krio"},
	["krj"] = {"Kinaray-A"},
	["krk"] = {"Kerek"},
	["krl"] = {"Karelian"},
	["krn"] = {"Sapo"},
	["kro"] = {"Kru languages"},
	["krp"] = {"Korop"},
	["krr"] = {"Krung"},
	["krs"] = {"Gbaya (Sudan)"},
	["krt"] = {"Tumari Kanuri"},
	["kru"] = {"Kurukh"},
	["krv"] = {"Kavet"},
	["krw"] = {"Western Krahn"},
	["krx"] = {"Karon"},
	["kry"] = {"Kryts"},
	["krz"] = {"Sota Kanum"},
	["ksa"] = {"Shuwa-Zamani"},
	["ksb"] = {"Shambala"},
	["ksc"] = {"Southern Kalinga"},
	["ksd"] = {"Kuanua"},
	["kse"] = {"Kuni"},
	["ksf"] = {"Bafia"},
	["ksg"] = {"Kusaghe"},
	["ksh"] = {"Kölsch"},
	["ksi"] = {"Krisa", "I'saka"},
	["ksj"] = {"Uare"},
	["ksk"] = {"Kansa"},
	["ksl"] = {"Kumalu"},
	["ksm"] = {"Kumba"},
	["ksn"] = {"Kasiguranin"},
	["kso"] = {"Kofa"},
	["ksp"] = {"Kaba"},
	["ksq"] = {"Kwaami"},
	["ksr"] = {"Borong"},
	["kss"] = {"Southern Kisi"},
	["kst"] = {"Winyé"},
	["ksu"] = {"Khamyang"},
	["ksv"] = {"Kusu"},
	["ksw"] = {"S'gaw Karen"},
	["ksx"] = {"Kedang"},
	["ksy"] = {"Kharia Thar"},
	["ksz"] = {"Kodaku"},
	["kta"] = {"Katua"},
	["ktb"] = {"Kambaata"},
	["ktc"] = {"Kholok"},
	["ktd"] = {"Kokata", "Kukatha"},
	["kte"] = {"Nubri"},
	["ktf"] = {"Kwami"},
	["ktg"] = {"Kalkutung"},
	["kth"] = {"Karanga"},
	["kti"] = {"North Muyu"},
	["ktj"] = {"Plapo Krumen"},
	["ktk"] = {"Kaniet"},
	["ktl"] = {"Koroshi"},
	["ktm"] = {"Kurti"},
	["ktn"] = {"Karitiâna"},
	["kto"] = {"Kuot"},
	["ktp"] = {"Kaduo"},
	["ktq"] = {"Katabaga"},
	["kts"] = {"South Muyu"},
	["ktt"] = {"Ketum"},
	["ktu"] = {"Kituba (Democratic Republic of Congo)"},
	["ktv"] = {"Eastern Katu"},
	["ktw"] = {"Kato"},
	["ktx"] = {"Kaxararí"},
	["kty"] = {"Kango (Bas-Uélé District)"},
	["ktz"] = {"Juǀʼhoan", "Juǀʼhoansi"},
	["kub"] = {"Kutep"},
	["kuc"] = {"Kwinsu"},
	["kud"] = {"'Auhelawa"},
	["kue"] = {"Kuman (Papua New Guinea)"},
	["kuf"] = {"Western Katu"},
	["kug"] = {"Kupa"},
	["kuh"] = {"Kushi"},
	["kui"] = {"Kuikúro-Kalapálo"},
	["kuj"] = {"Kuria"},
	["kuk"] = {"Kepo'"},
	["kul"] = {"Kulere"},
	["kum"] = {"Kumyk"},
	["kun"] = {"Kunama"},
	["kuo"] = {"Kumukio"},
	["kup"] = {"Kunimaipa"},
	["kuq"] = {"Karipuna"},
	["kus"] = {"Kusaal"},
	["kut"] = {"Kutenai"},
	["kuu"] = {"Upper Kuskokwim"},
	["kuv"] = {"Kur"},
	["kuw"] = {"Kpagua"},
	["kux"] = {"Kukatja"},
	["kuy"] = {"Kuuku-Ya'u"},
	["kuz"] = {"Kunza"},
	["kva"] = {"Bagvalal"},
	["kvb"] = {"Kubu"},
	["kvc"] = {"Kove"},
	["kvd"] = {"Kui (Indonesia)"},
	["kve"] = {"Kalabakan"},
	["kvf"] = {"Kabalai"},
	["kvg"] = {"Kuni-Boazi"},
	["kvh"] = {"Komodo"},
	["kvi"] = {"Kwang"},
	["kvj"] = {"Psikye"},
	["kvk"] = {"Korean Sign Language"},
	["kvl"] = {"Kayaw"},
	["kvm"] = {"Kendem"},
	["kvn"] = {"Border Kuna"},
	["kvo"] = {"Dobel"},
	["kvp"] = {"Kompane"},
	["kvq"] = {"Geba Karen"},
	["kvr"] = {"Kerinci"},
	["kvt"] = {"Lahta Karen", "Lahta"},
	["kvu"] = {"Yinbaw Karen"},
	["kvv"] = {"Kola"},
	["kvw"] = {"Wersing"},
	["kvx"] = {"Parkari Koli"},
	["kvy"] = {"Yintale Karen", "Yintale"},
	["kvz"] = {"Tsakwambo", "Tsaukambo"},
	["kwa"] = {"Dâw"},
	["kwb"] = {"Kwa"},
	["kwc"] = {"Likwala"},
	["kwd"] = {"Kwaio"},
	["kwe"] = {"Kwerba"},
	["kwf"] = {"Kwara'ae"},
	["kwg"] = {"Sara Kaba Deme"},
	["kwh"] = {"Kowiai"},
	["kwi"] = {"Awa-Cuaiquer"},
	["kwj"] = {"Kwanga"},
	["kwk"] = {"Kwakiutl"},
	["kwl"] = {"Kofyar"},
	["kwm"] = {"Kwambi"},
	["kwn"] = {"Kwangali"},
	["kwo"] = {"Kwomtari"},
	["kwp"] = {"Kodia"},
	["kwr"] = {"Kwer"},
	["kws"] = {"Kwese"},
	["kwt"] = {"Kwesten"},
	["kwu"] = {"Kwakum"},
	["kwv"] = {"Sara Kaba Náà"},
	["kww"] = {"Kwinti"},
	["kwx"] = {"Khirwar"},
	["kwy"] = {"San Salvador Kongo"},
	["kwz"] = {"Kwadi"},
	["kxa"] = {"Kairiru"},
	["kxb"] = {"Krobu"},
	["kxc"] = {"Konso", "Khonso"},
	["kxd"] = {"Brunei"},
	["kxf"] = {"Manumanaw Karen", "Manumanaw"},
	["kxh"] = {"Karo (Ethiopia)"},
	["kxi"] = {"Keningau Murut"},
	["kxj"] = {"Kulfa"},
	["kxk"] = {"Zayein Karen"},
	["kxl"] = {"Nepali Kurux"},
	["kxm"] = {"Northern Khmer"},
	["kxn"] = {"Kanowit-Tanjong Melanau"},
	["kxo"] = {"Kanoé"},
	["kxp"] = {"Wadiyara Koli"},
	["kxq"] = {"Smärky Kanum"},
	["kxr"] = {"Koro (Papua New Guinea)"},
	["kxs"] = {"Kangjia"},
	["kxt"] = {"Koiwat"},
	["kxu"] = {"Kui (India)"},
	["kxv"] = {"Kuvi"},
	["kxw"] = {"Konai"},
	["kxx"] = {"Likuba"},
	["kxy"] = {"Kayong"},
	["kxz"] = {"Kerewo"},
	["kya"] = {"Kwaya"},
	["kyb"] = {"Butbut Kalinga"},
	["kyc"] = {"Kyaka"},
	["kyd"] = {"Karey"},
	["kye"] = {"Krache"},
	["kyf"] = {"Kouya"},
	["kyg"] = {"Keyagana"},
	["kyh"] = {"Karok"},
	["kyi"] = {"Kiput"},
	["kyj"] = {"Karao"},
	["kyk"] = {"Kamayo"},
	["kyl"] = {"Kalapuya"},
	["kym"] = {"Kpatili"},
	["kyn"] = {"Northern Binukidnon"},
	["kyo"] = {"Kelon"},
	["kyp"] = {"Kang"},
	["kyq"] = {"Kenga"},
	["kyr"] = {"Kuruáya"},
	["kys"] = {"Baram Kayan"},
	["kyt"] = {"Kayagar"},
	["kyu"] = {"Western Kayah"},
	["kyv"] = {"Kayort"},
	["kyw"] = {"Kudmali"},
	["kyx"] = {"Rapoisi"},
	["kyy"] = {"Kambaira"},
	["kyz"] = {"Kayabí"},
	["kza"] = {"Western Karaboro"},
	["kzb"] = {"Kaibobo"},
	["kzc"] = {"Bondoukou Kulango"},
	["kzd"] = {"Kadai"},
	["kze"] = {"Kosena"},
	["kzf"] = {"Da'a Kaili"},
	["kzg"] = {"Kikai"},
	["kzi"] = {"Kelabit"},
	["kzk"] = {"Kazukuru"},
	["kzl"] = {"Kayeli"},
	["kzm"] = {"Kais"},
	["kzn"] = {"Kokola"},
	["kzo"] = {"Kaningi"},
	["kzp"] = {"Kaidipang"},
	["kzq"] = {"Kaike"},
	["kzr"] = {"Karang"},
	["kzs"] = {"Sugut Dusun"},
	["kzu"] = {"Kayupulau"},
	["kzv"] = {"Komyandaret"},
	["kzw"] = {"Karirí-Xocó"},
	["kzx"] = {"Kamarian"},
	["kzy"] = {"Kango (Tshopo District)"},
	["kzz"] = {"Kalabra"},
	["laa"] = {"Southern Subanen"},
	["lab"] = {"Linear A"},
	["lac"] = {"Lacandon"},
	["lad"] = {"Ladino"},
	["lae"] = {"Pattani"},
	["laf"] = {"Lafofa"},
	["lag"] = {"Langi"},
	["lah"] = {"Lahnda"},
	["lai"] = {"Lambya"},
	["laj"] = {"Lango (Uganda)"},
	["lak"] = {"Laka (Nigeria)"},
	["lal"] = {"Lalia"},
	["lam"] = {"Lamba"},
	["lan"] = {"Laru"},
	["lap"] = {"Laka (Chad)"},
	["laq"] = {"Qabiao"},
	["lar"] = {"Larteh"},
	["las"] = {"Lama (Togo)"},
	["lau"] = {"Laba"},
	["law"] = {"Lauje"},
	["lax"] = {"Tiwa"},
	["lay"] = {"Lama Bai"},
	["laz"] = {"Aribwatsa"},
	["lbb"] = {"Label"},
	["lbc"] = {"Lakkia"},
	["lbe"] = {"Lak"},
	["lbf"] = {"Tinani"},
	["lbg"] = {"Laopang"},
	["lbi"] = {"La'bi"},
	["lbj"] = {"Ladakhi"},
	["lbk"] = {"Central Bontok"},
	["lbl"] = {"Libon Bikol"},
	["lbm"] = {"Lodhi"},
	["lbn"] = {"Rmeet"},
	["lbo"] = {"Laven"},
	["lbq"] = {"Wampar"},
	["lbr"] = {"Lohorung"},
	["lbs"] = {"Libyan Sign Language"},
	["lbt"] = {"Lachi"},
	["lbu"] = {"Labu"},
	["lbv"] = {"Lavatbura-Lamusong"},
	["lbw"] = {"Tolaki"},
	["lbx"] = {"Lawangan"},
	["lby"] = {"Lamalama", "Lamu-Lamu"},
	["lbz"] = {"Lardil"},
	["lcc"] = {"Legenyem"},
	["lcd"] = {"Lola"},
	["lce"] = {"Loncong", "Sekak"},
	["lcf"] = {"Lubu"},
	["lch"] = {"Luchazi"},
	["lcl"] = {"Lisela"},
	["lcm"] = {"Tungag"},
	["lcp"] = {"Western Lawa"},
	["lcq"] = {"Luhu"},
	["lcs"] = {"Lisabata-Nuniali"},
	["lda"] = {"Kla-Dan"},
	["ldb"] = {"Dũya"},
	["ldd"] = {"Luri"},
	["ldg"] = {"Lenyima"},
	["ldh"] = {"Lamja-Dengsa-Tola"},
	["ldi"] = {"Laari"},
	["ldj"] = {"Lemoro"},
	["ldk"] = {"Leelau"},
	["ldl"] = {"Kaan"},
	["ldm"] = {"Landoma"},
	["ldn"] = {"Láadan"},
	["ldo"] = {"Loo"},
	["ldp"] = {"Tso"},
	["ldq"] = {"Lufu"},
	["lea"] = {"Lega-Shabunda"},
	["leb"] = {"Lala-Bisa"},
	["lec"] = {"Leco"},
	["led"] = {"Lendu"},
	["lee"] = {"Lyélé"},
	["lef"] = {"Lelemi"},
	["leh"] = {"Lenje"},
	["lei"] = {"Lemio"},
	["lej"] = {"Lengola"},
	["lek"] = {"Leipon"},
	["lel"] = {"Lele (Democratic Republic of Congo)"},
	["lem"] = {"Nomaande"},
	["len"] = {"Lenca"},
	["leo"] = {"Leti (Cameroon)"},
	["lep"] = {"Lepcha"},
	["leq"] = {"Lembena"},
	["ler"] = {"Lenkau"},
	["les"] = {"Lese"},
	["let"] = {"Lesing-Gelimi", "Amio-Gelimi"},
	["leu"] = {"Kara (Papua New Guinea)"},
	["lev"] = {"Lamma"},
	["lew"] = {"Ledo Kaili"},
	["lex"] = {"Luang"},
	["ley"] = {"Lemolang"},
	["lez"] = {"Lezghian"},
	["lfa"] = {"Lefa"},
	["lfn"] = {"Lingua Franca Nova"},
	["lga"] = {"Lungga"},
	["lgb"] = {"Laghu"},
	["lgg"] = {"Lugbara"},
	["lgh"] = {"Laghuu"},
	["lgi"] = {"Lengilu"},
	["lgk"] = {"Lingarak", "Neverver"},
	["lgl"] = {"Wala"},
	["lgm"] = {"Lega-Mwenga"},
	["lgn"] = {"T'apo", "Opuuo"},
	["lgq"] = {"Logba"},
	["lgr"] = {"Lengo"},
	["lgt"] = {"Pahi"},
	["lgu"] = {"Longgu"},
	["lgz"] = {"Ligenza"},
	["lha"] = {"Laha (Viet Nam)"},
	["lhh"] = {"Laha (Indonesia)"},
	["lhi"] = {"Lahu Shi"},
	["lhl"] = {"Lahul Lohar"},
	["lhm"] = {"Lhomi"},
	["lhn"] = {"Lahanan"},
	["lhp"] = {"Lhokpu"},
	["lhs"] = {"Mlahsö"},
	["lht"] = {"Lo-Toga"},
	["lhu"] = {"Lahu"},
	["lia"] = {"West-Central Limba"},
	["lib"] = {"Likum"},
	["lic"] = {"Hlai"},
	["lid"] = {"Nyindrou"},
	["lie"] = {"Likila"},
	["lif"] = {"Limbu"},
	["lig"] = {"Ligbi"},
	["lih"] = {"Lihir"},
	["lij"] = {"Ligurian"},
	["lik"] = {"Lika"},
	["lil"] = {"Lillooet"},
	["lio"] = {"Liki"},
	["lip"] = {"Sekpele"},
	["liq"] = {"Libido"},
	["lir"] = {"Liberian English"},
	["lis"] = {"Lisu"},
	["liu"] = {"Logorik"},
	["liv"] = {"Liv"},
	["liw"] = {"Col"},
	["lix"] = {"Liabuku"},
	["liy"] = {"Banda-Bambari"},
	["liz"] = {"Libinza"},
	["lja"] = {"Golpa"},
	["lje"] = {"Rampi"},
	["lji"] = {"Laiyolo"},
	["ljl"] = {"Li'o"},
	["ljp"] = {"Lampung Api"},
	["ljw"] = {"Yirandali"},
	["ljx"] = {"Yuru"},
	["lka"] = {"Lakalei"},
	["lkb"] = {"Kabras", "Lukabaras"},
	["lkc"] = {"Kucong"},
	["lkd"] = {"Lakondê"},
	["lke"] = {"Kenyi"},
	["lkh"] = {"Lakha"},
	["lki"] = {"Laki"},
	["lkj"] = {"Remun"},
	["lkl"] = {"Laeko-Libuat"},
	["lkm"] = {"Kalaamaya"},
	["lkn"] = {"Lakon", "Vure"},
	["lko"] = {"Khayo", "Olukhayo"},
	["lkr"] = {"Päri"},
	["lks"] = {"Kisa", "Olushisa"},
	["lkt"] = {"Lakota"},
	["lku"] = {"Kungkari"},
	["lky"] = {"Lokoya"},
	["lla"] = {"Lala-Roba"},
	["llb"] = {"Lolo"},
	["llc"] = {"Lele (Guinea)"},
	["lld"] = {"Ladin"},
	["lle"] = {"Lele (Papua New Guinea)"},
	["llf"] = {"Hermit"},
	["llg"] = {"Lole"},
	["llh"] = {"Lamu"},
	["lli"] = {"Teke-Laali"},
	["llj"] = {"Ladji Ladji"},
	["llk"] = {"Lelak"},
	["lll"] = {"Lilau"},
	["llm"] = {"Lasalimu"},
	["lln"] = {"Lele (Chad)"},
	["llp"] = {"North Efate"},
	["llq"] = {"Lolak"},
	["lls"] = {"Lithuanian Sign Language"},
	["llu"] = {"Lau"},
	["llx"] = {"Lauan"},
	["lma"] = {"East Limba"},
	["lmb"] = {"Merei"},
	["lmc"] = {"Limilngan"},
	["lmd"] = {"Lumun"},
	["lme"] = {"Pévé"},
	["lmf"] = {"South Lembata"},
	["lmg"] = {"Lamogai"},
	["lmh"] = {"Lambichhong"},
	["lmi"] = {"Lombi"},
	["lmj"] = {"West Lembata"},
	["lmk"] = {"Lamkang"},
	["lml"] = {"Hano"},
	["lmn"] = {"Lambadi"},
	["lmo"] = {"Lombard"},
	["lmp"] = {"Limbum"},
	["lmq"] = {"Lamatuka"},
	["lmr"] = {"Lamalera"},
	["lmu"] = {"Lamenu"},
	["lmv"] = {"Lomaiviti"},
	["lmw"] = {"Lake Miwok"},
	["lmx"] = {"Laimbue"},
	["lmy"] = {"Lamboya"},
	["lmz"] = {"Lumbee"},
	["lna"] = {"Langbashe"},
	["lnb"] = {"Mbalanhu"},
	["lnd"] = {"Lundayeh", "Lun Bawang"},
	["lng"] = {"Langobardic"},
	["lnh"] = {"Lanoh"},
	["lni"] = {"Daantanai'"},
	["lnj"] = {"Leningitij"},
	["lnl"] = {"South Central Banda"},
	["lnm"] = {"Langam"},
	["lnn"] = {"Lorediakarkar"},
	["lno"] = {"Lango (South Sudan)"},
	["lns"] = {"Lamnso'"},
	["lnu"] = {"Longuda"},
	["lnw"] = {"Lanima"},
	["lnz"] = {"Lonzo"},
	["loa"] = {"Loloda"},
	["lob"] = {"Lobi"},
	["loc"] = {"Inonhan"},
	["loe"] = {"Saluan"},
	["lof"] = {"Logol"},
	["log"] = {"Logo"},
	["loh"] = {"Narim"},
	["loi"] = {"Loma (Côte d'Ivoire)"},
	["loj"] = {"Lou"},
	["lok"] = {"Loko"},
	["lol"] = {"Mongo"},
	["lom"] = {"Loma (Liberia)"},
	["lon"] = {"Malawi Lomwe"},
	["loo"] = {"Lombo"},
	["lop"] = {"Lopa"},
	["loq"] = {"Lobala"},
	["lor"] = {"Téén"},
	["los"] = {"Loniu"},
	["lot"] = {"Otuho"},
	["lou"] = {"Louisiana Creole"},
	["lov"] = {"Lopi"},
	["low"] = {"Tampias Lobu"},
	["lox"] = {"Loun"},
	["loy"] = {"Loke"},
	["loz"] = {"Lozi"},
	["lpa"] = {"Lelepa"},
	["lpe"] = {"Lepki"},
	["lpn"] = {"Long Phuri Naga"},
	["lpo"] = {"Lipo"},
	["lpx"] = {"Lopit"},
	["lra"] = {"Rara Bakati'"},
	["lrc"] = {"Northern Luri"},
	["lre"] = {"Laurentian"},
	["lrg"] = {"Laragia"},
	["lri"] = {"Marachi", "Olumarachi"},
	["lrk"] = {"Loarki"},
	["lrl"] = {"Lari"},
	["lrm"] = {"Marama", "Olumarama"},
	["lrn"] = {"Lorang"},
	["lro"] = {"Laro"},
	["lrr"] = {"Southern Yamphu"},
	["lrt"] = {"Larantuka Malay"},
	["lrv"] = {"Larevat"},
	["lrz"] = {"Lemerig"},
	["lsa"] = {"Lasgerdi"},
	["lsd"] = {"Lishana Deni"},
	["lse"] = {"Lusengo"},
	["lsh"] = {"Lish"},
	["lsi"] = {"Lashi"},
	["lsl"] = {"Latvian Sign Language"},
	["lsm"] = {"Saamia", "Olusamia"},
	["lsn"] = {"Tibetan Sign Language"},
	["lso"] = {"Laos Sign Language"},
	["lsp"] = {"Panamanian Sign Language", "Lengua de Señas Panameñas"},
	["lsr"] = {"Aruop"},
	["lss"] = {"Lasi"},
	["lst"] = {"Trinidad and Tobago Sign Language"},
	["lsv"] = {"Sivia Sign Language"},
	["lsy"] = {"Mauritian Sign Language"},
	["ltc"] = {"Late Middle Chinese"},
	["ltg"] = {"Latgalian"},
	["lth"] = {"Thur"},
	["lti"] = {"Leti (Indonesia)"},
	["ltn"] = {"Latundê"},
	["lto"] = {"Tsotso", "Olutsotso"},
	["lts"] = {"Tachoni", "Lutachoni"},
	["ltu"] = {"Latu"},
	["lua"] = {"Luba-Lulua"},
	["luc"] = {"Aringa"},
	["lud"] = {"Ludian"},
	["lue"] = {"Luvale"},
	["luf"] = {"Laua"},
	["lui"] = {"Luiseno"},
	["luj"] = {"Luna"},
	["luk"] = {"Lunanakha"},
	["lul"] = {"Olu'bo"},
	["lum"] = {"Luimbi"},
	["lun"] = {"Lunda"},
	["luo"] = {"Luo (Kenya and Tanzania)", "Dholuo"},
	["lup"] = {"Lumbu"},
	["luq"] = {"Lucumi"},
	["lur"] = {"Laura"},
	["lus"] = {"Lushai"},
	["lut"] = {"Lushootseed"},
	["luu"] = {"Lumba-Yakkha"},
	["luv"] = {"Luwati"},
	["luw"] = {"Luo (Cameroon)"},
	["luy"] = {"Luyia", "Oluluyia"},
	["luz"] = {"Southern Luri"},
	["lva"] = {"Maku'a"},
	["lvi"] = {"Lavi"},
	["lvk"] = {"Lavukaleve"},
	["lvs"] = {"Standard Latvian"},
	["lvu"] = {"Levuka"},
	["lwa"] = {"Lwalu"},
	["lwe"] = {"Lewo Eleng"},
	["lwg"] = {"Wanga", "Oluwanga"},
	["lwh"] = {"White Lachi"},
	["lwl"] = {"Eastern Lawa"},
	["lwm"] = {"Laomian"},
	["lwo"] = {"Luwo"},
	["lws"] = {"Malawian Sign Language"},
	["lwt"] = {"Lewotobi"},
	["lwu"] = {"Lawu"},
	["lww"] = {"Lewo"},
	["lya"] = {"Layakha"},
	["lyg"] = {"Lyngngam"},
	["lyn"] = {"Luyana"},
	["lzh"] = {"Literary Chinese"},
	["lzl"] = {"Litzlitz"},
	["lzn"] = {"Leinong Naga"},
	["lzz"] = {"Laz"},
	["maa"] = {"San Jerónimo Tecóatl Mazatec"},
	["mab"] = {"Yutanduchi Mixtec"},
	["mad"] = {"Madurese"},
	["mae"] = {"Bo-Rukul"},
	["maf"] = {"Mafa"},
	["mag"] = {"Magahi"},
	["mai"] = {"Maithili"},
	["maj"] = {"Jalapa De Díaz Mazatec"},
	["mak"] = {"Makasar"},
	["mam"] = {"Mam"},
	["man"] = {"Mandingo", "Manding"},
	["map"] = {"Austronesian languages"},
	["maq"] = {"Chiquihuitlán Mazatec"},
	["mas"] = {"Masai"},
	["mat"] = {"San Francisco Matlatzinca"},
	["mau"] = {"Huautla Mazatec"},
	["mav"] = {"Sateré-Mawé"},
	["maw"] = {"Mampruli"},
	["max"] = {"North Moluccan Malay"},
	["maz"] = {"Central Mazahua"},
	["mba"] = {"Higaonon"},
	["mbb"] = {"Western Bukidnon Manobo"},
	["mbc"] = {"Macushi"},
	["mbd"] = {"Dibabawon Manobo"},
	["mbe"] = {"Molale"},
	["mbf"] = {"Baba Malay"},
	["mbh"] = {"Mangseng"},
	["mbi"] = {"Ilianen Manobo"},
	["mbj"] = {"Nadëb"},
	["mbk"] = {"Malol"},
	["mbl"] = {"Maxakalí"},
	["mbm"] = {"Ombamba"},
	["mbn"] = {"Macaguán"},
	["mbo"] = {"Mbo (Cameroon)"},
	["mbp"] = {"Malayo"},
	["mbq"] = {"Maisin"},
	["mbr"] = {"Nukak Makú"},
	["mbs"] = {"Sarangani Manobo"},
	["mbt"] = {"Matigsalug Manobo"},
	["mbu"] = {"Mbula-Bwazza"},
	["mbv"] = {"Mbulungish"},
	["mbw"] = {"Maring"},
	["mbx"] = {"Mari (East Sepik Province)"},
	["mby"] = {"Memoni"},
	["mbz"] = {"Amoltepec Mixtec"},
	["mca"] = {"Maca"},
	["mcb"] = {"Machiguenga"},
	["mcc"] = {"Bitur"},
	["mcd"] = {"Sharanahua"},
	["mce"] = {"Itundujia Mixtec"},
	["mcf"] = {"Matsés"},
	["mcg"] = {"Mapoyo"},
	["mch"] = {"Maquiritari"},
	["mci"] = {"Mese"},
	["mcj"] = {"Mvanip"},
	["mck"] = {"Mbunda"},
	["mcl"] = {"Macaguaje"},
	["mcm"] = {"Malaccan Creole Portuguese"},
	["mcn"] = {"Masana"},
	["mco"] = {"Coatlán Mixe"},
	["mcp"] = {"Makaa"},
	["mcq"] = {"Ese"},
	["mcr"] = {"Menya"},
	["mcs"] = {"Mambai"},
	["mct"] = {"Mengisa"},
	["mcu"] = {"Cameroon Mambila"},
	["mcv"] = {"Minanibai"},
	["mcw"] = {"Mawa (Chad)"},
	["mcx"] = {"Mpiemo"},
	["mcy"] = {"South Watut"},
	["mcz"] = {"Mawan"},
	["mda"] = {"Mada (Nigeria)"},
	["mdb"] = {"Morigi"},
	["mdc"] = {"Male (Papua New Guinea)"},
	["mdd"] = {"Mbum"},
	["mde"] = {"Maba (Chad)"},
	["mdf"] = {"Moksha"},
	["mdg"] = {"Massalat"},
	["mdh"] = {"Maguindanaon"},
	["mdi"] = {"Mamvu"},
	["mdj"] = {"Mangbetu"},
	["mdk"] = {"Mangbutu"},
	["mdl"] = {"Maltese Sign Language"},
	["mdm"] = {"Mayogo"},
	["mdn"] = {"Mbati"},
	["mdp"] = {"Mbala"},
	["mdq"] = {"Mbole"},
	["mdr"] = {"Mandar"},
	["mds"] = {"Maria (Papua New Guinea)"},
	["mdt"] = {"Mbere"},
	["mdu"] = {"Mboko"},
	["mdv"] = {"Santa Lucía Monteverde Mixtec"},
	["mdw"] = {"Mbosi"},
	["mdx"] = {"Dizin"},
	["mdy"] = {"Male (Ethiopia)"},
	["mdz"] = {"Suruí Do Pará"},
	["mea"] = {"Menka"},
	["meb"] = {"Ikobi"},
	["mec"] = {"Marra"},
	["med"] = {"Melpa"},
	["mee"] = {"Mengen"},
	["mef"] = {"Megam"},
	["meh"] = {"Southwestern Tlaxiaco Mixtec"},
	["mei"] = {"Midob"},
	["mej"] = {"Meyah"},
	["mek"] = {"Mekeo"},
	["mel"] = {"Central Melanau"},
	["mem"] = {"Mangala"},
	["men"] = {"Mende (Sierra Leone)"},
	["meo"] = {"Kedah Malay"},
	["mep"] = {"Miriwoong"},
	["meq"] = {"Merey"},
	["mer"] = {"Meru"},
	["mes"] = {"Masmaje"},
	["met"] = {"Mato"},
	["meu"] = {"Motu"},
	["mev"] = {"Mano"},
	["mew"] = {"Maaka"},
	["mey"] = {"Hassaniyya"},
	["mez"] = {"Menominee"},
	["mfa"] = {"Pattani Malay"},
	["mfb"] = {"Bangka"},
	["mfc"] = {"Mba"},
	["mfd"] = {"Mendankwe-Nkwen"},
	["mfe"] = {"Morisyen"},
	["mff"] = {"Naki"},
	["mfg"] = {"Mogofin"},
	["mfh"] = {"Matal"},
	["mfi"] = {"Wandala"},
	["mfj"] = {"Mefele"},
	["mfk"] = {"North Mofu"},
	["mfl"] = {"Putai"},
	["mfm"] = {"Marghi South"},
	["mfn"] = {"Cross River Mbembe"},
	["mfo"] = {"Mbe"},
	["mfp"] = {"Makassar Malay"},
	["mfq"] = {"Moba"},
	["mfr"] = {"Marrithiyel"},
	["mfs"] = {"Mexican Sign Language"},
	["mft"] = {"Mokerang"},
	["mfu"] = {"Mbwela"},
	["mfv"] = {"Mandjak"},
	["mfw"] = {"Mulaha"},
	["mfx"] = {"Melo"},
	["mfy"] = {"Mayo"},
	["mfz"] = {"Mabaan"},
	["mga"] = {"Middle Irish (900-1200)"},
	["mgb"] = {"Mararit"},
	["mgc"] = {"Morokodo"},
	["mgd"] = {"Moru"},
	["mge"] = {"Mango"},
	["mgf"] = {"Maklew"},
	["mgg"] = {"Mpumpong"},
	["mgh"] = {"Makhuwa-Meetto"},
	["mgi"] = {"Lijili"},
	["mgj"] = {"Abureni"},
	["mgk"] = {"Mawes"},
	["mgl"] = {"Maleu-Kilenge"},
	["mgm"] = {"Mambae"},
	["mgn"] = {"Mbangi"},
	["mgo"] = {"Meta'"},
	["mgp"] = {"Eastern Magar"},
	["mgq"] = {"Malila"},
	["mgr"] = {"Mambwe-Lungu"},
	["mgs"] = {"Manda (Tanzania)"},
	["mgt"] = {"Mongol"},
	["mgu"] = {"Mailu"},
	["mgv"] = {"Matengo"},
	["mgw"] = {"Matumbi"},
	["mgy"] = {"Mbunga"},
	["mgz"] = {"Mbugwe"},
	["mha"] = {"Manda (India)"},
	["mhb"] = {"Mahongwe"},
	["mhc"] = {"Mocho"},
	["mhd"] = {"Mbugu"},
	["mhe"] = {"Besisi", "Mah Meri"},
	["mhf"] = {"Mamaa"},
	["mhg"] = {"Margu"},
	["mhi"] = {"Ma'di"},
	["mhj"] = {"Mogholi"},
	["mhk"] = {"Mungaka"},
	["mhl"] = {"Mauwake"},
	["mhm"] = {"Makhuwa-Moniga"},
	["mhn"] = {"Mócheno"},
	["mho"] = {"Mashi (Zambia)"},
	["mhp"] = {"Balinese Malay"},
	["mhq"] = {"Mandan"},
	["mhr"] = {"Eastern Mari"},
	["mhs"] = {"Buru (Indonesia)"},
	["mht"] = {"Mandahuaca"},
	["mhu"] = {"Digaro-Mishmi", "Darang Deng"},
	["mhw"] = {"Mbukushu"},
	["mhx"] = {"Maru", "Lhaovo"},
	["mhy"] = {"Ma'anyan"},
	["mhz"] = {"Mor (Mor Islands)"},
	["mia"] = {"Miami"},
	["mib"] = {"Atatláhuca Mixtec"},
	["mic"] = {"Mi'kmaq", "Micmac"},
	["mid"] = {"Mandaic"},
	["mie"] = {"Ocotepec Mixtec"},
	["mif"] = {"Mofu-Gudur"},
	["mig"] = {"San Miguel El Grande Mixtec"},
	["mih"] = {"Chayuco Mixtec"},
	["mii"] = {"Chigmecatitlán Mixtec"},
	["mij"] = {"Abar", "Mungbam"},
	["mik"] = {"Mikasuki"},
	["mil"] = {"Peñoles Mixtec"},
	["mim"] = {"Alacatlatzala Mixtec"},
	["min"] = {"Minangkabau"},
	["mio"] = {"Pinotepa Nacional Mixtec"},
	["mip"] = {"Apasco-Apoala Mixtec"},
	["miq"] = {"Mískito"},
	["mir"] = {"Isthmus Mixe"},
	["mis"] = {"Uncoded languages"},
	["mit"] = {"Southern Puebla Mixtec"},
	["miu"] = {"Cacaloxtepec Mixtec"},
	["miw"] = {"Akoye"},
	["mix"] = {"Mixtepec Mixtec"},
	["miy"] = {"Ayutla Mixtec"},
	["miz"] = {"Coatzospan Mixtec"},
	["mjb"] = {"Makalero"},
	["mjc"] = {"San Juan Colorado Mixtec"},
	["mjd"] = {"Northwest Maidu"},
	["mje"] = {"Muskum"},
	["mjg"] = {"Tu"},
	["mjh"] = {"Mwera (Nyasa)"},
	["mji"] = {"Kim Mun"},
	["mjj"] = {"Mawak"},
	["mjk"] = {"Matukar"},
	["mjl"] = {"Mandeali"},
	["mjm"] = {"Medebur"},
	["mjn"] = {"Ma (Papua New Guinea)"},
	["mjo"] = {"Malankuravan"},
	["mjp"] = {"Malapandaram"},
	["mjq"] = {"Malaryan"},
	["mjr"] = {"Malavedan"},
	["mjs"] = {"Miship"},
	["mjt"] = {"Sauria Paharia"},
	["mju"] = {"Manna-Dora"},
	["mjv"] = {"Mannan"},
	["mjw"] = {"Karbi"},
	["mjx"] = {"Mahali"},
	["mjy"] = {"Mahican"},
	["mjz"] = {"Majhi"},
	["mka"] = {"Mbre"},
	["mkb"] = {"Mal Paharia"},
	["mkc"] = {"Siliput"},
	["mke"] = {"Mawchi"},
	["mkf"] = {"Miya"},
	["mkg"] = {"Mak (China)"},
	["mkh"] = {"Mon-Khmer languages"},
	["mki"] = {"Dhatki"},
	["mkj"] = {"Mokilese"},
	["mkk"] = {"Byep"},
	["mkl"] = {"Mokole"},
	["mkm"] = {"Moklen"},
	["mkn"] = {"Kupang Malay"},
	["mko"] = {"Mingang Doso"},
	["mkp"] = {"Moikodi"},
	["mkq"] = {"Bay Miwok"},
	["mkr"] = {"Malas"},
	["mks"] = {"Silacayoapan Mixtec"},
	["mkt"] = {"Vamale"},
	["mku"] = {"Konyanka Maninka"},
	["mkv"] = {"Mafea"},
	["mkw"] = {"Kituba (Congo)"},
	["mkx"] = {"Kinamiging Manobo"},
	["mky"] = {"East Makian"},
	["mkz"] = {"Makasae"},
	["mla"] = {"Malo"},
	["mlb"] = {"Mbule"},
	["mlc"] = {"Cao Lan"},
	["mle"] = {"Manambu"},
	["mlf"] = {"Mal"},
	["mlh"] = {"Mape"},
	["mli"] = {"Malimpung"},
	["mlj"] = {"Miltu"},
	["mlk"] = {"Ilwana", "Kiwilwana"},
	["mll"] = {"Malua Bay"},
	["mlm"] = {"Mulam"},
	["mln"] = {"Malango"},
	["mlo"] = {"Mlomp"},
	["mlp"] = {"Bargam"},
	["mlq"] = {"Western Maninkakan"},
	["mlr"] = {"Vame"},
	["mls"] = {"Masalit"},
	["mlu"] = {"To'abaita"},
	["mlv"] = {"Motlav", "Mwotlap"},
	["mlw"] = {"Moloko"},
	["mlx"] = {"Malfaxal", "Naha'ai"},
	["mlz"] = {"Malaynon"},
	["mma"] = {"Mama"},
	["mmb"] = {"Momina"},
	["mmc"] = {"Michoacán Mazahua"},
	["mmd"] = {"Maonan"},
	["mme"] = {"Mae"},
	["mmf"] = {"Mundat"},
	["mmg"] = {"North Ambrym"},
	["mmh"] = {"Mehináku"},
	["mmi"] = {"Musar"},
	["mmj"] = {"Majhwar"},
	["mmk"] = {"Mukha-Dora"},
	["mml"] = {"Man Met"},
	["mmm"] = {"Maii"},
	["mmn"] = {"Mamanwa"},
	["mmo"] = {"Mangga Buang"},
	["mmp"] = {"Siawi"},
	["mmq"] = {"Musak"},
	["mmr"] = {"Western Xiangxi Miao"},
	["mmt"] = {"Malalamai"},
	["mmu"] = {"Mmaala"},
	["mmv"] = {"Miriti"},
	["mmw"] = {"Emae"},
	["mmx"] = {"Madak"},
	["mmy"] = {"Migaama"},
	["mmz"] = {"Mabaale"},
	["mna"] = {"Mbula"},
	["mnb"] = {"Muna"},
	["mnc"] = {"Manchu"},
	["mnd"] = {"Mondé"},
	["mne"] = {"Naba"},
	["mnf"] = {"Mundani"},
	["mng"] = {"Eastern Mnong"},
	["mnh"] = {"Mono (Democratic Republic of Congo)"},
	["mni"] = {"Manipuri"},
	["mnj"] = {"Munji"},
	["mnk"] = {"Mandinka"},
	["mnl"] = {"Tiale"},
	["mnm"] = {"Mapena"},
	["mnn"] = {"Southern Mnong"},
	["mno"] = {"Manobo languages"},
	["mnp"] = {"Min Bei Chinese"},
	["mnq"] = {"Minriq"},
	["mnr"] = {"Mono (USA)"},
	["mns"] = {"Mansi"},
	["mnu"] = {"Mer"},
	["mnv"] = {"Rennell-Bellona"},
	["mnw"] = {"Mon"},
	["mnx"] = {"Manikion"},
	["mny"] = {"Manyawa"},
	["mnz"] = {"Moni"},
	["moa"] = {"Mwan"},
	["moc"] = {"Mocoví"},
	["mod"] = {"Mobilian"},
	["moe"] = {"Montagnais"},
	["mog"] = {"Mongondow"},
	["moh"] = {"Mohawk"},
	["moi"] = {"Mboi"},
	["moj"] = {"Monzombo"},
	["mok"] = {"Morori"},
	["mom"] = {"Mangue"},
	["moo"] = {"Monom"},
	["mop"] = {"Mopán Maya"},
	["moq"] = {"Mor (Bomberai Peninsula)"},
	["mor"] = {"Moro"},
	["mos"] = {"Mossi"},
	["mot"] = {"Barí"},
	["mou"] = {"Mogum"},
	["mov"] = {"Mohave"},
	["mow"] = {"Moi (Congo)"},
	["mox"] = {"Molima"},
	["moy"] = {"Shekkacho"},
	["moz"] = {"Mukulu", "Gergiko"},
	["mpa"] = {"Mpoto"},
	["mpb"] = {"Malak Malak", "Mullukmulluk"},
	["mpc"] = {"Mangarrayi"},
	["mpd"] = {"Machinere"},
	["mpe"] = {"Majang"},
	["mpg"] = {"Marba"},
	["mph"] = {"Maung"},
	["mpi"] = {"Mpade"},
	["mpj"] = {"Martu Wangka", "Wangkajunga"},
	["mpk"] = {"Mbara (Chad)"},
	["mpl"] = {"Middle Watut"},
	["mpm"] = {"Yosondúa Mixtec"},
	["mpn"] = {"Mindiri"},
	["mpo"] = {"Miu"},
	["mpp"] = {"Migabac"},
	["mpq"] = {"Matís"},
	["mpr"] = {"Vangunu"},
	["mps"] = {"Dadibi"},
	["mpt"] = {"Mian"},
	["mpu"] = {"Makuráp"},
	["mpv"] = {"Mungkip"},
	["mpw"] = {"Mapidian"},
	["mpx"] = {"Misima-Panaeati"},
	["mpy"] = {"Mapia"},
	["mpz"] = {"Mpi"},
	["mqa"] = {"Maba (Indonesia)"},
	["mqb"] = {"Mbuko"},
	["mqc"] = {"Mangole"},
	["mqe"] = {"Matepi"},
	["mqf"] = {"Momuna"},
	["mqg"] = {"Kota Bangun Kutai Malay"},
	["mqh"] = {"Tlazoyaltepec Mixtec"},
	["mqi"] = {"Mariri"},
	["mqj"] = {"Mamasa"},
	["mqk"] = {"Rajah Kabunsuwan Manobo"},
	["mql"] = {"Mbelime"},
	["mqm"] = {"South Marquesan"},
	["mqn"] = {"Moronene"},
	["mqo"] = {"Modole"},
	["mqp"] = {"Manipa"},
	["mqq"] = {"Minokok"},
	["mqr"] = {"Mander"},
	["mqs"] = {"West Makian"},
	["mqt"] = {"Mok"},
	["mqu"] = {"Mandari"},
	["mqv"] = {"Mosimo"},
	["mqw"] = {"Murupi"},
	["mqx"] = {"Mamuju"},
	["mqy"] = {"Manggarai"},
	["mqz"] = {"Pano"},
	["mra"] = {"Mlabri"},
	["mrb"] = {"Marino"},
	["mrc"] = {"Maricopa"},
	["mrd"] = {"Western Magar"},
	["mre"] = {"Martha's Vineyard Sign Language"},
	["mrf"] = {"Elseng"},
	["mrg"] = {"Mising"},
	["mrh"] = {"Mara Chin"},
	["mrj"] = {"Western Mari"},
	["mrk"] = {"Hmwaveke"},
	["mrl"] = {"Mortlockese"},
	["mrm"] = {"Merlav", "Mwerlap"},
	["mrn"] = {"Cheke Holo"},
	["mro"] = {"Mru"},
	["mrp"] = {"Morouas"},
	["mrq"] = {"North Marquesan"},
	["mrr"] = {"Maria (India)"},
	["mrs"] = {"Maragus"},
	["mrt"] = {"Marghi Central"},
	["mru"] = {"Mono (Cameroon)"},
	["mrv"] = {"Mangareva"},
	["mrw"] = {"Maranao"},
	["mrx"] = {"Maremgi", "Dineor"},
	["mry"] = {"Mandaya"},
	["mrz"] = {"Marind"},
	["msb"] = {"Masbatenyo"},
	["msc"] = {"Sankaran Maninka"},
	["msd"] = {"Yucatec Maya Sign Language"},
	["mse"] = {"Musey"},
	["msf"] = {"Mekwei"},
	["msg"] = {"Moraid"},
	["msh"] = {"Masikoro Malagasy"},
	["msi"] = {"Sabah Malay"},
	["msj"] = {"Ma (Democratic Republic of Congo)"},
	["msk"] = {"Mansaka"},
	["msl"] = {"Molof", "Poule"},
	["msm"] = {"Agusan Manobo"},
	["msn"] = {"Vurës"},
	["mso"] = {"Mombum"},
	["msp"] = {"Maritsauá"},
	["msq"] = {"Caac"},
	["msr"] = {"Mongolian Sign Language"},
	["mss"] = {"West Masela"},
	["msu"] = {"Musom"},
	["msv"] = {"Maslam"},
	["msw"] = {"Mansoanka"},
	["msx"] = {"Moresada"},
	["msy"] = {"Aruamu"},
	["msz"] = {"Momare"},
	["mta"] = {"Cotabato Manobo"},
	["mtb"] = {"Anyin Morofo"},
	["mtc"] = {"Munit"},
	["mtd"] = {"Mualang"},
	["mte"] = {"Mono (Solomon Islands)"},
	["mtf"] = {"Murik (Papua New Guinea)"},
	["mtg"] = {"Una"},
	["mth"] = {"Munggui"},
	["mti"] = {"Maiwa (Papua New Guinea)"},
	["mtj"] = {"Moskona"},
	["mtk"] = {"Mbe'"},
	["mtl"] = {"Montol"},
	["mtm"] = {"Mator"},
	["mtn"] = {"Matagalpa"},
	["mto"] = {"Totontepec Mixe"},
	["mtp"] = {"Wichí Lhamtés Nocten"},
	["mtq"] = {"Muong"},
	["mtr"] = {"Mewari"},
	["mts"] = {"Yora"},
	["mtt"] = {"Mota"},
	["mtu"] = {"Tututepec Mixtec"},
	["mtv"] = {"Asaro'o"},
	["mtw"] = {"Southern Binukidnon"},
	["mtx"] = {"Tidaá Mixtec"},
	["mty"] = {"Nabi"},
	["mua"] = {"Mundang"},
	["mub"] = {"Mubi"},
	["muc"] = {"Ajumbu"},
	["mud"] = {"Mednyj Aleut"},
	["mue"] = {"Media Lengua"},
	["mug"] = {"Musgu"},
	["muh"] = {"Mündü"},
	["mui"] = {"Musi"},
	["muj"] = {"Mabire"},
	["muk"] = {"Mugom"},
	["mul"] = {"Multiple languages"},
	["mum"] = {"Maiwala"},
	["mun"] = {"Munda languages"},
	["muo"] = {"Nyong"},
	["mup"] = {"Malvi"},
	["muq"] = {"Eastern Xiangxi Miao"},
	["mur"] = {"Murle"},
	["mus"] = {"Creek"},
	["mut"] = {"Western Muria"},
	["muu"] = {"Yaaku"},
	["muv"] = {"Muthuvan"},
	["mux"] = {"Bo-Ung"},
	["muy"] = {"Muyang"},
	["muz"] = {"Mursi"},
	["mva"] = {"Manam"},
	["mvb"] = {"Mattole"},
	["mvd"] = {"Mamboru"},
	["mve"] = {"Marwari (Pakistan)"},
	["mvf"] = {"Peripheral Mongolian"},
	["mvg"] = {"Yucuañe Mixtec"},
	["mvh"] = {"Mulgi"},
	["mvi"] = {"Miyako"},
	["mvk"] = {"Mekmek"},
	["mvl"] = {"Mbara (Australia)"},
	["mvm"] = {"Muya"},
	["mvn"] = {"Minaveha"},
	["mvo"] = {"Marovo"},
	["mvp"] = {"Duri"},
	["mvq"] = {"Moere"},
	["mvr"] = {"Marau"},
	["mvs"] = {"Massep"},
	["mvt"] = {"Mpotovoro"},
	["mvu"] = {"Marfa"},
	["mvv"] = {"Tagal Murut"},
	["mvw"] = {"Machinga"},
	["mvx"] = {"Meoswar"},
	["mvy"] = {"Indus Kohistani"},
	["mvz"] = {"Mesqan"},
	["mwa"] = {"Mwatebu"},
	["mwb"] = {"Juwal"},
	["mwc"] = {"Are"},
	["mwe"] = {"Mwera (Chimwera)"},
	["mwf"] = {"Murrinh-Patha"},
	["mwg"] = {"Aiklep"},
	["mwh"] = {"Mouk-Aria"},
	["mwi"] = {"Labo", "Ninde"},
	["mwk"] = {"Kita Maninkakan"},
	["mwl"] = {"Mirandese"},
	["mwm"] = {"Sar"},
	["mwn"] = {"Nyamwanga"},
	["mwo"] = {"Central Maewo"},
	["mwp"] = {"Kala Lagaw Ya"},
	["mwq"] = {"Mün Chin"},
	["mwr"] = {"Marwari"},
	["mws"] = {"Mwimbi-Muthambi"},
	["mwt"] = {"Moken"},
	["mwu"] = {"Mittu"},
	["mwv"] = {"Mentawai"},
	["mww"] = {"Hmong Daw"},
	["mwz"] = {"Moingi"},
	["mxa"] = {"Northwest Oaxaca Mixtec"},
	["mxb"] = {"Tezoatlán Mixtec"},
	["mxc"] = {"Manyika"},
	["mxd"] = {"Modang"},
	["mxe"] = {"Mele-Fila"},
	["mxf"] = {"Malgbe"},
	["mxg"] = {"Mbangala"},
	["mxh"] = {"Mvuba"},
	["mxi"] = {"Mozarabic"},
	["mxj"] = {"Miju-Mishmi", "Geman Deng"},
	["mxk"] = {"Monumbo"},
	["mxl"] = {"Maxi Gbe"},
	["mxm"] = {"Meramera"},
	["mxn"] = {"Moi (Indonesia)"},
	["mxo"] = {"Mbowe"},
	["mxp"] = {"Tlahuitoltepec Mixe"},
	["mxq"] = {"Juquila Mixe"},
	["mxr"] = {"Murik (Malaysia)"},
	["mxs"] = {"Huitepec Mixtec"},
	["mxt"] = {"Jamiltepec Mixtec"},
	["mxu"] = {"Mada (Cameroon)"},
	["mxv"] = {"Metlatónoc Mixtec"},
	["mxw"] = {"Namo"},
	["mxx"] = {"Mahou", "Mawukakan"},
	["mxy"] = {"Southeastern Nochixtlán Mixtec"},
	["mxz"] = {"Central Masela"},
	["myb"] = {"Mbay"},
	["myc"] = {"Mayeka"},
	["mye"] = {"Myene"},
	["myf"] = {"Bambassi"},
	["myg"] = {"Manta"},
	["myh"] = {"Makah"},
	["myj"] = {"Mangayat"},
	["myk"] = {"Mamara Senoufo"},
	["myl"] = {"Moma"},
	["mym"] = {"Me'en"},
	["myn"] = {"Mayan languages"},
	["myo"] = {"Anfillo"},
	["myp"] = {"Pirahã"},
	["myr"] = {"Muniche"},
	["mys"] = {"Mesmes"},
	["myu"] = {"Mundurukú"},
	["myv"] = {"Erzya"},
	["myw"] = {"Muyuw"},
	["myx"] = {"Masaaba"},
	["myy"] = {"Macuna"},
	["myz"] = {"Classical Mandaic"},
	["mza"] = {"Santa María Zacatepec Mixtec"},
	["mzb"] = {"Tumzabt"},
	["mzc"] = {"Madagascar Sign Language"},
	["mzd"] = {"Malimba"},
	["mze"] = {"Morawa"},
	["mzg"] = {"Monastic Sign Language"},
	["mzh"] = {"Wichí Lhamtés Güisnay"},
	["mzi"] = {"Ixcatlán Mazatec"},
	["mzj"] = {"Manya"},
	["mzk"] = {"Nigeria Mambila"},
	["mzl"] = {"Mazatlán Mixe"},
	["mzm"] = {"Mumuye"},
	["mzn"] = {"Mazanderani"},
	["mzo"] = {"Matipuhy"},
	["mzp"] = {"Movima"},
	["mzq"] = {"Mori Atas"},
	["mzr"] = {"Marúbo"},
	["mzs"] = {"Macanese"},
	["mzt"] = {"Mintil"},
	["mzu"] = {"Inapang"},
	["mzv"] = {"Manza"},
	["mzw"] = {"Deg"},
	["mzx"] = {"Mawayana"},
	["mzy"] = {"Mozambican Sign Language"},
	["mzz"] = {"Maiadomu"},
	["naa"] = {"Namla"},
	["nab"] = {"Southern Nambikuára"},
	["nac"] = {"Narak"},
	["nae"] = {"Naka'ela"},
	["naf"] = {"Nabak"},
	["nag"] = {"Naga Pidgin"},
	["nah"] = {"Nahuatl languages"},
	["nai"] = {"North American Indian languages"},
	["naj"] = {"Nalu"},
	["nak"] = {"Nakanai"},
	["nal"] = {"Nalik"},
	["nam"] = {"Ngan'gityemerri"},
	["nan"] = {"Min Nan Chinese"},
	["nao"] = {"Naaba"},
	["nap"] = {"Neapolitan"},
	["naq"] = {"Khoekhoe", "Nama (Namibia)"},
	["nar"] = {"Iguta"},
	["nas"] = {"Naasioi"},
	["nat"] = {"Ca̱hungwa̱rya̱", "Hungworo"},
	["naw"] = {"Nawuri"},
	["nax"] = {"Nakwi"},
	["nay"] = {"Ngarrindjeri"},
	["naz"] = {"Coatepec Nahuatl"},
	["nba"] = {"Nyemba"},
	["nbb"] = {"Ndoe"},
	["nbc"] = {"Chang Naga"},
	["nbd"] = {"Ngbinda"},
	["nbe"] = {"Konyak Naga"},
	["nbg"] = {"Nagarchal"},
	["nbh"] = {"Ngamo"},
	["nbi"] = {"Mao Naga"},
	["nbj"] = {"Ngarinyman"},
	["nbk"] = {"Nake"},
	["nbm"] = {"Ngbaka Ma'bo"},
	["nbn"] = {"Kuri"},
	["nbo"] = {"Nkukoli"},
	["nbp"] = {"Nnam"},
	["nbq"] = {"Nggem"},
	["nbr"] = {"Numana"},
	["nbs"] = {"Namibian Sign Language"},
	["nbt"] = {"Na"},
	["nbu"] = {"Rongmei Naga"},
	["nbv"] = {"Ngamambo"},
	["nbw"] = {"Southern Ngbandi"},
	["nby"] = {"Ningera"},
	["nca"] = {"Iyo"},
	["ncb"] = {"Central Nicobarese"},
	["ncc"] = {"Ponam"},
	["ncd"] = {"Nachering"},
	["nce"] = {"Yale"},
	["ncf"] = {"Notsi"},
	["ncg"] = {"Nisga'a"},
	["nch"] = {"Central Huasteca Nahuatl"},
	["nci"] = {"Classical Nahuatl"},
	["ncj"] = {"Northern Puebla Nahuatl"},
	["nck"] = {"Na-kara"},
	["ncl"] = {"Michoacán Nahuatl"},
	["ncm"] = {"Nambo"},
	["ncn"] = {"Nauna"},
	["nco"] = {"Sibe"},
	["ncq"] = {"Northern Katang"},
	["ncr"] = {"Ncane"},
	["ncs"] = {"Nicaraguan Sign Language"},
	["nct"] = {"Chothe Naga"},
	["ncu"] = {"Chumburung"},
	["ncx"] = {"Central Puebla Nahuatl"},
	["ncz"] = {"Natchez"},
	["nda"] = {"Ndasa"},
	["ndb"] = {"Kenswei Nsei"},
	["ndc"] = {"Ndau"},
	["ndd"] = {"Nde-Nsele-Nta"},
	["ndf"] = {"Nadruvian"},
	["ndg"] = {"Ndengereko"},
	["ndh"] = {"Ndali"},
	["ndi"] = {"Samba Leko"},
	["ndj"] = {"Ndamba"},
	["ndk"] = {"Ndaka"},
	["ndl"] = {"Ndolo"},
	["ndm"] = {"Ndam"},
	["ndn"] = {"Ngundi"},
	["ndp"] = {"Ndo"},
	["ndq"] = {"Ndombe"},
	["ndr"] = {"Ndoola"},
	["nds"] = {"Low German", "Low Saxon"},
	["ndt"] = {"Ndunga"},
	["ndu"] = {"Dugun"},
	["ndv"] = {"Ndut"},
	["ndw"] = {"Ndobo"},
	["ndx"] = {"Nduga"},
	["ndy"] = {"Lutos"},
	["ndz"] = {"Ndogo"},
	["nea"] = {"Eastern Ngad'a"},
	["neb"] = {"Toura (Côte d'Ivoire)"},
	["nec"] = {"Nedebang"},
	["ned"] = {"Nde-Gbite"},
	["nee"] = {"Nêlêmwa-Nixumwak"},
	["nef"] = {"Nefamese"},
	["neg"] = {"Negidal"},
	["neh"] = {"Nyenkha"},
	["nei"] = {"Neo-Hittite"},
	["nej"] = {"Neko"},
	["nek"] = {"Neku"},
	["nem"] = {"Nemi"},
	["nen"] = {"Nengone"},
	["neo"] = {"Ná-Meo"},
	["neq"] = {"North Central Mixe"},
	["ner"] = {"Yahadian"},
	["nes"] = {"Bhoti Kinnauri"},
	["net"] = {"Nete"},
	["neu"] = {"Neo"},
	["nev"] = {"Nyaheun"},
	["new"] = {"Newari", "Nepal Bhasa"},
	["nex"] = {"Neme"},
	["ney"] = {"Neyo"},
	["nez"] = {"Nez Perce"},
	["nfa"] = {"Dhao"},
	["nfd"] = {"Ahwai"},
	["nfl"] = {"Ayiwo", "Äiwoo"},
	["nfr"] = {"Nafaanra"},
	["nfu"] = {"Mfumte"},
	["nga"] = {"Ngbaka"},
	["ngb"] = {"Northern Ngbandi"},
	["ngc"] = {"Ngombe (Democratic Republic of Congo)"},
	["ngd"] = {"Ngando (Central African Republic)"},
	["nge"] = {"Ngemba"},
	["ngf"] = {"Trans-New Guinea languages"},
	["ngg"] = {"Ngbaka Manza"},
	["ngh"] = {"Nǁng"},
	["ngi"] = {"Ngizim"},
	["ngj"] = {"Ngie"},
	["ngk"] = {"Dalabon"},
	["ngl"] = {"Lomwe"},
	["ngm"] = {"Ngatik Men's Creole"},
	["ngn"] = {"Ngwo"},
	["ngo"] = {"Ngoni"},
	["ngp"] = {"Ngulu"},
	["ngq"] = {"Ngurimi", "Ngoreme"},
	["ngr"] = {"Engdewu"},
	["ngs"] = {"Gvoko"},
	["ngt"] = {"Kriang", "Ngeq"},
	["ngu"] = {"Guerrero Nahuatl"},
	["ngv"] = {"Nagumi"},
	["ngw"] = {"Ngwaba"},
	["ngx"] = {"Nggwahyi"},
	["ngy"] = {"Tibea"},
	["ngz"] = {"Ngungwel"},
	["nha"] = {"Nhanda"},
	["nhb"] = {"Beng"},
	["nhc"] = {"Tabasco Nahuatl"},
	["nhd"] = {"Chiripá", "Ava Guaraní"},
	["nhe"] = {"Eastern Huasteca Nahuatl"},
	["nhf"] = {"Nhuwala"},
	["nhg"] = {"Tetelcingo Nahuatl"},
	["nhh"] = {"Nahari"},
	["nhi"] = {"Zacatlán-Ahuacatlán-Tepetzintla Nahuatl"},
	["nhk"] = {"Isthmus-Cosoleacaque Nahuatl"},
	["nhm"] = {"Morelos Nahuatl"},
	["nhn"] = {"Central Nahuatl"},
	["nho"] = {"Takuu"},
	["nhp"] = {"Isthmus-Pajapan Nahuatl"},
	["nhq"] = {"Huaxcaleca Nahuatl"},
	["nhr"] = {"Naro"},
	["nht"] = {"Ometepec Nahuatl"},
	["nhu"] = {"Noone"},
	["nhv"] = {"Temascaltepec Nahuatl"},
	["nhw"] = {"Western Huasteca Nahuatl"},
	["nhx"] = {"Isthmus-Mecayapan Nahuatl"},
	["nhy"] = {"Northern Oaxaca Nahuatl"},
	["nhz"] = {"Santa María La Alta Nahuatl"},
	["nia"] = {"Nias"},
	["nib"] = {"Nakame"},
	["nic"] = {"Niger-Kordofanian languages"},
	["nid"] = {"Ngandi"},
	["nie"] = {"Niellim"},
	["nif"] = {"Nek"},
	["nig"] = {"Ngalakgan"},
	["nih"] = {"Nyiha (Tanzania)"},
	["nii"] = {"Nii"},
	["nij"] = {"Ngaju"},
	["nik"] = {"Southern Nicobarese"},
	["nil"] = {"Nila"},
	["nim"] = {"Nilamba"},
	["nin"] = {"Ninzo"},
	["nio"] = {"Nganasan"},
	["niq"] = {"Nandi"},
	["nir"] = {"Nimboran"},
	["nis"] = {"Nimi"},
	["nit"] = {"Southeastern Kolami"},
	["niu"] = {"Niuean"},
	["niv"] = {"Gilyak"},
	["niw"] = {"Nimo"},
	["nix"] = {"Hema"},
	["niy"] = {"Ngiti"},
	["niz"] = {"Ningil"},
	["nja"] = {"Nzanyi"},
	["njb"] = {"Nocte Naga"},
	["njd"] = {"Ndonde Hamba"},
	["njh"] = {"Lotha Naga"},
	["nji"] = {"Gudanji"},
	["njj"] = {"Njen"},
	["njl"] = {"Njalgulgule"},
	["njm"] = {"Angami Naga"},
	["njn"] = {"Liangmai Naga"},
	["njo"] = {"Ao Naga"},
	["njr"] = {"Njerep"},
	["njs"] = {"Nisa"},
	["njt"] = {"Ndyuka-Trio Pidgin"},
	["nju"] = {"Ngadjunmaya"},
	["njx"] = {"Kunyi"},
	["njy"] = {"Njyem"},
	["njz"] = {"Nyishi"},
	["nka"] = {"Nkoya"},
	["nkb"] = {"Khoibu Naga"},
	["nkc"] = {"Nkongho"},
	["nkd"] = {"Koireng"},
	["nke"] = {"Duke"},
	["nkf"] = {"Inpui Naga"},
	["nkg"] = {"Nekgini"},
	["nkh"] = {"Khezha Naga"},
	["nki"] = {"Thangal Naga"},
	["nkj"] = {"Nakai"},
	["nkk"] = {"Nokuku"},
	["nkm"] = {"Namat"},
	["nkn"] = {"Nkangala"},
	["nko"] = {"Nkonya"},
	["nkp"] = {"Niuatoputapu"},
	["nkq"] = {"Nkami"},
	["nkr"] = {"Nukuoro"},
	["nks"] = {"North Asmat"},
	["nkt"] = {"Nyika (Tanzania)"},
	["nku"] = {"Bouna Kulango"},
	["nkv"] = {"Nyika (Malawi and Zambia)"},
	["nkw"] = {"Nkutu"},
	["nkx"] = {"Nkoroo"},
	["nkz"] = {"Nkari"},
	["nla"] = {"Ngombale"},
	["nlc"] = {"Nalca"},
	["nle"] = {"East Nyala"},
	["nlg"] = {"Gela"},
	["nli"] = {"Grangali"},
	["nlj"] = {"Nyali"},
	["nlk"] = {"Ninia Yali"},
	["nll"] = {"Nihali"},
	["nlm"] = {"Mankiyali"},
	["nlo"] = {"Ngul"},
	["nlq"] = {"Lao Naga"},
	["nlu"] = {"Nchumbulu"},
	["nlv"] = {"Orizaba Nahuatl"},
	["nlw"] = {"Walangama"},
	["nlx"] = {"Nahali"},
	["nly"] = {"Nyamal"},
	["nlz"] = {"Nalögo"},
	["nma"] = {"Maram Naga"},
	["nmb"] = {"Big Nambas", "V'ënen Taut"},
	["nmc"] = {"Ngam"},
	["nmd"] = {"Ndumu"},
	["nme"] = {"Mzieme Naga"},
	["nmf"] = {"Tangkhul Naga (India)"},
	["nmg"] = {"Kwasio"},
	["nmh"] = {"Monsang Naga"},
	["nmi"] = {"Nyam"},
	["nmj"] = {"Ngombe (Central African Republic)"},
	["nmk"] = {"Namakura"},
	["nml"] = {"Ndemli"},
	["nmm"] = {"Manangba"},
	["nmn"] = {"ǃXóõ"},
	["nmo"] = {"Moyon Naga"},
	["nmp"] = {"Nimanbur"},
	["nmq"] = {"Nambya"},
	["nmr"] = {"Nimbari"},
	["nms"] = {"Letemboi"},
	["nmt"] = {"Namonuito"},
	["nmu"] = {"Northeast Maidu"},
	["nmv"] = {"Ngamini"},
	["nmw"] = {"Nimoa", "Rifao"},
	["nmx"] = {"Nama (Papua New Guinea)"},
	["nmy"] = {"Namuyi"},
	["nmz"] = {"Nawdm"},
	["nna"] = {"Nyangumarta"},
	["nnb"] = {"Nande"},
	["nnc"] = {"Nancere"},
	["nnd"] = {"West Ambae"},
	["nne"] = {"Ngandyera"},
	["nnf"] = {"Ngaing"},
	["nng"] = {"Maring Naga"},
	["nnh"] = {"Ngiemboon"},
	["nni"] = {"North Nuaulu"},
	["nnj"] = {"Nyangatom"},
	["nnk"] = {"Nankina"},
	["nnl"] = {"Northern Rengma Naga"},
	["nnm"] = {"Namia"},
	["nnn"] = {"Ngete"},
	["nnp"] = {"Wancho Naga"},
	["nnq"] = {"Ngindo"},
	["nnr"] = {"Narungga"},
	["nnt"] = {"Nanticoke"},
	["nnu"] = {"Dwang"},
	["nnv"] = {"Nugunu (Australia)"},
	["nnw"] = {"Southern Nuni"},
	["nny"] = {"Nyangga"},
	["nnz"] = {"Nda'nda'"},
	["noa"] = {"Woun Meu"},
	["noc"] = {"Nuk"},
	["nod"] = {"Northern Thai"},
	["noe"] = {"Nimadi"},
	["nof"] = {"Nomane"},
	["nog"] = {"Nogai"},
	["noh"] = {"Nomu"},
	["noi"] = {"Noiri"},
	["noj"] = {"Nonuya"},
	["nok"] = {"Nooksack"},
	["nol"] = {"Nomlaki"},
	["nom"] = {"Nocamán"},
	["non"] = {"Old Norse"},
	["nop"] = {"Numanggang"},
	["noq"] = {"Ngongo"},
	["nos"] = {"Eastern Nisu"},
	["not"] = {"Nomatsiguenga"},
	["nou"] = {"Ewage-Notu"},
	["nov"] = {"Novial"},
	["now"] = {"Nyambo"},
	["noy"] = {"Noy"},
	["noz"] = {"Nayi"},
	["npa"] = {"Nar Phu"},
	["npb"] = {"Nupbikha"},
	["npg"] = {"Ponyo-Gongwang Naga"},
	["nph"] = {"Phom Naga"},
	["npi"] = {"Nepali (individual language)"},
	["npl"] = {"Southeastern Puebla Nahuatl"},
	["npn"] = {"Mondropolon"},
	["npo"] = {"Pochuri Naga"},
	["nps"] = {"Nipsan"},
	["npu"] = {"Puimei Naga"},
	["npx"] = {"Noipx"},
	["npy"] = {"Napu"},
	["nqg"] = {"Southern Nago"},
	["nqk"] = {"Kura Ede Nago"},
	["nql"] = {"Ngendelengo"},
	["nqm"] = {"Ndom"},
	["nqn"] = {"Nen"},
	["nqo"] = {"N'Ko", "N’Ko"},
	["nqq"] = {"Kyan-Karyaw Naga"},
	["nqy"] = {"Akyaung Ari Naga"},
	["nra"] = {"Ngom"},
	["nrb"] = {"Nara"},
	["nrc"] = {"Noric"},
	["nre"] = {"Southern Rengma Naga"},
	["nrf"] = {"Jèrriais", "Guernésiais"},
	["nrg"] = {"Narango"},
	["nri"] = {"Chokri Naga"},
	["nrk"] = {"Ngarla"},
	["nrl"] = {"Ngarluma"},
	["nrm"] = {"Narom"},
	["nrn"] = {"Norn"},
	["nrp"] = {"North Picene"},
	["nrr"] = {"Norra", "Nora"},
	["nrt"] = {"Northern Kalapuya"},
	["nru"] = {"Narua"},
	["nrx"] = {"Ngurmbur"},
	["nrz"] = {"Lala"},
	["nsa"] = {"Sangtam Naga"},
	["nsc"] = {"Nshi"},
	["nsd"] = {"Southern Nisu"},
	["nse"] = {"Nsenga"},
	["nsf"] = {"Northwestern Nisu"},
	["nsg"] = {"Ngasa"},
	["nsh"] = {"Ngoshie"},
	["nsi"] = {"Nigerian Sign Language"},
	["nsk"] = {"Naskapi"},
	["nsl"] = {"Norwegian Sign Language"},
	["nsm"] = {"Sumi Naga"},
	["nsn"] = {"Nehan"},
	["nso"] = {"Pedi", "Northern Sotho", "Sepedi"},
	["nsp"] = {"Nepalese Sign Language"},
	["nsq"] = {"Northern Sierra Miwok"},
	["nsr"] = {"Maritime Sign Language"},
	["nss"] = {"Nali"},
	["nst"] = {"Tase Naga"},
	["nsu"] = {"Sierra Negra Nahuatl"},
	["nsv"] = {"Southwestern Nisu"},
	["nsw"] = {"Navut"},
	["nsx"] = {"Nsongo"},
	["nsy"] = {"Nasal"},
	["nsz"] = {"Nisenan"},
	["ntd"] = {"Northern Tidung"},
	["nte"] = {"Nathembo"},
	["ntg"] = {"Ngantangarra"},
	["nti"] = {"Natioro"},
	["ntj"] = {"Ngaanyatjarra"},
	["ntk"] = {"Ikoma-Nata-Isenye"},
	["ntm"] = {"Nateni"},
	["nto"] = {"Ntomba"},
	["ntp"] = {"Northern Tepehuan"},
	["ntr"] = {"Delo"},
	["ntu"] = {"Natügu"},
	["ntw"] = {"Nottoway"},
	["ntx"] = {"Tangkhul Naga (Myanmar)"},
	["nty"] = {"Mantsi"},
	["ntz"] = {"Natanzi"},
	["nua"] = {"Yuanga"},
	["nub"] = {"Nubian languages"},
	["nuc"] = {"Nukuini"},
	["nud"] = {"Ngala"},
	["nue"] = {"Ngundu"},
	["nuf"] = {"Nusu"},
	["nug"] = {"Nungali"},
	["nuh"] = {"Ndunda"},
	["nui"] = {"Ngumbi"},
	["nuj"] = {"Nyole"},
	["nuk"] = {"Nuu-chah-nulth", "Nuuchahnulth"},
	["nul"] = {"Nusa Laut"},
	["num"] = {"Niuafo'ou"},
	["nun"] = {"Anong"},
	["nuo"] = {"Nguôn"},
	["nup"] = {"Nupe-Nupe-Tako"},
	["nuq"] = {"Nukumanu"},
	["nur"] = {"Nukuria"},
	["nus"] = {"Nuer"},
	["nut"] = {"Nung (Viet Nam)"},
	["nuu"] = {"Ngbundu"},
	["nuv"] = {"Northern Nuni"},
	["nuw"] = {"Nguluwan"},
	["nux"] = {"Mehek"},
	["nuy"] = {"Nunggubuyu"},
	["nuz"] = {"Tlamacazapa Nahuatl"},
	["nvh"] = {"Nasarian"},
	["nvm"] = {"Namiae"},
	["nvo"] = {"Nyokon"},
	["nwa"] = {"Nawathinehena"},
	["nwb"] = {"Nyabwa"},
	["nwc"] = {"Classical Newari", "Classical Nepal Bhasa", "Old Newari"},
	["nwe"] = {"Ngwe"},
	["nwg"] = {"Ngayawung"},
	["nwi"] = {"Southwest Tanna"},
	["nwm"] = {"Nyamusa-Molo"},
	["nwo"] = {"Nauo"},
	["nwr"] = {"Nawaru"},
	["nwx"] = {"Middle Newar"},
	["nwy"] = {"Nottoway-Meherrin"},
	["nxa"] = {"Nauete"},
	["nxd"] = {"Ngando (Democratic Republic of Congo)"},
	["nxe"] = {"Nage"},
	["nxg"] = {"Ngad'a"},
	["nxi"] = {"Nindi"},
	["nxk"] = {"Koki Naga"},
	["nxl"] = {"South Nuaulu"},
	["nxm"] = {"Numidian"},
	["nxn"] = {"Ngawun"},
	["nxo"] = {"Ndambomo"},
	["nxq"] = {"Naxi"},
	["nxr"] = {"Ninggerum"},
	["nxu"] = {"Narau"},
	["nxx"] = {"Nafri"},
	["nyb"] = {"Nyangbo"},
	["nyc"] = {"Nyanga-li"},
	["nyd"] = {"Nyore", "Olunyole"},
	["nye"] = {"Nyengo"},
	["nyf"] = {"Giryama", "Kigiryama"},
	["nyg"] = {"Nyindu"},
	["nyh"] = {"Nyikina"},
	["nyi"] = {"Ama (Sudan)"},
	["nyj"] = {"Nyanga"},
	["nyk"] = {"Nyaneka"},
	["nyl"] = {"Nyeu"},
	["nym"] = {"Nyamwezi"},
	["nyn"] = {"Nyankole"},
	["nyo"] = {"Nyoro"},
	["nyp"] = {"Nyang'i"},
	["nyq"] = {"Nayini"},
	["nyr"] = {"Nyiha (Malawi)"},
	["nys"] = {"Nyungar"},
	["nyt"] = {"Nyawaygi"},
	["nyu"] = {"Nyungwe"},
	["nyv"] = {"Nyulnyul"},
	["nyw"] = {"Nyaw"},
	["nyx"] = {"Nganyaywana"},
	["nyy"] = {"Nyakyusa-Ngonde"},
	["nza"] = {"Tigon Mbembe"},
	["nzb"] = {"Njebi"},
	["nzd"] = {"Nzadi"},
	["nzi"] = {"Nzima"},
	["nzk"] = {"Nzakara"},
	["nzm"] = {"Zeme Naga"},
	["nzs"] = {"New Zealand Sign Language"},
	["nzu"] = {"Teke-Nzikou"},
	["nzy"] = {"Nzakambay"},
	["nzz"] = {"Nanga Dama Dogon"},
	["oaa"] = {"Orok"},
	["oac"] = {"Oroch"},
	["oar"] = {"Old Aramaic (up to 700 BCE)", "Ancient Aramaic (up to 700 BCE)"},
	["oav"] = {"Old Avar"},
	["obi"] = {"Obispeño"},
	["obk"] = {"Southern Bontok"},
	["obl"] = {"Oblo"},
	["obm"] = {"Moabite"},
	["obo"] = {"Obo Manobo"},
	["obr"] = {"Old Burmese"},
	["obt"] = {"Old Breton"},
	["obu"] = {"Obulom"},
	["oca"] = {"Ocaina"},
	["och"] = {"Old Chinese"},
	["oco"] = {"Old Cornish"},
	["ocu"] = {"Atzingo Matlatzinca"},
	["oda"] = {"Odut"},
	["odk"] = {"Od"},
	["odt"] = {"Old Dutch"},
	["odu"] = {"Odual"},
	["ofo"] = {"Ofo"},
	["ofs"] = {"Old Frisian"},
	["ofu"] = {"Efutop"},
	["ogb"] = {"Ogbia"},
	["ogc"] = {"Ogbah"},
	["oge"] = {"Old Georgian"},
	["ogg"] = {"Ogbogolo"},
	["ogo"] = {"Khana"},
	["ogu"] = {"Ogbronuagum"},
	["oht"] = {"Old Hittite"},
	["ohu"] = {"Old Hungarian"},
	["oia"] = {"Oirata"},
	["oin"] = {"Inebu One"},
	["ojb"] = {"Northwestern Ojibwa"},
	["ojc"] = {"Central Ojibwa"},
	["ojg"] = {"Eastern Ojibwa"},
	["ojp"] = {"Old Japanese"},
	["ojs"] = {"Severn Ojibwa"},
	["ojv"] = {"Ontong Java"},
	["ojw"] = {"Western Ojibwa"},
	["oka"] = {"Okanagan"},
	["okb"] = {"Okobo"},
	["okd"] = {"Okodia"},
	["oke"] = {"Okpe (Southwestern Edo)"},
	["okg"] = {"Koko Babangk"},
	["okh"] = {"Koresh-e Rostam"},
	["oki"] = {"Okiek"},
	["okj"] = {"Oko-Juwoi"},
	["okk"] = {"Kwamtim One"},
	["okl"] = {"Old Kentish Sign Language"},
	["okm"] = {"Middle Korean (10th-16th cent.)"},
	["okn"] = {"Oki-No-Erabu"},
	["oko"] = {"Old Korean (3rd-9th cent.)"},
	["okr"] = {"Kirike"},
	["oks"] = {"Oko-Eni-Osayen"},
	["oku"] = {"Oku"},
	["okv"] = {"Orokaiva"},
	["okx"] = {"Okpe (Northwestern Edo)"},
	["ola"] = {"Walungge"},
	["old"] = {"Mochi"},
	["ole"] = {"Olekha"},
	["olk"] = {"Olkol"},
	["olm"] = {"Oloma"},
	["olo"] = {"Livvi"},
	["olr"] = {"Olrat"},
	["olt"] = {"Old Lithuanian"},
	["olu"] = {"Kuvale"},
	["oma"] = {"Omaha-Ponca"},
	["omb"] = {"East Ambae"},
	["omc"] = {"Mochica"},
	["omg"] = {"Omagua"},
	["omi"] = {"Omi"},
	["omk"] = {"Omok"},
	["oml"] = {"Ombo"},
	["omn"] = {"Minoan"},
	["omo"] = {"Utarmbung"},
	["omp"] = {"Old Manipuri"},
	["omq"] = {"Oto-Manguean languages"},
	["omr"] = {"Old Marathi"},
	["omt"] = {"Omotik"},
	["omu"] = {"Omurano"},
	["omv"] = {"Omotic languages"},
	["omw"] = {"South Tairora"},
	["omx"] = {"Old Mon"},
	["ona"] = {"Ona"},
	["onb"] = {"Lingao"},
	["one"] = {"Oneida"},
	["ong"] = {"Olo"},
	["oni"] = {"Onin"},
	["onj"] = {"Onjob"},
	["onk"] = {"Kabore One"},
	["onn"] = {"Onobasulu"},
	["ono"] = {"Onondaga"},
	["onp"] = {"Sartang"},
	["onr"] = {"Northern One"},
	["ons"] = {"Ono"},
	["ont"] = {"Ontenu"},
	["onu"] = {"Unua"},
	["onw"] = {"Old Nubian"},
	["onx"] = {"Onin Based Pidgin"},
	["ood"] = {"Tohono O'odham"},
	["oog"] = {"Ong"},
	["oon"] = {"Önge"},
	["oor"] = {"Oorlams"},
	["oos"] = {"Old Ossetic"},
	["opa"] = {"Okpamheri"},
	["opk"] = {"Kopkaka"},
	["opm"] = {"Oksapmin"},
	["opo"] = {"Opao"},
	["opt"] = {"Opata"},
	["opy"] = {"Ofayé"},
	["ora"] = {"Oroha"},
	["orc"] = {"Orma"},
	["ore"] = {"Orejón"},
	["org"] = {"Oring"},
	["orh"] = {"Oroqen"},
	["orn"] = {"Orang Kanaq"},
	["oro"] = {"Orokolo"},
	["orr"] = {"Oruma"},
	["ors"] = {"Orang Seletar"},
	["ort"] = {"Adivasi Oriya"},
	["oru"] = {"Ormuri"},
	["orv"] = {"Old Russian"},
	["orw"] = {"Oro Win"},
	["orx"] = {"Oro"},
	["ory"] = {"Odia (individual language)", "Oriya (individual language)"},
	["orz"] = {"Ormu"},
	["osa"] = {"Osage"},
	["osc"] = {"Oscan"},
	["osi"] = {"Osing"},
	["oso"] = {"Ososo"},
	["osp"] = {"Old Spanish"},
	["ost"] = {"Osatu"},
	["osu"] = {"Southern One"},
	["osx"] = {"Old Saxon"},
	["ota"] = {"Ottoman Turkish (1500-1928)"},
	["otb"] = {"Old Tibetan"},
	["otd"] = {"Ot Danum"},
	["ote"] = {"Mezquital Otomi"},
	["oti"] = {"Oti"},
	["otk"] = {"Old Turkish"},
	["otl"] = {"Tilapa Otomi"},
	["otm"] = {"Eastern Highland Otomi"},
	["otn"] = {"Tenango Otomi"},
	["oto"] = {"Otomian languages"},
	["otq"] = {"Querétaro Otomi"},
	["otr"] = {"Otoro"},
	["ots"] = {"Estado de México Otomi"},
	["ott"] = {"Temoaya Otomi"},
	["otu"] = {"Otuke"},
	["otw"] = {"Ottawa"},
	["otx"] = {"Texcatepec Otomi"},
	["oty"] = {"Old Tamil"},
	["otz"] = {"Ixtenco Otomi"},
	["oua"] = {"Tagargrent"},
	["oub"] = {"Glio-Oubi"},
	["oue"] = {"Oune"},
	["oui"] = {"Old Uighur"},
	["oum"] = {"Ouma"},
	["ovd"] = {"Elfdalian", "Övdalian"},
	["owi"] = {"Owiniga"},
	["owl"] = {"Old Welsh"},
	["oyb"] = {"Oy"},
	["oyd"] = {"Oyda"},
	["oym"] = {"Wayampi"},
	["oyy"] = {"Oya'oya"},
	["ozm"] = {"Koonzime"},
	["paa"] = {"Papuan languages"},
	["pab"] = {"Parecís"},
	["pac"] = {"Pacoh"},
	["pad"] = {"Paumarí"},
	["pae"] = {"Pagibete"},
	["paf"] = {"Paranawát"},
	["pag"] = {"Pangasinan"},
	["pah"] = {"Tenharim"},
	["pai"] = {"Pe"},
	["pak"] = {"Parakanã"},
	["pal"] = {"Pahlavi"},
	["pam"] = {"Pampanga", "Kapampangan"},
	["pao"] = {"Northern Paiute"},
	["pap"] = {"Papiamento"},
	["paq"] = {"Parya"},
	["par"] = {"Panamint", "Timbisha"},
	["pas"] = {"Papasena"},
	["pat"] = {"Papitalai"},
	["pau"] = {"Palauan"},
	["pav"] = {"Pakaásnovos"},
	["paw"] = {"Pawnee"},
	["pax"] = {"Pankararé"},
	["pay"] = {"Pech"},
	["paz"] = {"Pankararú"},
	["pbb"] = {"Páez"},
	["pbc"] = {"Patamona"},
	["pbe"] = {"Mezontla Popoloca"},
	["pbf"] = {"Coyotepec Popoloca"},
	["pbg"] = {"Paraujano"},
	["pbh"] = {"E'ñapa Woromaipu"},
	["pbi"] = {"Parkwa"},
	["pbl"] = {"Mak (Nigeria)"},
	["pbm"] = {"Puebla Mazatec"},
	["pbn"] = {"Kpasam"},
	["pbo"] = {"Papel"},
	["pbp"] = {"Badyara"},
	["pbr"] = {"Pangwa"},
	["pbs"] = {"Central Pame"},
	["pbt"] = {"Southern Pashto"},
	["pbu"] = {"Northern Pashto"},
	["pbv"] = {"Pnar"},
	["pby"] = {"Pyu (Papua New Guinea)"},
	["pca"] = {"Santa Inés Ahuatempan Popoloca"},
	["pcb"] = {"Pear"},
	["pcc"] = {"Bouyei"},
	["pcd"] = {"Picard"},
	["pce"] = {"Ruching Palaung"},
	["pcf"] = {"Paliyan"},
	["pcg"] = {"Paniya"},
	["pch"] = {"Pardhan"},
	["pci"] = {"Duruwa"},
	["pcj"] = {"Parenga"},
	["pck"] = {"Paite Chin"},
	["pcl"] = {"Pardhi"},
	["pcm"] = {"Nigerian Pidgin"},
	["pcn"] = {"Piti"},
	["pcp"] = {"Pacahuara"},
	["pcw"] = {"Pyapun"},
	["pda"] = {"Anam"},
	["pdc"] = {"Pennsylvania German"},
	["pdi"] = {"Pa Di"},
	["pdn"] = {"Podena", "Fedan"},
	["pdo"] = {"Padoe"},
	["pdt"] = {"Plautdietsch"},
	["pdu"] = {"Kayan"},
	["pea"] = {"Peranakan Indonesian"},
	["peb"] = {"Eastern Pomo"},
	["ped"] = {"Mala (Papua New Guinea)"},
	["pee"] = {"Taje"},
	["pef"] = {"Northeastern Pomo"},
	["peg"] = {"Pengo"},
	["peh"] = {"Bonan"},
	["pei"] = {"Chichimeca-Jonaz"},
	["pej"] = {"Northern Pomo"},
	["pek"] = {"Penchal"},
	["pel"] = {"Pekal"},
	["pem"] = {"Phende"},
	["peo"] = {"Old Persian (ca. 600-400 B.C.)"},
	["pep"] = {"Kunja"},
	["peq"] = {"Southern Pomo"},
	["pes"] = {"Iranian Persian"},
	["pev"] = {"Pémono"},
	["pex"] = {"Petats"},
	["pey"] = {"Petjo"},
	["pez"] = {"Eastern Penan"},
	["pfa"] = {"Pááfang"},
	["pfe"] = {"Peere"},
	["pfl"] = {"Pfaelzisch"},
	["pga"] = {"Sudanese Creole Arabic"},
	["pgd"] = {"Gāndhārī"},
	["pgg"] = {"Pangwali"},
	["pgi"] = {"Pagi"},
	["pgk"] = {"Rerep"},
	["pgl"] = {"Primitive Irish"},
	["pgn"] = {"Paelignian"},
	["pgs"] = {"Pangseng"},
	["pgu"] = {"Pagu"},
	["pgz"] = {"Papua New Guinean Sign Language"},
	["pha"] = {"Pa-Hng"},
	["phd"] = {"Phudagi"},
	["phg"] = {"Phuong"},
	["phh"] = {"Phukha"},
	["phi"] = {"Philippine languages"},
	["phk"] = {"Phake"},
	["phl"] = {"Phalura", "Palula"},
	["phm"] = {"Phimbi"},
	["phn"] = {"Phoenician"},
	["pho"] = {"Phunoi"},
	["phq"] = {"Phana'"},
	["phr"] = {"Pahari-Potwari"},
	["pht"] = {"Phu Thai"},
	["phu"] = {"Phuan"},
	["phv"] = {"Pahlavani"},
	["phw"] = {"Phangduwali"},
	["pia"] = {"Pima Bajo"},
	["pib"] = {"Yine"},
	["pic"] = {"Pinji"},
	["pid"] = {"Piaroa"},
	["pie"] = {"Piro"},
	["pif"] = {"Pingelapese"},
	["pig"] = {"Pisabo"},
	["pih"] = {"Pitcairn-Norfolk"},
	["pii"] = {"Pini"},
	["pij"] = {"Pijao"},
	["pil"] = {"Yom"},
	["pim"] = {"Powhatan"},
	["pin"] = {"Piame"},
	["pio"] = {"Piapoco"},
	["pip"] = {"Pero"},
	["pir"] = {"Piratapuyo"},
	["pis"] = {"Pijin"},
	["pit"] = {"Pitta Pitta"},
	["piu"] = {"Pintupi-Luritja"},
	["piv"] = {"Pileni", "Vaeakau-Taumako"},
	["piw"] = {"Pimbwe"},
	["pix"] = {"Piu"},
	["piy"] = {"Piya-Kwonci"},
	["piz"] = {"Pije"},
	["pjt"] = {"Pitjantjatjara"},
	["pka"] = {"Ardhamāgadhī Prākrit"},
	["pkb"] = {"Pokomo", "Kipfokomo"},
	["pkc"] = {"Paekche"},
	["pkg"] = {"Pak-Tong"},
	["pkh"] = {"Pankhu"},
	["pkn"] = {"Pakanha"},
	["pko"] = {"Pökoot"},
	["pkp"] = {"Pukapuka"},
	["pkr"] = {"Attapady Kurumba"},
	["pks"] = {"Pakistan Sign Language"},
	["pkt"] = {"Maleng"},
	["pku"] = {"Paku"},
	["pla"] = {"Miani"},
	["plb"] = {"Polonombauk"},
	["plc"] = {"Central Palawano"},
	["pld"] = {"Polari"},
	["ple"] = {"Palu'e"},
	["plf"] = {"Central Malayo-Polynesian languages"},
	["plg"] = {"Pilagá"},
	["plh"] = {"Paulohi"},
	["plj"] = {"Polci"},
	["plk"] = {"Kohistani Shina"},
	["pll"] = {"Shwe Palaung"},
	["pln"] = {"Palenquero"},
	["plo"] = {"Oluta Popoluca"},
	["plp"] = {"Palpa"},
	["plq"] = {"Palaic"},
	["plr"] = {"Palaka Senoufo"},
	["pls"] = {"San Marcos Tlacoyalco Popoloca", "San Marcos Tlalcoyalco Popoloca"},
	["plt"] = {"Plateau Malagasy"},
	["plu"] = {"Palikúr"},
	["plv"] = {"Southwest Palawano"},
	["plw"] = {"Brooke's Point Palawano"},
	["ply"] = {"Bolyu"},
	["plz"] = {"Paluan"},
	["pma"] = {"Paama"},
	["pmb"] = {"Pambia"},
	["pmd"] = {"Pallanganmiddang"},
	["pme"] = {"Pwaamei"},
	["pmf"] = {"Pamona"},
	["pmh"] = {"Māhārāṣṭri Prākrit"},
	["pmi"] = {"Northern Pumi"},
	["pmj"] = {"Southern Pumi"},
	["pmk"] = {"Pamlico"},
	["pml"] = {"Lingua Franca"},
	["pmm"] = {"Pomo"},
	["pmn"] = {"Pam"},
	["pmo"] = {"Pom"},
	["pmq"] = {"Northern Pame"},
	["pmr"] = {"Paynamar"},
	["pms"] = {"Piemontese"},
	["pmt"] = {"Tuamotuan"},
	["pmw"] = {"Plains Miwok"},
	["pmx"] = {"Poumei Naga"},
	["pmy"] = {"Papuan Malay"},
	["pmz"] = {"Southern Pame"},
	["pna"] = {"Punan Bah-Biau"},
	["pnb"] = {"Western Panjabi"},
	["pnc"] = {"Pannei"},
	["pnd"] = {"Mpinda"},
	["pne"] = {"Western Penan"},
	["png"] = {"Pongu"},
	["pnh"] = {"Penrhyn"},
	["pni"] = {"Aoheng"},
	["pnj"] = {"Pinjarup"},
	["pnk"] = {"Paunaka"},
	["pnl"] = {"Paleni"},
	["pnm"] = {"Punan Batu 1"},
	["pnn"] = {"Pinai-Hagahai"},
	["pno"] = {"Panobo"},
	["pnp"] = {"Pancana"},
	["pnq"] = {"Pana (Burkina Faso)"},
	["pnr"] = {"Panim"},
	["pns"] = {"Ponosakan"},
	["pnt"] = {"Pontic"},
	["pnu"] = {"Jiongnai Bunu"},
	["pnv"] = {"Pinigura"},
	["pnw"] = {"Banyjima", "Panytyima"},
	["pnx"] = {"Phong-Kniang"},
	["pny"] = {"Pinyin"},
	["pnz"] = {"Pana (Central African Republic)"},
	["poc"] = {"Poqomam"},
	["poe"] = {"San Juan Atzingo Popoloca"},
	["pof"] = {"Poke"},
	["pog"] = {"Potiguára"},
	["poh"] = {"Poqomchi'"},
	["poi"] = {"Highland Popoluca"},
	["pok"] = {"Pokangá"},
	["pom"] = {"Southeastern Pomo"},
	["pon"] = {"Pohnpeian"},
	["poo"] = {"Central Pomo"},
	["pop"] = {"Pwapwâ"},
	["poq"] = {"Texistepec Popoluca"},
	["pos"] = {"Sayula Popoluca"},
	["pot"] = {"Potawatomi"},
	["pov"] = {"Upper Guinea Crioulo"},
	["pow"] = {"San Felipe Otlaltepec Popoloca"},
	["pox"] = {"Polabian"},
	["poy"] = {"Pogolo"},
	["poz"] = {"Malayo-Polynesian languages"},
	["ppe"] = {"Papi"},
	["ppi"] = {"Paipai"},
	["ppk"] = {"Uma"},
	["ppl"] = {"Pipil", "Nicarao"},
	["ppm"] = {"Papuma"},
	["ppn"] = {"Papapana"},
	["ppo"] = {"Folopa"},
	["ppp"] = {"Pelende"},
	["ppq"] = {"Pei"},
	["pps"] = {"San Luís Temalacayuca Popoloca"},
	["ppt"] = {"Pare"},
	["ppu"] = {"Papora"},
	["pqa"] = {"Pa'a"},
	["pqe"] = {"Eastern Malayo-Polynesian languages"},
	["pqm"] = {"Malecite-Passamaquoddy"},
	["pqw"] = {"Western Malayo-Polynesian languages"},
	["pra"] = {"Prakrit languages"},
	["prc"] = {"Parachi"},
	["prd"] = {"Parsi-Dari"},
	["pre"] = {"Principense"},
	["prf"] = {"Paranan"},
	["prg"] = {"Prussian"},
	["prh"] = {"Porohanon"},
	["pri"] = {"Paicî"},
	["prk"] = {"Parauk"},
	["prl"] = {"Peruvian Sign Language"},
	["prm"] = {"Kibiri"},
	["prn"] = {"Prasuni"},
	["pro"] = {"Old Provençal (to 1500)", "Old Occitan (to 1500)"},
	["prp"] = {"Parsi"},
	["prq"] = {"Ashéninka Perené"},
	["prr"] = {"Puri"},
	["prs"] = {"Dari", "Afghan Persian"},
	["prt"] = {"Phai"},
	["pru"] = {"Puragi"},
	["prw"] = {"Parawen"},
	["prx"] = {"Purik"},
	["prz"] = {"Providencia Sign Language"},
	["psa"] = {"Asue Awyu"},
	["psc"] = {"Persian Sign Language"},
	["psd"] = {"Plains Indian Sign Language"},
	["pse"] = {"Central Malay"},
	["psg"] = {"Penang Sign Language"},
	["psh"] = {"Southwest Pashai", "Southwest Pashayi"},
	["psi"] = {"Southeast Pashai", "Southeast Pashayi"},
	["psl"] = {"Puerto Rican Sign Language"},
	["psm"] = {"Pauserna"},
	["psn"] = {"Panasuan"},
	["pso"] = {"Polish Sign Language"},
	["psp"] = {"Philippine Sign Language"},
	["psq"] = {"Pasi"},
	["psr"] = {"Portuguese Sign Language"},
	["pss"] = {"Kaulong"},
	["pst"] = {"Central Pashto"},
	["psu"] = {"Sauraseni Prākrit"},
	["psw"] = {"Port Sandwich"},
	["psy"] = {"Piscataway"},
	["pta"] = {"Pai Tavytera"},
	["pth"] = {"Pataxó Hã-Ha-Hãe"},
	["pti"] = {"Pindiini", "Wangkatha"},
	["ptn"] = {"Patani"},
	["pto"] = {"Zo'é"},
	["ptp"] = {"Patep"},
	["ptq"] = {"Pattapu"},
	["ptr"] = {"Piamatsina"},
	["ptt"] = {"Enrekang"},
	["ptu"] = {"Bambam"},
	["ptv"] = {"Port Vato"},
	["ptw"] = {"Pentlatch"},
	["pty"] = {"Pathiya"},
	["pua"] = {"Western Highland Purepecha"},
	["pub"] = {"Purum"},
	["puc"] = {"Punan Merap"},
	["pud"] = {"Punan Aput"},
	["pue"] = {"Puelche"},
	["puf"] = {"Punan Merah"},
	["pug"] = {"Phuie"},
	["pui"] = {"Puinave"},
	["puj"] = {"Punan Tubu"},
	["pum"] = {"Puma"},
	["puo"] = {"Puoc"},
	["pup"] = {"Pulabu"},
	["puq"] = {"Puquina"},
	["pur"] = {"Puruborá"},
	["put"] = {"Putoh"},
	["puu"] = {"Punu"},
	["puw"] = {"Puluwatese"},
	["pux"] = {"Puare"},
	["puy"] = {"Purisimeño"},
	["pwa"] = {"Pawaia"},
	["pwb"] = {"Panawa"},
	["pwg"] = {"Gapapaiwa"},
	["pwi"] = {"Patwin"},
	["pwm"] = {"Molbog"},
	["pwn"] = {"Paiwan"},
	["pwo"] = {"Pwo Western Karen"},
	["pwr"] = {"Powari"},
	["pww"] = {"Pwo Northern Karen"},
	["pxm"] = {"Quetzaltepec Mixe"},
	["pye"] = {"Pye Krumen"},
	["pym"] = {"Fyam"},
	["pyn"] = {"Poyanáwa"},
	["pys"] = {"Paraguayan Sign Language", "Lengua de Señas del Paraguay"},
	["pyu"] = {"Puyuma"},
	["pyx"] = {"Pyu (Myanmar)"},
	["pyy"] = {"Pyen"},
	["pzn"] = {"Para Naga"},
	["qua"] = {"Quapaw"},
	["qub"] = {"Huallaga Huánuco Quechua"},
	["quc"] = {"K'iche'", "Quiché"},
	["qud"] = {"Calderón Highland Quichua"},
	["quf"] = {"Lambayeque Quechua"},
	["qug"] = {"Chimborazo Highland Quichua"},
	["quh"] = {"South Bolivian Quechua"},
	["qui"] = {"Quileute"},
	["quk"] = {"Chachapoyas Quechua"},
	["qul"] = {"North Bolivian Quechua"},
	["qum"] = {"Sipacapense"},
	["qun"] = {"Quinault"},
	["qup"] = {"Southern Pastaza Quechua"},
	["quq"] = {"Quinqui"},
	["qur"] = {"Yanahuanca Pasco Quechua"},
	["qus"] = {"Santiago del Estero Quichua"},
	["quv"] = {"Sacapulteco"},
	["quw"] = {"Tena Lowland Quichua"},
	["qux"] = {"Yauyos Quechua"},
	["quy"] = {"Ayacucho Quechua"},
	["quz"] = {"Cusco Quechua"},
	["qva"] = {"Ambo-Pasco Quechua"},
	["qvc"] = {"Cajamarca Quechua"},
	["qve"] = {"Eastern Apurímac Quechua"},
	["qvh"] = {"Huamalíes-Dos de Mayo Huánuco Quechua"},
	["qvi"] = {"Imbabura Highland Quichua"},
	["qvj"] = {"Loja Highland Quichua"},
	["qvl"] = {"Cajatambo North Lima Quechua"},
	["qvm"] = {"Margos-Yarowilca-Lauricocha Quechua"},
	["qvn"] = {"North Junín Quechua"},
	["qvo"] = {"Napo Lowland Quechua"},
	["qvp"] = {"Pacaraos Quechua"},
	["qvs"] = {"San Martín Quechua"},
	["qvw"] = {"Huaylla Wanca Quechua"},
	["qvy"] = {"Queyu"},
	["qvz"] = {"Northern Pastaza Quichua"},
	["qwa"] = {"Corongo Ancash Quechua"},
	["qwc"] = {"Classical Quechua"},
	["qwe"] = {"Quechuan (family)"},
	["qwh"] = {"Huaylas Ancash Quechua"},
	["qwm"] = {"Kuman (Russia)"},
	["qws"] = {"Sihuas Ancash Quechua"},
	["qwt"] = {"Kwalhioqua-Tlatskanai"},
	["qxa"] = {"Chiquián Ancash Quechua"},
	["qxc"] = {"Chincha Quechua"},
	["qxh"] = {"Panao Huánuco Quechua"},
	["qxl"] = {"Salasaca Highland Quichua"},
	["qxn"] = {"Northern Conchucos Ancash Quechua"},
	["qxo"] = {"Southern Conchucos Ancash Quechua"},
	["qxp"] = {"Puno Quechua"},
	["qxq"] = {"Qashqa'i"},
	["qxr"] = {"Cañar Highland Quichua"},
	["qxs"] = {"Southern Qiang"},
	["qxt"] = {"Santa Ana de Tusi Pasco Quechua"},
	["qxu"] = {"Arequipa-La Unión Quechua"},
	["qxw"] = {"Jauja Wanca Quechua"},
	["qya"] = {"Quenya"},
	["qyp"] = {"Quiripi"},
	["raa"] = {"Dungmali"},
	["rab"] = {"Camling"},
	["rac"] = {"Rasawa"},
	["rad"] = {"Rade"},
	["raf"] = {"Western Meohang"},
	["rag"] = {"Logooli", "Lulogooli"},
	["rah"] = {"Rabha"},
	["rai"] = {"Ramoaaina"},
	["raj"] = {"Rajasthani"},
	["rak"] = {"Tulu-Bohuai"},
	["ral"] = {"Ralte"},
	["ram"] = {"Canela"},
	["ran"] = {"Riantana"},
	["rao"] = {"Rao"},
	["rap"] = {"Rapanui"},
	["raq"] = {"Saam"},
	["rar"] = {"Rarotongan", "Cook Islands Maori"},
	["ras"] = {"Tegali"},
	["rat"] = {"Razajerdi"},
	["rau"] = {"Raute"},
	["rav"] = {"Sampang"},
	["raw"] = {"Rawang"},
	["rax"] = {"Rang"},
	["ray"] = {"Rapa"},
	["raz"] = {"Rahambuu"},
	["rbb"] = {"Rumai Palaung"},
	["rbk"] = {"Northern Bontok"},
	["rbl"] = {"Miraya Bikol"},
	["rbp"] = {"Barababaraba"},
	["rcf"] = {"Réunion Creole French"},
	["rdb"] = {"Rudbari"},
	["rea"] = {"Rerau"},
	["reb"] = {"Rembong"},
	["ree"] = {"Rejang Kayan"},
	["reg"] = {"Kara (Tanzania)"},
	["rei"] = {"Reli"},
	["rej"] = {"Rejang"},
	["rel"] = {"Rendille"},
	["rem"] = {"Remo"},
	["ren"] = {"Rengao"},
	["rer"] = {"Rer Bare"},
	["res"] = {"Reshe"},
	["ret"] = {"Retta"},
	["rey"] = {"Reyesano"},
	["rga"] = {"Roria"},
	["rge"] = {"Romano-Greek"},
	["rgk"] = {"Rangkas"},
	["rgn"] = {"Romagnol"},
	["rgr"] = {"Resígaro"},
	["rgs"] = {"Southern Roglai"},
	["rgu"] = {"Ringgou"},
	["rhg"] = {"Rohingya"},
	["rhp"] = {"Yahang"},
	["ria"] = {"Riang (India)"},
	["rif"] = {"Tarifit"},
	["ril"] = {"Riang Lang", "Riang (Myanmar)"},
	["rim"] = {"Nyaturu"},
	["rin"] = {"Nungu"},
	["rir"] = {"Ribun"},
	["rit"] = {"Ritharrngu"},
	["riu"] = {"Riung"},
	["rjg"] = {"Rajong"},
	["rji"] = {"Raji"},
	["rjs"] = {"Rajbanshi"},
	["rka"] = {"Kraol"},
	["rkb"] = {"Rikbaktsa"},
	["rkh"] = {"Rakahanga-Manihiki"},
	["rki"] = {"Rakhine"},
	["rkm"] = {"Marka"},
	["rkt"] = {"Rangpuri", "Kamta"},
	["rkw"] = {"Arakwal"},
	["rma"] = {"Rama"},
	["rmb"] = {"Rembarrnga"},
	["rmc"] = {"Carpathian Romani"},
	["rmd"] = {"Traveller Danish"},
	["rme"] = {"Angloromani"},
	["rmf"] = {"Kalo Finnish Romani"},
	["rmg"] = {"Traveller Norwegian"},
	["rmh"] = {"Murkim"},
	["rmi"] = {"Lomavren"},
	["rmk"] = {"Romkun"},
	["rml"] = {"Baltic Romani"},
	["rmm"] = {"Roma"},
	["rmn"] = {"Balkan Romani"},
	["rmo"] = {"Sinte Romani"},
	["rmp"] = {"Rempi"},
	["rmq"] = {"Caló"},
	["rms"] = {"Romanian Sign Language"},
	["rmt"] = {"Domari"},
	["rmu"] = {"Tavringer Romani"},
	["rmv"] = {"Romanova"},
	["rmw"] = {"Welsh Romani"},
	["rmx"] = {"Romam"},
	["rmy"] = {"Vlax Romani"},
	["rmz"] = {"Marma"},
	["rnd"] = {"Ruund"},
	["rng"] = {"Ronga"},
	["rnl"] = {"Ranglong"},
	["rnn"] = {"Roon"},
	["rnp"] = {"Rongpo"},
	["rnr"] = {"Nari Nari"},
	["rnw"] = {"Rungwa"},
	["roa"] = {"Romance languages"},
	["rob"] = {"Tae'"},
	["roc"] = {"Cacgia Roglai"},
	["rod"] = {"Rogo"},
	["roe"] = {"Ronji"},
	["rof"] = {"Rombo"},
	["rog"] = {"Northern Roglai"},
	["rol"] = {"Romblomanon"},
	["rom"] = {"Romany"},
	["roo"] = {"Rotokas"},
	["rop"] = {"Kriol"},
	["ror"] = {"Rongga"},
	["rou"] = {"Runga"},
	["row"] = {"Dela-Oenale"},
	["rpn"] = {"Repanbitip"},
	["rpt"] = {"Rapting"},
	["rri"] = {"Ririo"},
	["rro"] = {"Waima"},
	["rrt"] = {"Arritinngithigh"},
	["rsb"] = {"Romano-Serbian"},
	["rsl"] = {"Russian Sign Language"},
	["rsm"] = {"Miriwoong Sign Language"},
	["rtc"] = {"Rungtu Chin"},
	["rth"] = {"Ratahan"},
	["rtm"] = {"Rotuman"},
	["rts"] = {"Yurats"},
	["rtw"] = {"Rathawi"},
	["rub"] = {"Gungu"},
	["ruc"] = {"Ruuli"},
	["rue"] = {"Rusyn"},
	["ruf"] = {"Luguru"},
	["rug"] = {"Roviana"},
	["ruh"] = {"Ruga"},
	["rui"] = {"Rufiji"},
	["ruk"] = {"Che"},
	["ruo"] = {"Istro Romanian"},
	["rup"] = {"Macedo-Romanian", "Aromanian", "Arumanian"},
	["ruq"] = {"Megleno Romanian"},
	["rut"] = {"Rutul"},
	["ruu"] = {"Lanas Lobu"},
	["ruy"] = {"Mala (Nigeria)"},
	["ruz"] = {"Ruma"},
	["rwa"] = {"Rawo"},
	["rwk"] = {"Rwa"},
	["rwm"] = {"Amba (Uganda)"},
	["rwo"] = {"Rawa"},
	["rwr"] = {"Marwari (India)"},
	["rxd"] = {"Ngardi"},
	["rxw"] = {"Karuwali", "Garuwali"},
	["ryn"] = {"Northern Amami-Oshima"},
	["rys"] = {"Yaeyama"},
	["ryu"] = {"Central Okinawan"},
	["rzh"] = {"Rāziḥī"},
	["saa"] = {"Saba"},
	["sab"] = {"Buglere"},
	["sac"] = {"Meskwaki"},
	["sad"] = {"Sandawe"},
	["sae"] = {"Sabanê"},
	["saf"] = {"Safaliba"},
	["sah"] = {"Yakut"},
	["sai"] = {"South American Indian languages"},
	["saj"] = {"Sahu"},
	["sak"] = {"Sake"},
	["sal"] = {"Salishan languages"},
	["sam"] = {"Samaritan Aramaic"},
	["sao"] = {"Sause"},
	["saq"] = {"Samburu"},
	["sar"] = {"Saraveca"},
	["sas"] = {"Sasak"},
	["sat"] = {"Santali"},
	["sau"] = {"Saleman"},
	["sav"] = {"Saafi-Saafi"},
	["saw"] = {"Sawi"},
	["sax"] = {"Sa"},
	["say"] = {"Saya"},
	["saz"] = {"Saurashtra"},
	["sba"] = {"Ngambay"},
	["sbb"] = {"Simbo"},
	["sbc"] = {"Kele (Papua New Guinea)"},
	["sbd"] = {"Southern Samo"},
	["sbe"] = {"Saliba"},
	["sbf"] = {"Chabu", "Shabo"},
	["sbg"] = {"Seget"},
	["sbh"] = {"Sori-Harengan"},
	["sbi"] = {"Seti"},
	["sbj"] = {"Surbakhal"},
	["sbk"] = {"Safwa"},
	["sbl"] = {"Botolan Sambal"},
	["sbm"] = {"Sagala"},
	["sbn"] = {"Sindhi Bhil"},
	["sbo"] = {"Sabüm"},
	["sbp"] = {"Sangu (Tanzania)"},
	["sbq"] = {"Sileibi"},
	["sbr"] = {"Sembakung Murut"},
	["sbs"] = {"Subiya"},
	["sbt"] = {"Kimki"},
	["sbu"] = {"Stod Bhoti"},
	["sbv"] = {"Sabine"},
	["sbw"] = {"Simba"},
	["sbx"] = {"Seberuang"},
	["sby"] = {"Soli"},
	["sbz"] = {"Sara Kaba"},
	["scb"] = {"Chut"},
	["sce"] = {"Dongxiang"},
	["scf"] = {"San Miguel Creole French"},
	["scg"] = {"Sanggau"},
	["sch"] = {"Sakachep"},
	["sci"] = {"Sri Lankan Creole Malay"},
	["sck"] = {"Sadri"},
	["scl"] = {"Shina"},
	["scn"] = {"Sicilian"},
	["sco"] = {"Scots"},
	["scp"] = {"Hyolmo", "Helambu Sherpa"},
	["scq"] = {"Sa'och"},
	["scs"] = {"North Slavey"},
	["sct"] = {"Southern Katang"},
	["scu"] = {"Shumcho"},
	["scv"] = {"Sheni"},
	["scw"] = {"Sha"},
	["scx"] = {"Sicel"},
	["sda"] = {"Toraja-Sa'dan"},
	["sdb"] = {"Shabak"},
	["sdc"] = {"Sassarese Sardinian"},
	["sde"] = {"Surubu"},
	["sdf"] = {"Sarli"},
	["sdg"] = {"Savi"},
	["sdh"] = {"Southern Kurdish"},
	["sdj"] = {"Suundi"},
	["sdk"] = {"Sos Kundi"},
	["sdl"] = {"Saudi Arabian Sign Language"},
	["sdm"] = {"Semandang"},
	["sdn"] = {"Gallurese Sardinian"},
	["sdo"] = {"Bukar-Sadung Bidayuh"},
	["sdp"] = {"Sherdukpen"},
	["sdr"] = {"Oraon Sadri"},
	["sds"] = {"Sened"},
	["sdt"] = {"Shuadit"},
	["sdu"] = {"Sarudu"},
	["sdv"] = {"Eastern Sudanic languages"},
	["sdx"] = {"Sibu Melanau"},
	["sdz"] = {"Sallands"},
	["sea"] = {"Semai"},
	["seb"] = {"Shempire Senoufo"},
	["sec"] = {"Sechelt"},
	["sed"] = {"Sedang"},
	["see"] = {"Seneca"},
	["sef"] = {"Cebaara Senoufo"},
	["seg"] = {"Segeju"},
	["seh"] = {"Sena"},
	["sei"] = {"Seri"},
	["sej"] = {"Sene"},
	["sek"] = {"Sekani"},
	["sel"] = {"Selkup"},
	["sem"] = {"Semitic languages"},
	["sen"] = {"Nanerigé Sénoufo"},
	["seo"] = {"Suarmin"},
	["sep"] = {"Sìcìté Sénoufo"},
	["seq"] = {"Senara Sénoufo"},
	["ser"] = {"Serrano"},
	["ses"] = {"Koyraboro Senni Songhai"},
	["set"] = {"Sentani"},
	["seu"] = {"Serui-Laut"},
	["sev"] = {"Nyarafolo Senoufo"},
	["sew"] = {"Sewa Bay"},
	["sey"] = {"Secoya"},
	["sez"] = {"Senthang Chin"},
	["sfb"] = {"Langue des signes de Belgique Francophone", "French Belgian Sign Language"},
	["sfe"] = {"Eastern Subanen"},
	["sfm"] = {"Small Flowery Miao"},
	["sfs"] = {"South African Sign Language"},
	["sfw"] = {"Sehwi"},
	["sga"] = {"Old Irish (to 900)"},
	["sgb"] = {"Mag-antsi Ayta"},
	["sgc"] = {"Kipsigis"},
	["sgd"] = {"Surigaonon"},
	["sge"] = {"Segai"},
	["sgg"] = {"Swiss-German Sign Language"},
	["sgh"] = {"Shughni"},
	["sgi"] = {"Suga"},
	["sgj"] = {"Surgujia"},
	["sgk"] = {"Sangkong"},
	["sgm"] = {"Singa"},
	["sgn"] = {"Sign languages"},
	["sgp"] = {"Singpho"},
	["sgr"] = {"Sangisari"},
	["sgs"] = {"Samogitian"},
	["sgt"] = {"Brokpake"},
	["sgu"] = {"Salas"},
	["sgw"] = {"Sebat Bet Gurage"},
	["sgx"] = {"Sierra Leone Sign Language"},
	["sgy"] = {"Sanglechi"},
	["sgz"] = {"Sursurunga"},
	["sha"] = {"Shall-Zwall"},
	["shb"] = {"Ninam"},
	["shc"] = {"Sonde"},
	["shd"] = {"Kundal Shahi"},
	["she"] = {"Sheko"},
	["shg"] = {"Shua"},
	["shh"] = {"Shoshoni"},
	["shi"] = {"Tachelhit"},
	["shj"] = {"Shatt"},
	["shk"] = {"Shilluk"},
	["shl"] = {"Shendu"},
	["shm"] = {"Shahrudi"},
	["shn"] = {"Shan"},
	["sho"] = {"Shanga"},
	["shp"] = {"Shipibo-Conibo"},
	["shq"] = {"Sala"},
	["shr"] = {"Shi"},
	["shs"] = {"Shuswap"},
	["sht"] = {"Shasta"},
	["shu"] = {"Chadian Arabic"},
	["shv"] = {"Shehri"},
	["shw"] = {"Shwai"},
	["shx"] = {"She"},
	["shy"] = {"Tachawit"},
	["shz"] = {"Syenara Senoufo"},
	["sia"] = {"Akkala Sami"},
	["sib"] = {"Sebop"},
	["sid"] = {"Sidamo"},
	["sie"] = {"Simaa"},
	["sif"] = {"Siamou"},
	["sig"] = {"Paasaal"},
	["sih"] = {"Zire", "Sîshëë"},
	["sii"] = {"Shom Peng"},
	["sij"] = {"Numbami"},
	["sik"] = {"Sikiana"},
	["sil"] = {"Tumulung Sisaala"},
	["sim"] = {"Mende (Papua New Guinea)"},
	["sio"] = {"Siouan languages"},
	["sip"] = {"Sikkimese"},
	["siq"] = {"Sonia"},
	["sir"] = {"Siri"},
	["sis"] = {"Siuslaw"},
	["sit"] = {"Sino-Tibetan languages"},
	["siu"] = {"Sinagen"},
	["siv"] = {"Sumariup"},
	["siw"] = {"Siwai"},
	["six"] = {"Sumau"},
	["siy"] = {"Sivandi"},
	["siz"] = {"Siwi"},
	["sja"] = {"Epena"},
	["sjb"] = {"Sajau Basap"},
	["sjd"] = {"Kildin Sami"},
	["sje"] = {"Pite Sami"},
	["sjg"] = {"Assangori"},
	["sjk"] = {"Kemi Sami"},
	["sjl"] = {"Sajalong", "Miji"},
	["sjm"] = {"Mapun"},
	["sjn"] = {"Sindarin"},
	["sjo"] = {"Xibe"},
	["sjp"] = {"Surjapuri"},
	["sjr"] = {"Siar-Lak"},
	["sjs"] = {"Senhaja De Srair"},
	["sjt"] = {"Ter Sami"},
	["sju"] = {"Ume Sami"},
	["sjw"] = {"Shawnee"},
	["ska"] = {"Skagit"},
	["skb"] = {"Saek"},
	["skc"] = {"Ma Manda"},
	["skd"] = {"Southern Sierra Miwok"},
	["ske"] = {"Seke (Vanuatu)"},
	["skf"] = {"Sakirabiá"},
	["skg"] = {"Sakalava Malagasy"},
	["skh"] = {"Sikule"},
	["ski"] = {"Sika"},
	["skj"] = {"Seke (Nepal)"},
	["skm"] = {"Kutong"},
	["skn"] = {"Kolibugan Subanon"},
	["sko"] = {"Seko Tengah"},
	["skp"] = {"Sekapan"},
	["skq"] = {"Sininkere"},
	["skr"] = {"Saraiki", "Seraiki"},
	["sks"] = {"Maia"},
	["skt"] = {"Sakata"},
	["sku"] = {"Sakao"},
	["skv"] = {"Skou"},
	["skw"] = {"Skepi Creole Dutch"},
	["skx"] = {"Seko Padang"},
	["sky"] = {"Sikaiana"},
	["skz"] = {"Sekar"},
	["sla"] = {"Slavic languages"},
	["slc"] = {"Sáliba"},
	["sld"] = {"Sissala"},
	["sle"] = {"Sholaga"},
	["slf"] = {"Swiss-Italian Sign Language"},
	["slg"] = {"Selungai Murut"},
	["slh"] = {"Southern Puget Sound Salish"},
	["sli"] = {"Lower Silesian"},
	["slj"] = {"Salumá"},
	["sll"] = {"Salt-Yui"},
	["slm"] = {"Pangutaran Sama"},
	["sln"] = {"Salinan"},
	["slp"] = {"Lamaholot"},
	["slq"] = {"Salchuq"},
	["slr"] = {"Salar"},
	["sls"] = {"Singapore Sign Language"},
	["slt"] = {"Sila"},
	["slu"] = {"Selaru"},
	["slw"] = {"Sialum"},
	["slx"] = {"Salampasu"},
	["sly"] = {"Selayar"},
	["slz"] = {"Ma'ya"},
	["sma"] = {"Southern Sami"},
	["smb"] = {"Simbari"},
	["smc"] = {"Som"},
	["smd"] = {"Sama"},
	["smf"] = {"Auwe"},
	["smg"] = {"Simbali"},
	["smh"] = {"Samei"},
	["smi"] = {"Sami languages"},
	["smj"] = {"Lule Sami"},
	["smk"] = {"Bolinao"},
	["sml"] = {"Central Sama"},
	["smm"] = {"Musasa"},
	["smn"] = {"Inari Sami"},
	["smp"] = {"Samaritan"},
	["smq"] = {"Samo"},
	["smr"] = {"Simeulue"},
	["sms"] = {"Skolt Sami"},
	["smt"] = {"Simte"},
	["smu"] = {"Somray"},
	["smv"] = {"Samvedi"},
	["smw"] = {"Sumbawa"},
	["smx"] = {"Samba"},
	["smy"] = {"Semnani"},
	["smz"] = {"Simeku"},
	["snb"] = {"Sebuyau"},
	["snc"] = {"Sinaugoro"},
	["sne"] = {"Bau Bidayuh"},
	["snf"] = {"Noon"},
	["sng"] = {"Sanga (Democratic Republic of Congo)"},
	["sni"] = {"Sensi"},
	["snj"] = {"Riverain Sango"},
	["snk"] = {"Soninke"},
	["snl"] = {"Sangil"},
	["snm"] = {"Southern Ma'di"},
	["snn"] = {"Siona"},
	["sno"] = {"Snohomish"},
	["snp"] = {"Siane"},
	["snq"] = {"Sangu (Gabon)"},
	["snr"] = {"Sihan"},
	["sns"] = {"South West Bay", "Nahavaq"},
	["snu"] = {"Senggi", "Viid"},
	["snv"] = {"Sa'ban"},
	["snw"] = {"Selee"},
	["snx"] = {"Sam"},
	["sny"] = {"Saniyo-Hiyewe"},
	["snz"] = {"Kou"},
	["soa"] = {"Thai Song"},
	["sob"] = {"Sobei"},
	["soc"] = {"So (Democratic Republic of Congo)"},
	["sod"] = {"Songoora"},
	["soe"] = {"Songomeno"},
	["sog"] = {"Sogdian"},
	["soh"] = {"Aka"},
	["soi"] = {"Sonha"},
	["soj"] = {"Soi"},
	["sok"] = {"Sokoro"},
	["sol"] = {"Solos"},
	["son"] = {"Songhai languages"},
	["soo"] = {"Songo"},
	["sop"] = {"Songe"},
	["soq"] = {"Kanasi"},
	["sor"] = {"Somrai"},
	["sos"] = {"Seeku"},
	["sou"] = {"Southern Thai"},
	["sov"] = {"Sonsorol"},
	["sow"] = {"Sowanda"},
	["sox"] = {"Swo"},
	["soy"] = {"Miyobe"},
	["soz"] = {"Temi"},
	["spb"] = {"Sepa (Indonesia)"},
	["spc"] = {"Sapé"},
	["spd"] = {"Saep"},
	["spe"] = {"Sepa (Papua New Guinea)"},
	["spg"] = {"Sian"},
	["spi"] = {"Saponi"},
	["spk"] = {"Sengo"},
	["spl"] = {"Selepet"},
	["spm"] = {"Akukem"},
	["spn"] = {"Sanapaná"},
	["spo"] = {"Spokane"},
	["spp"] = {"Supyire Senoufo"},
	["spq"] = {"Loreto-Ucayali Spanish"},
	["spr"] = {"Saparua"},
	["sps"] = {"Saposa"},
	["spt"] = {"Spiti Bhoti"},
	["spu"] = {"Sapuan"},
	["spv"] = {"Sambalpuri", "Kosli"},
	["spx"] = {"South Picene"},
	["spy"] = {"Sabaot"},
	["sqa"] = {"Shama-Sambuga"},
	["sqh"] = {"Shau"},
	["sqj"] = {"Albanian languages"},
	["sqk"] = {"Albanian Sign Language"},
	["sqm"] = {"Suma"},
	["sqn"] = {"Susquehannock"},
	["sqo"] = {"Sorkhei"},
	["sqq"] = {"Sou"},
	["sqr"] = {"Siculo Arabic"},
	["sqs"] = {"Sri Lankan Sign Language"},
	["sqt"] = {"Soqotri"},
	["squ"] = {"Squamish"},
	["sra"] = {"Saruga"},
	["srb"] = {"Sora"},
	["src"] = {"Logudorese Sardinian"},
	["sre"] = {"Sara"},
	["srf"] = {"Nafi"},
	["srg"] = {"Sulod"},
	["srh"] = {"Sarikoli"},
	["sri"] = {"Siriano"},
	["srk"] = {"Serudung Murut"},
	["srl"] = {"Isirawa"},
	["srm"] = {"Saramaccan"},
	["srn"] = {"Sranan Tongo"},
	["sro"] = {"Campidanese Sardinian"},
	["srq"] = {"Sirionó"},
	["srr"] = {"Serer"},
	["srs"] = {"Sarsi"},
	["srt"] = {"Sauri"},
	["sru"] = {"Suruí"},
	["srv"] = {"Southern Sorsoganon"},
	["srw"] = {"Serua"},
	["srx"] = {"Sirmauri"},
	["sry"] = {"Sera"},
	["srz"] = {"Shahmirzadi"},
	["ssa"] = {"Nilo-Saharan languages"},
	["ssb"] = {"Southern Sama"},
	["ssc"] = {"Suba-Simbiti"},
	["ssd"] = {"Siroi"},
	["sse"] = {"Balangingi", "Bangingih Sama"},
	["ssf"] = {"Thao"},
	["ssg"] = {"Seimat"},
	["ssh"] = {"Shihhi Arabic"},
	["ssi"] = {"Sansi"},
	["ssj"] = {"Sausi"},
	["ssk"] = {"Sunam"},
	["ssl"] = {"Western Sisaala"},
	["ssm"] = {"Semnam"},
	["ssn"] = {"Waata"},
	["sso"] = {"Sissano"},
	["ssp"] = {"Spanish Sign Language"},
	["ssq"] = {"So'a"},
	["ssr"] = {"Swiss-French Sign Language"},
	["sss"] = {"Sô"},
	["sst"] = {"Sinasina"},
	["ssu"] = {"Susuami"},
	["ssv"] = {"Shark Bay"},
	["ssx"] = {"Samberigi"},
	["ssy"] = {"Saho"},
	["ssz"] = {"Sengseng"},
	["sta"] = {"Settla"},
	["stb"] = {"Northern Subanen"},
	["std"] = {"Sentinel"},
	["ste"] = {"Liana-Seti"},
	["stf"] = {"Seta"},
	["stg"] = {"Trieng"},
	["sth"] = {"Shelta"},
	["sti"] = {"Bulo Stieng"},
	["stj"] = {"Matya Samo"},
	["stk"] = {"Arammba"},
	["stl"] = {"Stellingwerfs"},
	["stm"] = {"Setaman"},
	["stn"] = {"Owa"},
	["sto"] = {"Stoney"},
	["stp"] = {"Southeastern Tepehuan"},
	["stq"] = {"Saterfriesisch"},
	["str"] = {"Straits Salish"},
	["sts"] = {"Shumashti"},
	["stt"] = {"Budeh Stieng"},
	["stu"] = {"Samtao"},
	["stv"] = {"Silt'e"},
	["stw"] = {"Satawalese"},
	["sty"] = {"Siberian Tatar"},
	["sua"] = {"Sulka"},
	["sub"] = {"Suku"},
	["suc"] = {"Western Subanon"},
	["sue"] = {"Suena"},
	["sug"] = {"Suganga"},
	["sui"] = {"Suki"},
	["suj"] = {"Shubi"},
	["suk"] = {"Sukuma"},
	["suq"] = {"Suri"},
	["sur"] = {"Mwaghavul"},
	["sus"] = {"Susu"},
	["sut"] = {"Subtiaba"},
	["suv"] = {"Puroik"},
	["suw"] = {"Sumbwa"},
	["sux"] = {"Sumerian"},
	["suy"] = {"Suyá"},
	["suz"] = {"Sunwar"},
	["sva"] = {"Svan"},
	["svb"] = {"Ulau-Suain"},
	["svc"] = {"Vincentian Creole English"},
	["sve"] = {"Serili"},
	["svk"] = {"Slovakian Sign Language"},
	["svm"] = {"Slavomolisano"},
	["svs"] = {"Savosavo"},
	["svx"] = {"Skalvian"},
	["swb"] = {"Maore Comorian"},
	["swc"] = {"Congo Swahili"},
	["swf"] = {"Sere"},
	["swg"] = {"Swabian"},
	["swh"] = {"Swahili (individual language)", "Kiswahili"},
	["swi"] = {"Sui"},
	["swj"] = {"Sira"},
	["swk"] = {"Malawi Sena"},
	["swl"] = {"Swedish Sign Language"},
	["swm"] = {"Samosa"},
	["swn"] = {"Sawknah"},
	["swo"] = {"Shanenawa"},
	["swp"] = {"Suau"},
	["swq"] = {"Sharwa"},
	["swr"] = {"Saweru"},
	["sws"] = {"Seluwasan"},
	["swt"] = {"Sawila"},
	["swu"] = {"Suwawa"},
	["swv"] = {"Shekhawati"},
	["sww"] = {"Sowa"},
	["swx"] = {"Suruahá"},
	["swy"] = {"Sarua"},
	["sxb"] = {"Suba"},
	["sxc"] = {"Sicanian"},
	["sxe"] = {"Sighu"},
	["sxg"] = {"Shuhi", "Shixing"},
	["sxk"] = {"Southern Kalapuya"},
	["sxl"] = {"Selian"},
	["sxm"] = {"Samre"},
	["sxn"] = {"Sangir"},
	["sxo"] = {"Sorothaptic"},
	["sxr"] = {"Saaroa"},
	["sxs"] = {"Sasaru"},
	["sxu"] = {"Upper Saxon"},
	["sxw"] = {"Saxwe Gbe"},
	["sya"] = {"Siang"},
	["syb"] = {"Central Subanen"},
	["syc"] = {"Classical Syriac"},
	["syd"] = {"Samoyedic languages"},
	["syi"] = {"Seki"},
	["syk"] = {"Sukur"},
	["syl"] = {"Sylheti"},
	["sym"] = {"Maya Samo"},
	["syn"] = {"Senaya"},
	["syo"] = {"Suoy"},
	["syr"] = {"Syriac"},
	["sys"] = {"Sinyar"},
	["syw"] = {"Kagate"},
	["syx"] = {"Samay"},
	["syy"] = {"Al-Sayyid Bedouin Sign Language"},
	["sza"] = {"Semelai"},
	["szb"] = {"Ngalum"},
	["szc"] = {"Semaq Beri"},
	["szd"] = {"Seru"},
	["sze"] = {"Seze"},
	["szg"] = {"Sengele"},
	["szl"] = {"Silesian"},
	["szn"] = {"Sula"},
	["szp"] = {"Suabo"},
	["szs"] = {"Solomon Islands Sign Language"},
	["szv"] = {"Isu (Fako Division)"},
	["szw"] = {"Sawai"},
	["szy"] = {"Sakizaya"},
	["taa"] = {"Lower Tanana"},
	["tab"] = {"Tabassaran"},
	["tac"] = {"Lowland Tarahumara"},
	["tad"] = {"Tause"},
	["tae"] = {"Tariana"},
	["taf"] = {"Tapirapé"},
	["tag"] = {"Tagoi"},
	["tai"] = {"Tai languages"},
	["taj"] = {"Eastern Tamang"},
	["tak"] = {"Tala"},
	["tal"] = {"Tal"},
	["tan"] = {"Tangale"},
	["tao"] = {"Yami"},
	["tap"] = {"Taabwa"},
	["taq"] = {"Tamasheq"},
	["tar"] = {"Central Tarahumara"},
	["tas"] = {"Tay Boi"},
	["tau"] = {"Upper Tanana"},
	["tav"] = {"Tatuyo"},
	["taw"] = {"Tai"},
	["tax"] = {"Tamki"},
	["tay"] = {"Atayal"},
	["taz"] = {"Tocho"},
	["tba"] = {"Aikanã"},
	["tbb"] = {"Tapeba"},
	["tbc"] = {"Takia"},
	["tbd"] = {"Kaki Ae"},
	["tbe"] = {"Tanimbili"},
	["tbf"] = {"Mandara"},
	["tbg"] = {"North Tairora"},
	["tbh"] = {"Dharawal", "Thurawal"},
	["tbi"] = {"Gaam"},
	["tbj"] = {"Tiang"},
	["tbk"] = {"Calamian Tagbanwa"},
	["tbl"] = {"Tboli"},
	["tbm"] = {"Tagbu"},
	["tbn"] = {"Barro Negro Tunebo"},
	["tbo"] = {"Tawala"},
	["tbp"] = {"Taworta", "Diebroud"},
	["tbq"] = {"Tibeto-Burman languages"},
	["tbr"] = {"Tumtum"},
	["tbs"] = {"Tanguat"},
	["tbt"] = {"Tembo (Kitembo)"},
	["tbu"] = {"Tubar"},
	["tbv"] = {"Tobo"},
	["tbw"] = {"Tagbanwa"},
	["tbx"] = {"Kapin"},
	["tby"] = {"Tabaru"},
	["tbz"] = {"Ditammari"},
	["tca"] = {"Ticuna"},
	["tcb"] = {"Tanacross"},
	["tcc"] = {"Datooga"},
	["tcd"] = {"Tafi"},
	["tce"] = {"Southern Tutchone"},
	["tcf"] = {"Malinaltepec Me'phaa", "Malinaltepec Tlapanec"},
	["tcg"] = {"Tamagario"},
	["tch"] = {"Turks And Caicos Creole English"},
	["tci"] = {"Wára"},
	["tck"] = {"Tchitchege"},
	["tcl"] = {"Taman (Myanmar)"},
	["tcm"] = {"Tanahmerah"},
	["tcn"] = {"Tichurong"},
	["tco"] = {"Taungyo"},
	["tcp"] = {"Tawr Chin"},
	["tcq"] = {"Kaiy"},
	["tcs"] = {"Torres Strait Creole", "Yumplatok"},
	["tct"] = {"T'en"},
	["tcu"] = {"Southeastern Tarahumara"},
	["tcw"] = {"Tecpatlán Totonac"},
	["tcx"] = {"Toda"},
	["tcy"] = {"Tulu"},
	["tcz"] = {"Thado Chin"},
	["tda"] = {"Tagdal"},
	["tdb"] = {"Panchpargania"},
	["tdc"] = {"Emberá-Tadó"},
	["tdd"] = {"Tai Nüa"},
	["tde"] = {"Tiranige Diga Dogon"},
	["tdf"] = {"Talieng"},
	["tdg"] = {"Western Tamang"},
	["tdh"] = {"Thulung"},
	["tdi"] = {"Tomadino"},
	["tdj"] = {"Tajio"},
	["tdk"] = {"Tambas"},
	["tdl"] = {"Sur"},
	["tdm"] = {"Taruma"},
	["tdn"] = {"Tondano"},
	["tdo"] = {"Teme"},
	["tdq"] = {"Tita"},
	["tdr"] = {"Todrah"},
	["tds"] = {"Doutai"},
	["tdt"] = {"Tetun Dili"},
	["tdv"] = {"Toro"},
	["tdx"] = {"Tandroy-Mahafaly Malagasy"},
	["tdy"] = {"Tadyawan"},
	["tea"] = {"Temiar"},
	["teb"] = {"Tetete"},
	["tec"] = {"Terik"},
	["ted"] = {"Tepo Krumen"},
	["tee"] = {"Huehuetla Tepehua"},
	["tef"] = {"Teressa"},
	["teg"] = {"Teke-Tege"},
	["teh"] = {"Tehuelche"},
	["tei"] = {"Torricelli"},
	["tek"] = {"Ibali Teke"},
	["tem"] = {"Timne"},
	["ten"] = {"Tama (Colombia)"},
	["teo"] = {"Teso"},
	["tep"] = {"Tepecano"},
	["teq"] = {"Temein"},
	["ter"] = {"Tereno"},
	["tes"] = {"Tengger"},
	["tet"] = {"Tetum"},
	["teu"] = {"Soo"},
	["tev"] = {"Teor"},
	["tew"] = {"Tewa (USA)"},
	["tex"] = {"Tennet"},
	["tey"] = {"Tulishi"},
	["tez"] = {"Tetserret"},
	["tfi"] = {"Tofin Gbe"},
	["tfn"] = {"Tanaina"},
	["tfo"] = {"Tefaro"},
	["tfr"] = {"Teribe"},
	["tft"] = {"Ternate"},
	["tga"] = {"Sagalla"},
	["tgb"] = {"Tobilung"},
	["tgc"] = {"Tigak"},
	["tgd"] = {"Ciwogai"},
	["tge"] = {"Eastern Gorkha Tamang"},
	["tgf"] = {"Chalikha"},
	["tgh"] = {"Tobagonian Creole English"},
	["tgi"] = {"Lawunuia"},
	["tgj"] = {"Tagin"},
	["tgn"] = {"Tandaganon"},
	["tgo"] = {"Sudest"},
	["tgp"] = {"Tangoa"},
	["tgq"] = {"Tring"},
	["tgr"] = {"Tareng"},
	["tgs"] = {"Nume"},
	["tgt"] = {"Central Tagbanwa"},
	["tgu"] = {"Tanggu"},
	["tgv"] = {"Tingui-Boto"},
	["tgw"] = {"Tagwana Senoufo"},
	["tgx"] = {"Tagish"},
	["tgy"] = {"Togoyo"},
	["tgz"] = {"Tagalaka"},
	["thd"] = {"Kuuk Thaayorre", "Thayore"},
	["the"] = {"Chitwania Tharu"},
	["thf"] = {"Thangmi"},
	["thh"] = {"Northern Tarahumara"},
	["thi"] = {"Tai Long"},
	["thk"] = {"Tharaka", "Kitharaka"},
	["thl"] = {"Dangaura Tharu"},
	["thm"] = {"Aheu"},
	["thn"] = {"Thachanadan"},
	["thp"] = {"Thompson"},
	["thq"] = {"Kochila Tharu"},
	["thr"] = {"Rana Tharu"},
	["ths"] = {"Thakali"},
	["tht"] = {"Tahltan"},
	["thu"] = {"Thuri"},
	["thv"] = {"Tahaggart Tamahaq"},
	["thw"] = {"Thudam"},
	["thy"] = {"Tha"},
	["thz"] = {"Tayart Tamajeq"},
	["tia"] = {"Tidikelt Tamazight"},
	["tic"] = {"Tira"},
	["tif"] = {"Tifal"},
	["tig"] = {"Tigre"},
	["tih"] = {"Timugon Murut"},
	["tii"] = {"Tiene"},
	["tij"] = {"Tilung"},
	["tik"] = {"Tikar"},
	["til"] = {"Tillamook"},
	["tim"] = {"Timbe"},
	["tin"] = {"Tindi"},
	["tio"] = {"Teop"},
	["tip"] = {"Trimuris"},
	["tiq"] = {"Tiéfo"},
	["tis"] = {"Masadiit Itneg"},
	["tit"] = {"Tinigua"},
	["tiu"] = {"Adasen"},
	["tiv"] = {"Tiv"},
	["tiw"] = {"Tiwi"},
	["tix"] = {"Southern Tiwa"},
	["tiy"] = {"Tiruray"},
	["tiz"] = {"Tai Hongjin"},
	["tja"] = {"Tajuasohn"},
	["tjg"] = {"Tunjung"},
	["tji"] = {"Northern Tujia"},
	["tjj"] = {"Tjungundji"},
	["tjl"] = {"Tai Laing"},
	["tjm"] = {"Timucua"},
	["tjn"] = {"Tonjon"},
	["tjo"] = {"Temacine Tamazight"},
	["tjp"] = {"Tjupany"},
	["tjs"] = {"Southern Tujia"},
	["tju"] = {"Tjurruru"},
	["tjw"] = {"Djabwurrung"},
	["tka"] = {"Truká"},
	["tkb"] = {"Buksa"},
	["tkd"] = {"Tukudede"},
	["tke"] = {"Takwane"},
	["tkf"] = {"Tukumanféd"},
	["tkg"] = {"Tesaka Malagasy"},
	["tkl"] = {"Tokelau"},
	["tkm"] = {"Takelma"},
	["tkn"] = {"Toku-No-Shima"},
	["tkp"] = {"Tikopia"},
	["tkq"] = {"Tee"},
	["tkr"] = {"Tsakhur"},
	["tks"] = {"Takestani"},
	["tkt"] = {"Kathoriya Tharu"},
	["tku"] = {"Upper Necaxa Totonac"},
	["tkv"] = {"Mur Pano"},
	["tkw"] = {"Teanu"},
	["tkx"] = {"Tangko"},
	["tkz"] = {"Takua"},
	["tla"] = {"Southwestern Tepehuan"},
	["tlb"] = {"Tobelo"},
	["tlc"] = {"Yecuatla Totonac"},
	["tld"] = {"Talaud"},
	["tlf"] = {"Telefol"},
	["tlg"] = {"Tofanma"},
	["tlh"] = {"Klingon", "tlhIngan Hol"},
	["tli"] = {"Tlingit"},
	["tlj"] = {"Talinga-Bwisi"},
	["tlk"] = {"Taloki"},
	["tll"] = {"Tetela"},
	["tlm"] = {"Tolomako"},
	["tln"] = {"Talondo'"},
	["tlo"] = {"Talodi"},
	["tlp"] = {"Filomena Mata-Coahuitlán Totonac"},
	["tlq"] = {"Tai Loi"},
	["tlr"] = {"Talise"},
	["tls"] = {"Tambotalo"},
	["tlt"] = {"Sou Nama", "Teluti"},
	["tlu"] = {"Tulehu"},
	["tlv"] = {"Taliabu"},
	["tlx"] = {"Khehek"},
	["tly"] = {"Talysh"},
	["tma"] = {"Tama (Chad)"},
	["tmb"] = {"Katbol", "Avava"},
	["tmc"] = {"Tumak"},
	["tmd"] = {"Haruai"},
	["tme"] = {"Tremembé"},
	["tmf"] = {"Toba-Maskoy"},
	["tmg"] = {"Ternateño"},
	["tmh"] = {"Tamashek"},
	["tmi"] = {"Tutuba"},
	["tmj"] = {"Samarokena"},
	["tmk"] = {"Northwestern Tamang"},
	["tml"] = {"Tamnim Citak"},
	["tmm"] = {"Tai Thanh"},
	["tmn"] = {"Taman (Indonesia)"},
	["tmo"] = {"Temoq"},
	["tmq"] = {"Tumleo"},
	["tmr"] = {"Jewish Babylonian Aramaic (ca. 200-1200 CE)"},
	["tms"] = {"Tima"},
	["tmt"] = {"Tasmate"},
	["tmu"] = {"Iau"},
	["tmv"] = {"Tembo (Motembo)"},
	["tmw"] = {"Temuan"},
	["tmy"] = {"Tami"},
	["tmz"] = {"Tamanaku"},
	["tna"] = {"Tacana"},
	["tnb"] = {"Western Tunebo"},
	["tnc"] = {"Tanimuca-Retuarã"},
	["tnd"] = {"Angosturas Tunebo"},
	["tng"] = {"Tobanga"},
	["tnh"] = {"Maiani"},
	["tni"] = {"Tandia"},
	["tnk"] = {"Kwamera"},
	["tnl"] = {"Lenakel"},
	["tnm"] = {"Tabla"},
	["tnn"] = {"North Tanna"},
	["tno"] = {"Toromono"},
	["tnp"] = {"Whitesands"},
	["tnq"] = {"Taino"},
	["tnr"] = {"Ménik"},
	["tns"] = {"Tenis"},
	["tnt"] = {"Tontemboan"},
	["tnu"] = {"Tay Khang"},
	["tnv"] = {"Tangchangya"},
	["tnw"] = {"Tonsawang"},
	["tnx"] = {"Tanema"},
	["tny"] = {"Tongwe"},
	["tnz"] = {"Ten'edn"},
	["tob"] = {"Toba"},
	["toc"] = {"Coyutla Totonac"},
	["tod"] = {"Toma"},
	["tof"] = {"Gizrra"},
	["tog"] = {"Tonga (Nyasa)"},
	["toh"] = {"Gitonga"},
	["toi"] = {"Tonga (Zambia)"},
	["toj"] = {"Tojolabal"},
	["tol"] = {"Tolowa"},
	["tom"] = {"Tombulu"},
	["too"] = {"Xicotepec De Juárez Totonac"},
	["top"] = {"Papantla Totonac"},
	["toq"] = {"Toposa"},
	["tor"] = {"Togbo-Vara Banda"},
	["tos"] = {"Highland Totonac"},
	["tou"] = {"Tho"},
	["tov"] = {"Upper Taromi"},
	["tow"] = {"Jemez"},
	["tox"] = {"Tobian"},
	["toy"] = {"Topoiyo"},
	["toz"] = {"To"},
	["tpa"] = {"Taupota"},
	["tpc"] = {"Azoyú Me'phaa", "Azoyú Tlapanec"},
	["tpe"] = {"Tippera"},
	["tpf"] = {"Tarpia"},
	["tpg"] = {"Kula"},
	["tpi"] = {"Tok Pisin"},
	["tpj"] = {"Tapieté"},
	["tpk"] = {"Tupinikin"},
	["tpl"] = {"Tlacoapa Me'phaa", "Tlacoapa Tlapanec"},
	["tpm"] = {"Tampulma"},
	["tpn"] = {"Tupinambá"},
	["tpo"] = {"Tai Pao"},
	["tpp"] = {"Pisaflores Tepehua"},
	["tpq"] = {"Tukpa"},
	["tpr"] = {"Tuparí"},
	["tpt"] = {"Tlachichilco Tepehua"},
	["tpu"] = {"Tampuan"},
	["tpv"] = {"Tanapag"},
	["tpw"] = {"Tupí"},
	["tpx"] = {"Acatepec Me'phaa", "Acatepec Tlapanec"},
	["tpy"] = {"Trumai"},
	["tpz"] = {"Tinputz"},
	["tqb"] = {"Tembé"},
	["tql"] = {"Lehali"},
	["tqm"] = {"Turumsa"},
	["tqn"] = {"Tenino"},
	["tqo"] = {"Toaripi"},
	["tqp"] = {"Tomoip"},
	["tqq"] = {"Tunni"},
	["tqr"] = {"Torona"},
	["tqt"] = {"Western Totonac"},
	["tqu"] = {"Touo"},
	["tqw"] = {"Tonkawa"},
	["tra"] = {"Tirahi"},
	["trb"] = {"Terebu"},
	["trc"] = {"Copala Triqui"},
	["trd"] = {"Turi"},
	["tre"] = {"East Tarangan"},
	["trf"] = {"Trinidadian Creole English"},
	["trg"] = {"Lishán Didán"},
	["trh"] = {"Turaka"},
	["tri"] = {"Trió"},
	["trj"] = {"Toram"},
	["trk"] = {"Turkic languages"},
	["trl"] = {"Traveller Scottish"},
	["trm"] = {"Tregami"},
	["trn"] = {"Trinitario"},
	["tro"] = {"Tarao Naga"},
	["trp"] = {"Kok Borok"},
	["trq"] = {"San Martín Itunyoso Triqui"},
	["trr"] = {"Taushiro"},
	["trs"] = {"Chicahuaxtla Triqui"},
	["trt"] = {"Tunggare"},
	["tru"] = {"Turoyo", "Surayt"},
	["trv"] = {"Taroko"},
	["trw"] = {"Torwali"},
	["trx"] = {"Tringgus-Sembaan Bidayuh"},
	["try"] = {"Turung"},
	["trz"] = {"Torá"},
	["tsa"] = {"Tsaangi"},
	["tsb"] = {"Tsamai"},
	["tsc"] = {"Tswa"},
	["tsd"] = {"Tsakonian"},
	["tse"] = {"Tunisian Sign Language"},
	["tsg"] = {"Tausug"},
	["tsh"] = {"Tsuvan"},
	["tsi"] = {"Tsimshian"},
	["tsj"] = {"Tshangla"},
	["tsk"] = {"Tseku"},
	["tsl"] = {"Ts'ün-Lao"},
	["tsm"] = {"Turkish Sign Language", "Türk İşaret Dili"},
	["tsp"] = {"Northern Toussian"},
	["tsq"] = {"Thai Sign Language"},
	["tsr"] = {"Akei"},
	["tss"] = {"Taiwan Sign Language"},
	["tst"] = {"Tondi Songway Kiini"},
	["tsu"] = {"Tsou"},
	["tsv"] = {"Tsogo"},
	["tsw"] = {"Tsishingini"},
	["tsx"] = {"Mubami"},
	["tsy"] = {"Tebul Sign Language"},
	["tsz"] = {"Purepecha"},
	["tta"] = {"Tutelo"},
	["ttb"] = {"Gaa"},
	["ttc"] = {"Tektiteko"},
	["ttd"] = {"Tauade"},
	["tte"] = {"Bwanabwana"},
	["ttf"] = {"Tuotomb"},
	["ttg"] = {"Tutong"},
	["tth"] = {"Upper Ta'oih"},
	["tti"] = {"Tobati"},
	["ttj"] = {"Tooro"},
	["ttk"] = {"Totoro"},
	["ttl"] = {"Totela"},
	["ttm"] = {"Northern Tutchone"},
	["ttn"] = {"Towei"},
	["tto"] = {"Lower Ta'oih"},
	["ttp"] = {"Tombelala"},
	["ttq"] = {"Tawallammat Tamajaq"},
	["ttr"] = {"Tera"},
	["tts"] = {"Northeastern Thai"},
	["ttt"] = {"Muslim Tat"},
	["ttu"] = {"Torau"},
	["ttv"] = {"Titan"},
	["ttw"] = {"Long Wat"},
	["tty"] = {"Sikaritai"},
	["ttz"] = {"Tsum"},
	["tua"] = {"Wiarumus"},
	["tub"] = {"Tübatulabal"},
	["tuc"] = {"Mutu"},
	["tud"] = {"Tuxá"},
	["tue"] = {"Tuyuca"},
	["tuf"] = {"Central Tunebo"},
	["tug"] = {"Tunia"},
	["tuh"] = {"Taulil"},
	["tui"] = {"Tupuri"},
	["tuj"] = {"Tugutil"},
	["tul"] = {"Tula"},
	["tum"] = {"Tumbuka"},
	["tun"] = {"Tunica"},
	["tuo"] = {"Tucano"},
	["tup"] = {"Tupi languages"},
	["tuq"] = {"Tedaga"},
	["tus"] = {"Tuscarora"},
	["tut"] = {"Altaic languages"},
	["tuu"] = {"Tututni"},
	["tuv"] = {"Turkana"},
	["tuw"] = {"Tungus languages"},
	["tux"] = {"Tuxináwa"},
	["tuy"] = {"Tugen"},
	["tuz"] = {"Turka"},
	["tva"] = {"Vaghua"},
	["tvd"] = {"Tsuvadi"},
	["tve"] = {"Te'un"},
	["tvk"] = {"Southeast Ambrym"},
	["tvl"] = {"Tuvalu"},
	["tvm"] = {"Tela-Masbuar"},
	["tvn"] = {"Tavoyan"},
	["tvo"] = {"Tidore"},
	["tvs"] = {"Taveta"},
	["tvt"] = {"Tutsa Naga"},
	["tvu"] = {"Tunen"},
	["tvw"] = {"Sedoa"},
	["tvx"] = {"Taivoan"},
	["tvy"] = {"Timor Pidgin"},
	["twa"] = {"Twana"},
	["twb"] = {"Western Tawbuid"},
	["twc"] = {"Teshenawa"},
	["twd"] = {"Twents"},
	["twe"] = {"Tewa (Indonesia)"},
	["twf"] = {"Northern Tiwa"},
	["twg"] = {"Tereweng"},
	["twh"] = {"Tai Dón"},
	["twl"] = {"Tawara"},
	["twm"] = {"Tawang Monpa"},
	["twn"] = {"Twendi"},
	["two"] = {"Tswapong"},
	["twp"] = {"Ere"},
	["twq"] = {"Tasawaq"},
	["twr"] = {"Southwestern Tarahumara"},
	["twt"] = {"Turiwára"},
	["twu"] = {"Termanu"},
	["tww"] = {"Tuwari"},
	["twx"] = {"Tewe"},
	["twy"] = {"Tawoyan"},
	["txa"] = {"Tombonuo"},
	["txb"] = {"Tokharian B"},
	["txc"] = {"Tsetsaut"},
	["txe"] = {"Totoli"},
	["txg"] = {"Tangut"},
	["txh"] = {"Thracian"},
	["txi"] = {"Ikpeng"},
	["txj"] = {"Tarjumo"},
	["txm"] = {"Tomini"},
	["txn"] = {"West Tarangan"},
	["txo"] = {"Toto"},
	["txq"] = {"Tii"},
	["txr"] = {"Tartessian"},
	["txs"] = {"Tonsea"},
	["txt"] = {"Citak"},
	["txu"] = {"Kayapó"},
	["txx"] = {"Tatana"},
	["txy"] = {"Tanosy Malagasy"},
	["tya"] = {"Tauya"},
	["tye"] = {"Kyanga"},
	["tyh"] = {"O'du"},
	["tyi"] = {"Teke-Tsaayi"},
	["tyj"] = {"Tai Do", "Tai Yo"},
	["tyl"] = {"Thu Lao"},
	["tyn"] = {"Kombai"},
	["typ"] = {"Thaypan"},
	["tyr"] = {"Tai Daeng"},
	["tys"] = {"Tày Sa Pa"},
	["tyt"] = {"Tày Tac"},
	["tyu"] = {"Kua"},
	["tyv"] = {"Tuvinian"},
	["tyx"] = {"Teke-Tyee"},
	["tyz"] = {"Tày"},
	["tza"] = {"Tanzanian Sign Language"},
	["tzh"] = {"Tzeltal"},
	["tzj"] = {"Tz'utujil"},
	["tzl"] = {"Talossan"},
	["tzm"] = {"Central Atlas Tamazight"},
	["tzn"] = {"Tugun"},
	["tzo"] = {"Tzotzil"},
	["tzx"] = {"Tabriak"},
	["uam"] = {"Uamué"},
	["uan"] = {"Kuan"},
	["uar"] = {"Tairuma"},
	["uba"] = {"Ubang"},
	["ubi"] = {"Ubi"},
	["ubl"] = {"Buhi'non Bikol"},
	["ubr"] = {"Ubir"},
	["ubu"] = {"Umbu-Ungu"},
	["uby"] = {"Ubykh"},
	["uda"] = {"Uda"},
	["ude"] = {"Udihe"},
	["udg"] = {"Muduga"},
	["udi"] = {"Udi"},
	["udj"] = {"Ujir"},
	["udl"] = {"Wuzlam"},
	["udm"] = {"Udmurt"},
	["udu"] = {"Uduk"},
	["ues"] = {"Kioko"},
	["ufi"] = {"Ufim"},
	["uga"] = {"Ugaritic"},
	["ugb"] = {"Kuku-Ugbanh"},
	["uge"] = {"Ughele"},
	["ugn"] = {"Ugandan Sign Language"},
	["ugo"] = {"Ugong"},
	["ugy"] = {"Uruguayan Sign Language"},
	["uha"] = {"Uhami"},
	["uhn"] = {"Damal"},
	["uis"] = {"Uisai"},
	["uiv"] = {"Iyive"},
	["uji"] = {"Tanjijili"},
	["uka"] = {"Kaburi"},
	["ukg"] = {"Ukuriguma"},
	["ukh"] = {"Ukhwejo"},
	["ukk"] = {"Muak Sa-aak"},
	["ukl"] = {"Ukrainian Sign Language"},
	["ukp"] = {"Ukpe-Bayobiri"},
	["ukq"] = {"Ukwa"},
	["uks"] = {"Urubú-Kaapor Sign Language", "Kaapor Sign Language"},
	["uku"] = {"Ukue"},
	["ukw"] = {"Ukwuani-Aboh-Ndoni"},
	["uky"] = {"Kuuk-Yak"},
	["ula"] = {"Fungwa"},
	["ulb"] = {"Ulukwumi"},
	["ulc"] = {"Ulch"},
	["ule"] = {"Lule"},
	["ulf"] = {"Usku", "Afra"},
	["uli"] = {"Ulithian"},
	["ulk"] = {"Meriam Mir"},
	["ull"] = {"Ullatan"},
	["ulm"] = {"Ulumanda'"},
	["uln"] = {"Unserdeutsch"},
	["ulu"] = {"Uma' Lung"},
	["ulw"] = {"Ulwa"},
	["uma"] = {"Umatilla"},
	["umb"] = {"Umbundu"},
	["umc"] = {"Marrucinian"},
	["umd"] = {"Umbindhamu"},
	["umg"] = {"Morrobalama", "Umbuygamu"},
	["umi"] = {"Ukit"},
	["umm"] = {"Umon"},
	["umn"] = {"Makyan Naga"},
	["umo"] = {"Umotína"},
	["ump"] = {"Umpila"},
	["umr"] = {"Umbugarla"},
	["ums"] = {"Pendau"},
	["umu"] = {"Munsee"},
	["una"] = {"North Watut"},
	["und"] = {"Undetermined"},
	["une"] = {"Uneme"},
	["ung"] = {"Ngarinyin"},
	["unk"] = {"Enawené-Nawé"},
	["unm"] = {"Unami"},
	["unn"] = {"Kurnai"},
	["unr"] = {"Mundari"},
	["unu"] = {"Unubahe"},
	["unx"] = {"Munda"},
	["unz"] = {"Unde Kaili"},
	["upi"] = {"Umeda"},
	["upv"] = {"Uripiv-Wala-Rano-Atchin"},
	["ura"] = {"Urarina"},
	["urb"] = {"Urubú-Kaapor", "Kaapor"},
	["urc"] = {"Urningangg"},
	["ure"] = {"Uru"},
	["urf"] = {"Uradhi"},
	["urg"] = {"Urigina"},
	["urh"] = {"Urhobo"},
	["uri"] = {"Urim"},
	["urj"] = {"Uralic languages"},
	["urk"] = {"Urak Lawoi'"},
	["url"] = {"Urali"},
	["urm"] = {"Urapmin"},
	["urn"] = {"Uruangnirin"},
	["uro"] = {"Ura (Papua New Guinea)"},
	["urp"] = {"Uru-Pa-In"},
	["urr"] = {"Lehalurup", "Löyöp"},
	["urt"] = {"Urat"},
	["uru"] = {"Urumi"},
	["urv"] = {"Uruava"},
	["urw"] = {"Sop"},
	["urx"] = {"Urimo"},
	["ury"] = {"Orya"},
	["urz"] = {"Uru-Eu-Wau-Wau"},
	["usa"] = {"Usarufa"},
	["ush"] = {"Ushojo"},
	["usi"] = {"Usui"},
	["usk"] = {"Usaghade"},
	["usp"] = {"Uspanteco"},
	["uss"] = {"us-Saare"},
	["usu"] = {"Uya"},
	["uta"] = {"Otank"},
	["ute"] = {"Ute-Southern Paiute"},
	["uth"] = {"ut-Hun"},
	["utp"] = {"Amba (Solomon Islands)"},
	["utr"] = {"Etulo"},
	["utu"] = {"Utu"},
	["uum"] = {"Urum"},
	["uun"] = {"Kulon-Pazeh"},
	["uur"] = {"Ura (Vanuatu)"},
	["uuu"] = {"U"},
	["uve"] = {"West Uvean", "Fagauvea"},
	["uvh"] = {"Uri"},
	["uvl"] = {"Lote"},
	["uwa"] = {"Kuku-Uwanh"},
	["uya"] = {"Doko-Uyanga"},
	["uzn"] = {"Northern Uzbek"},
	["uzs"] = {"Southern Uzbek"},
	["vaa"] = {"Vaagri Booli"},
	["vae"] = {"Vale"},
	["vaf"] = {"Vafsi"},
	["vag"] = {"Vagla"},
	["vah"] = {"Varhadi-Nagpuri"},
	["vai"] = {"Vai"},
	["vaj"] = {"Sekele", "Northwestern ǃKung", "Vasekele"},
	["val"] = {"Vehes"},
	["vam"] = {"Vanimo"},
	["van"] = {"Valman"},
	["vao"] = {"Vao"},
	["vap"] = {"Vaiphei"},
	["var"] = {"Huarijio"},
	["vas"] = {"Vasavi"},
	["vau"] = {"Vanuma"},
	["vav"] = {"Varli"},
	["vay"] = {"Wayu"},
	["vbb"] = {"Southeast Babar"},
	["vbk"] = {"Southwestern Bontok"},
	["vec"] = {"Venetian"},
	["ved"] = {"Veddah"},
	["vel"] = {"Veluws"},
	["vem"] = {"Vemgo-Mabas"},
	["veo"] = {"Ventureño"},
	["vep"] = {"Veps"},
	["ver"] = {"Mom Jango"},
	["vgr"] = {"Vaghri"},
	["vgt"] = {"Vlaamse Gebarentaal", "Flemish Sign Language"},
	["vic"] = {"Virgin Islands Creole English"},
	["vid"] = {"Vidunda"},
	["vif"] = {"Vili"},
	["vig"] = {"Viemo"},
	["vil"] = {"Vilela"},
	["vin"] = {"Vinza"},
	["vis"] = {"Vishavan"},
	["vit"] = {"Viti"},
	["viv"] = {"Iduna"},
	["vka"] = {"Kariyarra"},
	["vki"] = {"Ija-Zuba"},
	["vkj"] = {"Kujarge"},
	["vkk"] = {"Kaur"},
	["vkl"] = {"Kulisusu"},
	["vkm"] = {"Kamakan"},
	["vko"] = {"Kodeoha"},
	["vkp"] = {"Korlai Creole Portuguese"},
	["vkt"] = {"Tenggarong Kutai Malay"},
	["vku"] = {"Kurrama"},
	["vlp"] = {"Valpei"},
	["vls"] = {"Vlaams"},
	["vma"] = {"Martuyhunira"},
	["vmb"] = {"Barbaram"},
	["vmc"] = {"Juxtlahuaca Mixtec"},
	["vmd"] = {"Mudu Koraga"},
	["vme"] = {"East Masela"},
	["vmf"] = {"Mainfränkisch"},
	["vmg"] = {"Lungalunga"},
	["vmh"] = {"Maraghei"},
	["vmi"] = {"Miwa"},
	["vmj"] = {"Ixtayutla Mixtec"},
	["vmk"] = {"Makhuwa-Shirima"},
	["vml"] = {"Malgana"},
	["vmm"] = {"Mitlatongo Mixtec"},
	["vmp"] = {"Soyaltepec Mazatec"},
	["vmq"] = {"Soyaltepec Mixtec"},
	["vmr"] = {"Marenje"},
	["vms"] = {"Moksela"},
	["vmu"] = {"Muluridyi"},
	["vmv"] = {"Valley Maidu"},
	["vmw"] = {"Makhuwa"},
	["vmx"] = {"Tamazola Mixtec"},
	["vmy"] = {"Ayautla Mazatec"},
	["vmz"] = {"Mazatlán Mazatec"},
	["vnk"] = {"Vano", "Lovono"},
	["vnm"] = {"Vinmavis", "Neve'ei"},
	["vnp"] = {"Vunapu"},
	["vor"] = {"Voro"},
	["vot"] = {"Votic"},
	["vra"] = {"Vera'a"},
	["vro"] = {"Võro"},
	["vrs"] = {"Varisi"},
	["vrt"] = {"Burmbar", "Banam Bay"},
	["vsi"] = {"Moldova Sign Language"},
	["vsl"] = {"Venezuelan Sign Language"},
	["vsv"] = {"Valencian Sign Language", "Llengua de signes valenciana"},
	["vto"] = {"Vitou"},
	["vum"] = {"Vumbu"},
	["vun"] = {"Vunjo"},
	["vut"] = {"Vute"},
	["vwa"] = {"Awa (China)"},
	["waa"] = {"Walla Walla"},
	["wab"] = {"Wab"},
	["wac"] = {"Wasco-Wishram"},
	["wad"] = {"Wandamen"},
	["wae"] = {"Walser"},
	["waf"] = {"Wakoná"},
	["wag"] = {"Wa'ema"},
	["wah"] = {"Watubela"},
	["wai"] = {"Wares"},
	["waj"] = {"Waffa"},
	["wak"] = {"Wakashan languages"},
	["wal"] = {"Wolaytta", "Wolaitta"},
	["wam"] = {"Wampanoag"},
	["wan"] = {"Wan"},
	["wao"] = {"Wappo"},
	["wap"] = {"Wapishana"},
	["waq"] = {"Wagiman"},
	["war"] = {"Waray (Philippines)"},
	["was"] = {"Washo"},
	["wat"] = {"Kaninuwa"},
	["wau"] = {"Waurá"},
	["wav"] = {"Waka"},
	["waw"] = {"Waiwai"},
	["wax"] = {"Watam", "Marangis"},
	["way"] = {"Wayana"},
	["waz"] = {"Wampur"},
	["wba"] = {"Warao"},
	["wbb"] = {"Wabo"},
	["wbe"] = {"Waritai"},
	["wbf"] = {"Wara"},
	["wbh"] = {"Wanda"},
	["wbi"] = {"Vwanji"},
	["wbj"] = {"Alagwa"},
	["wbk"] = {"Waigali"},
	["wbl"] = {"Wakhi"},
	["wbm"] = {"Wa"},
	["wbp"] = {"Warlpiri"},
	["wbq"] = {"Waddar"},
	["wbr"] = {"Wagdi"},
	["wbs"] = {"West Bengal Sign Language"},
	["wbt"] = {"Warnman"},
	["wbv"] = {"Wajarri"},
	["wbw"] = {"Woi"},
	["wca"] = {"Yanomámi"},
	["wci"] = {"Waci Gbe"},
	["wdd"] = {"Wandji"},
	["wdg"] = {"Wadaginam"},
	["wdj"] = {"Wadjiginy"},
	["wdk"] = {"Wadikali"},
	["wdu"] = {"Wadjigu"},
	["wdy"] = {"Wadjabangayi"},
	["wea"] = {"Wewaw"},
	["wec"] = {"Wè Western"},
	["wed"] = {"Wedau"},
	["weg"] = {"Wergaia"},
	["weh"] = {"Weh"},
	["wei"] = {"Kiunum"},
	["wem"] = {"Weme Gbe"},
	["wen"] = {"Sorbian languages"},
	["weo"] = {"Wemale"},
	["wep"] = {"Westphalien"},
	["wer"] = {"Weri"},
	["wes"] = {"Cameroon Pidgin"},
	["wet"] = {"Perai"},
	["weu"] = {"Rawngtu Chin"},
	["wew"] = {"Wejewa"},
	["wfg"] = {"Yafi", "Zorop"},
	["wga"] = {"Wagaya"},
	["wgb"] = {"Wagawaga"},
	["wgg"] = {"Wangkangurru", "Wangganguru"},
	["wgi"] = {"Wahgi"},
	["wgo"] = {"Waigeo"},
	["wgu"] = {"Wirangu"},
	["wgy"] = {"Warrgamay"},
	["wha"] = {"Sou Upaa", "Manusela"},
	["whg"] = {"North Wahgi"},
	["whk"] = {"Wahau Kenyah"},
	["whu"] = {"Wahau Kayan"},
	["wib"] = {"Southern Toussian"},
	["wic"] = {"Wichita"},
	["wie"] = {"Wik-Epa"},
	["wif"] = {"Wik-Keyangan"},
	["wig"] = {"Wik Ngathan"},
	["wih"] = {"Wik-Me'anha"},
	["wii"] = {"Minidien"},
	["wij"] = {"Wik-Iiyanh"},
	["wik"] = {"Wikalkan"},
	["wil"] = {"Wilawila"},
	["wim"] = {"Wik-Mungkan"},
	["win"] = {"Ho-Chunk"},
	["wir"] = {"Wiraféd"},
	["wiu"] = {"Wiru"},
	["wiv"] = {"Vitu"},
	["wiy"] = {"Wiyot"},
	["wja"] = {"Waja"},
	["wji"] = {"Warji"},
	["wka"] = {"Kw'adza"},
	["wkb"] = {"Kumbaran"},
	["wkd"] = {"Wakde", "Mo"},
	["wkl"] = {"Kalanadi"},
	["wkr"] = {"Keerray-Woorroong"},
	["wku"] = {"Kunduvadi"},
	["wkw"] = {"Wakawaka"},
	["wky"] = {"Wangkayutyuru"},
	["wla"] = {"Walio"},
	["wlc"] = {"Mwali Comorian"},
	["wle"] = {"Wolane"},
	["wlg"] = {"Kunbarlang"},
	["wli"] = {"Waioli"},
	["wlk"] = {"Wailaki"},
	["wll"] = {"Wali (Sudan)"},
	["wlm"] = {"Middle Welsh"},
	["wlo"] = {"Wolio"},
	["wlr"] = {"Wailapa"},
	["wls"] = {"Wallisian"},
	["wlu"] = {"Wuliwuli"},
	["wlv"] = {"Wichí Lhamtés Vejoz"},
	["wlw"] = {"Walak"},
	["wlx"] = {"Wali (Ghana)"},
	["wly"] = {"Waling"},
	["wma"] = {"Mawa (Nigeria)"},
	["wmb"] = {"Wambaya"},
	["wmc"] = {"Wamas"},
	["wmd"] = {"Mamaindé"},
	["wme"] = {"Wambule"},
	["wmh"] = {"Waima'a"},
	["wmi"] = {"Wamin"},
	["wmm"] = {"Maiwa (Indonesia)"},
	["wmn"] = {"Waamwang"},
	["wmo"] = {"Wom (Papua New Guinea)"},
	["wms"] = {"Wambon"},
	["wmt"] = {"Walmajarri"},
	["wmw"] = {"Mwani"},
	["wmx"] = {"Womo"},
	["wnb"] = {"Wanambre"},
	["wnc"] = {"Wantoat"},
	["wnd"] = {"Wandarang"},
	["wne"] = {"Waneci"},
	["wng"] = {"Wanggom"},
	["wni"] = {"Ndzwani Comorian"},
	["wnk"] = {"Wanukaka"},
	["wnm"] = {"Wanggamala"},
	["wnn"] = {"Wunumara"},
	["wno"] = {"Wano"},
	["wnp"] = {"Wanap"},
	["wnu"] = {"Usan"},
	["wnw"] = {"Wintu"},
	["wny"] = {"Wanyi", "Waanyi"},
	["woa"] = {"Kuwema", "Tyaraity"},
	["wob"] = {"Wè Northern"},
	["woc"] = {"Wogeo"},
	["wod"] = {"Wolani"},
	["woe"] = {"Woleaian"},
	["wof"] = {"Gambian Wolof"},
	["wog"] = {"Wogamusin"},
	["woi"] = {"Kamang"},
	["wok"] = {"Longto"},
	["wom"] = {"Wom (Nigeria)"},
	["won"] = {"Wongo"},
	["woo"] = {"Manombai"},
	["wor"] = {"Woria"},
	["wos"] = {"Hanga Hundi"},
	["wow"] = {"Wawonii"},
	["woy"] = {"Weyto"},
	["wpc"] = {"Maco"},
	["wra"] = {"Warapu"},
	["wrb"] = {"Waluwarra", "Warluwara"},
	["wrd"] = {"Warduji"},
	["wrg"] = {"Warungu", "Gudjal"},
	["wrh"] = {"Wiradjuri"},
	["wri"] = {"Wariyangga"},
	["wrk"] = {"Garrwa"},
	["wrl"] = {"Warlmanpa"},
	["wrm"] = {"Warumungu"},
	["wrn"] = {"Warnang"},
	["wro"] = {"Worrorra"},
	["wrp"] = {"Waropen"},
	["wrr"] = {"Wardaman"},
	["wrs"] = {"Waris"},
	["wru"] = {"Waru"},
	["wrv"] = {"Waruna"},
	["wrw"] = {"Gugu Warra"},
	["wrx"] = {"Wae Rana"},
	["wry"] = {"Merwari"},
	["wrz"] = {"Waray (Australia)"},
	["wsa"] = {"Warembori"},
	["wsg"] = {"Adilabad Gondi"},
	["wsi"] = {"Wusi"},
	["wsk"] = {"Waskia"},
	["wsr"] = {"Owenia"},
	["wss"] = {"Wasa"},
	["wsu"] = {"Wasu"},
	["wsv"] = {"Wotapuri-Katarqalai"},
	["wtf"] = {"Watiwa"},
	["wth"] = {"Wathawurrung"},
	["wti"] = {"Berta"},
	["wtk"] = {"Watakataui"},
	["wtm"] = {"Mewati"},
	["wtw"] = {"Wotu"},
	["wua"] = {"Wikngenchera"},
	["wub"] = {"Wunambal"},
	["wud"] = {"Wudu"},
	["wuh"] = {"Wutunhua"},
	["wul"] = {"Silimo"},
	["wum"] = {"Wumbvu"},
	["wun"] = {"Bungu"},
	["wur"] = {"Wurrugu"},
	["wut"] = {"Wutung"},
	["wuu"] = {"Wu Chinese"},
	["wuv"] = {"Wuvulu-Aua"},
	["wux"] = {"Wulna"},
	["wuy"] = {"Wauyai"},
	["wwa"] = {"Waama"},
	["wwb"] = {"Wakabunga"},
	["wwo"] = {"Wetamut", "Dorig"},
	["wwr"] = {"Warrwa"},
	["www"] = {"Wawa"},
	["wxa"] = {"Waxianghua"},
	["wxw"] = {"Wardandi"},
	["wya"] = {"Wyandot"},
	["wyb"] = {"Wangaaybuwan-Ngiyambaa"},
	["wyi"] = {"Woiwurrung"},
	["wym"] = {"Wymysorys"},
	["wyr"] = {"Wayoró"},
	["wyy"] = {"Western Fijian"},
	["xaa"] = {"Andalusian Arabic"},
	["xab"] = {"Sambe"},
	["xac"] = {"Kachari"},
	["xad"] = {"Adai"},
	["xae"] = {"Aequian"},
	["xag"] = {"Aghwan"},
	["xai"] = {"Kaimbé"},
	["xaj"] = {"Ararandewára"},
	["xak"] = {"Máku"},
	["xal"] = {"Kalmyk", "Oirat"},
	["xam"] = {"ǀXam"},
	["xan"] = {"Xamtanga"},
	["xao"] = {"Khao"},
	["xap"] = {"Apalachee"},
	["xaq"] = {"Aquitanian"},
	["xar"] = {"Karami"},
	["xas"] = {"Kamas"},
	["xat"] = {"Katawixi"},
	["xau"] = {"Kauwera"},
	["xav"] = {"Xavánte"},
	["xaw"] = {"Kawaiisu"},
	["xay"] = {"Kayan Mahakam"},
	["xbb"] = {"Lower Burdekin"},
	["xbc"] = {"Bactrian"},
	["xbd"] = {"Bindal"},
	["xbe"] = {"Bigambal"},
	["xbg"] = {"Bunganditj"},
	["xbi"] = {"Kombio"},
	["xbj"] = {"Birrpayi"},
	["xbm"] = {"Middle Breton"},
	["xbn"] = {"Kenaboi"},
	["xbo"] = {"Bolgarian"},
	["xbp"] = {"Bibbulman"},
	["xbr"] = {"Kambera"},
	["xbw"] = {"Kambiwá"},
	["xby"] = {"Batjala", "Batyala"},
	["xcb"] = {"Cumbric"},
	["xcc"] = {"Camunic"},
	["xce"] = {"Celtiberian"},
	["xcg"] = {"Cisalpine Gaulish"},
	["xch"] = {"Chemakum", "Chimakum"},
	["xcl"] = {"Classical Armenian"},
	["xcm"] = {"Comecrudo"},
	["xcn"] = {"Cotoname"},
	["xco"] = {"Chorasmian"},
	["xcr"] = {"Carian"},
	["xct"] = {"Classical Tibetan"},
	["xcu"] = {"Curonian"},
	["xcv"] = {"Chuvantsy"},
	["xcw"] = {"Coahuilteco"},
	["xcy"] = {"Cayuse"},
	["xda"] = {"Darkinyung"},
	["xdc"] = {"Dacian"},
	["xdk"] = {"Dharuk"},
	["xdm"] = {"Edomite"},
	["xdo"] = {"Kwandu"},
	["xdy"] = {"Malayic Dayak"},
	["xeb"] = {"Eblan"},
	["xed"] = {"Hdi"},
	["xeg"] = {"ǁXegwi"},
	["xel"] = {"Kelo"},
	["xem"] = {"Kembayan"},
	["xep"] = {"Epi-Olmec"},
	["xer"] = {"Xerénte"},
	["xes"] = {"Kesawai"},
	["xet"] = {"Xetá"},
	["xeu"] = {"Keoru-Ahia"},
	["xfa"] = {"Faliscan"},
	["xga"] = {"Galatian"},
	["xgb"] = {"Gbin"},
	["xgd"] = {"Gudang"},
	["xgf"] = {"Gabrielino-Fernandeño"},
	["xgg"] = {"Goreng"},
	["xgi"] = {"Garingbal"},
	["xgl"] = {"Galindan"},
	["xgm"] = {"Dharumbal", "Guwinmal"},
	["xgn"] = {"Mongolian languages"},
	["xgr"] = {"Garza"},
	["xgu"] = {"Unggumi"},
	["xgw"] = {"Guwa"},
	["xha"] = {"Harami"},
	["xhc"] = {"Hunnic"},
	["xhd"] = {"Hadrami"},
	["xhe"] = {"Khetrani"},
	["xhr"] = {"Hernican"},
	["xht"] = {"Hattic"},
	["xhu"] = {"Hurrian"},
	["xhv"] = {"Khua"},
	["xib"] = {"Iberian"},
	["xii"] = {"Xiri"},
	["xil"] = {"Illyrian"},
	["xin"] = {"Xinca"},
	["xir"] = {"Xiriâna"},
	["xis"] = {"Kisan"},
	["xiv"] = {"Indus Valley Language"},
	["xiy"] = {"Xipaya"},
	["xjb"] = {"Minjungbal"},
	["xjt"] = {"Jaitmatang"},
	["xka"] = {"Kalkoti"},
	["xkb"] = {"Northern Nago"},
	["xkc"] = {"Kho'ini"},
	["xkd"] = {"Mendalam Kayan"},
	["xke"] = {"Kereho"},
	["xkf"] = {"Khengkha"},
	["xkg"] = {"Kagoro"},
	["xki"] = {"Kenyan Sign Language"},
	["xkj"] = {"Kajali"},
	["xkk"] = {"Kaco'"},
	["xkl"] = {"Mainstream Kenyah"},
	["xkn"] = {"Kayan River Kayan"},
	["xko"] = {"Kiorr"},
	["xkp"] = {"Kabatei"},
	["xkq"] = {"Koroni"},
	["xkr"] = {"Xakriabá"},
	["xks"] = {"Kumbewaha"},
	["xkt"] = {"Kantosi"},
	["xku"] = {"Kaamba"},
	["xkv"] = {"Kgalagadi"},
	["xkw"] = {"Kembra"},
	["xkx"] = {"Karore"},
	["xky"] = {"Uma' Lasan"},
	["xkz"] = {"Kurtokha"},
	["xla"] = {"Kamula"},
	["xlb"] = {"Loup B"},
	["xlc"] = {"Lycian"},
	["xld"] = {"Lydian"},
	["xle"] = {"Lemnian"},
	["xlg"] = {"Ligurian (Ancient)"},
	["xli"] = {"Liburnian"},
	["xln"] = {"Alanic"},
	["xlo"] = {"Loup A"},
	["xlp"] = {"Lepontic"},
	["xls"] = {"Lusitanian"},
	["xlu"] = {"Cuneiform Luwian"},
	["xly"] = {"Elymian"},
	["xma"] = {"Mushungulu"},
	["xmb"] = {"Mbonga"},
	["xmc"] = {"Makhuwa-Marrevone"},
	["xmd"] = {"Mbudum"},
	["xme"] = {"Median"},
	["xmf"] = {"Mingrelian"},
	["xmg"] = {"Mengaka"},
	["xmh"] = {"Kugu-Muminh"},
	["xmj"] = {"Majera"},
	["xmk"] = {"Ancient Macedonian"},
	["xml"] = {"Malaysian Sign Language"},
	["xmm"] = {"Manado Malay"},
	["xmn"] = {"Manichaean Middle Persian"},
	["xmo"] = {"Morerebi"},
	["xmp"] = {"Kuku-Mu'inh"},
	["xmq"] = {"Kuku-Mangk"},
	["xmr"] = {"Meroitic"},
	["xms"] = {"Moroccan Sign Language"},
	["xmt"] = {"Matbat"},
	["xmu"] = {"Kamu"},
	["xmv"] = {"Antankarana Malagasy", "Tankarana Malagasy"},
	["xmw"] = {"Tsimihety Malagasy"},
	["xmx"] = {"Maden"},
	["xmy"] = {"Mayaguduna"},
	["xmz"] = {"Mori Bawah"},
	["xna"] = {"Ancient North Arabian"},
	["xnb"] = {"Kanakanabu"},
	["xnd"] = {"Na-Dene languages"},
	["xng"] = {"Middle Mongolian"},
	["xnh"] = {"Kuanhua"},
	["xni"] = {"Ngarigu"},
	["xnk"] = {"Nganakarti"},
	["xnn"] = {"Northern Kankanay"},
	["xno"] = {"Anglo-Norman"},
	["xnr"] = {"Kangri"},
	["xns"] = {"Kanashi"},
	["xnt"] = {"Narragansett"},
	["xnu"] = {"Nukunul"},
	["xny"] = {"Nyiyaparli"},
	["xnz"] = {"Kenzi", "Mattoki"},
	["xoc"] = {"O'chi'chi'"},
	["xod"] = {"Kokoda"},
	["xog"] = {"Soga"},
	["xoi"] = {"Kominimung"},
	["xok"] = {"Xokleng"},
	["xom"] = {"Komo (Sudan)"},
	["xon"] = {"Konkomba"},
	["xoo"] = {"Xukurú"},
	["xop"] = {"Kopar"},
	["xor"] = {"Korubo"},
	["xow"] = {"Kowaki"},
	["xpa"] = {"Pirriya"},
	["xpc"] = {"Pecheneg"},
	["xpe"] = {"Liberia Kpelle"},
	["xpg"] = {"Phrygian"},
	["xpi"] = {"Pictish"},
	["xpj"] = {"Mpalitjanh"},
	["xpk"] = {"Kulina Pano"},
	["xpm"] = {"Pumpokol"},
	["xpn"] = {"Kapinawá"},
	["xpo"] = {"Pochutec"},
	["xpp"] = {"Puyo-Paekche"},
	["xpq"] = {"Mohegan-Pequot"},
	["xpr"] = {"Parthian"},
	["xps"] = {"Pisidian"},
	["xpt"] = {"Punthamara"},
	["xpu"] = {"Punic"},
	["xpy"] = {"Puyo"},
	["xqa"] = {"Karakhanid"},
	["xqt"] = {"Qatabanian"},
	["xra"] = {"Krahô"},
	["xrb"] = {"Eastern Karaboro"},
	["xrd"] = {"Gundungurra"},
	["xre"] = {"Kreye"},
	["xrg"] = {"Minang"},
	["xri"] = {"Krikati-Timbira"},
	["xrm"] = {"Armazic"},
	["xrn"] = {"Arin"},
	["xrq"] = {"Karranga"},
	["xrr"] = {"Raetic"},
	["xrt"] = {"Aranama-Tamique"},
	["xru"] = {"Marriammu"},
	["xrw"] = {"Karawa"},
	["xsa"] = {"Sabaean"},
	["xsb"] = {"Sambal"},
	["xsc"] = {"Scythian"},
	["xsd"] = {"Sidetic"},
	["xse"] = {"Sempan"},
	["xsh"] = {"Shamang"},
	["xsi"] = {"Sio"},
	["xsj"] = {"Subi"},
	["xsl"] = {"South Slavey"},
	["xsm"] = {"Kasem"},
	["xsn"] = {"Sanga (Nigeria)"},
	["xso"] = {"Solano"},
	["xsp"] = {"Silopi"},
	["xsq"] = {"Makhuwa-Saka"},
	["xsr"] = {"Sherpa"},
	["xss"] = {"Assan"},
	["xsu"] = {"Sanumá"},
	["xsv"] = {"Sudovian"},
	["xsy"] = {"Saisiyat"},
	["xta"] = {"Alcozauca Mixtec"},
	["xtb"] = {"Chazumba Mixtec"},
	["xtc"] = {"Katcha-Kadugli-Miri"},
	["xtd"] = {"Diuxi-Tilantongo Mixtec"},
	["xte"] = {"Ketengban"},
	["xtg"] = {"Transalpine Gaulish"},
	["xth"] = {"Yitha Yitha"},
	["xti"] = {"Sinicahua Mixtec"},
	["xtj"] = {"San Juan Teita Mixtec"},
	["xtl"] = {"Tijaltepec Mixtec"},
	["xtm"] = {"Magdalena Peñasco Mixtec"},
	["xtn"] = {"Northern Tlaxiaco Mixtec"},
	["xto"] = {"Tokharian A"},
	["xtp"] = {"San Miguel Piedras Mixtec"},
	["xtq"] = {"Tumshuqese"},
	["xtr"] = {"Early Tripuri"},
	["xts"] = {"Sindihui Mixtec"},
	["xtt"] = {"Tacahua Mixtec"},
	["xtu"] = {"Cuyamecalco Mixtec"},
	["xtv"] = {"Thawa"},
	["xtw"] = {"Tawandê"},
	["xty"] = {"Yoloxochitl Mixtec"},
	["xtz"] = {"Tasmanian"},
	["xua"] = {"Alu Kurumba"},
	["xub"] = {"Betta Kurumba"},
	["xud"] = {"Umiida"},
	["xug"] = {"Kunigami"},
	["xuj"] = {"Jennu Kurumba"},
	["xul"] = {"Ngunawal"},
	["xum"] = {"Umbrian"},
	["xun"] = {"Unggaranggu"},
	["xuo"] = {"Kuo"},
	["xup"] = {"Upper Umpqua"},
	["xur"] = {"Urartian"},
	["xut"] = {"Kuthant"},
	["xuu"] = {"Kxoe", "Khwedam"},
	["xve"] = {"Venetic"},
	["xvi"] = {"Kamviri"},
	["xvn"] = {"Vandalic"},
	["xvo"] = {"Volscian"},
	["xvs"] = {"Vestinian"},
	["xwa"] = {"Kwaza"},
	["xwc"] = {"Woccon"},
	["xwd"] = {"Wadi Wadi"},
	["xwe"] = {"Xwela Gbe"},
	["xwg"] = {"Kwegu"},
	["xwj"] = {"Wajuk"},
	["xwk"] = {"Wangkumara"},
	["xwl"] = {"Western Xwla Gbe"},
	["xwo"] = {"Written Oirat"},
	["xwr"] = {"Kwerba Mamberamo"},
	["xwt"] = {"Wotjobaluk"},
	["xww"] = {"Wemba Wemba"},
	["xxb"] = {"Boro (Ghana)"},
	["xxk"] = {"Ke'o"},
	["xxm"] = {"Minkin"},
	["xxr"] = {"Koropó"},
	["xxt"] = {"Tambora"},
	["xya"] = {"Yaygir"},
	["xyb"] = {"Yandjibara"},
	["xyj"] = {"Mayi-Yapi"},
	["xyk"] = {"Mayi-Kulan"},
	["xyl"] = {"Yalakalore"},
	["xyt"] = {"Mayi-Thakurti"},
	["xyy"] = {"Yorta Yorta"},
	["xzh"] = {"Zhang-Zhung"},
	["xzm"] = {"Zemgalian"},
	["xzp"] = {"Ancient Zapotec"},
	["yaa"] = {"Yaminahua"},
	["yab"] = {"Yuhup"},
	["yac"] = {"Pass Valley Yali"},
	["yad"] = {"Yagua"},
	["yae"] = {"Pumé"},
	["yaf"] = {"Yaka (Democratic Republic of Congo)"},
	["yag"] = {"Yámana"},
	["yah"] = {"Yazgulyam"},
	["yai"] = {"Yagnobi"},
	["yaj"] = {"Banda-Yangere"},
	["yak"] = {"Yakama"},
	["yal"] = {"Yalunka"},
	["yam"] = {"Yamba"},
	["yan"] = {"Mayangna"},
	["yao"] = {"Yao"},
	["yap"] = {"Yapese"},
	["yaq"] = {"Yaqui"},
	["yar"] = {"Yabarana"},
	["yas"] = {"Nugunu (Cameroon)"},
	["yat"] = {"Yambeta"},
	["yau"] = {"Yuwana"},
	["yav"] = {"Yangben"},
	["yaw"] = {"Yawalapití"},
	["yax"] = {"Yauma"},
	["yay"] = {"Agwagwune"},
	["yaz"] = {"Lokaa"},
	["yba"] = {"Yala"},
	["ybb"] = {"Yemba"},
	["ybe"] = {"West Yugur"},
	["ybh"] = {"Yakha"},
	["ybi"] = {"Yamphu"},
	["ybj"] = {"Hasha"},
	["ybk"] = {"Bokha"},
	["ybl"] = {"Yukuben"},
	["ybm"] = {"Yaben"},
	["ybn"] = {"Yabaâna"},
	["ybo"] = {"Yabong"},
	["ybx"] = {"Yawiyo"},
	["yby"] = {"Yaweyuha"},
	["ych"] = {"Chesu"},
	["ycl"] = {"Lolopo"},
	["ycn"] = {"Yucuna"},
	["ycp"] = {"Chepya"},
	["yda"] = {"Yanda"},
	["ydd"] = {"Eastern Yiddish"},
	["yde"] = {"Yangum Dey"},
	["ydg"] = {"Yidgha"},
	["ydk"] = {"Yoidik"},
	["yea"] = {"Ravula"},
	["yec"] = {"Yeniche"},
	["yee"] = {"Yimas"},
	["yei"] = {"Yeni"},
	["yej"] = {"Yevanic"},
	["yel"] = {"Yela"},
	["yer"] = {"Tarok"},
	["yes"] = {"Nyankpa"},
	["yet"] = {"Yetfa"},
	["yeu"] = {"Yerukula"},
	["yev"] = {"Yapunda"},
	["yey"] = {"Yeyi"},
	["yga"] = {"Malyangapa"},
	["ygi"] = {"Yiningayi"},
	["ygl"] = {"Yangum Gel"},
	["ygm"] = {"Yagomi"},
	["ygp"] = {"Gepo"},
	["ygr"] = {"Yagaria"},
	["ygs"] = {"Yolŋu Sign Language"},
	["ygu"] = {"Yugul"},
	["ygw"] = {"Yagwoia"},
	["yha"] = {"Baha Buyang"},
	["yhd"] = {"Judeo-Iraqi Arabic"},
	["yhl"] = {"Hlepho Phowa"},
	["yhs"] = {"Yan-nhaŋu Sign Language"},
	["yia"] = {"Yinggarda"},
	["yif"] = {"Ache"},
	["yig"] = {"Wusa Nasu"},
	["yih"] = {"Western Yiddish"},
	["yii"] = {"Yidiny"},
	["yij"] = {"Yindjibarndi"},
	["yik"] = {"Dongshanba Lalo"},
	["yil"] = {"Yindjilandji"},
	["yim"] = {"Yimchungru Naga"},
	["yin"] = {"Riang Lai", "Yinchia"},
	["yip"] = {"Pholo"},
	["yiq"] = {"Miqie"},
	["yir"] = {"North Awyu"},
	["yis"] = {"Yis"},
	["yit"] = {"Eastern Lalu"},
	["yiu"] = {"Awu"},
	["yiv"] = {"Northern Nisu"},
	["yix"] = {"Axi Yi"},
	["yiz"] = {"Azhe"},
	["yka"] = {"Yakan"},
	["ykg"] = {"Northern Yukaghir"},
	["yki"] = {"Yoke"},
	["ykk"] = {"Yakaikeke"},
	["ykl"] = {"Khlula"},
	["ykm"] = {"Kap"},
	["ykn"] = {"Kua-nsi"},
	["yko"] = {"Yasa"},
	["ykr"] = {"Yekora"},
	["ykt"] = {"Kathu"},
	["yku"] = {"Kuamasi"},
	["yky"] = {"Yakoma"},
	["yla"] = {"Yaul"},
	["ylb"] = {"Yaleba"},
	["yle"] = {"Yele"},
	["ylg"] = {"Yelogu"},
	["yli"] = {"Angguruk Yali"},
	["yll"] = {"Yil"},
	["ylm"] = {"Limi"},
	["yln"] = {"Langnian Buyang"},
	["ylo"] = {"Naluo Yi"},
	["ylr"] = {"Yalarnnga"},
	["ylu"] = {"Aribwaung"},
	["yly"] = {"Nyâlayu", "Nyelâyu"},
	["ymb"] = {"Yambes"},
	["ymc"] = {"Southern Muji"},
	["ymd"] = {"Muda"},
	["yme"] = {"Yameo"},
	["ymg"] = {"Yamongeri"},
	["ymh"] = {"Mili"},
	["ymi"] = {"Moji"},
	["ymk"] = {"Makwe"},
	["yml"] = {"Iamalele"},
	["ymm"] = {"Maay"},
	["ymn"] = {"Yamna", "Sunum"},
	["ymo"] = {"Yangum Mon"},
	["ymp"] = {"Yamap"},
	["ymq"] = {"Qila Muji"},
	["ymr"] = {"Malasar"},
	["yms"] = {"Mysian"},
	["ymx"] = {"Northern Muji"},
	["ymz"] = {"Muzi"},
	["yna"] = {"Aluo"},
	["ynd"] = {"Yandruwandha"},
	["yne"] = {"Lang'e"},
	["yng"] = {"Yango"},
	["ynk"] = {"Naukan Yupik"},
	["ynl"] = {"Yangulam"},
	["ynn"] = {"Yana"},
	["yno"] = {"Yong"},
	["ynq"] = {"Yendang"},
	["yns"] = {"Yansi"},
	["ynu"] = {"Yahuna"},
	["yob"] = {"Yoba"},
	["yog"] = {"Yogad"},
	["yoi"] = {"Yonaguni"},
	["yok"] = {"Yokuts"},
	["yol"] = {"Yola"},
	["yom"] = {"Yombe"},
	["yon"] = {"Yongkom"},
	["yot"] = {"Yotti"},
	["yox"] = {"Yoron"},
	["yoy"] = {"Yoy"},
	["ypa"] = {"Phala"},
	["ypb"] = {"Labo Phowa"},
	["ypg"] = {"Phola"},
	["yph"] = {"Phupha"},
	["ypk"] = {"Yupik languages"},
	["ypm"] = {"Phuma"},
	["ypn"] = {"Ani Phowa"},
	["ypo"] = {"Alo Phola"},
	["ypp"] = {"Phupa"},
	["ypz"] = {"Phuza"},
	["yra"] = {"Yerakai"},
	["yrb"] = {"Yareba"},
	["yre"] = {"Yaouré"},
	["yrk"] = {"Nenets"},
	["yrl"] = {"Nhengatu"},
	["yrm"] = {"Yirrk-Mel"},
	["yrn"] = {"Yerong"},
	["yro"] = {"Yaroamë"},
	["yrs"] = {"Yarsun"},
	["yrw"] = {"Yarawata"},
	["yry"] = {"Yarluyandi"},
	["ysc"] = {"Yassic"},
	["ysd"] = {"Samatao"},
	["ysg"] = {"Sonaga"},
	["ysl"] = {"Yugoslavian Sign Language"},
	["ysn"] = {"Sani"},
	["yso"] = {"Nisi (China)"},
	["ysp"] = {"Southern Lolopo"},
	["ysr"] = {"Sirenik Yupik"},
	["yss"] = {"Yessan-Mayo"},
	["ysy"] = {"Sanie"},
	["yta"] = {"Talu"},
	["ytl"] = {"Tanglang"},
	["ytp"] = {"Thopho"},
	["ytw"] = {"Yout Wam"},
	["yty"] = {"Yatay"},
	["yua"] = {"Yucateco", "Yucatec Maya"},
	["yub"] = {"Yugambal"},
	["yuc"] = {"Yuchi"},
	["yud"] = {"Judeo-Tripolitanian Arabic"},
	["yue"] = {"Yue Chinese", "Cantonese"},
	["yuf"] = {"Havasupai-Walapai-Yavapai"},
	["yug"] = {"Yug"},
	["yui"] = {"Yurutí"},
	["yuj"] = {"Karkar-Yuri"},
	["yuk"] = {"Yuki"},
	["yul"] = {"Yulu"},
	["yum"] = {"Quechan"},
	["yun"] = {"Bena (Nigeria)"},
	["yup"] = {"Yukpa"},
	["yuq"] = {"Yuqui"},
	["yur"] = {"Yurok"},
	["yut"] = {"Yopno"},
	["yuw"] = {"Yau (Morobe Province)"},
	["yux"] = {"Southern Yukaghir"},
	["yuy"] = {"East Yugur"},
	["yuz"] = {"Yuracare"},
	["yva"] = {"Yawa"},
	["yvt"] = {"Yavitero"},
	["ywa"] = {"Kalou"},
	["ywg"] = {"Yinhawangka"},
	["ywl"] = {"Western Lalu"},
	["ywn"] = {"Yawanawa"},
	["ywq"] = {"Wuding-Luquan Yi"},
	["ywr"] = {"Yawuru"},
	["ywt"] = {"Xishanba Lalo", "Central Lalo"},
	["ywu"] = {"Wumeng Nasu"},
	["yww"] = {"Yawarawarga"},
	["yxa"] = {"Mayawali"},
	["yxg"] = {"Yagara"},
	["yxl"] = {"Yardliyawarra"},
	["yxm"] = {"Yinwum"},
	["yxu"] = {"Yuyu"},
	["yxy"] = {"Yabula Yabula"},
	["yyr"] = {"Yir Yoront"},
	["yyu"] = {"Yau (Sandaun Province)"},
	["yyz"] = {"Ayizi"},
	["yzg"] = {"E'ma Buyang"},
	["yzk"] = {"Zokhuo"},
	["zaa"] = {"Sierra de Juárez Zapotec"},
	["zab"] = {"Western Tlacolula Valley Zapotec", "San Juan Guelavía Zapotec"},
	["zac"] = {"Ocotlán Zapotec"},
	["zad"] = {"Cajonos Zapotec"},
	["zae"] = {"Yareni Zapotec"},
	["zaf"] = {"Ayoquesco Zapotec"},
	["zag"] = {"Zaghawa"},
	["zah"] = {"Zangwal"},
	["zai"] = {"Isthmus Zapotec"},
	["zaj"] = {"Zaramo"},
	["zak"] = {"Zanaki"},
	["zal"] = {"Zauzou"},
	["zam"] = {"Miahuatlán Zapotec"},
	["zao"] = {"Ozolotepec Zapotec"},
	["zap"] = {"Zapotec"},
	["zaq"] = {"Aloápam Zapotec"},
	["zar"] = {"Rincón Zapotec"},
	["zas"] = {"Santo Domingo Albarradas Zapotec"},
	["zat"] = {"Tabaa Zapotec"},
	["zau"] = {"Zangskari"},
	["zav"] = {"Yatzachi Zapotec"},
	["zaw"] = {"Mitla Zapotec"},
	["zax"] = {"Xadani Zapotec"},
	["zay"] = {"Zayse-Zergulla", "Zaysete"},
	["zaz"] = {"Zari"},
	["zbc"] = {"Central Berawan"},
	["zbe"] = {"East Berawan"},
	["zbl"] = {"Blissymbols", "Bliss", "Blissymbolics"},
	["zbt"] = {"Batui"},
	["zbw"] = {"West Berawan"},
	["zca"] = {"Coatecas Altas Zapotec"},
	["zch"] = {"Central Hongshuihe Zhuang"},
	["zdj"] = {"Ngazidja Comorian"},
	["zea"] = {"Zeeuws"},
	["zeg"] = {"Zenag"},
	["zeh"] = {"Eastern Hongshuihe Zhuang"},
	["zen"] = {"Zenaga"},
	["zga"] = {"Kinga"},
	["zgb"] = {"Guibei Zhuang"},
	["zgh"] = {"Standard Moroccan Tamazight"},
	["zgm"] = {"Minz Zhuang"},
	["zgn"] = {"Guibian Zhuang"},
	["zgr"] = {"Magori"},
	["zhb"] = {"Zhaba"},
	["zhd"] = {"Dai Zhuang"},
	["zhi"] = {"Zhire"},
	["zhn"] = {"Nong Zhuang"},
	["zhw"] = {"Zhoa"},
	["zhx"] = {"Chinese (family)"},
	["zia"] = {"Zia"},
	["zib"] = {"Zimbabwe Sign Language"},
	["zik"] = {"Zimakani"},
	["zil"] = {"Zialo"},
	["zim"] = {"Mesme"},
	["zin"] = {"Zinza"},
	["zir"] = {"Ziriya"},
	["ziw"] = {"Zigula"},
	["ziz"] = {"Zizilivakan"},
	["zka"] = {"Kaimbulawa"},
	["zkb"] = {"Koibal"},
	["zkd"] = {"Kadu"},
	["zkg"] = {"Koguryo"},
	["zkh"] = {"Khorezmian"},
	["zkk"] = {"Karankawa"},
	["zkn"] = {"Kanan"},
	["zko"] = {"Kott"},
	["zkp"] = {"São Paulo Kaingáng"},
	["zkr"] = {"Zakhring"},
	["zkt"] = {"Kitan"},
	["zku"] = {"Kaurna"},
	["zkv"] = {"Krevinian"},
	["zkz"] = {"Khazar"},
	["zle"] = {"East Slavic languages"},
	["zlj"] = {"Liujiang Zhuang"},
	["zlm"] = {"Malay (individual language)"},
	["zln"] = {"Lianshan Zhuang"},
	["zlq"] = {"Liuqian Zhuang"},
	["zls"] = {"South Slavic languages"},
	["zlw"] = {"West Slavic languages"},
	["zma"] = {"Manda (Australia)"},
	["zmb"] = {"Zimba"},
	["zmc"] = {"Margany"},
	["zmd"] = {"Maridan"},
	["zme"] = {"Mangerr"},
	["zmf"] = {"Mfinu"},
	["zmg"] = {"Marti Ke"},
	["zmh"] = {"Makolkol"},
	["zmi"] = {"Negeri Sembilan Malay"},
	["zmj"] = {"Maridjabin"},
	["zmk"] = {"Mandandanyi"},
	["zml"] = {"Matngala"},
	["zmm"] = {"Marimanindji", "Marramaninyshi"},
	["zmn"] = {"Mbangwe"},
	["zmo"] = {"Molo"},
	["zmp"] = {"Mpuono"},
	["zmq"] = {"Mituku"},
	["zmr"] = {"Maranunggu"},
	["zms"] = {"Mbesa"},
	["zmt"] = {"Maringarr"},
	["zmu"] = {"Muruwari"},
	["zmv"] = {"Mbariman-Gudhinma"},
	["zmw"] = {"Mbo (Democratic Republic of Congo)"},
	["zmx"] = {"Bomitaba"},
	["zmy"] = {"Mariyedi"},
	["zmz"] = {"Mbandja"},
	["zna"] = {"Zan Gula"},
	["znd"] = {"Zande languages"},
	["zne"] = {"Zande (individual language)"},
	["zng"] = {"Mang"},
	["znk"] = {"Manangkari"},
	["zns"] = {"Mangas"},
	["zoc"] = {"Copainalá Zoque"},
	["zoh"] = {"Chimalapa Zoque"},
	["zom"] = {"Zou"},
	["zoo"] = {"Asunción Mixtepec Zapotec"},
	["zoq"] = {"Tabasco Zoque"},
	["zor"] = {"Rayón Zoque"},
	["zos"] = {"Francisco León Zoque"},
	["zpa"] = {"Lachiguiri Zapotec"},
	["zpb"] = {"Yautepec Zapotec"},
	["zpc"] = {"Choapan Zapotec"},
	["zpd"] = {"Southeastern Ixtlán Zapotec"},
	["zpe"] = {"Petapa Zapotec"},
	["zpf"] = {"San Pedro Quiatoni Zapotec"},
	["zpg"] = {"Guevea De Humboldt Zapotec"},
	["zph"] = {"Totomachapan Zapotec"},
	["zpi"] = {"Santa María Quiegolani Zapotec"},
	["zpj"] = {"Quiavicuzas Zapotec"},
	["zpk"] = {"Tlacolulita Zapotec"},
	["zpl"] = {"Lachixío Zapotec"},
	["zpm"] = {"Mixtepec Zapotec"},
	["zpn"] = {"Santa Inés Yatzechi Zapotec"},
	["zpo"] = {"Amatlán Zapotec"},
	["zpp"] = {"El Alto Zapotec"},
	["zpq"] = {"Zoogocho Zapotec"},
	["zpr"] = {"Santiago Xanica Zapotec"},
	["zps"] = {"Coatlán Zapotec"},
	["zpt"] = {"San Vicente Coatlán Zapotec"},
	["zpu"] = {"Yalálag Zapotec"},
	["zpv"] = {"Chichicapan Zapotec"},
	["zpw"] = {"Zaniza Zapotec"},
	["zpx"] = {"San Baltazar Loxicha Zapotec"},
	["zpy"] = {"Mazaltepec Zapotec"},
	["zpz"] = {"Texmelucan Zapotec"},
	["zqe"] = {"Qiubei Zhuang"},
	["zra"] = {"Kara (Korea)"},
	["zrg"] = {"Mirgan"},
	["zrn"] = {"Zerenkel"},
	["zro"] = {"Záparo"},
	["zrp"] = {"Zarphatic"},
	["zrs"] = {"Mairasi"},
	["zsa"] = {"Sarasira"},
	["zsk"] = {"Kaskean"},
	["zsl"] = {"Zambian Sign Language"},
	["zsm"] = {"Standard Malay"},
	["zsr"] = {"Southern Rincon Zapotec"},
	["zsu"] = {"Sukurum"},
	["zte"] = {"Elotepec Zapotec"},
	["ztg"] = {"Xanaguía Zapotec"},
	["ztl"] = {"Lapaguía-Guivini Zapotec"},
	["ztm"] = {"San Agustín Mixtepec Zapotec"},
	["ztn"] = {"Santa Catarina Albarradas Zapotec"},
	["ztp"] = {"Loxicha Zapotec"},
	["ztq"] = {"Quioquitani-Quierí Zapotec"},
	["zts"] = {"Tilquiapan Zapotec"},
	["ztt"] = {"Tejalapan Zapotec"},
	["ztu"] = {"Güilá Zapotec"},
	["ztx"] = {"Zaachila Zapotec"},
	["zty"] = {"Yatee Zapotec"},
	["zua"] = {"Zeem"},
	["zuh"] = {"Tokano"},
	["zum"] = {"Kumzari"},
	["zun"] = {"Zuni"},
	["zuy"] = {"Zumaya"},
	["zwa"] = {"Zay"},
	["zxx"] = {"No linguistic content", "Not applicable"},
	["zyb"] = {"Yongbei Zhuang"},
	["zyg"] = {"Yang Zhuang"},
	["zyj"] = {"Youjiang Zhuang"},
	["zyn"] = {"Yongnan Zhuang"},
	["zyp"] = {"Zyphe Chin"},
	["zza"] = {"Zaza", "Dimili", "Dimli (macrolanguage)", "Kirdki", "Kirmanjki (macrolanguage)", "Zazaki"},
	["zzj"] = {"Zuojiang Zhuang"}
	}</text>
      <sha1>bq9qnbcn2e07rxgxmxbe5fu46srm7qw</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/iana regions</title>
    <ns>828</ns>
    <id>42494629</id>
    <revision>
      <id>920742171</id>
      <parentid>905078815</parentid>
      <timestamp>2019-10-11T15:33:37Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>update to 2019-09-16 data;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="7999">-- File-Date: 2019-09-16
return {
	["AC"] = {"Ascension Island"},
	["AD"] = {"Andorra"},
	["AE"] = {"United Arab Emirates"},
	["AF"] = {"Afghanistan"},
	["AG"] = {"Antigua and Barbuda"},
	["AI"] = {"Anguilla"},
	["AL"] = {"Albania"},
	["AM"] = {"Armenia"},
	["AO"] = {"Angola"},
	["AQ"] = {"Antarctica"},
	["AR"] = {"Argentina"},
	["AS"] = {"American Samoa"},
	["AT"] = {"Austria"},
	["AU"] = {"Australia"},
	["AW"] = {"Aruba"},
	["AX"] = {"Åland Islands"},
	["AZ"] = {"Azerbaijan"},
	["BA"] = {"Bosnia and Herzegovina"},
	["BB"] = {"Barbados"},
	["BD"] = {"Bangladesh"},
	["BE"] = {"Belgium"},
	["BF"] = {"Burkina Faso"},
	["BG"] = {"Bulgaria"},
	["BH"] = {"Bahrain"},
	["BI"] = {"Burundi"},
	["BJ"] = {"Benin"},
	["BL"] = {"Saint Barthélemy"},
	["BM"] = {"Bermuda"},
	["BN"] = {"Brunei Darussalam"},
	["BO"] = {"Bolivia"},
	["BQ"] = {"Bonaire, Sint Eustatius and Saba"},
	["BR"] = {"Brazil"},
	["BS"] = {"Bahamas"},
	["BT"] = {"Bhutan"},
	["BV"] = {"Bouvet Island"},
	["BW"] = {"Botswana"},
	["BY"] = {"Belarus"},
	["BZ"] = {"Belize"},
	["CA"] = {"Canada"},
	["CC"] = {"Cocos (Keeling) Islands"},
	["CD"] = {"The Democratic Republic of the Congo"},
	["CF"] = {"Central African Republic"},
	["CG"] = {"Congo"},
	["CH"] = {"Switzerland"},
	["CI"] = {"Côte d'Ivoire"},
	["CK"] = {"Cook Islands"},
	["CL"] = {"Chile"},
	["CM"] = {"Cameroon"},
	["CN"] = {"China"},
	["CO"] = {"Colombia"},
	["CP"] = {"Clipperton Island"},
	["CR"] = {"Costa Rica"},
	["CU"] = {"Cuba"},
	["CV"] = {"Cabo Verde", "Cape Verde"},
	["CW"] = {"Curaçao"},
	["CX"] = {"Christmas Island"},
	["CY"] = {"Cyprus"},
	["CZ"] = {"Czechia", "Czech Republic"},
	["DE"] = {"Germany"},
	["DG"] = {"Diego Garcia"},
	["DJ"] = {"Djibouti"},
	["DK"] = {"Denmark"},
	["DM"] = {"Dominica"},
	["DO"] = {"Dominican Republic"},
	["DZ"] = {"Algeria"},
	["EA"] = {"Ceuta, Melilla"},
	["EC"] = {"Ecuador"},
	["EE"] = {"Estonia"},
	["EG"] = {"Egypt"},
	["EH"] = {"Western Sahara"},
	["ER"] = {"Eritrea"},
	["ES"] = {"Spain"},
	["ET"] = {"Ethiopia"},
	["EU"] = {"European Union"},
	["EZ"] = {"Eurozone"},
	["FI"] = {"Finland"},
	["FJ"] = {"Fiji"},
	["FK"] = {"Falkland Islands (Malvinas)"},
	["FM"] = {"Federated States of Micronesia"},
	["FO"] = {"Faroe Islands"},
	["FR"] = {"France"},
	["GA"] = {"Gabon"},
	["GB"] = {"United Kingdom"},
	["GD"] = {"Grenada"},
	["GE"] = {"Georgia"},
	["GF"] = {"French Guiana"},
	["GG"] = {"Guernsey"},
	["GH"] = {"Ghana"},
	["GI"] = {"Gibraltar"},
	["GL"] = {"Greenland"},
	["GM"] = {"Gambia"},
	["GN"] = {"Guinea"},
	["GP"] = {"Guadeloupe"},
	["GQ"] = {"Equatorial Guinea"},
	["GR"] = {"Greece"},
	["GS"] = {"South Georgia and the South Sandwich Islands"},
	["GT"] = {"Guatemala"},
	["GU"] = {"Guam"},
	["GW"] = {"Guinea-Bissau"},
	["GY"] = {"Guyana"},
	["HK"] = {"Hong Kong"},
	["HM"] = {"Heard Island and McDonald Islands"},
	["HN"] = {"Honduras"},
	["HR"] = {"Croatia"},
	["HT"] = {"Haiti"},
	["HU"] = {"Hungary"},
	["IC"] = {"Canary Islands"},
	["ID"] = {"Indonesia"},
	["IE"] = {"Ireland"},
	["IL"] = {"Israel"},
	["IM"] = {"Isle of Man"},
	["IN"] = {"India"},
	["IO"] = {"British Indian Ocean Territory"},
	["IQ"] = {"Iraq"},
	["IR"] = {"Islamic Republic of Iran"},
	["IS"] = {"Iceland"},
	["IT"] = {"Italy"},
	["JE"] = {"Jersey"},
	["JM"] = {"Jamaica"},
	["JO"] = {"Jordan"},
	["JP"] = {"Japan"},
	["KE"] = {"Kenya"},
	["KG"] = {"Kyrgyzstan"},
	["KH"] = {"Cambodia"},
	["KI"] = {"Kiribati"},
	["KM"] = {"Comoros"},
	["KN"] = {"Saint Kitts and Nevis"},
	["KP"] = {"Democratic People's Republic of Korea"},
	["KR"] = {"Republic of Korea"},
	["KW"] = {"Kuwait"},
	["KY"] = {"Cayman Islands"},
	["KZ"] = {"Kazakhstan"},
	["LA"] = {"Lao People's Democratic Republic"},
	["LB"] = {"Lebanon"},
	["LC"] = {"Saint Lucia"},
	["LI"] = {"Liechtenstein"},
	["LK"] = {"Sri Lanka"},
	["LR"] = {"Liberia"},
	["LS"] = {"Lesotho"},
	["LT"] = {"Lithuania"},
	["LU"] = {"Luxembourg"},
	["LV"] = {"Latvia"},
	["LY"] = {"Libya"},
	["MA"] = {"Morocco"},
	["MC"] = {"Monaco"},
	["MD"] = {"Moldova"},
	["ME"] = {"Montenegro"},
	["MF"] = {"Saint Martin (French part)"},
	["MG"] = {"Madagascar"},
	["MH"] = {"Marshall Islands"},
	["MK"] = {"North Macedonia"},
	["ML"] = {"Mali"},
	["MM"] = {"Myanmar"},
	["MN"] = {"Mongolia"},
	["MO"] = {"Macao"},
	["MP"] = {"Northern Mariana Islands"},
	["MQ"] = {"Martinique"},
	["MR"] = {"Mauritania"},
	["MS"] = {"Montserrat"},
	["MT"] = {"Malta"},
	["MU"] = {"Mauritius"},
	["MV"] = {"Maldives"},
	["MW"] = {"Malawi"},
	["MX"] = {"Mexico"},
	["MY"] = {"Malaysia"},
	["MZ"] = {"Mozambique"},
	["NA"] = {"Namibia"},
	["NC"] = {"New Caledonia"},
	["NE"] = {"Niger"},
	["NF"] = {"Norfolk Island"},
	["NG"] = {"Nigeria"},
	["NI"] = {"Nicaragua"},
	["NL"] = {"Netherlands"},
	["NO"] = {"Norway"},
	["NP"] = {"Nepal"},
	["NR"] = {"Nauru"},
	["NU"] = {"Niue"},
	["NZ"] = {"New Zealand"},
	["OM"] = {"Oman"},
	["PA"] = {"Panama"},
	["PE"] = {"Peru"},
	["PF"] = {"French Polynesia"},
	["PG"] = {"Papua New Guinea"},
	["PH"] = {"Philippines"},
	["PK"] = {"Pakistan"},
	["PL"] = {"Poland"},
	["PM"] = {"Saint Pierre and Miquelon"},
	["PN"] = {"Pitcairn"},
	["PR"] = {"Puerto Rico"},
	["PS"] = {"State of Palestine"},
	["PT"] = {"Portugal"},
	["PW"] = {"Palau"},
	["PY"] = {"Paraguay"},
	["QA"] = {"Qatar"},
	["RE"] = {"Réunion"},
	["RO"] = {"Romania"},
	["RS"] = {"Serbia"},
	["RU"] = {"Russian Federation"},
	["RW"] = {"Rwanda"},
	["SA"] = {"Saudi Arabia"},
	["SB"] = {"Solomon Islands"},
	["SC"] = {"Seychelles"},
	["SD"] = {"Sudan"},
	["SE"] = {"Sweden"},
	["SG"] = {"Singapore"},
	["SH"] = {"Saint Helena, Ascension and Tristan da Cunha"},
	["SI"] = {"Slovenia"},
	["SJ"] = {"Svalbard and Jan Mayen"},
	["SK"] = {"Slovakia"},
	["SL"] = {"Sierra Leone"},
	["SM"] = {"San Marino"},
	["SN"] = {"Senegal"},
	["SO"] = {"Somalia"},
	["SR"] = {"Suriname"},
	["SS"] = {"South Sudan"},
	["ST"] = {"Sao Tome and Principe"},
	["SV"] = {"El Salvador"},
	["SX"] = {"Sint Maarten (Dutch part)"},
	["SY"] = {"Syrian Arab Republic"},
	["SZ"] = {"Eswatini", "eSwatini", "Swaziland"},
	["TA"] = {"Tristan da Cunha"},
	["TC"] = {"Turks and Caicos Islands"},
	["TD"] = {"Chad"},
	["TF"] = {"French Southern Territories"},
	["TG"] = {"Togo"},
	["TH"] = {"Thailand"},
	["TJ"] = {"Tajikistan"},
	["TK"] = {"Tokelau"},
	["TL"] = {"Timor-Leste"},
	["TM"] = {"Turkmenistan"},
	["TN"] = {"Tunisia"},
	["TO"] = {"Tonga"},
	["TR"] = {"Turkey"},
	["TT"] = {"Trinidad and Tobago"},
	["TV"] = {"Tuvalu"},
	["TW"] = {"Taiwan, Province of China"},
	["TZ"] = {"United Republic of Tanzania"},
	["UA"] = {"Ukraine"},
	["UG"] = {"Uganda"},
	["UM"] = {"United States Minor Outlying Islands"},
	["UN"] = {"United Nations"},
	["US"] = {"United States"},
	["UY"] = {"Uruguay"},
	["UZ"] = {"Uzbekistan"},
	["VA"] = {"Holy See (Vatican City State)"},
	["VC"] = {"Saint Vincent and the Grenadines"},
	["VE"] = {"Venezuela"},
	["VG"] = {"British Virgin Islands"},
	["VI"] = {"U.S. Virgin Islands"},
	["VN"] = {"Viet Nam"},
	["VU"] = {"Vanuatu"},
	["WF"] = {"Wallis and Futuna"},
	["WS"] = {"Samoa"},
	["YE"] = {"Yemen"},
	["YT"] = {"Mayotte"},
	["ZA"] = {"South Africa"},
	["ZM"] = {"Zambia"},
	["ZW"] = {"Zimbabwe"},
	["001"] = {"World"},
	["002"] = {"Africa"},
	["003"] = {"North America"},
	["005"] = {"South America"},
	["009"] = {"Oceania"},
	["011"] = {"Western Africa"},
	["013"] = {"Central America"},
	["014"] = {"Eastern Africa"},
	["015"] = {"Northern Africa"},
	["017"] = {"Middle Africa"},
	["018"] = {"Southern Africa"},
	["019"] = {"Americas"},
	["021"] = {"Northern America"},
	["029"] = {"Caribbean"},
	["030"] = {"Eastern Asia"},
	["034"] = {"Southern Asia"},
	["035"] = {"South-Eastern Asia"},
	["039"] = {"Southern Europe"},
	["053"] = {"Australia and New Zealand"},
	["054"] = {"Melanesia"},
	["057"] = {"Micronesia"},
	["061"] = {"Polynesia"},
	["142"] = {"Asia"},
	["143"] = {"Central Asia"},
	["145"] = {"Western Asia"},
	["150"] = {"Europe"},
	["151"] = {"Eastern Europe"},
	["154"] = {"Northern Europe"},
	["155"] = {"Western Europe"},
	["202"] = {"Sub-Saharan Africa"},
	["419"] = {"Latin America and the Caribbean"}
	}</text>
      <sha1>hf926zqokv5l2s1sxjcazvpc36k9wsq</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/iana scripts</title>
    <ns>828</ns>
    <id>42494561</id>
    <revision>
      <id>920742088</id>
      <parentid>905078699</parentid>
      <timestamp>2019-10-11T15:32:47Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>update to 2019-09-16 data;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="6811">-- File-Date: 2019-09-16
return {
	["Adlm"] = {"Adlam"},
	["Afak"] = {"Afaka"},
	["Aghb"] = {"Caucasian Albanian"},
	["Ahom"] = {"Ahom", "Tai Ahom"},
	["Arab"] = {"Arabic"},
	["Aran"] = {"Arabic (Nastaliq variant)"},
	["Armi"] = {"Imperial Aramaic"},
	["Armn"] = {"Armenian"},
	["Avst"] = {"Avestan"},
	["Bali"] = {"Balinese"},
	["Bamu"] = {"Bamum"},
	["Bass"] = {"Bassa Vah"},
	["Batk"] = {"Batak"},
	["Beng"] = {"Bengali", "Bangla"},
	["Bhks"] = {"Bhaiksuki"},
	["Blis"] = {"Blissymbols"},
	["Bopo"] = {"Bopomofo"},
	["Brah"] = {"Brahmi"},
	["Brai"] = {"Braille"},
	["Bugi"] = {"Buginese"},
	["Buhd"] = {"Buhid"},
	["Cakm"] = {"Chakma"},
	["Cans"] = {"Unified Canadian Aboriginal Syllabics"},
	["Cari"] = {"Carian"},
	["Cham"] = {"Cham"},
	["Cher"] = {"Cherokee"},
	["Chrs"] = {"Chorasmian"},
	["Cirt"] = {"Cirth"},
	["Copt"] = {"Coptic"},
	["Cpmn"] = {"Cypro-Minoan"},
	["Cprt"] = {"Cypriot syllabary"},
	["Cyrl"] = {"Cyrillic"},
	["Cyrs"] = {"Cyrillic (Old Church Slavonic variant)"},
	["Deva"] = {"Devanagari", "Nagari"},
	["Diak"] = {"Dives Akuru"},
	["Dogr"] = {"Dogra"},
	["Dsrt"] = {"Deseret", "Mormon"},
	["Dupl"] = {"Duployan shorthand", "Duployan stenography"},
	["Egyd"] = {"Egyptian demotic"},
	["Egyh"] = {"Egyptian hieratic"},
	["Egyp"] = {"Egyptian hieroglyphs"},
	["Elba"] = {"Elbasan"},
	["Elym"] = {"Elymaic"},
	["Ethi"] = {"Ethiopic", "Geʻez", "Ge'ez"},
	["Geok"] = {"Khutsuri (Asomtavruli and Nuskhuri)"},
	["Geor"] = {"Georgian (Mkhedruli and Mtavruli)"},
	["Glag"] = {"Glagolitic"},
	["Gong"] = {"Gunjala Gondi"},
	["Gonm"] = {"Masaram Gondi"},
	["Goth"] = {"Gothic"},
	["Gran"] = {"Grantha"},
	["Grek"] = {"Greek"},
	["Gujr"] = {"Gujarati"},
	["Guru"] = {"Gurmukhi"},
	["Hanb"] = {"Han with Bopomofo (alias for Han + Bopomofo)"},
	["Hang"] = {"Hangul", "Hangŭl", "Hangeul"},
	["Hani"] = {"Han", "Hanzi", "Kanji", "Hanja"},
	["Hano"] = {"Hanunoo", "Hanunóo"},
	["Hans"] = {"Han (Simplified variant)"},
	["Hant"] = {"Han (Traditional variant)"},
	["Hatr"] = {"Hatran"},
	["Hebr"] = {"Hebrew"},
	["Hira"] = {"Hiragana"},
	["Hluw"] = {"Anatolian Hieroglyphs", "Luwian Hieroglyphs", "Hittite Hieroglyphs"},
	["Hmng"] = {"Pahawh Hmong"},
	["Hmnp"] = {"Nyiakeng Puachue Hmong"},
	["Hrkt"] = {"Japanese syllabaries (alias for Hiragana + Katakana)"},
	["Hung"] = {"Old Hungarian", "Hungarian Runic"},
	["Inds"] = {"Indus", "Harappan"},
	["Ital"] = {"Old Italic (Etruscan, Oscan, etc.)"},
	["Jamo"] = {"Jamo (alias for Jamo subset of Hangul)"},
	["Java"] = {"Javanese"},
	["Jpan"] = {"Japanese (alias for Han + Hiragana + Katakana)"},
	["Jurc"] = {"Jurchen"},
	["Kali"] = {"Kayah Li"},
	["Kana"] = {"Katakana"},
	["Khar"] = {"Kharoshthi"},
	["Khmr"] = {"Khmer"},
	["Khoj"] = {"Khojki"},
	["Kitl"] = {"Khitan large script"},
	["Kits"] = {"Khitan small script"},
	["Knda"] = {"Kannada"},
	["Kore"] = {"Korean (alias for Hangul + Han)"},
	["Kpel"] = {"Kpelle"},
	["Kthi"] = {"Kaithi"},
	["Lana"] = {"Tai Tham", "Lanna"},
	["Laoo"] = {"Lao"},
	["Latf"] = {"Latin (Fraktur variant)"},
	["Latg"] = {"Latin (Gaelic variant)"},
	["Latn"] = {"Latin"},
	["Leke"] = {"Leke"},
	["Lepc"] = {"Lepcha", "Róng"},
	["Limb"] = {"Limbu"},
	["Lina"] = {"Linear A"},
	["Linb"] = {"Linear B"},
	["Lisu"] = {"Lisu", "Fraser"},
	["Loma"] = {"Loma"},
	["Lyci"] = {"Lycian"},
	["Lydi"] = {"Lydian"},
	["Mahj"] = {"Mahajani"},
	["Maka"] = {"Makasar"},
	["Mand"] = {"Mandaic", "Mandaean"},
	["Mani"] = {"Manichaean"},
	["Marc"] = {"Marchen"},
	["Maya"] = {"Mayan hieroglyphs"},
	["Medf"] = {"Medefaidrin", "Oberi Okaime", "Oberi Ɔkaimɛ"},
	["Mend"] = {"Mende Kikakui"},
	["Merc"] = {"Meroitic Cursive"},
	["Mero"] = {"Meroitic Hieroglyphs"},
	["Mlym"] = {"Malayalam"},
	["Modi"] = {"Modi", "Moḍī"},
	["Mong"] = {"Mongolian"},
	["Moon"] = {"Moon", "Moon code", "Moon script", "Moon type"},
	["Mroo"] = {"Mro", "Mru"},
	["Mtei"] = {"Meitei Mayek", "Meithei", "Meetei"},
	["Mult"] = {"Multani"},
	["Mymr"] = {"Myanmar", "Burmese"},
	["Nand"] = {"Nandinagari"},
	["Narb"] = {"Old North Arabian", "Ancient North Arabian"},
	["Nbat"] = {"Nabataean"},
	["Newa"] = {"Newa", "Newar", "Newari", "Nepāla lipi"},
	["Nkdb"] = {"Naxi Dongba", "na²¹ɕi³³ to³³ba²¹", "Nakhi Tomba"},
	["Nkgb"] = {"Naxi Geba", "na²¹ɕi³³ gʌ²¹ba²¹", "'Na-'Khi ²Ggŏ-¹baw", "Nakhi Geba"},
	["Nkoo"] = {"N’Ko", "N'Ko"},
	["Nshu"] = {"Nüshu"},
	["Ogam"] = {"Ogham"},
	["Olck"] = {"Ol Chiki", "Ol Cemet'", "Ol", "Santali"},
	["Orkh"] = {"Old Turkic", "Orkhon Runic"},
	["Orya"] = {"Oriya", "Odia"},
	["Osge"] = {"Osage"},
	["Osma"] = {"Osmanya"},
	["Palm"] = {"Palmyrene"},
	["Pauc"] = {"Pau Cin Hau"},
	["Perm"] = {"Old Permic"},
	["Phag"] = {"Phags-pa"},
	["Phli"] = {"Inscriptional Pahlavi"},
	["Phlp"] = {"Psalter Pahlavi"},
	["Phlv"] = {"Book Pahlavi"},
	["Phnx"] = {"Phoenician"},
	["Piqd"] = {"Klingon (KLI pIqaD)"},
	["Plrd"] = {"Miao", "Pollard"},
	["Prti"] = {"Inscriptional Parthian"},
	["Rjng"] = {"Rejang", "Redjang", "Kaganga"},
	["Rohg"] = {"Hanifi Rohingya"},
	["Roro"] = {"Rongorongo"},
	["Runr"] = {"Runic"},
	["Samr"] = {"Samaritan"},
	["Sara"] = {"Sarati"},
	["Sarb"] = {"Old South Arabian"},
	["Saur"] = {"Saurashtra"},
	["Sgnw"] = {"SignWriting"},
	["Shaw"] = {"Shavian", "Shaw"},
	["Shrd"] = {"Sharada", "Śāradā"},
	["Shui"] = {"Shuishu"},
	["Sidd"] = {"Siddham", "Siddhaṃ", "Siddhamātṛkā"},
	["Sind"] = {"Khudawadi", "Sindhi"},
	["Sinh"] = {"Sinhala"},
	["Sogd"] = {"Sogdian"},
	["Sogo"] = {"Old Sogdian"},
	["Sora"] = {"Sora Sompeng"},
	["Soyo"] = {"Soyombo"},
	["Sund"] = {"Sundanese"},
	["Sylo"] = {"Syloti Nagri"},
	["Syrc"] = {"Syriac"},
	["Syre"] = {"Syriac (Estrangelo variant)"},
	["Syrj"] = {"Syriac (Western variant)"},
	["Syrn"] = {"Syriac (Eastern variant)"},
	["Tagb"] = {"Tagbanwa"},
	["Takr"] = {"Takri", "Ṭākrī", "Ṭāṅkrī"},
	["Tale"] = {"Tai Le"},
	["Talu"] = {"New Tai Lue"},
	["Taml"] = {"Tamil"},
	["Tang"] = {"Tangut"},
	["Tavt"] = {"Tai Viet"},
	["Telu"] = {"Telugu"},
	["Teng"] = {"Tengwar"},
	["Tfng"] = {"Tifinagh", "Berber"},
	["Tglg"] = {"Tagalog", "Baybayin", "Alibata"},
	["Thaa"] = {"Thaana"},
	["Thai"] = {"Thai"},
	["Tibt"] = {"Tibetan"},
	["Tirh"] = {"Tirhuta"},
	["Ugar"] = {"Ugaritic"},
	["Vaii"] = {"Vai"},
	["Visp"] = {"Visible Speech"},
	["Wara"] = {"Warang Citi", "Varang Kshiti"},
	["Wcho"] = {"Wancho"},
	["Wole"] = {"Woleai"},
	["Xpeo"] = {"Old Persian"},
	["Xsux"] = {"Sumero-Akkadian cuneiform"},
	["Yezi"] = {"Yezidi"},
	["Yiii"] = {"Yi"},
	["Zanb"] = {"Zanabazar Square", "Zanabazarin Dörböljin Useg", "Xewtee Dörböljin Bicig", "Horizontal Square Script"},
	["Zinh"] = {"Code for inherited script"},
	["Zmth"] = {"Mathematical notation"},
	["Zsye"] = {"Symbols (Emoji variant)"},
	["Zsym"] = {"Symbols"},
	["Zxxx"] = {"Code for unwritten documents"},
	["Zyyy"] = {"Code for undetermined script"},
	["Zzzz"] = {"Code for uncoded script"}
	}</text>
      <sha1>b0tpmvw1iz61zux4tvgc1fonhko1kf4</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/iana suppressed scripts</title>
    <ns>828</ns>
    <id>56104181</id>
    <revision>
      <id>920742499</id>
      <parentid>905079215</parentid>
      <timestamp>2019-10-11T15:36:36Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>update to 2019-09-16 data;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1259">-- File-Date: 2019-09-16
return {
	["Arab"] = {"ar", "fa", "ps", "ur"},
	["Armn"] = {"hy"},
	["Beng"] = {"as", "bn"},
	["Blis"] = {"zbl"},
	["Cyrl"] = {"ab", "be", "bg", "kk", "mk", "ru", "uk"},
	["Deva"] = {"hi", "mr", "ne", "kok", "mai"},
	["Ethi"] = {"am", "ti"},
	["Geor"] = {"ka"},
	["Grek"] = {"el"},
	["Gujr"] = {"gu"},
	["Guru"] = {"pa"},
	["Hebr"] = {"he", "yi"},
	["Jpan"] = {"ja"},
	["Khmr"] = {"km"},
	["Knda"] = {"kn"},
	["Kore"] = {"ko"},
	["Laoo"] = {"lo"},
	["Latn"] = {"af", "ay", "bs", "ca", "ch", "cs", "cy", "da", "de", "en", "eo",
				"es", "et", "eu", "fi", "fj", "fo", "fr", "fy", "ga", "gl", "gn",
				"gv", "hr", "ht", "hu", "id", "is", "it", "kl", "la", "lb", "ln",
				"lt", "lv", "mg", "mh", "ms", "mt", "na", "nb", "nd", "nl", "nn",
				"no", "nr", "ny", "om", "pl", "pt", "qu", "rm", "rn", "ro", "rw",
				"sg", "sk", "sl", "sm", "so", "sq", "ss", "st", "sv", "sw", "tl",
				"tn", "to", "tr", "ts", "ve", "vi", "xh", "zu", "dsb", "frr", "frs",
				"gsw", "hsb", "men", "nds", "niu", "nso", "tem", "tkl", "tmh", "tpi", "tvl"},
	["Mlym"] = {"ml"},
	["Mymr"] = {"my"},
	["Nkoo"] = {"nqo"},
	["Orya"] = {"or"},
	["Sinh"] = {"si"},
	["Taml"] = {"ta"},
	["Telu"] = {"te"},
	["Thaa"] = {"dv"},
	["Thai"] = {"th"},
	["Tibt"] = {"dz"}
	}</text>
      <sha1>b4tr6zz73c0v4nu5fz6fm2wclpbli66</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/iana variants</title>
    <ns>828</ns>
    <id>55716082</id>
    <revision>
      <id>920742273</id>
      <parentid>905078943</parentid>
      <timestamp>2019-10-11T15:34:30Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>update to 2019-09-16 data;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="10815">-- File-Date: 2019-09-16
return {
	["1606nict"] = {
		["descriptions"] = {"Late Middle French (to 1606)"},
		["prefixes"] = {"frm"},
		},
	["1694acad"] = {
		["descriptions"] = {"Early Modern French"},
		["prefixes"] = {"fr"},
		},
	["1901"] = {
		["descriptions"] = {"Traditional German orthography"},
		["prefixes"] = {"de"},
		},
	["1959acad"] = {
		["descriptions"] = {"\"Academic\" (\"governmental\") variant of Belarusian as codified in 1959"},
		["prefixes"] = {"be"},
		},
	["1994"] = {
		["descriptions"] = {"Standardized Resian orthography"},
		["prefixes"] = {"sl-rozaj", "sl-rozaj-biske", "sl-rozaj-njiva", "sl-rozaj-osojs", "sl-rozaj-solba"},
		},
	["1996"] = {
		["descriptions"] = {"German orthography of 1996"},
		["prefixes"] = {"de"},
		},
	["abl1943"] = {
		["descriptions"] = {"Orthographic formulation of 1943 - Official in Brazil (Formulário Ortográfico de 1943 - Oficial no Brasil)"},
		["prefixes"] = {"pt-br"},
		},
	["alalc97"] = {
		["descriptions"] = {"ALA-LC Romanization, 1997 edition"},
		["prefixes"] = {},
		},
	["aluku"] = {
		["descriptions"] = {"Aluku dialect", "Boni dialect"},
		["prefixes"] = {"djk"},
		},
	["akuapem"] = {
		["descriptions"] = {"Akuapem Twi"},
		["prefixes"] = {"tw"},
		},
	["ao1990"] = {
		["descriptions"] = {"Portuguese Language Orthographic Agreement of 1990 (Acordo Ortográfico da Língua Portuguesa de 1990)"},
		["prefixes"] = {"pt", "gl"},
		},
	["aranes"] = {
		["descriptions"] = {"Aranese"},
		["prefixes"] = {"oc"},
		},
	["asante"] = {
		["descriptions"] = {"Asante Twi", "Ashanti Twi"},
		["prefixes"] = {"tw"},
		},
	["auvern"] = {
		["descriptions"] = {"Auvergnat"},
		["prefixes"] = {"oc"},
		},
	["baku1926"] = {
		["descriptions"] = {"Unified Turkic Latin Alphabet (Historical)"},
		["prefixes"] = {"az", "ba", "crh", "kk", "krc", "ky", "sah", "tk", "tt", "uz"},
		},
	["balanka"] = {
		["descriptions"] = {"The Balanka dialect of Anii"},
		["prefixes"] = {"blo"},
		},
	["barla"] = {
		["descriptions"] = {"The Barlavento dialect group of Kabuverdianu"},
		["prefixes"] = {"kea"},
		},
	["basiceng"] = {
		["descriptions"] = {"Basic English"},
		["prefixes"] = {"en"},
		},
	["bauddha"] = {
		["descriptions"] = {"Buddhist Hybrid Sanskrit"},
		["prefixes"] = {"sa"},
		},
	["biscayan"] = {
		["descriptions"] = {"Biscayan dialect of Basque"},
		["prefixes"] = {"eu"},
		},
	["biske"] = {
		["descriptions"] = {"The San Giorgio dialect of Resian", "The Bila dialect of Resian"},
		["prefixes"] = {"sl-rozaj"},
		},
	["bohoric"] = {
		["descriptions"] = {"Slovene in Bohorič alphabet"},
		["prefixes"] = {"sl"},
		},
	["boont"] = {
		["descriptions"] = {"Boontling"},
		["prefixes"] = {"en"},
		},
	["bornholm"] = {
		["descriptions"] = {"Bornholmsk"},
		["prefixes"] = {"da"},
		},
	["cisaup"] = {
		["descriptions"] = {"Cisalpine"},
		["prefixes"] = {"oc"},
		},
	["colb1945"] = {
		["descriptions"] = {"Portuguese-Brazilian Orthographic Convention of 1945 (Convenção Ortográfica Luso-Brasileira de 1945)"},
		["prefixes"] = {"pt"},
		},
	["cornu"] = {
		["descriptions"] = {"Cornu-English", "Cornish English", "Anglo-Cornish"},
		["prefixes"] = {"en"},
		},
	["creiss"] = {
		["descriptions"] = {"Occitan variants of the Croissant area"},
		["prefixes"] = {"oc"},
		},
	["dajnko"] = {
		["descriptions"] = {"Slovene in Dajnko alphabet"},
		["prefixes"] = {"sl"},
		},
	["ekavsk"] = {
		["descriptions"] = {"Serbian with Ekavian pronunciation"},
		["prefixes"] = {"sr", "sr-latn", "sr-cyrl"},
		},
	["emodeng"] = {
		["descriptions"] = {"Early Modern English (1500-1700)"},
		["prefixes"] = {"en"},
		},
	["fonipa"] = {
		["descriptions"] = {"International Phonetic Alphabet"},
		["prefixes"] = {},
		},
	["fonkirsh"] = {
		["descriptions"] = {"Kirshenbaum Phonetic Alphabet"},
		["prefixes"] = {},
		},
	["fonnapa"] = {
		["descriptions"] = {"North American Phonetic Alphabet", "Americanist Phonetic Notation"},
		["prefixes"] = {},
		},
	["fonupa"] = {
		["descriptions"] = {"Uralic Phonetic Alphabet"},
		["prefixes"] = {},
		},
	["fonxsamp"] = {
		["descriptions"] = {"X-SAMPA transcription"},
		["prefixes"] = {},
		},
	["gascon"] = {
		["descriptions"] = {"Gascon"},
		["prefixes"] = {"oc"},
		},
	["grclass"] = {
		["descriptions"] = {"Classical Occitan orthography"},
		["prefixes"] = {"oc"},
		},
	["grital"] = {
		["descriptions"] = {"Italian-inspired Occitan orthography"},
		["prefixes"] = {"oc"},
		},
	["grmistr"] = {
		["descriptions"] = {"Mistralian or Mistralian-inspired Occitan orthography"},
		["prefixes"] = {"oc"},
		},
	["hepburn"] = {
		["descriptions"] = {"Hepburn romanization"},
		["prefixes"] = {"ja-latn"},
		},
	["hognorsk"] = {
		["descriptions"] = {"Norwegian in Høgnorsk (High Norwegian) orthography"},
		["prefixes"] = {"nn"},
		},
	["hsistemo"] = {
		["descriptions"] = {"Standard H-system orthographic fallback for spelling Esperanto"},
		["prefixes"] = {"eo"},
		},
	["ijekavsk"] = {
		["descriptions"] = {"Serbian with Ijekavian pronunciation"},
		["prefixes"] = {"sr", "sr-latn", "sr-cyrl"},
		},
	["itihasa"] = {
		["descriptions"] = {"Epic Sanskrit"},
		["prefixes"] = {"sa"},
		},
	["ivanchov"] = {
		["descriptions"] = {"Bulgarian in 1899 orthography"},
		["prefixes"] = {"bg"},
		},
	["jauer"] = {
		["descriptions"] = {"Jauer dialect of Romansh"},
		["prefixes"] = {"rm"},
		},
	["jyutping"] = {
		["descriptions"] = {"Jyutping Cantonese Romanization"},
		["prefixes"] = {"yue"},
		},
	["kkcor"] = {
		["descriptions"] = {"Common Cornish orthography of Revived Cornish"},
		["prefixes"] = {"kw"},
		},
	["kociewie"] = {
		["descriptions"] = {"The Kociewie dialect of Polish"},
		["prefixes"] = {"pl"},
		},
	["kscor"] = {
		["descriptions"] = {"Standard Cornish orthography of Revived Cornish", "Kernowek Standard"},
		["prefixes"] = {"kw"},
		},
	["laukika"] = {
		["descriptions"] = {"Classical Sanskrit"},
		["prefixes"] = {"sa"},
		},
	["lemosin"] = {
		["descriptions"] = {"Limousin"},
		["prefixes"] = {"oc"},
		},
	["lengadoc"] = {
		["descriptions"] = {"Languedocien"},
		["prefixes"] = {"oc"},
		},
	["lipaw"] = {
		["descriptions"] = {"The Lipovaz dialect of Resian", "The Lipovec dialect of Resian"},
		["prefixes"] = {"sl-rozaj"},
		},
	["luna1918"] = {
		["descriptions"] = {"Post-1917 Russian orthography"},
		["prefixes"] = {"ru"},
		},
	["metelko"] = {
		["descriptions"] = {"Slovene in Metelko alphabet"},
		["prefixes"] = {"sl"},
		},
	["monoton"] = {
		["descriptions"] = {"Monotonic Greek"},
		["prefixes"] = {"el"},
		},
	["ndyuka"] = {
		["descriptions"] = {"Ndyuka dialect", "Aukan dialect"},
		["prefixes"] = {"djk"},
		},
	["nedis"] = {
		["descriptions"] = {"Natisone dialect", "Nadiza dialect"},
		["prefixes"] = {"sl"},
		},
	["newfound"] = {
		["descriptions"] = {"Newfoundland English"},
		["prefixes"] = {"en-ca"},
		},
	["nicard"] = {
		["descriptions"] = {"Niçard"},
		["prefixes"] = {"oc"},
		},
	["njiva"] = {
		["descriptions"] = {"The Gniva dialect of Resian", "The Njiva dialect of Resian"},
		["prefixes"] = {"sl-rozaj"},
		},
	["nulik"] = {
		["descriptions"] = {"Volapük nulik", "Volapük perevidöl", "Volapük nulädik", "de Jong's Volapük", "New Volapük", "Revised Volapük", "Modern Volapük"},
		["prefixes"] = {"vo"},
		},
	["osojs"] = {
		["descriptions"] = {"The Oseacco dialect of Resian", "The Osojane dialect of Resian"},
		["prefixes"] = {"sl-rozaj"},
		},
	["oxendict"] = {
		["descriptions"] = {"Oxford English Dictionary spelling"},
		["prefixes"] = {"en"},
		},
	["pahawh2"] = {
		["descriptions"] = {"Pahawh Hmong Second Stage Reduced orthography"},
		["prefixes"] = {"mww", "hnj"},
		},
	["pahawh3"] = {
		["descriptions"] = {"Pahawh Hmong Third Stage Reduced orthography"},
		["prefixes"] = {"mww", "hnj"},
		},
	["pahawh4"] = {
		["descriptions"] = {"Pahawh Hmong Final Version orthography"},
		["prefixes"] = {"mww", "hnj"},
		},
	["pamaka"] = {
		["descriptions"] = {"Pamaka dialect"},
		["prefixes"] = {"djk"},
		},
	["petr1708"] = {
		["descriptions"] = {"Petrine orthography"},
		["prefixes"] = {"ru"},
		},
	["pinyin"] = {
		["descriptions"] = {"Pinyin romanization"},
		["prefixes"] = {"zh-latn", "bo-latn"},
		},
	["polyton"] = {
		["descriptions"] = {"Polytonic Greek"},
		["prefixes"] = {"el"},
		},
	["provenc"] = {
		["descriptions"] = {"Provençal"},
		["prefixes"] = {"oc"},
		},
	["puter"] = {
		["descriptions"] = {"Puter idiom of Romansh"},
		["prefixes"] = {"rm"},
		},
	["rigik"] = {
		["descriptions"] = {"Volapük rigik", "Schleyer's Volapük", "Original Volapük", "Classic Volapük"},
		["prefixes"] = {"vo"},
		},
	["rozaj"] = {
		["descriptions"] = {"Resian", "Resianic", "Rezijan"},
		["prefixes"] = {"sl"},
		},
	["rumgr"] = {
		["descriptions"] = {"Rumantsch Grischun"},
		["prefixes"] = {"rm"},
		},
	["scotland"] = {
		["descriptions"] = {"Scottish Standard English"},
		["prefixes"] = {"en"},
		},
	["scouse"] = {
		["descriptions"] = {"Scouse"},
		["prefixes"] = {"en"},
		},
	["simple"] = {
		["descriptions"] = {"Simplified form"},
		["prefixes"] = {},
		},
	["solba"] = {
		["descriptions"] = {"The Stolvizza dialect of Resian", "The Solbica dialect of Resian"},
		["prefixes"] = {"sl-rozaj"},
		},
	["sotav"] = {
		["descriptions"] = {"The Sotavento dialect group of Kabuverdianu"},
		["prefixes"] = {"kea"},
		},
	["spanglis"] = {
		["descriptions"] = {"Spanglish"},
		["prefixes"] = {"en", "es"},
		},
	["surmiran"] = {
		["descriptions"] = {"Surmiran idiom of Romansh"},
		["prefixes"] = {"rm"},
		},
	["sursilv"] = {
		["descriptions"] = {"Sursilvan idiom of Romansh"},
		["prefixes"] = {"rm"},
		},
	["sutsilv"] = {
		["descriptions"] = {"Sutsilvan idiom of Romansh"},
		["prefixes"] = {"rm"},
		},
	["tarask"] = {
		["descriptions"] = {"Belarusian in Taraskievica orthography"},
		["prefixes"] = {"be"},
		},
	["uccor"] = {
		["descriptions"] = {"Unified Cornish orthography of Revived Cornish"},
		["prefixes"] = {"kw"},
		},
	["ucrcor"] = {
		["descriptions"] = {"Unified Cornish Revised orthography of Revived Cornish"},
		["prefixes"] = {"kw"},
		},
	["ulster"] = {
		["descriptions"] = {"Ulster dialect of Scots"},
		["prefixes"] = {"sco"},
		},
	["unifon"] = {
		["descriptions"] = {"Unifon phonetic alphabet"},
		["prefixes"] = {"en", "hup", "kyh", "tol", "yur"},
		},
	["vaidika"] = {
		["descriptions"] = {"Vedic Sanskrit"},
		["prefixes"] = {"sa"},
		},
	["valencia"] = {
		["descriptions"] = {"Valencian"},
		["prefixes"] = {"ca"},
		},
	["vallader"] = {
		["descriptions"] = {"Vallader idiom of Romansh"},
		["prefixes"] = {"rm"},
		},
	["vivaraup"] = {
		["descriptions"] = {"Vivaro-Alpine"},
		["prefixes"] = {"oc"},
		},
	["wadegile"] = {
		["descriptions"] = {"Wade-Giles romanization"},
		["prefixes"] = {"zh-latn"},
		},
	["xsistemo"] = {
		["descriptions"] = {"Standard X-system orthographic fallback for spelling Esperanto"},
		["prefixes"] = {"eo"},
		}
	}</text>
      <sha1>gbjjrzvkvlebb8gf74soslvo5j54zpb</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/data/wp languages</title>
    <ns>828</ns>
    <id>42494537</id>
    <revision>
      <id>924387005</id>
      <parentid>919374305</parentid>
      <timestamp>2019-11-03T15:14:10Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>disable ilo Ilokano; see [[Talk:Ilocano language#language naming inconsistencies]]; ksh Ripuarian; see [[Talk:Ripuarian language#language naming inconsistencies]]; nan Taiwanese Hokkien; see [[Talk:Taiwanese Hokkien#language naming inconsistencies]];</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="13327">return 	{	-- wp preferred names													-- IANA language names and notes
--ISO 639-1 codes
	["ab"] = {"Abkhaz"},														-- Abkhazian
	["an"] = {"Aragonese"},														-- Aragonese; same, delete?
	["av"] = {"Avar"},															-- Avaric
	["bh"] = {"Bihari"},														-- Bihari languages; collective
	["bo"] = {"Standard Tibetan"},												-- Tibetan
	["cu"] = {"Old Church Slavonic"},											-- Church Slavic, Church Slavonic, Old Bulgarian, Old Church Slavonic, Old Slavonic
	["de-AT"] = {"Austrian German"},
	["el"] = {"Greek"},															-- Modern Greek (1453-)
	["en-AU"] = {"Australian English"},
	["en-CA"] = {"Canadian English"},
	["en-GB"] = {"British English"},
	["en-IE"] = {"Irish English"},
	["en-NZ"] = {"New Zealand English"},
	["en-SA"] = {"South African English"},
	["en-US"] = {"American English"},
	["ff"] = {"Fula"},															-- Fulah
	["fy"] = {"Frisian"},														-- Western Frisian
	["ht"] = {"Haitian Creole"},												-- Haitian, Haitian Creole
	["hz"] = {"Otjiherero"},													-- Herero
	["ia"] = {"Interlingua"},													-- Interlingua (International Auxiliary Language Association)
	["ii"] = {"Yi"},															-- Sichuan Yi, Nuosu
	["ki"] = {"Gikuyu"},														-- Kikuyu, Gikuyu
	["kk"] = {"Kazakh"},														-- Kazakh; same, delete?
	["kl"] = {"Greenlandic"},													-- Kalaallisut, Greenlandic
	["km"] = {"Khmer"},															-- Central Khmer
	["ky"] = {"Kyrgyz"},														-- Kirghiz, Kyrgyz
	["lg"] = {"Luganda"},														-- Ganda
	["li"] = {"Limburgish"},													-- Limburgan, Limburger, Limburgish
	["mi"] = {"Māori"},															-- Maori
	["ms"] = {"Malay"},															-- Malay (macrolanguage)
	["na"] = {"Nauruan"},														-- Nauru
	["nb"] = {"Bokmål"},														-- Norwegian Bokmål
	["nd"] = {"Northern Ndebele"},												-- North Ndebele
	["ne"] = {"Nepali"},														-- Nepali (macrolanguage)
	["nn"] = {"Nynorsk"},														-- Norwegian Nynorsk
	["nr"] = {"Southern Ndebele"},												-- South Ndebele
	["ny"] = {"Chichewa"},														-- Nyanja, Chewa, Chichewa
	["oc"] = {"Occitan"},														-- Occitan (post 1500)
	["oj"] = {"Ojibwe"},														-- Ojibwa
	["or"] = {"Odia"},															-- Oriya (macrolanguage), Odia (macrolanguage)
	["pa"] = {"Punjabi"},														-- Panjabi, Punjabi
	["pi"] = {"Pali"},															-- Pali; same, delete?
	["rn"] = {"Kirundi"},														-- Rundi
	["ro"] = {"Romanian"},														-- Romanian, Moldavian, Moldovan; same as first in IANA list, delete?
	["rw"] = {"Kinyarwanda"},													-- Kinyarwanda; same, delete?
	["si"] = {"Sinhalese"},														-- Sinhala, Sinhalese
	["sl"] = {"Slovene"},														-- Slovenian
	["sr-Cyrl"] = {"Serbian Cyrillic"},											-- sr = Serbian; Cyrillic is the alphabet
	["ss"] = {"Swazi"},															-- Swati
	["st"] = {"Sotho"},															-- Southern Sotho
	["sw"] = {"Swahili"},														-- Swahili (macrolanguage)
	["to"] = {"Tongan"},														-- Tonga (Tonga Islands)
	["za"] = {"Zhuang"},														-- Zhuang, Chuang; ; same as first in IANA list, delete?


-- ISO 639-2 codes
	["ber"] = {"Berber"},														-- Berber languages
	["cel"] = {"Proto-Celtic"},													-- Celtic languages
	["gem"] = {"Proto-Germanic"},												-- Germanic languages
	["myn"] = {"Mayan"},														-- Mayan languages
	["nah"] = {"Nahuatl"},														-- Nahuatl languages
	["pra"] = {"Prakrit"},														-- Prakrit languages
--	["roa"] = {"Jèrriais"},														-- Romance languages
	["sal"] = {"Salish"},														-- Salishan languages
	["sla"] = {"Slavic"},														-- Slavic languages
	["son"] = {"Songhay"},														-- Songhai languages
	["wen"] = {"Sorbian"},														-- Sorbian languages


-- ISO 639-3 codes
	["abk"] = {"Abkhaz"},														-- not in IANA; see code ab
	["ace"] = {"Acehnese"},														-- Achinese
	["aec"] = {"Sa'idi Arabic"},												-- Saidi Arabic
	["ain"] = {"Ainu"},															-- Ainu (Japan)
	["akl"] = {"Aklan"},														-- Aklanon
	["alt"] = {"Altay"},														-- Southern Altai
	["ang"] = {"Old English"},													-- Old English (ca. 450-1100)
	["apm"] = {"Mescalero-Chiricahua"},											-- Mescalero-Chiricahua Apache
	["bal"] = {"Balochi"},														-- Baluchi
	["bar"] = {"Austro-Bavarian"},												-- Bavarian
	["bcl"] = {"Central Bicolano"},												-- Central Bikol
	["bin"] = {"Edo"},															-- Bini, Edo
	["bpy"] = {"Bishnupriya Manipuri"},											-- Bishnupriya
	["brx"] = {"Bodo"},															-- Bodo (India)
	["chg"] = {"Chagatay"},														-- Chagatai
	["chm"] = {"Mari"},															-- Mari (Russia)
	["ckb"] = {"Sorani Kurdish"},												-- Central Kurdish
	["cnu"] = {"Shenwa"},														-- Chenoua
	["coc"] = {"Cocopah"},														-- Cocopa
	["deu"] = {"early German"},													-- not in IANA; see code de
	["diq"] = {"Zazaki"},														-- Dimli (individual language)
	["egy"] = {"Egyptian"},														-- Egyptian (Ancient)
	["ell"] = {"Modern Greek"},													-- not in IANA; see code el
	["enm"] = {"Middle English"},												-- Middle English (1100-1500)
	["fit"] = {"Meänkieli"},													-- Tornedalen Finnish
	["fkv"] = {"Kven"},															-- Kven Finnish
	["frk"] = {"Old Frankish"},													-- Frankish
	["frm"] = {"Middle French"},												-- Middle French (ca. 1400-1600)
	["fro"] = {"Old French"},													-- Old French (842-ca. 1400)
	["fry"] = {"West Frisian"},													-- not in IANA; see code fy
	["gez"] = {"Ge'ez"},														-- Geez
	["gju"] = {"Gujari "},														-- Gujari; same, delete?
	["gmh"] = {"Middle High German"},											-- Middle High German (ca. 1050-1500)
	["goh"] = {"Old High German"},												-- Old High German (ca. 750-1050)
	["grc"] = {"Ancient Greek"},												-- Ancient Greek (to 1453)
	["gsw"] = {"Alemannic German"},												-- Swiss German, Alemannic, Alsatian
	["gul"] = {"Gullah"},														-- Sea Island Creole English
	["hak"] = {"Hakka"},														-- Hakka Chinese
	["hbo"] = {"Biblical Hebrew"},												-- Ancient Hebrew
	["hnd"] = {"Hindko"},														-- Southern Hindko
	["ikt"] = {"Inuvialuk"},													-- Inuinnaqtun, Western Canadian Inuktitut
--	["ilo"] = {"Ilokano"},														-- Iloko; disabled here in favor of Ilocano in Module:Lang/data
	["kaa"] = {"Karakalpak"},													-- Kara-Kalpak
	["khb"] = {"Tai Lü"},														-- Lü
	["kmr"] = {"Kurmanji Kurdish"},												-- Northern Kurdish
	["knn"] = {"Konkani"},														-- Konkani (individual language)
	["kok"] = {"Konkani"},														-- Konkani (macrolanguage)
	["kpo"] = {"Kposo"},														-- Ikposo
	["krj"] = {"Kinaray-a"},													-- Kinaray-A
--	["ksh"] = {"Ripuarian"},													-- Kölsch;  --ksh is the code of Colognian, but ksh.wiki is the Ripuarian Wikipedia; disabled here so that:
																				-- ksh -&gt; IANA/ISO-639-3 Kölsch; mis-x-colog -&gt; Colognian &amp; mis-x-ripuar -&gt; Ripuarian both defined in Module:Lang/data
	["ktz"] = {"Juǀ'hoan"},														-- Ju/'hoan, Juǀʼhoan, Juǀʼhoansi
	["lez"] = {"Lezgian"},														-- Lezghian
	["liv"] = {"Livonian"},														-- Liv
	["lng"] = {"Lombardic"},													-- Langobardic
--	["maz"] = {"Mazovian"},														-- Central Mazahua; a misuse of code for an unrelated language;
	["mga"] = {"Middle Irish"},													-- Middle Irish (900-1200)
	["mhr"] = {"Mari"},															-- Eastern Mari
	["mia"] = {"Miami-Illinois"},												-- Miami
	["miq"] = {"Miskito"},														-- Mískito
	["mix"] = {"Mixtec"},														-- Mixtepec Mixtec
--	["mla"] = {"Medieval Latin"},												-- Malo; clearly a misuse of code mla;
	["mni"] = {"Meitei"},														-- Manipuri
	["mol"] = {"Moldovan", "ro"},												-- Moldavian, Moldovan (639-3, both retired)
	["mrj"] = {"Hill Mari"},													-- Western Mari
	["mww"] = {"White Hmong"},													-- Hmong Daw
	["mzn"] = {"Mazanderani"},													-- Mazanderani
--	["nan"] = {"Taiwanese Hokkien"},											-- Min Nan Chinese; disabled here so that nan -&gt; Min Nan Chinese; nan-tw -&gt; Taiwanese Hokkien in Module:Lang/data
	["naq"] = {"Khoekhoe"},														-- Khoekhoe, Nama (Namibia); same as first in IANA list, delete?
--	["naz"] = {"North Azeri"},													-- Coatepec Nahuatl; clearly a misuse of code naz
	["nci"] = {"Classical Nahuatl"},											-- Classical Nahuatl; same, delete?
	["nds-nl"] = {"Dutch Low Saxon"},											-- Low German, Low Saxon; as spoken in the Netherlands; see code nsd
	["new"] = {"Nepal Bhasa"},													-- Newari, Nepal Bhasa
--	["nrm"] = {"Norman"},														-- Narom; clearly a misuse of code nrm
--	["nsd"] = {"Dutch Low Saxon"},												-- Southern Nisu; how can this be right? typo related to code nds-nl?
	["nso"] = {"Northern Sotho"},												-- Pedi, Northern Sotho, Sepedi
	["nwc"] = {"Classical Nepal Bhasa"},										-- Classical Newari, Classical Nepal Bhasa, Old Newari
	["oci"] = {"Provençal"},													-- oc
	["ood"] = {"O'odham"},														-- Tohono O'odham
	["ota"] = {"Ottoman Turkish"},												-- Ottoman Turkish (1500-1928)
	["otk"] = {"Old Turkic"},													-- Old Turkish
	["pal"] = {"Middle Persian"},												-- Pahlavi
	["pam"] = {"Kapampangan"},													-- Pampanga, Kapampangan
	["peo"] = {"Old Persian"},													-- Old Persian (ca. 600-400 B.C.)
	["phr"] = {"Potwari"},														-- Pahari-Potwari
	["pka"] = {"Jain Prakrit"},													-- Ardhamāgadhī Prākrit
	["pnb"] = {"Punjabi"},														-- Western Panjabi
	["psu"] = {"Shauraseni"},													-- Sauraseni Prākrit
	["rap"] = {"Rapa Nui"},														-- Rapanui
	["rar"] = {"Cook Islands Māori"},											-- Rarotongan, Cook Islands Maori
	["rmu"] = {"Scandoromani"},													-- Tavringer Romani
	["rom"] = {"Romani"},														-- Romany
	["rup"] = {"Aromanian"},													-- Macedo-Romanian, Aromanian, Arumanian
	["rus"] = {"Russian"},														-- not in IANA; see code ru
	["ryu"] = {"Okinawan"},														-- Central Okinawan
--	["sah"] = {"Sakha"},														-- Yakut; article moved to Yakut with this disucssion: Talk:Yakut_language#Requested_move_21_September_2015
	["sdc"] = {"Sassarese"},													-- Sassarese Sardinian
	["sdn"] = {"Gallurese"},													-- Gallurese Sardinian
	["sga"] = {"Old Irish"},													-- Old Irish (to 900)
	["shp"] = {"Shipibo"},														-- Shipibo-Conibo
	["skr"] = {"Saraiki"},														-- Saraiki, Seraiki; same as first in IANA list, delete?
	["src"] = {"Logudorese"},													-- Logudorese Sardinian
	["sro"] = {"Campidanese"},													-- Campidanese Sardinian
	["tkl"] = {"Tokelauan"},													-- Tokelau
	["tvl"] = {"Tuvaluan"},														-- Tuvalu
	["tyv"] = {"Tuvan"},														-- Tuvinian
	["vls"] = {"West Flemish"},													-- Vlaams
	["war"] = {"Waray"},														-- Waray (Philippines)
	["wep"] = {"Westphalian"},													-- Westphalien
	["xal"] = {"Oirat"},														-- Kalmyk, Oirat
	["xal-RU"] = {"Kalmyk Oirat"},
	["xcl"] = {"Old Armenian"},													-- Classical Armenian
	["yua"] = {"Yucatec Maya"},													-- Yucateco, Yucatec Maya


-- non-standard codes
	["bat-smg"] = {"Samogitian"},												-- bat = Baltic languages (639-2); dialect of Lithuanian has it's own IANA code sgs; bat-smg
	["be-x-old "] = {"Belarusian (Taraškievica)"},								-- be = Belarusian; x-old = private use tag; be-x-old.wikipedia.org; space char in index may indicate that this code not used
	["cbk-zam"] = {"Chavacano"},												-- cbk = Chavacano; zam = Zamboangueño? zam is not an IANA-registered extlang; cbk-zam.wikipedia.org
--	["cg"] = {"Montenegrin", "sr-ME"},											-- IANA / ISO 639-3 code is cnr
	["en-emodeng"] = {"Early Modern English"},									-- emodeng is not an IANA-registered variant
	["fiu-vro"] = {"Võro"},														-- fiu = Finno-Ugrian languages (639-2); vro = Võro (639-3); fiu-vro.wikipedia.org
	["gkm"] = {"Medieval Greek", "grc"},
	["grc-gre"] = {"Greek", "grc"},												-- grc = Ancient Greek (to 1453); gre not an IANA-registered code; used by Template:lang-grc-gre
	["map-bms"] = {"Banyumasan"},												-- dialect of Javanese; map = Austronesian languages (639-2); bms is an IANA registered code not related to Javanese; map-bms.wikipedia.org
	["roa-rup"] = {"Aromanian"},												-- roa = Romance languages (639-2); rup = Macedo-Romanian, Aromanian, Arumanian (639-3); roa-rup.wikipedia.org
	["roa-tara"] = {"Tarantino"},												-- roa = Romance languages (639-2); tara is not an IANA registered script; roa-tara.wikipedia.org
	["simple"] = {"Simple English"},											-- simple is not an IANA registered variant; simple.wikipedia.org
	["zh-classical"] = {"Classical Chinese"},									-- zh = Chinese; classical is not an IANA-registered variant; zh-classical.wikipedia.org
	["zh-min-nan"] = {"Min Nan"},												-- zh-min-nan = Minnan, Hokkien, Amoy, Taiwanese, Southern Min, Southern Fujian, Hoklo, Southern Fukien, Ho-lo; granfathered in IANA, nan preferred; zh-min-nan.wikipedia.org
	["zh-yue"] = {"Cantonese"}													-- zh-yue = Cantonese; redundant in IANA, yue preferred; zh-yue.wikipedia.org
	}</text>
      <sha1>jfj6ggnbh11amv2bxr9vubhm379g1cj</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Language/name/data</title>
    <ns>828</ns>
    <id>42491359</id>
    <revision>
      <id>816465604</id>
      <parentid>815267301</parentid>
      <timestamp>2017-12-21T14:33:30Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>+suppressed scripts;</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="2561">-- put tables and their tables together
local function __coalesce(...)
    local coalesced = {}
    for _, langslist in ipairs{...} do
        for langcode, langnames in pairs(langslist) do
            for _, langname in pairs(langnames) do
                if not coalesced[langcode] then
                    coalesced[langcode] = {}
                end
                table.insert(coalesced[langcode], langname)
            end
        end
    end
 
    return coalesced
end

-- make the keys lowercase
local function __preprocess(t, first_of_array_in_array)
    local preprocessed = {}
    if first_of_array_in_array then
    	-- keep only the 1st language name for each code, excluding synonyms
        for k, v in pairs(t) do
            preprocessed[k:lower()] = {v[1]}
        end
    else
        for k, v in pairs(t) do
            preprocessed[k:lower()] = v
        end
    end

    return preprocessed
end

-- all valid primary language subtags for BCP47 from IANA (most of them from ISO 639-1, -2 and -3 with some exclusions)
local __iana_languages = __preprocess(require("Module:Language/data/iana languages"));
-- ISO 639-3 contains additional 3-letter codes not inserted in the IANA database as they are aliased to 2-letter codes,
-- but excludes some deleted codes still valid in BCP47 (some of them are aliased)
local __iso_639_3      = __preprocess(require("Module:Language/data/ISO 639-3"));
-- Wikimedia wikis uses some non-standard codes and a subset of IANA codes, plus composite codes
local __wp_languages   = __preprocess(require("Module:Language/data/wp languages"), true);
-- all valid script subtags for BCP47 from IANA (excluding special ISO 15924 codes)
local iana_scripts     = __preprocess(require("Module:Language/data/iana scripts"));
-- all valid region subtags for BCP47 from IANA (derived from ISO 3166-1 excluding special codes, and from 3-digit UN M.49 codes for groups of countries)
local iana_regions     = __preprocess(require("Module:Language/data/iana regions"));

-- variant subtags from IANA; table format differs from the other IANA data tables
local iana_variants = __preprocess(require("Module:Language/data/iana variants"));
-- suppressed script subtags from IANA;
local iana_suppressed_scripts = __preprocess (require("Module:Language/data/iana suppressed scripts"));

return {
    lang   = __coalesce(__wp_languages, __iana_languages, __iso_639_3),
    lang_iana = __iana_languages,
    script = iana_scripts,
    region = iana_regions,
    variant = iana_variants,
    suppressed = iana_suppressed_scripts,
}</text>
      <sha1>053aid48tsmggzkzq8137e5wj9sbvtm</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Main</title>
    <ns>828</ns>
    <id>42570919</id>
    <revision>
      <id>923207673</id>
      <parentid>727437646</parentid>
      <timestamp>2019-10-27T02:18:55Z</timestamp>
      <contributor>
        <username>Black Falcon</username>
        <id>348521</id>
      </contributor>
      <comment>changing link from [[Wikipedia:Categorization]] (for editors) to [[Help:Categories]] (for readers)</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="2221">--[[
-- This module produces a link to a main article or articles. It implements the
-- template {{main}}.
-- 
-- If the module is used in category or category talk space, it produces "The
-- main article for this category is xxx". Otherwise, it produces
-- "Main article: xxx".
--]]

local mHatnote = require('Module:Hatnote')
local mHatlist = require('Module:Hatnote list')
local mArguments -- lazily initialise
local p = {}

function p.main(frame)
	mArguments = require('Module:Arguments')
	local args = mArguments.getArgs(frame, {parentOnly = true})
	local pages = {}
	for k, v in pairs(args) do
		if type(k) == 'number' then
			local display = args['label ' .. k] or args['l' .. k]
			local page = display and
				string.format('%s|%s', string.gsub(v, '|.*$', ''), display) or v
			pages[#pages + 1] = page
		end
	end
	if #pages == 0 and mw.title.getCurrentTitle().namespace == 0 then
		return mHatnote.makeWikitextError(
			'no page names specified',
			'Template:Main#Errors',
			args.category
		)
	end
	local options = {
		selfref = args.selfref
	}
	return p._main(pages, options)
end

function p._main(args, options)
	-- Get the list of pages. If no first page was specified we use the current
	-- page name.
	local currentTitle = mw.title.getCurrentTitle()
	if #args == 0 then args = {currentTitle.text} end
	local firstPage = string.gsub(args[1], '|.*$', '')
	-- Find the pagetype.
	local pageType = mHatnote.findNamespaceId(firstPage) == 0 and 'article' or 'page'
	-- Make the formatted link text
	list = mHatlist.andList(args, true)
	-- Build the text.
	local isPlural = #args &gt; 1
	local mainForm
	local curNs = currentTitle.namespace
	if (curNs == 14) or (curNs == 15) then --category/talk namespaces
		mainForm = isPlural and
			'The main %ss for this [[Help:Categories|category]] are %s'
			or
			'The main %s for this [[Help:Categories|category]] is %s'
	else
		mainForm = isPlural and 'Main %ss: %s' or 'Main %s: %s'
	end
	local text = string.format(mainForm, pageType, list)
	-- Process the options and pass the text to the _rellink function in
	-- [[Module:Hatnote]].
	options = options or {}
	local hnOptions = {
		selfref = options.selfref
	}
	return mHatnote._hatnote(text, hnOptions)
end

return p</text>
      <sha1>351nwvb1b2lqqeaim7uj9w4zpojq8rr</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Message box</title>
    <ns>828</ns>
    <id>40574910</id>
    <revision>
      <id>885563313</id>
      <parentid>874754416</parentid>
      <timestamp>2019-02-28T20:36:10Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>code requested by [[User:Danski454]] to fix demospace feature</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="17776">-- This is a meta-module for producing message box templates, including
-- {{mbox}}, {{ambox}}, {{imbox}}, {{tmbox}}, {{ombox}}, {{cmbox}} and {{fmbox}}.

-- Load necessary modules.
require('Module:No globals')
local getArgs
local yesno = require('Module:Yesno')

-- Get a language object for formatDate and ucfirst.
local lang = mw.language.getContentLanguage()

-- Define constants
local CONFIG_MODULE = 'Module:Message box/configuration'
local DEMOSPACES = {talk = 'tmbox', image = 'imbox', file = 'imbox', category = 'cmbox', article = 'ambox', main = 'ambox'}

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

local function getTitleObject(...)
	-- Get the title object, passing the function through pcall
	-- in case we are over the expensive function count limit.
	local success, title = pcall(mw.title.new, ...)
	if success then
		return title
	end
end

local function union(t1, t2)
	-- Returns the union of two arrays.
	local vals = {}
	for i, v in ipairs(t1) do
		vals[v] = true
	end
	for i, v in ipairs(t2) do
		vals[v] = true
	end
	local ret = {}
	for k in pairs(vals) do
		table.insert(ret, k)
	end
	table.sort(ret)
	return ret
end

local function getArgNums(args, prefix)
	local nums = {}
	for k, v in pairs(args) do
		local num = mw.ustring.match(tostring(k), '^' .. prefix .. '([1-9]%d*)$')
		if num then
			table.insert(nums, tonumber(num))
		end
	end
	table.sort(nums)
	return nums
end

--------------------------------------------------------------------------------
-- Box class definition
--------------------------------------------------------------------------------

local MessageBox = {}
MessageBox.__index = MessageBox

function MessageBox.new(boxType, args, cfg)
	args = args or {}
	local obj = {}

	-- Set the title object and the namespace.
	obj.title = getTitleObject(args.page) or mw.title.getCurrentTitle()

	-- Set the config for our box type.
	obj.cfg = cfg[boxType]
	if not obj.cfg then
		local ns = obj.title.namespace
		-- boxType is "mbox" or invalid input
		if args.demospace and args.demospace ~= '' then
			-- implement demospace parameter of mbox
			local demospace = string.lower(args.demospace)
			if DEMOSPACES[demospace] then
				-- use template from DEMOSPACES
				obj.cfg = cfg[DEMOSPACES[demospace]]
			elseif string.find( demospace, 'talk' ) then
				-- demo as a talk page
				obj.cfg = cfg.tmbox
			else
				-- default to ombox
				obj.cfg = cfg.ombox
			end
		elseif ns == 0 then
			obj.cfg = cfg.ambox -- main namespace
		elseif ns == 6 then
			obj.cfg = cfg.imbox -- file namespace
		elseif ns == 14 then
			obj.cfg = cfg.cmbox -- category namespace
		else
			local nsTable = mw.site.namespaces[ns]
			if nsTable and nsTable.isTalk then
				obj.cfg = cfg.tmbox -- any talk namespace
			else
				obj.cfg = cfg.ombox -- other namespaces or invalid input
			end
		end
	end

	-- Set the arguments, and remove all blank arguments except for the ones
	-- listed in cfg.allowBlankParams.
	do
		local newArgs = {}
		for k, v in pairs(args) do
			if v ~= '' then
				newArgs[k] = v
			end
		end
		for i, param in ipairs(obj.cfg.allowBlankParams or {}) do
			newArgs[param] = args[param]
		end
		obj.args = newArgs
	end

	-- Define internal data structure.
	obj.categories = {}
	obj.classes = {}
	-- For lazy loading of [[Module:Category handler]].
	obj.hasCategories = false

	return setmetatable(obj, MessageBox)
end

function MessageBox:addCat(ns, cat, sort)
	if not cat then
		return nil
	end
	if sort then
		cat = string.format('[[Category:%s|%s]]', cat, sort)
	else
		cat = string.format('[[Category:%s]]', cat)
	end
	self.hasCategories = true
	self.categories[ns] = self.categories[ns] or {}
	table.insert(self.categories[ns], cat)
end

function MessageBox:addClass(class)
	if not class then
		return nil
	end
	table.insert(self.classes, class)
end

function MessageBox:setParameters()
	local args = self.args
	local cfg = self.cfg

	-- Get type data.
	self.type = args.type
	local typeData = cfg.types[self.type]
	self.invalidTypeError = cfg.showInvalidTypeError
		and self.type
		and not typeData
	typeData = typeData or cfg.types[cfg.default]
	self.typeClass = typeData.class
	self.typeImage = typeData.image

	-- Find if the box has been wrongly substituted.
	self.isSubstituted = cfg.substCheck and args.subst == 'SUBST'

	-- Find whether we are using a small message box.
	self.isSmall = cfg.allowSmall and (
		cfg.smallParam and args.small == cfg.smallParam
		or not cfg.smallParam and yesno(args.small)
	)

	-- Add attributes, classes and styles.
	self.id = args.id
	self.name = args.name
	if self.name then
		self:addClass('box-' .. string.gsub(self.name,' ','_'))
	end
	if yesno(args.plainlinks) ~= false then
		self:addClass('plainlinks')
	end
	for _, class in ipairs(cfg.classes or {}) do
		self:addClass(class)
	end
	if self.isSmall then
		self:addClass(cfg.smallClass or 'mbox-small')
	end
	self:addClass(self.typeClass)
	self:addClass(args.class)
	self.style = args.style
	self.attrs = args.attrs

	-- Set text style.
	self.textstyle = args.textstyle

	-- Find if we are on the template page or not. This functionality is only
	-- used if useCollapsibleTextFields is set, or if both cfg.templateCategory
	-- and cfg.templateCategoryRequireName are set.
	self.useCollapsibleTextFields = cfg.useCollapsibleTextFields
	if self.useCollapsibleTextFields
		or cfg.templateCategory
		and cfg.templateCategoryRequireName
	then
		if self.name then
			local templateName = mw.ustring.match(
				self.name,
				'^[tT][eE][mM][pP][lL][aA][tT][eE][%s_]*:[%s_]*(.*)$'
			) or self.name
			templateName = 'Template:' .. templateName
			self.templateTitle = getTitleObject(templateName)
		end
		self.isTemplatePage = self.templateTitle
			and mw.title.equals(self.title, self.templateTitle)
	end
	
	-- Process data for collapsible text fields. At the moment these are only
	-- used in {{ambox}}.
	if self.useCollapsibleTextFields then
		-- Get the self.issue value.
		if self.isSmall and args.smalltext then
			self.issue = args.smalltext
		else
			local sect
			if args.sect == '' then
				sect = 'This ' .. (cfg.sectionDefault or 'page')
			elseif type(args.sect) == 'string' then
				sect = 'This ' .. args.sect
			end
			local issue = args.issue
			issue = type(issue) == 'string' and issue ~= '' and issue or nil
			local text = args.text
			text = type(text) == 'string' and text or nil
			local issues = {}
			table.insert(issues, sect)
			table.insert(issues, issue)
			table.insert(issues, text)
			self.issue = table.concat(issues, ' ')
		end

		-- Get the self.talk value.
		local talk = args.talk
		-- Show talk links on the template page or template subpages if the talk
		-- parameter is blank.
		if talk == ''
			and self.templateTitle
			and (
				mw.title.equals(self.templateTitle, self.title)
				or self.title:isSubpageOf(self.templateTitle)
			)
		then
			talk = '#'
		elseif talk == '' then
			talk = nil
		end
		if talk then
			-- If the talk value is a talk page, make a link to that page. Else
			-- assume that it's a section heading, and make a link to the talk
			-- page of the current page with that section heading.
			local talkTitle = getTitleObject(talk)
			local talkArgIsTalkPage = true
			if not talkTitle or not talkTitle.isTalkPage then
				talkArgIsTalkPage = false
				talkTitle = getTitleObject(
					self.title.text,
					mw.site.namespaces[self.title.namespace].talk.id
				)
			end
			if talkTitle and talkTitle.exists then
				local talkText = 'Relevant discussion may be found on'
				if talkArgIsTalkPage then
					talkText = string.format(
						'%s [[%s|%s]].',
						talkText,
						talk,
						talkTitle.prefixedText
					)
				else
					talkText = string.format(
						'%s the [[%s#%s|talk page]].',
						talkText,
						talkTitle.prefixedText,
						talk
					)
				end
				self.talk = talkText
			end
		end

		-- Get other values.
		self.fix = args.fix ~= '' and args.fix or nil
		local date
		if args.date and args.date ~= '' then
			date = args.date
		elseif args.date == '' and self.isTemplatePage then
			date = lang:formatDate('F Y')
		end
		if date then
			self.date = string.format(" &lt;small class='date-container'&gt;''(&lt;span class='date'&gt;%s&lt;/span&gt;)''&lt;/small&gt;", date)
		end
		self.info = args.info
		if yesno(args.removalnotice) then
			self.removalNotice = cfg.removalNotice
		end
	end

	-- Set the non-collapsible text field. At the moment this is used by all box
	-- types other than ambox, and also by ambox when small=yes.
	if self.isSmall then
		self.text = args.smalltext or args.text
	else
		self.text = args.text
	end

	-- Set the below row.
	self.below = cfg.below and args.below

	-- General image settings.
	self.imageCellDiv = not self.isSmall and cfg.imageCellDiv
	self.imageEmptyCell = cfg.imageEmptyCell
	if cfg.imageEmptyCellStyle then
		self.imageEmptyCellStyle = 'border:none;padding:0px;width:1px'
	end

	-- Left image settings.
	local imageLeft = self.isSmall and args.smallimage or args.image
	if cfg.imageCheckBlank and imageLeft ~= 'blank' and imageLeft ~= 'none'
		or not cfg.imageCheckBlank and imageLeft ~= 'none'
	then
		self.imageLeft = imageLeft
		if not imageLeft then
			local imageSize = self.isSmall
				and (cfg.imageSmallSize or '30x30px')
				or '40x40px'
			self.imageLeft = string.format('[[File:%s|%s|link=|alt=]]', self.typeImage
				or 'Imbox notice.png', imageSize)
		end
	end

	-- Right image settings.
	local imageRight = self.isSmall and args.smallimageright or args.imageright
	if not (cfg.imageRightNone and imageRight == 'none') then
		self.imageRight = imageRight
	end
end

function MessageBox:setMainspaceCategories()
	local args = self.args
	local cfg = self.cfg

	if not cfg.allowMainspaceCategories then
		return nil
	end

	local nums = {}
	for _, prefix in ipairs{'cat', 'category', 'all'} do
		args[prefix .. '1'] = args[prefix]
		nums = union(nums, getArgNums(args, prefix))
	end

	-- The following is roughly equivalent to the old {{Ambox/category}}.
	local date = args.date
	date = type(date) == 'string' and date
	local preposition = 'from'
	for _, num in ipairs(nums) do
		local mainCat = args['cat' .. tostring(num)]
			or args['category' .. tostring(num)]
		local allCat = args['all' .. tostring(num)]
		mainCat = type(mainCat) == 'string' and mainCat
		allCat = type(allCat) == 'string' and allCat
		if mainCat and date and date ~= '' then
			local catTitle = string.format('%s %s %s', mainCat, preposition, date)
			self:addCat(0, catTitle)
			catTitle = getTitleObject('Category:' .. catTitle)
			if not catTitle or not catTitle.exists then
				self:addCat(0, 'Articles with invalid date parameter in template')
			end
		elseif mainCat and (not date or date == '') then
			self:addCat(0, mainCat)
		end
		if allCat then
			self:addCat(0, allCat)
		end
	end
end

function MessageBox:setTemplateCategories()
	local args = self.args
	local cfg = self.cfg

	-- Add template categories.
	if cfg.templateCategory then
		if cfg.templateCategoryRequireName then
			if self.isTemplatePage then
				self:addCat(10, cfg.templateCategory)
			end
		elseif not self.title.isSubpage then
			self:addCat(10, cfg.templateCategory)
		end
	end

	-- Add template error categories.
	if cfg.templateErrorCategory then
		local templateErrorCategory = cfg.templateErrorCategory
		local templateCat, templateSort
		if not self.name and not self.title.isSubpage then
			templateCat = templateErrorCategory
		elseif self.isTemplatePage then
			local paramsToCheck = cfg.templateErrorParamsToCheck or {}
			local count = 0
			for i, param in ipairs(paramsToCheck) do
				if not args[param] then
					count = count + 1
				end
			end
			if count &gt; 0 then
				templateCat = templateErrorCategory
				templateSort = tostring(count)
			end
			if self.categoryNums and #self.categoryNums &gt; 0 then
				templateCat = templateErrorCategory
				templateSort = 'C'
			end
		end
		self:addCat(10, templateCat, templateSort)
	end
end

function MessageBox:setAllNamespaceCategories()
	-- Set categories for all namespaces.
	if self.invalidTypeError then
		local allSort = (self.title.namespace == 0 and 'Main:' or '') .. self.title.prefixedText
		self:addCat('all', 'Wikipedia message box parameter needs fixing', allSort)
	end
	if self.isSubstituted then
		self:addCat('all', 'Pages with incorrectly substituted templates')
	end
end

function MessageBox:setCategories()
	if self.title.namespace == 0 then
		self:setMainspaceCategories()
	elseif self.title.namespace == 10 then
		self:setTemplateCategories()
	end
	self:setAllNamespaceCategories()
end

function MessageBox:renderCategories()
	if not self.hasCategories then
		-- No categories added, no need to pass them to Category handler so,
		-- if it was invoked, it would return the empty string.
		-- So we shortcut and return the empty string.
		return ""
	end
	-- Convert category tables to strings and pass them through
	-- [[Module:Category handler]].
	return require('Module:Category handler')._main{
		main = table.concat(self.categories[0] or {}),
		template = table.concat(self.categories[10] or {}),
		all = table.concat(self.categories.all or {}),
		nocat = self.args.nocat,
		page = self.args.page
	}
end

function MessageBox:export()
	local root = mw.html.create()

	-- Add the subst check error.
	if self.isSubstituted and self.name then
		root:tag('b')
			:addClass('error')
			:wikitext(string.format(
				'Template &lt;code&gt;%s[[Template:%s|%s]]%s&lt;/code&gt; has been incorrectly substituted.',
				mw.text.nowiki('{{'), self.name, self.name, mw.text.nowiki('}}')
			))
	end

	-- Create the box table.
	local boxTable = root:tag('table')
	boxTable:attr('id', self.id or nil)
	for i, class in ipairs(self.classes or {}) do
		boxTable:addClass(class or nil)
	end
	boxTable
		:cssText(self.style or nil)
		:attr('role', 'presentation')

	if self.attrs then
		boxTable:attr(self.attrs)
	end

	-- Add the left-hand image.
	local row = boxTable:tag('tr')
	if self.imageLeft then
		local imageLeftCell = row:tag('td'):addClass('mbox-image')
		if self.imageCellDiv then
			-- If we are using a div, redefine imageLeftCell so that the image
			-- is inside it. Divs use style="width: 52px;", which limits the
			-- image width to 52px. If any images in a div are wider than that,
			-- they may overlap with the text or cause other display problems.
			imageLeftCell = imageLeftCell:tag('div'):css('width', '52px')
		end
		imageLeftCell:wikitext(self.imageLeft or nil)
	elseif self.imageEmptyCell then
		-- Some message boxes define an empty cell if no image is specified, and
		-- some don't. The old template code in templates where empty cells are
		-- specified gives the following hint: "No image. Cell with some width
		-- or padding necessary for text cell to have 100% width."
		row:tag('td')
			:addClass('mbox-empty-cell')
			:cssText(self.imageEmptyCellStyle or nil)
	end

	-- Add the text.
	local textCell = row:tag('td'):addClass('mbox-text')
	if self.useCollapsibleTextFields then
		-- The message box uses advanced text parameters that allow things to be
		-- collapsible. At the moment, only ambox uses this.
		textCell:cssText(self.textstyle or nil)
		local textCellDiv = textCell:tag('div')
		textCellDiv
			:addClass('mbox-text-span')
			:wikitext(self.issue or nil)
		if (self.talk or self.fix) and not self.isSmall then
			textCellDiv:tag('span')
				:addClass('hide-when-compact')
				:wikitext(self.talk and (' ' .. self.talk) or nil)
				:wikitext(self.fix and (' ' .. self.fix) or nil)
		end
		textCellDiv:wikitext(self.date and (' ' .. self.date) or nil)
		if self.info and not self.isSmall then
			textCellDiv
				:tag('span')
				:addClass('hide-when-compact')
				:wikitext(self.info and (' ' .. self.info) or nil)
		end
		if self.removalNotice then
			textCellDiv:tag('small')
				:addClass('hide-when-compact')
				:tag('i')
					:wikitext(string.format(" (%s)", self.removalNotice))
		end
	else
		-- Default text formatting - anything goes.
		textCell
			:cssText(self.textstyle or nil)
			:wikitext(self.text or nil)
	end

	-- Add the right-hand image.
	if self.imageRight then
		local imageRightCell = row:tag('td'):addClass('mbox-imageright')
		if self.imageCellDiv then
			-- If we are using a div, redefine imageRightCell so that the image
			-- is inside it.
			imageRightCell = imageRightCell:tag('div'):css('width', '52px')
		end
		imageRightCell
			:wikitext(self.imageRight or nil)
	end

	-- Add the below row.
	if self.below then
		boxTable:tag('tr')
			:tag('td')
				:attr('colspan', self.imageRight and '3' or '2')
				:addClass('mbox-text')
				:cssText(self.textstyle or nil)
				:wikitext(self.below or nil)
	end

	-- Add error message for invalid type parameters.
	if self.invalidTypeError then
		root:tag('div')
			:css('text-align', 'center')
			:wikitext(string.format(
				'This message box is using an invalid "type=%s" parameter and needs fixing.',
				self.type or ''
			))
	end

	-- Add categories.
	root:wikitext(self:renderCategories() or nil)

	return tostring(root)
end

--------------------------------------------------------------------------------
-- Exports
--------------------------------------------------------------------------------

local p, mt = {}, {}

function p._exportClasses()
	-- For testing.
	return {
		MessageBox = MessageBox
	}
end

function p.main(boxType, args, cfgTables)
	local box = MessageBox.new(boxType, args, cfgTables or mw.loadData(CONFIG_MODULE))
	box:setParameters()
	box:setCategories()
	return box:export()
end

function mt.__index(t, k)
	return function (frame)
		if not getArgs then
			getArgs = require('Module:Arguments').getArgs
		end
		return t.main(k, getArgs(frame, {trim = false, removeBlanks = false}))
	end
end

return setmetatable(p, mt)</text>
      <sha1>jxxabz8imuheyjlrvf8pyk1zbhdiz42</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Message box/configuration</title>
    <ns>828</ns>
    <id>40627038</id>
    <revision>
      <id>871172642</id>
      <parentid>868865135</parentid>
      <timestamp>2018-11-29T12:09:34Z</timestamp>
      <contributor>
        <username>Amorymeltzer</username>
        <id>141948</id>
      </contributor>
      <comment>Use semi protection shackle with keyhole to genericize the protection icon, per talk page request</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="6141">--------------------------------------------------------------------------------
--                          Message box configuration                         --
--                                                                            --
-- This module contains configuration data for [[Module:Message box]].        --
--------------------------------------------------------------------------------

return {
	ambox = {
		types = {
			speedy = {
				class = 'ambox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'ambox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'ambox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'ambox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'ambox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'ambox-protection',
				image = 'Semi-protection-shackle-keyhole.svg'
			},
			notice = {
				class = 'ambox-notice',
				image = 'Information icon4.svg'
			}
		},
		default                     = 'notice',
		allowBlankParams            = {'talk', 'sect', 'date', 'issue', 'fix', 'subst', 'hidden'},
		allowSmall                  = true,
		smallParam                  = 'left',
		smallClass                  = 'mbox-small-left',
		substCheck                  = true,
		classes                     = {'metadata', 'ambox'},
		imageEmptyCell              = true,
		imageCheckBlank             = true,
		imageSmallSize              = '20x20px',
		imageCellDiv                = true,
		useCollapsibleTextFields    = true,
		imageRightNone              = true,
		sectionDefault              = 'article',
		allowMainspaceCategories    = true,
		templateCategory            = 'Article message templates',
	        templateCategoryRequireName = true,
		templateErrorCategory       = 'Article message templates with missing parameters',
		templateErrorParamsToCheck  = {'issue', 'fix', 'subst'},
		removalNotice               = '[[Help:Maintenance template removal|Learn how and when to remove this template message]]'
	},
	
	cmbox = {
		types = {
			speedy = {
				class = 'cmbox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'cmbox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'cmbox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'cmbox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'cmbox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'cmbox-protection',
				image = 'Semi-protection-shackle-keyhole.svg'
			},
			notice = {
				class = 'cmbox-notice',
				image = 'Information icon4.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'cmbox'},
		imageEmptyCell       = true
	},
	
	fmbox = {
		types = {
			warning = {
				class = 'fmbox-warning',
				image = 'Ambox warning pn.svg'
			},
			editnotice = {
				class = 'fmbox-editnotice',
				image = 'Information icon4.svg'
			},
			system = {
				class = 'fmbox-system',
				image = 'Information icon4.svg'
			}
		},
		default              = 'system',
		showInvalidTypeError = true,
		classes              = {'fmbox'},
		imageEmptyCell       = false,
		imageRightNone       = false
	},
	
	imbox = {
		types = {
			speedy = {
				class = 'imbox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'imbox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'imbox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'imbox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'imbox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'imbox-protection',
				image = 'Semi-protection-shackle-keyhole.svg'
			},
			license = {
				class = 'imbox-license licensetpl',
				image = 'Imbox license.png' -- @todo We need an SVG version of this
			},
			featured = {
				class = 'imbox-featured',
				image = 'Cscr-featured.svg'
			},
			notice = {
				class = 'imbox-notice',
				image = 'Information icon4.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'imbox'},
		imageEmptyCell       = true,
		below                = true,
		templateCategory     = 'File message boxes'
	},
	
	ombox = {
		types = {
			speedy = {
				class = 'ombox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'ombox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'ombox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'ombox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'ombox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'ombox-protection',
				image = 'Semi-protection-shackle-keyhole.svg'
			},
			notice = {
				class = 'ombox-notice',
				image = 'Information icon4.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'ombox'},
		allowSmall           = true,
		imageEmptyCell       = true,
		imageRightNone       = true
	},
	
	tmbox = {
		types = {
			speedy = {
				class = 'tmbox-speedy',
				image = 'Ambox warning pn.svg'
			},
			delete = {
				class = 'tmbox-delete',
				image = 'Ambox warning pn.svg'
			},
			content = {
				class = 'tmbox-content',
				image = 'Ambox important.svg'
			},
			style = {
				class = 'tmbox-style',
				image = 'Edit-clear.svg'
			},
			move = {
				class = 'tmbox-move',
				image = 'Merge-split-transwiki default.svg'
			},
			protection = {
				class = 'tmbox-protection',
				image = 'Semi-protection-shackle-keyhole.svg'
			},
			notice = {
				class = 'tmbox-notice',
				image = 'Information icon4.svg'
			}
		},
		default              = 'notice',
		showInvalidTypeError = true,
		classes              = {'tmbox'},
		allowSmall           = true,
		imageRightNone       = true,
		imageEmptyCell       = true,
		imageEmptyCellStyle  = true,
		templateCategory     = 'Talk message boxes'
	}
}</text>
      <sha1>rz63o9789otb966y0k5pcntqf0bl6te</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Namespace detect/config</title>
    <ns>828</ns>
    <id>42256703</id>
    <revision>
      <id>602886681</id>
      <parentid>602823531</parentid>
      <timestamp>2014-04-05T17:03:49Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>use cfg.demopage rather than cfg.page now that the default parameter has been changed on the /data page</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3545">--------------------------------------------------------------------------------
--                    Namespace detect configuration data                     --
--                                                                            --
-- This module stores configuration data for Module:Namespace detect. Here    --
-- you can localise the module to your wiki's language.                       --
--                                                                            --
-- To activate a configuration item, you need to uncomment it. This means     --
-- that you need to remove the text "-- " at the start of the line.           --
--------------------------------------------------------------------------------

local cfg = {} -- Don't edit this line.

--------------------------------------------------------------------------------
--                              Parameter names                               --
-- These configuration items specify custom parameter names. Values added     --
-- here will work in addition to the default English parameter names.         --
-- To add one extra name, you can use this format:                            --
--                                                                            --
-- cfg.foo = 'parameter name'                                                 --
--                                                                            --
-- To add multiple names, you can use this format:                            --
--                                                                            --
-- cfg.foo = {'parameter name 1', 'parameter name 2', 'parameter name 3'}     --
--------------------------------------------------------------------------------

---- This parameter displays content for the main namespace:
-- cfg.main = 'main'

---- This parameter displays in talk namespaces:
-- cfg.talk = 'talk'

---- This parameter displays content for "other" namespaces (namespaces for which
---- parameters have not been specified):
-- cfg.other = 'other'

---- This parameter makes talk pages behave as though they are the corresponding
---- subject namespace. Note that this parameter is used with [[Module:Yesno]].
---- Edit that module to change the default values of "yes", "no", etc.
-- cfg.subjectns = 'subjectns'

---- This parameter sets a demonstration namespace:
-- cfg.demospace = 'demospace'

---- This parameter sets a specific page to compare:
cfg.demopage = 'page'

--------------------------------------------------------------------------------
--                           Table configuration                              --
-- These configuration items allow customisation of the "table" function,     --
-- used to generate a table of possible parameters in the module              --
-- documentation.                                                             --
--------------------------------------------------------------------------------

---- The header for the namespace column in the wikitable containing the list of
---- possible subject-space parameters.
-- cfg.wikitableNamespaceHeader = 'Namespace'

---- The header for the wikitable containing the list of possible subject-space
---- parameters.
-- cfg.wikitableAliasesHeader = 'Aliases'

--------------------------------------------------------------------------------
--                        End of configuration data                           --
--------------------------------------------------------------------------------

return cfg -- Don't edit this line.</text>
      <sha1>1o6ozz56i8q0xgyl6xa41n2v7kelhli</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Namespace detect/data</title>
    <ns>828</ns>
    <id>42257476</id>
    <revision>
      <id>602886511</id>
      <parentid>602823622</parentid>
      <timestamp>2014-04-05T17:02:16Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>bug fix - use the demospace parameter as both key and value in the argKeys table</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="2569">--------------------------------------------------------------------------------
--                          Namespace detect data                             --
-- This module holds data for [[Module:Namespace detect]] to be loaded per    --
-- page, rather than per #invoke, for performance reasons.                    --
--------------------------------------------------------------------------------

local cfg = require('Module:Namespace detect/config')

local function addKey(t, key, defaultKey)
	if key ~= defaultKey then
		t[#t + 1] = key
	end
end

-- Get a table of parameters to query for each default parameter name.
-- This allows wikis to customise parameter names in the cfg table while
-- ensuring that default parameter names will always work. The cfg table
-- values can be added as a string, or as an array of strings.

local defaultKeys = {
	'main',
	'talk',
	'other',
	'subjectns',
	'demospace',
	'demopage'
}

local argKeys = {}
for i, defaultKey in ipairs(defaultKeys) do
	argKeys[defaultKey] = {defaultKey}
end

for defaultKey, t in pairs(argKeys) do
	local cfgValue = cfg[defaultKey]
	local cfgValueType = type(cfgValue)
	if cfgValueType == 'string' then
		addKey(t, cfgValue, defaultKey)
	elseif cfgValueType == 'table' then
		for i, key in ipairs(cfgValue) do
			addKey(t, key, defaultKey)
		end
	end
	cfg[defaultKey] = nil -- Free the cfg value as we don't need it any more.
end

local function getParamMappings()
	--[[
	-- Returns a table of how parameter names map to namespace names. The keys
	-- are the actual namespace names, in lower case, and the values are the
	-- possible parameter names for that namespace, also in lower case. The
	-- table entries are structured like this:
	-- {
	--   [''] = {'main'},
	--   ['wikipedia'] = {'wikipedia', 'project', 'wp'},
	--   ...
	-- }
	--]]
	local mappings = {}
	local mainNsName = mw.site.subjectNamespaces[0].name
	mainNsName = mw.ustring.lower(mainNsName)
	mappings[mainNsName] = mw.clone(argKeys.main)
	mappings['talk'] = mw.clone(argKeys.talk)
	for nsid, ns in pairs(mw.site.subjectNamespaces) do
		if nsid ~= 0 then -- Exclude main namespace.
			local nsname = mw.ustring.lower(ns.name)
			local canonicalName = mw.ustring.lower(ns.canonicalName)
			mappings[nsname] = {nsname}
			if canonicalName ~= nsname then
				table.insert(mappings[nsname], canonicalName)
			end
			for _, alias in ipairs(ns.aliases) do
				table.insert(mappings[nsname], mw.ustring.lower(alias))
			end
		end
	end
	return mappings
end

return {
	argKeys = argKeys,
	cfg = cfg,
	mappings = getParamMappings()
}</text>
      <sha1>ojp6d3pc8mql5nufaqdg576c9so3479</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Navbar</title>
    <ns>828</ns>
    <id>38827227</id>
    <revision>
      <id>835774036</id>
      <parentid>835562114</parentid>
      <timestamp>2018-04-10T17:55:58Z</timestamp>
      <contributor>
        <username>Primefac</username>
        <id>11508456</id>
      </contributor>
      <comment>another local</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3091">local p = {}

local getArgs
local ul

function p.addItem (mini, full, link, descrip, args, url)
	local l
	if url then
		l = {'[', '', ']'}
	else
		l = {'[[', '|', ']]'}
	end
	ul:tag('li')
		:addClass('nv-'..full)
		:wikitext(l[1] .. link .. l[2])
		:tag(args.mini and 'abbr' or 'span')
			:attr('title', descrip..' this template')
			:cssText(args.fontstyle)
			:wikitext(args.mini and mini or full)
			:done()
		:wikitext(l[3])
end

function p.brackets (position, c, args, div)
	if args.brackets then
		div
			:tag('span')
				:css('margin-'..position, '-0.125em')
				:cssText(args.fontstyle)
				:wikitext(c)
	end
end

function p._navbar(args)
	local show = {true, true, true, false, false, false}
	local titleArg = 1
	
	if args.collapsible then
		titleArg = 2
		if not args.plain then args.mini = 1 end
		if args.fontcolor then
			args.fontstyle = 'color:' .. args.fontcolor .. ';'
		end
		args.style = 'float:left; text-align:left'
	end
	
	if args.template then
		titleArg = 'template'
		show = {true, false, false, false, false, false}
		local index = {t = 2, d = 2, e = 3, h = 4, m = 5, w = 6, talk = 2, edit = 3, hist = 4, move = 5, watch = 6}
		for k,v in ipairs(require ('Module:TableTools').compressSparseArray(args)) do
			local num = index[v]
			if num then show[num] = true end
		end
	end
	
	if args.noedit then show[3] = false end
	
	local titleText = args[titleArg] or (':' .. mw.getCurrentFrame():getParent():getTitle())
	local title = mw.title.new(mw.text.trim(titleText), 'Template')
	if not title then
		error('Invalid title ' .. titleText)
	end
	local talkpage = title.talkPageTitle and title.talkPageTitle.fullText or ''
	
	local div = mw.html.create():tag('div')
	div
		:addClass('plainlinks')
		:addClass('hlist')
		:addClass('navbar')
		:cssText(args.style)

	if args.mini then div:addClass('mini') end

	if not (args.mini or args.plain) then
		div
			:tag('span')
				:css('word-spacing', 0)
				:cssText(args.fontstyle)
				:wikitext(args.text or 'This box:')
				:wikitext(' ')
	end
	
	p.brackets('right', '&amp;#91; ', args, div)
	
	ul = div:tag('ul')
	if show[1] then p.addItem('v', 'view', title.fullText, 'View', args) end
	if show[2] then p.addItem('t', 'talk', talkpage, 'Discuss', args) end
	if show[3] then p.addItem('e', 'edit', title:fullUrl('action=edit'), 'Edit', args, true) end
	if show[4] then p.addItem('h', 'hist', title:fullUrl('action=history'), 'History of', args, true) end
	if show[5] then
		local move = mw.title.new ('Special:Movepage')
		p.addItem('m', 'move', move:fullUrl('target='..title.fullText), 'Move', args, true) end
	if show[6] then p.addItem('w', 'watch', title:fullUrl('action=watch'), 'Watch', args, true) end
	
	p.brackets('left', ' &amp;#93;', args, div)
	
	if args.collapsible then
		div
			:done()
		:tag('div')
			:css('font-size', '114%')
			:css('margin', args.mini and '0 4em' or '0 7em')
			:cssText(args.fontstyle)
			:wikitext(args[1])
	end

	return tostring(div:done())
end

function p.navbar(frame)
	if not getArgs then
		getArgs = require('Module:Arguments').getArgs
	end
	return p._navbar(getArgs(frame))
end

return p</text>
      <sha1>0kto9e56pycr6rz0vadnqvghkpm06x9</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Navbox</title>
    <ns>828</ns>
    <id>38634746</id>
    <revision>
      <id>911412868</id>
      <parentid>910240306</parentid>
      <timestamp>2019-08-18T17:49:23Z</timestamp>
      <contributor>
        <username>Izno</username>
        <id>2927383</id>
      </contributor>
      <comment>per tper</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="12969">--
-- This module implements {{Navbox}}
--

local p = {}

local navbar = require('Module:Navbar')._navbar
local getArgs -- lazily initialized

local args
local border
local listnums
local ODD_EVEN_MARKER = '\127_ODDEVEN_\127'
local RESTART_MARKER = '\127_ODDEVEN0_\127'
local REGEX_MARKER = '\127_ODDEVEN(%d?)_\127'

local function striped(wikitext)
	-- Return wikitext with markers replaced for odd/even striping.
	-- Child (subgroup) navboxes are flagged with a category that is removed
	-- by parent navboxes. The result is that the category shows all pages
	-- where a child navbox is not contained in a parent navbox.
	local orphanCat = '[[Category:Navbox orphans]]'
	if border == 'subgroup' and args.orphan ~= 'yes' then
		-- No change; striping occurs in outermost navbox.
		return wikitext .. orphanCat
	end
	local first, second = 'odd', 'even'
	if args.evenodd then
		if args.evenodd == 'swap' then
			first, second = second, first
		else
			first = args.evenodd
			second = first
		end
	end
	local changer
	if first == second then
		changer = first
	else
		local index = 0
		changer = function (code)
			if code == '0' then
				-- Current occurrence is for a group before a nested table.
				-- Set it to first as a valid although pointless class.
				-- The next occurrence will be the first row after a title
				-- in a subgroup and will also be first.
				index = 0
				return first
			end
			index = index + 1
			return index % 2 == 1 and first or second
		end
	end
	local regex = orphanCat:gsub('([%[%]])', '%%%1')
	return (wikitext:gsub(regex, ''):gsub(REGEX_MARKER, changer))  -- () omits gsub count
end

local function processItem(item, nowrapitems)
	if item:sub(1, 2) == '{|' then
		-- Applying nowrap to lines in a table does not make sense.
		-- Add newlines to compensate for trim of x in |parm=x in a template.
		return '\n' .. item ..'\n'
	end
	if nowrapitems == 'yes' then
		local lines = {}
		for line in (item .. '\n'):gmatch('([^\n]*)\n') do
			local prefix, content = line:match('^([*:;#]+)%s*(.*)')
			if prefix and not content:match('^&lt;span class="nowrap"&gt;') then
				line = prefix .. '&lt;span class="nowrap"&gt;' .. content .. '&lt;/span&gt;'
			end
			table.insert(lines, line)
		end
		item = table.concat(lines, '\n')
	end
	if item:match('^[*:;#]') then
		return '\n' .. item ..'\n'
	end
	return item
end

local function renderNavBar(titleCell)

	if args.navbar ~= 'off' and args.navbar ~= 'plain' and not (not args.name and mw.getCurrentFrame():getParent():getTitle():gsub('/sandbox$', '') == 'Template:Navbox') then
		titleCell:wikitext(navbar{
			args.name,
			mini = 1,
			fontstyle = (args.basestyle or '') .. ';' .. (args.titlestyle or '') .. ';background:none transparent;border:none;-moz-box-shadow:none;-webkit-box-shadow:none;box-shadow:none; padding:0;'
		})
	end

end

--
--   Title row
--
local function renderTitleRow(tbl)
	if not args.title then return end

	local titleRow = tbl:tag('tr')

	if args.titlegroup then
		titleRow
			:tag('th')
				:attr('scope', 'row')
				:addClass('navbox-group')
				:addClass(args.titlegroupclass)
				:cssText(args.basestyle)
				:cssText(args.groupstyle)
				:cssText(args.titlegroupstyle)
				:wikitext(args.titlegroup)
	end

	local titleCell = titleRow:tag('th'):attr('scope', 'col')

	if args.titlegroup then
		titleCell
			:css('border-left', '2px solid #fdfdfd')
			:css('width', '100%')
	end

	local titleColspan = 2
	if args.imageleft then titleColspan = titleColspan + 1 end
	if args.image then titleColspan = titleColspan + 1 end
	if args.titlegroup then titleColspan = titleColspan - 1 end

	titleCell
		:cssText(args.basestyle)
		:cssText(args.titlestyle)
		:addClass('navbox-title')
		:attr('colspan', titleColspan)

	renderNavBar(titleCell)

	titleCell
		:tag('div')
			-- id for aria-labelledby attribute
			:attr('id', mw.uri.anchorEncode(args.title))
			:addClass(args.titleclass)
			:css('font-size', '114%')
			:css('margin', '0 4em')
			:wikitext(processItem(args.title))
end

--
--   Above/Below rows
--

local function getAboveBelowColspan()
	local ret = 2
	if args.imageleft then ret = ret + 1 end
	if args.image then ret = ret + 1 end
	return ret
end

local function renderAboveRow(tbl)
	if not args.above then return end

	tbl:tag('tr')
		:tag('td')
			:addClass('navbox-abovebelow')
			:addClass(args.aboveclass)
			:cssText(args.basestyle)
			:cssText(args.abovestyle)
			:attr('colspan', getAboveBelowColspan())
			:tag('div')
				-- id for aria-labelledby attribute, if no title
				:attr('id', args.title and nil or mw.uri.anchorEncode(args.above))
				:wikitext(processItem(args.above, args.nowrapitems))
end

local function renderBelowRow(tbl)
	if not args.below then return end

	tbl:tag('tr')
		:tag('td')
			:addClass('navbox-abovebelow')
			:addClass(args.belowclass)
			:cssText(args.basestyle)
			:cssText(args.belowstyle)
			:attr('colspan', getAboveBelowColspan())
			:tag('div')
				:wikitext(processItem(args.below, args.nowrapitems))
end

--
--   List rows
--
local function renderListRow(tbl, index, listnum)
	local row = tbl:tag('tr')

	if index == 1 and args.imageleft then
		row
			:tag('td')
				:addClass('navbox-image')
				:addClass(args.imageclass)
				:css('width', '1px')               -- Minimize width
				:css('padding', '0px 2px 0px 0px')
				:cssText(args.imageleftstyle)
				:attr('rowspan', #listnums)
				:tag('div')
					:wikitext(processItem(args.imageleft))
	end

	if args['group' .. listnum] then
		local groupCell = row:tag('th')

		-- id for aria-labelledby attribute, if lone group with no title or above
		if listnum == 1 and not (args.title or args.above or args.group2) then
			groupCell
				:attr('id', mw.uri.anchorEncode(args.group1))
		end

		groupCell
			:attr('scope', 'row')
			:addClass('navbox-group')
			:addClass(args.groupclass)
			:cssText(args.basestyle)
			:css('width', args.groupwidth or '1%') -- If groupwidth not specified, minimize width

		groupCell
			:cssText(args.groupstyle)
			:cssText(args['group' .. listnum .. 'style'])
			:wikitext(args['group' .. listnum])
	end

	local listCell = row:tag('td')

	if args['group' .. listnum] then
		listCell
			:css('text-align', 'left')
			:css('border-left-width', '2px')
			:css('border-left-style', 'solid')
	else
		listCell:attr('colspan', 2)
	end

	if not args.groupwidth then
		listCell:css('width', '100%')
	end

	local rowstyle  -- usually nil so cssText(rowstyle) usually adds nothing
	if index % 2 == 1 then
		rowstyle = args.oddstyle
	else
		rowstyle = args.evenstyle
	end

	local listText = args['list' .. listnum]
	local oddEven = ODD_EVEN_MARKER
	if listText:sub(1, 12) == '&lt;/div&gt;&lt;table' then
		-- Assume list text is for a subgroup navbox so no automatic striping for this row.
		oddEven = listText:find('&lt;th[^&gt;]*"navbox%-title"') and RESTART_MARKER or 'odd'
	end
	listCell
		:css('padding', '0px')
		:cssText(args.liststyle)
		:cssText(rowstyle)
		:cssText(args['list' .. listnum .. 'style'])
		:addClass('navbox-list')
		:addClass('navbox-' .. oddEven)
		:addClass(args.listclass)
		:addClass(args['list' .. listnum .. 'class'])
		:tag('div')
			:css('padding', (index == 1 and args.list1padding) or args.listpadding or '0em 0.25em')
			:wikitext(processItem(listText, args.nowrapitems))

	if index == 1 and args.image then
		row
			:tag('td')
				:addClass('navbox-image')
				:addClass(args.imageclass)
				:css('width', '1px')               -- Minimize width
				:css('padding', '0px 0px 0px 2px')
				:cssText(args.imagestyle)
				:attr('rowspan', #listnums)
				:tag('div')
					:wikitext(processItem(args.image))
	end
end


--
--   Tracking categories
--

local function needsHorizontalLists()
	if border == 'subgroup' or args.tracking == 'no' then
		return false
	end
	local listClasses = {
		['plainlist'] = true, ['hlist'] = true, ['hlist hnum'] = true,
		['hlist hwrap'] = true, ['hlist vcard'] = true, ['vcard hlist'] = true,
		['hlist vevent'] = true,
	}
	return not (listClasses[args.listclass] or listClasses[args.bodyclass])
end

local function hasBackgroundColors()
	for _, key in ipairs({'titlestyle', 'groupstyle', 'basestyle', 'abovestyle', 'belowstyle'}) do
		if tostring(args[key]):find('background', 1, true) then
			return true
		end
	end
end

local function hasBorders()
	for _, key in ipairs({'groupstyle', 'basestyle', 'abovestyle', 'belowstyle'}) do
		if tostring(args[key]):find('border', 1, true) then
			return true
		end
	end
end

local function isIllegible()
	local styleratio = require('Module:Color contrast')._styleratio

	for key, style in pairs(args) do
		if tostring(key):match("style$") then
			if styleratio{mw.text.unstripNoWiki(style)} &lt; 4.5 then
				return true
			end
		end
	end
	return false
end

local function getTrackingCategories()
	local cats = {}
	if needsHorizontalLists() then table.insert(cats, 'Navigational boxes without horizontal lists') end
	if hasBackgroundColors() then table.insert(cats, 'Navboxes using background colours') end
	if isIllegible() then table.insert(cats, 'Potentially illegible navboxes') end
	if hasBorders() then table.insert(cats, 'Navboxes using borders') end
	return cats
end

local function renderTrackingCategories(builder)
	local title = mw.title.getCurrentTitle()
	if title.namespace ~= 10 then return end -- not in template space
	local subpage = title.subpageText
	if subpage == 'doc' or subpage == 'sandbox' or subpage == 'testcases' then return end

	for _, cat in ipairs(getTrackingCategories()) do
		builder:wikitext('[[Category:' .. cat .. ']]')
	end
end

--
--   Main navbox tables
--
local function renderMainTable()
	local tbl = mw.html.create('table')
		:addClass('nowraplinks')
		:addClass(args.bodyclass)

	if args.title and (args.state ~= 'plain' and args.state ~= 'off') then
		if args.state == 'collapsed' then args.state = 'mw-collapsed' end
		tbl
			:addClass('mw-collapsible')
			:addClass(args.state or 'autocollapse')
	end

	tbl:css('border-spacing', 0)
	if border == 'subgroup' or border == 'none' then
		tbl
			:addClass('navbox-subgroup')
			:cssText(args.bodystyle)
			:cssText(args.style)
	else  -- regular navbox - bodystyle and style will be applied to the wrapper table
		tbl
			:addClass('navbox-inner')
			:css('background', 'transparent')
			:css('color', 'inherit')
	end
	tbl:cssText(args.innerstyle)

	renderTitleRow(tbl)
	renderAboveRow(tbl)
	for i, listnum in ipairs(listnums) do
		renderListRow(tbl, i, listnum)
	end
	renderBelowRow(tbl)

	return tbl
end

function p._navbox(navboxArgs)
	args = navboxArgs
	listnums = {}

	for k, _ in pairs(args) do
		if type(k) == 'string' then
			local listnum = k:match('^list(%d+)$')
			if listnum then table.insert(listnums, tonumber(listnum)) end
		end
	end
	table.sort(listnums)

	border = mw.text.trim(args.border or args[1] or '')
	if border == 'child' then
		border = 'subgroup'
	end

	-- render the main body of the navbox
	local tbl = renderMainTable()

	-- render the appropriate wrapper around the navbox, depending on the border param
	local res = mw.html.create()
	if border == 'none' then
		local nav = res:tag('div')
			:attr('role', 'navigation')
			:node(tbl)
		-- aria-labelledby title, otherwise above, otherwise lone group
		if args.title or args.above or (args.group1 and not args.group2) then
			nav:attr('aria-labelledby', mw.uri.anchorEncode(args.title or args.above or args.group1))
		else
			nav:attr('aria-label', 'Navbox')
		end
	elseif border == 'subgroup' then
		-- We assume that this navbox is being rendered in a list cell of a parent navbox, and is
		-- therefore inside a div with padding:0em 0.25em. We start with a &lt;/div&gt; to avoid the
		-- padding being applied, and at the end add a &lt;div&gt; to balance out the parent's &lt;/div&gt;
		res
			:wikitext('&lt;/div&gt;')
			:node(tbl)
			:wikitext('&lt;div&gt;')
	else
		local nav = res:tag('div')
			:attr('role', 'navigation')
			:addClass('navbox')
			:addClass(args.navboxclass)
			:cssText(args.bodystyle)
			:cssText(args.style)
			:css('padding', '3px')
			:node(tbl)
		-- aria-labelledby title, otherwise above, otherwise lone group
		if args.title or args.above or (args.group1 and not args.group2) then
			nav:attr('aria-labelledby', mw.uri.anchorEncode(args.title or args.above or args.group1))
		else
			nav:attr('aria-label', 'Navbox')
		end
	end

	if (args.nocat or 'false'):lower() == 'false' then
		renderTrackingCategories(res)
	end
	return striped(tostring(res))
end

function p.navbox(frame)
	if not getArgs then
		getArgs = require('Module:Arguments').getArgs
	end
	args = getArgs(frame, {wrappers = {'Template:Navbox', 'Template:Navbox subgroup'}})
	if frame.args.border then
		-- This allows Template:Navbox_subgroup to use {{#invoke:Navbox|navbox|border=...}}.
		args.border = frame.args.border
	end

	-- Read the arguments in the order they'll be output in, to make references number in the right order.
	local _
	_ = args.title
	_ = args.above
	for i = 1, 20 do
		_ = args["group" .. tostring(i)]
		_ = args["list" .. tostring(i)]
	end
	_ = args.below

	return p._navbox(args)
end

return p</text>
      <sha1>msqtiqdgm245sn6a5v8eu1ia0vtr1o1</sha1>
    </revision>
  </page>
  <page>
    <title>Module:No globals</title>
    <ns>828</ns>
    <id>42567026</id>
    <revision>
      <id>887508066</id>
      <parentid>606781024</parentid>
      <timestamp>2019-03-13T02:29:31Z</timestamp>
      <contributor>
        <username>Xaosflux</username>
        <id>502540</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:No globals]]": Used in interface [[MediaWiki:Protectedpagetext]] ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="307">local mt = getmetatable(_G) or {}
function mt.__index (t, k)
	if k ~= 'arg' then
		error('Tried to read nil global ' .. tostring(k), 2)
	end
	return nil
end
function mt.__newindex(t, k, v)
	if k ~= 'arg' then
		error('Tried to write global ' .. tostring(k), 2)
	end
	rawset(t, k, v)
end
setmetatable(_G, mt)</text>
      <sha1>gggsv54pq7f94l3up48hr91qtxnskdm</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Ns has subpages</title>
    <ns>828</ns>
    <id>44657407</id>
    <revision>
      <id>637438142</id>
      <parentid>637436476</parentid>
      <timestamp>2014-12-10T06:37:29Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Ns has subpages: [[WP:High-risk templates|High-risk Lua module]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1678">-- This module implements [[Template:Ns has subpages]].
-- While the template is fairly simple, this information is made available to
-- Lua directly, so using a module means that we don't have to update the
-- template as new namespaces are added.

local p = {}

function p._main(ns, frame)
	-- Get the current namespace if we were not passed one.
	if not ns then
		ns = mw.title.getCurrentTitle().namespace
	end

	-- Look up the namespace table from mw.site.namespaces. This should work
	-- for a majority of cases.
	local nsTable = mw.site.namespaces[ns]

	-- Try using string matching to get the namespace from page names.
	-- Do a quick and dirty bad title check to try and make sure we do the same
	-- thing as {{NAMESPACE}} in most cases.
	if not nsTable and type(ns) == 'string' and not ns:find('[&lt;&gt;|%[%]{}]') then
		local nsStripped = ns:gsub('^[_%s]*:', '')
		nsStripped = nsStripped:gsub(':.*$', '')
		nsTable = mw.site.namespaces[nsStripped]
	end

	-- If we still have no match then try the {{NAMESPACE}} parser function,
	-- which should catch the remainder of cases. Don't use a mw.title object,
	-- as this would increment the expensive function count for each new page
	-- tested.
	if not nsTable then
		frame = frame or mw.getCurrentFrame()
		local nsProcessed = frame:callParserFunction('NAMESPACE', ns)
		nsTable = nsProcessed and mw.site.namespaces[nsProcessed]
	end
	
	return nsTable and nsTable.hasSubpages
end

function p.main(frame)
	local ns = frame:getParent().args[1]
	if ns then
		ns = ns:match('^%s*(.-)%s*$') -- trim whitespace
		ns = tonumber(ns) or ns
	end
	local hasSubpages = p._main(ns, frame)
	return hasSubpages and 'yes' or ''
end

return p</text>
      <sha1>qb0b1z2vff7kifnw21v205d791esbiz</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Portal</title>
    <ns>828</ns>
    <id>38965350</id>
    <revision>
      <id>916435633</id>
      <parentid>915584438</parentid>
      <timestamp>2019-09-18T22:20:37Z</timestamp>
      <contributor>
        <username>BrownHairedGirl</username>
        <id>754619</id>
      </contributor>
      <comment>add Book talk to list of banned namespaces</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="14187">--[==[ This module is a Lua implementation of the old {{Portal}} template. As of February 2019 it is used on nearly 7,900,000 articles.
-- Please take care when updating it! It outputs two functions: p.portal, which generates a list of portals, and p.image, which
-- produces the image name for an individual portal.

-- The portal image data is kept in submodules of [[Module:Portal/images]], listed below:
-- [[Module:Portal/images/a]]		- for portal names beginning with "A".
-- [[Module:Portal/images/b]]		- for portal names beginning with "B".
-- [[Module:Portal/images/c]]		- for portal names beginning with "C".
-- [[Module:Portal/images/d]]		- for portal names beginning with "D".
-- [[Module:Portal/images/e]]		- for portal names beginning with "E".
-- [[Module:Portal/images/f]]		- for portal names beginning with "F".
-- [[Module:Portal/images/g]]		- for portal names beginning with "G".
-- [[Module:Portal/images/h]]		- for portal names beginning with "H".
-- [[Module:Portal/images/i]]		- for portal names beginning with "I".
-- [[Module:Portal/images/j]]		- for portal names beginning with "J".
-- [[Module:Portal/images/k]]		- for portal names beginning with "K".
-- [[Module:Portal/images/l]]		- for portal names beginning with "L".
-- [[Module:Portal/images/m]]		- for portal names beginning with "M".
-- [[Module:Portal/images/n]]		- for portal names beginning with "N".
-- [[Module:Portal/images/o]]		- for portal names beginning with "O".
-- [[Module:Portal/images/p]]		- for portal names beginning with "P".
-- [[Module:Portal/images/q]]		- for portal names beginning with "Q".
-- [[Module:Portal/images/r]]		- for portal names beginning with "R".
-- [[Module:Portal/images/s]]		- for portal names beginning with "S".
-- [[Module:Portal/images/t]]		- for portal names beginning with "T".
-- [[Module:Portal/images/u]]		- for portal names beginning with "U".
-- [[Module:Portal/images/v]]		- for portal names beginning with "V".
-- [[Module:Portal/images/w]]		- for portal names beginning with "W".
-- [[Module:Portal/images/x]]		- for portal names beginning with "X".
-- [[Module:Portal/images/y]]		- for portal names beginning with "Y".
-- [[Module:Portal/images/z]]		- for portal names beginning with "Z".
-- [[Module:Portal/images/other]]	- for portal names beginning with any other letters. This includes numbers,
-- 									  letters with diacritics, and letters in non-Latin alphabets.
-- [[Module:Portal/images/aliases]]	- for adding aliases for existing portal names. Use this page for variations
-- 									  in spelling and diacritics, etc., no matter what letter the portal begins with.
--
-- The images data pages are separated by the first letter to reduce server load when images are added, changed, or removed.
-- Previously all the images were on one data page at [[Module:Portal/images]], but this had the disadvantage that all
-- 5,000,000 pages using this module needed to be refreshed every time an image was added or removed.
]==]

local p = {}

local trackingEnabled = true

-- Check whether to do tracking in this namespace
-- Returns true unless the page is one of the banned namespaces
local function checkTrackingNamespace()
	local thisPage = mw.title.getCurrentTitle()
	if (thisPage.namespace == 1) -- Talk
		or (thisPage.namespace == 2) -- User
		or (thisPage.namespace == 3) -- User talk
		or (thisPage.namespace == 5) -- Wikipedia talk
		or (thisPage.namespace == 7) -- File talk
		or (thisPage.namespace == 11) -- Template talk
		or (thisPage.namespace == 15) -- Category talk
		or (thisPage.namespace == 101) -- Portal talk
		or (thisPage.namespace == 109) -- Book talk
		or (thisPage.namespace == 118) -- Draft
		or (thisPage.namespace == 119) -- Draft talk
		or (thisPage.namespace == 829) -- Module talk
		then
		return false
	end
	return true
end

-- Check whether to do tracking on this pagename
-- Returns false if the page title matches one of the banned strings
-- Otherwise returns true
local function checkTrackingPagename()
	local thisPage = mw.title.getCurrentTitle()
	local thisPageLC = mw.ustring.lower(thisPage.text)
	if (string.match(thisPageLC, "/archive") ~= nil) then
		return false
	end
	if (string.match(thisPageLC, "/doc") ~= nil) then
		return false
	end
	if (string.match(thisPageLC, "/test") ~= nil) then
		return false
	end
	return true
end


local function matchImagePage(s)
	-- Finds the appropriate image subpage given a lower-case
	-- portal name plus the first letter of that portal name.
	if type(s) ~= 'string' or #s &lt; 1 then return end
	local firstLetter = mw.ustring.sub(s, 1, 1)
	local imagePage
	if mw.ustring.find(firstLetter, '^[a-z]') then
		imagePage = 'Module:Portal/images/' .. firstLetter
	else
		imagePage = 'Module:Portal/images/other'
	end
	return mw.loadData(imagePage)[s]
end

local function getAlias(s)
	-- Gets an alias from the image alias data page.
	local aliasData = mw.loadData('Module:Portal/images/aliases')
	for portal, aliases in pairs(aliasData) do
		for _, alias in ipairs(aliases) do
			if alias == s then
				return portal
			end
		end
	end
end

local function getImageName(s)
	-- Gets the image name for a given string.
	local default = 'Portal-puzzle.svg|link=|alt='
	if type(s) ~= 'string' or #s &lt; 1 then
		return default
	end
	s = mw.ustring.lower(s)
	return matchImagePage(s) or matchImagePage(getAlias(s)) or default
end

local function checkPortalExists(portal)
	return not (mw.title.makeTitle(100, portal).id == 0)
end

function p._portal(portals, args)
	-- This function builds the portal box used by the {{portal}} template.
	local root = mw.html.create('div')
		:attr('role', 'navigation')
		:attr('aria-label', 'Portals')
		:addClass('noprint portal plainlist')
		:addClass(args.left and 'tleft' or 'tright')
		:css('margin', args.margin or (args.left == 'yes' and '0.5em 1em 0.5em 0') or '0.5em 0 0.5em 1em')
		:css('border', 'solid #aaa 1px')
		:newline()

	-- Tracking is on by default.
	-- It is disabled if any of the following is true
	-- 1/ the parameter "tracking" is set to 'no, 'n', or 'false'
	-- 2/ the current page fails the namespace tests in checkTrackingNamespace()
	-- 3/ the current page fails the pagename tests in checkTrackingPagename()
	if (args.tracking == 'no') or (args.tracking == 'n') or (args.tracking == 'false') then
		trackingEnabled = false
	end
	if (checkTrackingNamespace() == false) then
		trackingEnabled = false
	end
	if (checkTrackingPagename() == false) then
		trackingEnabled = false
	end

	-- If no portals have been specified, display an error and add the page to a tracking category.
	if not portals[1] then
		if (args.nominimum == 'yes') or (args.nominimum == 'y') or (args.nominimum == 'true') then
		-- if nominimum as been set to yes (or similar), omit the warning
			
		else
			root:wikitext('&lt;strong class="error"&gt;No portals specified: please specify at least one portal&lt;/strong&gt;')
		end
		if (trackingEnabled) then
			root:wikitext('[[Category:Portal templates without a parameter]]')
		end
		return tostring(root)
	end
	
	-- scan for nonexistent portals, if they exist remove them from the portals table. If redlinks=yes, then don't remove
	local portallen = #portals
	-- traverse the list backwards to ensure that no portals are missed (table.remove also moves down the portals in the list, so that the next portal isn't checked if going fowards.
	-- going backwards allows us to circumvent this issue
	for i=portallen,1,-1 do
		-- the use of pcall here catches any errors that may occour when attempting to locate pages when the page name is invalid
		-- if pcall returns true, then rerun the function to find if the page exists
		if not pcall(checkPortalExists, portals[i]) or not checkPortalExists(portals[i]) then
			-- Getting here means a redlinked portal has been found
			if (args.redlinks == 'yes') or (args.redlinks == 'y') or (args.redlinks == 'true') or (args.redlinks == 'include') then
				-- if redlinks as been set to yes (or similar), add the cleanup category and then break the loop before the portal is removed from the list
				if (trackingEnabled) then
					root:wikitext('[[Category:Portal templates with redlinked portals]]')
				end
				break
			end
			-- remove the portal (this does not happen if redlinks=yes)
			table.remove(portals,i)
		end
	end
	
	-- if the length of the table is different, then rows were removed from the table, so portals were removed. If this is the case add the cleanup category
	if not (portallen == #portals) then
		if (trackingEnabled) then
			if #portals == 0 then
				return '[[Category:Portal templates with all redlinked portals]]'
			else
				root:wikitext('[[Category:Portal templates with redlinked portals]]')
			end
		end
	end

	-- Start the list. This corresponds to the start of the wikitext table in the old [[Template:Portal]].
	local listroot = root:tag('ul')
		:css('display', 'table')
		:css('box-sizing', 'border-box')
		:css('padding', '0.1em')
		:css('max-width', '175px')
		:css('width', type(args.boxsize) == 'string' and (args.boxsize .. 'px') or nil)
		:css('background', '#f9f9f9')
		:css('font-size', '85%')
		:css('line-height', '110%')
		:css('font-style', 'italic')
		:css('font-weight', 'bold')

	-- Display the portals specified in the positional arguments.
	for _, portal in ipairs(portals) do
		local image = getImageName(portal)

		-- Generate the html for the image and the portal name.
		listroot
			:newline()
			:tag('li')
				:css('display', 'table-row')
				:tag('span')
					:css('display', 'table-cell')
					:css('padding', '0.2em')
					:css('vertical-align', 'middle')
					:css('text-align', 'center')
					:wikitext(string.format('[[File:%s|32x28px|class=noviewer]]', image))
					:done()
				:tag('span')
					:css('display', 'table-cell')
					:css('padding', '0.2em 0.2em 0.2em 0.3em')
					:css('vertical-align', 'middle')
					:wikitext(string.format('[[Portal:%s|%s%sportal]]', portal, portal, args['break'] and '&lt;br /&gt;' or ' '))
	end
	return tostring(root)
end

function p._image(portals)
	-- Wrapper function to allow getImageName() to be accessed through #invoke.
	local name = getImageName(portals[1])
	return name:match('^(.-)|') or name -- FIXME: use a more elegant way to separate borders etc. from the image name
end

local function getAllImageTables()
	-- Returns an array containing all image subpages (minus aliases) as loaded by mw.loadData.
	local images = {}
	for i, subpage in ipairs{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'other'} do
		images[i] = mw.loadData('Module:Portal/images/' .. subpage)
	end
	return images
end

function p._displayAll(portals, args)
	-- This function displays all portals that have portal images. This function is for maintenance purposes and should not be used in
	-- articles, for two reasons: 1) there are over 1500 portals with portal images, and 2) the module doesn't record how the portal
	-- names are capitalized, so the portal links may be broken.
	local lang = mw.language.getContentLanguage()
	local count = 1
	for _, imageTable in ipairs(getAllImageTables()) do
		for portal in pairs(imageTable) do
			portals[count] = lang:ucfirst(portal)
			count = count + 1
		end
	end
	return p._portal(portals, args)
end

function p._imageDupes()
	-- This function searches the image subpages to find duplicate images. If duplicate images exist, it is not necessarily a bad thing,
	-- as different portals might just happen to choose the same image. However, this function is helpful in identifying images that
	-- should be moved to a portal alias for ease of maintenance.
	local exists, dupes = {}, {}
	for _, imageTable in ipairs(getAllImageTables()) do
		for portal, image in pairs(imageTable) do
			if not exists[image] then
				exists[image] = portal
			else
				table.insert(dupes, string.format('The image "[[:File:%s|%s]]" is used for both portals "%s" and "%s".', image, image, exists[image], portal))
			end
		end
	end
	if #dupes &lt; 1 then
		return 'No duplicate images found.'
	else
		return 'The following duplicate images were found:\n* ' .. table.concat(dupes, '\n* ')
	end
end

local function processPortalArgs(args)
	-- This function processes a table of arguments and returns two tables: an array of portal names for processing by ipairs, and a table of
	-- the named arguments that specify style options, etc. We need to use ipairs because we want to list all the portals in the order
	-- they were passed to the template, but we also want to be able to deal with positional arguments passed explicitly, for example
	-- {{portal|2=Politics}}. The behaviour of ipairs is undefined if nil values are present, so we need to make sure they are all removed.
	args = type(args) == 'table' and args or {}
	local portals = {}
	local namedArgs = {}
	for k, v in pairs(args) do
		if type(k) == 'number' and type(v) == 'string' then -- Make sure we have no non-string portal names.
			table.insert(portals, k)
		elseif type(k) ~= 'number' then
			namedArgs[k] = v
		end
	end
	table.sort(portals)
	for i, v in ipairs(portals) do
		portals[i] = args[v]
	end
	return portals, namedArgs
end

local function makeWrapper(funcName)
	-- Processes external arguments and sends them to the other functions.
	return function (frame)
		-- If called via #invoke, use the args passed into the invoking
		-- template, or the args passed to #invoke if any exist. Otherwise
		-- assume args are being passed directly in from the debug console
		-- or from another Lua module.
		local origArgs
		if type(frame.getParent) == 'function' then
			origArgs = frame:getParent().args
			for k, v in pairs(frame.args) do
				origArgs = frame.args
				break
			end
		else
			origArgs = frame
		end
		-- Trim whitespace and remove blank arguments.
		local args = {}
		for k, v in pairs(origArgs) do
			if type(v) == 'string' then
				v = mw.text.trim(v)
			end
			if v ~= '' then
				args[k] = v
			end
		end
		return p[funcName](processPortalArgs(args)) -- passes two tables to func: an array of portal names, and a table of named arguments.
	end
end

for _, funcName in ipairs{'portal', 'image', 'imageDupes', 'displayAll'} do
	p[funcName] = makeWrapper('_' .. funcName)
end

return p</text>
      <sha1>b66wev3t0pw2o3vyhfiug9puohcw2fu</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Portal/images/c</title>
    <ns>828</ns>
    <id>40416122</id>
    <revision>
      <id>920131324</id>
      <parentid>919840718</parentid>
      <timestamp>2019-10-07T21:01:08Z</timestamp>
      <contributor>
        <username>Ergo Sum</username>
        <id>24884903</id>
      </contributor>
      <comment>removal of portal redirect is causing many pages to display portal puzzle icon</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="15672">--[==[ This is the "C" list of portal image names. It contains a list of portal images for use with [[Module:Portal]]
-- for portal names that start with the letter "C". For aliases to existing portal names, and for portal names that
-- start with other letters, please use the appropriate page from the following list:
 
-- [[Module:Portal/images/a]]       - for portal names beginning with "A".
-- [[Module:Portal/images/b]]       - for portal names beginning with "B".
-- [[Module:Portal/images/d]]       - for portal names beginning with "D".
-- [[Module:Portal/images/e]]       - for portal names beginning with "E".
-- [[Module:Portal/images/f]]       - for portal names beginning with "F".
-- [[Module:Portal/images/g]]       - for portal names beginning with "G".
-- [[Module:Portal/images/h]]       - for portal names beginning with "H".
-- [[Module:Portal/images/i]]       - for portal names beginning with "I".
-- [[Module:Portal/images/j]]       - for portal names beginning with "J".
-- [[Module:Portal/images/k]]       - for portal names beginning with "K".
-- [[Module:Portal/images/l]]       - for portal names beginning with "L".
-- [[Module:Portal/images/m]]       - for portal names beginning with "M".
-- [[Module:Portal/images/n]]       - for portal names beginning with "N".
-- [[Module:Portal/images/o]]       - for portal names beginning with "O".
-- [[Module:Portal/images/p]]       - for portal names beginning with "P".
-- [[Module:Portal/images/q]]       - for portal names beginning with "Q".
-- [[Module:Portal/images/r]]       - for portal names beginning with "R".
-- [[Module:Portal/images/s]]       - for portal names beginning with "S".
-- [[Module:Portal/images/t]]       - for portal names beginning with "T".
-- [[Module:Portal/images/u]]       - for portal names beginning with "U".
-- [[Module:Portal/images/v]]       - for portal names beginning with "V".
-- [[Module:Portal/images/w]]       - for portal names beginning with "W".
-- [[Module:Portal/images/x]]       - for portal names beginning with "X".
-- [[Module:Portal/images/y]]       - for portal names beginning with "Y".
-- [[Module:Portal/images/z]]       - for portal names beginning with "Z".
-- [[Module:Portal/images/other]]   - for portal names beginning with any other letters. This includes numbers,
--                                    letters with diacritics, and letters in non-Latin alphabets.
-- [[Module:Portal/images/aliases]] - for adding aliases for existing portal names. Use this page for variations
--                                    in spelling and diacritics, etc., no matter what letter the portal begins with.
 
-- When adding entries, please use alphabetical order. The format of the images table entries is as follows:
--          ["portal name"] = "image.svg",
-- The portal name should be the name of your portal, in lower case. For example, the portal name for 
-- "Portal:United Kingdom" would be "united kingdom". The image name should be capitalised normally, and the "File:"
-- namespace prefix should be
-- omitted.
]==]

return {
	["cabo verde"] = "Flag of Cape Verde.svg|border|link=|alt=flag",
	["cake"] = "Emojione 1F370.svg|link=|alt=",
	["cakes"] = "Emojione 1F370.svg|link=|alt=",
	["cairo"] = "Flag of Cairo.svg|alt=icon",
	["cajun cuisine"] = "Crawfish dinner.jpg|link=|alt=",
	["calgary"] = "Flag of Calgary, Alberta.svg|border|link=|alt=flag",
	["california"] = "Flag of California.svg|border|link=|alt=flag",
	["california central valley"] = "California Central Valley county map.svg|link=|alt=map",
	["california delta"] = "California SD-03 (2011).svg|link=|alt=map",
	["california roads"] = "California 1.svg|link=|alt=sign",
	["california state highways"] = "California 1.svg|link=|alt=sign",
	["california state polytechnic university, pomona"] = "Cal Poly logo.svg|link=|alt=logo",
	["california state university"] = "Flag of California.svg|border|link=|alt=flag",
	["calvinism"] = "Kreuz-hugenotten.svg|alt=icon",
	["cambodia"] = "Flag of Cambodia.svg|border|link=|alt=flag",
	["cameroon"] = "Flag of Cameroon.svg|border|link=|alt=flag",
	["campeche"] = "Flag of Campeche.svg|border|link=|alt=flag",
	["canada"] = "Flag of Canada.svg|border|link=|alt=flag",
	["canada/kawartha lakes"] = "Kawartha Lakes flag.svg|border|link=|alt=flag",
	["canadian armed forces"] = "Canadian Forces emblem.svg|alt=icon",
	["canadian communities"] = "Map Canada political-geo.png|link=|alt=",
	["canadian cuisine"] = "Maple syrup.jpg|link=|alt=",
	["canadian football"] = "Canadian football.png|alt=icon",
	["canadian law"] = "Supreme Court of Canada.jpg|link=|alt=",
	["canadian politics"] = "Can-vote-stub.svg|alt=icon",
	["canadian territories"] = "Northern Canada.svg|alt=icon",
	["canary islands"] = "Flag of the Canary Islands.svg|border|link=|alt=flag",
	["candy"] = "Twemoji 1f36d.svg|link=|alt=",
	["cannabis"] = "Cannabis leaf.svg|alt=icon",
	["cape cod and the islands"] = "Nobska Lighthouse 1.jpg|alt=icon",
	["cape verde"] = "Flag of Cape Verde.svg|border|link=|alt=flag",
	["capsicum"] = "Large Cayenne.jpg|link=|alt=",
	["capital district"] = "Empire State Plaza symbol 2.svg|link=|alt=",
	["capitalism"] = "Capitalismlogo.svg|alt=icon",
	["caracas"] = "Flag of Caracas.svg|alt=icon",
	["cardiff"] = "Flag of Cardiff.svg|alt=icon",
	["caribbean"] = "Relief Map of Caribbean.png|link=|alt=map",
	["caribbean community"] = "Flag of CARICOM.svg|border|link=|alt=flag",
	["carnivorous plants"] = "Digested fly.JPG|link=|alt=photo",
	["cars"] = "Sportcar sergio luiz ara 01.svg|link=|alt=",
	["cartoon network"] = "Cartoon Network.svg|border|link=|alt=",
	["cartoon"] = "Mad scientist.svg|alt=icon",
	["catalan-speaking countries"] = "Siñal d'Aragón.svg|border|alt=icon",
	["catholic church"] = "046CupolaSPietro.jpg|border|alt=icon",
	["catholicism"] = "046CupolaSPietro.jpg|border|alt=icon",
	["cats"] = "Cat03.jpg|alt=icon",
	["cayman islands"] = "Flag of the Cayman Islands.svg|border|link=|alt=flag",
	["celine dion"] = "Celine Dion Concert Singing 'Taking Chances' 2008.jpg|alt=icon",
	["celtic studies"] = "Celtic-knot-insquare-39crossings.svg|link=|alt=",
	["central african republic"] = "Flag of the Central African Republic.svg|border|link=|alt=flag",
	["central america"] = "Age of Consent - Central America.svg|alt=icon",
	["central asia"] = "Central Asian Games participating countries.PNG|alt=icon",
	["cerritos, california"] = "Cerritos City Seal (color).png|link=|alt=seal",
	["cetaceans"] = "Sperm whale fluke.jpg|link=|alt=",
	["chad"] = "Flag of Chad.svg|border|link=|alt=flag",
	["chandigarh"] = "Gandhi Bhawan at Punjab University.jpg|alt=icon",
	["channel islands"] = "Flag of Sark.svg|border|link=|alt=flag",
	["charles dickens"] = "Charles Dickens 3.jpg|link=|alt=",
	["charleston, west virginia"] = "CharlestonWVseal.gif|link=|alt=seal",
	["charlotte"] = "Dilworth, Charlotte, NC, USA - panoramio.jpg|link=|alt=photo",
	["charlottetown"] = "Flag of Charlottetown.svg|link=|alt=flag",
	["chattanooga"] = "Flag of Chattanooga.svg|link=|alt=flag",
	["chechnya"] = "Flag of the Chechen Republic.svg|border|link=|alt=flag",
	["cheese"] = "Noto Emoji Oreo 1f9c0.svg|link=|alt=",
	["cheese dishes"] = "NCI cream cheese bagel.jpg|link=|alt=",
	["cheesehead"] = "Cheesehead.png|alt=icon",
	["cheltenham township, montgomery county, pennsylvania"] = "Cheltenham PA township seal.svg|alt=seal|link=",
	["chemistry"] = "Papapishu-Lab-icon-6.svg|link=|alt=",
	["chennai"] = "Chennai High Court 1200x800.jpg|alt=icon",
	["cher"] = "Cher Assinatura.png|link=|alt=",
	["cherries"] = "Cherry Stella444.jpg|link=|alt=",
	["cheshire"] = "Cheshire Flag.svg|border|alt=icon",
	["chess"] = "Nuvola apps package games strategy.png|alt=icon",
	["chhattisgarh"] = "India Chhattisgarh locator map.svg|border|link=|alt=map",
	["chiapas"] = "Flag of Chiapas.svg|border|link=|alt=flag",
	["chicago"] = "Seal of Chicago, Illinois.svg|link=|alt=",
	["chicken"] = "Chicken icon 05.svg|link=|alt=",
	["chihuahua"] = "Flag of Chihuahua.svg|border|link=|alt=flag",
	["children's literature"] = "Tom Sawyer 1876 frontispiece.jpg|link=|alt=",
	["chile"] = "Flag of Chile.svg|border|link=|alt=flag",
	["chilean cuisine"] = "Curanto Chilote - Flickr - Renzo Disi.jpg|link=|alt=",
	["chili pepper"] = "Chilli pepper 1.svg|link=|alt=",
	["chili peppers"] = "Chilli pepper 1.svg|link=|alt=",
	["china"] = "Flag of the People's Republic of China.svg|border|link=|alt=flag",
	["chinese cuisine"] = "ChineseDishLogo.png|link=|alt=",
	["chinese folk religion"] = "禄_lù_or_子_zi_symbol---red.svg|link=|alt=icon",
	["chino, california"] = "Seal of Chino, California.png|link=|alt=seal",
	["chittagong"] = "Beach View of the Saint Martin's Island.jpg|alt=icon",
	["chocolate"] = "Chocolate02.jpg|link=|alt=",
	["christadelphian"] = "John Thomas.png|link=|alt=John Thomas",
	["christian democracy"] = "Orange flag waving.svg|alt=icon",
	["christian hardcore"] = "Guitar 1.svg|link=|alt=icon",
	["christian metal"] = "Guitar 1.svg|link=|alt=",
	["christian music"] = "Musical note nicu bucule 01.svg|link=|alt=",
	["christianity"] = "P christianity.svg|alt=icon",
	["christianity in china"] = "Blessing message.svg|link=|alt=",
	["christianity in india"] = "India with cross.svg|alt=icon",
	["christina aguilera"] = "Christina Aguilera (at premiere of \"To John With Love\", September 2010).jpg|alt=icon",
	["christmas"] = "Xmas tree.svg|link=|alt=",
	["christmas island"] = "Flag of Christmas Island.svg|link=|alt=flag",
	["chronology"] = "Crystal clock.svg|alt=",
	["civil rights movement"] = "Logo SNCC.svg|link=WP:ACRM|alt=",
	["cincinnati"] = "Cincinnati Dusk Light.JPG|link=|alt=",
	["city of bradford"] = "Coat of arms of Bradford City Council.png|alt=icon",
	["city of port of spain"] = "POS Academy for the Performing Arts 03 2012 0960.JPG|alt=icon",
	["city of san fernando"] = "HilltopSandoview.jpg|link=|alt=",
	["classical antiquity"] = "2006 01 21 Athènes Parthénon.JPG|alt=icon",
	["classical civilisation"] = "2006 01 21 Athènes Parthénon.JPG|alt=icon",
	["classical guitar"] = "Classical Guitar two views2.png|alt=icon",
	["classical music"] = "Audio a.svg|link=|alt=",
	["classical tamil"] = "Word_Tamil.svg|link=|alt=word",
	["cleveland"] = "Flag of Cleveland, Ohio.svg|border|link=|alt=flag",
	["climate"] = "The Earth seen from Apollo 17 with transparent background.png|link=|alt=icon",
	["climate change"] = "SurfaceTemperature.jpg|link=|alt=icon",
	["climbing"] = "Pictograms-nps-land-technical_rock_climbing.svg|link=|alt=icon",
	["clothing"] = "Emojione 1F458.svg|alt=icon",
	["coahuila"] = "Flag of Coahuila.svg|border|link=|alt=flag",
	["cocktails"] = "Emojione BW 1F378.svg|link=|alt=",
	["coconuts"] = "Brokencoconut.jpg|link=|alt=",
	["cocos (keeling) islands"] = "Flag of the Cocos (Keeling) Islands.svg|border|link=|alt=flag",
	["coffee"] = "Emblem-relax.svg|alt=icon",
	["cognitive science"] = "Crystal mind.jpg|link=|alt=icon",
	["cold war"] = "Cold War Map 1959.svg|alt=icon",
	["colima"] = "Flag of Colima.svg|border|link=|alt=flag",
	["college basketball"] = "Basketball.png|link=|alt=",
	["college football"] = "NCAAFootball transparent.png|alt=icon",
	["colombia"] = "Flag of Colombia.svg|border|link=|alt=flag",
	["colonialism"] = "PithHelmetTruman.jpg|link=|alt=",
	["color"] = "Colouring pencils.jpg|alt=icon",
	["colorado"] = "Flag of Colorado.svg|border|link=|alt=flag",
	["colorado school of mines"] = "CSM Seal.JPG|link=|alt=seal",
	["colorado state university"] = "Colorado State University logo.png|link=|alt=logo",
	["columbia university"] = "Columbia University Shield.svg|link=|alt=shield",
	["columbia, missouri"] = "Greetings from Columbia, Missouri (73489).jpg|link=|alt=postcard",
	["comedy"] = "SMirC-laugh.svg|alt=icon",
	["comics"] = "Speech balloon.svg|link=|alt=",
	["commonwealth games"] = "Commonwealth Games Federation seal.svg|alt=icon",
	["commonwealth realms"] = "Commonwealth Realms map2.png|alt=icon",
	["communism"] = "Symbol-hammer-and-sickle.svg|link=|alt=",
	["community"] = "P globe blue.png|alt=icon",
	["comoros"] = "Flag of the Comoros.svg|border|link=|alt=flag",
	["compact disc"] = "OD Compact disc.svg|link=|alt=CD",
	["companies"] = "Industry5.svg|link=|alt=",
	["complementary and alternative medicine"] = "Rod of Asclepius2.svg|alt=icon",
	["computer graphics"] = "5-cell.gif|link=|alt=",
	["computer networking"] = "Bus icon.svg|link=|alt=",
	["computer programming"] = "Octicons-terminal.svg|alt=icon",
	["computer science"] = "Internet map 1024.jpg|alt=icon",
	["computer security"] = "Monitor padlock.svg|alt=icon",
	["computer-generated imagery"] = "Gaussian.JPG|link=|alt=",
	["condiments"] = "Toicon-icon-avocado-spice.svg|link=|alt=",
	["confucianism"] = "木鐸 --- Confucian wooden-clapper bell.svg|link=|alt=icon",
	["connecticut"] = "Flag of Connecticut.svg|border|link=|alt=flag",
	["conservatism"] = "DodgerBlue flag waving.svg|link=|alt=",
	["constructed languages"] = "Design conlang.png|alt=icon",
	["contents"] = "Wikipedia's W.svg|link=|alt=",
	["contents/indexes"] = "Pointing-right.svg|link=|alt=icon",
	["contents/lists"] = "Liste.svg|link=|alt=icon",
	["contents/outlines"] = "Pointing-left.svg|link=|alt=icon",
	["continents"] = "Continents vide couleurs-automatedvector.svg|link=|alt=map",
	["cooking"] = "One chef's hat.png|link=|alt=",
	["cook islands"] = "Flag of the Cook Islands.svg|border|link=|alt=flag",
	["cooperatives"] = "Twinpines.svg|link=|alt=",
	["copenhagen"] = "Coat_of_arms_of_Copenhagen.svg|alt=icon",
	["córdoba"] = "Escudo ciudad de cordoba argentina.svg|link=|alt=",
	["cornell university"] = "Cornell University seal.svg|link=|alt=seal",
	["cornhusker"] = "Nebraska silhouette.png|alt=icon",
	["cornwall"] = "Flag of Cornwall.svg|border|link=|alt=flag",
	["cosmology"] = "Ilc 9yr moll4096.png|link=|alt=",
	["costa rica"] = "Flag of Costa Rica.svg|border|link=|alt=flag",
	["côte d'ivoire"] = "Flag of Côte d'Ivoire.svg|border|link=|alt=flag",
	["countries"] = "P countries-vector.svg|alt=icon",
	["country music"] = "Steel guitar-KayEss.1.jpeg|alt=icon",
	["courtney love"] = "Noloveever.PNG|alt=icon",
	["crabapples"] = "Malus sylvestris 005.JPG|link=|alt=",
	["creationism"] = "Michelangelo, Creation of Adam 04.jpg|link=|alt=",
	["cricket"] = "Cricketball.png|link=|alt=",
	["crimea"] = "Flag of Crimea.svg|border|link=|alt=flag",
	["criminal justice"] = "Scale of justice 2.svg|link=|alt=",
	["croatia"] = "Flag of Croatia.svg|border|link=|alt=flag",
	["crusades"] = "Arms of the Kingdom of Jerusalem.svg|alt=icon",
	["crustaceans"] = "Charybdis japonica.jpg|alt=icon",
	["cryptography"] = "Crypto key.svg|alt=icon",
	["cryptozoology"] = "Okapi2.jpg|alt=icon",
	["crystallography"] = "Pyriteespagne.jpg|link=|alt=image",
	["cuba"] = "Flag of Cuba.svg|border|link=|alt=flag",
	["cuisine"] = "Toicon-icon-stone-serve.svg|link=|alt=",
	["cuisines"] = "Toicon-icon-stone-serve.svg|link=|alt=",
	["cultural heritage of serbia"] = "Spomenik Kulture.svg|link=|alt=",
	["culture"] = "P culture.svg|alt=icon",
	["cumbria"] = "Herdwick sheep crop.jpg|alt=icon",
	["curaçao"] = "Flag of Curaçao.svg|border|link=|alt=flag",
	["cucurbita"] = "Pumpkin 252 - Evan Swigart.jpg|link=|alt=",
	["cue sports"] = "Eight Ball Rack 2005 SeanMcClean.jpg|link=|alt=",
	["current events"] = "Ambox globe.svg|link=|alt=",
	["current events/turkey"] = "Wikinews-logo.png|link=|alt=",
	["cycling"] = "Cycling (road) pictogram.svg|link=|alt=",
	["cyprus"] = "Flag of Cyprus.svg|border|link=|alt=flag",
	["czech republic"] = "Flag of the Czech Republic.svg|border|link=|alt=flag",
	["czechia"] = "Flag of the Czech Republic.svg|border|link=|alt=flag",
	["czechoslovakia"] = "Flag of the Czech Republic.svg|border|link=|alt=flag"
}</text>
      <sha1>odx1ko1ux0rswvr1qvxi3elmzpnuwuw</sha1>
    </revision>
  </page>
  <page>
    <title>Module:String</title>
    <ns>828</ns>
    <id>38569505</id>
    <revision>
      <id>924313232</id>
      <parentid>903742087</parentid>
      <timestamp>2019-11-03T02:30:49Z</timestamp>
      <contributor>
        <username>RexxS</username>
        <id>6112901</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:String]]": Cascade-protected from main page, so no point in enabling TE ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="16668">--[[

This module is intended to provide access to basic string functions.

Most of the functions provided here can be invoked with named parameters,
unnamed parameters, or a mixture.  If named parameters are used, Mediawiki will
automatically remove any leading or trailing whitespace from the parameter.
Depending on the intended use, it may be advantageous to either preserve or
remove such whitespace.

Global options
    ignore_errors: If set to 'true' or 1, any error condition will result in
        an empty string being returned rather than an error message.

    error_category: If an error occurs, specifies the name of a category to
        include with the error message.  The default category is
        [Category:Errors reported by Module String].

    no_category: If set to 'true' or 1, no category will be added if an error
        is generated.

Unit tests for this module are available at Module:String/tests.
]]

local str = {}

--[[
len

This function returns the length of the target string.

Usage:
{{#invoke:String|len|target_string|}}
OR
{{#invoke:String|len|s=target_string}}

Parameters
    s: The string whose length to report

If invoked using named parameters, Mediawiki will automatically remove any leading or
trailing whitespace from the target string.
]]
function str.len( frame )
	local new_args = str._getParameters( frame.args, {'s'} )
	local s = new_args['s'] or ''
	return mw.ustring.len( s )
end

--[[
sub

This function returns a substring of the target string at specified indices.

Usage:
{{#invoke:String|sub|target_string|start_index|end_index}}
OR
{{#invoke:String|sub|s=target_string|i=start_index|j=end_index}}

Parameters
    s: The string to return a subset of
    i: The fist index of the substring to return, defaults to 1.
    j: The last index of the string to return, defaults to the last character.

The first character of the string is assigned an index of 1.  If either i or j
is a negative value, it is interpreted the same as selecting a character by
counting from the end of the string.  Hence, a value of -1 is the same as
selecting the last character of the string.

If the requested indices are out of range for the given string, an error is
reported.
]]
function str.sub( frame )
	local new_args = str._getParameters( frame.args, { 's', 'i', 'j' } )
	local s = new_args['s'] or ''
	local i = tonumber( new_args['i'] ) or 1
	local j = tonumber( new_args['j'] ) or -1

	local len = mw.ustring.len( s )

	-- Convert negatives for range checking
	if i &lt; 0 then
		i = len + i + 1
	end
	if j &lt; 0 then
		j = len + j + 1
	end

	if i &gt; len or j &gt; len or i &lt; 1 or j &lt; 1 then
		return str._error( 'String subset index out of range' )
	end
	if j &lt; i then
		return str._error( 'String subset indices out of order' )
	end

	return mw.ustring.sub( s, i, j )
end

--[[
This function implements that features of {{str sub old}} and is kept in order
to maintain these older templates.
]]
function str.sublength( frame )
	local i = tonumber( frame.args.i ) or 0
	local len = tonumber( frame.args.len )
	return mw.ustring.sub( frame.args.s, i + 1, len and ( i + len ) )
end

--[[
match

This function returns a substring from the source string that matches a
specified pattern.

Usage:
{{#invoke:String|match|source_string|pattern_string|start_index|match_number|plain_flag|nomatch_output}}
OR
{{#invoke:String|match|s=source_string|pattern=pattern_string|start=start_index
    |match=match_number|plain=plain_flag|nomatch=nomatch_output}}

Parameters
    s: The string to search
    pattern: The pattern or string to find within the string
    start: The index within the source string to start the search.  The first
        character of the string has index 1.  Defaults to 1.
    match: In some cases it may be possible to make multiple matches on a single
        string.  This specifies which match to return, where the first match is
        match= 1.  If a negative number is specified then a match is returned
        counting from the last match.  Hence match = -1 is the same as requesting
        the last match.  Defaults to 1.
    plain: A flag indicating that the pattern should be understood as plain
        text.  Defaults to false.
    nomatch: If no match is found, output the "nomatch" value rather than an error.

If invoked using named parameters, Mediawiki will automatically remove any leading or
trailing whitespace from each string.  In some circumstances this is desirable, in
other cases one may want to preserve the whitespace.

If the match_number or start_index are out of range for the string being queried, then
this function generates an error.  An error is also generated if no match is found.
If one adds the parameter ignore_errors=true, then the error will be suppressed and
an empty string will be returned on any failure.

For information on constructing Lua patterns, a form of [regular expression], see:

* http://www.lua.org/manual/5.1/manual.html#5.4.1
* http://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Patterns
* http://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Ustring_patterns

]]
-- This sub-routine is exported for use in other modules
function str._match( s, pattern, start, match_index, plain_flag, nomatch )
	if s == '' then
		return str._error( 'Target string is empty' )
	end
	if pattern == '' then
		return str._error( 'Pattern string is empty' )
	end
	start = tonumber(start) or 1
	if math.abs(start) &lt; 1 or math.abs(start) &gt; mw.ustring.len( s ) then
		return str._error( 'Requested start is out of range' )
	end
	if match_index == 0 then
		return str._error( 'Match index is out of range' )
	end
	if plain_flag then
		pattern = str._escapePattern( pattern )
	end

	local result
	if match_index == 1 then
		-- Find first match is simple case
		result = mw.ustring.match( s, pattern, start )
	else
		if start &gt; 1 then
			s = mw.ustring.sub( s, start )
		end

		local iterator = mw.ustring.gmatch(s, pattern)
		if match_index &gt; 0 then
			-- Forward search
			for w in iterator do
				match_index = match_index - 1
				if match_index == 0 then
					result = w
					break
				end
			end
		else
			-- Reverse search
			local result_table = {}
			local count = 1
			for w in iterator do
				result_table[count] = w
				count = count + 1
			end

			result = result_table[ count + match_index ]
		end
	end

	if result == nil then
		if nomatch == nil then
			return str._error( 'Match not found' )
		else
			return nomatch
		end
	else
		return result
	end
end
-- This is the entry point for #invoke:String|match
function str.match( frame )
	local new_args = str._getParameters( frame.args, {'s', 'pattern', 'start', 'match', 'plain', 'nomatch'} )
	local s = new_args['s'] or ''
	local start = tonumber( new_args['start'] ) or 1
	local plain_flag = str._getBoolean( new_args['plain'] or false )
	local pattern = new_args['pattern'] or ''
	local match_index = math.floor( tonumber(new_args['match']) or 1 )
	local nomatch = new_args['nomatch']

	return str._match( s, pattern, start, match_index, plain_flag, nomatch )
end

--[[
pos

This function returns a single character from the target string at position pos.

Usage:
{{#invoke:String|pos|target_string|index_value}}
OR
{{#invoke:String|pos|target=target_string|pos=index_value}}

Parameters
    target: The string to search
    pos: The index for the character to return

If invoked using named parameters, Mediawiki will automatically remove any leading or
trailing whitespace from the target string.  In some circumstances this is desirable, in
other cases one may want to preserve the whitespace.

The first character has an index value of 1.

If one requests a negative value, this function will select a character by counting backwards
from the end of the string.  In other words pos = -1 is the same as asking for the last character.

A requested value of zero, or a value greater than the length of the string returns an error.
]]
function str.pos( frame )
	local new_args = str._getParameters( frame.args, {'target', 'pos'} )
	local target_str = new_args['target'] or ''
	local pos = tonumber( new_args['pos'] ) or 0

	if pos == 0 or math.abs(pos) &gt; mw.ustring.len( target_str ) then
		return str._error( 'String index out of range' )
	end

	return mw.ustring.sub( target_str, pos, pos )
end

--[[
str_find

This function duplicates the behavior of {{str_find}}, including all of its quirks.
This is provided in order to support existing templates, but is NOT RECOMMENDED for
new code and templates.  New code is recommended to use the "find" function instead.

Returns the first index in "source" that is a match to "target".  Indexing is 1-based,
and the function returns -1 if the "target" string is not present in "source".

Important Note: If the "target" string is empty / missing, this function returns a
value of "1", which is generally unexpected behavior, and must be accounted for
separatetly.
]]
function str.str_find( frame )
	local new_args = str._getParameters( frame.args, {'source', 'target'} )
	local source_str = new_args['source'] or ''
	local target_str = new_args['target'] or ''

	if target_str == '' then
		return 1
	end

	local start = mw.ustring.find( source_str, target_str, 1, true )
	if start == nil then
		start = -1
	end

	return start
end

--[[
find

This function allows one to search for a target string or pattern within another
string.

Usage:
{{#invoke:String|find|source_str|target_string|start_index|plain_flag}}
OR
{{#invoke:String|find|source=source_str|target=target_str|start=start_index|plain=plain_flag}}

Parameters
    source: The string to search
    target: The string or pattern to find within source
    start: The index within the source string to start the search, defaults to 1
    plain: Boolean flag indicating that target should be understood as plain
        text and not as a Lua style regular expression, defaults to true

If invoked using named parameters, Mediawiki will automatically remove any leading or
trailing whitespace from the parameter.  In some circumstances this is desirable, in
other cases one may want to preserve the whitespace.

This function returns the first index &gt;= "start" where "target" can be found
within "source".  Indices are 1-based.  If "target" is not found, then this
function returns 0.  If either "source" or "target" are missing / empty, this
function also returns 0.

This function should be safe for UTF-8 strings.
]]
function str.find( frame )
	local new_args = str._getParameters( frame.args, {'source', 'target', 'start', 'plain' } )
	local source_str = new_args['source'] or ''
	local pattern = new_args['target'] or ''
	local start_pos = tonumber(new_args['start']) or 1
	local plain = new_args['plain'] or true

	if source_str == '' or pattern == '' then
		return 0
	end

	plain = str._getBoolean( plain )

	local start = mw.ustring.find( source_str, pattern, start_pos, plain )
	if start == nil then
		start = 0
	end

	return start
end

--[[
replace

This function allows one to replace a target string or pattern within another
string.

Usage:
{{#invoke:String|replace|source_str|pattern_string|replace_string|replacement_count|plain_flag}}
OR
{{#invoke:String|replace|source=source_string|pattern=pattern_string|replace=replace_string|
   count=replacement_count|plain=plain_flag}}

Parameters
    source: The string to search
    pattern: The string or pattern to find within source
    replace: The replacement text
    count: The number of occurences to replace, defaults to all.
    plain: Boolean flag indicating that pattern should be understood as plain
        text and not as a Lua style regular expression, defaults to true
]]
function str.replace( frame )
	local new_args = str._getParameters( frame.args, {'source', 'pattern', 'replace', 'count', 'plain' } )
	local source_str = new_args['source'] or ''
	local pattern = new_args['pattern'] or ''
	local replace = new_args['replace'] or ''
	local count = tonumber( new_args['count'] )
	local plain = new_args['plain'] or true

	if source_str == '' or pattern == '' then
		return source_str
	end
	plain = str._getBoolean( plain )

	if plain then
		pattern = str._escapePattern( pattern )
		replace = mw.ustring.gsub( replace, "%%", "%%%%" ) --Only need to escape replacement sequences.
	end

	local result

	if count ~= nil then
		result = mw.ustring.gsub( source_str, pattern, replace, count )
	else
		result = mw.ustring.gsub( source_str, pattern, replace )
	end

	return result
end

--[[
    simple function to pipe string.rep to templates.
]]
function str.rep( frame )
	local repetitions = tonumber( frame.args[2] )
	if not repetitions then
		return str._error( 'function rep expects a number as second parameter, received "' .. ( frame.args[2] or '' ) .. '"' )
	end
	return string.rep( frame.args[1] or '', repetitions )
end

--[[
escapePattern

This function escapes special characters from a Lua string pattern. See [1]
for details on how patterns work.

[1] https://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual#Patterns

Usage:
{{#invoke:String|escapePattern|pattern_string}}

Parameters
    pattern_string: The pattern string to escape.
]]
function str.escapePattern( frame )
	local pattern_str = frame.args[1]
	if not pattern_str then
		return str._error( 'No pattern string specified' )
	end
	local result = str._escapePattern( pattern_str )
	return result
end

--[[
count
This function counts the number of occurrences of one string in another.
]]
function str.count(frame)
	local args = str._getParameters(frame.args, {'source', 'pattern', 'plain'})
	local source = args.source or ''
	local pattern = args.pattern or ''
	local plain = str._getBoolean(args.plain or true)
	if plain then
		pattern = str._escapePattern(pattern)
	end
	local _, count = mw.ustring.gsub(source, pattern, '')
	return count
end

--[[
endswith
This function determines whether a string ends with another string.
]]
function str.endswith(frame)
	local args = str._getParameters(frame.args, {'source', 'pattern'})
	local source = args.source or ''
	local pattern = args.pattern or ''
	if pattern == '' then
		-- All strings end with the empty string.
		return "yes"
	end
	if mw.ustring.sub(source, -mw.ustring.len(pattern), -1) == pattern then
		return "yes"
	else
		return ""
	end
end

--[[
join

Join all non empty arguments together; the first argument is the separator.
Usage:
{{#invoke:String|join|sep|one|two|three}}
]]
function str.join(frame)
	local args = {}
	local sep
	for _, v in ipairs( frame.args ) do
		if sep then
			if v ~= '' then
				table.insert(args, v)
			end
		else
			sep = v
		end
	end
	return table.concat( args, sep or '' )
end

--[[
Helper function that populates the argument list given that user may need to use a mix of
named and unnamed parameters.  This is relevant because named parameters are not
identical to unnamed parameters due to string trimming, and when dealing with strings
we sometimes want to either preserve or remove that whitespace depending on the application.
]]
function str._getParameters( frame_args, arg_list )
	local new_args = {}
	local index = 1
	local value

	for _, arg in ipairs( arg_list ) do
		value = frame_args[arg]
		if value == nil then
			value = frame_args[index]
			index = index + 1
		end
		new_args[arg] = value
	end

	return new_args
end

--[[
Helper function to handle error messages.
]]
function str._error( error_str )
	local frame = mw.getCurrentFrame()
	local error_category = frame.args.error_category or 'Errors reported by Module String'
	local ignore_errors = frame.args.ignore_errors or false
	local no_category = frame.args.no_category or false

	if str._getBoolean(ignore_errors) then
		return ''
	end

	local error_str = '&lt;strong class="error"&gt;String Module Error: ' .. error_str .. '&lt;/strong&gt;'
	if error_category ~= '' and not str._getBoolean( no_category ) then
		error_str = '[[Category:' .. error_category .. ']]' .. error_str
	end

	return error_str
end

--[[
Helper Function to interpret boolean strings
]]
function str._getBoolean( boolean_str )
	local boolean_value

	if type( boolean_str ) == 'string' then
		boolean_str = boolean_str:lower()
		if boolean_str == 'false' or boolean_str == 'no' or boolean_str == '0'
				or boolean_str == '' then
			boolean_value = false
		else
			boolean_value = true
		end
	elseif type( boolean_str ) == 'boolean' then
		boolean_value = boolean_str
	else
		error( 'No boolean value found' )
	end
	return boolean_value
end

--[[
Helper function that escapes all pattern characters so that they will be treated
as plain text.
]]
function str._escapePattern( pattern_str )
	return mw.ustring.gsub( pattern_str, "([%(%)%.%%%+%-%*%?%[%^%$%]])", "%%%1" )
end

return str</text>
      <sha1>g9myztjccfeamhqorwvd1gwnwhtk4kx</sha1>
    </revision>
  </page>
  <page>
    <title>Module:TableTools</title>
    <ns>828</ns>
    <id>41371028</id>
    <revision>
      <id>887403551</id>
      <parentid>884154506</parentid>
      <timestamp>2019-03-12T13:06:11Z</timestamp>
      <contributor>
        <username>Alex 21</username>
        <id>22194871</id>
      </contributor>
      <comment>Implementing talk page edit requested</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="12326">--[[
------------------------------------------------------------------------------------
--                               TableTools                                       --
--                                                                                --
-- This module includes a number of functions for dealing with Lua tables.        --
-- It is a meta-module, meant to be called from other Lua modules, and should     --
-- not be called directly from #invoke.                                           --
------------------------------------------------------------------------------------
--]]

local libraryUtil = require('libraryUtil')

local p = {}

-- Define often-used variables and functions.
local floor = math.floor
local infinity = math.huge
local checkType = libraryUtil.checkType
local checkTypeMulti = libraryUtil.checkTypeMulti

--[[
------------------------------------------------------------------------------------
-- isPositiveInteger
--
-- This function returns true if the given value is a positive integer, and false
-- if not. Although it doesn't operate on tables, it is included here as it is
-- useful for determining whether a given table key is in the array part or the
-- hash part of a table.
------------------------------------------------------------------------------------
--]]
function p.isPositiveInteger(v)
	if type(v) == 'number' and v &gt;= 1 and floor(v) == v and v &lt; infinity then
		return true
	else
		return false
	end
end

--[[
------------------------------------------------------------------------------------
-- isNan
--
-- This function returns true if the given number is a NaN value, and false
-- if not. Although it doesn't operate on tables, it is included here as it is
-- useful for determining whether a value can be a valid table key. Lua will
-- generate an error if a NaN is used as a table key.
------------------------------------------------------------------------------------
--]]
function p.isNan(v)
	if type(v) == 'number' and tostring(v) == '-nan' then
		return true
	else
		return false
	end
end

--[[
------------------------------------------------------------------------------------
-- shallowClone
--
-- This returns a clone of a table. The value returned is a new table, but all
-- subtables and functions are shared. Metamethods are respected, but the returned
-- table will have no metatable of its own.
------------------------------------------------------------------------------------
--]]
function p.shallowClone(t)
	local ret = {}
	for k, v in pairs(t) do
		ret[k] = v
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- removeDuplicates
--
-- This removes duplicate values from an array. Non-positive-integer keys are
-- ignored. The earliest value is kept, and all subsequent duplicate values are
-- removed, but otherwise the array order is unchanged.
------------------------------------------------------------------------------------
--]]
function p.removeDuplicates(t)
	checkType('removeDuplicates', 1, t, 'table')
	local isNan = p.isNan
	local ret, exists = {}, {}
	for i, v in ipairs(t) do
		if isNan(v) then
			-- NaNs can't be table keys, and they are also unique, so we don't need to check existence.
			ret[#ret + 1] = v
		else
			if not exists[v] then
				ret[#ret + 1] = v
				exists[v] = true
			end
		end	
	end
	return ret
end			

--[[
------------------------------------------------------------------------------------
-- numKeys
--
-- This takes a table and returns an array containing the numbers of any numerical
-- keys that have non-nil values, sorted in numerical order.
------------------------------------------------------------------------------------
--]]
function p.numKeys(t)
	checkType('numKeys', 1, t, 'table')
	local isPositiveInteger = p.isPositiveInteger
	local nums = {}
	for k, v in pairs(t) do
		if isPositiveInteger(k) then
			nums[#nums + 1] = k
		end
	end
	table.sort(nums)
	return nums
end

--[[
------------------------------------------------------------------------------------
-- affixNums
--
-- This takes a table and returns an array containing the numbers of keys with the
-- specified prefix and suffix. For example, for the table
-- {a1 = 'foo', a3 = 'bar', a6 = 'baz'} and the prefix "a", affixNums will
-- return {1, 3, 6}.
------------------------------------------------------------------------------------
--]]
function p.affixNums(t, prefix, suffix)
	checkType('affixNums', 1, t, 'table')
	checkType('affixNums', 2, prefix, 'string', true)
	checkType('affixNums', 3, suffix, 'string', true)

	local function cleanPattern(s)
		-- Cleans a pattern so that the magic characters ()%.[]*+-?^$ are interpreted literally.
		s = s:gsub('([%(%)%%%.%[%]%*%+%-%?%^%$])', '%%%1')
		return s
	end

	prefix = prefix or ''
	suffix = suffix or ''
	prefix = cleanPattern(prefix)
	suffix = cleanPattern(suffix)
	local pattern = '^' .. prefix .. '([1-9]%d*)' .. suffix .. '$'

	local nums = {}
	for k, v in pairs(t) do
		if type(k) == 'string' then			
			local num = mw.ustring.match(k, pattern)
			if num then
				nums[#nums + 1] = tonumber(num)
			end
		end
	end
	table.sort(nums)
	return nums
end

--[[
------------------------------------------------------------------------------------
-- numData
--
-- Given a table with keys like ("foo1", "bar1", "foo2", "baz2"), returns a table
-- of subtables in the format 
-- { [1] = {foo = 'text', bar = 'text'}, [2] = {foo = 'text', baz = 'text'} }
-- Keys that don't end with an integer are stored in a subtable named "other".
-- The compress option compresses the table so that it can be iterated over with
-- ipairs.
------------------------------------------------------------------------------------
--]]
function p.numData(t, compress)
	checkType('numData', 1, t, 'table')
	checkType('numData', 2, compress, 'boolean', true)
	local ret = {}
	for k, v in pairs(t) do
		local prefix, num = mw.ustring.match(tostring(k), '^([^0-9]*)([1-9][0-9]*)$')
		if num then
			num = tonumber(num)
			local subtable = ret[num] or {}
			if prefix == '' then
				-- Positional parameters match the blank string; put them at the start of the subtable instead.
				prefix = 1
			end
			subtable[prefix] = v
			ret[num] = subtable
		else
			local subtable = ret.other or {}
			subtable[k] = v
			ret.other = subtable
		end
	end
	if compress then
		local other = ret.other
		ret = p.compressSparseArray(ret)
		ret.other = other
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- compressSparseArray
--
-- This takes an array with one or more nil values, and removes the nil values
-- while preserving the order, so that the array can be safely traversed with
-- ipairs.
------------------------------------------------------------------------------------
--]]
function p.compressSparseArray(t)
	checkType('compressSparseArray', 1, t, 'table')
	local ret = {}
	local nums = p.numKeys(t)
	for _, num in ipairs(nums) do
		ret[#ret + 1] = t[num]
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- sparseIpairs
--
-- This is an iterator for sparse arrays. It can be used like ipairs, but can
-- handle nil values.
------------------------------------------------------------------------------------
--]]
function p.sparseIpairs(t)
	checkType('sparseIpairs', 1, t, 'table')
	local nums = p.numKeys(t)
	local i = 0
	local lim = #nums
	return function ()
		i = i + 1
		if i &lt;= lim then
			local key = nums[i]
			return key, t[key]
		else
			return nil, nil
		end
	end
end

--[[
------------------------------------------------------------------------------------
-- size
--
-- This returns the size of a key/value pair table. It will also work on arrays,
-- but for arrays it is more efficient to use the # operator.
------------------------------------------------------------------------------------
--]]

function p.size(t)
	checkType('size', 1, t, 'table')
	local i = 0
	for k in pairs(t) do
		i = i + 1
	end
	return i
end


local function defaultKeySort(item1, item2)
	-- "number" &lt; "string", so numbers will be sorted before strings.
	local type1, type2 = type(item1), type(item2)
	if type1 ~= type2 then
		return type1 &lt; type2
	else -- This will fail with table, boolean, function.
		return item1 &lt; item2
	end
end

--[[
	Returns a list of the keys in a table, sorted using either a default
	comparison function or a custom keySort function.
]]
function p.keysToList(t, keySort, checked)
	if not checked then
		checkType('keysToList', 1, t, 'table')
		checkTypeMulti('keysToList', 2, keySort, { 'function', 'boolean', 'nil' })
	end
	
	local list = {}
	local index = 1
	for key, value in pairs(t) do
		list[index] = key
		index = index + 1
	end
	
	if keySort ~= false then
		keySort = type(keySort) == 'function' and keySort or defaultKeySort
		
		table.sort(list, keySort)
	end
	
	return list
end

--[[
	Iterates through a table, with the keys sorted using the keysToList function.
	If there are only numerical keys, sparseIpairs is probably more efficient.
]]
function p.sortedPairs(t, keySort)
	checkType('sortedPairs', 1, t, 'table')
	checkType('sortedPairs', 2, keySort, 'function', true)
	
	local list = p.keysToList(t, keySort, true)
	
	local i = 0
	return function()
		i = i + 1
		local key = list[i]
		if key ~= nil then
			return key, t[key]
		else
			return nil, nil
		end
	end
end

--[[
	Returns true if all keys in the table are consecutive integers starting at 1.
--]]
function p.isArray(t)
	checkType("isArray", 1, t, "table")
	
	local i = 0
	for k, v in pairs(t) do
		i = i + 1
		if t[i] == nil then
			return false
		end
	end
	return true
end

-- { "a", "b", "c" } -&gt; { a = 1, b = 2, c = 3 }
function p.invert(array)
	checkType("invert", 1, array, "table")
	
	local map = {}
	for i, v in ipairs(array) do
		map[v] = i
	end
	
	return map
end

--[[
	{ "a", "b", "c" } -&gt; { ["a"] = true, ["b"] = true, ["c"] = true }
--]]
function p.listToSet(t)
	checkType("listToSet", 1, t, "table")
	
	local set = {}
	for _, item in ipairs(t) do
		set[item] = true
	end
	
	return set
end

--[[
	Recursive deep copy function.
	Preserves identities of subtables.
	
]]
local function _deepCopy(orig, includeMetatable, already_seen)
	-- Stores copies of tables indexed by the original table.
	already_seen = already_seen or {}
	
	local copy = already_seen[orig]
	if copy ~= nil then
		return copy
	end
	
	if type(orig) == 'table' then
		copy = {}
		for orig_key, orig_value in pairs(orig) do
			copy[deepcopy(orig_key, includeMetatable, already_seen)] = deepcopy(orig_value, includeMetatable, already_seen)
		end
		already_seen[orig] = copy
		
		if includeMetatable then
			local mt = getmetatable(orig)
			if mt ~= nil then
				local mt_copy = deepcopy(mt, includeMetatable, already_seen)
				setmetatable(copy, mt_copy)
				already_seen[mt] = mt_copy
			end
		end
	else -- number, string, boolean, etc
		copy = orig
	end
	return copy
end

function p.deepCopy(orig, noMetatable, already_seen)
	checkType("deepCopy", 3, already_seen, "table", true)
	
	return _deepCopy(orig, not noMetatable, already_seen)
end

--[[
	Concatenates all values in the table that are indexed by a number, in order.
	sparseConcat{ a, nil, c, d }  =&gt;  "acd"
	sparseConcat{ nil, b, c, d }  =&gt;  "bcd"
]]
function p.sparseConcat(t, sep, i, j)
	local list = {}
	
	local list_i = 0
	for _, v in p.sparseIpairs(t) do
		list_i = list_i + 1
		list[list_i] = v
	end
	
	return table.concat(list, sep, i, j)
end

--[[
-- This returns the length of a table, or the first integer key n counting from
-- 1 such that t[n + 1] is nil. It is similar to the operator #, but may return
-- a different value when there are gaps in the array portion of the table.
-- Intended to be used on data loaded with mw.loadData. For other tables, use #.
-- Note: #frame.args in frame object always be set to 0, regardless of 
-- the number of unnamed template parameters, so use this function for
-- frame.args.
--]]
function p.length(t)
	local i = 1
	while t[i] ~= nil do
		i = i + 1
	end
	return i - 1
end

function p.inArray(arr, valueToFind)
	checkType("inArray", 1, arr, "table")
	
	-- if valueToFind is nil, error?
	
	for _, v in ipairs(arr) do
		if v == valueToFind then
			return true
		end
	end
	
	return false
end

return p</text>
      <sha1>tqif0qe0lu98pj8cuq70kgi6evye5t3</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Toolbar</title>
    <ns>828</ns>
    <id>39645406</id>
    <revision>
      <id>885216335</id>
      <parentid>885128117</parentid>
      <timestamp>2019-02-26T18:14:05Z</timestamp>
      <contributor>
        <username>MusikAnimal</username>
        <id>14882394</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Toolbar]]": [[WP:High-risk templates|High-risk Lua module]] ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="1266">-- This module implements {{toolbar}}.

local mArguments -- Lazily initialise [[Module:Arguments]]
local mTableTools = require('Module:TableTools')
local yesno = require('Module:Yesno')

local p = {}

function p.main(frame)
	mArguments = require('Module:Arguments')
	local args = mArguments.getArgs(frame)
	return p._main(args)
end

function p._main(args)
	local toolbarItems = p.makeToolbarItems(args)
	if not toolbarItems then
		-- Return the blank string if no arguments were specified, rather than
		-- returning empty brackets.
		return ''
	elseif yesno(args.span) == false then
		return string.format(
			'(%s)',
			toolbarItems
		)
	else
		return string.format(
			'&lt;span class="plainlinks%s"%s&gt;(%s)&lt;/span&gt;',
			type(args.class) == 'string' and ' ' .. args.class or '',
			type(args.style) == 'string' and string.format(' style="%s"', args.style) or '',
			toolbarItems
		)
	end
end

function p.makeToolbarItems(args)
	local nums = mTableTools.numKeys(args)
	local sep = (args.separator or 'pipe') .. '-separator'
	sep = mw.message.new(sep):plain()
	local ret = {}
	for i, v in ipairs(nums) do
		ret[#ret + 1] = mw.ustring.gsub(args[v], "%[%[::+(.-)%]%]", "[[:%1]]")
	end
	if #ret &gt; 0 then
		return table.concat(ret, sep)
	else
		return nil
	end
end

return p</text>
      <sha1>dat0yzyzu635n4je30cyef668afrodq</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Trim quotes</title>
    <ns>828</ns>
    <id>55806271</id>
    <revision>
      <id>898046778</id>
      <parentid>897998593</parentid>
      <timestamp>2019-05-21T01:19:23Z</timestamp>
      <contributor>
        <username>Johnuniq</username>
        <id>6036800</id>
      </contributor>
      <comment>mw.ustring is not needed to find apostrophe/quote; this is more efficient</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="325">local p = {}

function p._trim(s)
	if s then
		if s:match([[^(['"]).*%1$]]) then return p._trim(string.sub(s,2,-2)) else return s end
	else
		return ""
	end
end

function p.trim(frame)
	local s = (frame.args['s'] or frame.args[1]) or (frame:getParent().args['s'] or frame:getParent().args[1])
	return p._trim(s)
end

return p</text>
      <sha1>s3q0pg1nqmwo84ax2ivegivqa64dwfk</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Unicode data</title>
    <ns>828</ns>
    <id>57744930</id>
    <revision>
      <id>915705458</id>
      <parentid>884154363</parentid>
      <timestamp>2019-09-14T21:16:48Z</timestamp>
      <contributor>
        <username>Drmccreedy</username>
        <id>1543097</id>
      </contributor>
      <comment>fix plane numbers per http://unicode.org/L2/L2003/03376-n2662-roadmaps.html</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="15798">local p = {}

local floor = math.floor

local function errorf(level, ...)
	if type(level) == "number" then
		return error(string.format(...), level + 1)
	else -- level is actually the format string.
		return error(string.format(level, ...), 2)
	end
end

local function binary_range_search(codepoint, ranges)
	local low, mid, high
	low, high = 1, ranges.length or require "Module:TableTools".length(ranges)
	while low &lt;= high do
		mid = floor((low + high) / 2)
		local range = ranges[mid]
		if codepoint &lt; range[1] then
			high = mid - 1
		elseif codepoint &lt;= range[2] then
			return range, mid
		else
			low = mid + 1
		end
	end
	return nil, mid
end
p.binary_range_search = binary_range_search

--[[
local function linear_range_search(codepoint, ranges)
	for i, range in ipairs(ranges) do
		if range[1] &lt;= codepoint and codepoint &lt;= range[2] then
			return range
		end
	end
end
--]]

-- Load a module by indexing "loader" with the name of the module minus the
-- "Module:Unicode data/" part. For instance, loader.blocks returns
-- [[Module:Unicode data/blocks]]. If a module cannot be loaded, false will be
-- returned.
local loader = setmetatable({}, {
	__index = function (self, key)
		local success, data = pcall(mw.loadData, "Module:Unicode data/" .. key)
		if not success then
			data = false
		end
		self[key] = data
		return data
	end
})

-- For the algorithm used to generate Hangul Syllable names,
-- see "Hangul Syllable Name Generation" in section 3.12 of the
-- Unicode Specification:
-- https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf
local name_hooks = {
	{     0x00,     0x1F, "&lt;control-%04X&gt;" }, -- C0 control characters
	{     0x7F,     0x9F, "&lt;control-%04X&gt;" }, -- DEL and C1 control characters
	{   0x3400,   0x4DB5, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension A
	{   0x4E00,   0x9FEF, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph
	{   0xAC00,   0xD7A3, function (codepoint) -- Hangul Syllables
		local Hangul_data = loader.Hangul
		local syllable_index = codepoint - 0xAC00

		return ("HANGUL SYLLABLE %s%s%s"):format(
			Hangul_data.leads[floor(syllable_index / Hangul_data.final_count)],
			Hangul_data.vowels[floor((syllable_index % Hangul_data.final_count)
				/ Hangul_data.trail_count)],
			Hangul_data.trails[syllable_index % Hangul_data.trail_count]
		)
	end },
	-- High Surrogates, High Private Use Surrogates, Low Surrogates
	{   0xD800,   0xDFFF, "&lt;surrogate-%04X&gt;" },
	{   0xE000,   0xF8FF, "&lt;private-use-%04X&gt;" }, -- Private Use
	-- CJK Compatibility Ideographs
	{   0xF900,   0xFA6D, "CJK COMPATIBILITY IDEOGRAPH-%04X" },
	{   0xFA70,   0xFAD9, "CJK COMPATIBILITY IDEOGRAPH-%04X" },
	{  0x17000,  0x187F1, "TANGUT IDEOGRAPH-%04X" }, -- Tangut
	{  0x18800,  0x18AF2, function (codepoint)
		return ("TANGUT COMPONENT-%03d"):format(codepoint - 0x187FF)
	end },
	{  0x1B170,  0x1B2FB, "NUSHU CHARACTER-%04X" }, -- Nushu
	{  0x20000,  0x2A6D6, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension B
	{  0x2A700,  0x2B734, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension C
	{  0x2A740,  0x2B81D, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension D
	{  0x2B820,  0x2CEA1, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension E
	{  0x2CEB0,  0x2EBE0, "CJK UNIFIED IDEOGRAPH-%04X" }, -- CJK Ideograph Extension F
	-- CJK Compatibility Ideographs Supplement (Supplementary Ideographic Plane)
	{  0x2F800,  0x2FA1D, "CJK COMPATIBILITY IDEOGRAPH-%04X" },
	{  0xE0100,  0xE01EF, function (codepoint) -- Variation Selectors Supplement
		return ("VARIATION SELECTOR-%d"):format(codepoint - 0xE0100 + 17)
	end},
	{  0xF0000,  0xFFFFD, "&lt;private-use-%04X&gt;" }, -- Plane 15 Private Use
	{ 0x100000, 0x10FFFD, "&lt;private-use-%04X&gt;" }  -- Plane 16 Private Use
}
name_hooks.length = #name_hooks

local name_range_cache

local function generate_name(data, codepoint)
	if type(data) == "string" then
		return data:format(codepoint)
	else
		return data(codepoint)
	end
end

--[[
-- Checks that the code point is a number and in range.
-- Does not check whether code point is an integer.
-- Not used
local function check_codepoint(funcName, argIdx, val)
	require 'libraryUtil'.checkType(funcName, argIdx, val, 'number')
	if codepoint &lt; 0 or 0x10FFFF &lt; codepoint then
		errorf("Codepoint %04X out of range", codepoint)
	end
end
--]]

-- https://www.unicode.org/versions/Unicode11.0.0/ch04.pdf, section 4.8
function p.lookup_name(codepoint)
	-- U+FDD0-U+FDEF and all code points ending in FFFE or FFFF are Unassigned
	-- (Cn) and specifically noncharacters:
	-- https://www.unicode.org/faq/private_use.html#nonchar4
	if 0xFDD0 &lt;= codepoint and (codepoint &lt;= 0xFDEF
			or floor(codepoint % 0x10000) &gt;= 0xFFFE) then
		return ("&lt;noncharacter-%04X&gt;"):format(codepoint)
	end

	if name_range_cache -- Check if previously used "name hook" applies to this code point.
			and codepoint &gt;= name_range_cache[1]
			and codepoint &lt;= name_range_cache[2] then
		return generate_name(name_range_cache[3], codepoint)
	end
	
	local range = binary_range_search(codepoint, name_hooks)
	if range then
		name_range_cache = range
		return generate_name(range[3], codepoint)
	end

	local data = loader[('names/%03X'):format(codepoint / 0x1000)]
	
	if data and data[codepoint] then
		return data[codepoint]
	
	-- Unassigned (Cn) consists of noncharacters and reserved characters.
	-- The character has been established not to be a noncharacter,
	-- and if it were assigned, its name would already been retrieved,
	-- so it must be reserved.
	else
		return ("&lt;reserved-%04X&gt;"):format(codepoint)
	end
end

--[[
-- No image data modules on Wikipedia yet.
function p.lookup_image(codepoint)
	local data = loader[('images/%03X'):format(codepoint / 0x1000)]
	
	if data then
		return data[codepoint]
	end
end
--]]

local planes = {
	[ 0] = "Basic Multilingual Plane";
	[ 1] = "Supplementary Multilingual Plane";
	[ 2] = "Supplementary Ideographic Plane";
	[14] = "Supplementary Special-purpose Plane";
	[15] = "Supplementary Private Use Area-A";
	[16] = "Supplementary Private Use Area-B";
}

-- Load [[Module:Unicode data/blocks]] if needed and assign it to this variable.
local blocks

local function block_iter(blocks, i)
	i = i + 1
	local data = blocks[i]
	if data then
		 -- Unpack doesn't work on tables loaded with mw.loadData.
		return i, data[1], data[2], data[3]
	end
end

-- An ipairs-type iterator generator for the list of blocks.
function p.enum_blocks()
	local blocks = loader.blocks
	return block_iter, blocks, 0
end

function p.lookup_plane(codepoint)
	local i = floor(codepoint / 0x10000)
	return planes[i] or ("Plane %u"):format(i)
end

function p.lookup_block(codepoint)
	local blocks = loader.blocks
	local range = binary_range_search(codepoint, blocks)
	if range then
		return range[3]
	else
		return "No Block"
	end
end

function p.get_block_info(name)
	for i, block in ipairs(loader.blocks) do
		if block[3] == name then
			return block
		end
	end
end

function p.is_valid_pagename(pagename)
	local has_nonws = false

	for cp in mw.ustring.gcodepoint(pagename) do
		if (cp == 0x0023) -- #
		or (cp == 0x005B) -- [
		or (cp == 0x005D) -- ]
		or (cp == 0x007B) -- {
		or (cp == 0x007C) -- |
		or (cp == 0x007D) -- }
		or (cp == 0x180E) -- MONGOLIAN VOWEL SEPARATOR
		or ((cp &gt;= 0x2000) and (cp &lt;= 0x200A)) -- spaces in General Punctuation block
		or (cp == 0xFFFD) -- REPLACEMENT CHARACTER
		then
			return false
		end

		local printable, result = p.is_printable(cp)
		if not printable then
			return false
		end

		if result ~= "space-separator" then
			has_nonws = true
		end
	end

	return has_nonws
end

local function manual_unpack(what, from)
	if what[from + 1] == nil then
		return what[from]
	end
	
	local result = {}
	from = from or 1
	for i, item in ipairs(what) do
		if i &gt;= from then
			table.insert(result, item)
		end
	end
	return unpack(result)
end

local function compare_ranges(range1, range2)
	return range1[1] &lt; range2[1]
end

-- Creates a function to look up data in a module that contains "singles" (a
-- code point-to-data map) and "ranges" (an array containing arrays that contain
-- the low and high code points of a range and the data associated with that
-- range).
-- "loader" loads and returns the "singles" and "ranges" tables.
-- "match_func" is passed the code point and either the data or the "dots", and
-- generates the final result of the function.
-- The varargs ("dots") describes the default data to be returned if there wasn't
-- a match.
-- In case the function is used more than once, "cache" saves ranges that have
-- already been found to match, or a range whose data is the default if there
-- was no match.
local function memo_lookup(data_module_subpage, match_func, ...)
	local dots = { ... }
	local cache = {}
	local singles, ranges

	return function (codepoint)
		if not singles then
			local data_module = loader[data_module_subpage]
			singles, ranges = data_module.singles, data_module.ranges
		end

		if singles[codepoint] then
			return match_func(codepoint, singles[codepoint])
		end

		local range = binary_range_search(codepoint, cache)
		if range then
			return match_func(codepoint, manual_unpack(range, 3))
		end
		
		local range, index = binary_range_search(codepoint, ranges)
		if range then
			table.insert(cache, range)
			table.sort(cache, compare_ranges)
			return match_func(codepoint, manual_unpack(range, 3))
		end
		
		if ranges[index] then
			local dots_range
			if codepoint &gt; ranges[index][2] then
				dots_range = {
					ranges[index][2] + 1,
					ranges[index + 1] and ranges[index + 1][1] - 1 or 0x10FFFF,
					unpack(dots)
				}
			else -- codepoint &lt; range[index][1]
				dots_range = {
					ranges[index - 1] and ranges[index - 1][2] + 1 or 0,
					ranges[index][1] - 1,
					unpack(dots)
				}
			end
			table.sort(cache, compare_ranges)
		end
		
		return match_func(codepoint)
	end
end

-- Get a code point's combining class value in [[Module:Unicode data/combining]],
-- and return whether this value is not zero. Zero is assigned as the default
-- if the combining class value is not found in this data module.
-- That is, return true if character is combining, or false if it is not.
-- See https://www.unicode.org/reports/tr44/#Canonical_Combining_Class_Values for
-- more information.
p.is_combining = memo_lookup(
	"combining",
	function (codepoint, combining_class)
		return combining_class and combining_class ~= 0 or false
	end,
	0)

function p.add_dotted_circle(str)
	return (mw.ustring.gsub(str, ".",
		function(char)
			if p.is_combining(mw.ustring.codepoint(char)) then
				return '◌' .. char
			end
		end))
end

local lookup_control = memo_lookup(
	"control",
	function (codepoint, ccc)
		return ccc or "assigned"
	end,
	"assigned")
p.lookup_control = lookup_control

function p.is_assigned(codepoint)
	return lookup_control(codepoint) ~= "unassigned"
end

function p.is_printable(codepoint)
	local result = lookup_control(codepoint)
	return (result == "assigned") or (result == "space-separator"), result
end

function p.is_whitespace(codepoint)
	local result = lookup_control(codepoint)
	return (result == "space-separator"), result
end

p.lookup_category = memo_lookup(
	"category",
	function (codepoint, category)
		return category
	end,
	"Cn")

local lookup_script = memo_lookup(
	"scripts",
	function (codepoint, script_code)
		return script_code or 'Zzzz'
	end,
	"Zzzz")
p.lookup_script = lookup_script

function p.get_best_script(str)
	-- Check type of argument, because mw.text.decode coerces numbers to strings!
	require "libraryUtil".checkType("get_best_script", 1, str, "string")
	
	-- Convert HTML character references (including named character references,
	-- or character entities) to characters.
	str = mw.text.decode(str, true)
	
	local scripts = {}
	for codepoint in mw.ustring.gcodepoint(str) do
		local script = lookup_script(codepoint)
		
		-- Ignore "Inherited", "Undetermined", or "Uncoded" scripts.
		if not (script == "Zyyy" or script == "Zinh" or script == "Zzzz") then
			scripts[script] = true
		end
	end
	
	-- If scripts does not contain two or more keys,
	-- return first and only key (script code) in table.
	if not next(scripts, next(scripts)) then
		return next(scripts)
	end -- else return majority script, or else "Zzzz"?
end

function p.is_Latin(str)
	require "libraryUtil".checkType("get_best_script", 1, str, "string")
	str = mw.text.decode(str, true)
	
	-- Search for the leading bytes that introduce the UTF-8 encoding of the
	-- code points U+0340-U+10FFFF. If they are not found and there is at least
	-- one Latin-script character, the string counts as Latin, because the rest
	-- of the characters can only be Zyyy, Zinh, and Zzzz.
	-- The only scripts found below U+0370 (the first code point of the Greek
	-- and Coptic block) are Latn, Zyyy, Zinh, and Zzzz.
	-- See the codepage in the [[UTF-8]] article.
	if not str:find "[\205-\244]" then
		for codepoint in mw.ustring.gcodepoint(str) do
			if lookup_script(codepoint) == "Latn" then
				return true
			end
		end
	end
	
	local Latn = false
	
	for codepoint in mw.ustring.gcodepoint(str) do
		local script = lookup_script(codepoint)
		
		if script == "Latn" then
			Latn = true
		elseif not (script == "Zyyy" or script == "Zinh"
				or script == "Zzzz") then
			return false
		end
	end
	
	return Latn
end

-- Checks that a string contains only characters belonging to right-to-left
-- scripts, or characters of ignorable scripts.
function p.is_rtl(str)
	require "libraryUtil".checkType("get_best_script", 1, str, "string")
	str = mw.text.decode(str, true)
	
	-- Search for the leading bytes that introduce the UTF-8 encoding of the
	-- code points U+0580-U+10FFFF. If they are not found, the string can only
	-- have characters from a left-to-right script, because the first code point
	-- in a right-to-left script is U+0591, in the Hebrew block.
	if not str:find "[\214-\244]" then
		return false
	end
	
	local result = false
	local rtl = loader.scripts.rtl
	for codepoint in mw.ustring.gcodepoint(str) do
		local script = lookup_script(codepoint)
		
		if rtl[script] then
			result = true
		elseif not (script == "Zyyy" or script == "Zinh"
				or script == "Zzzz") then
			return false
		end
	end
	
	return result
end

local function get_codepoint(args, arg)
	local codepoint_string = args[arg]
		or errorf(2, "Parameter %s is required", tostring(arg))
	local codepoint = tonumber(codepoint_string, 16)
		or errorf(2, "Parameter %s is not a code point in hexadecimal base",
			tostring(arg))
	if not (0 &lt;= codepoint and codepoint &lt;= 0x10FFFF) then
		errorf(2, "code point in parameter %s out of range", tostring(arg))
	end
	return codepoint
end

local function get_func(args, arg, prefix)
	local suffix = args[arg]
		or errorf(2, "Parameter %s is required", tostring(arg))
	suffix = mw.text.trim(suffix)
	local func_name = prefix .. suffix
	local func = p[func_name]
		or errorf(2, "There is no function '%s'", func_name)
	return func
end

-- This function allows any of the "lookup" functions to be invoked. The first
-- parameter is the word after "lookup_"; the second parameter is the code point
-- in hexadecimal base.
function p.lookup(frame)
	local func = get_func(frame.args, 1, "lookup_")
	local codepoint = get_codepoint(frame.args, 2)
	local result = func(codepoint)
	if func == p.lookup_name then
		-- Prevent code point labels such as &lt;control-0000&gt; from being
		-- interpreted as HTML tags.
		result = result:gsub("&lt;", "&amp;lt;")
	end
	return result
end

function p.is(frame)
	local func = get_func(frame.args, 1, "is_")
	
	-- is_Latin and is_valid_pagename take strings.
	if func == p.is_Latin or func == p.is_valid_pagename or func == p.is_rtl then
		return (func(frame.args[2]))
	else -- The rest take code points.
		local codepoint = get_codepoint(frame.args, 2)
		return (func(codepoint)) -- Adjust to one result.
	end
end

return p</text>
      <sha1>frulp8cqtz9zwueudb3na4z8hb0cy4t</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Unsubst</title>
    <ns>828</ns>
    <id>40945493</id>
    <revision>
      <id>872090768</id>
      <parentid>784254967</parentid>
      <timestamp>2018-12-05T02:49:39Z</timestamp>
      <contributor>
        <username>Amorymeltzer</username>
        <id>141948</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Module:Unsubst]]": [[WP:High-risk templates|High-risk Lua module]]: Bump to full protection, over 3.5M transclusions, including some very critical templates ([Edit=Require administrator access] (indefinite) [Move=Require administrator access] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="3688">local checkType = require('libraryUtil').checkType

local p = {}

local BODY_PARAM = '$B'

local specialParams = {
	['$params'] = 'parameter list',
	['$aliases'] = 'parameter aliases',
	['$flags'] = 'flags',
	['$B'] = 'template content'
}

function p.main(frame, body)
	-- If we are substing, this function returns a template invocation, and if
	-- not, it returns the template body. The template body can be specified in
	-- the body parameter, or in the template parameter defined in the
	-- BODY_PARAM variable. This function can be called from Lua or from
	-- #invoke.

	-- Return the template body if we aren't substing.
	if not mw.isSubsting() then
		if body ~= nil then
			return body
		elseif frame.args[BODY_PARAM] ~= nil then
			return frame.args[BODY_PARAM]
		else
			error(string.format(
				"no template content specified (use parameter '%s' from #invoke)",
				BODY_PARAM
			), 2)
		end
	end

	-- Sanity check for the frame object.
	if type(frame) ~= 'table'
		or type(frame.getParent) ~= 'function'
		or not frame:getParent()
	then
		error(
			"argument #1 to 'main' must be a frame object with a parent " ..
			"frame available",
			2
		)
	end

	-- Find the invocation name.
	local mTemplateInvocation = require('Module:Template invocation')
	local name = mTemplateInvocation.name(frame:getParent():getTitle())

	-- Combine passed args with passed defaults
	local args = {}
	if string.find( ','..(frame.args['$flags'] or '')..',', ',%s*override%s*,' ) then
		for k, v in pairs( frame:getParent().args ) do
			args[k] = v
		end
		for k, v in pairs( frame.args ) do
			if not specialParams[k] then
				if v == '__DATE__' then
					v = mw.getContentLanguage():formatDate( 'F Y' )
				end
				args[k] = v
			end
		end
	else
		for k, v in pairs( frame.args ) do
			if not specialParams[k] then
				if v == '__DATE__' then
					v = mw.getContentLanguage():formatDate( 'F Y' )
				end
				args[k] = v
			end
		end
		for k, v in pairs( frame:getParent().args ) do
			args[k] = v
		end
	end

	-- Trim parameters, if not specified otherwise
	if not string.find( ','..(frame.args['$flags'] or '')..',', ',%s*keep%-whitespace%s*,' ) then
		for k, v in pairs( args ) do args[k] = mw.ustring.match(v, '^%s*(.*)%s*$') or '' end
	end

	-- Pull information from parameter aliases
	local aliases = {}
	if frame.args['$aliases'] then
		local list = mw.text.split( frame.args['$aliases'], '%s*,%s*' )
		for k, v in ipairs( list ) do
			local tmp = mw.text.split( v, '%s*&gt;%s*' )
			aliases[tonumber(mw.ustring.match(tmp[1], '^[1-9][0-9]*$')) or tmp[1]] = ((tonumber(mw.ustring.match(tmp[2], '^[1-9][0-9]*$'))) or tmp[2])
		end
	end
	for k, v in pairs( aliases ) do
		if args[k] and ( not args[v] or args[v] == '' ) then
			args[v] = args[k]
		end
		args[k] = nil
	end

	-- Remove empty parameters, if specified
	if string.find( ','..(frame.args['$flags'] or '')..',', ',%s*remove%-empty%s*,' ) then
		local tmp = 0
		for k, v in ipairs( args ) do
			if v ~= '' or ( args[k+1] and args[k+1] ~= '' ) or ( args[k+2] and args[k+2] ~= '' ) then
				tmp = k
			else
				break
			end
		end
		for k, v in pairs( args ) do
			if v == '' then
				if not (type(k) == 'number' and k &lt; tmp) then args[k] = nil end
			end
		end
	end

	-- Order parameters
	if frame.args['$params'] then
		local params, tmp = mw.text.split( frame.args['$params'], '%s*,%s*' ), {}
		for k, v in ipairs(params) do
			v = tonumber(mw.ustring.match(v, '^[1-9][0-9]*$')) or v
			if args[v] then tmp[v], args[v] = args[v], nil end
		end
		for k, v in pairs(args) do tmp[k], args[k] = args[k], nil end
		args = tmp
	end

	return mTemplateInvocation.invocation(name, args)
end

p[''] = p.main -- For backwards compatibility

return p</text>
      <sha1>dnfbu3ol9y1rn4f58ap519pwafevpgq</sha1>
    </revision>
  </page>
  <page>
    <title>Module:User</title>
    <ns>828</ns>
    <id>42417787</id>
    <revision>
      <id>603017465</id>
      <parentid>603017188</parentid>
      <timestamp>2014-04-06T15:43:28Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>comment the validateArg function</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="2113">--[=[
-- This module implements {{user}}. {{user}} is a high-use template, sometimes
-- with thousands of transclusions on a page. This module optimises the
-- template's performance by reducing the number of parameters called from
-- wikitext, while still allowing all the features provided by
-- [[Module:UserLinks]]. It is about twice as fast as the version of {{user}}
-- that called the {{user-multi}} template from wikitext.
--]=]

local mUserLinks = require('Module:UserLinks')
local mShared = require('Module:UserLinks/shared')
local yesno = require('Module:Yesno')

local p = {}

local function validateArg(arg)
	-- Validates one argument. Whitespace is stripped, and blank arguments
	-- are treated as nil.
	if not arg then
		return nil
	end
	arg = arg:match('^%s*(.-)%s*$')
	if arg ~= '' then
		return arg
	else
		return nil
	end
end

function p.main(frame)
	-- Grab the user, project and lang args from wikitext.
	local argKeys = {
		user = {
			1,
			'User',
			'user'
		},
		project = {
			2,
			'Project',
			'project'
		},
		lang = {
			3,
			'Lang',
			'lang'
		}
	}
	local origArgs = frame:getParent().args
	local args = {}
	for argKey, t in pairs(argKeys) do
		for i, origArgKey in ipairs(t) do
			local value = origArgs[origArgKey]
			value = validateArg(value)
			if value then
				args[argKey] = value
				-- If we have found a value, break the loop. For the average
				-- invocation this saves two argument lookups.
				break
			end
		end
	end
	
	-- Generate options. Some of these need wikitext args also.
	local options = {
		span = false,
		separator = validateArg(origArgs.separator) or 'dot',
		isDemo = yesno(validateArg(origArgs.demo))
	}
	
	-- Input the codes directly. This saves two argument lookups for each
	-- invocation.
	local codes = {'t', 'c'}
	
	-- Plug the data into [[Module:UserLinks]].
	local snippets = mUserLinks.getSnippets(args)
	local links = mUserLinks.getLinks(snippets)
	local success, result = pcall(mUserLinks.export, codes, links, options)
	if success then
		return result
	else
		return mShared.makeWikitextError(result, options.isDemo)
	end
end

return p</text>
      <sha1>tj1l9rxbmjibxp392xv31zrrotkybg3</sha1>
    </revision>
  </page>
  <page>
    <title>Module:UserLinks</title>
    <ns>828</ns>
    <id>39654315</id>
    <revision>
      <id>911714919</id>
      <parentid>823345675</parentid>
      <timestamp>2019-08-20T17:28:52Z</timestamp>
      <contributor>
        <username>ST47</username>
        <id>1272505</id>
      </contributor>
      <comment>Allow linking to contribs of a /64 for IPv6 addresses</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="22659">--------------------------------------------------------------------------------
--                                 UserLinks                                  --
-- This module creates a list of links about a given user. It can be used on  --
-- its own or from a template. See the /doc page for more documentation.      --
--------------------------------------------------------------------------------

-- Require necessary modules
local yesno = require('Module:Yesno')

-- Lazily initialise modules that we might or might not need
local mExtra -- [[Module:UserLinks/extra]]
local mArguments -- [[Module:Arguments]]
local mToolbar -- [[Module:Toolbar]]
local mCategoryHandler -- [[Module:Category handler]]
local mTableTools -- [[Module:TableTools]]
local interwikiTable -- [[Module:InterwikiTable]], loaded with mw.loadData

-- Load shared helper functions
local mShared = require('Module:UserLinks/shared')
local raiseError = mShared.raiseError
local maybeLoadModule = mShared.maybeLoadModule
local makeWikitextError = mShared.makeWikitextError
local makeWikilink = mShared.makeWikilink
local makeUrlLink = mShared.makeUrlLink
local makeFullUrlLink = mShared.makeFullUrlLink
local message = mShared.message

local p = {}

--------------------------------------------------------------------------------
-- Link table
--------------------------------------------------------------------------------

function p.getLinks(snippets)
	--[=[
	-- Get a table of links that can be indexed with link codes. The table
	-- returned is blank, but links are added to it on demand when it is
	-- indexed. This is made possible by the metatable and by the various link
	-- functions, some of which are defined here, and some of which are defined
	-- at [[Module:UserLinks/extra]].
	--]=]
	local links, linkFunctions = {}, {}

	----------------------------------------------------------------------------
	-- Link functions
	--
	-- The following functions make the links from the link codes and the user
	-- data snippets. New link functions should be added below the existing
	-- functions.
	----------------------------------------------------------------------------

	function linkFunctions.u(snippets)
		-- User page
		return makeWikilink(
			snippets.interwiki,
			2,
			snippets.username,
			snippets.username
		)
	end

	function linkFunctions.t(snippets)
		-- User talk page
		return makeWikilink(
			snippets.interwiki,
			3,
			snippets.username,
			message('display-talk')
		)
	end

	function linkFunctions.c(snippets)
		-- Contributions
		return makeWikilink(
			snippets.interwiki,
			-1,
			'Contribs/' .. snippets.username,
			message('display-contributions')
		)
	end
	
	function linkFunctions.c64(snippets)
		-- Contributions
		return makeWikilink(
			snippets.interwiki,
			-1,
			'Contribs/' .. snippets.username .. '/64',
			'(/64)'
		)
	end

	function linkFunctions.ct(snippets)
		-- Edit count
		return makeUrlLink(
			{
				host = 'xtools.wmflabs.org',
				path = '/ec/',
				query = {
					username = snippets.username,
					project = snippets.toolLang .. '.' .. snippets.projectLong .. '.org'
				}
			},
			message('display-count')
		)
	end

	function linkFunctions.m(snippets)
		-- Page moves
		return makeWikilink(
			snippets.interwiki,
			-1,
			'Log/move/' .. snippets.username,
			message('display-moves')
		)
	end

	function linkFunctions.l(snippets)
		-- Logs
		return makeWikilink(
			snippets.interwiki,
			-1,
			'Log/' .. snippets.username,
			message('display-logs')
		)
	end

	function linkFunctions.ae(snippets)
		-- Automated edits (and non-automated contributions).
		return makeUrlLink(
			{
				host = 'xtools.wmflabs.org',
				path = '/autoedits/',
				query = {
					username = snippets.username,
					project = snippets.toolLang .. '.' .. snippets.projectLong .. '.org'
				}
			},
			message('display-autoedits')
		)
	end

	function linkFunctions.bl(snippets)
		-- Block log
		return makeFullUrlLink(
			snippets.interwiki,
			-1,
			'Log/block',
			{page = 'User:' .. snippets.username},
			message('display-blocklog')
		)
	end

	function linkFunctions.bls(snippets)
		-- Blocks
		return makeWikilink(
			snippets.interwiki,
			-1,
			'Log/block/' .. snippets.username,
			message('display-blocks')
		)
	end

	function linkFunctions.bu(snippets)
		-- Block user
		return makeWikilink(
			snippets.interwiki,
			-1,
			'Block/' .. snippets.username,
			message('display-blockuser')
		)
	end

	function linkFunctions.ca(snippets)
		-- Central auth
		return makeWikilink(
			snippets.interwiki,
			-1,
			'CentralAuth/' .. snippets.username,
			message('display-centralauth')
		)
	end

	function linkFunctions.dc(snippets)
		-- Deleted contribs
		return makeWikilink(
			snippets.interwiki,
			-1,
			'DeletedContributions/' .. snippets.username,
			message('display-deletedcontributions')
		)
	end

	function linkFunctions.e(snippets)
		-- Email
		return makeWikilink(
			snippets.interwiki,
			-1,
			'EmailUser/' .. snippets.username,
			message('display-email')
		)
	end

	function linkFunctions.es(snippets)
		-- Edit summaries
		return makeUrlLink(
			{
				host = 'xtools.wmflabs.org',
				path = '/editsummary/',
				query = {
					username = snippets.username,
					project = snippets.toolLang .. '.' .. snippets.projectLong .. '.org'
				}
			},
			message('display-editsummaries')
		)
	end

	function linkFunctions.del(snippets)
		-- Deletions
		return makeWikilink(
			snippets.interwiki,
			-1,
			'Log/delete/' .. snippets.username,
			message('display-deletions')
		)
	end

	function linkFunctions.lu(snippets)
		-- List user
		return makeFullUrlLink(
			snippets.interwiki,
			-1,
			'ListUsers',
			{limit = 1, username = snippets.username},
			message('display-listuser')
		)
	end

	function linkFunctions.sul(snippets)
		-- SUL
		return makeWikilink(
			nil,
			nil,
			'sulutil:' .. snippets.username,
			message('display-sul')
		)
	end

	function linkFunctions.tl(snippets)
		-- Target logs
		return makeFullUrlLink(
			snippets.interwiki,
			-1,
			'Log',
			{page = mw.site.namespaces[2].name .. ':' .. snippets.username},
			message('display-targetlogs')
		)
	end

	function linkFunctions.efl(snippets)
		-- Edit filter log
		return makeFullUrlLink(
			snippets.interwiki,
			-1,
			'AbuseLog',
			{wpSearchUser = snippets.username},
			message('display-abuselog')
		)
	end

	function linkFunctions.pr(snippets)
		-- Protections
		return makeWikilink(
			snippets.interwiki,
			-1,
			'Log/protect/' .. snippets.username,
			message('display-protections')
		)
	end

	function linkFunctions.rl(snippets)
		-- User rights
		return makeWikilink(
			snippets.interwiki,
			-1,
			'Log/rights/' .. snippets.username,
			message('display-rights')
		)
	end

	function linkFunctions.ren(snippets)
		-- Renames
		return makeWikilink(
			snippets.interwiki,
			-1,
			'Log/renameuser/' .. snippets.username,
			message('display-renames')
		)
	end

	function linkFunctions.rfa(snippets)
		-- Requests for adminship
		return makeWikilink(
			nil,
			-1,
			'PrefixIndex/' .. message('page-rfa') .. '/' .. snippets.username,
			message('display-rfa')
		)
	end

	function linkFunctions.api(snippets)
		-- API user data
		return makeUrlLink(
			{
				host = snippets.fullDomain,
				path = '/w/api.php',
				query = {
					action = 'query',
					list = 'users',
					usprop = 'groups|editcount',
					ususers = snippets.username
				}
			},
			message('display-api')
		)
	end

	function linkFunctions.up(snippets)
		-- Uploads
		return makeWikilink(
			snippets.interwiki,
			-1,
			'ListFiles/' .. snippets.username,
			message('display-uploads')
		)
	end
	
	----------------------------------------------------------------------------
	-- End of link functions
	----------------------------------------------------------------------------

	-- Define the metatable that memoizes the link functions, and fetches link
	-- functions from [[Module:UserLinks/extra]] if necessary.

	-- Lazily initialise the extraLinkFunctions table. We only want to load
	-- [[Module:UserLinks/extra]] as necessary, so it has a low transclusion
	-- count.
	local extraLinkFunctions

	-- Define functions for shared code in the metatable.
	local function validateCode(code)
		-- Checks whether code is a valid link code - i.e. checks that it is a
		-- string and that it is not the blank string. Returns the code if
		-- the check passes, and nil if not.
		if type(code) == 'string' and code ~= '' then
			return code
		else
			return nil
		end
	end

	local function getExtraLinkFunctions()
		-- Loads the table of extra link functions from the /extra module.
		-- If there is a problem with loading it, return false. We use the
		-- distinction between false and nil to record whether we have already
		-- tried to load it.
		if extraLinkFunctions ~= nil then
			return extraLinkFunctions
		end
		if mExtra == nil then
			-- If loading the module fails, maybeLoadModule returns false.
			-- Here we use the distinction between false and nil to record
			-- whether we have already tried to load the /extra module.
			mExtra = maybeLoadModule('Module:UserLinks/extra')
		end
		if type(mExtra) == 'table'
			and type(mExtra.linkFunctions) == 'table'
		then
			extraLinkFunctions = mExtra.linkFunctions
		else
			extraLinkFunctions = false
		end
		return extraLinkFunctions
	end

	local function memoizeExtraLink(code, func)
		local success, link = pcall(func, snippets)
		if success and type(link) == 'string' then
			links[code] = link
			return link
		end
		return nil
	end

	-- Define the metatable.
	setmetatable(links, {
		__index = function (t, key)
			local code = validateCode(key)
			if not code then
				raiseError(
					message('error-malformedlinkcode'),
					message('error-malformedlinkcode-section')
				)
			end
			local linkFunction = linkFunctions[code]
			local link
			if linkFunction then
				link = linkFunction(snippets)
				links[code] = link
			else
				extraLinkFunctions = getExtraLinkFunctions()
				if extraLinkFunctions then
					local extraLinkFunction = extraLinkFunctions[code]
					if type(extraLinkFunction) == 'function' then
						link = memoizeExtraLink(code, extraLinkFunction)
					end
				end
			end
			if link then
				return link
			else
				raiseError(
					message('error-invalidlinkcode', code),
					message('error-invalidlinkcode-section')
				)
			end
		end,
		__pairs = function ()
			extraLinkFunctions = getExtraLinkFunctions()
			if extraLinkFunctions then
				for code, func in pairs(extraLinkFunctions) do
					if validateCode(code) and type(func) == 'function' then
						memoizeExtraLink(code, func)
					end
				end
			end
			-- Allow built-in functions to overwrite extra functions.
			for code, func in pairs(linkFunctions) do
				local link = func(snippets)
				links[code] = link
			end
			return function (t, key)
				return next(links, key)
			end
		end
	})
	return links
end

--------------------------------------------------------------------------------
-- User data snippets
--------------------------------------------------------------------------------

function p.getSnippets(args)
	--[=[
	-- This function gets user data snippets from the arguments, and from
	-- [[Module:InterwikiTable]]. The data is loaded as necessary and memoized
	-- in the snippets table for performance. 
	--
	-- Snippets default to the blank string, '', so they can be used in
	-- concatenation operations without coders having to worry about raising
	-- errors. Because of this, the local functions snippetExists and
	-- getSnippet have been written to aid people writing new snippets. These
	-- functions treat the blank string as false. It is not necessary to return
	-- the blank string from a snippet function, as nil and false values are
	-- automatically converted into the blank string by the metatable.
	--
	-- If you add a new snippet, please document it at
	-- [[Module:UserLinks#Adding new links]].
	--]=]
	local snippets, snippetFunctions = {}, {}
	setmetatable(snippets, {
		__index = function (t, key)
			local snippetFunction = snippetFunctions[key]
			if snippetFunction then
				snippets[key] = snippetFunction() or ''
				return snippets[key]
			else
				raiseError(
					message('error-nosnippet', key),
					message('error-nosnippet-section')
				)
			end
		end
	})

	-- Define helper functions for writting the snippet functions.
	local function snippetExists(key)
		-- We have set the metatable up to make snippets default to '', so we
		-- don't have to test for false or nil.
		return snippets[key] ~= ''
	end

	local function getSnippet(key)
		local ret = snippets[key]
		if ret == '' then
			return nil
		else
			return ret
		end
	end

	-- Start snippet functions.

	function snippetFunctions.username()
		-- The username.
		local username = args.user or args.User
		return username or raiseError(
			message('error-nousername'),
			message('error-nousername-section')
		)
	end

	function snippetFunctions.usernameHtml()
		-- The username html-encoded. Spaces are encoded as pluses.
		return mw.uri.encode(snippets.username)
	end

	function snippetFunctions.project()
		-- The project name.
		-- Also does the work for snippetFunctions.interwikiTableKey, and adds
		-- the project value to snippets.lang if it is a valid language code.
		local project = args.Project or args.project
		if not project then
			return nil
		end
		local projectValidated, interwikiTableKey = p.validateProjectCode(project)
		if not projectValidated then
			if mw.language.isKnownLanguageTag(project) then
				if not snippetExists('lang') then
					snippets.lang = project
				end
			else
				raiseError(
					message('error-invalidproject', project),
					message('error-invalidproject-section')
				)
			end
		end
		snippets.interwikiTableKey = interwikiTableKey
		return project
	end

	function snippetFunctions.interwikiTableKey()
		-- The key for the project in Module:InterwikiTable.
		-- Relies on snippetFunctions.project to do the real work.
		local temp = snippets.project -- required; puts key in snippets table
		return rawget(snippets, 'interwikiTableKey')
	end

	function snippetFunctions.toolProject()
		-- The short project code for use with toolserver or labs. It is always
		-- present, even if the "project" argument is absent. The default value
		-- is the "snippet-project-default" message.
		local project = getSnippet('project')
		if not project then
			return message('snippet-project-default')
		else
			return project
		end
	end

	function snippetFunctions.projectLong()
		-- The long form of the project name, e.g. "wikipedia" or "wikibooks".
		local key = getSnippet('interwikiTableKey')
		if not key then
			return message('snippet-projectlong-default')
		end
		interwikiTable = interwikiTable or mw.loadData('Module:InterwikiTable')
		local prefixes = interwikiTable[key].iw_prefix
		-- Using prefixes[2] is a bit of a hack, but should find the long name
		-- most of the time.
		return prefixes[2] or prefixes[1] 
	end

	function snippetFunctions.lang()
		-- The language code.
		local lang = args.lang or args.Lang
		if not lang then
			return nil
		end
		if mw.language.isKnownLanguageTag(lang) then
			return lang
		else
			raiseError(
				message('error-invalidlanguage', lang),
				message('error-invalidlanguage-section')
			)
		end
	end

	function snippetFunctions.toolLang()
		-- The language code for use with toolserver or labs tools. It is always
		-- present, even if the "lang" argument is absent. The default value is
		-- the "snippet-lang-default" message. 
		return getSnippet('lang') or message('snippet-lang-default')
	end

	function snippetFunctions.interwiki()
		-- The interwiki prefix, consisting of the project and language values,
		-- separated by colons, e.g. ":wikt:es:".
		local project = getSnippet('project')
		local lang = getSnippet('lang')
		if not project and not lang then
			return nil
		end
		local ret = {}
		ret[#ret + 1] = project
		ret[#ret + 1] = lang
		return table.concat(ret, ':')
	end

	function snippetFunctions.fullDomain()
		-- The full domain name of the site, e.g. www.mediawiki.org,
		-- en.wikpedia.org, or ja.wikibooks.org.
		local fullDomain
		local lang = getSnippet('toolLang')
		local key = getSnippet('interwikiTableKey')
		if key then
			interwikiTable = interwikiTable or mw.loadData('Module:InterwikiTable')
			local domain = interwikiTable[key].domain
			local takesLangPrefix = interwikiTable[key].takes_lang_prefix
			if takesLangPrefix then
				fullDomain = lang .. '.' .. domain
			else
				fullDomain = domain
			end
		else
			fullDomain = lang .. '.wikipedia.org'
		end
		return fullDomain
	end

	-- End snippet functions. If you add a new snippet function, please
	-- document it at [[Module:UserLinks#Adding new links]].

	return snippets
end 

function p.validateProjectCode(s)
	-- Validates a project code, by seeing whether it is present in
	-- [[Module:InterwikiTable]]. If it is present, returns the code and the
	-- InterwikiTable key for the corresponding site. If not present,
	-- returns nil for both.
	interwikiTable = interwikiTable or mw.loadData('Module:InterwikiTable')
	for key, t in pairs(interwikiTable) do
		for i, prefix in ipairs(t.iw_prefix) do
			if s == prefix then
				return s, key
			end
		end
	end
	return nil, nil
end

--------------------------------------------------------------------------------
-- Main functions
--------------------------------------------------------------------------------

local function makeInvokeFunction(funcName)
	-- Makes a function that can be accessed from #invoke. This is only required
	-- for functions that need to access arguments.
	return function (frame)
		mArguments = require('Module:Arguments')
		local args = mArguments.getArgs(frame)
		return p[funcName](args)
	end
end

p.main = makeInvokeFunction('_main')

function p._main(args)
	-- The main function. This is the one called from [[Template:User-multi]],
	-- via p.main.
	local options = p.getOptions(args)
	local snippets = p.getSnippets(args)
	local codes = p.getCodes(args)
	local links = p.getLinks(snippets)
	-- Overload the built-in Lua error function to generate wikitext errors
	-- meant for end users to see. This makes things harder to debug when
	-- real errors occur, but it is the only realistic way to show wikitext
	-- errors and and still have sane code when using metatables, etc.
	local success, result = pcall(p.export, codes, links, options)
	if success then
		return result
	else
		return makeWikitextError(result, options.isDemo)
	end
end

function p.getOptions(args)
	-- Gets the options from the args table, so that we don't have to pass
	-- around the whole args table all the time.
	local options = {}
	options.isDemo = yesno(args.demo) or false
	options.toolbarStyle = yesno(args.small) and 'font-size: 90%;' or nil
	options.sup = yesno(args.sup, true)
	options.separator = args.separator
	options.span = args.span
	return options
end

function p.getCodes(args)
	-- Gets the link codes from the arguments. The codes aren't validated
	-- at this point.
	mTableTools = maybeLoadModule('Module:TableTools')
	local codes
	if mTableTools then
		codes = mTableTools.compressSparseArray(args)
	else
		codes = {}
		for i, code in ipairs(args) do
			codes[i] = code
		end
	end
	return codes
end

function p.export(codes, links, options)
	-- Make the user link.
	local userLink = links.u

	-- If we weren't passed any link codes, just return the user link.
	if #codes &lt; 1 then
		return userLink
	end

	-- Make the toolbar.
	mToolbar = require('Module:Toolbar')
	local toolbarArgs = {}
	for i, code in ipairs(codes) do
		local link = links[code]
		toolbarArgs[#toolbarArgs + 1] = link
	end
	toolbarArgs.style = options.toolbarStyle
	toolbarArgs.separator = options.separator or 'dot'
	toolbarArgs.span = options.span
	local toolbar = mToolbar.main(toolbarArgs)

	-- Apply the sup option.
	if options.sup then
		toolbar = '&lt;sup&gt;' .. toolbar .. '&lt;/sup&gt;'
	end
	
	-- If we are transcluding, add a non-breaking space, but if we are substing
	-- just use a normal space
	local space = mw.isSubsting() and ' ' or '&amp;nbsp;'
	
	return userLink .. space .. toolbar
end

--------------------------------------------------------------------------------
-- Single link function
--------------------------------------------------------------------------------

p.single = makeInvokeFunction('_single')

function p._single(args)
	-- Fetches a single link from the link table.
	local options = p.getOptions(args)
	local snippets = p.getSnippets(args)
	local links = p.getLinks(snippets)
	local code = args[1]
	local success, link = pcall(p.exportSingle, links, code)
	if success then
		return link
	else
		return makeWikitextError(link, options.isDemo)
	end
end

function p.exportSingle(links, code)
	-- If any errors occur, they will probably occur here. This function
	-- exists purely so that all the errors that will occur in p._single can
	-- be handled using a single pcall.
	if not code then
		raiseError(
			message('error-nolinkcode'),
			message('error-nolinkcode-section')
		)
	end
	return links[code]
end

--------------------------------------------------------------------------------
-- Link table
--------------------------------------------------------------------------------

function p.linktable()
	-- Returns a wikitext table of link codes, with an example link for each
	-- one. This function doesn't take any arguments, so it can be accessed
	-- directly from wiki pages without using makeInvokeFunction.
	local args = {user = 'Example'}
	local snippets = p.getSnippets(args)
	local links = p.getLinks(snippets)

	-- Assemble the codes and links in order
	local firstCodes = {'u', 't', 'c'}
	local firstLinks, firstCodesKeys = {}, {}
	for i, code in ipairs(firstCodes) do
		firstCodesKeys[code] = true
		firstLinks[#firstLinks + 1] = {code, links[code]}
	end
	local secondLinks = {}
	for code, link in pairs(links) do
		if not firstCodesKeys[code] then
			secondLinks[#secondLinks + 1] = {code, link}
		end
	end
	table.sort(secondLinks, function(t1, t2)
		return t1[1] &lt; t2[1]
	end)
	local links = {}
	for i, t in ipairs(firstLinks) do
		links[#links + 1] = t
	end
	for i, t in ipairs(secondLinks) do
		links[#links + 1] = t
	end

	-- Output the code table in table format
	local ret = {}
	ret[#ret + 1] = '{| class="wikitable plainlinks sortable"'
	ret[#ret + 1] = '|-'
	ret[#ret + 1] = '! ' .. message('linktable-codeheader')
	ret[#ret + 1] = '! ' .. message('linktable-previewheader')
	for i, t in ipairs(links) do
		local code = t[1]
		local link = t[2]
		ret[#ret + 1] = '|-'
		ret[#ret + 1] = "| '''" .. code .. "'''" 
		ret[#ret + 1] = '| ' .. link
	end
	ret[#ret + 1] = '|}'
	return table.concat(ret, '\n')
end 

return p</text>
      <sha1>c0rff2decsfzkfabydzwwxv1mbvbazo</sha1>
    </revision>
  </page>
  <page>
    <title>Module:UserLinks/config</title>
    <ns>828</ns>
    <id>42391112</id>
    <revision>
      <id>823345394</id>
      <parentid>778638674</parentid>
      <timestamp>2018-01-31T18:21:33Z</timestamp>
      <contributor>
        <username>MusikAnimal</username>
        <id>14882394</id>
      </contributor>
      <comment>add message for (non-)automated edits tool</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="9189">--------------------------------------------------------------------------------
--                            UserLinks configuration                         --
-- This module provides configuration and localisation messages for           --
-- [[Module:UserLinks]]. See the comments in the code below for explanations  --
-- of what each message does.                                                 --
--------------------------------------------------------------------------------

local cfg = {} -- Don't edit this line.

--------------------------------------------------------------------------------
--                                Display values                              --
-- These messages are the display values for the user links. These are the    --
-- most visible messages in the module. They should be short, but             --
-- descriptive. Spaces are automatically escaped with &amp;nbsp;, so there is no  --
-- need to add any &amp;nsbp; values here.                                        --
--------------------------------------------------------------------------------

-- The user talk page.
cfg['display-talk'] = 'talk'

-- The user's contributions.
cfg['display-contributions'] = 'contribs'

-- The user's edit count, using the edit count tool on WMF Labs.
cfg['display-count'] = 'count'

-- Log of the user's page moves.
cfg['display-moves'] = 'page moves'

-- All the user's logged actions.
cfg['display-logs'] = 'logs'

-- Analysis of the user's (non-)automated contributions.
cfg['display-autoedits'] = 'non-automated edits'

-- The user's block log.
cfg['display-blocklog'] = 'block log'

-- Blocks that the user has performed.
cfg['display-blocks'] = 'blocks'

-- Link to the interface where the user can be blocked.
cfg['display-blockuser'] = 'block user'

-- CentralAuth, the global account manager for the user.
cfg['display-centralauth'] = 'central auth'

-- The user's deleted contributions.
cfg['display-deletedcontributions'] = 'deleted contribs'

-- Likn to email the user.
cfg['display-email'] = 'email'

-- Analysis of the user's edit summaries, using the tool on WMF Labs.
cfg['display-editsummaries'] = 'edit summaries'

-- Deletions that the user has performed.
cfg['display-deletions'] = 'deletions'

-- The user's entry on [[Special:ListUsers]].
cfg['display-listuser'] = 'list user'

-- A display of the user's global contributions, using the sulutil: interwiki
-- prefix.
cfg['display-sul'] = 'global contribs'

-- All logs of actions performed on the user or their user page.
cfg['display-targetlogs'] = 'target logs'

-- Log of times the user has triggered the AbuseFilter (also known as the
-- edit filter).
cfg['display-abuselog'] = 'filter log'

-- Page protections that the user has performed.
cfg['display-protections'] = 'protections'

-- Log of rights changes that the user has performed.
cfg['display-rights'] = 'rights'

-- Log of username changes that the user has performed.
cfg['display-renames'] = 'renames'

-- Link to a list of the user's requests for adminship.
cfg['display-rfa'] = 'RfA'

-- Data about the user from the MediaWiki Web API.
cfg['display-api'] = 'api'

-- List of the user's local file uploads.
cfg['display-uploads'] = 'uploads'

--------------------------------------------------------------------------------
--                                  Page names                                --
-- Page names used in formatting some of the user links.                      --
--------------------------------------------------------------------------------

-- The base page for a request for adminship link. This assumes that the link
-- is of the format [[Base page/username]]. If your wiki uses a different
-- format, consider adding a new link at [[Module:UserLinks/extra]], or you can
-- leave a message at [[w:en:Template talk:User-multi]] to ask the module
-- developers how best to deal with it.
cfg['page-rfa'] = 'Wikipedia:Requests for adminship'

--------------------------------------------------------------------------------
--                                Error messages                              --
-- The following are error messages that may occur when the module is run.    --
-- These are the more common error messages that are localisable; other,      --
-- rarer error messages may be raised from other modules or directly from     --
-- Lua. The messages ending with "section" are the section names on a help    --
-- page that give advice to users who encounter the error. The help page is   --
-- defined in the 'error-config-message-help' message.                        --
--------------------------------------------------------------------------------

-- The module didn't detect a username from the "user" or "User" parameters.
-- This could be because no username was specified, or because the user used a
-- positional parameter and their username contains an equals sign,
-- e.g. {{user|John=Smith}}, rather than {{user|1=John=Smith}}.
cfg['error-nousername'] = 'no username detected'
cfg['error-nousername-section'] = 'No username detected'

-- The input to the "project" or "Project" arguments wasn't a valid interwiki
-- prefix or a valid language code. $1 is the code that was input to the module.
cfg['error-invalidproject'] = '"$1" is not a valid project or language code'
cfg['error-invalidproject-section'] = 'Not a valid project or language code'

-- The input to the "lang" or "Lang" arguments wasn't a valid interwiki
-- prefix or a valid language code. $1 is the code that was input to the module.
cfg['error-invalidlanguage'] = '"$1" is not a valid language code'
cfg['error-invalidlanguage-section'] = 'Not a valid language code'

-- The user didn't specify any link codes. This is only an error when using the
-- "single" function to return a single link; the "main" function includes a
-- user page link by default.
cfg['error-nolinkcode'] = 'no link code specified'
cfg['error-nolinkcode-section'] = 'No link code specified'

-- The link code passed to the module was malformed. This means it was either
-- not a string value or it was the blank string.
cfg['error-malformedlinkcode'] = 'malformed link code detected'
cfg['error-malformedlinkcode-section'] = 'Malformed link code detected'

-- No link function exists for the code specified, so the module cannot make
-- the link. $1 is the code that was passed to the module.
cfg['error-invalidlinkcode'] = '"$1" is not a valid link code'
cfg['error-invalidlinkcode-section'] = 'Not a valid link code'

-- The snippets table was accessed, but there was no value for the key it was
-- accessed with. This is not usually visible by end users; it is probably a
-- mistake in one of the link functions in [[Module:UserLinks/extra]]. $1 is the
-- key that was passed to the module.
cfg['error-nosnippet'] = 'no snippet exists for the key "$1"'
cfg['error-nosnippet-section'] = 'No snippet exists'

--------------------------------------------------------------------------------
--                             Error configuration                            --
-- Configuration for the display of the error messages.                       --
--------------------------------------------------------------------------------

-- The error message used when a section link is available. $1 is the error
-- message, and $2 is the name of the section.
cfg['error-config-message-help'] = '[[Template:User-multi|User-multi]] error:'
	.. ' $1 ([[Template:User-multi#$2|help]]).'

-- The error message used when ano section link is available. $1 is the error
-- message.
cfg['error-config-message-nohelp'] = '[[Template:User-multi|User-multi]] error:'
	.. ' $1.'

-- The name of the error category. Pages are put in this category if any errors
-- are encountered.
cfg['error-config-category'] = 'UserLinks transclusions with errors'

--------------------------------------------------------------------------------
--                               Snippet defaults                             --
-- Some of the snippets require default values when the user doesn't specify  --
-- "project" or "lang" arguments. Those default values are stored here.       --
--------------------------------------------------------------------------------

-- The short project interwiki prefix.
cfg['snippet-project-default'] = 'w'

-- The long project interwiki prefix.
cfg['snippet-projectlong-default'] = 'wikipedia'

-- The MediaWiki language code for the wiki.
cfg['snippet-lang-default'] = 'en'

--------------------------------------------------------------------------------
--                              Link table headers                            --
-- The headers used in the table of links used on documentation pages.        -- 
--------------------------------------------------------------------------------

-- The link code.
cfg['linktable-codeheader'] = 'Code'

-- The link preview.
cfg['linktable-previewheader'] = 'Preview'

--------------------------------------------------------------------------------
--                              End configuration                             --
--------------------------------------------------------------------------------

return cfg -- Don't edit this line.</text>
      <sha1>mz06jv68fzhjn0ch07dkre9m9xt385t</sha1>
    </revision>
  </page>
  <page>
    <title>Module:UserLinks/shared</title>
    <ns>828</ns>
    <id>42367181</id>
    <revision>
      <id>757412612</id>
      <parentid>602837846</parentid>
      <timestamp>2016-12-30T15:21:53Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>set up a local blacklist system so that we don't categorise sandboxes or test case pages</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="6049">-- This module stores functions that are shared between [[Module:UserLinks]]
-- and [[Module:UserLinks/extra]].

-- Load data and define often-used variables
local cfg = mw.loadData('Module:UserLinks/config')
local namespaces = mw.site.namespaces

-- Lazily initialise modules that we may or may not need
local mCategoryHandler

-- Define namespaces for which links need to be escaped with the colon trick.
-- See [[w:en:Help:Colon trick]].
local colonNamespaces = {
	[6] = true, -- File
	[14] = true, -- Category
}

local p = {}

function p.maybeLoadModule(s)
	-- Attempts to load the module s. If it succeeds, returns the module;
	-- otherwise, returns false.
	local success, mdl = pcall(require, s)
	if success then
		return mdl
	else
		return false
	end
end

function p.raiseError(message, section, level)
	-- Raises an error using the Lua error function. The error message is
	-- designed to be caught with pcall and then passed to p.makeWikitextError.
	-- The section, if specified, is the section name on a help page that gives
	-- help to users about that particular error.
	if section then
		message = message .. '|' .. section
	end
	if not level or level == 0 then
		level = 0
	else
		level = level + 1
	end
	error(message, level)
end

local localBlacklist = {
	'/[sS]andbox$', -- Don't categorise sandboxes
	'/[tT]est ?cases$', -- Don't categorise test case pages
}

local function currentTitleMatchesLocalBlacklist()
	-- Return true if the current title matches any of the patterns in the
	-- local blacklist table. Otherwise return false.
	local title = mw.title.getCurrentTitle().prefixedText
	for i, pattern in ipairs(localBlacklist) do
		if title:find(pattern) then
			return true
		end
	end
	return false
end

function p.makeWikitextError(encodedMessage, demo)
	local errorMessage, section = mw.ustring.match(encodedMessage, '^(.-)|(.*)$')
	errorMessage = errorMessage or encodedMessage
	
	-- If not a demo, get the error category link and pass it through
	-- [[Module:Category handler]]'s blacklist.
	local category
	if not demo then
		category = string.format(
			'[[%s:%s]]',
			namespaces[14].name,
			p.message('error-config-category')
		)
		mCategoryHandler = p.maybeLoadModule('Module:Category handler')
		if mCategoryHandler then
			-- Categorise all namespaces, but not blacklisted pages.
			category = mCategoryHandler.main{all = category}
		end
		if category and currentTitleMatchesLocalBlacklist() then
			category = nil
		end
	end
	category = category or ''
	
	-- Format the error message and the section link.
	local formattedError
	if section then
		formattedError = p.message(
			'error-config-message-help',
			errorMessage,
			section
		)
	else
		formattedError = p.message(
			'error-config-message-nohelp',
			errorMessage
		)
	end

	-- Return the error message and the category inside html error tags.
	return string.format(
		'&lt;strong class="error"&gt;%s&lt;/strong&gt;%s',
		formattedError,
		category
	)
end

local function formatPage(interwiki, namespace, page)
	-- Formats an interwiki, a namespace and a page into a wikilink-ready
	-- string. The interwiki and namespace are optional. If a namespace is
	-- specified, it should be a valid key to mw.site.namespaces. The page
	-- parameter is required.
	local ret = {}
	interwiki = interwiki or ''
	if interwiki ~= '' or colonNamespaces[namespace] then
		ret[#ret + 1] = ':'
	end
	ret[#ret + 1] = interwiki
	if interwiki ~= '' then
		ret[#ret + 1] = ':'
	end
	if namespace then
		local nsTable = namespaces[namespace]
		if not nsTable then
			error('"' .. tostring(namespace) .. '" is not a valid namespace key', 2)
		end
		ret[#ret + 1] = nsTable.name
		if namespace ~= 0 then
			ret[#ret + 1] = ':'
		end
	end
	ret[#ret + 1] = page
	return table.concat(ret)
end

local function formatDisplay(s)
	-- Replaces spaces in a string with "&amp;nbsp;" to make sure they don't wrap.
	-- Don't replace anything if we are substing, as we generally don't want
	-- to use "&amp;nbsp;" in that case.
	if mw.isSubsting() then
		return s
	else
		return s:gsub(' ', '&amp;nbsp;')
	end
end

function p.makeWikilink(interwiki, namespace, page, display)
	-- Creates a wikilink. The interwiki, namespace and display parameters are
	-- optional. If a namespace parameter is specified it must be a valid key
	-- to mw.site.namespaces.
	local formattedPage = formatPage(interwiki, namespace, page)
	if display then
		display = formatDisplay(display)
		return string.format('[[%s|%s]]', formattedPage, display)
	else
		return string.format('[[%s]]', formattedPage)
	end
end

local function formatUrlLink(url, display)
	-- Formats a URL link with an optional display parameter.
	if display then
		display = formatDisplay(display)
		return string.format('[%s %s]', url, display)
	else
		return string.format('[%s]', url)
	end
end

function p.makeUrlLink(s, display)
	-- Makes a URL link with an optional display parameter. The first input
	-- may be any valid input to mw.uri.new.
	local url = mw.uri.new(s)
	url = tostring(url)
	return formatUrlLink(url, display)
end

function p.makeFullUrlLink(interwiki, namespace, page, query, display)
	-- Makes a link to the full URL of a page. The interwiki, namespace, query
	-- and display parameters are optional. If a namespace parameter is
	-- specified it must be a valid key to mw.site.namespaces. The query
	-- parameter can be a string or a table as specified in the mw.uri library.
	local formattedPage = formatPage(interwiki, namespace, page)
	local url = mw.uri.fullUrl(formattedPage, query)
	url = tostring(url)
	return formatUrlLink(url, display)
end

function p.message(key, ...)
	-- Returns the message with the given key from [[Module:UserLinks/config]].
	-- Extra parameters are substituted in the message for keys $1, $2, $3, etc.
	local msg = cfg[key]
	if not msg then
		p.raiseError(
			'No message found with key "' .. tostring(key) .. '"',
			'No message found',
			2
		)
	end
	local noArgs = select('#', ...)
	if noArgs &lt; 1 then
		return msg
	else
		local msg = mw.message.newRawMessage(msg, ...)
		return msg:plain()
	end
end

return p</text>
      <sha1>p8dn9pg27a69jmef1uchzuh09gbaidm</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Webarchive</title>
    <ns>828</ns>
    <id>51937454</id>
    <revision>
      <id>879514430</id>
      <parentid>863835221</parentid>
      <timestamp>2019-01-21T18:59:39Z</timestamp>
      <contributor>
        <username>GreenC</username>
        <id>8931761</id>
      </contributor>
      <comment>deprecate default trailing period for Wayback URLs</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="37938">--[[ ----------------------------------

Lua module implementing the {{webarchive}} template. 

A merger of the functionality of three templates: {{wayback}}, {{webcite}} and {{cite archives}}
	
]]


--[[--------------------------&lt; D E P E N D E N C I E S &gt;------------------------------------------------------
]]

require('Module:No globals');
local getArgs = require ('Module:Arguments').getArgs;


--[[--------------------------&lt; F O R W A R D   D E C L A R A T I O N S &gt;--------------------------------------
]]

local categories = {};															-- category names
local config = {};																-- global configuration settings
local digits = {};																-- for i18n; table that translates local-wiki digits to western digits
local err_warn_msgs = {};														-- error and warning messages
local excepted_pages = {};
local month_num = {};															-- for i18n; table that translates local-wiki month names to western digits
local prefixes = {};															-- service provider tail string prefixes
local services = {};															-- archive service provider data from
local s_text = {};																-- table of static text strings used to build final rendering
local uncategorized_namespaces = {};											-- list of namespaces that we should not categorize
local uncategorized_subpages = {};												-- list of subpages that should not be categorized


--[[--------------------------&lt; P A G E   S C O P E   I D E N T I F I E R S &gt;----------------------------------
]]

local non_western_digits;														-- boolean flag set true when data.digits.enable is true
local this_page = mw.title.getCurrentTitle();

local track = {};																-- Associative array to hold tracking categories
local ulx = {};																	-- Associative array to hold template data 


--[[--------------------------&lt; S U B S T I T U T E &gt;----------------------------------------------------------

Populates numbered arguments in a message string using an argument table.

]]

local function substitute (msg, args)
	return args and mw.message.newRawMessage (msg, args):plain() or msg;
end


--[[--------------------------&lt; tableLength &gt;-----------------------

Given a 1-D table, return number of elements

]]

local function tableLength(T)
	local count = 0
	for _ in pairs(T) do count = count + 1 end
	return count
end


--[=[-------------------------&lt; M A K E _ W I K I L I N K &gt;----------------------------------------------------

Makes a wikilink; when both link and display text is provided, returns a wikilink in the form [[L|D]]; if only
link is provided, returns a wikilink in the form [[L]]; if neither are provided or link is omitted, returns an
empty string.

]=]

local function make_wikilink (link, display, no_link)
	if nil == no_link then
		if link and ('' ~= link) then
			if display and ('' ~= display) then
				return table.concat ({'[[', link, '|', display, ']]'});
			else
				return table.concat ({'[[', link, ']]'});
			end
		end
		return display or '';													-- link not set so return the display text

	else																		-- no_link
		if display and ('' ~= display) then										-- if there is display text
			return display;														-- return that
		else
			return link or '';													-- return the target article name or empty string
		end
	end
end


--[[--------------------------&lt; createTracking &gt;-----------------------

Return data in track[] ie. tracking categories

]]

local function createTracking()
	if not excepted_pages[this_page.fullText] then								-- namespace:title/fragment is allowed to be categorized (typically this module's / template's testcases page(s))
		if uncategorized_namespaces[this_page.nsText] then
			return '';															-- this page not to be categorized so return empty string
		end
		for _,v in ipairs (uncategorized_subpages) do							-- cycle through page name patterns
			if this_page.text:match (v) then									-- test page name against each pattern
				return '';														-- this subpage type not to be categorized so return empty string
			end
		end
	end

	local out = {};
	if tableLength(track) &gt; 0 then
		for key, _ in pairs(track) do											-- loop through table
			table.insert (out, make_wikilink (key));							-- and convert category names to links
		end
	end
	return table.concat (out);													-- concat into one big string; empty string if table is empty

end


--[[--------------------------&lt; inlineError &gt;-----------------------

Critical error. Render output completely in red. Add to tracking category.

This function called as the last thing before abandoning this module

]]

local function inlineError (msg, args)
	track[categories.error] = 1
	return table.concat ({
		'&lt;span style="font-size:100%" class="error citation-comment"&gt;Error in ',	-- open the error message span
		config.tname,															-- insert the local language template name
		' template: ',
		substitute (msg, args),													-- insert the formatted error message
		'.&lt;/span&gt;',																-- close the span
		createTracking()														-- add the category
		})
end


--[[--------------------------&lt; inlineRed &gt;-----------------------

Render a text fragment in red, such as a warning as part of the final output.
Add tracking category.

 ]]

local function inlineRed(msg, trackmsg)
	if trackmsg == "warning" then
		track[categories.warning] = 1;
	elseif trackmsg == "error" then
		track[categories.error] = 1;
	end

	return '&lt;span style="font-size:100%" class="error citation-comment"&gt;' .. msg .. '&lt;/span&gt;'
end


--[[--------------------------&lt; base62 &gt;-----------------------

Convert base-62 to base-10
Credit: https://de.wikipedia.org/wiki/Modul:Expr 

]]

local function base62( value )
	local r = 1																	-- default return value is input value is malformed

	if value:match ('%W') then													-- value must only be in the set [0-9a-zA-Z]
		return;																	-- nil return when value contains extraneous characters
	end

	local n = #value															-- number of characters in value
	local k = 1
	local c
	r = 0
	for i = n, 1, -1 do															-- loop through all characters in value from ls digit to ms digit
		c = value:byte( i, i )
		if c &gt;= 48 and c &lt;= 57 then												-- character is digit 0-9
			c = c - 48
		elseif c &gt;= 65 and c &lt;= 90 then											-- character is ascii a-z
			c = c - 55
		else																	-- must be ascii A-Z
			c = c - 61
		end
		r = r + c * k															-- accumulate this base62 character's value
		k = k * 62																-- bump for next
	end -- for i

	return r
end 


--[[--------------------------&lt; D E C O D E _ D A T E &gt;--------------------------------------------------------

Given a date string, return it in iso format along with an indicator of the date's format.  Except that month names
must be recognizable as legitimate month names with proper capitalization, and that the date string must match one
of the recognized date formats, no error checking is done here; return nil else

]]

local function decode_date (date_str)
	local patterns = {
		['dmy'] = {'^(%d%d?) +([^%s%d]+) +(%d%d%d%d)$', 'd', 'm', 'y'},			-- %a does not recognize unicode combining characters used by some languages
		['mdy'] = {'^([^%s%d]+) (%d%d?), +(%d%d%d%d)$', 'm', 'd', 'y'},
		['ymd'] = {'^(%d%d%d%d) +([^%s%d]+) (%d%d?)$', 'y', 'm', 'd'},			-- not mos compliant at en.wiki but may be acceptible at other wikis
		};
	
	local t = {};

	if non_western_digits then													-- this wiki uses non-western digits?
		date_str = mw.ustring.gsub (date_str, '%d', digits);					-- convert this wiki's non-western digits to western digits
	end

	if date_str:match ('^%d%d%d%d%-%d%d%-%d%d$') then							-- already an iso format date, return western digits form
		return date_str, 'iso';
	end
	
	for k, v in pairs (patterns) do
		local c1, c2, c3 = mw.ustring.match (date_str, patterns[k][1]);			-- c1 .. c3 are captured but we don't know what they hold
		
		if c1 then																-- set on match
			t = {																-- translate unspecified captures to y, m, and d
				[patterns[k][2]] = c1,											-- fill the table of captures with the captures
				[patterns[k][3]] = c2,											-- take index names from src_pattern table and assign sequential captures
				[patterns[k][4]] = c3,
				};
			if month_num[t.m] then												-- when month not already a number
				t.m = month_num[t.m];											-- replace valid month name with a number
			else
				return nil, 'iso';												-- not a valid date form because month not valid
			end

			return mw.ustring.format ('%.4d-%.2d-%.2d', t.y, t.m, t.d), k;		-- return date in iso format
		end
	end
	return nil, 'iso';															-- date could not be decoded; return nil and default iso date
end

	
--[[--------------------------&lt; makeDate &gt;-----------------------

Given year, month, day numbers, (zero-padded or not) return a full date in df format
where df may be one of:
	mdy, dmy, iso, ymd

on entry, year, month, day are presumed to be correct for the date that they represent; all are required

in this module, makeDate() is sometimes given an iso-format date in year:
	makeDate (2018-09-20, nil, nil, df)
this works because table.concat() sees only one table member

]]

local function makeDate (year, month, day, df)
	local format = {
		['dmy'] = 'j F Y',
		['mdy'] = 'F j, Y',
		['ymd'] = 'Y F j',
		['iso'] = 'Y-m-d',
		};

	local date = table.concat ({year, month, day}, '-');						-- assemble year-initial numeric-format date (zero padding not required here)

	if non_western_digits then													--this wiki uses non-western digits?
		date = mw.ustring.gsub (date, '%d', digits);							-- convert this wiki's non-western digits to western digits
	end

	return mw.getContentLanguage():formatDate (format[df], date);
end


--[[--------------------------&lt; I S _ V A L I D _ D A T E &gt;----------------------------------------------------

Returns true if date is after 31 December 1899 (why is 1900 the min year? shouldn't the internet's date-of-birth
be min year?), not after today's date, and represents a valid date (29 February 2017 is not a valid date).  Applies
Gregorian leapyear rules.

all arguments are required

]]

local function is_valid_date (year, month, day)
	local days_in_month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	local month_length;
	local y, m, d;
	local today = os.date ('*t');												-- fetch a table of current date parts

	if not year or '' == year or not month or '' == month or not day or '' == day then
		return false;															-- something missing
	end
	
	y = tonumber (year);
	m = tonumber (month);
	d = tonumber (day);

	if 1900 &gt; y or today.year &lt; y or 1 &gt; m or 12 &lt; m then						-- year and month are within bounds	TODO: 1900?
		return false;
	end

	if (2==m) then																-- if February
		month_length = 28;														-- then 28 days unless
		if (0==(y%4) and (0~=(y%100) or 0==(y%400))) then						-- is a leap year?
			month_length = 29;													-- if leap year then 29 days in February
		end
	else
		month_length=days_in_month[m];
	end

	if 1 &gt; d or month_length &lt; d then											-- day is within bounds
		return false;
	end
																					-- here when date parts represent a valid date
	return os.time({['year']=y, ['month']=m, ['day']=d, ['hour']=0}) &lt;= os.time();	-- date at midnight must be less than or equal to current date/time
end


--[[--------------------------&lt; decodeWebciteDate &gt;-----------------------

Given a URI-path to Webcite (eg. /67xHmVFWP) return the encoded date in df format

returns date string in df format - webcite date is a unix timestamp encoded as bae62
or the string 'query'

]]

local function decodeWebciteDate(path, df)

	local dt = {};
	local decode;

	dt = mw.text.split(path, "/")

	-- valid URL formats that are not base62

	-- http://www.webcitation.org/query?id=1138911916587475
	-- http://www.webcitation.org/query?url=http..&amp;date=2012-06-01+21:40:03
	-- http://www.webcitation.org/1138911916587475
	-- http://www.webcitation.org/cache/73e53dd1f16cf8c5da298418d2a6e452870cf50e
	-- http://www.webcitation.org/getfile.php?fileid=1c46e791d68e89e12d0c2532cc3cf629b8bc8c8e

	if dt[2]:find ('query', 1, true) or 
		dt[2]:find ('cache', 1, true) or
		dt[2]:find ('getfile', 1, true) or
		tonumber(dt[2]) then
			return 'query';
	end

	decode = base62(dt[2]);														-- base62 string -&gt; exponential number
	if not decode then
		return nil;																-- nil return when dt[2] contains characters not in %w
	end
	dt = os.date('*t', string.format("%d", decode):sub(1,10))					-- exponential number -&gt; text -&gt; first 10 characters (a unix timestamp) -&gt; a table of date parts

	decode = makeDate (dt.year, dt.month, dt.day, 'iso');						-- date comparisons are all done in iso format with western digits
	if non_western_digits then													--this wiki uses non-western digits?
		decode = mw.ustring.gsub (decode, '%d', digits);						-- convert this wiki's non-western digits to western digits
	end

	return decode;
end


--[[--------------------------&lt; decodeWaybackDate &gt;-----------------------

Given a URI-path to Wayback (eg. /web/20160901010101/http://example.com )
or Library of Congress Web Archives (/all/20160901010101/http://example.com)
return the formatted date eg. "September 1, 2016" in df format 
Handle non-digits in snapshot ID such as "re_" and "-" and "*"

returns two values:
	first value is one of these:
		valid date string in df format - wayback date is valid (including the text string 'index' when date is '/*/')
		empty string - wayback date is malformed (less than 8 digits, not a valid date)
		nil - wayback date is '/save/' or otherwise not a number
	
	second return value is an appropriate 'message' may or may not be formatted

]]

local function decodeWaybackDate(path, df)

	local msg, snapdate;

	snapdate = path:gsub ('^/all/', ''):gsub ('^/web/', ''):gsub ('^/', '');	-- remove leading '/all/', leading '/web/' or leading '/'
	snapdate = snapdate:match ('^[^/]+');										-- get timestamp
	if snapdate == "*" then														-- eg. /web/*/http.. or /all/*/http..
		return 'index';															-- return indicator that this url has an index date
	end

	snapdate = snapdate:gsub ('%a%a_%d?$', ''):gsub ('%-', '');					-- from date, remove any trailing "re_", dashes

	msg = '';
	if snapdate:match ('%*$') then												-- a trailing '*' causes calendar display at archive .org
		snapdate = snapdate:gsub ('%*$', '');									-- remove so not part of length calc later
		msg = inlineRed (err_warn_msgs.ts_cal, 'warning');						-- make a message
	end

	if not tonumber(snapdate) then
		return nil, 'ts_nan';													-- return nil (fatal error flag) and message selector
	end

	local dlen = snapdate:len();
	if dlen &lt; 8 then															-- we need 8 digits TODO: but shouldn't this be testing for 14 digits?
		return '', inlineRed (err_warn_msgs.ts_short, 'error');					-- return empty string and error message
	end

	local year, month, day = snapdate:match ('(%d%d%d%d)(%d%d)(%d%d)');			-- no need for snapdatelong here

	if not is_valid_date (year, month, day) then
		return '', inlineRed (err_warn_msgs.ts_date, 'error');					-- return empty string and error message
	end

	snapdate = table.concat ({year, month, day}, '-');							-- date comparisons are all done in iso format
	if 14 == dlen then
		return snapdate, msg;													-- return date with message if any
	else
		return snapdate, msg .. inlineRed (err_warn_msgs.ts_len, 'warning');	-- return date with warning message(s)
	end
end


--[[--------------------------&lt; decodeArchiveisDate &gt;-----------------------

Given an Archive.is "long link" URI-path (e.g. /2016.08.28-144552/http://example.com)
return the date in df format (e.g. if df = dmy, return 28 August 2016)
Handles "." and "-" in snapshot date, so 2016.08.28-144552 is same as 20160828144552

returns two values:
	first value is one of these:
		valid date string in df format - archive.is date is valid (including the text string 'short link' when url is the short form)
		empty string - wayback date is malformed (not a number, less than 8 digits, not a valid date)
		nil - wayback date is '/save/'
	
	second return value is an appropriate 'message' may or may not be formatted

]]

local function decodeArchiveisDate(path, df)
	local snapdate

	if path:match ('^/%w+$') then												-- short form url path is '/' followed by some number of base 62 digits and nothing else
		return "short link"														-- e.g. http://archive.is/hD1qz
	end

	snapdate = mw.text.split (path, '/')[2]:gsub('[%.%-]', '');					-- get snapshot date, e.g. 2016.08.28-144552; remove periods and hyphens

	local dlen = string.len(snapdate)
	if dlen &lt; 8 then															-- we need 8 digits TODO: but shouldn't this be testing for 14 digits?
		return '', inlineRed (err_warn_msgs.ts_short, 'error');					-- return empty string and error message
	end

	local year, month, day = snapdate:match ('(%d%d%d%d)(%d%d)(%d%d)');			-- no need for snapdatelong here

	if not is_valid_date (year, month, day) then
		return '', inlineRed (err_warn_msgs.ts_date, 'error');					-- return empty string and error message
	end

	snapdate = table.concat ({year, month, day}, '-');							-- date comparisons are all done in iso format
	if 14 == dlen then
		return snapdate;														-- return date
	else
		return snapdate, inlineRed (err_warn_msgs.ts_len, 'warning');			-- return date with warning message
	end
 end


--[[--------------------------&lt; serviceName &gt;-----------------------

Given a domain extracted by mw.uri.new() (eg. web.archive.org) set tail string and service ID

]]

local function serviceName(host, no_link)
	local tracking;
	local index;
	
	host = host:lower():gsub ('^web%.(.+)', '%1'):gsub ('^www%.(.+)', '%1');	-- lowercase, remove web. and www. subdomains

	if services[host] then
		index = host;
	else
		for k, _ in pairs (services) do
			if host:find ('%f[%a]'..k:gsub ('([%.%-])', '%%%1')) then
				index = k;
				break;
			end
		end
	end
	
	if index then
		local out = {''};														-- empty string in [1] so that concatenated result has leading single space
		ulx.url1.service = services[index][4] or 'other';
		tracking = services[index][5] or categories.other;
																				-- build tail string
		if false == services[index][1] then										-- select prefix
			table.insert (out, prefixes.at);
		elseif true == services[index][1] then
			table.insert (out, prefixes.atthe);
		else
			table.insert (out, services[index][1]);
		end
		
		table.insert (out, make_wikilink (services[index][2], services[index][3], no_link));	-- add article wikilink
		if services[index][6] then												-- add tail postfix if it exists
			table.insert (out, services[index][6]);
		end
		
		ulx.url1.tail = table.concat (out, ' ');								-- put it all together; result has leading space character

	else																		-- here when unknown archive
		ulx.url1.service = 'other';
		tracking = categories.unknown;
		ulx.url1.tail = table.concat ({'', prefixes.at, host, inlineRed (err_warn_msgs.unknown_url, error)}, ' ');
	end
	
	track[tracking] = 1
end


--[[--------------------------&lt; parseExtraArgs &gt;-----------------------

Parse numbered arguments starting at 2, such as url2..url10, date2..date10, title2..title10
	For example: {{webarchive |url=.. |url4=.. |url7=..}}
		Three url arguments not in numeric sequence (1..4..7). 
			Function only processes arguments numbered 2 or greater (in this case 4 and 7)
				It creates numeric sequenced table entries like:
				urlx.url2.url = &lt;argument value for url4&gt;
				urlx.url3.url = &lt;argument value for url7&gt;
			Returns the number of URL arguments found numbered 2 or greater (in this case returns "2")

 ]]

local function parseExtraArgs(args)

	local i, j, argurl, argurl2, argdate, argtitle

	j = 2
	for i = 2, config.maxurls do
		argurl = "url" .. i
		if args[argurl] then
			argurl2 = "url" .. j
			ulx[argurl2] = {}
			ulx[argurl2]["url"] = args[argurl]
			argdate = "date" .. j
			if args[argdate] then
				ulx[argurl2]["date"] = args[argdate]
			else
				ulx[argurl2]["date"] = inlineRed (err_warn_msgs.date_miss, 'warning');
			end
	
			argtitle = "title" .. j
			if args[argtitle] then
				ulx[argurl2]["title"] = args[argtitle]
			else
				ulx[argurl2]["title"] = nil
			end
			j = j + 1
		end
	end

	if j == 2 then
		return 0
	else
		return j - 2
	end
end


--[[--------------------------&lt; comma &gt;-----------------------

Given a date string, return "," if it's MDY 

]]

local function comma(date)
	return (date and date:match ('%a+ +%d%d?(,) +%d%d%d%d')) or '';
end


--[[--------------------------&lt; createRendering &gt;-----------------------

Return a rendering of the data in ulx[][]

]]

local function createRendering()

	local displayfield
	local out = {};
	
	local index_date, msg = ulx.url1.date:match ('(index)(.*)');				-- when ulx.url1.date extract 'index' text and message text (if there is a message)
	ulx.url1.date = ulx.url1.date:gsub ('index.*', 'index');					-- remove message

	if 'none' == ulx.url1.format then											-- For {{wayback}}, {{webcite}}
		table.insert (out, '[');												-- open extlink markup
		table.insert (out, ulx.url1.url);										-- add url

		if ulx.url1.title then
			table.insert (out, ' ')												-- the required space
			table.insert (out, ulx.url1.title)									-- the title
			table.insert (out, ']');											-- close extlink markup
			table.insert (out, ulx.url1.tail);									-- tail text
			if ulx.url1.date then
				table.insert (out, '&amp;#32;(');									-- open date text; TODO: why the html entity? replace with regular space?
				table.insert (out, 'index' == ulx.url1.date and s_text.archive or s_text.archived);	-- add text
				table.insert (out, ' ');										-- insert a space
				table.insert (out, ulx.url1.date);								-- add date
				table.insert (out, ')');										-- close date text
			end
		else																	-- no title
			if index_date then													-- when url date is 'index' 
				table.insert (out, table.concat ({' ', s_text.Archive_index, ']'}));	-- add the index link label
				table.insert (out, msg or '');									-- add date mismatch message when url date is /*/ and |date= has valid date
			else
				table.insert (out, table.concat ({' ', s_text.Archived, '] '}));	-- add link label for url has timestamp date (will include mismatch message if there is one)
			end
			if ulx.url1.date then
				if 'index' ~= ulx.url1.date then
					table.insert (out, ulx.url1.date);							-- add date when data is not 'index'
				end
				table.insert (out, comma(ulx.url1.date));						-- add ',' if date format is mdy
				table.insert (out, ulx.url1.tail);								-- add tail text
			else																-- no date
				table.insert (out, ulx.url1.tail);								-- add tail text
			end
		end

		if 0 &lt; ulx.url1.extraurls then											-- For multiple archive URLs
			local tot = ulx.url1.extraurls + 1
			table.insert (out, '.')												-- terminate first url
			table.insert (out, table.concat ({' ', s_text.addlarchives, ': '}));	-- add header text

			for i=2, tot do														-- loop through the additionals
				local index = table.concat ({'url', i});						-- make an index
				displayfield = ulx[index]['title'] and 'title' or 'date';		-- choose display text
				table.insert (out, '[');										-- open extlink markup
				table.insert (out, ulx[index]['url']);							-- add the url
				table.insert (out, ' ');										-- the required space
				table.insert (out, ulx[index][displayfield]);					-- add the label
				table.insert (out, ']');										-- close extlink markup
				table.insert (out, i==tot and '.' or ', ');						-- add terminator
			end
		end
		return table.concat (out);												-- make a big string and done

	else																		-- For {{cite archives}}																	
		if 'addlarchives' == ulx.url1.format then								-- Multiple archive services 
			table.insert (out, table.concat ({s_text.addlarchives, ': '}));		-- add header text
		else																	-- Multiple pages from the same archive 
			table.insert (out, table.concat ({s_text.addlpages, ' '}));			-- add header text
			table.insert (out, ulx.url1.date);									-- add date to header text
			table.insert (out, ': ');											-- close header text
		end

		local tot = ulx.url1.extraurls + 1;
		for i=1, tot do															-- loop through the additionals
			local index = table.concat ({'url', i});							-- make an index
			table.insert (out, '[');											-- open extlink markup
			table.insert (out, ulx[index]['url']);								-- add url
			table.insert (out, ' ');											-- add required space

			displayfield = ulx[index]['title'];
			if 'addlarchives' == ulx.url1.format then
				if not displayfield then 
					displayfield = ulx[index]['date']
				end
			else																-- must be addlpages
				if not displayfield then 
					displayfield = table.concat ({s_text.Page, ' ', i});
				end
			end
			table.insert (out, displayfield);									-- add title, date, page label text
			table.insert (out, ']');											-- close extlink markup
			table.insert (out, (i==tot and '.' or ', '));							-- add terminator
		end
		return table.concat (out);												-- make a big string and done
	end
end


--[[--------------------------&lt; P A R A M E T E R _ N A M E _ X L A T E &gt;--------------------------------------

for internaltionalization, translate local-language parameter names to their English equivalents

TODO: return error message if multiple aliases of the same canonical parameter name are found?

returns two tables:
	new_args - holds canonical form parameters and their values either from translation or because the parameter was already in canonical form
	origin - maps canonical-form parameter names to their untranslated (local language) form for error messaging in the local language

unrecognized parameters are ignored

]]

local function parameter_name_xlate (args, params, enum_params)
	local name;																	-- holds modifiable name of the parameter name during evaluation
	local enum;																	-- for enumerated parameters, holds the enumerator during evaluation
	local found = false;														-- flag used to break out of nested for loops
	local new_args = {};														-- a table that holds canonical and translated parameter k/v pairs
	local origin = {};															-- a table that maps original (local language) parameter names to their canonical name for local language error messaging
	local unnamed_params;														-- set true when unsupported positional parameters are detected
	
	for k, v in pairs (args) do													-- loop through all of the arguments in the args table
		name = k;																-- copy of original parameter name

		if 'string' == type (k) then
			if non_western_digits then											-- true when non-western digits supported at this wiki
				name = mw.ustring.gsub (name, '%d', digits);					-- convert this wiki's non-western digits to western digits
			end
			
			enum = name:match ('%d+$');											-- get parameter enumerator if it exists; nil else
			
			if not enum then													-- no enumerator so looking for non-enumnerated parameters
				-- TODO: insert shortcut here? if params[name] then name holds the canonical parameter name; no need to search further
				for pname, aliases in pairs (params) do							-- loop through each parameter the params table
					for _, alias in ipairs (aliases) do							-- loop through each alias in the parameter's aliases table
						if name == alias then
							new_args[pname] = v;								-- create a new entry in the new_args table
							origin [pname] = k;									-- create an entry to make canonical parameter name to original local language parameter name
							found = true;										-- flag so that we can break out of these nested for loops
							break;												-- no need to search the rest of the aliases table for name so go on to the next k, v pair
						end
					end
	
					if found then												-- true when we found an alias that matched name
						found = false;											-- reset the flag
						break;													-- go do next args k/v pair
					end
				end
			else																-- enumerated parameters
				name = name:gsub ('%d$', '#');									-- replace enumeration digits with place holder for table search
				-- TODO: insert shortcut here? if num_params[name] then name holds the canonical parameter name; no need to search further
				for pname, aliases in pairs (enum_params) do					-- loop through each parameter the num_params table
					for _, alias in ipairs (aliases) do							-- loop through each alias in the parameter's aliases table
						if name == alias then
							pname = pname:gsub ('#$', enum);					-- replace the '#' place holder with the actual enumerator
							new_args[pname] = v;								-- create a new entry in the new_args table
							origin [pname] = k;									-- create an entry to make canonical parameter name to original local language parameter name
							found = true;										-- flag so that we can break out of these nested for loops
							break;												-- no need to search the rest of the aliases table for name so go on to the next k, v pair
						end
					end
	
					if found then												-- true when we found an alias that matched name
						found = false;											-- reset the flag
						break;													-- go do next args k/v pair
					end
				end
			end
		else
			unnamed_params = true;												-- flag for unsupported positional parameters
		end
	end																			-- for k, v
	return new_args, origin, unnamed_params;
end


--[[--------------------------&lt; W E B A R C H I V E &gt;----------------------------------------------------------

template entry point

]]

local function webarchive(frame)
	local args = getArgs (frame);

	local data = mw.loadData (table.concat ({									-- make a data module name; sandbox or live
		'Module:Webarchive/data',
		frame:getTitle():find('sandbox', 1, true) and '/sandbox' or ''			-- this instance is ./sandbox then append /sandbox
		}));
	categories = data.categories;												-- fill in the forward declarations
	config = data.config;
	if data.digits.enable then
		digits = data.digits;													-- for i18n; table of digits in the local wiki's language
		non_western_digits = true;												-- use_non_western_digits
	end
	err_warn_msgs = data.err_warn_msgs;
	excepted_pages = data.excepted_pages;
	month_num = data.month_num;													-- for i18n; table of month names in the local wiki's language
	prefixes = data.prefixes;
	services = data.services;
	s_text = data.s_text;
	uncategorized_namespaces = data.uncategorized_namespaces;
	uncategorized_subpages = data.uncategorized_subpages;

	local origin = {};															-- holds a map of English to local language parameter names used in the current template; not currently used
	local unnamed_params;														-- boolean set to true when template call has unnamed parameters
	args, origin, unnamed_params = parameter_name_xlate (args, data.params, data.enum_params);	-- translate parameter names in args to English

	local date, format, msg, udate, uri, url;
	local ldf = 'iso';															-- when there is no |date= parameter, render url dates in iso format
	
	if args.url and args.url1 then												-- URL argument (first)
		return inlineError (data.crit_err_msgs.conflicting, {origin.url, origin.url1});
	end
	
	url = args.url or args.url1;
	
	if not url then
		return inlineError (data.crit_err_msgs.empty);
	end
																				-- these iabot bugs perportedly fixed; removing these causes lua script error
--[[																				-- at Template:Webarchive/testcases/Production; resolve that before deleting these tests
	if mw.ustring.find( url, "https://web.http", 1, true ) then					-- track bug - TODO: IAbot bug; not known if the bug has been fixed; deferred
		track[categories.error] = 1;
		return inlineError (data.crit_err_msgs.iabot1);
	end 
	if url == "https://web.archive.org/http:/" then								 -- track bug - TODO: IAbot bug; not known if the bug has been fixed; deferred
		track[categories.error] = 1;
		return inlineError (data.crit_err_msgs.iabot2);
	end
]]

	if not (url:lower():find ('^http') or url:find ('^//')) then
		return inlineError (data.crit_err_msgs.invalid_url );
	end

	ulx.url1 = {}
	ulx.url1.url = url

	ulx.url1.extraurls = parseExtraArgs(args)

	local good = false;
	good, uri = pcall (mw.uri.new, ulx.url1.url);								-- get a table of uri parts from this url; protected mode to prevent lua error when ulx.url1.url is malformed
	
	if not good or nil == uri.host then											-- abandon when ulx.url1.url is malformed
		return inlineError (data.crit_err_msgs.invalid_url);
	end
	
	serviceName(uri.host, args.nolink)

	if args.date and args.date1 then											-- Date argument
		return inlineError (data.crit_err_msgs.conflicting, {origin.date, origin.date1});
	end
	
	date = args.date or args.date1;
	date = date and date:gsub (' +', ' ');										-- replace multiple spaces with a single space

	if date and config.verifydates then
		if '*' == date then
			date = 'index';
			ldf = 'iso';														-- set to default format
		else
			date, ldf = decode_date (date);										-- get an iso format date from date and get date's original format
		end
	end

	if 'wayback' == ulx.url1.service or 'locwebarchives' == ulx.url1.service then
		if date then
			if config.verifydates then
				if ldf then
					udate, msg = decodeWaybackDate (uri.path);					-- get the url date in iso format and format of date in |date=; 'index' when wayback url date is *
					if not udate then											-- this is the only 'fatal' error return
						return inlineError (data.crit_err_msgs[msg]);
					end

					if udate ~= date then										-- date comparison using iso format dates
						date = udate;
						msg = table.concat ({
							inlineRed (err_warn_msgs.mismatch, 'warning'),		-- add warning message
							msg,												-- add message if there is one
						});
					end
				end
			end
		else																	-- no |date=
			udate, msg = decodeWaybackDate (uri.path);

			if not udate then													-- this is the only 'fatal' error return
				return inlineError (data.crit_err_msgs[msg]);
			end

			if '' == udate then 
				date = nil;														-- unset
			else
				date = udate;
			end
		end

	elseif 'webcite' == ulx.url1.service then
		if date then
			if config.verifydates then
				if ldf then
					udate = decodeWebciteDate (uri.path);						-- get the url date in iso format
					if 'query' ~= udate then									-- skip if query
						if udate ~= date then									-- date comparison using iso format dates
							date = udate;
							msg = table.concat ({
								inlineRed (err_warn_msgs.mismatch, 'warning'),
								});
						end
					end
				end
			end
		else
			date = decodeWebciteDate( uri.path, "iso" )
			if date == "query" then
				date = nil;														-- unset
				msg = inlineRed (err_warn_msgs.date_miss, 'warning');
			elseif not date then												-- invalid base62 string
				date = inlineRed (err_warn_msgs.date1, 'error');
			end
		end

	elseif 'archiveis' == ulx.url1.service then
		if date then
			if config.verifydates then
				if ldf then
					udate, msg = decodeArchiveisDate (uri.path)					-- get the url date in iso format
					if 'short link' ~= udate then								-- skip if short link
						if udate ~= date then									-- date comparison using iso format dates
							date = udate;
							msg = table.concat ({
								inlineRed (err_warn_msgs.mismatch, 'warning'),	-- add warning message
								msg,											-- add message if there is one
							});
						end
					end
				end
			end
		else																	-- no |date=
			udate, msg = decodeArchiveisDate( uri.path, "iso" )
			if udate == "short link" then
				date = nil;														-- unset
				msg = inlineRed (err_warn_msgs.date_miss, 'warning');
			elseif '' == udate then
				date = nil;														-- unset
			else
				date = udate;
			end
		end
		
	else																		-- some other service
		if not date then
			msg = inlineRed (err_warn_msgs.date_miss, 'warning');
		end
	end

	if 'index' == date then
		ulx.url1.date = date .. (msg or '');									-- create index + message (if there is one)
	elseif date then
		ulx.url1.date = makeDate (date, nil, nil, ldf) .. (msg or '');			-- create a date in the wiki's local language + message (if there is one)
	else
		ulx.url1.date = msg;
	end
		
	format = args.format;														-- Format argument 

	if not format then
		format = "none"
	else
		for k, v in pairs (data.format_vals) do									-- |format= accepts two specific values loop through a table of those values
			local found;														-- declare a nil flag
			for _, p in ipairs (v) do											-- loop through local language variants
				if format == p then												-- when |format= value matches 
					format = k;													-- use name from table key
					found = true;												-- declare found so that we can break out of outer for loop
					break;														-- break out of inner for loop
				end
			end
			
			if found then
				break;
			end
		end

		if format == "addlpages" then
			if not ulx.url1.date then
				format = "none"
			end
		elseif format == "addlarchives" then
			format = "addlarchives"
		else
			format = "none"
		end
	end
	ulx.url1.format = format

	if args.title and args.title1 then											-- Title argument
		return inlineError (data.crit_err_msgs.conflicting, {origin.title, origin.title1});
	end

	ulx.url1.title = args.title or args.title1;

	local rend = createRendering()
	if not rend then
		return inlineError (data.crit_err_msgs.unknown);
	end

	return rend .. ((unnamed_params and inlineRed (err_warn_msgs.unnamed_params, 'warning')) or '') .. createTracking();

end


--[[--------------------------&lt; E X P O R T E D 	 F U N C T I O N S &gt;------------------------------------------
]]

return {webarchive = webarchive};</text>
      <sha1>bs72n4jqbfrg7h4j8ti2gs0v0rt5nly</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Webarchive/data</title>
    <ns>828</ns>
    <id>58440631</id>
    <revision>
      <id>876951147</id>
      <parentid>863694780</parentid>
      <timestamp>2019-01-05T15:54:19Z</timestamp>
      <contributor>
        <username>GreenC</username>
        <id>8931761</id>
      </contributor>
      <comment>add new .MD, .PH and .VN .. change target article to .TODAY (wiki article rename in progress) .. sort alpha</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="10861">--[[--------------------------&lt; C O N F I G U R A T I O N &gt;----------------------------------------------------

global configuration settings

]]

local config = {
	maxurls = 10,																-- Max number of URLs allowed. 
	tname = 'Webarchive',														-- name of calling template. Change if template rename.
	verifydates = true,															-- See documentation. Set false to disable.
	}


--[[--------------------------&lt; U N C A T E G O R I Z E D _ N A M E S P A C E S &gt;------------------------------

List of namespaces that should not be included in citation error categories.

Note: Namespace names should use underscores instead of spaces.

]]

local uncategorized_namespaces = {												-- same list as specified at [[Module:Citation/CS1/Configuration]]
	['User']=true, ['Talk']=true, ['User_talk']=true, ['Wikipedia_talk']=true, ['File_talk']=true,
	['Template_talk']=true, ['Help_talk']=true, ['Category_talk']=true, ['Portal_talk']=true,
	['Book_talk']=true, ['Draft_talk']=true, ['Education_Program_talk']=true, ['Module_talk']=true,
	['MediaWiki_talk']=true,
	}

local uncategorized_subpages = {'/[Ss]andbox', '/[Tt]estcases'};				-- list of Lua patterns found in page names of pages we should not categorize

local excepted_pages = {														-- these pages will be categorized if set true; set to nil to disable
	['Module talk:Webarchive/testcases'] = true,								-- test cases pages used during development
	['Template:Webarchive/testcases/Production'] = true,
	}


--[[--------------------------&lt; C A T E G O R I E S &gt;----------------------------------------------------------

this is a table of all categories supported by Module:Webarchive

]]

local categories = {
	archiveis = 'Category:Webarchive template archiveis links',
	error = 'Category:Webarchive template errors',
	other = 'Category:Webarchive template other archives',
	unknown = 'Category:Webarchive template unknown archives',
	warning = 'Category:Webarchive template warnings',
	wayback = 'Category:Webarchive template wayback links',
	webcite = 'Category:Webarchive template webcite links',
	}


--[[--------------------------&lt; P R E F I X E S &gt;--------------------------------------------------------------

used only with serviceName(), this table holds the two generic tail-text prefixes specified by services['&lt;service name&gt;'][1]

]]

local prefixes = {
	at = 'at',
	atthe = 'at the',
	}


--[=[-------------------------&lt; S E R V I C E S &gt;--------------------------------------------------------------

this is a table of tables for archive services.  Each service table has:
	[1]=prefix; may be boolean true or false, or text string where:
		true indicates that the prefix is taken from prefixes.atthe
		false indicates that the prefix is taken from prefixes.at
		'text string' is used in lieu of the typical 'at' or 'at the' prefix
	[2]=wikilink target article that describes the service; set to nil if not used
	[3]=wikilink label; the label in [[target|label]]; set to nil if not used; when there is not article ([2] is nil) use this to name the service; see wikiwix in the table
	[4]=service ID; set to nil if not used
	[5]=tracking category key from the categories table; set to nil if not used
	[6]=postfix; text string to be appended at the end of the tail string - see webarchive.loc.gov in the table

]=]

local services = {
	['archive.ec'] = {false, 'Archive.today', nil, 'archiveis', categories.archiveis},
	['archive.fo'] = {false, 'Archive.today', nil, 'archiveis', categories.archiveis},
	['archive.is'] = {false, 'Archive.today', nil, 'archiveis', categories.archiveis},
	['archive.li'] = {false, 'Archive.today', nil, 'archiveis', categories.archiveis},
	['archive.md'] = {false, 'Archive.today', nil, 'archiveis', categories.archiveis},
	['archive.org'] = {true, 'Wayback Machine', nil, 'wayback', categories.wayback},
	['archive.ph'] = {false, 'Archive.today', nil, 'archiveis', categories.archiveis},
	['archive.today'] = {false, 'Archive.today', nil, 'archiveis', categories.archiveis},
	['archive.vn'] = {false, 'Archive.today', nil, 'archiveis', categories.archiveis},
	['archive-it.org'] = {false, 'Archive-It', nil, 'archiveit'},
	['arquivo.pt'] = {true, nil, 'Portuguese Web Archive'},
	['bibalex.org'] = {false, 'Bibliotheca Alexandrina#Internet Archive partnership', 'Bibliotheca Alexandrina'},
	['collectionscanada'] = {true, 'Canadian Government Web Archive'},
	['europarchive.org'] = {true, 'National Library of Ireland'},
	['freezepage.com'] = {false, nil, 'Freezepage'},
	['haw.nsk'] = {true, 'Croatian Web Archive (HAW)'},
	['langzeitarchivierung.bib-bvb.de'] = {false, 'Bavarian State Library'},
	['loc.gov'] = {true, 'Library of Congress'},
	['nationalarchives.gov.uk'] = {true, 'UK Government Web Archive'},
	['nlb.gov.sg'] = {false, 'Web Archive Singapore'},
	['pandora.nla.gov.au'] = {false, 'Pandora Archive'},
	['parliament.uk'] = {true, 'UK Parliament\'s Web Archive'},
	['perma.cc'] = {false, 'Perma.cc'},
	['perma-archives.cc'] = {false, 'Perma.cc'},
	['proni.gov'] = {true, 'Public Record Office of Northern Ireland'},
	['screenshots.com'] = {false, nil, 'Screenshots'},
	['stanford.edu'] = {true, 'Stanford University Libraries', 'Stanford Web Archive'},
	['timetravel.mementoweb.org'] = {false, 'Memento Project'},
	['uni-lj.si'] = {true, nil, 'Slovenian Web Archive'},
	['veebiarhiiv.digar.ee'] = {true, nil, 'Estonian Web Archive'},
	['vefsafn.is'] = {true, 'National and University Library of Iceland'},
	['webarchive.bac-lac.gc.ca'] = {false, 'Library and Archives Canada'},
	['webarchive.loc.gov'] = {true, 'Library of Congress', nil, 'locwebarchives', nil, 'Web Archives'},
	['webarchive.org.uk'] = {true, 'UK Web Archive'},
	['webcache.googleusercontent.com'] = {false, nil, 'Google Cache'},
	['webcitation.org'] = {false, 'WebCite', nil, 'webcite', categories.webcite},
	['webharvest.gov'] = {true, 'National Archives and Records Administration'},
	['webrecorder.io'] = {false, 'webrecorder.io'},
	['wikiwix.com'] = {false, nil, 'Wikiwix'},
	['yorku.ca'] = {false, 'York University Libraries', 'York University Digital Library'},
	}


--[[--------------------------&lt; S T A T I C   T E X T &gt;--------------------------------------------------------

for internationalzation

]]

local s_text = {
	addlarchives = 'Additional archives',
	addlpages = 'Additional pages archived&amp;nbsp;on',							-- TODO why the &amp;nbsp; there? replace with regular space?
	Archive_index = 'Archive index',
	Archived = 'Archived',
	archived = 'archived',
	archive = 'archive',
	Page = 'Page',
	}


--[[--------------------------&lt; E R R _ W A R N _ M S G S &gt;----------------------------------------------------

these tables hold error and warning message text

]]

local err_warn_msgs = {
	date_err = '[Date error]',													-- decodeWebciteDate, decodeWaybackDate, decodeArchiveisDate
	date_miss = '[Date missing]',												-- parseExtraArgs
	ts_short = '[Timestamp date length]',										-- decodeWaybackDate timestamp less than 8 digits
	ts_date = '[Timestamp date invalid]',										-- decodeWaybackDate timestamp not a valid date
	unknown_url = '[Error: unknown archive URL]',								-- serviceName
	unnamed_params = '[Positional parameters ignored]',

--warnings
	mismatch = '&lt;sup&gt;[Date mismatch]&lt;/sup&gt;',									-- webarchive
	ts_len = '&lt;sup&gt;[Timestamp length]&lt;/sup&gt;',									-- decodeWaybackDate, decodeArchiveisDate timestamp not 14 digits
	ts_cal = '&lt;sup&gt;[Calendar]&lt;/sup&gt;',											-- decodeWaybackDate timestamp has trailing splat
	}


local crit_err_msgs = {															-- critical error messages
	conflicting = 'Conflicting |$1= and |$2=',
	empty = 'Empty url',
--	iabot1 = 'https://web.http',												-- TODO: these iabot bugs perportedly fixed; removing these causes lua script error
--	iabot2 = 'Invalid URL',														-- at Template:Webarchive/testcases/Production; resolve that before deleting these messages
	invalid_url = 'Invalid URL',
	ts_nan = 'Timestamp not a number',
	unknown = 'Unknown problem. Please report on template talk page',
	}



--[[--------------------------&lt; D A T E   I N T E R N A T I O N A L I Z A T I O N &gt;----------------------------

these tables hold data that is used when converting date formats from non-English languages (because mw.language.getContentLanguage:formatDate()
doesn't understand non-English month names)

]]

local month_num = {																-- retain English language names even though they may not be strictly required on the local wiki
	['January'] = 1, ['February'] = 2, ['March'] = 3, ['April'] = 4, ['May'] = 5, ['June'] = 6, ['July'] = 7, ['August'] = 8, ['September'] = 9, ['October'] = 10, ['November'] = 11, ['December'] = 12,
	['Jan'] = 1, ['Feb'] = 2, ['Mar'] = 3, ['Apr'] = 4, ['May'] = 5, ['Jun'] = 6, ['Jul'] = 7, ['Aug'] = 8, ['Sep'] = 9, ['Oct'] = 10, ['Nov'] = 11, ['Dec'] = 12,
-- add local wiki month-names to number translation here
--	[''] = 1, [''] = 2, [''] = 3, [''] = 4, [''] = 5, [''] = 6, [''] = 7, [''] = 8, [''] = 9, [''] = 10, [''] = 11, [''] = 12,
	};

																				-- when the local wiki uses non-western digits in dates, local wiki digits must be
																				-- translated to western digits; lua only understands western digits
local digits = {																-- use this table to aid translation
--	[''] = 0, [''] = 1, [''] = 2, [''] = 3, [''] = 4, [''] = 5, [''] = 6, [''] = 7, [''] = 8, [''] = 9,	-- fill these table indexes with local digits
	enable = false																-- set to true to enable local-digit to western-digit translation
	};


--[[--------------------------&lt; P A R A M E T E R   I N T E R N A T I O N A L I Z A T I O N &gt;------------------

this table holds tables of parameter names and their non-English aliases.  In the enum_params table '#' is a single
character placeholder for 1 or more digit characters

parameter names in this table shall be lowercase
]]

local params = {
	['url'] = {'url'},
	['date'] = {'date', 'datum'},
	['title'] = {'title', 'titel'},
	['nolink'] = {'nolink'},
	['format'] = {'format'}
	}

local enum_params = {
	['url#'] = {'url#'},
	['date#'] = {'date#', 'datum#'},
	['title#'] = {'title#', 'titel#'},
	}

local format_vals = {															-- |format= accepts two values; add local language variants here
	['addlpages'] = {'addlpages'},
	['addlarchives'] = {'addlarchives'},
	}


--[[--------------------------&lt; E X P O R T E D   T A B L E S &gt;------------------------------------------------
]]

return {
	categories = categories,
	config = config,
	crit_err_msgs = crit_err_msgs,
	digits = digits,
	enum_params = enum_params,
	err_warn_msgs = err_warn_msgs,
	excepted_pages = excepted_pages,
	format_vals = format_vals,
	month_num = month_num,
	params = params,
	prefixes = prefixes,
	services = services,
	s_text = s_text,
	uncategorized_namespaces = uncategorized_namespaces,
	uncategorized_subpages = uncategorized_subpages,
	}</text>
      <sha1>lzmbn7x5jyx332clrzmk4m5jwsp53yj</sha1>
    </revision>
  </page>
  <page>
    <title>Module:World topic</title>
    <ns>828</ns>
    <id>47136042</id>
    <revision>
      <id>885288857</id>
      <parentid>880025884</parentid>
      <timestamp>2019-02-27T03:14:30Z</timestamp>
      <contributor>
        <username>Paintspot</username>
        <id>18915484</id>
      </contributor>
      <comment>Congo, Korea, Micronesia sorting. Also, all the pages are now titled with North Macedonia, it seems.</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="7296">local p = {}

local Navbox = require("Module:Navbox")
local country = {
	Afghanistan = {""},
	Albania = {""},
	Algeria = {""},
	Andorra = {""},
	Angola = {""},
	["Antigua and Barbuda"] = {""},
	Argentina = {""},
	Armenia = {""},
	Australia = {""},
	Austria = {""},
	Azerbaijan = {""},
	Bahamas = {"the Bahamas"},
	Bahrain = {""},
	Bangladesh = {""},
	Barbados = {""},
	Belarus = {""},
	Belgium = {""},
	Belize = {""},
	Benin = {""},
	Bhutan = {""},
	Bolivia = {""},
	["Bosnia and Herzegovina"] = {""},
	Botswana = {""},
	Brazil = {""},
	Brunei = {""},
	Bulgaria = {""},
	["Burkina Faso"] = {""},
	Burundi = {""},
	Cambodia = {""},
	Cameroon = {""},
	Canada = {""},
	["Cape Verde"] = {""},
	["Central African Republic"] = {"the Central African Republic"},
	Chad = {""},
	Chile = {""},
	China = {""},
	Colombia = {""},
	Comoros = {""},
	["Democratic Republic of the Congo"] = {"the Democratic Republic of the Congo"},
	["Republic of the Congo"] = {"the Republic of the Congo"},
	["Costa Rica"] = {""},
	Croatia = {""},
	Cuba = {""},
	Cyprus = {""},
	["Czech Republic"] = {"the Czech Republic"},
	Denmark = {""},
	Djibouti = {""},
	Dominica = {""},
	["East Timor"] = {""},
	["Dominican Republic"] = {"the Dominican Republic"},
	Ecuador = {""},
	Egypt = {""},
	["El Salvador"] = {""},
	["Equatorial Guinea"] = {""},
	Eritrea = {""},
	Estonia = {""},
	Eswatini = {""},
	Ethiopia = {""},
	Fiji = {""},
	Finland = {""},
	France = {""},
	Gabon = {""},
	Gambia = {"the Gambia"},
	Georgia = {"Georgia (country)"},
	Germany = {""},
	Ghana = {""},
	Greece = {""},
	Grenada = {""},
	Guatemala = {""},
	Guinea = {""},
	["Guinea-Bissau"] = {""},
	Guyana = {""},
	Haiti = {""},
	Honduras = {""},
	Hungary = {""},
	Iceland = {""},
	India = {""},
	Indonesia = {""},
	Iran = {""},
	Iraq = {""},
	Ireland = {""},
	Israel = {""},
	Italy = {""},
	["Ivory Coast"] = {""},
	Jamaica = {""},
	Japan = {""},
	Jordan = {""},
	Kazakhstan = {""},
	Kenya = {""},
	Kiribati = {""},
	Kosovo = {""},
	["North Korea"] = {""},
	["South Korea"] = {""},
	Kuwait = {""},
	Kyrgyzstan = {""},
	Laos = {""},
	Latvia = {""},
	Lebanon = {""},
	Lesotho = {""},
	Liberia = {""},
	Libya = {""},
	Liechtenstein = {""},
	Lithuania = {""},
	Luxembourg = {""},
	Madagascar = {""},
	Malawi = {""},
	Malaysia = {""},
	Maldives = {""},
	Mali = {""},
	Malta = {""},
	["Marshall Islands"] = {"the Marshall Islands"},
	Mauritania = {""},
	Mauritius = {""},
	Mexico = {""},
	["Federated States of Micronesia"] = {"the Federated States of Micronesia"},
	Moldova = {""},
	Monaco = {""},
	Mongolia = {""},
	Montenegro = {""},
	Morocco = {""},
	Mozambique = {""},
	Myanmar = {""},
	Namibia = {""},
	Nauru = {""},
	Nepal = {""},
	Netherlands = {"the Netherlands"},
	["New Zealand"] = {""},
	Nicaragua = {""},
	Niger = {""},
	Nigeria = {""},
	["North Macedonia"] = {""},
	Norway = {""},
	Oman = {""},
	Pakistan = {""},
	Palestine = {""},
	Palau = {""},
	Panama = {""},
	["Papua New Guinea"] = {""},
	Paraguay = {""},
	Peru = {""},
	Philippines = {"the Philippines"},
	Poland = {""},
	Portugal = {""},
	Qatar = {""},
	Romania = {""},
	Russia = {""},
	Rwanda = {""},
	["Saint Kitts and Nevis"] = {""},
	["Saint Lucia"] = {""},
	["Saint Vincent and the Grenadines"] = {""},
	Samoa = {""},
	["San Marino"] = {""},
	["São Tomé and Príncipe"] = {""},
	["Saudi Arabia"] = {""},
	Senegal = {""},
	Serbia = {""},
	Seychelles = {""},
	["Sierra Leone"] = {""},
	Singapore = {""},
	Slovakia = {""},
	Slovenia = {""},
	["Solomon Islands"] = {"the Solomon Islands"},
	Somalia = {""},
	["South Africa"] = {""},
	["South Sudan"] = {""},
	Spain = {""},
	["Sri Lanka"] = {""},
	Sudan = {""},
	Suriname = {""},
	Sweden = {""},
	Switzerland = {""},
	Syria = {""},
	Taiwan = {""},
	Tajikistan = {""},
	Tanzania = {""},
	Thailand = {""},
	Togo = {""},
	Tonga = {""},
	["Trinidad and Tobago"] = {""},
	Tunisia = {""},
	Turkey = {""},
	Turkmenistan = {""},
	Tuvalu = {""},
	Uganda = {""},
	Ukraine = {""},
	["United Arab Emirates"] = {"the United Arab Emirates"},
	["United Kingdom"] = {"the United Kingdom"},
	["United States"] = {"the United States"},
	Uruguay = {""},
	Uzbekistan = {""},
	Vanuatu = {""},
	["Vatican City"] = {""},
	Venezuela = {""},
	Vietnam = {""},
	["Western Sahara"] = {""},
	Yemen = {""},
	Zambia = {""},
	Zimbabwe = {""},
}

function p.main(frame)
	local pframe = frame:getParent()
	local config = frame.args
	local args = pframe.args
	
	return p._main(args)
end

function p._main(args)
	if mw.title.getCurrentTitle() == "Template:World topic" then
		state = "autocollapse"
	else
		state = args.state
	end
	if args[1] ~= nil or args.prefix ~= nil and (args[2] == nil or ags.suffix == nil) then
		titlemid = " the"
	end
	if args.title ~= nil then
		title = args.title
	else
		title = "[["..(args[1] or args.prefix or "")..(titlemid or "").." World"..(args.suffix or "").."]]"
	end
	if args.group1 ~= nil and args.group1 ~= "" then
		group1 = args.group1
	end
	local sorter = {}
	for n in pairs(country) do
		table.insert(sorter, n)
	end
	table.sort(sorter)

	if args.noredlinks ~= nil then
		list1 = table.concat(noredlinks(args[1], args[2], args.prefix, args.suffix, sorter) )
	else
		list1 = table.concat(redlinks(args[1], args[2], args.prefix, args.suffix, sorter) )
	end
	local navarguments = {
		name = args.name or "World topic",
		state = state,
		navbar = args.navbar or "Tnavbar",
		border = args.border,
		title = title,
		image = args.image,
		titlestyle = args.titlestyle,
		bodystyle = args.bodystyle,
		abovestyle = args.abovestyle,
		belowstyle = args.belowstyle,
		groupstyle = args.groupstyle,
		liststyle = args.liststyle,
		listclass  = "hlist",
		above = args.above,
		group1 = group1,
		list1 = list1
	}
	return Navbox._navbox(navarguments)
end

function noredlinks(args1, args2, argsprefix, argssuffix, sorter)
	local list = {}
	for x, y in pairs(sorter) do
		if mw.title.new((args1 or argsprefix or "").." "..linktarget(y, country[y][1])..(args2 or argssuffix or "")).exists == true then
			table.insert(list, li("[["..(args1 or argsprefix or "").." "..linktarget(y, country[y][1])..(args2 or
				argssuffix or "").."|"..y.."]]"))
		elseif y == "Georgia" then
			if mw.title.new((args1 or argsprefix or "").." "..y..(args2 or argssuffix or "")).exists == true then
				table.insert(list, li("[["..(args1 or argsprefix or "").." "..y..(args2 or
				argssuffix or "").."|"..y.."]]" ) )
			end
		end
	end
	return list
end

function redlinks(args1, args2, argsprefix, argssuffix, sorter)
	local list = {}
	for x, y in pairs(sorter) do
		if y == "Georgia" then
			if mw.title.new((args1 or argsprefix or "").." "..country[y][1]..(args2 or argssuffix or "")).exists == true then
				table.insert(list, li("[["..(args1 or argsprefix or "").." "..country[y][1]..(args2 or
				argssuffix or "").."|"..y.."]]" ))
			else
				table.insert(list, li("[["..(args1 or argsprefix or "").." "..y..(args2 or
				argssuffix or "").."|"..y.."]]" ))
			end
		else
			table.insert(list, li("[["..(args1 or argsprefix or "").." " .. linktarget(y, country[y][1]) .. (args2 or 
				argssuffix or "").."|".. y .. "]]"))
		end
	end
	return list
end

function li(text)
	local li = mw.html.create("li")
	li
		:wikitext(text)
		:done()
	return tostring(li)
end

function linktarget(x, y)
	if y ~= nil and y == "" then
		return x
	else
		return y
	end
end

return p</text>
      <sha1>ca4f89gnosku3osfm19sv9nps6rzsou</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Yesno</title>
    <ns>828</ns>
    <id>38665046</id>
    <revision>
      <id>828075573</id>
      <parentid>659459801</parentid>
      <timestamp>2018-02-28T12:14:32Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>+support for on/off</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text xml:space="preserve" bytes="745">-- Function allowing for consistent treatment of boolean-like wikitext input.
-- It works similarly to the template {{yesno}}.

return function (val, default)
	-- If your wiki uses non-ascii characters for any of "yes", "no", etc., you
	-- should replace "val:lower()" with "mw.ustring.lower(val)" in the
	-- following line.
	val = type(val) == 'string' and val:lower() or val
	if val == nil then
		return nil
	elseif val == true 
		or val == 'yes'
		or val == 'y'
		or val == 'true'
		or val == 't'
		or val == 'on'
		or tonumber(val) == 1
	then
		return true
	elseif val == false
		or val == 'no'
		or val == 'n'
		or val == 'false'
		or val == 'f'
		or val == 'off'
		or tonumber(val) == 0
	then
		return false
	else
		return default
	end
end</text>
      <sha1>swdskn7svew8i9wuydn9uj5l3r2ghcs</sha1>
    </revision>
  </page>
</mediawiki>
