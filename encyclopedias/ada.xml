<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikibooks</sitename>
    <dbname>enwikibooks</dbname>
    <base>https://en.wikibooks.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.16</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikibooks</namespace>
      <namespace key="5" case="first-letter">Wikibooks talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="102" case="first-letter">Cookbook</namespace>
      <namespace key="103" case="first-letter">Cookbook talk</namespace>
      <namespace key="108" case="first-letter">Transwiki</namespace>
      <namespace key="109" case="first-letter">Transwiki talk</namespace>
      <namespace key="110" case="first-letter">Wikijunior</namespace>
      <namespace key="111" case="first-letter">Wikijunior talk</namespace>
      <namespace key="112" case="first-letter">Subject</namespace>
      <namespace key="113" case="first-letter">Subject talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Ada Programming/All Chapters</title>
    <ns>0</ns>
    <id>40809</id>
    <revision>
      <id>3211480</id>
      <parentid>3211479</parentid>
      <timestamp>2017-05-01T15:17:40Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>typo</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4019" xml:space="preserve">&lt;noinclude&gt;

{{NOTE|At present there is an issue on how [[Wikipedia:Transclusion|transclusions]] are processed, from [[Wikipedia:Template limits|Template limits]] there are several ways to address this limitation but there seems also to be some bugs pending resolution. As is it is impossible to guarantee that all the book's content is displayed in this page.
See if you can work with the provided alternatives in the meanwhile or post a request for resolution on at the [[Wikibooks:Reading room/Technical Assistance]].}}
{{Print version notice|Ada Programming|Ada_Programming/All_Chapters}}

----

[[Image:Ada Lovelace 1838.jpg|right|caption|thumbnail|270px|[[w:Ada Lovelace|Augusta Ada King]], Countess of Lovelace.]]
__NOEDITSECTION__
__TOC__

= Preface =
{{:Ada Programming}}
&lt;/noinclude&gt;
= Basic Ada=
{{:Ada Programming/Basic}}

= Installing =
{{:Ada Programming/Installing}}
= Building =
{{:Ada Programming/Building}}
= Control Statements =
{{:Ada Programming/Control}}
= Type System =
{{:Ada Programming/Type System}}
= Integer types =
{{:Ada Programming/Types/range}}
= Unsigned integer types =
{{:Ada Programming/Types/mod}}
= Enumerations =
{{:Ada Programming/Types/Enumeration}}
= Floating point types =
{{:Ada Programming/Types/digits}}
= Fixed point types =
{{:Ada Programming/Types/delta}}
= Arrays =
{{:Ada Programming/Types/array}}
= Records =
{{:Ada Programming/Types/record}}
= Access types =
{{:Ada Programming/Types/access}}
= Limited types =
{{:Ada Programming/Types/limited}}
= Strings =
{{:Ada Programming/Strings}}
= Subprograms =
{{:Ada Programming/Subprograms}}
= Packages =
{{:Ada Programming/Packages}}
= Input Output =
{{:Ada Programming/Input Output}}
= Exceptions =
{{:Ada Programming/Exceptions}}
= Generics =
{{:Ada Programming/Generics}}
= Tasking =
{{:Ada Programming/Tasking}}
= Object Orientation =
{{:Ada Programming/Object Orientation}}
= New in Ada 2005 =
{{:Ada Programming/Ada 2005}}
= Containers =
{{:Ada Programming/Containers}}
= Interfacing =
{{:Ada Programming/Interfacing}}
= Coding Standards =
{{:Ada Programming/Coding standards}}
= Tips =
{{:Ada Programming/Tips}}
= Common Errors =
{{:Ada Programming/Errors}}
= Algorithms =
{{:Ada Programming/Algorithms}}
= Function overloading =
{{:Ada Programming/Function overloading}}
= Mathematical calculations =
{{:Ada Programming/Mathematical calculations}}
= Statements =
{{:Ada Programming/Statements}}
= Variables =
{{:Ada Programming/Variables}}
= Lexical elements =
{{:Ada Programming/Lexical elements}}
= Keywords =
{{:Ada Programming/Keywords}}
= Delimiters =
{{:Ada Programming/Delimiters}}
= Operators =
{{:Ada Programming/Operators}}
= Attributes =
{{:Ada Programming/Attributes}}
= Pragmas =
{{:Ada Programming/Pragmas}}
= Libraries =
{{:Ada Programming/Libraries}}
= Libraries: Standard =
{{:Ada Programming/Libraries/Standard}}
= Libraries: Ada =
{{:Ada Programming/Libraries/Ada}}
= Libraries: Interfaces =
{{:Ada Programming/Libraries/Interfaces}}
= Libraries: System =
{{:Ada Programming/Libraries/System}}
= Libraries: GNAT =
{{:Ada Programming/Libraries/GNAT}}
= Libraries: Multi-Purpose =
{{:Ada Programming/Libraries/MultiPurpose}}
= Libraries: Container =
{{:Ada Programming/Libraries/Container}}
= Libraries: GUI =
{{:Ada Programming/Libraries/GUI}}
= Libraries: Distributed Systems =
{{:Ada Programming/Libraries/Distributed}}
= Libraries: Databases =
{{:Ada Programming/Libraries/Database}}
= Libraries: Web =
{{:Ada Programming/Libraries/Web}}
= Libraries: Input Output =
{{:Ada Programming/Libraries/IO}}
= Platform Support =
{{:Ada Programming/Platform}}
= Platform: Linux =
{{:Ada Programming/Platform/Linux}}
= Platform: Windows =
{{:Ada Programming/Platform/Windows}}
= Platform: Virtual Machines =
{{:Ada Programming/Platform/VM}}
= Portals =
{{:Ada Programming/Portals}}
= Tutorials =
{{:Ada Programming/Tutorials}}
= Web 2.0 =
{{:Ada Programming/Web 2.0}}

&lt;noinclude&gt;
[[Category:Book:Ada Programming| All Chapters]]
[[Category:Book:Ada Programming/Print version|All Chapters]]
&lt;/noinclude&gt;</text>
      <sha1>lynxtzyddtslxel39js5j1nggmqs49j</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming</title>
    <ns>0</ns>
    <id>8720</id>
    <revision>
      <id>3656078</id>
      <parentid>3656071</parentid>
      <timestamp>2020-01-29T17:08:34Z</timestamp>
      <contributor>
        <username>Mrjulesd</username>
        <id>1779740</id>
      </contributor>
      <comment>Rejected the last text change (by [[Special:Contributions/2401:4900:3366:81F4:1:0:AD5B:931C|2401:4900:3366:81F4:1:0:AD5B:931C]]) and restored revision 3655433 by Mrjulesd</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24546" xml:space="preserve">{{featured book}}&lt;noinclude&gt;
----
[[File:Ada Mascot with slogan.png|thumbnail|300px]]
{{reading level|professional}}
__TOC__&lt;/noinclude&gt;

{{Wikipedia|Ada (programming language)}}
{{Book Search|prefix=Ada Programming}}
Welcome to the '''Ada Programming''' tutorial at Wikibooks. This is the first [[Ada Programming/Tutorials|Ada tutorial]] covering the [[Ada Programming/Ada 2005|Ada&amp;nbsp;2005]] and [[Ada Programming/Ada 2012|2012]] standards. If you are a beginner you will learn the latest standard &amp;mdash; if you are a seasoned Ada user you can see what's new.

Current Development Stage for '''Ada Programming''' is "{{stage|75%|Feb 26, 2012}}". At this date, there are more than 200 pages in this book, which makes '''Ada Programming''' one of the largest [[Computer programming|programming]] wikibooks.{{#ifeq:{{NAMESPACE}}|Category||&lt;ref&gt;See [http://en.wikipedia.org/wikistats/wikibooks/EN/Wikibooks_EN.htm wikistats], [[:{{BOOKCATEGORY|Ada Programming}}]] or [[/All Chapters]]&lt;/ref&gt;}}

But still there is always room for improvement &amp;mdash; do help us to expand '''Ada Programming'''. Even beginners will find areas to participate.

== About Ada ==
[[Image:Ada Lovelace 1838.jpg|right|thumbnail|270px|[[w:Ada Lovelace|Augusta Ada King]], Countess of Lovelace.]]
Ada is a programming language suitable for all development needs.
It has built-in features that directly support [[w:Structured programming|structured]],
[[w:Object-oriented programming|object-oriented]], [[w:Generic programming|generic]], [[w:Distributed computing|distributed]] and [[w:Concurrent computing|concurrent]] programming.

Ada is a good choice for [[w:Rapid application development|Rapid Application Development]], [[w:Extreme Programming|Extreme Programming (XP)]],
and [[w:Free Software|Free Software]] development.

Ada is named after [[w:Ada Lovelace|Augusta Ada King-Noel]], Countess of Lovelace.

=== Programming in the large ===

Ada puts unique emphasis on, and provides strong support for, good [[w:Software Engineering|software engineering]] practices that scale well to very large software
systems (millions of lines of code, and very large development teams).  The following
language features are particularly relevant in this respect:

* An extremely strong, static and safe '''[[w:Type system|type system]]''', which allows the programmer to construct powerful abstractions that reflect the real world, and allows the compiler to detect many logic faults before they become errors.
* '''[[w:Modularity (programming)|Modularity]]''', whereby the compiler directly manages the construction of very large software systems from sources.
* '''[[w:Information hiding|Information hiding]]'''; the language separates interfaces from implementation, and provides fine-grained control over visibility.
* '''Readability''', which helps programmers review and verify code.  Ada favours the reader of the program over the writer, because a program is written once but read many times.  For example, the syntax bans all ambiguous constructs, so there are no surprises, in accordance with the Tao of Programming's [[w:Principle of least astonishment|Law of Least Astonishment]].  (Some Ada programmers are reluctant to talk about ''source code'' which is often cryptic; they prefer ''program text'' which is close to English prose.)
* '''[[w:Write once, compile anywhere|Portability]]''': the language definition allows compilers to differ only in a few controlled ways, and otherwise defines the semantics of programs very precisely; as a result, Ada source text is very portable across compilers and across target hardware platforms.  Most often, the program can be recompiled without any changes.{{#ifeq:{{NAMESPACE}}|Category||&lt;ref&gt;{{cite conference
 |       author = Gaetan Allaert, Dirk Craeynest, Philippe Waroquiers
 |        title = European air traffic flow management: porting a large application to GNU/linux
 |   conference = SIGAda'03
 |conferenceurl = http://www.sigada.org/conf/sigada2003/SIGAda2003-CDROM/SIGAda2003-Proceedings/00-proceedings.html
 |    booktitle = Proceedings of the 2003 annual ACM SIGAda international conference on Ada
 |         year = 2003
 |        pages = 29&amp;ndash;37
 |          doi = 10.1145/958420.958426
 |         isbn = 1-58113-476-2
 |          url = http://www.sigada.org/conf/sigada2003/SIGAda2003-CDROM/SIGAda2003-Proceedings/p29-allaert.pdf
 |   accessdate = 2009-01-02
}} Paper by Eurocontrol (PDF, 160 kB) on portability.&lt;/ref&gt;}}
* '''Standardisation''': standards have been a goal and a prominent feature ever since the design of the language in the late 1970s.  The first standard was published in 1980, just 3 years after design commenced.  Ada compilers all support exactly the same language; the only dialect, [[w:SPARK (programming language)|SPARK]], is merely an annotated subset and can be compiled with an Ada compiler.

Consequences of these qualities are superior '''reliability''', '''reusability''' and
'''maintainability'''. For example, compared to programs written in [[Programming:C|C]],
programs written in Ada&amp;nbsp;83 contain ''"70% fewer internal fixes and 90% fewer bugs"'', and cost half as much to develop in the first place.{{#ifeq:{{NAMESPACE}}|Category||&lt;ref&gt;{{cite paper
 |     author = Stephen F. Zeigler
 |      title = Comparing Development Costs of C and Ada
 |       date = 1995-03-30
 |        url = http://archive.adaic.com/intro/ada-vs-c/ada-vs-c.html
 |      quote = Our data indicates that Ada has saved us millions of development dollars.
 | accessdate = 2009-01-02
}}&lt;/ref&gt;}}
Ada shines even more in software maintenance, which often accounts for about 80% of the total
cost of development.  With support for object-oriented programming, Ada 95 may bring even
more cost benefit, depending on how objects are used; although no serious study comparable to Zeigler's has been published.

=== Programming in the small ===

In addition to its support for good software engineering practices,
which are applicable to general-purpose programming, Ada has powerful
specialised features supporting '''low-level programming''' for real-time, safety-critical
and [[w:Embedded system|embedded]] systems.  Such features include, among others,
machine code insertions, address arithmetic, low-level access to memory, control over bitwise representation of data, bit manipulations, and
a well-defined, statically provable concurrent computing model called the
[[w:Ravenscar profile|Ravenscar Profile]].

Other features include restrictions (it is possible to restrict which language
features are accepted in a program) and features that help review and certify
the object code generated by the compiler.

Several vendors provide Ada compilers accompanied by minimal run-time kernels
suitable for use in certified, life-critical applications.  It is also possible to
write Ada programs which require no run-time kernel at all.

It should come as no surprise that Ada is heavily used in the aerospace, defence,
medical, railroad, and nuclear industries.

=== The Language Reference Manual ===
{{Wikipedia|ISO 8652}}
The Ada Reference Manual (RM) is the official language definition. If you have a problem and no one else can help, you should read the RM &lt;small&gt;(albeit often a bit cryptic for non-language-lawyers)&lt;/small&gt;. For this reason, all complete &lt;small&gt;(not draft)&lt;/small&gt; pages in '''Ada Programming''' contain links into the appropriate pages in the RM.

This tutorial covers ''[[w:ISO 8652|Ada Reference Manual &amp;mdash; ISO/IEC 8652:2012(E) Language and Standard Libraries]]'', colloquially known as ''Ada&amp;nbsp;2012'' or just ''Ada''.

You can browse the complete Reference Manual at http://www.ada-auth.org/standards/12rm/html/RM-TTL.html

There are two companion documents:
* The [http://www.adaic.org/resources/add_content/standards/12aarm/html/AA-TTL.html Annotated Reference Manual], an extended version of the RM aimed at compiler writers or other persons who want to know the fine details of the language.
* The [http://www.ada-auth.org/standards/rationale12.html Rationale for Ada&amp;nbsp;2012], an explanation of the features of the language.

The [http://www.adaic.com/standards Ada Information Clearinghouse] also offers the older Ada&amp;nbsp;83, 95, and 2005 standards and companion documents.

The RM is a collective work under the control of Ada users.
If you think you've found a problem in the RM, please report it to
the [http://www.ada-auth.org Ada Conformity Assessment Authority]. On this site, you can also see the list of "Ada Issues" raised by other people.

=== Ada Conformity Assessment Test Suite ===
{{Wikipedia|ISO 18009}}
Unlike other programming languages, Ada compilers are officially tested, and only those which pass this test are accepted, for military and commercial work. This means that all Ada compilers behave (almost) the same, so you do not have to learn any dialects. But because the Ada standard allows the compiler writers to include some additions, you could learn a cool new feature only to find out that your favourite compiler does not support it...

== Programming in Ada ==
&lt;div class="noprint"&gt;
Reading a document online is often quite cumbersome. So if you just started you can also download [[/All Chapters|All Chapters]] ([//upload.wikimedia.org/wikipedia/commons/8/8d/Ada_Programming.pdf PDF version]) {{stage short|50%|Sep 23, 2005}} and print them out.
&lt;/div&gt;

=== Getting Started ===

Where to get a compiler, how to compile the source, all answered here:

* [[Ada Programming/Basic|Basic Ada]] &amp;mdash; '''Read Me First!'''  {{stage short|100%|Sep 22, 2005}}
* [[Ada Programming/Installing|Finding and Installing Ada]] {{stage short|100%|Sep 22, 2005}}
* [[Ada Programming/Building|Building an Ada program]] {{stage short|100%|Sep 22, 2005}}
* [[Ada Programming/Environment|Ada Development Environment]] {{stage short|0%|Jul 3, 2012}}

=== Language Features ===

These chapters look at the broader picture, introducing you to the main Ada features in a tutorial style.

* [[Ada Programming/Expressions|Expressions]] {{stage short|75%|Jul 22, 2018}}
* [[Ada Programming/Control|Control Structures]] {{stage short|100%|Dec 14, 2005}}
* [[Ada Programming/Type System|Type System]] {{stage short|75%|Jan 5, 2006}}
* [[Ada Programming/Strings|Strings]] {{stage short|75%|Jan 5, 2006}}
* [[Ada Programming/Subprograms|Subprograms]] {{stage short|75%|Jan 5, 2006}}
* [[Ada Programming/Packages|Packages]] {{stage short|75%|Jun 2, 2008}}
* [[Ada Programming/Input Output|Input Output]] {{stage short|50%|Jun 2, 2008}}
* [[Ada Programming/Exceptions|Exceptions]] {{stage short|100%|Jan 5, 2006}}
* [[Ada Programming/Generics|Generics]] {{stage short|100%|Jan 5, 2006}}
* [[Ada Programming/Tasking|Tasking]] {{stage short|75%|Jun 2, 2008}}
* [[Ada Programming/Object Orientation|Object Orientation]] {{stage short|100%|Jun 22, 2010}}
* [[Ada Programming/Contract Based Programming|Contract Based Programming]] {{stage short|0%|Aug 20, 2015}}
* [[Ada Programming/Types/access|Memory Management (Access Types)]] {{stage short|100%|Jan 5, 2006}}
* [[Ada Programming/Ada 2005|New in Ada&amp;nbsp;2005]] {{stage short|100%|Jan 5, 2006}}
* [[Ada Programming/Ada 2012|New in Ada&amp;nbsp;2012]] {{stage short|25%|Feb 26, 2012}}
* [[Ada Programming/Containers|Containers]] {{stage short|50%|Jan 5, 2006}}
* [[Ada Programming/Interfacing|Interfacing to other Languages]] {{stage short|25%|Nov 24, 2008}}
* [[Ada Programming/Coding standards|Coding Standards]] {{stage short|25%|Nov 24, 2008}}
* [[Ada Programming/Tips|Ada Programming Tips]] {{stage short|25%|Jan 5, 2006}}
* [[Ada Programming/Errors|Common Programming Errors]] {{stage short|25%|Jun 1, 2008}}

=== Computer Programming ===

The following articles are Ada adaptations from articles of the [[Computer programming]] book. The texts of these articles are language neutral but the examples are all Ada.

* [[/Algorithms/]]
** [[/Algorithms/Chapter 1|Chapter 1]]
** [[/Algorithms/Chapter 6|Chapter 6]]
** [[/Algorithms/Knuth-Morris-Pratt pattern matcher/|Knuth-Morris-Pratt pattern matcher]]
** [[Algorithm implementation/Search/Binary search#Ada|Binary search]]
* [[/Error handling/]]
* [[/Function overloading/]]
* [[/Mathematical calculations/]]
* [[/Statements/]]
** [[/Control/]]
* [[/Variables/]]

=== Language Reference ===

Within the following chapters we look at foundations of Ada. These chapters may be used for reference of a particular keyword, delimiter, operator and so forth.
* [[Ada Programming/Lexical elements|Lexical elements]] {{stage short|100%|Dec 14, 2005}}
** [[Ada Programming/Keywords|Keywords]] {{stage short|75%|Jan 6, 2008}}
** [[Ada Programming/Delimiters|Delimiters]] {{stage short|75%|Jan 10, 2005}}
* [[Ada Programming/Operators|Operators]] {{stage short|100%|Jan 10, 2005}}
* [[Ada Programming/Attributes|Attributes]] {{stage short|50%|Jan 2, 2009}}
* [[Ada Programming/Aspects|Aspects]] {{stage short|25%|Feb 26, 2012}}
* [[Ada Programming/Pragmas|Pragmas]] {{stage short|25%|Jan 10, 2005}}
** [[Ada Programming/Pragmas/Restrictions|Restrictions]] {{stage short|25%|Feb 26, 2012}}

=== Predefined Language Libraries ===
This section is a reference of the Ada Standard Library, which is extensive and well structured. It has these four root packages:

* [[Ada Programming/Libraries/Standard|Standard]] {{stage short|25%|Sep 22, 2005}}
* [[Ada Programming/Libraries/Ada|Ada]] {{stage short|25%|Sep 22, 2005}}
* [[Ada Programming/Libraries/Interfaces|Interfaces]] {{stage short|25%|Sep 22, 2005}}
* [[Ada Programming/Libraries/System|System]] {{stage short|25%|Sep 22, 2005}}

Besides the Standard Library, compilers usually come with a built-in library. This chapter describes the 
[[w:GNAT|GNAT]] library in particular. 

* [[Ada Programming/Libraries/GNAT|GNAT]] {{stage short|25%|Sep 22, 2005}}

=== External Libraries ===

This section is a reference of third-party Ada libraries which are not part of the compiler predefined environment but are freely available.

* [[Ada Programming/Libraries|Libraries]]
** [[Ada Programming/Libraries/MultiPurpose|Multi Purpose]]
** [[Ada Programming/Libraries/Container|Container Libraries]]
** [[Ada Programming/Libraries/GUI|GUI Libraries]]
** [[Ada Programming/Libraries/Distributed|Distributed Objects]]
** [[Ada Programming/Libraries/Database|Database]]
** [[Ada Programming/Libraries/Web|Web Programming]]
** [[Ada Programming/Libraries/IO|Input/Output]]
* [[Ada Programming/Platform|Platform specific]]
** [[Ada Programming/Platform/Linux|Programming Ada in Linux]]
** [[Ada Programming/Platform/Windows|Programming Ada in Windows]]
** [[Ada Programming/Platform/VM|Programming Ada in Virtual Machines (Java, .NET)]]

== External resources ==

* [[Ada Programming/Portals|Open-source portals]]
* [[Ada Programming/Tutorials|Web Tutorials]]
* [[Ada Programming/Web 2.0|Web 2.0]]

== Collections ==

=== Printable Versions ===
&lt;noinclude&gt;
{{Collection}}
{{Print version|Ada Programming/All Chapters|1,839 kb}}
{{PDF version|Ada Programming|2,663 kb, 243 pages|Ada Programming}}
&lt;/noinclude&gt;
The following are collection pages. All collection pages are comprised of groups of the already available pages. You can use them for printing or to gain a quick overview. Please note that those pages are partly very long.

; Tutorial : [[Ada Programming/All Chapters|Show HTML]] &lt;small&gt;(1,839 kb)&lt;/small&gt; &amp;mdash; [//upload.wikimedia.org/wikipedia/commons/8/8d/Ada_Programming.pdf Download PDF] &lt;small&gt;(2,663 kb, 243 pages)&lt;/small&gt;
; Keywords : [[Ada Programming/All Keywords|Show HTML]] &lt;small&gt;(470 kb)&lt;/small&gt; &amp;mdash; [//upload.wikimedia.org/wikipedia/commons/6/67/Ada_Programming_Keywords.pdf Download PDF] &lt;small&gt;(290 kb, 59 pages)&lt;/small&gt;
; Operators : [[Ada Programming/All Operators|Show HTML]] &lt;small&gt;(232 kb)&lt;/small&gt; &amp;mdash; [//upload.wikimedia.org/wikipedia/commons/6/65/Ada_Programming_Operators.pdf Download PDF] &lt;small&gt;(189 kb, 27 pages)&lt;/small&gt;

=== Source Code ===

The Source from the Book is available for [https://sourceforge.net/project/showfiles.php?group_id=124904 download] and [http://wikibook-ada.sourceforge.net/html/index.html online browsing]. The latter allows "drill down", meaning that you can follow the links right down to the package bodies in the Ada runtime library.

==References==
{{reflist}}

== Further reading ==

=== Ada 2005 textbooks ===
*{{cite book
 |    author = John Barnes
 |     title = Programming in Ada&amp;nbsp;2005
 |      year = 2006
 | publisher = Addison Wesley
 |      isbn = 0-32-134078-7
 |       url = http://www.pearsonhighered.com/educator/academic/product/0,,0321340787,00%2Ben-USS_01DBC.html
 }}
*{{cite book
 |    author = Mordechai Ben-Ari
 |     title = Ada for Software Engineers (Second Edition with Ada 2005)
 |      year = 2009
 | publisher = Springer
 |      isbn = 978-1-84882-313-6
 |       url = http://www.springer.com/978-1-84882-313-6
 }}
*{{cite book
 |    author = Alan Burns, Andy Wellings
 |     title = Concurrent and Real-Time Programming in Ada
 |      year = 2007
 | publisher = Cambridge University Press
 |      isbn = 9780521866972
 |       url = http://www.cambridge.org/uk/catalogue/catalogue.asp?isbn=9780521866972
 }}
*{{cite book
 |    author = Nell Dale, John W. McCormick
 |     title = Ada Plus Data Structures: An Object Oriented Approach
 |      year = 2007
 |   edition = 2nd Edition
 | publisher = Jones and Bartlett
 |      isbn = 0763737941
 |       url = http://www.jbpub.com/catalog/9780763737948/ 
 }}
*{{cite book
 |    author = John W. McCormick, Frank Singhoff, Jérôme Hugues
 |     title = Building Parallel, Embedded, and Real-Time Applications with Ada
 |      year = 2011
 | publisher = Cambridge University Press
 |      isbn = 9780521197168
 |       url = http://www.cambridge.org/gb/knowledge/isbn/item5659578/?site_locale=en_GB 
 }}

=== Ada 2012 textbooks ===
*{{cite book
|   author = John Barnes
|   title = Programming in Ada 2012
|   year = 2014
|   publisher = Cambridge University Press
|   isbn = 9781107424814
|   url = http://www.cambridge.org/gb/academic/subjects/computer-science/software-engineering-and-development/programming-ada-2012?format=PB
}}

=== Manuals and guides ===
* [[Ada Style Guide|Ada Quality &amp; Style Guide:]] Guidelines for Professional Programmers (wikibook)
* [http://www.adaic.com/standards/05rat/html/Rat-TTL.html Rationale for Ada&amp;nbsp;2005], by John Barnes (2007)
* [http://www.adaic.com/standards/05rm/html/RM-TTL.html Ada&amp;nbsp;2005 Reference Manual] (2007)

=== High-Integrity Software ===
* ISO/IEC TR 15942:2000, ''[http://www.dit.upm.es/~str/ork/documents/adahis.pdf Guide for the use of the Ada programming language in high integrity systems]''. ISO Freely Available Standards [http://standards.iso.org/ittf/PubliclyAvailableStandards/]
* ISO/IEC TR 24718:2005, ''[http://www.sigada.org/ada_letters/jun2004/ravenscar_article.pdf Guide for the use of the Ada Ravenscar Profile in high integrity systems]''. ISO Freely Available Standards [http://standards.iso.org/ittf/PubliclyAvailableStandards/]
*{{cite book
 |    author = John Barnes
 |     month = April
 |      year = 2003
 |     title = High Integrity Software: The SPARK Approach to Safety and Security
 | publisher = Addison-Wesley
 |      isbn = 0-321-13616-0
 }}

== External links ==
&lt;div class="references-small" style="-moz-column-count:2; column-count:2;"&gt;
=== Resources ===
* [http://www.adaic.org/ Ada Information Clearinghouse] &amp;mdash; News and resources
* [http://www.adacore.com/home/ada_answers/ Ada Answers] &amp;mdash; Building better software with Ada
* [news://comp.lang.ada comp.lang.ada] ([http://groups.google.com/group/comp.lang.ada Google groups]) &amp;mdash; International Usenet newsgroup

=== Research and user groups ===
* Journals:
** ''[http://www.sigada.org/ada_letters/ Ada-Letters]''
** ''[http://www.ada-europe.org/auj/ Ada User Journal]'' &lt;small&gt;([http://www.ada-europe.org/auj/archive/ archive])&lt;/small&gt;
* International Conferences/Workshops:
** [http://portal.acm.org/browse_dl.cfm?linked=1&amp;part=series&amp;idx=SERIES176&amp;coll=portal&amp;dl=ACM International Real-Time Ada Workshop (IRTAW)] [&lt;small&gt;[http://www.ctr.unican.es/irtaw-15/cfp.html IRTAW&amp;nbsp;15]&lt;/small&gt;]
** [http://portal.acm.org/toc.cfm?id=SERIES332 ACM SIGAda international conference on Ada] [&lt;small&gt;[http://www.sigada.org/conf/hilt2012/ HILT 2012]&lt;/small&gt;]
** [http://www.ada-europe2013.org/ 18th International Conference on Reliable Software Technologies &amp;mdash; Ada-Europe 2013]
** [http://www.cister.isep.ipp.pt/ae2012/ 17th International Conference on Reliable Software Technologies &amp;mdash; Ada-Europe 2012]
** [http://conferences.ncl.ac.uk/adaconnection2011/ Ada Connection 2011] &lt;small&gt;([http://www.adacore.com/home/ada_answers/lectures/ada-connection-2011/ videos])&lt;/small&gt;
** [https://archive.fosdem.org/2012/schedule/track/ada_devroom.html Ada "Developers Room" at FOSDEM] &lt;small&gt;([http://people.cs.kuleuven.be/~dirk.craeynest/ada-belgium/events/12/120204-fosdem.html 2012])&lt;/small&gt;
* Local conferences:
** [http://www.cs.kuleuven.ac.be/~dirk/ada-belgium/events/local.html Ada-Belgium Conference]
** [http://adaspain.unican.es/JTAS_XV.html Ada-Spain Technical Day]
** [http://www.ada-uk-conference.co.uk/  Ada Conference UK] &lt;small&gt;(videos: [http://www.adacore.com/home/ada_answers/lectures/ada_uk09/ 2009], [http://www.adacore.com/home/ada_answers/lectures/ada_uk07/ 2007], [http://www.adacore.com/home/ada_answers/lectures/ada_uk06 2006])&lt;/small&gt;

=== Associations ===
* [http://www.acm.org/sigada/ ACM SIGAda] &amp;mdash; ACM Special Interest Group on Ada
* [http://www.ada-europe.org/ Ada-Europe]
* [http://www.ada-deutschland.de/ Ada Germany]
* [http://www.ada-ru.org/ Ada Russia]
* [http://www.cs.kuleuven.be/~dirk/ada-belgium/ Ada-Belgium]
* [http://www.ada-france.org/ Ada-France]
* [http://ada-dk.org/ Ada in Denmark]
* [http://www.ada-switzerland.ch/ Ada Switzerland]

=== Free online books/courses ===
&lt;!--TODO: categorize into books and web based courses --&gt;
* [http://www.computer-books.us/ada95.php Computer-Books.us] &amp;mdash; Online Ada books
* ''[http://www.pegasoft.ca/resources/boblap/book.html The Big Online Book of Linux Ada Programming]''
* ''[http://www.sigada.org/education/pages/Ada-Distilled-07-27-2003-Color-Version.pdf Ada Distilled]''
* ''[http://www.cs.kuleuven.be/~dirk/ada-belgium/aia/contents.html Ada in Action]''
* ''[http://www.seas.gwu.edu/~adagroup/sigada-website/barnes-html/intro.html Introducing Ada&amp;nbsp;95]''
* ''[http://web.archive.org/web/19980131094124/www.scism.sbu.ac.uk/law/lawhp.html Learn Ada on the Web]''
* ''[http://goanna.cs.rmit.edu.au/~dale/ada/aln.html Quick Ada]''
* ''[http://archive.adaic.com/docs/craft/craft.html Ada&amp;nbsp;95: The Craft of Object-Oriented Programming]'' &amp;mdash; Free textbook originally published by Prentice Hall
&lt;/div&gt;

== Authors and contributors ==
This Wikibook has been written by:

&lt;div class="references-small" style="-moz-column-count:2; column-count:2;"&gt;
* [[User:Krischik|Martin Krischik]] ([[Special:Contributions/Krischik|Contributions]])
* [[User:ManuelGR|Manuel Gómez]] ([[Special:Contributions/ManuelGR|Contributions]])
* [[User:suruena|Santiago Urueña]] ([[Special:Contributions/suruena|Contributions]])
* C.K.W. Grein ([[Special:Contributions/53.122.157.1|Contributions]])
* Bill Findlay ([[Special:Contributions/82.41.187.188|Contributions]])
* [[User:Bseidel|B. Seidel]] ([[Special:Contributions/Bseidel|Contributions]])
* [[User:SimonJWright|Simon Wright]] ([[Special:Contributions/SimonJWright|Contributions]])
* [[User:Alsocal|Allen Lew]] ([[Special:Contributions/Alsocal|Contributions]])
* [[User:oleszkie|John Oleszkiewicz]] ([[Special:Contributions/oleszkie|Contributions]]) 
* [[User:Nikai|Nicolas Kaiser]] ([[Special:Contributions/Nikai|Contributions]])
* [[User:Larry Luther|Larry Luther]] ([[Special:Contributions/Larry Luther|Contributions]])
* [[User:GeorgBauhaus|Georg Bauhaus]] ([[Special:Contributions/GeorgBauhaus|Contributions]], [[Special:Contributions/GorgeUbuasha|more contributions]])
* [[User:Sam|Samuel Tardieu]] ([[Special:Contributions/Sam|Contributions]])
* [[User:Ludovic Brenta|Ludovic Brenta]] ([[Special:Contributions/Ludovic Brenta|Contributions]])
* Ed Falis
* Pascal Obry
* Unnamed Hero ([[Special:Contributions/80.156.44.1|Contributions]])
&lt;/div&gt;

If you wish to contribute as well you should read [[Wikibooks:WikiProject Ada|Contributing]] and join us at the [[Wikibooks talk:WikiProject Ada|Contributors lounge]].

{{shelves|Ada programming language}}
&lt;noinclude&gt;
{{alphabetical|A}}
{{status|100%}}

[[es:Programación en Ada]]
[[fr:Programmation Ada]]
[[it:Ada]]
&lt;/noinclude&gt;</text>
      <sha1>hy2hsny48e7aifirx7d0pyl5t8w5cb8</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Ada 2005</title>
    <ns>0</ns>
    <id>21343</id>
    <revision>
      <id>3445774</id>
      <parentid>3284335</parentid>
      <timestamp>2018-07-23T18:33:05Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <minor/>
      <comment>/* Papers and presentations */ "GNAT and Ada 2005" updated</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16543" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|2005}}
__TOC__&lt;/noinclude&gt;

This is an overview of the major features that are available in '''Ada 2005''', the version of the Ada standard that was accepted by ISO in January 2007 (to differentiate it from its predecessors [[Ada Programming/Ada 83|Ada 83]] and [[Ada Programming/Ada 95|Ada 95]], the informal name Ada 2005 is generally agreed on). For the rationale and a more detailed (and very technical) description, see the [http://www.ada-auth.org/AI-XREF.HTML#Amend_Doc Amendment] to the Ada Reference Manual following the links to the last version of every Ada Issue document (AI).

Although the standard is now published, not all compilers will be able to handle it. Many of these additions are already implemented by the following [[w:Free Software|Free Software]] compilers:
* [http://libre.adacore.com/ GNAT GPL Edition]
* [http://gcc.gnu.org/ GCC 4.1]
* [http://www.adacore.com/home/gnatpro/ GNAT Pro 6.0.2] (the AdaCore supported version) is a complete implementation.
After downloading and installing any of them, remember to use the &lt;code&gt;-gnat05&lt;/code&gt; switch when compiling Ada 2005 code. Note that Ada 2005 is the default mode in GNAT GPL 2007 Edition.

== Language features ==

=== Character set ===

Not only does Ada 2005 now support a new 32-bit character type &amp;mdash; called &lt;tt&gt;Wide_Wide_Character&lt;/tt&gt; &amp;mdash; but the source code itself may be of this extended character set as well. Thus Russians and Indians, for example, will be able to use their native language in identifiers and comments. And mathematicians will rejoice: The whole Greek and fractur character sets are available for identifiers. For example, [[Ada Programming/Libraries/Ada.Numerics|Ada.Numerics]] will be extended with a new constant:

 π : {{Ada/kw|constant}} := Pi;

This is not a new idea &amp;mdash; [[w:GNAT|GNAT]] always had the &lt;tt&gt;-gnati''c''&lt;/tt&gt; compiler option to specify the character set [http://gcc.gnu.org/onlinedocs/gnat_ugn_unw/Character-Set-Control.html]. But now this idea has become standard, so all Ada compilers will need to support [[w:Unicode|Unicode 4.0]] for identifiers &amp;mdash; as the new standard requires.

See also:

* {{Ada/95/AI|285|Support for 16-bit and 32-bit characters}}
* {{Ada/95/AI|388|Add Greek pi to Ada.Numerics}}

=== Interfaces ===

Interfaces allow for a limited form of multiple inheritance similar to Java and C#.

You find a full description here: [[Ada Programming/Object Orientation#Interfaces|Ada Programming/OO]].

See also:
* {{Ada/95/AI|251|Abstract Interfaces to provide multiple inheritance}}
* {{Ada/95/AI|345|Protected and task interfaces}}

=== Union ===

In addition to Ada's safe variant record an unchecked C style union is now available.

You can find a full description here: [[Ada Programming/Types/record#Union]].

See also: 

* {{Ada/95/AI|216|Unchecked unions -- variant records with no run-time discriminant}}
* {{Ada/2005/RMA3|B|3|3|Pragma Unchecked_Union}}

=== With ===

The with statement got a massive upgrade. First there is the new [[Ada Programming/Packages#Limited with|limited with]] which allows two packages to ''with'' each other. Then there is [[Ada Programming/Packages#Private with|private with]] to make a package only visible inside the private part of the specification.

See also: 
* {{Ada/95/AI|217|Limited With Clauses|alt=6}}
* {{Ada/95/AI|262|Access to private units in the private part}}

=== Access types ===

==== Not null access ====

An access type definition can specify that the access type can never be null.

See [[Ada Programming/Types/access#Null exclusions]].

See also: {{Ada/95/AI|231|Access-to-constant parameters and null-excluding access subtypes}}

==== Anonymous access ====

The possible uses of anonymous access types are extended. They are allowed virtually in every type or object definition, including access to subprogram parameters. Anonymous access types may point to constant objects as well. Also, they could be declared to be not null.

With the addition of the following operations in package {{Ada/package|Standard}}, it is possible to test the equality of anonymous access types.

    {{Ada/kw|function}} "=" (Left, Right : ''universal_access'') {{Ada/kw|return}} Boolean;
    {{Ada/kw|function}} "/="(Left, Right : ''universal_access'') {{Ada/kw|return}} Boolean;

See [[Ada Programming/Types/access#Anonymous access]].

See also:
* {{Ada/95/AI|230|Generalized use of anonymous access types}}
* {{Ada/95/AI|385|Stand-alone objects of anonymous access types}}
* {{Ada/95/AI|318|Limited and anonymous access return types|alt=2}}

== Language library ==

=== Containers ===

A major addition to the language library is the generic packages for containers. If you are familiar with the C++ STL,
you will likely feel very much at home using {{Ada/package|Ada|Containers}}.
One thing, though: Ada is a block structured language. Many ideas of how to use the STL 
employ this feature of the language. For example, local subprograms can be supplied to iteration schemes.

The original Ada Issue text {{Ada/95/AI|302| Container library|alt=3}} has now been transformed into
{{Ada/2005/RM2|A|18|Containers}}.

If you know how to write Ada programs, and have a need for vectors, lists, sets, or maps (tables), please have a look
at the {{Ada/95/AI|302|AI Text|alt=3}} mentioned above. There is an ''!example'' section in the text explaining the
use of the containers in some detail.
Matthew Heaney provides a number of demonstration programs
with his reference implementation of AI-302
({{Ada/package|Ada|Containers}}) which you can find at
[http://charles.tigris.org tigris].

In [[Ada Programming/Containers]] you will find a demo using containers.

'''Historical side note''': The C++ STL draws upon the work of
David R. Musser
and
Alexander A. Stepanov.
For some of their studies of generic programming, they had been using Ada 83.
The [http://www.stepanovpapers.com/ Stepanov Papers Collection] has a few publications available.

=== Scan Filesystem Directories and Environment Variables ===

See also: 
* {{Ada/95/AI|248|Directory Operations}}
* {{Ada/95/AI|370|Environment variables}}

=== Numerics ===

Besides the new constant of package {{Ada/package|Ada.Numerics}} (see [[Ada Programming/Ada 2005#Character Set|Character Set]] above), the most important addition are the packages to operate with vectors and matrices.

See also:
* {{Ada/95/AI|388|Add Greek pi (π) to Ada.Numerics}}
* {{Ada/95/AI|296|Vector and matrix operations}}

(Related note on Ada programming tools:
AI-388 contains an interesting assessment of how compiler writers are bound
to perpetuate the lack of handling of international characters in programming support tools for now.
As an author of Ada programs, be aware that your tools provider or Ada consultant
could recommend that the program text be 7bit ASCII only.)

== Real-Time and High Integrity Systems==

See also:
* {{Ada/95/AI|297|Timing events}}
* {{Ada/95/AI|307|Execution-Time Clocks}}
* {{Ada/95/AI|354|Group execution-time budgets}}
* {{Ada/95/AI|266|Task termination procedure|alt=2}}
* {{Ada/95/AI|386|Further functions returning Time_Span values}}

=== Ravenscar profile ===

See also:
* {{Ada/95/AI|249|Ravenscar profile for high-integrity systems}}
* {{Ada/95/AI|305|New pragma and additional restriction identifiers for real-time systems}}
* {{Ada/95/AI|347|Title of Annex H}}
* {{Ada/95/AI|265|Partition Elaboration Policy for High-Integrity Systems}}

=== New scheduling policies ===

See also:
* {{Ada/95/AI|355|Priority Specific Dispatching including Round Robin}}
* {{Ada/95/AI|357|Support for Deadlines and Earliest Deadline First Scheduling}}
* {{Ada/95/AI|298|Non-Preemptive Dispatching}}

=== Dynamic priorities for protected objects ===

See also: {{Ada/95/AI|327|Dynamic ceiling priorities}}

== Summary of what's new ==

=== New keywords ===

Added 3 keywords (72 total)
* {{Ada/keyword|interface}}
* {{Ada/keyword|overriding}}
* {{Ada/keyword|synchronized}}

=== New pragmas ===

Added 11 pragmas:
* {{Ada/pragma|Assert}}
* {{Ada/pragma|Assertion_Policy}}
* {{Ada/pragma|Detect_Blocking}}
* {{Ada/pragma|No_Return}}
* {{Ada/pragma|Partition_Elaboration_Policy}}
* {{Ada/pragma|Preelaborable_Initialization}}
* {{Ada/pragma|Priority_Specific_Dispatching}}
* {{Ada/pragma|Profile}}
* {{Ada/pragma|Relative_Deadline}}
* {{Ada/pragma|Unchecked_Union}}
* {{Ada/pragma|Unsuppress}}

=== New attributes ===

Added 7 attributes:
* {{Ada/attribute|Machine_Rounding}}
* {{Ada/attribute|Mod}}
* {{Ada/attribute|Priority}}
* {{Ada/attribute|Stream_Size}}
* {{Ada/attribute|Wide_Wide_Image}}
* {{Ada/attribute|Wide_Wide_Value}}
* {{Ada/attribute|Wide_Wide_Width}}

=== New packages ===

* Assertions:
** {{Ada/package|Ada.Assertions}}

* Container library:
** {{Ada/package|Ada.Containers}}
** {{Ada/package|Ada.Containers.Vectors}}
** {{Ada/package|Ada.Containers.Doubly_Linked_Lists}}
** {{Ada/package|Ada.Containers.Generic_Array_Sort}} &lt;small&gt;(generic procedure)&lt;/small&gt;
** {{Ada/package|Ada.Containers.Generic_Constrained_Array_Sort}} &lt;small&gt;(generic procedure)&lt;/small&gt;
** {{Ada/package|Ada.Containers.Hashed_Maps}}
** {{Ada/package|Ada.Containers.Ordered_Maps}}
** {{Ada/package|Ada.Containers.Hashed_Sets}}
** {{Ada/package|Ada.Containers.Ordered_Sets}}
** {{Ada/package|Ada.Containers.Indefinite_Vectors}}
** {{Ada/package|Ada.Containers.Indefinite_Doubly_Linked_Lists}}
** {{Ada/package|Ada.Containers.Indefinite_Hashed_Maps}}
** {{Ada/package|Ada.Containers.Indefinite_Ordered_Maps}}
** {{Ada/package|Ada.Containers.Indefinite_Hashed_Sets}}
** {{Ada/package|Ada.Containers.Indefinite_Ordered_Sets}}

* Vector and matrix manipulation:
** {{Ada/package|Ada.Numerics.Real_Arrays}}
** {{Ada/package|Ada.Numerics.Complex_Arrays}}
** {{Ada/package|Ada.Numerics.Generic_Real_Arrays}}
** {{Ada/package|Ada.Numerics.Generic_Complex_Arrays}}

* General OS facilities:
** {{Ada/package|Ada.Directories}}
** {{Ada/package|Ada.Directories.Information}}
** {{Ada/package|Ada.Environment_Variables}}

* String hashing:
** {{Ada/package|Ada.Strings.Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Fixed.Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Bounded.Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Unbounded.Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Wide_Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Wide_Fixed.Wide_Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Wide_Bounded.Wide_Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Wide_Unbounded.Wide_Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Wide_Wide_Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Wide_Wide_Fixed.Wide_Wide_Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Wide_Wide_Bounded.Wide_Wide_Hash}} &lt;small&gt;(generic function)&lt;/small&gt;
** {{Ada/package|Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Hash}} &lt;small&gt;(generic function)&lt;/small&gt;

* Time operations:
** {{Ada/package|Ada.Calendar.Time_Zones}}
** {{Ada/package|Ada.Calendar.Arithmetic}}
** {{Ada/package|Ada.Calendar.Formatting}}

* Tagged types:
** {{Ada/package|Ada.Tags.Generic_Dispatching_Constructor}} &lt;small&gt;(generic function)&lt;/small&gt;

* Text packages:
** {{Ada/package|Ada.Complex_Text_IO}}
** {{Ada/package|Ada.Text_IO.Bounded_IO}}
** {{Ada/package|Ada.Text_IO.Unbounded_IO}}
** {{Ada/package|Ada.Wide_Text_IO.Bounded_IO}}
** {{Ada/package|Ada.Wide_Text_IO.Unbounded_IO}}
** {{Ada/package|Ada.Wide_Characters}}
** {{Ada/package|Ada.Wide_Wide_Characters}}

* &lt;tt&gt;Wide_Wide_Character&lt;/tt&gt; packages:
** {{Ada/package|Ada.Strings.Wide_Wide_Bounded}}
** {{Ada/package|Ada.Strings.Wide_Wide_Fixed}}
** {{Ada/package|Ada.Strings.Wide_Wide_Maps}}
** {{Ada/package|Ada.Strings.Wide_Wide_Maps.Wide_Wide_Constants}}
** {{Ada/package|Ada.Strings.Wide_Wide_Unbounded}}
** {{Ada/package|Ada.Wide_Wide_Text_IO}}
** {{Ada/package|Ada.Wide_Wide_Text_IO.Complex_IO}}
** {{Ada/package|Ada.Wide_Wide_Text_IO.Editing}}
** {{Ada/package|Ada.Wide_Wide_Text_IO.Text_Streams}}
** {{Ada/package|Ada.Wide_Wide_Text_IO.Unbounded_IO}}

* Execution-time clocks:
** {{Ada/package|Ada.Execution_Time}}
** {{Ada/package|Ada.Execution_Time.Timers}}
** {{Ada/package|Ada.Execution_Time.Group_Budgets}}

* Dispatching:
** {{Ada/package|Ada.Dispatching}}
** {{Ada/package|Ada.Dispatching.EDF}}
** {{Ada/package|Ada.Dispatching.Round_Robin}}

* Timing events:
** {{Ada/package|Ada.Real_Time.Timing_Events}}

* Task termination procedures:
** {{Ada/package|Ada.Task_Termination}}

== See also ==

=== Wikibook ===

* [[Ada Programming/Ada 83]]
* [[Ada Programming/Ada 95]]
* [[Ada Programming/Ada 2012]]
* [[Ada Programming/Object Orientation]]
* [[Ada Programming/Types/access]]
* [[Ada Programming/Keywords]]
* [[Ada Programming/Keywords/and]]
* [[Ada Programming/Keywords/interface]]
* [[Ada Programming/Attributes]]
* [[Ada Programming/Pragmas]]
* [[Ada Programming/Pragmas/Restrictions]]
* [[Ada Programming/Libraries/Ada.Containers]]
* [[Ada Programming/Libraries/Ada.Directories]]

=== Pages in the category Ada 2005 ===

*[[:{{BOOKCATEGORY|Ada Programming}}/Ada 2005 feature]]

== External links ==

=== Papers and presentations ===

*[http://www.sigada.org/conf/sigada2004/SIGAda2004-CDROM/SIGAda2004-Proceedings/Ada2005Panel.pdf Ada 2005: Putting it all together] (SIGAda 2004 presentation)
*[https://www.adacore.com/books/gnat-and-ada-2005 GNAT and Ada 2005] (SIGAda 2004 paper)
*[http://sigada.org/ada_letters/sept2003/Invitation_to_Ada_2005.pdf An invitation to Ada 2005], and the [http://www.cs.kuleuven.ac.be/~dirk/ada-belgium/events/04/040616-aec-ada2005.pdf presentation of this paper] at Ada-Europe 2004

=== Rationale ===

*''[http://www.adaic.com/standards/05rat/html/Rat-TTL.html Rationale for Ada 2005]'' by [[Wikipedia:John Barnes (computer scientist)|John Barnes]]:
*# Introduction
*# Object Oriented Model
*# Access Types
*# Structure and Visibility
*# Tasking and Real-Time
*# Exceptions, Generics, Etc.
*# Predefined Library
*# Containers
*# Epilogue
:: References
:: Index

Available as a single [http://www.adaic.com/standards/05rat/Rationale05.pdf document for printing].

=== Language Requirements ===

*[http://www.open-std.org/jtc1/sc22/WG9/n412.pdf ''Instructions to the Ada Rapporteur Group from SC22/WG9 for Preparation of the Amendment to ISO/IEC 8652''] (10 October 2002), and a [http://std.dkuug.dk/JTC1/sc22/wg9/n423.pdf presentation of this document] at SIGAda 2002

=== Ada Reference Manual ===

* [http://www.adaic.com/standards/05rm/html/RM-TTL.html '''Ada Reference Manual''', ISO/IEC 8652:1995(E) with COR.1:2001 and AMD.1:2007]
* [http://www.adaic.com/standards/05aarm/html/AA-TTL.html '''Annotated Ada Reference Manual''', ISO/IEC 8652:1995(E) with COR.1:2001 and AMD.1:2007] (colored diffs)
* [http://www.ada-auth.org/amendment.html List of Ada Amendment drafts]

=== Ada Issues ===

* [http://www.ada-auth.org/AI-XREF.HTML#Amend_Doc Amendment 200Y]
** {{Ada/95/AI|387|Introduction to Amendment}}
** {{Ada/95/AI|284|New reserved words|alt=2}}
** {{Ada/95/AI|252|Object.Operation notation}}
** {{Ada/95/AI|218|Accidental overloading when overriding|alt=3}}
** {{Ada/95/AI|348|Null procedures}}
** {{Ada/95/AI|287|Limited aggregates allowed}}
** {{Ada/95/AI|326|Incomplete types}}
** {{Ada/95/AI|317|Partial parameter lists for formal packages}}
** {{Ada/95/AI|376|Interfaces.C works for C++ as well}}
** {{Ada/95/AI|368|Restrictions for obsolescent features}}
** {{Ada/95/AI|381|New Restrictions identifier No_Dependence}}
** {{Ada/95/AI|224|pragma Unsuppress}}
** {{Ada/95/AI|161|Default-initialized objects}}
** {{Ada/95/AI|361|Raise with message}}
** {{Ada/95/AI|286|Assert pragma}}
** {{Ada/95/AI|328|Preinstantiations of Complex_IO}}
** {{Ada/95/AI|301|Operations on language-defined string types}}
** {{Ada/95/AI|340|Mod attribute}}
** {{Ada/95/AI|364|Fixed-point multiply/divide}}
** {{Ada/95/AI|267|Fast float-to-integer conversions}}
** {{Ada/95/AI|321|Definition of dispatching policies}}
** {{Ada/95/AI|329|pragma No_Return -- procedures that never return}}
** {{Ada/95/AI|362|Some predefined packages should be recategorized}}
** {{Ada/95/AI|351|Time operations}}
** {{Ada/95/AI|427|Default parameters and Calendar operations}}
** {{Ada/95/AI|270|Stream item size control}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Ada 2005]]
[[{{BOOKCATEGORY|Ada Programming}}/Ada 2005| *Ada 2005]]
[[{{BOOKCATEGORY|Ada Programming}}/Ada 2005 feature| *Ada 2005]]

&lt;/noinclude&gt;</text>
      <sha1>pngnsmqm2z5jprqxep5alrunc5z6w1x</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Algorithms</title>
    <ns>0</ns>
    <id>40339</id>
    <revision>
      <id>3519045</id>
      <parentid>3519042</parentid>
      <timestamp>2019-02-24T03:22:41Z</timestamp>
      <contributor>
        <username>Atcovi</username>
        <id>1015207</id>
      </contributor>
      <minor/>
      <comment>[[WB:REVERT|Reverted]] edits by [[Special:Contributions/201.141.201.225|201.141.201.225]] ([[User talk:201.141.201.225|talk]]) to last version by Pi zero</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="227" xml:space="preserve">&lt;noinclude&gt;__TOC__&lt;/noinclude&gt;

{{:Ada Programming/Algorithms/Intro}}
{{:Ada Programming/Algorithms/Chapter 1}}
{{:Ada Programming/Algorithms/Chapter 6}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Algorithms]]
&lt;/noinclude&gt;</text>
      <sha1>n4g00fagb4uzsert64cbjd63uos15b6</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Algorithms/Chapter 1</title>
    <ns>0</ns>
    <id>41011</id>
    <revision>
      <id>3250023</id>
      <parentid>3211565</parentid>
      <timestamp>2017-07-31T00:24:02Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2265" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Algorithms|Chapter 1}}
__TOC__&lt;/noinclude&gt;

== Chapter 1: Introduction ==

The following subprograms are implementations of the [[Algorithms/Introduction#Inventing an Algorithm|''Inventing an Algorithm'' examples]].

=== To Lower ===

The Ada example code does not append to the array as the algorithms. Instead we create an empty array of the desired length and then replace the characters inside.

 {{Ada/Sourceforge|to_lower_1.adb}}
   {{Ada/kw|function}} To_Lower (C : Character) {{Ada/kw|return}} Character {{Ada/kw|renames}}
      Ada.Characters.Handling.To_Lower;
 
   --  tolower - translates all alphabetic, uppercase characters—in str to lowercase
   {{Ada/kw|function}} To_Lower (Str : String) {{Ada/kw|return}} String {{Ada/kw|is}}
      Result : String (Str'{{Ada/attribute|Range}});
   {{Ada/kw|begin}}
      {{Ada/kw|for}} C {{Ada/kw|in}}  Str'{{Ada/attribute|Range}} {{Ada/kw|loop}}
         Result (C) := To_Lower (Str (C));
      {{Ada/kw|end}} {{Ada/kw|loop}};
      {{Ada/kw|return}} Result;
   {{Ada/kw|end}} To_Lower;

Would the append approach be impossible with Ada? No, but it would be significantly more complex and slower.

=== Equal Ignore Case ===

{{Ada/Sourceforge|to_lower_2.adb}}—equal-ignore-case—returns true if s or t are equal,
   --  ignoring case
   {{Ada/kw|function}} Equal_Ignore_Case
     (S    : String;
      T    : String)
      {{Ada/kw|return}} Boolean
   {{Ada/kw|is}}
      O : {{Ada/kw|constant}} Integer := S'{{Ada/attribute|First}} - T'{{Ada/attribute|First}};
   {{Ada/kw|begin}}
      {{Ada/kw|if}} T'{{Ada/attribute|Length}} /= S'{{Ada/attribute|Length}} {{Ada/kw|then}}
         {{Ada/kw|return}} False;  --  if they aren't the same length, they—aren't equal
      {{Ada/kw|else}}
         {{Ada/kw|for}} I {{Ada/kw|in}}  S'{{Ada/attribute|Range}} {{Ada/kw|loop}}
            {{Ada/kw|if}} To_Lower (S (I)) /=
               To_Lower (T (I + O))
            {{Ada/kw|then}}
               {{Ada/kw|return}} False;
            {{Ada/kw|end}} {{Ada/kw|if}};
         {{Ada/kw|end}} {{Ada/kw|loop}};
      {{Ada/kw|end}} {{Ada/kw|if}};
      {{Ada/kw|return}} True;
   {{Ada/kw|end}} Equal_Ignore_Case;

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Chapter 1]]
&lt;/noinclude&gt;</text>
      <sha1>q3ylsloveyelej5p0dmx93ilvkbiiwe</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Algorithms/Chapter 6</title>
    <ns>0</ns>
    <id>40334</id>
    <revision>
      <id>3250024</id>
      <parentid>3211566</parentid>
      <timestamp>2017-07-31T00:24:04Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5808" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Algorithms|Chapter 6}}
__TOC__&lt;/noinclude&gt;

== Chapter 6: Dynamic Programming ==

=== Fibonacci numbers ===

The following codes are implementations of the [[Algorithms/Dynamic Programming#Fibonacci Numbers|Fibonacci-Numbers examples]].

==== Simple Implementation ====

{{Ada/Sourceforge|fibonacci_1.adb}}

 ...

To calculate Fibonacci numbers negative values are not needed so we define an integer type which starts at 0. With the integer type defined you can calculate up until &lt;code&gt;Fib (87)&lt;/code&gt;. &lt;code&gt;Fib (88)&lt;/code&gt; will result in an &lt;code&gt;Constraint_Error&lt;/code&gt;.

   {{Ada/kw|type}} Integer_Type {{Ada/kw|is}} {{Ada/kw|range}} 0 .. 999_999_999_999_999_999;

You might notice that there is not equivalence for the &lt;code&gt;assert (n &gt;= 0)&lt;/code&gt; from the original example. Ada will test the correctness of the parameter ''before'' the function is called.

   {{Ada/kw|function}} Fib (n : Integer_Type) {{Ada/kw|return}} Integer_Type {{Ada/kw|is}}
   {{Ada/kw|begin}}
      {{Ada/kw|if}} n = 0 {{Ada/kw|then}}
         {{Ada/kw|return}} 0;
      {{Ada/kw|elsif}} n = 1 {{Ada/kw|then}}
         {{Ada/kw|return}} 1;
      {{Ada/kw|else}}
         {{Ada/kw|return}} Fib (n - 1) + Fib (n - 2);
      {{Ada/kw|end}} {{Ada/kw|if}};
   {{Ada/kw|end}} Fib;
 
 ...

==== Cached Implementation ====

{{Ada/Sourceforge|fibonacci_2.adb}}
 ...

For this implementation we need a special cache type can also store a -1 as "not calculated" marker

   {{Ada/kw|type}} Cache_Type {{Ada/kw|is}} {{Ada/kw|range}} -1 .. 999_999_999_999_999_999;

The actual type for calculating the fibonacci numbers continues to start at 0. As it is a {{Ada/kw|subtype}} of the cache type Ada will automatically convert between the two. &lt;small&gt;(the conversion is - of course - checked for validity)&lt;/small&gt;

   {{Ada/kw|subtype}} Integer_Type {{Ada/kw|is}} Cache_Type {{Ada/kw|range}}
      0 .. Cache_Type'{{Ada/attribute|Last}};

In order to know how large the cache need to be we first read the actual value from the command line.

   Value : {{Ada/kw|constant}} Integer_Type :=
      Integer_Type'Value (Ada.Command_Line.Argument (1));

The Cache array starts with element 2 since Fib (0) and Fib (1) are constants and ends with the value we want to calculate. 

   {{Ada/kw|type}} Cache_Array {{Ada/kw|is}}
      {{Ada/kw|array}} (Integer_Type {{Ada/kw|range}} 2 .. Value) {{Ada/kw|of}} Cache_Type;

The Cache is initialized to the first valid value of the cache type &amp;mdash; this is &lt;code&gt;-1&lt;/code&gt;.

   F : Cache_Array := ({{Ada/kw|others}} =&gt; Cache_Type'First);

What follows is the actual algorithm.

   {{Ada/kw|function}} Fib (N : Integer_Type) {{Ada/kw|return}} Integer_Type {{Ada/kw|is}}
   {{Ada/kw|begin}}
      {{Ada/kw|if}} N = 0 {{Ada/kw|or}} {{Ada/kw|else}} N = 1 {{Ada/kw|then}}
         {{Ada/kw|return}} N;
      {{Ada/kw|elsif}} F (N) /= Cache_Type'First {{Ada/kw|then}}
         {{Ada/kw|return}} F (N);
      {{Ada/kw|else}}
         F (N) := Fib (N - 1) + Fib (N - 2);
         {{Ada/kw|return}} F (N);
      {{Ada/kw|end}} {{Ada/kw|if}};
   {{Ada/kw|end}} Fib;
 
 ...

This implementation is faithful to the original from the [[Algorithms]] book. However, in Ada you would normally do it a little different:

{{Ada/Sourceforge|fibonacci_3.adb}}

when you use a slightly larger array which also stores the elements 0 and 1 and initializes them to the correct values

   {{Ada/kw|type}} Cache_Array {{Ada/kw|is}}
      {{Ada/kw|array}} (Integer_Type {{Ada/kw|range}} 0 .. Value) {{Ada/kw|of}} Cache_Type;
 
   F : Cache_Array :=
      (0      =&gt; 0,
       1      =&gt; 1,
       {{Ada/kw|others}} =&gt; Cache_Type'First);

and then you can remove the first {{Ada/kw|if}} path. 

 &lt;s&gt;     {{Ada/kw|if}} N = 0 {{Ada/kw|or}} {{Ada/kw|else}} N = 1 {{Ada/kw|then}}
         {{Ada/kw|return}} N;
      els&lt;/s&gt;{{Ada/kw|if}} F (N) /= Cache_Type'First {{Ada/kw|then}}

This will save about 45% of the execution-time &lt;small&gt;(measured on Linux i686)&lt;/small&gt; while needing only two more elements in the cache array.

==== Memory Optimized Implementation ====

This version looks just like the original in WikiCode.

{{Ada/Sourceforge|fibonacci_4.adb}}

   {{Ada/kw|type}} Integer_Type {{Ada/kw|is}} {{Ada/kw|range}} 0 .. 999_999_999_999_999_999;
 
   {{Ada/kw|function}} Fib (N : Integer_Type) {{Ada/kw|return}} Integer_Type {{Ada/kw|is}}
      U : Integer_Type := 0;
      V : Integer_Type := 1;
   {{Ada/kw|begin}}
      {{Ada/kw|for}} I {{Ada/kw|in}}  2 .. N {{Ada/kw|loop}}
         Calculate_Next : {{Ada/kw|declare}}
            T : {{Ada/kw|constant}} Integer_Type := U + V;
         {{Ada/kw|begin}}
            U := V;
            V := T;
         {{Ada/kw|end}} Calculate_Next;
      {{Ada/kw|end}} {{Ada/kw|loop}};
      {{Ada/kw|return}} V;
   {{Ada/kw|end}} Fib;

==== No 64 bit integers ====

Your Ada compiler does not support 64 bit integer numbers? Then you could try to use [[Ada Programming/Types/delta|decimal numbers]] instead. Using decimal numbers results in a slower program &lt;small&gt;(takes about three times as long)&lt;/small&gt; but the result will be the same.

The following example shows you how to define a suitable decimal type. Do experiment with the {{Ada/kw|digits}} and {{Ada/kw|range}} parameters until you get the optimum out of your Ada compiler.

 {{Ada/Sourceforge|fibonacci_5.adb}}

   {{Ada/kw|type}} Integer_Type {{Ada/kw|is}} {{Ada/kw|delta}} 1.0 {{Ada/kw|digits}} 18 {{Ada/kw|range}}
      0.0 .. 999_999_999_999_999_999.0;

You should know that floating point numbers are unsuitable for the calculation of fibonacci numbers. They will not report an error condition when the number calculated becomes too large &amp;mdash; instead they will lose in precision which makes the result meaningless.

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Chapter 6]]
&lt;/noinclude&gt;</text>
      <sha1>7od7zs0uwpoeu7zxxfvl560vc27nzbk</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Algorithms/Intro</title>
    <ns>0</ns>
    <id>58569</id>
    <revision>
      <id>3250025</id>
      <parentid>3211567</parentid>
      <timestamp>2017-07-31T00:24:05Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* top */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1128" xml:space="preserve">Welcome to the Ada implementations of the [[Algorithms]] Wikibook.  For those who are new to [[Ada Programming]] a few notes:

* All examples are fully functional with all the needed input and output operations. However, only the code needed to outline the algorithms at hand is copied into the text - the full samples are available via the download links. &lt;small&gt;(Note: It can take up to 48 hours until the cvs is updated)&lt;/small&gt;.
* We seldom use predefined types in the sample code but define special types suitable for the algorithms at hand.
* Ada allows for default function parameters; however, we always fill in and name all parameters, so the reader can see which options are available.
* We seldom use shortcuts - like using the attributes {{Ada/attribute|Image}} or {{Ada/attribute|Value}} for String &lt;=&gt; Integer conversions.

All these rules make the code more elaborate than perhaps needed.  However, we also hope it makes the code easier to understand


&lt;noinclude&gt;'''''This page is added through transclusion to other modules in the Ada Programming Wikibook.'''''&lt;/noinclude&gt;

[[{{BOOKCATEGORY|Ada Programming}}]]</text>
      <sha1>awt0i8q9jir9zlclxhcn3754355xtsq</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Attributes</title>
    <ns>0</ns>
    <id>16955</id>
    <revision>
      <id>3459517</id>
      <parentid>3250028</parentid>
      <timestamp>2018-09-05T18:25:47Z</timestamp>
      <contributor>
        <ip>2003:C7:83E3:1A8A:AD18:159A:FCE7:397F</ip>
      </contributor>
      <comment>/* A &amp;ndash; B */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15701" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Attributes}}
__TOC__&lt;/noinclude&gt;

== Language summary attributes ==

The concept of '''attributes''' is pretty unique to [[Ada Programming|Ada]]. Attributes allow you to get &amp;mdash;and sometimes set&amp;mdash; information about objects or other language entities such as types. A good example is the {{Ada/attribute|Size}} attribute. It describes the size of an object or a type in bits.

 A : Natural := Integer'{{Ada/attribute|Size}}; {{Ada/--|A is now 32 (with the [[w:GNAT|GNAT]] compiler for the x86 architecture)}}

However, unlike the {{C++ Programming/kw|sizeof}} operator from [[C Programming|C]]/[[C++ Programming|C++]] the {{Ada/attribute|Size}} attribute can also be set:

 {{Ada/kw|type}} Byte {{Ada/kw|is}} {{Ada/kw|range}} -128 .. 127;  {{Ada/--|The range fits into 8 bits but the}}
                                {{Ada/--|compiler is still free to choose.}}
 {{Ada/kw|for}}  Byte'{{Ada/attribute|Size}} {{Ada/kw|use}} 8;           {{Ada/--|Now we force the compiler to use 8 bits.}}

Of course not all attributes can be set. An attribute starts with a tick ' and is followed by its name. The compiler determines by context if the tick is the beginning of an attribute, a character literal or a quantified expression.

 A : Character := Character'{{Ada/attribute|Val}} (32) {{Ada/--|A is now a space}}
 B : Character := ' ';               {{Ada/--|B is also a space}}

== List of language defined attributes ==

; Ada 2005 : This is a new [[Ada Programming/Ada 2005|Ada 2005]] attribute.
; Ada 2012 : This is a new [[Ada Programming/Ada 2012|Ada 2012]] attribute.
; Obsolescent : This is a deprecated attribute and should not be used in new code.

=== A &amp;ndash; B ===

* [[Ada Programming/Attributes/'Access|'Access]]
* [[Ada Programming/Attributes/'Address|'Address]]
* [[Ada Programming/Attributes/'Adjacent|'Adjacent]]
* [[Ada Programming/Attributes/'Aft|'Aft]]
* [[Ada Programming/Attributes/'Alignment|'Alignment]]
* [[Ada Programming/Attributes/'Base|'Base]]
* [[Ada Programming/Attributes/'Bit_Order|'Bit_Order]]
* [[Ada Programming/Attributes/'Body_Version|'Body_Version]]

=== C ===

* [[Ada Programming/Attributes/'Callable|'Callable]]
* [[Ada Programming/Attributes/'Caller|'Caller]]
* [[Ada Programming/Attributes/'Ceiling|'Ceiling]]
* [[Ada Programming/Attributes/'Class|'Class]]
* [[Ada Programming/Attributes/'Component Size|'Component_Size]]
* [[Ada Programming/Attributes/'Compose|'Compose]]
* [[Ada Programming/Attributes/'Constrained|'Constrained]]
* [[Ada Programming/Attributes/'Copy Sign|'Copy_Sign]]
* [[Ada Programming/Attributes/'Count|'Count]]

=== D &amp;ndash; F ===

* [[Ada Programming/Attributes/'Definite|'Definite]]
* [[Ada Programming/Attributes/'Delta|'Delta]]
* [[Ada Programming/Attributes/'Denorm|'Denorm]]
* [[Ada Programming/Attributes/'Digits|'Digits]]
* [[Ada Programming/Attributes/'Emax|'Emax]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Attributes/'Exponent|'Exponent]]
* [[Ada Programming/Attributes/'External Tag|'External_Tag]]
* [[Ada Programming/Attributes/'Epsilon|'Epsilon]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Attributes/'First|'First]]
* [[Ada Programming/Attributes/'First Bit|'First_Bit]]
* [[Ada Programming/Attributes/'Floor|'Floor]]
* [[Ada Programming/Attributes/'Fore|'Fore]]
* [[Ada Programming/Attributes/'Fraction|'Fraction]]

=== G &amp;ndash; L ===

* [[Ada Programming/Attributes/'Has Same Storage|'Has_Same_Storage]] &lt;small&gt;(Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Attributes/'Identity|'Identity]]
* [[Ada Programming/Attributes/'Image|'Image]]
* [[Ada Programming/Attributes/'Input|'Input]]
* [[Ada Programming/Attributes/'Large|'Large]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Attributes/'Last|'Last]]
* [[Ada Programming/Attributes/'Last Bit|'Last_Bit]]
* [[Ada Programming/Attributes/'Leading Part|'Leading_Part]]
* [[Ada Programming/Attributes/'Length|'Length]]

=== M ===

* [[Ada Programming/Attributes/'Machine|'Machine]]
* [[Ada Programming/Attributes/'Machine Emax|'Machine_Emax]]
* [[Ada Programming/Attributes/'Machine Emin|'Machine_Emin]]
* [[Ada Programming/Attributes/'Machine Mantissa|'Machine_Mantissa]]
* [[Ada Programming/Attributes/'Machine Overflows|'Machine_Overflows]]
* [[Ada Programming/Attributes/'Machine Radix|'Machine_Radix]]
* [[Ada Programming/Attributes/'Machine Rounding|'Machine_Rounding]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Attributes/'Machine Rounds|'Machine_Rounds]]
* [[Ada Programming/Attributes/'Mantissa|'Mantissa]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Attributes/'Max|'Max]]
* [[Ada Programming/Attributes/'Max Alignment For Allocation|'Max_Alignment_For_Allocation]] &lt;small&gt;(Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Attributes/'Max Size In Storage Elements|'Max_Size_In_Storage_Elements]]
* [[Ada Programming/Attributes/'Min|'Min]]
* [[Ada Programming/Attributes/'Mod|'Mod]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Attributes/'Model|'Model]]
* [[Ada Programming/Attributes/'Model Emin|'Model_Emin]]
* [[Ada Programming/Attributes/'Model Epsilon|'Model_Epsilon]]
* [[Ada Programming/Attributes/'Model Mantissa|'Model_Mantissa]]
* [[Ada Programming/Attributes/'Model Small|'Model_Small]]
* [[Ada Programming/Attributes/'Modulus|'Modulus]]

=== O &amp;ndash; R ===

* [[Ada Programming/Attributes/'Old|'Old]] &lt;small&gt;(Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Attributes/'Output|'Output]]
* [[Ada Programming/Attributes/'Overlaps Storage|'Overlaps_Storage]] &lt;small&gt;(Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Attributes/'Partition ID|'Partition_ID]]
* [[Ada Programming/Attributes/'Pos|'Pos]]
* [[Ada Programming/Attributes/'Position|'Position]]
* [[Ada Programming/Attributes/'Pred|'Pred]]
* [[Ada Programming/Attributes/'Priority|'Priority]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Attributes/'Range|'Range]]
* [[Ada Programming/Attributes/'Read|'Read]]
* [[Ada Programming/Attributes/'Remainder|'Remainder]]
* [[Ada Programming/Attributes/'Result|'Result]] &lt;small&gt;(Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Attributes/'Round|'Round]]
* [[Ada Programming/Attributes/'Rounding|'Rounding]]

=== S ===

* [[Ada Programming/Attributes/'Safe Emax|'Safe_Emax]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Attributes/'Safe First|'Safe_First]]
* [[Ada Programming/Attributes/'Safe Large|'Safe_Large]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Attributes/'Safe Last|'Safe_Last]]
* [[Ada Programming/Attributes/'Safe Small|'Safe_Small]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Attributes/'Scale|'Scale]]
* [[Ada Programming/Attributes/'Scaling|'Scaling]]
* [[Ada Programming/Attributes/'Signed Zeros|'Signed_Zeros]]
* [[Ada Programming/Attributes/'Size|'Size]]
* [[Ada Programming/Attributes/'Small|'Small]]
* [[Ada Programming/Attributes/'Storage Pool|'Storage_Pool]]
* [[Ada Programming/Attributes/'Storage Size|'Storage_Size]]
* [[Ada Programming/Attributes/'Stream Size|'Stream_Size]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Attributes/'Succ|'Succ]]

=== T &amp;ndash; V ===

* [[Ada Programming/Attributes/'Tag|'Tag]]
* [[Ada Programming/Attributes/'Terminated|'Terminated]]
* [[Ada Programming/Attributes/'Truncation|'Truncation]]
* [[Ada Programming/Attributes/'Unbiased Rounding|'Unbiased_Rounding]]
* [[Ada Programming/Attributes/'Unchecked Access|'Unchecked_Access]]
* [[Ada Programming/Attributes/'Val|'Val]]
* [[Ada Programming/Attributes/'Valid|'Valid]]
* [[Ada Programming/Attributes/'Value|'Value]]
* [[Ada Programming/Attributes/'Version|'Version]]

=== W &amp;ndash; Z ===

* [[Ada Programming/Attributes/'Wide Image|'Wide_Image]]
* [[Ada Programming/Attributes/'Wide Value|'Wide_Value]]
* [[Ada Programming/Attributes/'Wide Wide Image|'Wide_Wide_Image]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Attributes/'Wide Wide Value|'Wide_Wide_Value]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Attributes/'Wide Wide Width|'Wide_Wide_Width]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Attributes/'Wide Width|'Wide_Width]]
* [[Ada Programming/Attributes/'Width|'Width]]
* [[Ada Programming/Attributes/'Write|'Write]]

== List of implementation defined attributes ==

The following attributes are not available in all Ada compilers, only in those that had implemented them. 

Currently, there are only listed the implementation-defined attributes of a few compilers. You can help Wikibooks [http://en.wikibooks.org/w/index.php?title=Programming:Ada:Attributes&amp;action=edit adding] specific attributes of other compilers:

; GNAT : [http://www.adacore.com/wp-content/files/auto_update/gnat-unw-docs/html/gnat_rm_3.html Implementation-defined attribute] of the [[Ada Programming/GNAT|GNAT]] compiler from AdaCore/FSF.
; HP Ada : [http://h71000.www7.hp.com/commercial/ada/ada_lrm.pdf Implementation-defined attribute] of the [http://h71000.www7.hp.com/commercial/ada/ada_index.html HP Ada] compiler (formerly known as "DEC Ada").
; ICC : Implementation-defined attribute&lt;ref&gt;"4.2 ICC-Defined Attributes", ''ICC Ada Implementation Reference &amp;mdash; ICC Ada Version 8.2.5 for i960MC Targets'', document version 2.11.4 [http://www.irvine.com/support/general/]&lt;/ref&gt; of the Irvine [http://www.irvine.com/products.html ICC] compiler.
; PowerAda : [http://www.ocsystems.com/user_guide/powerada/html/powerada-117.html#HEADING117-0 Implementation-defined attribute] of OC Systems' [http://www.ocsystems.com/prod_powerada.html PowerAda].
; SPARCompiler : [http://docs.sun.com/app/docs/doc/802-3641/6i7h8si5i?a=view#F.Implementation-Dependent_Characteristi-30 Implementation-defined attribute] of Sun's [http://docs.sun.com/app/docs/coll/15.4 SPARCompiler Ada].

=== A &amp;ndash; D ===

* [[Ada Programming/Attributes/'Abort Signal|'Abort_Signal]] (GNAT)
* [[Ada Programming/Attributes/'Address Size|'Address_Size]] (GNAT)
* [[Ada Programming/Attributes/'Architecture|'Architecture]] (ICC)
* [[Ada Programming/Attributes/'Asm Input|'Asm_Input]] (GNAT)
* [[Ada Programming/Attributes/'Asm Output|'Asm_Output]] (GNAT)
* [[Ada Programming/Attributes/'AST Entry|'AST_Entry]] (GNAT, HP Ada)
* [[Ada Programming/Attributes/'Bit|'Bit]] (GNAT, HP Ada)
* [[Ada Programming/Attributes/'Bit Position|'Bit_Position]] (GNAT)
* [[Ada Programming/Attributes/'CG Mode|'CG_Mode]] (ICC)
* [[Ada Programming/Attributes/'Code Address|'Code_Address]] (GNAT)
* [[Ada Programming/Attributes/'Compiler Key|'Compiler_Key]] (SPARCompiler)
* [[Ada Programming/Attributes/'Compiler Version|'Compiler_Version]] (SPARCompiler)
* [[Ada Programming/Attributes/'Declared|'Declared]] (ICC)
* [[Ada Programming/Attributes/'Default Bit Order|'Default_Bit_Order]] (GNAT)
* [[Ada Programming/Attributes/'Dope Address|'Dope_Address]] (SPARCompiler)
* [[Ada Programming/Attributes/'Dope Size|'Dope_Size]] (SPARCompiler)

=== E &amp;ndash; H ===

* [[Ada Programming/Attributes/'Elaborated|'Elaborated]] (GNAT)
* [[Ada Programming/Attributes/'Elab Body|'Elab_Body]] (GNAT)
* [[Ada Programming/Attributes/'Elab Spec|'Elab_Spec]] (GNAT)
* [[Ada Programming/Attributes/'Emax|'Emax]] (GNAT)
* [[Ada Programming/Attributes/'Enabled|'Enabled]] (GNAT)
* [[Ada Programming/Attributes/'Entry Number|'Entry_Number]] (SPARCompiler)
* [[Ada Programming/Attributes/'Enum Rep|'Enum_Rep]] (GNAT)
* [[Ada Programming/Attributes/'Enum Val|'Enum_Val]] (GNAT)
* [[Ada Programming/Attributes/'Epsilon|'Epsilon]] (GNAT)
* [[Ada Programming/Attributes/'Exception Address|'Exception_Address]] (ICC)
* [[Ada Programming/Attributes/'Extended Aft|'Extended_Aft]] (PowerAda)
* [[Ada Programming/Attributes/'Extended Base|'Extended_Base]] (PowerAda)
* [[Ada Programming/Attributes/'Extended Digits|'Extended_Digits]] (PowerAda)
* [[Ada Programming/Attributes/'Extended Fore|'Extended_Fore]] (PowerAda)
* [[Ada Programming/Attributes/'Extended Image|'Extended_Image]] (PowerAda)
* [[Ada Programming/Attributes/'Extended Value|'Extended_Value]] (PowerAda)
* [[Ada Programming/Attributes/'Extended Width|'Extended_Width]] (PowerAda)
* [[Ada Programming/Attributes/'Extended Wide Image|'Extended_Wide_Image]] (PowerAda)
* [[Ada Programming/Attributes/'Extended Wide Value|'Extended_Wide_Value]] (PowerAda)
* [[Ada Programming/Attributes/'Extended Wide Width|'Extended_Wide_Width]] (PowerAda)
* [[Ada Programming/Attributes/'Fixed Value|'Fixed_Value]] (GNAT)
* [[Ada Programming/Attributes/'Has Access Values|'Has_Access_Values]] (GNAT)
* [[Ada Programming/Attributes/'Has Discriminants|'Has_Discriminants]] (GNAT)
* [[Ada Programming/Attributes/'High Word|'High_Word]] (ICC)
* [[Ada Programming/Attributes/'Homogeneous|'Homogeneous]] (SPARCompiler)

=== I &amp;ndash; N ===

* [[Ada Programming/Attributes/'Img|'Img]] (GNAT)
* [[Ada Programming/Attributes/'Integer Value|'Integer_Value]] (GNAT)
* [[Ada Programming/Attributes/'Invalid Value|'Invalid_Value]] (GNAT)
* [[Ada Programming/Attributes/'Linear Address|'Linear_Address]] (ICC)
* [[Ada Programming/Attributes/'Low Word|'Low_Word]] (ICC)
* [[Ada Programming/Attributes/'Machine Size|'Machine_Size]] (GNAT, HP Ada)
* [[Ada Programming/Attributes/'Max Interrupt Priority|'Max_Interrupt_Priority]] (GNAT)
* [[Ada Programming/Attributes/'Max Priority|'Max_Priority]] (GNAT)
* [[Ada Programming/Attributes/'Maximum Alignment|'Maximum_Alignment]] (GNAT)
* [[Ada Programming/Attributes/'Mechanism Code|'Mechanism_Code]] (GNAT)
* [[Ada Programming/Attributes/'Null Parameter|'Null_Parameter]] (GNAT, HP Ada)

=== O &amp;ndash; T ===

* [[Ada Programming/Attributes/'Object Size|'Object_Size]] (GNAT)
* [[Ada Programming/Attributes/'Old|'Old]] (GNAT)
* [[Ada Programming/Attributes/'Passed By Reference|'Passed_By_Reference]] (GNAT)
* [[Ada Programming/Attributes/'Pool Address|'Pool_Address]] (GNAT)
* [[Ada Programming/Attributes/'Range Length|'Range_Length]] (GNAT)
* [[Ada Programming/Attributes/'Ref|'Ref]] (SPARCompiler)
* [[Ada Programming/Attributes/'Storage Unit|'Storage_Unit]] (GNAT)
* [[Ada Programming/Attributes/'Stub Type|'Stub_Type]] (GNAT)
* [[Ada Programming/Attributes/'Target|'Target]] (ICC)
* [[Ada Programming/Attributes/'Target Name|'Target_Name]] (GNAT)
* [[Ada Programming/Attributes/'Task ID|'Task_ID]] (SPARCompiler)
* [[Ada Programming/Attributes/'Tick|'Tick]] (GNAT)
* [[Ada Programming/Attributes/'To Address|'To_Address]] (GNAT)
* [[Ada Programming/Attributes/'Type Class|'Type_Class]] (GNAT, HP Ada)
* [[Ada Programming/Attributes/'Type Key|'Type_Key]] (SPARCompiler)

=== U &amp;ndash; Z ===

* [[Ada Programming/Attributes/'UET Address|'UET_Address]] (GNAT)
* [[Ada Programming/Attributes/'Unconstrained Array|'Unconstrained_Array]] (GNAT)
* [[Ada Programming/Attributes/'Universal Literal String|'Universal_Literal_String]] (GNAT)
* [[Ada Programming/Attributes/'Unrestricted Access|'Unrestricted_Access]] (GNAT, ICC)
* [[Ada Programming/Attributes/'VADS Size|'VADS_Size]] (GNAT)
* [[Ada Programming/Attributes/'Value Size|'Value_Size]] (GNAT)
* [[Ada Programming/Attributes/'Wchar T Size|'Wchar_T_Size]] (GNAT)
* [[Ada Programming/Attributes/'Word Size|'Word_Size]] (GNAT)

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Aspects]]
* [[Ada Programming/Pragmas]]
* [[Ada Programming/Keywords]]

=== Ada Reference Manual ===

==== Ada 83 ====
* {{Ada/83/RM|4|1|4|title=Attributes}}
* {{Ada/83/RM|A|title=Predefined Language Attributes}}

==== Ada 95 ====

* {{Ada/95/RM|4|1|4|title=Attributes}}
* {{Ada/95/RM|K|title=(informative) Language-Defined Attributes}}

==== Ada 2005 ====

* {{Ada/2005/RM|4|1|4|title=Attributes}}
* {{Ada/2005/RM|K|title=(informative) Language-Defined Attributes}}

==== Ada 2012 ====

* {{Ada/2012/RM|4|1|4|title=Attributes}}
* {{Ada/2012/RM|K|title=(informative) Language-Defined Attributes}}

== References ==
&lt;references/&gt;

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Attributes]]
[[es:Programación en Ada/Atributos]]
&lt;/noinclude&gt;</text>
      <sha1>br4ft29a1gxsaowubj0i5ppejyj4u32</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Attributes/'Bit Order:3</title>
    <ns>0</ns>
    <id>159720</id>
    <revision>
      <id>3336836</id>
      <parentid>3336835</parentid>
      <timestamp>2017-12-01T17:19:57Z</timestamp>
      <contributor>
        <ip>192.107.155.6</ip>
      </contributor>
      <comment>Still too much whitespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1597" xml:space="preserve">The '''[[Ada Programming/Attributes/'Bit Order|'Bit_Order]] attribute is not intended to convert data between a big-endian and a little-endian machine''' (it affects bit numbering, not byte order). The compiler will not generate code to reorder multi-byte fields when a non-native bit order is specified.&lt;ref&gt;{{Ada/95/cite AI
 |          id = 00133
 |       title = Controlling bit ordering
 |       class = binding interpretation
 |        date = 1996-05-07
 |         rev = 1.17
 |       quote = Bit_Order clauses are concerned with the numbering of bits and not concerned with data flipping interoperability.
}}&lt;/ref&gt;&lt;ref&gt;{{Ada/2005/Cite RM|13|5|3|
|      title = Bit Ordering
|        par = 9/2
|         id = I4589
| accessdate = 2008-06-02
|      quote = Bit_Order clauses make it possible to write record_representation_clauses that can be ported between machines having different bit ordering. They do not guarantee transparent exchange of data between such machines.
}}&lt;/ref&gt;&lt;ref&gt;{{cite web
 |        url = http://www.adacore.com/adaanswers/gems/gem-140-bridging-the-endianness-gap/
 |      title = Gem #140: Bridging the Endianness Gap
 | accessdate = 2013-01-31
 |     author = Thomas Quinot
 |       year = 2013
 |      month = January
 |  publisher = AdaCore
 |      quote = the order in which the bytes that constitute machine scalars are written to memory is not changed by the Bit_Order attribute -- only the indices of bits within machine scalars are changed.
}}&lt;/ref&gt;

==References==
{{reflist}}
&lt;noinclude&gt;[[{{BOOKCATEGORY|Ada Programming}}/Common errors|Bit Order]]&lt;/noinclude&gt;</text>
      <sha1>0c3d52l3lahpspj38ypjfpqgfv2inl2</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Attributes/'Size:3</title>
    <ns>0</ns>
    <id>176805</id>
    <revision>
      <id>3211351</id>
      <parentid>1891370</parentid>
      <timestamp>2017-05-01T12:25:24Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="596" xml:space="preserve">A common Ada programming mistake is to assume that specifying 'Size for a type T forces the compiler to allocate exactly this number of bits for objects of this type. This is not true. '''The specified T[[Ada Programming/Attributes/'Size|'Size]] will force the compiler to use this size for components in packed arrays and records and in Unchecked_Conversion''', but the compiler is still free to allocate more bits for stand-alone objects.

Use 'Size on the object itself to force the object to the specified value.&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Common errors|Size]]
&lt;/noinclude&gt;</text>
      <sha1>q55ktgv8vh3kpz93k1pw7ns1orv2ok4</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Basic</title>
    <ns>0</ns>
    <id>16454</id>
    <revision>
      <id>3250071</id>
      <parentid>3211368</parentid>
      <timestamp>2017-07-31T00:24:57Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11340" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Basic}}
__TOC__&lt;/noinclude&gt;

==  "Hello, world!" programs ==

=== "Hello, world!" ===

A common example of a language's [[wikipedia:Syntax (programming languages)|syntax]] is the [[wikipedia:Hello world program|Hello world program]]. Here is a straightforward Ada Implementation:

 {{Ada/Sourceforge|hello_world_1.adb}}
 
 {{Ada/kw|with}} {{Ada/pk|Ada|Text_IO}};
 
 {{Ada/kw|procedure}} Hello {{Ada/kw|is}}
 {{Ada/kw|begin}}
    Ada.Text_IO.Put_Line("Hello, world!");
 {{Ada/kw|end}} Hello;

The '''with''' statement adds the package &lt;code&gt;Ada.Text_IO&lt;/code&gt; to the program.
This package comes with every Ada compiler and
contains all functionality needed for textual Input/Output.
The '''with''' statement makes the declarations of &lt;code&gt;Ada.Text_IO&lt;/code&gt;
available to procedure &lt;code&gt;Hello&lt;/code&gt;.
This includes the types declared in &lt;code&gt;Ada.Text_IO&lt;/code&gt;,
the subprograms of &lt;code&gt;Ada.Text_IO&lt;/code&gt;
and everything else that is declared in &lt;code&gt;Ada.Text_IO&lt;/code&gt; for public use.
In Ada, packages can be used as toolboxes.
&lt;code&gt;Text_IO&lt;/code&gt; provides a collection of tools for textual input and output
in one easy-to-access module. Here is a partial glimpse at package {{Ada/pk|Ada|Text_IO}}:

 {{Ada/kw|package}} {{Ada/pk|Ada|Text_IO}} {{Ada/kw|is}}
 
    {{Ada/kw|type}} File_Type {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}}{{Ada/dl|;}}
 
    {{Ada/comment| more stuff}}
 
    {{Ada/kw|procedure}} Open{{Ada/dl|(}}File {{Ada/dl|:}} {{Ada/kw|in}} {{Ada/kw|out}} File_Type{{Ada/dl|;}}
                   Mode {{Ada/dl|:}} File_Mode{{Ada/dl|;}}
                   Name {{Ada/dl|:}} String{{Ada/dl|;}}
                   Form {{Ada/dl|:}} String {{Ada/dl|1=:=}} ""{{Ada/dl|)}}{{Ada/dl|;}}
 
    {{Ada/comment| more stuff}}
 
    {{Ada/kw|procedure}} Put_Line {{Ada/dl|(}}Item {{Ada/dl|:}} String{{Ada/dl|)}}{{Ada/dl|;}}
 
    {{Ada/comment| more stuff}}
 
 {{Ada/kw|end}} Ada{{Ada/dl|.}}Text_IO{{Ada/dl|;}}

Next in the program we declare a main procedure. An Ada main procedure does not need to be called "main".
Any simple name is fine so here it is ''Hello''.
Compilers might allow procedures or functions to be used as main subprograms.
&lt;ref&gt;Main subprograms may even have parameters;
it is implementation-defined what kinds of subprograms can be used as main subprograms.
The reference manual explains the details in {{Ada/RM|10|2|title=LRM 10.2(29)}}:
&amp;ldquo;…, an implementation is required to support all main subprograms that are public parameterless library procedures.&amp;rdquo; ''Library'' means not nested
in another subprogram, for example, and other things that needn't concern us now.&lt;/ref&gt;

The call on &lt;code&gt;Ada.Text_IO.Put_Line&lt;/code&gt; writes the text "Hello World"
to the current output file.

A '''with''' clause makes the content of a package ''visible by selection'':
we need to prefix the procedure name &lt;code&gt;Put_Line&lt;/code&gt; from the &lt;code&gt;Text_IO&lt;/code&gt;
package with its full package name &lt;code&gt;Ada.Text_IO&lt;/code&gt;.
If you need procedures from a package more often some form of shortcut is needed. There are two options open:

=== "Hello, world!" with renames  ===

By renaming a package it is possible to give a shorter alias to any package
name.&lt;ref&gt;{{Ada/kw|renames}} can also be used for procedures, functions, variables, array elements. It can not be used for types - a type rename can be accomplished with {{Ada/kw|subtype}}.&lt;/ref&gt;
This reduces the typing involved while still keeping some of the readability.

 {{Ada/Sourceforge|hello_world_2.adb}}
  
 {{Ada/kw|with}} {{Ada/pk|Ada|Text_IO}};
 
 {{Ada/kw|procedure}} Hello {{Ada/kw|is}}
    {{Ada/kw|package}} IO {{Ada/kw|renames}} Ada.Text_IO;
 {{Ada/kw|begin}}
    IO.Put_Line("Hello, world!");
    IO.New_Line;
    IO.Put_Line("I am an Ada program with package rename.");
 {{Ada/kw|end}} Hello;

=== "Hello, world!" with use ===

The {{Ada/kw|use}} clause makes all the content of a package directly visible. It allows even less typing but removes some of the readability.  One suggested "rule of thumb": {{Ada/kw|use}} for the most used package and {{Ada/kw|renames}} for all other packages. You might have another rule (for example, always {{Ada/kw|use}} {{Ada/pk|Ada.Text_IO}}, never {{Ada/kw|use}} anything else).

 {{Ada/Sourceforge|hello_world_3.adb}}
 
 {{Ada/kw|with}} {{Ada/pk|Ada|Text_IO}};
 {{Ada/kw|use}} Ada.Text_IO;
 
 {{Ada/kw|procedure}} Hello {{Ada/kw|is}}
   
 {{Ada/kw|begin}}
    Put_Line("Hello, world!");
    New_Line;
    Put_Line("I am an Ada program with package use.");
 {{Ada/kw|end}} Hello;

{{Ada/kw|use}} can be used for packages and in the form of {{Ada/kw|use}} {{Ada/kw|type}} for types. {{Ada/kw|use}} {{Ada/kw|type}} makes only the [[Ada Programming/Operators|operators]] of the given type directly visible but not any other operations on the type.

== Compiling the "Hello, world!" program ==
For information on how to build the "Hello, world!" program on various compilers, see the [[Ada Programming/Building|Building]] chapter.

=== FAQ: Why is "Hello, world!" so big? ===

Ada beginners frequently ask how it can be that such a simple program as "Hello, world!" results in such a large executable. The reason has nothing to do with Ada but can usually be found in the compiler and linker options used &amp;mdash; or better, not used.

Standard behavior for Ada compilers &amp;mdash; or good compilers in general &amp;mdash; is not to create the best code possible but to be optimized for ease of use. This is done to ensure a system that works "out of the box" and thus does not frighten away potential new users with unneeded complexity.

The GNAT project files, which you can [https://sourceforge.net/project/showfiles.php?group_id=124904 download] alongside the example programs, use better tuned compiler, binder and linker options. If you use those your "Hello, world!" will be a lot smaller:

  32K ./Linux-i686-Debug/hello_world_1
 8.0K ./Linux-i686-Release/hello_world_1
  36K ./Linux-x86_64-Debug/hello_world_1
  12K ./Linux-x86_64-Release/hello_world_1
 1.1M ./Windows_NT-i686-Debug/hello_world_1.exe
  16K ./Windows_NT-i686-Release/hello_world_1.exe
  32K ./VMS-AXP-Debug/hello_world_1.exe
  12K ./VMS-AXP-Release/hello_world_1.exe

For comparison the sizes for a plain '''gnat make''' compile:

 497K hello_world_1 (Linux i686)
 500K hello_world_1 (Linux x86_64)
 1.5M hello_world_1.exe (Windows_NT i686)
 589K hello_world_1.exe (VMS AXP)

Worth mentioning is that hello_world (Ada,C,C++) compiled with GNAT/MSVC 7.1/GCC(C) all produces executables with approximately the same size given comparable optimisation and linker methods.

== Things to look out for ==

It will help to be prepared to spot a number of significant features of Ada that are important for learning its syntax and semantics.

=== Comb Format ===

There is a ''comb format'' in all the control structures and module structures. See the following examples for the ''comb format''. You don't have to understand what the examples do yet - just look for the similarities in layout.

 {{Ada/kw|if}} ''Boolean expression'' {{Ada/kw|then}}
    ''statements''
 {{Ada/kw|elsif}} ''Boolean expression'' {{Ada/kw|then}}
    ''statements''
 {{Ada/kw|else}}
    ''statements''
 {{Ada/kw|end}} {{Ada/kw|if}};

 {{Ada/kw|while}} ''Boolean expression'' {{Ada/kw|loop}}
    ''statements''
 {{Ada/kw|end}} {{Ada/kw|loop}};

 {{Ada/kw|for}} ''variable'' {{Ada/kw|in}} ''range'' {{Ada/kw|loop}}
    ''statements''
 {{Ada/kw|end}} {{Ada/kw|loop}};

 {{Ada/kw|declare}}
    ''declarations''
 {{Ada/kw|begin}}
    ''statements''
 {{Ada/kw|exception}}
    ''handlers''
 {{Ada/kw|end}};

 {{Ada/kw|procedure}} P (''parameters'' : {{Ada/kw|in}} {{Ada/kw|out}} ''type'') {{Ada/kw|is}}
    ''declarations''
 {{Ada/kw|begin}}
    ''statements''
 {{Ada/kw|exception}}
    ''handlers''
 {{Ada/kw|end}} P;

 {{Ada/kw|function}} F (''parameters'' : {{Ada/kw|in}} ''type'') {{Ada/kw|return}} ''type'' {{Ada/kw|is}}
    ''declarations''
 {{Ada/kw|begin}}
    ''statements''
 {{Ada/kw|exception}}
    ''handlers''
 {{Ada/kw|end}} F;

 {{Ada/kw|package}} P {{Ada/kw|is}}
    ''declarations''
 {{Ada/kw|private}}
    ''declarations''
 {{Ada/kw|end}} P;

 {{Ada/kw|generic}}
    ''declarations''
 {{Ada/kw|package}} P {{Ada/kw|is}}
    ''declarations''
 {{Ada/kw|private}}
    ''declarations''
 {{Ada/kw|end}} P;

 {{Ada/kw|generic}}
    ''declarations''
 {{Ada/kw|procedure}} P (''parameters'' : {{Ada/kw|in}} {{Ada/kw|out}} ''type'');

Note that semicolons consistently terminate statements and declarations; the empty line (or a semicolon alone) is not a valid statement: the null statement is

 {{Ada/kw|null}};

=== Type and subtype ===

There is an important distinction between '''type''' and '''subtype''': a type is given by a set of values and their operations. A subtype is given by a type, and a ''constraint'' that limits the set of values. Values are always of a type. Objects (constants and variables) are of a subtype. This generalizes, clarifies and systematizes a relationship, e.g. between ''Integer'' and 1..100, that is handled ''ad hoc'' in the semantics of [[w:Pascal programming language|Pascal]].

=== Constrained types and unconstrained types ===

There is an important distinction between ''constrained'' types and ''unconstrained'' types. An unconstrained type has one or more free parameters that affect its size or shape. A constrained type fixes the values of these parameters and so determines its size and shape. Loosely speaking, objects must be of a constrained type, but formal parameters may be of an unconstrained type (they adopt the constraint of any corresponding actual parameter). This solves the problem of array parameters in Pascal (among other things).

=== Dynamic types ===

Where values in [[w:Pascal programming language|Pascal]] or [[w:C programming language|C]] must be static (e.g. the subscript bounds of an array) they may be dynamic in Ada. However, static expressions are required in certain cases where dynamic evaluation would not permit a reasonable implementation (e.g. in setting the number of digits of precision of a floating point type).

=== Separation of concerns ===

Ada consistently supports a separation of interface and mechanism. You can see this in the format of a [[Ada Programming/Packages|package]], which separates its declaration from its body; and in the concept of a private type, whose representation in terms of Ada data structures is inaccessible outside the scope containing its definition.

== Where to ask for help ==

Most Ada experts lurk on the [[w:Newsgroup|Usenet newsgroups]] ''comp.lang.ada'' (English) and ''fr.comp.lang.ada'' (French); they are accessible either with a [[w:News client|newsreader]] or through one of the many web interfaces. This is the place for all questions related to Ada.

People on these newsgroups are willing to help but will ''not'' do students' homework for them; they will not post complete answers to assignments. Instead, they will provide guidance for students to find their own answers.

For more online resources, see the [[Ada Programming#External links|External links]] section in this wikibook's introduction.

== Notes ==

&lt;references/&gt;

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/FAQ|Basic]]
[[{{BOOKCATEGORY|Ada Programming}}|Basic]]

[[es:Programación en Ada/Hola Mundo]]
[[it:Ada/Basi]]
&lt;/noinclude&gt;</text>
      <sha1>hd7g0hx8h0uwi6e2gg50ckjqvzpuxsm</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Building</title>
    <ns>0</ns>
    <id>17937</id>
    <revision>
      <id>3250072</id>
      <parentid>3211584</parentid>
      <timestamp>2017-07-31T00:24:58Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15425" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Building}}
__TOC__&lt;/noinclude&gt;

Ada programs are usually easier to build than programs written in other languages like C or C++, which frequently require a makefile. This is because an Ada source file already specifies the dependencies of its source unit. See the [[Ada Programming/Keywords/with|'''with''' keyword]] for further details.

Building an Ada program is not defined by the Reference Manual, so this process is absolutely dependent on the compiler. Usually the compiler kit includes a make tool which compiles a main program and all its dependencies, and links an executable file.

==Building with various compilers==

:''This list is incomplete. You can help Wikibooks by [http://en.wikibooks.org/w/index.php?title=Ada_Programming/Building&amp;action=edit adding the build information] for other compilers.''

=== GNAT ===

With [[Wikipedia:GNAT|GNAT]], you can run this command:

 gnat make ''&lt;your_unit_file&gt;''

If the file contains a procedure, gnatmake will generate an executable file with the procedure as main program. Otherwise, e.g. a package, gnatmake will compile the unit and all its dependencies.

==== GNAT command line ====

gnatmake can be written as one word &lt;code&gt;gnatmake&lt;/code&gt; or two words &lt;code&gt;gnat make&lt;/code&gt;. For a full list of gnat commands just type &lt;code&gt;gnat&lt;/code&gt; without any command options. The output will look something like this:

 GNAT 3.4.3 Copyright 1996-2004 Free Software Foundation, Inc.
 
 List of available commands
 
 GNAT BIND               gnatbind
 GNAT CHOP               gnatchop
 GNAT CLEAN              gnatclean
 GNAT COMPILE            gnatmake -c -f -u
 GNAT ELIM               gnatelim
 GNAT FIND               gnatfind
 GNAT KRUNCH             gnatkr
 GNAT LINK               gnatlink
 GNAT LIST               gnatls
 GNAT MAKE               gnatmake
 GNAT NAME               gnatname
 GNAT PREPROCESS         gnatprep
 GNAT PRETTY             gnatpp
 GNAT STUB               gnatstub
 GNAT XREF               gnatxref
 
 Commands FIND, LIST, PRETTY, STUB and XREF accept project file switches -vPx, -Pprj and -Xnam=val

For further help on the option just type the command (one word or two words &amp;mdash; as you like) without any command options.

==== GNAT IDE ====

The GNAT toolchain comes with an [[Wikipedia:Integrated development environment|IDE]] called [[Wikipedia:GNAT Programming Studio|GPS]], included with recent releases of the [[Wikipedia:GNAT#License|GPL version of GNAT]]. GPS features a [[Wikipedia:Graphical user interface|graphical user interface]].

[[Wikipedia:Emacs|Emacs]] includes ([http://stephe-leake.org/emacs/ada-mode/emacs-ada-mode.html Ada Mode]), and GNAT plugins for [[Wikipedia:KDevelop|KDevelop]] and [[Wikipedia:Vim (text editor)|Vim]] ([http://www.vim.org/scripts/script.php?script_id=1609 Ada Mode]) are available.

Vim Ada Mode is maintained by [http://gnuada.sourceforge.net The GNU Ada project].

==== GNAT with Xcode ====

Apple's free (gratis) IDE, [[Wikipedia:Apple Xcode|Xcode]], uses the [[Wikipedia:LLVM|LLVM]] compiler with the [[Wikipedia:Clang|Clang]] front-end, and does not support Ada: however, in Xcode 4.3 for [[Wikipedia:OS X Lion|OS X Lion]] and later versions, the command line tools (assembler, linker etc) which are required to use GNAT are an optional component of Xcode and must be [https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_4_3.html specially installed].

=== Rational APEX ===

Rational APEX is a complete development environment comprising a language sensitive editor, compiler, debugger, coverage analyser, configuration management and much more. You normally work with APEX running a GUI.

APEX has been built for the development of big programs. Therefore the basic entity of APEX is a ''subsystem'', a directory with certain traits recognized by APEX. All Ada compilation units have to reside in subsystems.

You can define an ''export set'', i.e. the set of Ada units visible to other subsystems. However for a subsystem A to gain visibility to another subsystem B, A has to ''import'' B. After importing, A sees all units in B's export set. (This is much like the with-clauses, but here visibility means only potential visibility for Ada: units to be actually visible must be mentioned in a with-clause of course; units not in the export set cannot be used in with-clauses of Ada units in external subsystems.)

Normally subsystems should be hierarchically ordered, i.e. form a directed graph. But for special uses, subsystems can also mutually import one another.

For configuration management, a subsystem is decomposed in ''views'', subdirectories of the subsystem. Views hold different development versions of the Ada units. So actually it's not subsystems which import other subsystems, rather subsystem views import views of other subsystems. (Of course, the closure of all imports must be consistent &amp;mdash; it cannot be the case that e.g. subsystem (A, view A1) imports subsystems (B, B1) and (C, C1), whereas (B, B1) imports (C, C2)).

A view can be defined to be the development view. Other views then hold releases at different stages.

Each Ada compilation unit has to reside in a file of its own. When compiling an Ada unit, the compiler follows the with-clauses. If a unit is not found within the subsystem holding the compile, the compiler searches the import list (only the direct imports are considered, not the closure).

Units can be taken under version control. In each subsystem, a set of ''histories'' can be defined. An Ada unit can be taken under control in a history. If you want to edit it, you first have to check it out &amp;mdash; it gets a new version number. After the changes, you can check it in again, i.e. make the changes permanent (or you abandon your changes, i.e. go back to the previous version). You normally check out units in the development view only; check-outs in release views can be forbidden.

You can select which version shall be the active one; normally it is the one latest checked in. You can even switch histories to get different development paths. e.g. different bodies of the same specification for different targets.

=== ObjectAda ===

ObjectAda is a set of tools for editing, compiling, navigating and debugging programs written in Ada. There are various editions of ObjectAda. With some editions you compile programs for the same platform and operating systems on which you run the tools. These are called native. With others, you can produce programs for different operating systems and platforms. One possible platform is the Java virtual machine.

These remarks apply to the native Microsoft Windows edition. You can run the translation tools either from the IDE or from the command line.

Whether you prefer to work from the IDE, or from the command line, a little bookkeeping is required. This is done by creating a project. Each project consists of a number of source files, and a number of settings like search paths for additional Ada libraries and other dependences.  Each project also has at least one target. Typically, there is a debug target, and a release target. The names of the targets indicate their purpose. At one time you compile for debugging, typically during development, at other times you compile with different settings, for example when the program is ready for release. Some (all commercial?) editions of ObjectAda permit a Java (VM) target.

=== DEC Ada for VMS ===

DEC Ada is an Ada 83 compiler for [[w:OpenVMS|VMS]]. While “DEC Ada” is probably the name most users know, the compiler is now called “[http://h71000.www7.hp.com/commercial/ada/ada_index.html HP Ada]”. It had  previously been known also by names of "VAX Ada" and "Compaq Ada".

DEC Ada uses a true library management system &amp;mdash; so the first thing you need to do is create and activate a library:

 ACS Library Create [MyLibrary]
 ACS Set Library [MyLibrary]

When creating a library you already set some constraints like support for Long_Float or the available memory size. So carefully read 

 HELP ACS Library Create *

Then next step is to load your Ada sources into the library:

 ACS Load [Source]*.ada

The sources don't need to be perfect at this stage but syntactically correct enough for the compiler to determine the packages declared and analyze the {{Ada/kw|with}} statements. Dec Ada allows you to have more than one package in one source file and you have any filename convention you like. The purpose of &lt;code&gt;ACS Load&lt;/code&gt; is the creation of the dependency tree between the source files.

Next you compile them:

 ACS Compile *

Note that compile take the package name and not the filename. The wildcard &lt;tt&gt;*&lt;/tt&gt; means ''all packages loaded''. The compiler automatically determines the right order for the compilation so a [[w:make (software)|make]] tool is not strictly needed.

Last but not least you link your file into an

 ACS Link /Executable=[Executables]Main.exe Main

On large systems you might want to break sources down into several libraries &amp;mdash; in which case you also need

 ACS Merge /Keep *

to merge the content of the current library with the library higher up the hierarchy. The larger libraries should then be created with:

 ACS Library Create /Large

This uses a different directory layout more suitable for large libraries.

==== DEC Ada IDE ====

Dec Ada comes without an IDE, however the DEC [[Wikipedia:Language-Sensitive Editor|LSE]] as well as the [http://www.vim.org/scripts/script.php?script_id=1609 Ada Mode] of the [[Wikipedia:Vim (text editor)|Vim text editor]] support DEC Ada.

== Compiling our Demo Source ==

Once you have [https://sourceforge.net/project/showfiles.php?group_id=124904 downloaded] our example programs you might wonder how to compile them.

First you need to extract the sources. Use your favorite [[Wikipedia:ZIP (file format)|zip tool]] to achieve that. On extraction a directory with the same name as the filename is created. Beware: WinZip might also create a directory equaling the filename so Windows users need to be careful using the right option otherwise they end up with &lt;var style="color:OliveDrab4"&gt;wikibook-ada-1_2_0.src\wikibook-ada-1_2_0&lt;/var&gt;.

Once you extracted the files you will find all sources in &lt;var style="color:OliveDrab4"&gt;wikibook-ada-1_2_0/Source&lt;/var&gt;. You could compile them right there. For your convenience we also provide ready made project files for the following IDEs (If you find a directory for an IDEs not named it might be in the making and not actually work).

=== GNAT ===

You will find multi-target GNAT Project files and a multi-make Makefile file in &lt;var style="color:OliveDrab4"&gt;wikibook-ada-2_0_0/GNAT&lt;/var&gt;. For i686 Linux and Windows you can compile any demo using:

 gnat make -P ''project_file''

You can also open them inside the GPS with

 gps -P ''project_file''

For other target platform it is a bit more difficult since you need to tell the project files which target you want to create. The following options can be used:

; style ("Debug", "Release"): you can define if you like a debug or release version so you can compare how the options affect size and speed.
; os ("Linux", "OS2", "Windows_NT", "VMS") : choose your operating system. Since there is no Ada 2005 available for OS/2 don't expect all examples to compile.
; target ("i686", "x86_64", "AXP"): choose your CPU &amp;mdash; "[[w:x86|i686]]" is any form of 32bit Intel or AMD CPU, "[[w:x86-64|x86_64]]" is an 64 bit Intel or AMD CPU and if you have an "[[w:DEC Alpha|AXP]]" then you know it.

Remember to type all options as they are shown. To compile a debug version on x86-64 Linux you type:

 gnat make -P ''project_file'' -Xstyle=Debug -Xos=Linux -Xtarget=x86_64

As said in the beginning there is also a '''makefile''' available that will automatically determine the target used. So if you have a GNU make you can save yourself a lot of typing by using:

 make ''project''

or even use

 make ''all''

to make all examples in debug and release in one go.

Each compile is stored inside its own directory which is created in the form of &lt;var style="color:OliveDrab4"&gt;wikibook-ada-2_0_0/GNAT/'''OS'''-'''Target'''-'''Style'''&lt;/var&gt;. Empty directories are provided inside the archive.

=== Rational APEX ===

APEX uses the subsystem and view directory structure, so you will have to create those first and copy the source files into the view.  After creating a view using the architecture model of your choice, use the menu option "Compile -&gt; Maintenance -&gt; Import Text Files".  In the Import Text Files dialog, add "wikibook-ada-2_0_0/Source/*.ad?" to select the Ada source files from the directory you originally extracted to.  Apex uses the file extensions .1.ada for specs and .2.ada for bodies &amp;mdash; don't worry, the import text files command will change these automatically.

To link an example, select its main subprogram in the directory viewer and click the link button in the toolbar, or "Compile -&gt; Link" from the menu.  Double-click the executable to run it.  You can use the shift-key modifier to bypass the link or run dialog.

=== ObjectAda ===

==== ObjectAda command-line ====

The following describes using the ObjectAda tools for Windows in a console window.

Before you can use the ObjectAda tools from the command line, make sure the &lt;tt&gt;PATH&lt;/tt&gt; environment variable lists the directory containing the ObjectAda tools. Something like

 set path=%path%;P:\Programs\Aonix\ObjectAda\bin

A minimal ObjectAda project can have just one source file. like the Hello World program provided in {{Ada/Sourceforge|hello_world_1.adb}}

To build an executable from this source file, follow these steps (assuming the current directory is a fresh one and contains the above mentioned source file):

* Register your source files:

 X:\some\directory&gt; adareg hello_world_1.adb

This makes your sources known to the ObjectAda tools. Have a look at the file UNIT.MAP created by adareg in the current directory if you like seeing what is happening under the hood.

* Compile the source file:

 X:\some\directory&gt; adacomp hello_world_1.adb
 Front end of hello_world_1.adb succeeded with no errors.

* Build the executable program:

 X:\some\directory&gt; adabuild hello_world_1
 ObjectAda Professional Edition Version 7.2.2: adabuild
    Copyright (c) 1997-2002 Aonix.  All rights reserved.
 Linking...
 Link of hello completed successfully

Notice that you specify the name of the main unit as argument to &lt;tt&gt;adabuild&lt;/tt&gt;, not the name of the source file. In this case, it is ''Hello_World_1'' as in

 {{Ada/keyword|procedure}} Hello_World_1 {{Ada/keyword|is}}

More information about the tools can be found in the user guide ''Using the command line interface'', installed with the ObjectAda tools.
&lt;noinclude&gt;

== See also ==
=== Wikibook ===
* [[Ada Programming]]
* [[Ada Programming/Installing]]
&lt;/noinclude&gt;
== External links ==
* GNAT Online Documentation:
** [http://gcc.gnu.org/onlinedocs/gcc-4.0.1/gnat_ugn_unw/ GNAT User's Guide]
* DEC Ada:
** [http://h71000.www7.hp.com/commercial/ada/ada_dap.pdf Developing Ada Products on OpenVMS] (PDF)
** [http://h71000.www7.hp.com/commercial/ada/ada_lrm.pdf DEC Ada &amp;mdash; Language Reference Manual] (PDF)
** [http://h71000.www7.hp.com/commercial/ada/ada_rtr.pdf DEC Ada &amp;mdash; Run-Time Reference] (PDF)

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Building]]
&lt;/noinclude&gt;</text>
      <sha1>bvztrsqqz0f6673n1a7yodwczpza7jn</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Coding standards</title>
    <ns>0</ns>
    <id>176838</id>
    <revision>
      <id>3445780</id>
      <parentid>3211492</parentid>
      <timestamp>2018-07-23T19:04:03Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <minor/>
      <comment>/* Tools */ Update links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2809" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Coding standards}}
__TOC__&lt;/noinclude&gt;

== Introduction ==

Each project should follow a specific [[w:coding standard|coding standard]] to ease readability and maintenance of the source code, and reduce the insertion of errors. Depending on the requirements of the project, a set of guidelines can help to achieve the desired level of performance, portability, code complexity...

There are many [[w:Ada Semantic Interface Specification|ASIS]] tools that can be used to check automatically the adherence of Ada source code to the guidelines.

== Tools ==

* [http://www.adalog.fr/adacontrol2.htm AdaControl] ([http://www.adalog.fr/compo/adacontrol_ug.html#Rules-reference Rules])
* [https://gcc.gnu.org/onlinedocs/gcc-4.3.2/gnat_ugn_unw/Verifying-Properties-Using-gnatcheck.html#Verifying-Properties-Using-gnatcheck  gnatcheck]
* [http://gcc.gnu.org/onlinedocs/gcc-4.3.2/gnat_ugn_unw/The-GNAT-Pretty_002dPrinter-gnatpp.html GNAT Pretty-Printer]
* [https://gcc.gnu.org/onlinedocs/gcc-4.3.2/gnat_ugn_unw/The-GNAT-Metric-Tool-gnatmetric.html The GNAT Metric Tool gnatmetric]

== Coding guidelines ==
* ''[[Ada Style Guide|Ada Quality &amp; Style Guide]]: Guidelines for Professional Programmers''
* ISO/IEC TR 15942:2000, ''[http://standards.iso.org/ittf/PubliclyAvailableStandards/c029575_ISO_IEC_TR_15942_2000(E).zip Guide for the use of the Ada programming language in high integrity systems]'', First edition (2000-03-01). [http://standards.iso.org/ittf/PubliclyAvailableStandards/ ISO Freely Available Standards]
*{{cite web
| url         = https://gds.gsfc.nasa.gov/code_standards_ada.pdf
| title       = Goddard Dynamic Simulator &amp;mdash; Ada Coding Standard
| accessdate  = 2015-08-07
| last        = Leake
| first       = Stephen
| date        = 2013-10-18
| format      = PDF
}}
*{{cite book
 |     author = [[w:European Space Agency|ESA]] BSSC
 |      title = Ada Coding Standard
 |    edition = BSSC(98)3 Issue 1
 |       year = 1998
 |      month = October
 |        url = ftp://ftp.estec.esa.nl/pub/wm/anonymous/wme/bssc/bssc983.pdf
 | accessdate = 2015-08-06
}}
*{{cite web
 |      title = GNAT Coding Style: A Guide for GNAT Developers 
 |       work = GCC online documentation
 |  publisher = Free Software Foundation
 |        url = http://gcc.gnu.org/onlinedocs/gnat-style/
 | accessdate = 2009-01-19
}} ([http://gcc.gnu.org/onlinedocs/gnat-style.pdf PDF])

== See also ==

=== Other wikibooks ===

* [[Ada Style Guide]]

=== Wikibook ===

* [[Ada Programming]]

=== Ada Quality and Style Guide ===
* {{Ada/SG1|1|Introduction}}

== External links ==
* [http://geekswithblogs.net/sdorman/archive/2007/06/13/Introduction-to-Coding-Standards.aspx Introduction to Coding Standards]

&lt;noinclude&gt;
{{Ada/stub}}
[[{{BOOKCATEGORY|Ada Programming}}|Coding standards]]
&lt;/noinclude&gt;</text>
      <sha1>1xob28d1zilqlctjhzf8obdqim4qxtl</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Containers</title>
    <ns>0</ns>
    <id>49922</id>
    <revision>
      <id>3515346</id>
      <parentid>3250073</parentid>
      <timestamp>2019-02-09T14:49:18Z</timestamp>
      <contributor>
        <ip>2001:470:1D:758:226:2DFF:FEF5:1388</ip>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="29549" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Containers}}
__TOC__&lt;/noinclude&gt;

What follows is a simple demo of some of the container
types. It does not cover everything, but should get you
started.

{{Ada/2005}}

==== First Example: Maps ====

The program below prints greetings to the world
in a number of human languages. The greetings are stored
in a table, or hashed map. The map associates every
greeting (a value) with a language code (a key).
That is, you can use language codes as keys
to find greeting values in the table.

The elements in the map are constant strings of international
characters, or really, pointers to such constant strings.
A package &lt;tt&gt;Regional&lt;/tt&gt; is used to set up both
the language IDs and an instance of
{{Ada/package|Ada|Containers|Hashed_Maps}}.

  {{Ada/Sourceforge|regional.ads}}

 {{Ada/keyword |with}} Ada.Containers.Hashed_Maps;  {{Ada/keyword |use}} Ada.Containers;
 
 {{Ada/keyword |package}} Regional {{Ada/keyword |is}}
 
    {{Ada/keyword |type}} Language_ID {{Ada/keyword |is}} (DE, EL, EN, ES, FR, NL);
    {{Ada/comment| a selection from the two-letter codes for human languages}}
 
    {{Ada/keyword |type}} Hello_Text {{Ada/keyword |is}} {{Ada/keyword |access}} {{Ada/keyword |constant}} Wide_String;
    {{Ada/comment| objects will contain a «hello»-string in some language}}
 
 
    {{Ada/keyword |function}} ID_Hashed (id: Language_ID) {{Ada/keyword |return}} Hash_Type;
    {{Ada/comment| you need to provide this to every hashed container}}
 
    {{Ada/keyword |package}} Phrases {{Ada/keyword |is}} {{Ada/keyword |new}} Ada.Containers.Hashed_Maps
      (Key_Type =&gt; Language_ID,
       Element_Type =&gt; Hello_Text,
       Hash =&gt; ID_Hashed,
       Equivalent_Keys =&gt; "=");
 
 {{Ada/keyword |end}} Regional;

Here is the program, details will be explained later.

 {{Ada/Sourceforge|hello_world_extended.ads}}

 {{Ada/keyword |with}} Regional; {{Ada/keyword |use}} Regional;
 {{Ada/keyword |with}} Ada.Wide_Text_IO; {{Ada/keyword |use}} Ada;
 
 {{Ada/keyword |procedure}} Hello_World_Extended {{Ada/keyword |is}}
 
    {{Ada/comment| print greetings in different spoken languages}}
 
    greetings: Phrases.Map;
    {{Ada/comment| the dictionary of greetings}}
 
 {{Ada/keyword |begin}} {{Ada/comment|Hello_World_Extended}}
 
    Phrases.Insert(greetings,
                   Key =&gt; EN,
                   New_Item =&gt; {{Ada/keyword |new}} Wide_String'("Hello, World!"));
 
    {{Ada/comment| or, shorter,}}
    greetings.Insert(DE, {{Ada/keyword |new}} Wide_String'("Hallo, Welt!"));
    greetings.Insert(NL, {{Ada/keyword |new}} Wide_String'("Hallo, Wereld!"));
    greetings.Insert(ES, {{Ada/keyword |new}} Wide_String'("¡Hola mundo!")); 
    greetings.Insert(FR, {{Ada/keyword |new}} Wide_String'("Bonjour, Monde!"));
    greetings.Insert(EL, {{Ada/keyword |new}} Wide_String'("Γεια σου κόσμε"));
 
    {{Ada/keyword |declare}}
       {{Ada/keyword |use}} Phrases;
 
       speaker: Cursor := First(greetings);
    {{Ada/keyword |begin}}
       {{Ada/keyword |while}} Has_Element(speaker) {{Ada/keyword |loop}}
          Wide_Text_IO.Put_Line( Element(speaker).{{Ada/keyword |all}} );
          Next(speaker);
       {{Ada/keyword |end}} {{Ada/keyword |loop}};
    {{Ada/keyword |end}};
 
 {{Ada/keyword |end}} Hello_World_Extended;

The first of the &lt;tt&gt;Insert&lt;/tt&gt; statements
is written in an Ada 95 style:

   Phrases.Insert(greetings,
                  Key =&gt; EN,
                  New_Item =&gt; {{Ada/keyword |new}} Wide_String'("Hello, World!"));

The next insertions
use so called distinguished receiver notation which you
can use in Ada 2005. (It's O-O parlance. While
the Insert call involves all of: a Container object (greetings),
a Key object (EN),
and a New_Item object ({{Ada/keyword |new}} Wide_String'("Hello, World!")),
the Container object is distinguished
from the others in that the Insert call provides it (and only it) with the other
objects. In this case the Container object will be modified by the
call, using arguments named Key and New_Item for the modification.)

   greetings.Insert(ES, {{Ada/keyword|new}} Wide_String'("¡Hola mundo!"));

After the table is set up, the program goes on to print all the greetings
contained in the table. It does so employing a cursor that runs
along the elements in the table in some order. The typical scheme
is to obtain a cursor, here using &lt;tt&gt;First&lt;/tt&gt;, and then
to iterate the following calls:

# &lt;tt&gt;Has_Element&lt;/tt&gt;, for checking whether the cursor is at an element
# &lt;tt&gt;Element&lt;/tt&gt;, to get the element and
# &lt;tt&gt;Next&lt;/tt&gt;, to move the cursor to another element

When there is no more element left, the cursor will have the
special value &lt;tt&gt;No_Element&lt;/tt&gt;.
Actually, this is an iteration scheme that can be used with all
containers in child packages of {{Ada/package|Ada|Containers}}.

==== A slight variation: picking an element ====

The next program shows how to pick a value from the map,
given a key. Actually, you will provide the key.
The program is like the previous one, except that it doesn't
just print all the elements in the map, but picks one
based on a Language_ID value that it reads from standard
input.

 {{Ada/Sourceforge|hello_world_pick.adb}}

 {{Ada/keyword |with}} Regional; {{Ada/keyword |use}} Regional;
 {{Ada/keyword |with}} Ada.Wide_Text_IO; {{Ada/keyword |use}} Ada;
 
 {{Ada/keyword |procedure}} Hello_World_Pick {{Ada/keyword |is}}
 
   ... as before ...
 
  {{Ada/keyword|declare}}
      {{Ada/keyword |use}} Phrases;
  
      {{Ada/keyword |package}} Lang_IO {{Ada/keyword |is}} {{Ada/keyword|new}} Wide_Text_IO.Enumeration_IO(Language_ID);
      lang: Language_ID;
   {{Ada/keyword |begin}}
      Lang_IO.Get(lang);
      Wide_Text_IO.Put_Line( greetings.Element(lang).{{Ada/keyword|all}} );
   {{Ada/keyword |end}};
  
 {{Ada/keyword |end}} Hello_World_Pick;

This time the &lt;tt&gt;Element&lt;/tt&gt; function consumes a Key (lang)
not a Cursor. Actually, it consumes two values, the other value being
&lt;tt&gt;greetings&lt;/tt&gt;, in distinguished receiver notation.

==== Second Example: Vectors and Maps ====

Let's take bean counting literally. Red beans, green beans, and white
beans. (Yes, white beans really do exist.) Your job will be to collect a number
of beans, weigh them, and then determine the average weight of red,
green, and white beans, respectively. Here is one approach.

Again, we need a package, this time for storing vegetable
related information. Introducing the &lt;tt&gt;Beans&lt;/tt&gt; package
(the Grams type doesn't belong in a vegetable package, but it's there
to keep things simple):

 {{Ada/Sourceforge|1/beans.ads}}

 {{Ada/keyword|with}} {{Ada/package|Ada|Containers|Vectors}}{{Ada/delimiter|;}}
 
 {{Ada/keyword|package}} Beans {{Ada/keyword|is}}
 
    {{Ada/keyword|type}} Bean_Color {{Ada/keyword|is}} {{Ada/delimiter|(}}R{{Ada/delimiter|,}} G{{Ada/delimiter|,}} W{{Ada/delimiter|)}}{{Ada/delimiter|;}}
    {{Ada/-- | red, green, and white beans}}
 
    {{Ada/keyword|type}} Grams {{Ada/keyword|is}} {{Ada/keyword|delta}} 0{{Ada/delimiter|.}}01 {{Ada/keyword|digits}} 7{{Ada/delimiter|;}}
    {{Ada/-- | enough to weigh things as light as beans but also as heavy as}}
    {{Ada/-- | many of them}}
 
    {{Ada/keyword|type}} Bean {{Ada/keyword|is}}
    {{Ada/-- | info about a single bean}}
       {{Ada/keyword|record}}
          kind{{Ada/delimiter|:}} Bean_Color{{Ada/delimiter|;}}
          weight{{Ada/delimiter|:}} Grams{{Ada/delimiter|;}}
       {{Ada/keyword|end}} {{Ada/keyword|record}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|subtype}} Bean_Count {{Ada/keyword|is}} Positive {{Ada/keyword|range}} 1 {{Ada/delimiter|..}} 1_000{{Ada/delimiter|;}}
    {{Ada/-- | numbers of beans to count (how many has Cinderella have to count?)}}
 
    {{Ada/keyword|package}} Bean_Vecs {{Ada/keyword|is}} {{Ada/keyword|new}} Ada{{Ada/delimiter|.}}Containers{{Ada/delimiter|.}}Vectors
      {{Ada/delimiter|(}}Element_Type =&gt; Bean{{Ada/delimiter|,}}
       Index_Type =&gt; Bean_Count{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
 {{Ada/keyword|end}} Beans{{Ada/delimiter|;}}

The &lt;tt&gt;Vectors&lt;/tt&gt; instance offers a data structure similar to an array
that can change its size at run time. It is called &lt;tt&gt;Vector&lt;/tt&gt;.
Each bean that is read will be appended to a &lt;tt&gt;Bean_Vecs.Vector&lt;/tt&gt; object.

The following program first calls &lt;tt&gt;read_input&lt;/tt&gt; to
fill a buffer with beans. Next, it calls a function that computes
the average weight of beans having the same color. This
function:

 {{Ada/keyword |with}} Beans{{Ada/delimiter |;}}   {{Ada/keyword |use}} Beans{{Ada/delimiter |;}}
 
 {{Ada/keyword |function}} average_weight
   {{Ada/delimiter |(}}buffer{{Ada/delimiter |:}} Bean_Vecs{{Ada/delimiter|.}}Vector{{Ada/delimiter |;}} desired_color{{Ada/delimiter |:}} Bean_Color{{Ada/delimiter |)}} {{Ada/keyword |return}} Grams{{Ada/delimiter |;}}
 {{Ada/comment | scan `buffer` for all beans that have `desired_color`. Compute the}}
 {{Ada/comment | mean of their `.weight` components}}


Then the average value is printed for beans of each color and
the program stops.

 {{Ada/Sourceforge|1/bean_counting.adb}}

 {{Ada/keyword |with}} Beans{{Ada/delimiter |;}}
 {{Ada/keyword |with}} average_weight{{Ada/delimiter |;}}
 {{Ada/keyword |with}} {{Ada/package|Ada|Wide_Text_IO}}{{Ada/delimiter |;}}
 
 {{Ada/keyword |procedure}} bean_counting {{Ada/keyword |is}}
    {{Ada/keyword |use}} Beans{{Ada/delimiter |,}} Ada{{Ada/delimiter |;}}
 
    buffer{{Ada/delimiter |:}} Bean_Vecs{{Ada/delimiter|.}}Vector{{Ada/delimiter |;}}
 
    {{Ada/keyword |procedure}} read_input{{Ada/delimiter |(}}buf{{Ada/delimiter |:}} {{Ada/keyword |in}} {{Ada/keyword |out}} Bean_Vecs{{Ada/delimiter|.}}Vector{{Ada/delimiter |)}} {{Ada/keyword |is}} {{Ada/keyword |separate}}{{Ada/delimiter |;}}
    {{Ada/comment | collect information from a series of bean measurements into `buf`}}
 
 
 {{Ada/keyword |begin}} {{Ada/comment | bean_counting}}
 
    read_input{{Ada/delimiter |(}}buffer{{Ada/delimiter |)}}{{Ada/delimiter |;}}
 
    {{Ada/comment | now everything is set up for computing some statistical data.}}
    {{Ada/comment | For every bean color in `Bean_Color`, the function `average_weight`}}
    {{Ada/comment | will scan `buffer` once, and accumulate statistical data from}}
    {{Ada/comment | each element encountered.}}
 
    {{Ada/keyword |for}} kind {{Ada/keyword |in}} Bean_Color {{Ada/keyword |loop}}
       Wide_Text_IO{{Ada/delimiter|.}}Put_Line
         {{Ada/delimiter |(}}Bean_Color{{Ada/delimiter |'}}Wide_Image{{Ada/delimiter |(}}kind{{Ada/delimiter |)}} {{Ada/delimiter |&amp;}}
          " ø =" {{Ada/delimiter |&amp;}} Grams{{Ada/delimiter |'}}Wide_Image{{Ada/delimiter |(}} average_weight{{Ada/delimiter |(}}buffer{{Ada/delimiter |,}} kind{{Ada/delimiter |)}} {{Ada/delimiter |)}}{{Ada/delimiter |)}}{{Ada/delimiter |;}}
    {{Ada/keyword |end}} {{Ada/keyword |loop}}{{Ada/delimiter |;}}
 
 {{Ada/keyword |end}} bean_counting{{Ada/delimiter |;}}

All container operations take place in function &lt;tt&gt;average_weight&lt;/tt&gt;.
To find the mean weight of beans of the same color, the function
is looking at all beans in order. If a bean has the right color,
&lt;tt&gt;average_weight&lt;/tt&gt; adds its weight to the total weight, and
increases the number of beans counted by 1.

The computation visits all beans. The iteration that is necessary
for going from one bean to the next and then performing the above steps
is best left to the &lt;tt&gt;Iterate&lt;/tt&gt; procedure
which is part of all container packages. To do so, wrap
the above steps inside some procedure and pass this procedure
to &lt;tt&gt;Iterate&lt;/tt&gt;. The effect is that &lt;tt&gt;Iterate&lt;/tt&gt; calls your
procedure for each element in the vector, passing a cursor
value to your procedure, one for each element.

Having the container machinery do the iteration can also be
faster than moving and checking the cursor yourself, as was
done in the &lt;tt&gt;Hello_World_Extended&lt;/tt&gt; example.

 {{Ada/Sourceforge|average_weight.adb}}

 {{Ada/keyword|with}} Beans{{Ada/delimiter|;}}  {{Ada/keyword|use}} Beans{{Ada/delimiter|.}}Bean_Vecs{{Ada/delimiter|;}}
 
 {{Ada/keyword|function}} average_weight
   {{Ada/delimiter|(}}buffer{{Ada/delimiter|:}} Bean_Vecs{{Ada/delimiter|.}}Vector{{Ada/delimiter|;}} desired_color{{Ada/delimiter|:}} Bean_Color{{Ada/delimiter|)}} {{Ada/keyword|return}} Grams
 {{Ada/keyword|is}}
    total{{Ada/delimiter|:}} Grams := 0{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
    {{Ada/-- | weight of all beans in `buffer` having `desired_color`}}
 
    number{{Ada/delimiter|:}} Natural := 0{{Ada/delimiter|;}}
    {{Ada/-- | number of beans in `buffer` having `desired_color`}}
 
    {{Ada/keyword|procedure}} accumulate{{Ada/delimiter|(}}c{{Ada/delimiter|:}} Cursor{{Ada/delimiter|)}} {{Ada/keyword|is}}
       {{Ada/-- | if the element at `c` has the `desired_color`, measure it}}
    {{Ada/keyword|begin}}
       {{Ada/keyword|if}} Element{{Ada/delimiter|(}}c{{Ada/delimiter|)}}{{Ada/delimiter|.}}kind = desired_color {{Ada/keyword|then}}
          number := number {{Ada/operator|+}} 1{{Ada/delimiter|;}}
          total := total {{Ada/operator|+}} Element{{Ada/delimiter|(}}c{{Ada/delimiter|)}}{{Ada/delimiter|.}}weight{{Ada/delimiter|;}}
       {{Ada/keyword|end}} {{Ada/keyword|if}}{{Ada/delimiter|;}}
    {{Ada/keyword|end}} accumulate{{Ada/delimiter|;}}
 
 {{Ada/keyword|begin}} {{Ada/-- | average_weight}}
 
    Iterate{{Ada/delimiter|(}}buffer{{Ada/delimiter|,}} accumulate{{Ada/delimiter|'}}Access{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|if}} number {{Ada/operator|&gt;}} 0 {{Ada/keyword|then}}
       {{Ada/keyword|return}} total {{Ada/operator|/}} number{{Ada/delimiter|;}}
    {{Ada/keyword|else}}
       {{Ada/keyword|return}} 0{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
    {{Ada/keyword|end}} {{Ada/keyword|if}}{{Ada/delimiter|;}}
 
 {{Ada/keyword|end}} average_weight{{Ada/delimiter|;}}

This approach is straightforward. However, imagine larger vectors.
&lt;tt&gt;average_weight&lt;/tt&gt; will visit all elements repeatedly
for each color. If there are M colors and N beans,
&lt;tt&gt;average_weight&lt;/tt&gt; will be called M * N times, and with each new
color, N more calls are necessary. A possible alternative is to collect all
information about a bean once it is visited. However, this will
likely need more variables, and you will have to find a way to return more
than one result (one average for each color), etc. Try it!

A different approach might be better. One is to copy beans of different
colors to separate vector objects. (Remembering Cinderella.) Then
&lt;tt&gt;average_weight&lt;/tt&gt; must visit each element only one time. The
following procedure does this, using a new type from &lt;tt&gt;Beans&lt;/tt&gt;,
called &lt;tt&gt;Bean_Pots&lt;/tt&gt;.

    ...
    {{Ada/keyword |type}} Bean_Pots {{Ada/keyword |is}} {{Ada/keyword |array}}{{Ada/delimiter |(}}Bean_Color{{Ada/delimiter |)}} {{Ada/keyword |of}} Bean_Vecs{{Ada/delimiter|.}}Vector{{Ada/delimiter |;}}
    ...

Note how this plain array associates colors with Vectors.
The procedure for getting the beans into the right bowls uses
the bean color as array index for finding the right bowl (vector).

 {{Ada/Sourceforge|2/gather_into_pots.adb}}

 {{Ada/keyword |procedure}} gather_into_pots{{Ada/delimiter |(}}buffer{{Ada/delimiter |:}} Bean_Vecs{{Ada/delimiter|.}}Vector{{Ada/delimiter |;}} pots{{Ada/delimiter |:}} {{Ada/keyword |in}} {{Ada/keyword |out}} Bean_Pots{{Ada/delimiter |)}} {{Ada/keyword |is}}
    {{Ada/keyword |use}} Bean_Vecs{{Ada/delimiter |;}}
 
    {{Ada/keyword |procedure}} put_into_right_pot{{Ada/delimiter |(}}c{{Ada/delimiter |:}} Cursor{{Ada/delimiter |)}} {{Ada/keyword |is}}
       {{Ada/comment | select the proper bowl for the bean at `c` and «append»}}
       {{Ada/comment | the bean to the selected bowl}}
    {{Ada/keyword |begin}}
       Append{{Ada/delimiter |(}}pots{{Ada/delimiter |(}}Element{{Ada/delimiter |(}}c{{Ada/delimiter |)}}{{Ada/delimiter|.}}kind{{Ada/delimiter |)}}{{Ada/delimiter |,}} Element{{Ada/delimiter |(}}c{{Ada/delimiter |)}}{{Ada/delimiter |)}}{{Ada/delimiter |;}}
    {{Ada/keyword |end}} put_into_right_pot{{Ada/delimiter |;}}
 
 {{Ada/keyword |begin}}  {{Ada/comment | gather_into_pots}}
    Iterate{{Ada/delimiter |(}}buffer{{Ada/delimiter |,}} put_into_right_pot{{Ada/delimiter |'}}Access{{Ada/delimiter |)}}{{Ada/delimiter |;}}
 {{Ada/keyword |end}} gather_into_pots{{Ada/delimiter |;}}


Everything is in place now.

 {{Ada/Sourceforge|2/bean_counting.adb}}

 {{Ada/keyword|with}} Beans{{Ada/delimiter|;}}
 {{Ada/keyword|with}} average_weight{{Ada/delimiter|;}}
 {{Ada/keyword|with}} gather_into_pots{{Ada/delimiter|;}}
 {{Ada/keyword|with}} Ada{{Ada/delimiter|.}}Wide_Text_IO{{Ada/delimiter|;}}
 
 {{Ada/keyword|procedure}} bean_counting {{Ada/keyword|is}}
    {{Ada/keyword|use}} Beans{{Ada/delimiter|,}} Ada{{Ada/delimiter|;}}
 
    buffer{{Ada/delimiter|:}} Bean_Vecs{{Ada/delimiter|.}}Vector{{Ada/delimiter|;}}
    bowls{{Ada/delimiter|:}} Bean_Pots{{Ada/delimiter|;}}
 
    {{Ada/keyword|procedure}} read_input{{Ada/delimiter|(}}buf{{Ada/delimiter|:}} {{Ada/keyword|in}} {{Ada/keyword|out}} Bean_Vecs{{Ada/delimiter|.}}Vector{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|separate}}{{Ada/delimiter|;}}
    {{Ada/-- | collect information from a series of bean measurements into `buf`}}
 
 
 {{Ada/keyword|begin}} {{Ada/-- | bean_counting}}
 
    read_input{{Ada/delimiter|(}}buffer{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
    {{Ada/-- | now everything is set up for computing some statistical data.}}
    {{Ada/-- | Gather the beans into the right pot by color.}}
    {{Ada/-- | Then find the average weight of beans in each pot.}}
 
    gather_into_pots{{Ada/delimiter|(}}buffer{{Ada/delimiter|,}} bowls{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|for}} color {{Ada/keyword|in}} Bean_Color {{Ada/keyword|loop}}
       Wide_Text_IO{{Ada/delimiter|.}}Put_Line
         {{Ada/delimiter|(}}Bean_Color{{Ada/delimiter|'}}Wide_Image{{Ada/delimiter|(}}color{{Ada/delimiter|)}}
          &amp; " ø ="
          &amp; Grams{{Ada/delimiter|'}}Wide_Image{{Ada/delimiter|(}}average_weight{{Ada/delimiter|(}}bowls{{Ada/delimiter|(}}color{{Ada/delimiter|)}}{{Ada/delimiter|,}} color{{Ada/delimiter|)}}{{Ada/delimiter|)}}{{Ada/delimiter|)}}{{Ada/delimiter|;}}
    {{Ada/keyword|end}} {{Ada/keyword|loop}}{{Ada/delimiter|;}}
 
 {{Ada/keyword|end}} bean_counting{{Ada/delimiter|;}}


As a side effect of having chosen one vector per color, we can determine
the number of beans in each vector by calling the &lt;tt&gt;Length&lt;/tt&gt; function.
But &lt;tt&gt;average_weight&lt;/tt&gt;, too, computes the number of elements in the vector.
Hence, a summing function might replace &lt;tt&gt;average_weight&lt;/tt&gt; here.

==== All In Just One Map!  ====

The following program first calls &lt;tt&gt;read_input&lt;/tt&gt; to fill a buffer
with beans. Then, information about these beans is stored in a table,
mapping bean properties to numbers of occurrence. The processing that
starts at &lt;tt&gt;Iterate&lt;/tt&gt; uses chained procedure calls typical of the
{{Ada/package|Ada|Containers}} iteration mechanism.

The Beans package in this example instantiates another
generic library unit, {{Ada/package|Ada|Containers|Ordered_Maps}}.
Where the {{Ada/package|Ada|Containers|Hashed_Maps}} require a hashing
function, {{Ada/package|Ada|Containers|Ordered_Maps}} require a comparison
function. We provide one, &lt;tt&gt;"&lt;"&lt;/tt&gt;, which sorts beans first by color,
then by weight. It will automatically be associated with the corresponding
generic formal function, as its name, &lt;tt&gt;"&lt;"&lt;/tt&gt;, matches that of the generic formal
function, &lt;tt&gt;"&lt;"&lt;/tt&gt;.

    ...
    {{Ada/keyword |function}} "&lt;"{{Ada/delimiter |(}}a{{Ada/delimiter |,}} b{{Ada/delimiter |:}} Bean{{Ada/delimiter |)}} {{Ada/keyword |return}} Boolean{{Ada/delimiter |;}}
    {{Ada/comment | order beans, first by color, then by weight}}
 
    {{Ada/keyword |package}} Bean_Statistics
      {{Ada/comment | instances will map beans of a particular color and weight to the}}
      {{Ada/comment | number of times they have been inserted.}}
    {{Ada/keyword |is}} {{Ada/keyword |new}} Ada{{Ada/delimiter|.}}Containers{{Ada/delimiter|.}}Ordered_Maps
      {{Ada/delimiter |(}}Element_Type =&gt; Natural{{Ada/delimiter |,}}
       Key_Type =&gt; Bean{{Ada/delimiter |)}}{{Ada/delimiter |;}}
    ...


Where the previous examples have {{Ada/keyword |with}}ed subprograms,
this variation on &lt;tt&gt;bean_counting&lt;/tt&gt; packs them all as local
subprograms.

 {{Ada/Sourceforge|3/bean_counting.adb}}

 {{Ada/keyword|with}} Beans{{Ada/delimiter|;}}
 {{Ada/keyword|with}} Ada{{Ada/delimiter|.}}Wide_Text_IO{{Ada/delimiter|;}}
 
 {{Ada/keyword|procedure}} bean_counting {{Ada/keyword|is}}
    {{Ada/keyword|use}} Beans{{Ada/delimiter|,}} Ada{{Ada/delimiter|;}}
 
    buffer{{Ada/delimiter|:}} Bean_Vecs{{Ada/delimiter|.}}Vector{{Ada/delimiter|;}}
    stats_cw{{Ada/delimiter|:}} Bean_Statistics{{Ada/delimiter|.}}Map{{Ada/delimiter|;}}
    {{Ada/-- | maps beans to numbers of occurrences, grouped by color, ordered by}}
    {{Ada/-- | weight}}
 
    {{Ada/keyword|procedure}} read_input{{Ada/delimiter|(}}buf{{Ada/delimiter|:}} {{Ada/keyword|in}} {{Ada/keyword|out}} Bean_Vecs{{Ada/delimiter|.}}Vector{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|separate}}{{Ada/delimiter|;}}
    {{Ada/-- | collect information from a series of bean measurements into `buf`}}
 
    {{Ada/keyword|procedure}} add_bean_info{{Ada/delimiter|(}}specimen{{Ada/delimiter|:}} {{Ada/keyword|in}} Bean{{Ada/delimiter|)}}{{Ada/delimiter|;}}
    {{Ada/-- | insert bean `specimen` as a key into the `stats_cw` table unless}}
    {{Ada/-- | present. In any case, increase the count associated with this key}}
    {{Ada/-- | by 1. That is, count the number of equal beans.}}
 
    {{Ada/keyword|procedure}} add_bean_info{{Ada/delimiter|(}}specimen{{Ada/delimiter|:}} {{Ada/keyword|in}} Bean{{Ada/delimiter|)}} {{Ada/keyword|is}}
 
       {{Ada/keyword|procedure}} one_more{{Ada/delimiter|(}}b{{Ada/delimiter|:}} {{Ada/keyword|in}} Bean{{Ada/delimiter|;}} n{{Ada/delimiter|:}} {{Ada/keyword|in}} {{Ada/keyword|out}} Natural{{Ada/delimiter|)}} {{Ada/keyword|is}}
        {{Ada/-- |  increase the count associated with this kind of bean}}
       {{Ada/keyword|begin}}
          n := n {{Ada/operator|+}} 1{{Ada/delimiter|;}}
       {{Ada/keyword|end}} one_more{{Ada/delimiter|;}}
 
       c {{Ada/delimiter|:}} Bean_Statistics{{Ada/delimiter|.}}Cursor{{Ada/delimiter|;}}
       inserted{{Ada/delimiter|:}} Boolean{{Ada/delimiter|;}}
    {{Ada/keyword|begin}}
       stats_cw{{Ada/delimiter|.}}Insert{{Ada/delimiter|(}}specimen{{Ada/delimiter|,}} 0{{Ada/delimiter|,}} c{{Ada/delimiter|,}} inserted{{Ada/delimiter|)}}{{Ada/delimiter|;}}
       Bean_Statistics{{Ada/delimiter|.}}Update_Element{{Ada/delimiter|(}}c{{Ada/delimiter|,}} one_more{{Ada/delimiter|'}}Access{{Ada/delimiter|)}}{{Ada/delimiter|;}}
    {{Ada/keyword|end}} add_bean_info{{Ada/delimiter|;}}
 
 {{Ada/keyword|begin}} {{Ada/-- | bean_counting}}
 
    read_input{{Ada/delimiter|(}}buffer{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
    {{Ada/-- | next, for all beans in the vector `buffer` just filled, store}}
    {{Ada/-- | information about each bean in the `stats_cw` table.}}
 
    {{Ada/keyword|declare}}
       {{Ada/keyword|use}} Bean_Vecs{{Ada/delimiter|;}}
 
       {{Ada/keyword|procedure}} count_bean{{Ada/delimiter|(}}c{{Ada/delimiter|:}} Cursor{{Ada/delimiter|)}} {{Ada/keyword|is}}
       {{Ada/keyword|begin}}
          add_bean_info{{Ada/delimiter|(}}Element{{Ada/delimiter|(}}c{{Ada/delimiter|)}}{{Ada/delimiter|)}}{{Ada/delimiter|;}}
       {{Ada/keyword|end}} count_bean{{Ada/delimiter|;}}
    {{Ada/keyword|begin}}
       Iterate{{Ada/delimiter|(}}buffer{{Ada/delimiter|,}} count_bean{{Ada/delimiter|'}}Access{{Ada/delimiter|)}}{{Ada/delimiter|;}}
    {{Ada/keyword|end}}{{Ada/delimiter|;}}
 
    {{Ada/-- | now everything is set up for computing some statistical data. The}}
    {{Ada/-- | keys of the map, i.e. beans, are ordered by color and then weight.}}
    {{Ada/-- | The `First`, and `Ceiling` functions will find cursors}}
    {{Ada/-- | denoting the ends of a group.}}
 
 
    {{Ada/keyword|declare}}
       {{Ada/keyword|use}} Bean_Statistics{{Ada/delimiter|;}}
 
       {{Ada/-- | statistics is computed groupwise:}}
 
       q_sum{{Ada/delimiter|:}} Grams{{Ada/delimiter|;}}
       q_count{{Ada/delimiter|:}} Natural{{Ada/delimiter|;}}
 
       {{Ada/keyword|procedure}} q_stats{{Ada/delimiter|(}}lo{{Ada/delimiter|,}} hi{{Ada/delimiter|:}} Cursor{{Ada/delimiter|)}}{{Ada/delimiter|;}}
       {{Ada/-- | `q_stats` will update the `q_sum` and `q_count` globals with}}
       {{Ada/-- | the sum of the key weights and their number, respectively. `lo`}}
       {{Ada/-- | (included) and `hi` (excluded)  mark the interval of keys}}
       {{Ada/-- | to use from the map.}}
 
       {{Ada/keyword|procedure}} q_stats{{Ada/delimiter|(}}lo{{Ada/delimiter|,}} hi{{Ada/delimiter|:}} Cursor{{Ada/delimiter|)}} {{Ada/keyword|is}}
          k{{Ada/delimiter|:}} Cursor := lo{{Ada/delimiter|;}}
       {{Ada/keyword|begin}}
          q_count := 0{{Ada/delimiter|;}} q_sum := 0{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
          {{Ada/keyword|loop}}
             {{Ada/keyword|exit}} {{Ada/keyword|when}} k = hi{{Ada/delimiter|;}}
             q_count := q_count {{Ada/operator|+}} Element{{Ada/delimiter|(}}k{{Ada/delimiter|)}}{{Ada/delimiter|;}}
             q_sum := q_sum {{Ada/operator|+}} Key{{Ada/delimiter|(}}k{{Ada/delimiter|)}}{{Ada/delimiter|.}}weight {{Ada/operator|*}} Element{{Ada/delimiter|(}}k{{Ada/delimiter|)}}{{Ada/delimiter|;}}
             Next{{Ada/delimiter|(}}k{{Ada/delimiter|)}}{{Ada/delimiter|;}}
          {{Ada/keyword|end}} {{Ada/keyword|loop}}{{Ada/delimiter|;}}
       {{Ada/keyword|end}} q_stats{{Ada/delimiter|;}}
 
 
       {{Ada/-- | precondition}}
       {{Ada/keyword|pragma}} assert{{Ada/delimiter|(}}{{Ada/keyword|not}} Is_Empty{{Ada/delimiter|(}}stats_cw{{Ada/delimiter|)}}{{Ada/delimiter|,}} "container is empty"{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
       lower{{Ada/delimiter|,}} upper{{Ada/delimiter|:}} Cursor := First{{Ada/delimiter|(}}stats_cw{{Ada/delimiter|)}}{{Ada/delimiter|;}}
       {{Ada/-- | denoting the first key of a group, and the first key of a}}
       {{Ada/-- | following group, respectively}}
 
    {{Ada/keyword|begin}}
 
       {{Ada/-- | start reporting and trigger the computations}}
 
       Wide_Text_IO{{Ada/delimiter|.}}Put_Line{{Ada/delimiter|(}}"Summary:"{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
       {{Ada/keyword|for}} color {{Ada/keyword|in}} Bean_Color {{Ada/keyword|loop}}
          lower := upper{{Ada/delimiter|;}}
          {{Ada/keyword|if}} color = Bean_Color{{Ada/delimiter|'}}Last {{Ada/keyword|then}}
             upper := No_Element{{Ada/delimiter|;}}
          {{Ada/keyword|else}}
             upper := Ceiling{{Ada/delimiter|(}}stats_cw{{Ada/delimiter|,}} Bean{{Ada/delimiter|'}}{{Ada/delimiter|(}}Bean_Color{{Ada/delimiter|'}}Succ{{Ada/delimiter|(}}color{{Ada/delimiter|)}}{{Ada/delimiter|,}} 0{{Ada/delimiter|.}}0{{Ada/delimiter|)}}{{Ada/delimiter|)}}{{Ada/delimiter|;}}
          {{Ada/keyword|end}} {{Ada/keyword|if}}{{Ada/delimiter|;}}
 
          q_stats{{Ada/delimiter|(}}lower{{Ada/delimiter|,}} upper{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
          {{Ada/keyword|if}} q_count {{Ada/operator|&gt;}} 0 {{Ada/keyword|then}}
             Wide_Text_IO{{Ada/delimiter|.}}Put_Line
               {{Ada/delimiter|(}}Bean_Color{{Ada/delimiter|'}}Wide_Image{{Ada/delimiter|(}}color{{Ada/delimiter|)}} &amp; " group:" &amp;
                "  ø =" &amp; Grams{{Ada/delimiter|'}}Wide_Image{{Ada/delimiter|(}}q_sum {{Ada/operator|/}} q_count{{Ada/delimiter|)}} &amp;
                ", # =" &amp; Natural{{Ada/delimiter|'}}Wide_Image{{Ada/delimiter|(}}q_count{{Ada/delimiter|)}} &amp;
                ", Σ =" &amp; Grams{{Ada/delimiter|'}}Wide_Image{{Ada/delimiter|(}}q_sum{{Ada/delimiter|)}}{{Ada/delimiter|)}}{{Ada/delimiter|;}}
          {{Ada/keyword|end}} {{Ada/keyword|if}}{{Ada/delimiter|;}}
       {{Ada/keyword|end}} {{Ada/keyword|loop}}{{Ada/delimiter|;}}
    {{Ada/keyword|end}}{{Ada/delimiter|;}}
 
 {{Ada/keyword|end}} bean_counting{{Ada/delimiter|;}}

Like in the greetings example, you can pick values from the table.
This time the values tell the number of occurrences of beans with
certain properties. The &lt;tt&gt;stats_cw&lt;/tt&gt; table is ordered by key, that
is by bean properties. Given particular properties, you can use the
&lt;tt&gt;Floor&lt;/tt&gt; and &lt;tt&gt;Ceiling&lt;/tt&gt; functions to approximate the bean in
the table that most closely matches the desired properties.

It is now easy to print a histogram showing the frequency with which
each kind of bean has occurred. If N is the number of beans of a kind,
then print N characters on a line, or draw a graphical bar of length
N, etc. A histogram showing the number of beans per color can be drawn
after computing the sum of beans of this color, using groups like in the
previous example. You can delete beans of a color from the table using
the same technique.

Finally, think of marshalling the beans in order starting at the least
frequently occurring kind. That is, construct a vector appending first
beans that have occurred just once, followed by beans that have occurred
twice, if any, and so on. Starting from the table is possible, but be
sure to have a look at the sorting functions of
{{Ada/package|Ada|Containers}}.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries/Ada.Containers]]
 
=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM3|A|18|1|The Package Containers}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Containers]]
&lt;/noinclude&gt;</text>
      <sha1>8vswn6da3kloztmqgjhj34q7p7rig4d</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Control</title>
    <ns>0</ns>
    <id>18315</id>
    <revision>
      <id>3445416</id>
      <parentid>3250075</parentid>
      <timestamp>2018-07-22T11:36:34Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <minor/>
      <comment>Header template</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7610" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation}}
{{:Template:Computer Programming/Control/0}}
__TOC__&lt;/noinclude&gt;
{{:Template:Computer Programming/Control/1}}

 {{Ada/kw|if}} ''condition'' {{Ada/kw|then}}
     ''statement'';
 {{Ada/kw|else}}
     ''other statement'';
 {{Ada/kw|end}} {{Ada/kw|if}};

{{:Template:Computer Programming/Control/1.1}}

 {{Ada/kw|if}} ''condition'' {{Ada/kw|then}}
     ''statement'';
 {{Ada/kw|elsif}} ''condition'' {{Ada/kw|then}}
     ''other statement'';
 {{Ada/kw|elsif}} ''condition'' {{Ada/kw|then}}
     ''other statement'';
 ...
 {{Ada/kw|else}}
     ''another statement'';
 {{Ada/kw|end}} {{Ada/kw|if}}; 

{{:Template:Computer Programming/Control/1.2}}

 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 {{Ada/kw|use}}  {{Ada/package|Ada|Text_IO}};
 ...
 {{Ada/kw|type}} Degrees {{Ada/kw|is}} {{Ada/kw|new}} Float {{Ada/kw|range}} -273.15 .. Float'Last;
 ...
 Temperature : Degrees;
 ...
 {{Ada/kw|if}} Temperature &gt;= 40.0 {{Ada/kw|then}}
     Put_Line ("Wow!");
     Put_Line ("It's extremely hot");
 {{Ada/kw|elsif}} Temperature &gt;= 30.0 {{Ada/kw|then}}
     Put_Line ("It's hot");
 {{Ada/kw|elsif}} Temperature &gt;= 20.0 {{Ada/kw|then}}
     Put_Line ("It's warm");
 {{Ada/kw|elsif}} Temperature &gt;= 10.0 {{Ada/kw|then}}
     Put_Line ("It's cool");
 {{Ada/kw|elsif}} Temperature &gt;= 0.0 {{Ada/kw|then}}
     Put_Line ("It's cold");
 {{Ada/kw|else}}
     Put_Line ("It's freezing");
 {{Ada/kw|end}} {{Ada/kw|if}}; 

{{:Template:Computer Programming/Control/1.3}}

In Ada, conditional statements with more than one conditional do not use short-circuit evaluation by default.  In order to mimic C/C++'s short-circuit evaluation, use &lt;code&gt;{{Ada/kw|and}} {{Ada/kw|then}}&lt;/code&gt; or &lt;code&gt;{{Ada/kw|or}} {{Ada/kw|else}}&lt;/code&gt; between the conditions.

{{:Template:Computer Programming/Control/2}}

 {{Ada/kw|case}} X {{Ada/kw|is}}
    {{Ada/kw|when}} 1 {{Ada/dl|1= =&gt;}}
 
       Walk_The_Dog;
 
    {{Ada/kw|when}} 5 {{Ada/dl|1= =&gt;}}
 
       Launch_Nuke;
 
    {{Ada/kw|when}} 8 | 10 {{Ada/dl|1= =&gt;}}
 
       Sell_All_Stock;
 
    {{Ada/kw|when}} {{Ada/kw|others}} {{Ada/dl|1= =&gt;}}
 
       Self_Destruct;
 
 {{Ada/kw|end}} {{Ada/kw|case}};

The subtype of X must be a discrete type, i.e. an enumeration or integer type.

In Ada, one advantage of the case statement is that the compiler will check the coverage of the choices, that is, all the values of the subtype of variable X must be present or a default branch {{Ada/kw|when}} {{Ada/kw|others}} must specify what to do in the remaining cases.

{{:Template:Computer Programming/Control/3}}

For procedures:

 {{Ada/kw|return}};

For functions:

 {{Ada/kw|return}} Value;

{{:Template:Computer Programming/Control/4}}

    {{Ada/kw|goto}} Label;
 
    Dont_Do_Something;
 
 {{Ada/dl|&lt;&lt;}}Label{{Ada/dl|&gt;&gt;}}
    ...

{{:Template:Computer Programming/Control/5}}

 {{Ada/kw|procedure}} Use_Return {{Ada/kw|is}}
 {{Ada/kw|begin}}
    Do_Something;
 
    {{Ada/kw|if}} Test {{Ada/kw|then}}
       {{Ada/kw|return}};
    {{Ada/kw|end}} {{Ada/kw|if}};
 
    Do_Something_Else;
 
    {{Ada/kw|return}};
 {{Ada/kw|end}} Use_Return;

 {{Ada/kw|procedure}} Use_Goto {{Ada/kw|is}}
 {{Ada/kw|begin}}
    Do_Something{{Ada/dl|;}}
   
    {{Ada/kw|if}} Test {{Ada/kw|then}}
       {{Ada/kw|goto}} Exit_Use_Goto{{Ada/dl|;}}
    {{Ada/kw|end}} {{Ada/kw|if}}{{Ada/dl|;}}
 
    Do_Something_Else{{Ada/dl|;}}
 
 {{Ada/dl|&lt;&lt;}}Exit_Use_Goto{{Ada/dl|&gt;&gt;}}
    {{Ada/kw|return}}{{Ada/dl|;}}
 {{Ada/kw|end}} Use_Goto{{Ada/dl|;}}

{{:Template:Computer Programming/Control/6}}

 {{Ada/kw|procedure}} Use_If {{Ada/kw|is}}
 {{Ada/kw|begin}}
    Do_Something;
   
    {{Ada/kw|if}} {{Ada/kw|not}} Test {{Ada/kw|then}}
 
       Do_Something_Else;
 
    {{Ada/kw|end}} {{Ada/kw|if}};
 
    {{Ada/kw|return}};
 {{Ada/kw|end}} Use_If;

{{:Template:Computer Programming/Control/7}}

 ''Endless_Loop'' :
    {{Ada/kw|loop}}
 
       Do_Something;
 
    {{Ada/kw|end}} {{Ada/kw|loop}} ''Endless_Loop'';

The loop name (in this case, "Endless_Loop") is an optional feature of Ada. Naming loops is nice for readability but not strictly needed. Loop names are
useful though if the program should jump out of an inner loop, see below.

{{:Template:Computer Programming/Control/8}}

 ''While_Loop'' :
    {{Ada/kw|while}} X &lt;= 5 {{Ada/kw|loop}}
 
       X := Calculate_Something;
 
    {{Ada/kw|end}} {{Ada/kw|loop}} ''While_Loop'';

{{:Template:Computer Programming/Control/9}}

 ''Until_Loop'' :
    {{Ada/kw|loop}}
 
       X := Calculate_Something;
 
       {{Ada/kw|exit}} Until_Loop {{Ada/kw|when}} X &gt; 5;
    {{Ada/kw|end}} {{Ada/kw|loop}} ''Until_Loop'';

{{:Template:Computer Programming/Control/10}}

 ''Exit_Loop'' :
    {{Ada/kw|loop}}
 
       X := Calculate_Something;
 
       {{Ada/kw|exit}} Exit_Loop {{Ada/kw|when}} X &gt; 5;
 
       Do_Something (X);
 
    {{Ada/kw|end}} {{Ada/kw|loop}}  ''Exit_Loop'';

In Ada the '''exit''' condition can be combined with any other loop statement as well. You can also have more than one '''exit''' statement. You can also exit a named outer loop if you have several loops inside each other.

{{:Template:Computer Programming/Control/11}}

 ''For_Loop'' :
    {{Ada/kw|for}} I {{Ada/kw|in}} Integer {{Ada/kw|range}} 1 .. 10 {{Ada/kw|loop}}
 
       Do_Something (I)
 
    {{Ada/kw|end}} {{Ada/kw|loop}} ''For_Loop'';

You don't have to declare both subtype and range as seen in the example. If you leave out the subtype then the compiler will determine it by context; if you leave out the range then the loop will iterate over every value of the subtype given.

As always with Ada: when "determine by context" gives two or more possible options then an error will be displayed and then you have to name the type to be used. Ada will only do "guess-works" when it is safe to do so.

The loop counter I is a constant implicitly declared and ceases to exist after the body of the loop.

{{:Template:Computer Programming/Control/12}}

 ''Array_Loop'' :
    {{Ada/kw|for}} I {{Ada/kw|in}} X'{{Ada/attribute|Range}} {{Ada/kw|loop}}
 
       X (I) := Get_Next_Element;
 
    {{Ada/kw|end}} {{Ada/kw|loop}} ''Array_Loop'';

With X being an array. Note: This syntax is mostly used on arrays &amp;mdash; hence the name &amp;mdash; but will also work with other types when a full iteration is needed.

==== Working Demo ====

The following Demo shows how to iterate over every element of an integer type.

 {{Ada/Sourceforge|range_1.adb}}
 
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 
 {{Ada/kw|procedure}} Range_1 {{Ada/kw|is}}
    {{Ada/kw|type}} Range_Type {{Ada/kw|is}} {{Ada/kw|range}} -5 .. 10;
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} {{Ada/package|Ada|Text_IO}};
    {{Ada/kw|package}} I_IO {{Ada/kw|is}} {{Ada/kw|new}}  {{Ada/package|Ada|Text_IO|Integer_IO}} (Range_Type);
 
 {{Ada/kw|begin}}
    {{Ada/kw|for}} A {{Ada/kw|in}} Range_Type {{Ada/kw|loop}}
       I_IO.Put (Item  =&gt; A,
                 Width =&gt; 3,
                 Base  =&gt; 10);
 
       {{Ada/kw|if}} A &lt; Range_Type'Last {{Ada/kw|then}}
          T_IO.Put (",");
       {{Ada/kw|else}}
          T_IO.New_Line;
       {{Ada/kw|end}} {{Ada/kw|if}};
    {{Ada/kw|end}} {{Ada/kw|loop}};
 {{Ada/kw|end}} Range_1;

== See also ==

=== Wikibook ===
* [[Ada Programming]]

=== Ada Reference Manual ===

* {{Ada/RM2|5|3|If Statements}}
* {{Ada/RM2|5|4|Case Statements}}
* {{Ada/RM2|5|5|Loop Statements}}
* {{Ada/RM2|5|6|Block Statements}}
* {{Ada/RM2|5|7|Exit Statements}}
* {{Ada/RM2|5|8|Goto Statements}}
* {{Ada/RM2|6|5|Return Statements}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Control]]
[[es:Programación en Ada/Sentencias y estructuras de control]]
&lt;/noinclude&gt;</text>
      <sha1>gt2c2y87i6iuftnyb799z6unc6db1ny</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Delimiters</title>
    <ns>0</ns>
    <id>19368</id>
    <revision>
      <id>3445414</id>
      <parentid>3250076</parentid>
      <timestamp>2018-07-22T11:33:36Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <minor/>
      <comment>/* Single character delimiters */ Vertical line can be used as link text</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3345" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Delimiters}}
__TOC__&lt;/noinclude&gt;

== Single character delimiters ==

; [[Ada Programming/Delimiters/&amp;|&amp;]] : ampersand &lt;small&gt;(also operator [[Ada Programming/Delimiters/&amp;|&amp;]])&lt;/small&gt; 
; [[Ada Programming/Delimiters/'|']] : apostrophe, tick
; [[Ada Programming/Delimiters/(|(]] : left parenthesis
; [[Ada Programming/Delimiters/)|)]] : right parenthesis
; [[Ada Programming/Delimiters/*|*]] : asterisk, multiply &lt;small&gt;(also operator [[Ada Programming/Operators/*|*]])&lt;/small&gt; 
; [[Ada Programming/Delimiters/+|+]] : plus sign &lt;small&gt;(also operator [[Ada Programming/Delimiters/+|+]])&lt;/small&gt; 
; [[Ada Programming/Delimiters/,|,]] : comma
; [[Ada Programming/Delimiters/-|-]] : hyphen, minus &lt;small&gt;(also operator [[Ada Programming/Operators/-|-]])&lt;/small&gt; 
; [[Ada Programming/Delimiters/dot|.]] : full stop, point, dot
; [[Ada Programming/Delimiters//|/]] : solidus, divide &lt;small&gt;(also operator [[Ada Programming/Operators//|/]])&lt;/small&gt; 
; [[Ada Programming/Delimiters/:|:]] : colon
; [[Ada Programming/Delimiters/;|;]] : semicolon
; [[Ada Programming/Delimiters/less than|&lt;]] : less than sign &lt;small&gt;(also operator)&lt;/small&gt; 
; [[Ada Programming/Delimiters/=|=]] : equal sign &lt;small&gt;(also operator [[Ada Programming/Operators/=|=]])&lt;/small&gt; 
; [[Ada Programming/Delimiters/greater than|&gt;]] : greater than sign &lt;small&gt;(also operator)&lt;/small&gt;
; [[Ada Programming/Delimiters/vertical line||]] : vertical line

== Compound character delimiters ==

; [[Ada Programming/Delimiters/arrow|=&gt;]] : arrow
; [[Ada Programming/Delimiters/double dot|..]] : double dot
; [[Ada Programming/Delimiters/**|**]] : double star, exponentiate &lt;small&gt;(also operator [[Ada Programming/Operators/**|**]])&lt;/small&gt; 
; [[Ada Programming/Delimiters/:=|:=]] : assignment
; [[Ada Programming/Delimiters//=|/=]] : inequality &lt;small&gt;(also operator)&lt;/small&gt;
; [[Ada Programming/Delimiters/greater than or equal to|&gt;=]] : greater than or equal to &lt;small&gt;(also operator)&lt;/small&gt;
; [[Ada Programming/Delimiters/less than or equal to|&lt;=]] : less than or equal to &lt;small&gt;(also operator)&lt;/small&gt;
; [[Ada Programming/Delimiters/left label|&lt;&lt;]] : left label bracket
; [[Ada Programming/Delimiters/right label|&gt;&gt;]] : right label bracket
; [[Ada Programming/Delimiters/box|&lt;&gt;]] : box

== Others ==

The following ones are special characters but not delimiters.

; [[Ada Programming/Special/"|"]] : quotation mark, used for [[Ada Programming/Lexical elements#String literals|string literals]].
; [[Ada Programming/Special/number sign|#]] : number sign, used in [[Ada Programming/Lexical elements#Numbers|based numeric literals]].

The following special characters are unused in Ada code - they are illegal except within string literals and comments (they are used in the Reference Manual Backus-Naur syntax definition of Ada):

; [ : left square bracket
; ] : right square bracket
; { : left curly bracket
; } : right curly bracket

== See also ==

=== Wikibook ===

* [[Ada Programming]]

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|2|1|title=Character Set}}
* {{Ada/95/RM|2|2|title=Lexical Elements, Separators, and Delimiters}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|2|1|title=Character Set}}
* {{Ada/2005/RM|2|2|title=Lexical Elements, Separators, and Delimiters}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Delimiters]]
&lt;/noinclude&gt;</text>
      <sha1>oljlbpsnznwsnz7zgjss26bxjhnyo7t</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Errors</title>
    <ns>0</ns>
    <id>159721</id>
    <revision>
      <id>3250104</id>
      <parentid>3211364</parentid>
      <timestamp>2017-07-31T00:25:32Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* References */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="797" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Errors}}
__TOC__&lt;/noinclude&gt;


Some language features are often misunderstood, resulting in common programming errors, performance degradation and portability problems. The following incorrect usages of the Ada language are often seen in code written by Ada beginners.

== pragma Atomic &amp; Volatile ==
{{:Ada Programming/Pragmas/Atomic:3}}

== pragma Pack ==
{{:Ada Programming/Pragmas/Pack:3}}

== 'Bit_Order attribute ==
{{:Ada Programming/Attributes/'Bit_Order:3}}

== 'Size attribute ==
{{:Ada Programming/Attributes/'Size:3}}

== See also ==
 
=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Tips]]

== References ==

&lt;references/&gt;


&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Errors]]
[[{{BOOKCATEGORY|Ada Programming}}/Common errors]]
&lt;/noinclude&gt;</text>
      <sha1>p6u581wpz48epcvpf6uozjiu6g86ljb</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Exceptions</title>
    <ns>0</ns>
    <id>22688</id>
    <revision>
      <id>3359251</id>
      <parentid>3250105</parentid>
      <timestamp>2018-01-08T16:12:11Z</timestamp>
      <contributor>
        <username>Skapata</username>
        <id>856028</id>
      </contributor>
      <minor/>
      <comment>/* Exception handlers */ Syntax error: comment started with a dash instead of two hyphens.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15280" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Exceptions}}
__TOC__&lt;/noinclude&gt;

== Robustness ==

''Robustness'' is the ability of a system or system component to behave “reasonably” when it detects an anomaly, e.g.:
* It receives invalid inputs.
* Another system component (hardware or software) malfunctions.

Take as example a telephone exchange control program. What should the control program do when a line fails? It is unacceptable simply to halt — all calls will then fail. Better would be to abandon the current call (only), record that the line is out of service, and continue. Better still would be to try to reuse the line — the fault might be transient. Robustness is desirable in all systems, but it is essential in systems on which human safety or welfare depends, e.g., hospital patient monitoring, aircraft fly-by-wire, nuclear power station control, etc.

== Modules, preconditions and postconditions ==

A module may be specified in terms of its preconditions and postconditions. A ''precondition'' is a condition that the module’s inputs are supposed to satisfy. A ''postcondition'' is a condition that the module’s outputs are required to satisfy, provided that the precondition is satisfied.
What should a module do if its precondition is not satisfied?
* Halt?  Even with diagnostic information, this is generally unacceptable.
* Use a global result code?  The result code can be set to  indicate an anomaly.  Subsequently it may be tested by a module that can effect error recovery.  Problem:  this induces tight coupling among the modules concerned.
* Each module has its own result code? This is a parameter (or  function result) that may be set to indicate an anomaly, and is tested by calling modules.  Problems: (1) setting and testing result codes tends to swamp the normal-case logic and (2) the result codes are normally ignored.
* Exception handling — Ada’s solution.  A module detecting an anomaly raises an exception.  The same, or another, module may handle that exception.

The exception mechanism permits clean, modular handling of anomalous situations:
* A unit (e.g., block or subprogram body) may raise an exception, to signal that an anomaly has been detected.  The computation that raised the exception is abandoned (and can never be resumed, although it can be restarted).
* A unit may propagate an exception that has been raised by itself (or propagated out of another unit it has called).
* A unit may alternatively handle such an exception, allowing programmer-defined recovery from an anomalous situation. Exception handlers are segregated from normal-case code.

== Predefined exceptions ==

The predefined exceptions are those defined in package {{Ada/package|Standard}}. Every language-defined run-time error causes a predefined exception to be raised.  Some examples are:

* &lt;tt&gt;Constraint_Error&lt;/tt&gt;, raised when a subtype’s constraint is not satisfied
* &lt;tt&gt;Program_Error&lt;/tt&gt;, when a protected operation is called inside a protected object, e.g.
* &lt;tt&gt;Storage_Error&lt;/tt&gt;, raised by running out of storage
* &lt;tt&gt;Tasking_Error&lt;/tt&gt;, when a task cannot be activated because the operating system has not enough resources, e.g.

Ex.1

   Name : String (1 .. 10);
   ...
   Name := "Hamlet"; {{Ada/--|Raises Constraint_Error,}}
                     {{Ada/--|because the "Hamlet" has bounds (1 .. 6).}}

Ex.2

   {{Ada/kw|loop}}
      P := {{Ada/kw|new}} Int_Node'(0, P);
   {{Ada/kw|end}} {{Ada/kw|loop}}; {{Ada/--|Soon raises Storage_Error,}}
             {{Ada/--|because of the extreme memory leak.}}

Ex.3  Compare the following approaches:

   {{Ada/kw|procedure}} Compute_Sqrt (X    : {{Ada/kw|in}}  Float;
                           Sqrt : {{Ada/kw|out}} Float;
                           OK   : {{Ada/kw|out}} Boolean)
   {{Ada/kw|is}}
   {{Ada/kw|begin}}
      {{Ada/kw|if}} X &gt;= 0 {{Ada/kw|then}}
         OK := True;
         {{Ada/--|''compute'' √X}}
         ...
      {{Ada/kw|else}}
         OK := False;
      {{Ada/kw|end}} {{Ada/kw|if}};
   {{Ada/kw|end}} Compute_Sqrt;
   
   ...
   
   {{Ada/kw|procedure}} Triangle (A, B, C         : {{Ada/kw|in}}  Float;
                       Area, Perimeter : {{Ada/kw|out}} Float;
                       Exists          : {{Ada/kw|out}} Boolean)
   {{Ada/kw|is}}
      S  : {{Ada/kw|constant}} Float := 0.5 * (A + B + C);
      OK : Boolean;
   {{Ada/kw|begin}}
      Compute_Sqrt (S * (S-A) * (S-B) * (S-C), Area, OK);
      Perimeter := 2.0 * S;
      Exists    := OK;
   {{Ada/kw|end}} Triangle;

A negative argument to Compute_Sqrt causes OK to be set to False. Triangle uses it to determine its own status parameter value, and so on up the calling tree, ''ad nauseam''.

''versus''

   {{Ada/kw|function}} Sqrt (X : Float) {{Ada/kw|return}} Float {{Ada/kw|is}}
   {{Ada/kw|begin}}
      {{Ada/kw|if}} X &lt; 0.0 {{Ada/kw|then}}
         {{Ada/kw|raise}} Constraint_Error;
      {{Ada/kw|end}} {{Ada/kw|if}};
      {{Ada/--|''compute'' √X}}
      ...
   {{Ada/kw|end}} Sqrt;
   
   ...
   
   {{Ada/kw|procedure}} Triangle (A, B, C         : {{Ada/kw|in}}  Float;
                       Area, Perimeter : {{Ada/kw|out}} Float)
   {{Ada/kw|is}}
      S: {{Ada/kw|constant}} Float := 0.5 * (A + B + C);
   {{Ada/kw|begin}}
      Area      := Sqrt (S * (S-A) * (S-B) * (S-C));
      Perimeter := 2.0 * S;
   {{Ada/kw|end}} Triangle;

A negative argument to Sqrt causes Constraint_Error to be explicitly raised inside Sqrt, and propagated out.  Triangle simply propagates the exception (by not handling it).

Alternatively, we can catch the error by using the type system:

   {{Ada/kw|subtype}} Pos_Float {{Ada/kw|is}} Float {{Ada/kw|range}} 0.0 .. Float'{{Ada/attribute|Last}};
   
   {{Ada/kw|function}} Sqrt (X : Pos_Float) {{Ada/kw|return}} Pos_Float {{Ada/kw|is}}
   {{Ada/kw|begin}}
      {{Ada/--|''compute'' √X}}
      ...
   {{Ada/kw|end}} Sqrt;

A negative argument to Sqrt now raises Constraint_Error at the point of call. Sqrt is never even entered.

== Input-output exceptions ==

Some examples of exceptions raised by subprograms of the '''predefined package''' {{Ada/package|Ada.Text_IO}} are:
* &lt;tt&gt;End_Error&lt;/tt&gt;, raised by Get, Skip_Line, etc., if end-of-file already reached.
* &lt;tt&gt;Data_Error&lt;/tt&gt;, raised by Get in Integer_IO, etc., if the input is not a literal of the expected type.
* &lt;tt&gt;Mode_Error&lt;/tt&gt;, raised by trying to read from an output file, or write to an input file, etc.
* &lt;tt&gt;Layout_Error&lt;/tt&gt;, raised by specifying an invalid data format in a text I/O operation

Ex. 1
   {{Ada/kw|declare}}
      A : Matrix (1 .. M, 1 .. N);
   {{Ada/kw|begin}}
      {{Ada/kw|for}} I {{Ada/kw|in}} 1 .. M {{Ada/kw|loop}}
         {{Ada/kw|for}} J {{Ada/kw|in}} 1 .. N {{Ada/kw|loop}}
             {{Ada/kw|begin}}
                Get (A(I,J));
             {{Ada/kw|exception}}
                {{Ada/kw|when}} Data_Error =&gt;
                   Put ("Ill-formed matrix element");
                   A(I,J) := 0.0;
             {{Ada/kw|end}};
          {{Ada/kw|end}} {{Ada/kw|loop}};
      {{Ada/kw|end}} {{Ada/kw|loop}};
   {{Ada/kw|exception}}
      {{Ada/kw|when}} End_Error =&gt;
         Put ("Matrix element(s) missing");
   {{Ada/kw|end}};

== Exception declarations ==

Exceptions are declared similarly to objects.

Ex.1 declares two exceptions:

   Line_Failed, Line_Closed: {{Ada/kw|exception}};

However, exceptions are not objects. For example, recursive re-entry to a scope where an exception is declared does ''not'' create a new exception of the same name; instead the exception declared in the outer invocation is reused.

Ex.2

   {{Ada/kw|package}} Directory_Enquiries {{Ada/kw|is}}
 
      {{Ada/kw|procedure}} Insert (New_Name   : {{Ada/kw|in}} Name;
                        New_Number : {{Ada/kw|in}} Number);
 
      {{Ada/kw|procedure}} Lookup (Given_Name  : {{Ada/kw|in}}  Name;
                        Corr_Number : {{Ada/kw|out}} Number);
 
      Name_Duplicated : {{Ada/kw|exception}};
      Name_Absent     : {{Ada/kw|exception}};
      Directory_Full  : {{Ada/kw|exception}};
 
   {{Ada/kw|end}} Directory_Enquiries;

== Exception handlers ==

When an exception occurs, the normal flow of execution is abandoned and the exception is handed up the call sequence until a matching handler is found.
Any declarative region (except a package specification) can have a handler.
The handler names the exceptions it will handle. By moving up the call sequence, exceptions can become anonymous; in this case, they can only be handled with the {{Ada/kw|others}} handler.

 {{Ada/kw|function}} F {{Ada/kw|return}} Some_Type {{Ada/kw|is}}
   ... -- declarations (1)
 {{Ada/kw|begin}}
   ... -- statements (2)
 {{Ada/kw|exception}} -- handlers start here (3)
   {{Ada/kw|when}} Name_1 | Name_2 =&gt; ... -- The named exceptions are handled with these statements
   {{Ada/kw|when}} {{Ada/kw|others}} =&gt; ...  -- any other exceptions (also anonymous ones) are handled here
 {{Ada/kw|end}} F;

Exceptions raised in the declarative region itself (1) cannot be handled by handlers of this region (3); they can only be handled in outer scopes. Exceptions raised in the sequence of statements (2) can of course be handled at (3).

The reason for this rule is so that the handler can assume that any items declared in the declarative region (1) are well defined and may be referenced.
If the handler at (3) could handle exceptions raised at (1), it would be unknown which items existed and which ones didn't.

== Raising exceptions ==

The '''raise''' statement explicitly raises a specified exception.  

Ex. 1

   {{Ada/kw|package}} {{Ada/kw|body}} Directory_Enquiries {{Ada/kw|is}}
   
      {{Ada/kw|procedure}} Insert (New_Name   : {{Ada/kw|in}} Name;
                        New_Number : {{Ada/kw|in}} Number)
      {{Ada/kw|is}}
         …
      {{Ada/kw|begin}}
         …
         {{Ada/kw|if}} New_Name = Old_Entry.A_Name {{Ada/kw|then}}
            {{Ada/kw|raise}} Name_Duplicated;
         {{Ada/kw|end}} {{Ada/kw|if}};
         …
         New_Entry :=  {{Ada/kw|new}} Dir_Node'(New_Name, New_Number,…);
         …
      {{Ada/kw|exception}}
         {{Ada/kw|when}} Storage_Error =&gt; {{Ada/kw|raise}} Directory_Full;
      {{Ada/kw|end}} Insert;
      
      {{Ada/kw|procedure}} Lookup (Given_Name  : {{Ada/kw|in}}  Name;
                        Corr_Number : {{Ada/kw|out}} Number)
      {{Ada/kw|is}}
         …
      {{Ada/kw|begin}}
         …
         {{Ada/kw|if}} {{Ada/kw|not}} Found {{Ada/kw|then}}
            {{Ada/kw|raise}} Name_Absent;
         {{Ada/kw|end}} {{Ada/kw|if}};
         …
      {{Ada/kw|end}} Lookup;
   
   {{Ada/kw|end}} Directory_Enquiries;

== Exception handling and propagation ==

Exception handlers may be grouped at the end of a block, subprogram body, etc. A handler is any sequence of statements that may end:
* by completing;
* by executing a '''return''' statement;
* by raising a different exception ('''raise''' e;);
* by re-raising the same exception ('''raise''';).

Suppose that an exception ''e'' is raised in a sequence of statements ''U'' (a block, subprogram body, etc.).
* If ''U'' contains a handler for ''e'':  that handler is executed, then control leaves ''U''.
* If ''U'' contains no handler for ''e'':  ''e'' is ''propagated'' out of ''U''; in effect, ''e'' is raised at the "point of call” of ''U''.

So the raising of an exception causes the sequence of statements responsible to be abandoned at the point of occurrence of the exception. It is not, and cannot be, resumed.

Ex. 1

   ...
   {{Ada/kw|exception}}
      {{Ada/kw|when}} Line_Failed =&gt;
         {{Ada/kw|begin}} {{Ada/--|attempt recovery}}
            Log_Error;
            Retransmit (Current_Packet);
         {{Ada/kw|exception}}
            {{Ada/kw|when}} Line_Failed =&gt;
               Notify_Engineer; {{Ada/--|recovery failed!}}
               Abandon_Call;
         {{Ada/kw|end}};
   ...

== Information about an exception occurrence ==

Ada provides information about an exception in an object of type  Exception_Occurrence, defined in {{Ada/package|Ada.Exceptions}} along with subprograms taking this type as parameter:

* Exception_Name: return the full exception name using the dot notation and in uppercase letters. For example, &lt;tt&gt;Queue.Overflow&lt;/tt&gt;.
* Exception_Message: return the exception message associated with the occurrence.
* Exception_Information: return a string including the exception name and the associated exception message.

For getting an exception occurrence object the following syntax is used:

 {{Ada/kw|with}} {{Ada/package|Ada|Exceptions}};  {{Ada/kw|use}} {{Ada/package|Ada|Exceptions}};
 ...
 {{Ada/kw|exception}}
   {{Ada/kw|when}} Error: High_Pressure | High_Temperature =&gt;
     Put ("Exception: ");
     Put_Line (Exception_Name (Error));
     Put (Exception_Message (Error));
   {{Ada/kw|when}} Error: {{Ada/kw|others}} =&gt;
     Put ("Unexpected exception: ");
     Put_Line (Exception_Information(Error));
 {{Ada/kw|end}};

The exception message content is implementation defined when it is not set by the user who raises the exception. It usually contains a reason for the exception and the raising location.

The user can specify a message using the procedure Raise_Exception.

 {{Ada/kw|declare}}
    Valve_Failure : {{Ada/kw|exception}};
 {{Ada/kw|begin}}
   ...
   Raise_Exception (Valve_Failure'{{Ada/attribute|Identity}}, "Failure while opening");
   ...
   Raise_Exception (Valve_Failure'{{Ada/attribute|Identity}}, "Failure while closing");
   ...
 {{Ada/kw|exception}}
   {{Ada/kw|when}} Fail: Valve_Failure =&gt;
     Put (Exception_Message (Fail));
 {{Ada/kw|end}};


Starting with Ada 2005, a simpler syntax can be used to associate a string message with exception occurrence.
 -- {{Ada/2005}}
 {{Ada/kw|declare}}
    Valve_Failure : {{Ada/kw|exception}};
 {{Ada/kw|begin}}
   ...
   {{Ada/kw|raise}} Valve_Failure {{Ada/kw|with}} "Failure while opening";
   ...
   {{Ada/kw|raise}} Valve_Failure {{Ada/kw|with}} "Failure while closing";
   ...
 {{Ada/kw|exception}}
   {{Ada/kw|when}} Fail: Valve_Failure =&gt;
     Put (Exception_Message (Fail));
 {{Ada/kw|end}};

The {{Ada/package|Ada.Exceptions}} package also provides subprograms for saving exception occurrences and re-raising them.

== See also ==

=== Wikibook ===

* [[Ada Programming]]

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|11|title=Exceptions}}
* {{Ada/95/RM|11|4|1|title=The Package Exceptions}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|11|title=Exceptions}}
* {{Ada/2005/RM|11|4|1|title=The Package Exceptions}}

=== Ada Quality and Style Guide ===

* '''Chapter 4: Program Structure'''
** {{Ada/SG2|4|3|Exceptions}}
*** {{Ada/SG3|4|3|1|Using Exceptions to Help Define an Abstraction}}

* '''Chapter 5: Programming Practices'''
** {{Ada/SG2|5|8|Using Exceptions}}
*** {{Ada/SG3|5|8|1|Handling Versus Avoiding Exceptions}}
*** {{Ada/SG3|5|8|2|Handling for Others}}
*** {{Ada/SG3|5|8|3|Propagation}}
*** {{Ada/SG3|5|8|4|Localizing the Cause of an Exception}}

* '''Chapter 7: Portability'''
** {{Ada/SG2|7|5|Exceptions}}
*** {{Ada/SG3|7|5|1|Predefined and User-Defined Exceptions}}
*** {{Ada/SG3|7|5|2|Implementation-Specific Exceptions}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Exceptions]]


[[es:Programación en Ada/Excepciones]]
&lt;/noinclude&gt;</text>
      <sha1>1edomjf9ndyvehavdq3com4skgktgid</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Function overloading</title>
    <ns>0</ns>
    <id>22438</id>
    <revision>
      <id>3211621</id>
      <parentid>2504525</parentid>
      <timestamp>2017-05-01T17:28:33Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3279" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Function overloading}}
__TOC__&lt;/noinclude&gt;

 {{Ada/Sourceforge|function_overloading.adb}}
 
 {{Ada/kw|function}} Generate_Number (MaxValue : Integer) {{Ada/kw|return}} Integer {{Ada/kw|is}}
    {{Ada/kw|subtype}} Random_Type {{Ada/kw|is}} Integer {{Ada/kw|range}} 0 .. MaxValue;
    {{Ada/kw|package}} Random_Pack {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada.Numerics.Discrete_Random}} (Random_Type);
  
    G : Random_Pack.Generator;
 {{Ada/kw|begin}}
    Random_Pack.Reset (G);
    {{Ada/kw|return}} Random_Pack.Random (G);
 {{Ada/kw|end}} Generate_Number;
 
 
 {{Ada/kw|function}} Generate_Number (MinValue : Integer;
                           MaxValue : Integer) {{Ada/kw|return}} Integer
 {{Ada/kw|is}}
    {{Ada/kw|subtype}} Random_Type {{Ada/kw|is}} Integer {{Ada/kw|range}} MinValue .. MaxValue;
    {{Ada/kw|package}} Random_Pack {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada.Numerics.Discrete_Random}} (Random_Type);
  
    G : Random_Pack.Generator;
 {{Ada/kw|begin}}
    Random_Pack.Reset (G);
    {{Ada/kw|return}} Random_Pack.Random (G);
 {{Ada/kw|end}} Generate_Number;

  Number_1 : Integer := Generate_Number (10);

  Number_2 : Integer := Generate_Number (6, 10);

== Function overloading in Ada ==

Ada supports all six signature options but if you use the arguments' name as option you will always have to name the parameter when calling the function. i.e.:

 Number_2 : Integer := Generate_Number (MinValue =&gt; 6,
                                        MaxValue =&gt; 10);

Note that you cannot overload a generic procedure or generic function within the same package. The following example will fail to compile:

  {{Ada/kw|package}} myPackage
    {{Ada/kw|generic}}
      {{Ada/kw|type}} Value_Type {{Ada/kw|is}} (&lt;&gt;);  
    {{Ada/--|The first declaration of a generic subprogram}}
    {{Ada/--|with the name "Generic_Subprogram"}}
    {{Ada/kw|procedure}} Generic_Subprogram (Value : {{Ada/kw|in}} {{Ada/kw|out}} Value_Type);
    ...
    {{Ada/kw|generic}}
      {{Ada/kw|type}} Value_Type {{Ada/kw|is}} (&lt;&gt;); 
    {{Ada/--|This subprogram has the same name, but no}}
    {{Ada/--|input or output parameters. A non-generic}}
    {{Ada/--|procedure would be overloaded here.}}
    {{Ada/--|Since this procedure is generic, overloading}}
    {{Ada/--|is not allowed and this package will not compile.}}
    {{Ada/kw|procedure}} Generic_Subprogram;
    ...
    {{Ada/kw|generic}}
      {{Ada/kw|type}} Value_Type {{Ada/kw|is}} (&lt;&gt;); 
    {{Ada/--|The same situation.}}
    {{Ada/--|Even though this is a function and not}}
    {{Ada/--|a procedure, generic overloading of}}
    {{Ada/--|the name "Generic_Subprogram" is not allowed.}}
    {{Ada/kw|function}} Generic_Subprogram (Value : Value_Type) {{Ada/kw|return}} Value_Type;
  {{Ada/kw|end}} myPackage;

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Subprograms]]

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|6|6|title=Overloading of Operators}}
* {{Ada/95/RM|8|6|title=The Context of Overload Resolution}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|6|6|title=Overloading of Operators}}
* {{Ada/2005/RM|8|6|title=The Context of Overload Resolution}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Function overloading]]
&lt;/noinclude&gt;</text>
      <sha1>7rg461j1t2y5s0iwopth6ecp9c9jx68</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Generics</title>
    <ns>0</ns>
    <id>19760</id>
    <revision>
      <id>3655738</id>
      <parentid>3412708</parentid>
      <timestamp>2020-01-27T17:25:23Z</timestamp>
      <contributor>
        <username>1234qwer1234qwer4</username>
        <id>1406991</id>
      </contributor>
      <minor/>
      <comment>typo using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27114" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Generics}}
__TOC__&lt;/noinclude&gt;

== Parametric polymorphism (generic units) ==

The idea of code reuse arises from the necessity for constructing large software systems combining well-established building blocks. The reusability of code improves the productivity and the quality of software. The generic units are one of the ways in which the Ada language supports this characteristic. A generic unit is a subprogram or package that defines algorithms in terms of types and operations that are not defined until the user instantiates them.

Note to C++ programmers: generic units are similar to C++ templates.

For example, to define a procedure for swapping variables of any (non-limited) type:

 {{Ada/kw|generic}}
   {{Ada/kw|type}} Element_T {{Ada/kw|is}} {{Ada/kw|private}};  {{Ada/--|Generic formal type parameter}}
 {{Ada/kw|procedure}} Swap (X, Y : {{Ada/kw|in}} {{Ada/kw|out}} Element_T);

 {{Ada/kw|procedure}} Swap (X, Y : {{Ada/kw|in}} {{Ada/kw|out}} Element_T) {{Ada/kw|is}}
   Temporary : {{Ada/kw|constant}} Element_T := X;
 {{Ada/kw|begin}}
   X := Y;
   Y := Temporary;
 {{Ada/kw|end}} Swap;

The &lt;tt&gt;Swap&lt;/tt&gt; subprogram is said to be generic. The subprogram specification is preceded by the generic formal part consisting of the reserved word {{Ada/kw|generic}} followed by a list of generic formal parameters which may be empty. The entities declared as generic are not directly usable, it is necessary to instantiate them.

To be able to use &lt;tt&gt;Swap&lt;/tt&gt;, it is necessary to create an instance for the wanted type. For example:

 {{Ada/kw|procedure}} Swap_Integers {{Ada/kw|is}} {{Ada/kw|new}} Swap (Integer);

Now the &lt;tt&gt;Swap_Integers&lt;/tt&gt; procedure can be used for variables of type &lt;tt&gt;Integer&lt;/tt&gt;.

The generic procedure can be instantiated for all the needed types. It can be instantiated with different names or, if the same identifier is used in the instantiation, each declaration overloads the procedure:

 {{Ada/kw|procedure}} Instance_Swap {{Ada/kw|is}} {{Ada/kw|new}} Swap (Float);
 {{Ada/kw|procedure}} Instance_Swap {{Ada/kw|is}} {{Ada/kw|new}} Swap (Day_T);
 {{Ada/kw|procedure}} Instance_Swap {{Ada/kw|is}} {{Ada/kw|new}} Swap (Element_T =&gt; Stack_T);

Similarly, generic packages can be used, for example, to implement a stack of any kind of elements:

 {{Ada/kw|generic}}
   Max: Positive; 
   {{Ada/kw|type}} Element_T {{Ada/kw|is}} {{Ada/kw|private}};
 {{Ada/kw|package}} Generic_Stack {{Ada/kw|is}}
   {{Ada/kw|procedure}} Push (E: Element_T);
   {{Ada/kw|function}} Pop return Element_T;
 {{Ada/kw|end}} Generic_Stack;

 {{Ada/kw|package}} {{Ada/kw|body}} Generic_Stack {{Ada/kw|is}}
   Stack: {{Ada/kw|array}} (1 .. Max) {{Ada/kw|of}} Element_T;
   Top  : Integer {{Ada/kw|range}} 0 .. Max := 0;  {{Ada/comment|initialise to empty}}
   {{Ada/--|...}}
 {{Ada/kw|end}} Generic_Stack;

A stack of a given size and type could be defined in this way:

 {{Ada/kw|declare}}
   {{Ada/kw|package}} Float_100_Stack {{Ada/kw|is}} {{Ada/kw|new}} Generic_Stack (100, Float);
   {{Ada/kw|use}} Float_100_Stack;
 {{Ada/kw|begin}}
   Push (45.8);
   {{Ada/--|...}}
 {{Ada/kw|end}};

== Generic parameters ==

The generic unit declares ''generic formal parameters'', which can be:

* objects (of mode ''in'' or ''in out'' but never ''out'')
* types
* subprograms
* instances of another, designated, generic unit.

When instantiating the generic, the programmer passes one ''actual parameter'' for each formal.  Formal values and subprograms can have defaults, so passing an actual for them is optional.

=== Generic formal objects ===

Formal parameters of mode ''in'' accept any value, constant, or variable of the designated type.  The actual is copied into the generic instance, and behaves as a
constant inside the generic; this implies that the designated type cannot be limited.  It is possible to specify a default value, like this:

 {{Ada/kw|generic}}
    Object : {{Ada/kw|in}} Natural := 0;

For mode ''in out'', the actual must be a variable.

One limitation with generic formal objects is that they are never considered static, even if the actual happens to be static.   If the object is a number, it cannot be used to create a new type.  It can however be used to create a new derived type, or a subtype:

 {{Ada/kw|generic}}
    Size : {{Ada/kw|in}} Natural := 0;
 {{Ada/kw|package}} P {{Ada/kw|is}}
    {{Ada/kw|type}} T1 {{Ada/kw|is}} {{Ada/kw|mod}} Size; {{Ada/comment|illegal!}}
    {{Ada/kw|type}} T2 {{Ada/kw|is}} {{Ada/kw|range}} 1 .. Size; {{Ada/comment|illegal!}}
    {{Ada/kw|type}} T3 {{Ada/kw|is}} {{Ada/kw|new}} Integer {{Ada/kw|range}} 1 .. Size; {{Ada/comment|OK}}
    {{Ada/kw|subtype}} T4 {{Ada/kw|is}} Integer {{Ada/kw|range}} 1 .. Size; {{Ada/comment|OK}}
 {{Ada/kw|end}} P;

The reason why formal objects are nonstatic is to allow the compiler to emit the object code for the generic only once, and to have all instances share it, passing it the address of their actual object as a parameter.  This bit of compiler technology is called ''shared generics''.  If formal objects were static, the compiler would have to emit one copy of the object code, with the object embedded in it, for each instance, potentially leading to an explosion in object code size (''code bloat'').

(Note to C++ programmers: in C++, since formal objects can be static, the compiler cannot implement shared generics in the general case; it would have to examine the entire body of the generic before deciding whether or not to share its object code.  In contrast, Ada generics are designed so that the compiler can instantiate a generic ''without looking at its body''.)

=== Generic formal types ===

The syntax allows the programmer to specify which type categories are acceptable as actuals. As a rule of thumb: The syntax expresses how the generic sees the type, i.e. it assumes the worst, not how the creator of the instance sees the type.

This is the syntax of RM {{Ada/RM|12|5}}:

  formal_type_declaration ::=
    {{Ada/kw|type}} defining_identifier[discriminant_part] {{Ada/kw|is}} formal_type_definition;
  
  formal_type_definition ::= formal_private_type_definition
                           | formal_derived_type_definition
                           | formal_discrete_type_definition
                           | formal_signed_integer_type_definition
                           | formal_modular_type_definition
                           | formal_floating_point_definition
                           | formal_ordinary_fixed_point_definition
                           | formal_decimal_fixed_point_definition
                           | formal_array_type_definition
                           | formal_access_type_definition
                           | formal_interface_type_definition

This is quite complex, so some examples are given below. A type declared with the syntax &lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;)&lt;/code&gt; denotes a type with ''unknown discriminants''. This is the Ada vernacular for indefinite types, i.e. types for which objects cannot be declared without giving an initial expression. An example of such a type is one with a discriminant without default, another example is an unconstrained array type.

{| class="wikitable"
!Generic formal type || Acceptable actual types
|-
|&lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}};&lt;/code&gt; || Any type at all.  The actual type can be [[Ada Programming/Types/limited|limited]] or not, indefinite or definite, but the ''generic'' treats it as limited and indefinite, i.e. does not assume that assignment is available for the type.
|-
|&lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|private}};&lt;/code&gt; || Any nonlimited type: the generic knows that it is possible to assign to variables of this type, but it is not possible to declare objects of this type without initial value.
|-
|&lt;code&gt;{{Ada/kw|type}} T {{Ada/kw|is}} {{Ada/kw|private}};&lt;/code&gt; || Any nonlimited definite type: the generic knows that it is possible to assign to variables of this type and to declare objects without initial value.
|-
|&lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|abstract}} {{Ada/kw|tagged}} {{Ada/kw|limited}} {{Ada/kw|private}};&lt;/code&gt; || Any [[Ada Programming/Object Orientation|tagged type]], abstract or concrete, limited or not.
|-
|&lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|limited}} {{Ada/kw|private}};&lt;/code&gt; || Any concrete tagged type, limited or not.
|-
|&lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|abstract}} {{Ada/kw|tagged}} {{Ada/kw|private}};&lt;/code&gt; || Any nonlimited tagged type, abstract or concrete.
|-
|&lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|private}};&lt;/code&gt; || Any nonlimited, concrete tagged type.
|-
|&lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|new}} Parent;&lt;/code&gt; || Any type derived from &lt;code&gt;Parent&lt;/code&gt;.  The generic knows about &lt;code&gt;Parent&lt;/code&gt;'s operations, so can call them.  Neither &lt;code&gt;T&lt;/code&gt; nor &lt;code&gt;Parent&lt;/code&gt; can be abstract.
|-
|&lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|abstract}} {{Ada/kw|new}} Parent {{Ada/kw|with}} {{Ada/kw|private}};&lt;/code&gt; || Any type, abstract or concrete, derived from &lt;code&gt;Parent&lt;/code&gt;, where &lt;code&gt;Parent&lt;/code&gt; is a tagged type, so calls to &lt;code&gt;T&lt;/code&gt;'s operations can dispatch dynamically.
|-
|&lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|new}} Parent {{Ada/kw|with}} {{Ada/kw|private}};&lt;/code&gt; || Any concrete type, derived from the tagged type &lt;code&gt;Parent&lt;/code&gt;.
|-
|&lt;code&gt;{{Ada/kw|type}} T {{Ada/kw|is}} (&lt;&gt;);&lt;/code&gt; || Any discrete type: [[Ada Programming/Types/range|integer]], [[Ada Programming/Types/mod|modular]], or [[Ada Programming/Types/Enumeration|enumeration]].
|-
|&lt;code&gt;{{Ada/kw|type}} T {{Ada/kw|is}} {{Ada/kw|range}} &lt;&gt;;&lt;/code&gt; || Any signed integer type
|-
|&lt;code&gt;{{Ada/kw|type}} T {{Ada/kw|is}} {{Ada/kw|mod}} &lt;&gt;;&lt;/code&gt; || Any modular type
|-
|&lt;code&gt;{{Ada/kw|type}} T {{Ada/kw|is}} {{Ada/kw|delta}} &lt;&gt;;&lt;/code&gt; || Any (non-decimal) [[Ada Programming/Types/delta|fixed point type]]
|-
|&lt;code&gt;{{Ada/kw|type}} T {{Ada/kw|is}} {{Ada/kw|delta}} &lt;&gt; {{Ada/kw|digits}} &lt;&gt;;&lt;/code&gt; || Any decimal fixed point type
|-
|&lt;code&gt;{{Ada/kw|type}} T {{Ada/kw|is}} {{Ada/kw|digits}} &lt;&gt;;&lt;/code&gt; || Any [[Ada Programming/Types/digits|floating point type]]
|-
|&lt;code&gt;{{Ada/kw|type}} T {{Ada/kw|is}} {{Ada/kw|array}} (I) {{Ada/kw|of}} E;  || Any [[Ada Programming/Types/array|array type]] with index of type &lt;code&gt;I&lt;/code&gt; and elements of type &lt;code&gt;E&lt;/code&gt; (&lt;code&gt;I&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt; could be formal parameters as well)
|-
|&lt;code&gt;{{Ada/kw|type}} T {{Ada/kw|is}} {{Ada/kw|access}} O;&lt;/code&gt; || Any [[Ada Programming/Types/access|access type]] pointing to objects of type &lt;code&gt;O&lt;/code&gt; (&lt;code&gt;O&lt;/code&gt; could be a formal parameter as well)
|}

In the body we can only use the operations predefined for the type category of the formal parameter. That is, the generic specification is a contract  between the generic implementor and the client instantiating the generic unit. This is different to the parametric features of other languages, such as C++.

It is possible to further restrict the set of acceptable actual types like so:

{| class="wikitable"
! Generic formal type !! Acceptable actual types
|-
|&lt;code&gt;{{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}}&lt;/code&gt;... || Definite or indefinite types (loosely speaking: types with or without discriminants, but other forms of indefiniteness exist)
|-
|&lt;code&gt;{{Ada/kw|type}} T (D : DT) {{Ada/kw|is}}&lt;/code&gt;... || Types with a discriminant of type DT (it is possible to specify several discriminants, too)
|-
|&lt;code&gt;{{Ada/kw|type}} T {{Ada/kw|is}}&lt;/code&gt;... || Definite types (loosely speaking types without a discriminant or with a discriminant with default value)
|}

=== Generic formal subprograms ===

It is possible to pass a subprogram as a parameter to a generic.  The generic
specifies a generic formal subprogram, complete with parameter list and return
type (if the subprogram is a function). The actual must match this parameter
profile.  It is not necessary that the ''names'' of parameters match, though.

Here is the specification of a generic subprogram that takes another subprogram
as its parameter:

 {{Ada/kw|generic}}
   {{Ada/kw|type}} Element_T {{Ada/kw|is}} {{Ada/kw|private}};
   {{Ada/kw|with}} {{Ada/kw|function}} "*" (X, Y: Element_T) {{Ada/kw|return}} Element_T;
 {{Ada/kw|function}} Square (X : Element_T) {{Ada/kw|return}} Element_T;

And here is the body of the generic subprogram; it calls parameter as it would
any other subprogram.

 {{Ada/kw|function}} Square (X: Element_T) {{Ada/kw|return}} Element_T {{Ada/kw|is}}
 {{Ada/kw|begin}}
   {{Ada/kw|return}} X * X;   {{Ada/--|The formal operator "*".}}
 {{Ada/kw|end}} Square;

This generic function could be used, for example, with matrices, having defined the matrix product.

 {{Ada/kw|with}} Square;
 {{Ada/kw|with}} Matrices;
 {{Ada/kw|procedure}} Matrix_Example {{Ada/kw|is}}
   {{Ada/kw|function}} Square_Matrix {{Ada/kw|is}} {{Ada/kw|new}} Square
     (Element_T =&gt; Matrices.Matrix_T, "*" =&gt; Matrices.Product);
   A : Matrices.Matrix_T := Matrices.Identity;
 {{Ada/kw|begin}}
   A := Square_Matrix (A);
 {{Ada/kw|end}} Matrix_Example;

It is possible to specify a default with "the box" (&lt;code&gt;{{Ada/kw|is}} {{Ada/delimiter|&lt;&gt;}}&lt;/code&gt;), like this:

 {{Ada/kw|generic}}
   {{Ada/kw|type}} Element_T {{Ada/kw|is}} {{Ada/kw|private}};
   {{Ada/kw|with}} {{Ada/kw|function}} "*" (X, Y: Element_T) {{Ada/kw|return}} Element_T {{Ada/kw|is}} &lt;&gt;;

This means that if, at the point of instantiation, a function "*" exists for the
actual type, and if it is directly visible, then it will be used by default as the
actual subprogram.

One of the main uses is passing needed operators. The following example shows this &lt;small&gt;(follow download links for full example)&lt;/small&gt;:

   {{Ada/Sourceforge|Algorithms/binary_search.adb}}

   {{Ada/kw|generic}}
      {{Ada/kw|type}} Element_Type {{Ada/kw|is}} {{Ada/kw|private}};
      ''...''
      {{Ada/kw|with}} {{Ada/kw|function}} "&lt;"
        (Left  : {{Ada/kw|in}} Element_Type;
         Right : {{Ada/kw|in}} Element_Type)
         {{Ada/kw|return}}  Boolean
      {{Ada/kw|is}} {{Ada/delimiter|&lt;&gt;}};
   {{Ada/kw|procedure}} Search
     (Elements : {{Ada/kw|in}} Array_Type;
      Search   : {{Ada/kw|in}} Element_Type;
      Found    : {{Ada/kw|out}} Boolean;
      Index    : {{Ada/kw|out}} Index_Type'{{Ada/attribute|Base}})
      ''...''

=== Generic instances of other generic packages ===

A generic formal can be a package; it must be an instance of a generic package, so that the generic knows the interface exported by the package:

 {{Ada/kw|generic}}
    {{Ada/kw|with}} {{Ada/kw|package}} P {{Ada/kw|is}} {{Ada/kw|new}} Q ({{Ada/delimiter|&lt;&gt;}});

This means that the actual must be an instance of the generic package Q.  The box after Q means that we do not care which actual generic parameters were used to create the actual for P.  It is possible to specify the exact parameters, or to specify that the defaults must be used, like this:

 {{Ada/kw|generic}}
    {{Ada/comment|P1 must be an instance of Q with the specified actual parameters:}}
    {{Ada/kw|with}} {{Ada/kw|package}} P1 {{Ada/kw|is}} {{Ada/kw|new}} Q (Param1 =&gt; X, Param2 =&gt; Y);
 
    {{Ada/comment|P2 must be an instance of Q where the actuals are the defaults:}}
    {{Ada/kw|with}} {{Ada/kw|package}} P2 {{Ada/kw|is}} {{Ada/kw|new}} Q;
 
You can specify one default parameters, none or only some. Defaults are indicated with a box (" =&gt; &lt;&gt; "), and you can use " others =&gt; &lt;&gt;") to mean "use defaults for all parameters not mentioned". The actual package must, of course, match these constraints.

The generic sees both the public part and the generic parameters of the actual package (Param1 and Param2 in the above example).

This feature allows the programmer to pass arbitrarily complex types as parameters
to a generic unit, while retaining complete type safety and encapsulation. ''(example needed)''

It is not possible for a package to list itself as a generic formal, so no generic recursion is possible.  The following is illegal:

 {{Ada/kw|with}} A;
 {{Ada/kw|generic}}
    {{Ada/kw|with}} {{Ada/kw|package}} P {{Ada/kw|is}} {{Ada/kw|new}} A ({{Ada/delimiter|&lt;&gt;}});
 {{Ada/kw|package}} A; {{Ada/comment|illegal: A references itself}}

In fact, this is only a particular case of:

 {{Ada/kw|with}} A; {{Ada/comment|illegal: A does not exist yet at this point!}}
 {{Ada/kw|package}} A;

which is also illegal, despite the fact that A is no longer generic.

== Instantiating generics ==

To instantiate a generic unit, use the keyword '''new''':

 {{Ada/kw|function}} Square_Matrix {{Ada/kw|is}} {{Ada/kw|new}} Square
    (Element_T =&gt; Matrices.Matrix_T, "*" =&gt; Matrices.Product);

Notes of special interest to C++ programmers:

* The generic formal types define ''completely'' which types are acceptable as actuals; therefore, the compiler can instantiate generics without looking at the body of the generic.
* Each instance has a name and is different from all other instances.  In particular, if a generic package declares a type, and you create two instances of the package, then you will get two different, incompatible types, even if the actual parameters are the same.
* Ada requires that all instantiations be explicit.
* It is not possible to create special-case instances of a generic (known as "template specialisation" in C++).

As a consequence of the above, Ada does not permit template metaprogramming.  However,
this design has significant advantages:

* the object code can be shared by all instances of a generic, unless of course the programmer has requested that subprograms be inlined; there is no danger of code bloat.
* when reading programs written by other people, there are no hidden instantiations, and no special cases to worry about.  Ada follows the Law of Least Astonishment.

== Advanced generics ==

=== Generics and nesting ===

A generic unit can be nested inside another unit, which itself may be generic.  Even though no special rules apply (just the normal rules about generics and the rules about nested units), novices may be confused.  It is important to understand the difference between a generic unit and ''instances'' of a generic unit.

'''Example 1'''. A generic subprogram nested in a nongeneric package.

 {{Ada/kw|package}} Bag_Of_Strings {{Ada/kw|is}}
    {{Ada/kw|type}} Bag {{Ada/kw|is}} {{Ada/kw|private}};
    {{Ada/kw|generic}}
       {{Ada/kw|with}} {{Ada/kw|procedure}} Operator (S : {{Ada/kw|in}} {{Ada/kw|out}} String);
    {{Ada/kw|procedure}} Apply_To_All (B : {{Ada/kw|in}} {{Ada/kw|out}} Bag);
 {{Ada/kw|private}}
    {{Ada/comment|omitted}}
 {{Ada/kw|end}} Bag_Of_Strings;

To use '''Apply_To_All''', you first define the procedure to be applied to each String in the Bag.  Then, you instantiate '''Apply_To_All''', and finally you call the instance.

 {{Ada/kw|with}} Bag_Of_Strings;
 {{Ada/kw|procedure}} Example_1 {{Ada/kw|is}}
    {{Ada/kw|procedure}} Capitalize (S : {{Ada/kw|in}} {{Ada/kw|out}} String) {{Ada/kw|is}} {{Ada/kw|separate}}; {{Ada/comment|omitted}}
    {{Ada/kw|procedure}} Capitalize_All {{Ada/kw|is}}
       {{Ada/kw|new}} Bag_Of_Strings.Apply_To_All (Operator =&gt; Capitalize);
    B : Bag_Of_Strings.Bag;
 {{Ada/kw|begin}}
    Capitalize_All (B);
 {{Ada/kw|end}} Example_1;

'''Example 2.''' A generic subprogram nested in a generic package

This is the same as above, except that now the Bag itself is generic:

 {{Ada/kw|generic}}
    {{Ada/kw|type}} Element_Type (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|private}};
 {{Ada/kw|package}} Generic_Bag {{Ada/kw|is}}
    {{Ada/kw|type}} Bag {{Ada/kw|is}} {{Ada/kw|private}};
    {{Ada/kw|generic}}
       {{Ada/kw|with}} {{Ada/kw|procedure}} Operator (S : {{Ada/kw|in}} {{Ada/kw|out}} Element_Type);
    {{Ada/kw|procedure}} Apply_To_All (B : {{Ada/kw|in}} {{Ada/kw|out}} Bag);
 {{Ada/kw|private}}
    {{Ada/comment|omitted}}
 {{Ada/kw|end}} Generic_Bag;

As you can see, the generic formal subprogram '''Operator''' takes a parameter of the generic formal type '''Element_Type'''.  This is okay: the nested generic sees everything that is in its enclosing unit.

You cannot instantiate '''Generic_Bag.Apply_To_All''' directly, so you must first create an instance of '''Generic_Bag''', say '''Bag_Of_Strings''', and then instantiate '''Bag_Of_Strings.Apply_To_All'''.

 {{Ada/kw|with}} Generic_Bag;
 {{Ada/kw|procedure}} Example_2 {{Ada/kw|is}}
    {{Ada/kw|procedure}} Capitalize (S : {{Ada/kw|in}} {{Ada/kw|out}} String) {{Ada/kw|is}} {{Ada/kw|separate}}; {{Ada/comment|omitted}}
    {{Ada/kw|package}} Bag_Of_Strings {{Ada/kw|is}}
       {{Ada/kw|new}} Generic_Bag (Element_Type =&gt; String);
    {{Ada/kw|procedure}} Capitalize_All {{Ada/kw|is}}
       {{Ada/kw|new}} Bag_Of_Strings.Apply_To_All (Operator =&gt; Capitalize);
    B : Bag_Of_Strings.Bag;
 {{Ada/kw|begin}}
    Capitalize_All (B);
 {{Ada/kw|end}} Example_2;

=== Generics and child units ===

'''Example 3'''. A generic unit that is a child of a nongeneric unit.

Each instance of the generic child is a child of the parent unit, and so it can see the parent's public and private parts.

 {{Ada/kw|package}} Bag_Of_Strings {{Ada/kw|is}}
    {{Ada/kw|type}} Bag {{Ada/kw|is}} {{Ada/kw|private}};
 {{Ada/kw|private}}
    {{Ada/comment|omitted}}
 {{Ada/kw|end}} Bag_Of_Strings; 
 
 {{Ada/kw|generic}}
    {{Ada/kw|with}} {{Ada/kw|procedure}} Operator (S : {{Ada/kw|in}} {{Ada/kw|out}} String);
 {{Ada/kw|procedure}} Bag_Of_Strings.Apply_To_All (B : {{Ada/kw|in}} {{Ada/kw|out}} Bag);

The differences between this and Example 1 are:
* '''Bag_Of_Strings.Apply_To_All''' is compiled separately.  In particular, '''Bag_Of_Strings.Apply_To_All''' might have been written by a different person who did not have access to the source text of '''Bag_Of_Strings'''.
* Before you can use '''Bag_Of_Strings.Apply_To_All''', you must '''with''' it explicitly; '''with'''ing the parent, '''Bag_Of_Strings''', is not sufficient.
* If you do not use '''Bag_Of_Strings.Apply_To_All''', your program does not contain its object code.
* Because '''Bag_Of_Strings.Apply_To_All''' is at the library level, it can declare controlled types; the nested package could not do that in Ada 95. In Ada 2005, one can declare controlled types at any level.

 {{Ada/kw|with}} Bag_Of_Strings.Apply_To_All; {{Ada/comment|implicitly withs Bag_Of_Strings, too}}
 {{Ada/kw|procedure}} Example_3 {{Ada/kw|is}}
    {{Ada/kw|procedure}} Capitalize (S : {{Ada/kw|in}} {{Ada/kw|out}} String) {{Ada/kw|is}} {{Ada/kw|separate}}; {{Ada/comment|omitted}}
    {{Ada/kw|procedure}} Capitalize_All {{Ada/kw|is}}
       {{Ada/kw|new}} Bag_Of_Strings.Apply_To_All (Operator =&gt; Capitalize);
    B : Bag_Of_Strings.Bag;
 {{Ada/kw|begin}}
    Capitalize_All (B);
 {{Ada/kw|end}} Example_3;

'''Example 4'''. A generic unit that is a child of a generic unit

This is the same as Example 3, except that now the Bag is generic, too.

 {{Ada/kw|generic}}
    {{Ada/kw|type}} Element_Type (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|private}};
 {{Ada/kw|package}} Generic_Bag {{Ada/kw|is}}
    {{Ada/kw|type}} Bag {{Ada/kw|is}} {{Ada/kw|private}};
 {{Ada/kw|private}}
    {{Ada/comment|omitted}}
 {{Ada/kw|end}} Generic_Bag;
 
 {{Ada/kw|generic}}
    {{Ada/kw|with}} {{Ada/kw|procedure}} Operator (S : {{Ada/kw|in}} {{Ada/kw|out}} Element_Type);
 {{Ada/kw|procedure}} Generic_Bag.Apply_To_All (B : {{Ada/kw|in}} {{Ada/kw|out}} Bag);
 
 {{Ada/kw|with}} Generic_Bag.Apply_To_All;
 {{Ada/kw|procedure}} Example_4 {{Ada/kw|is}}
    {{Ada/kw|procedure}} Capitalize (S : {{Ada/kw|in}} {{Ada/kw|out}} String) {{Ada/kw|is}} {{Ada/kw|separate}}; {{Ada/comment|omitted}}
    {{Ada/kw|package}} Bag_Of_Strings {{Ada/kw|is}}
       {{Ada/kw|new}} Generic_Bag (Element_Type =&gt; String);
    {{Ada/kw|procedure}} Capitalize_All {{Ada/kw|is}}
       {{Ada/kw|new}} Bag_Of_Strings.Apply_To_All (Operator =&gt; Capitalize);
    B : Bag_Of_Strings.Bag;
 {{Ada/kw|begin}}
    Capitalize_All (B);
 {{Ada/kw|end}} Example_4;

'''Example 5'''. A parameterless generic child unit

Children of a generic unit '''must''' be generic, no matter what.  If you think about it, it is quite logical: a child unit sees the public and private parts of its parent, including the variables declared in the parent.  If the parent is generic, which instance should the child see?  The answer is that the child must be the child of only one instance of the parent, therefore the child must also be generic.

 {{Ada/kw|generic}}
    {{Ada/kw|type}} Element_Type (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|private}};
    {{Ada/kw|type}} Hash_Type {{Ada/kw|is}} (&lt;&gt;);
    {{Ada/kw|with}} {{Ada/kw|function}} Hash_Function (E : Element_Type) {{Ada/kw|return}} Hash_Type;
 {{Ada/kw|package}} Generic_Hash_Map {{Ada/kw|is}}
    {{Ada/kw|type}} Map {{Ada/kw|is}} {{Ada/kw|private}};
 {{Ada/kw|private}}
    {{Ada/comment|omitted}}
 {{Ada/kw|end}} Generic_Hash_Map;

Suppose we want a child of a '''Generic_Hash_Map''' that can serialise the map to disk; for this it needs to sort the map by hash value.  This is easy to do, because we know that '''Hash_Type''' is a discrete type, and so has a less-than operator.  The child unit that does the serialisation does not need any additional generic parameters, but it must be generic nevertheless, so it can see its parent's generic parameters, public and private part.

 {{Ada/kw|generic}}
 {{Ada/kw|package}} Generic_Hash_Map.Serializer {{Ada/kw|is}}
     {{Ada/kw|procedure}} Dump (Item : {{Ada/kw|in}} Map; To_File : {{Ada/kw|in}} String);
     {{Ada/kw|procedure}} Restore (Item : {{Ada/kw|out}} Map; From_File : {{Ada/kw|in}} String);
 {{Ada/kw|end}} Generic_Hash_Map.Serializer;
 
To read and write a map to disk, you first create an instance of '''Generic_Hash_Map''', for example '''Map_Of_Unbounded_Strings''', and then an instance of '''Map_Of_Unbounded_Strings.Serializer''':

 {{Ada/kw|with}} Ada.Strings.Unbounded;
 {{Ada/kw|with}} Generic_Hash_Map.Serializer;
 {{Ada/kw|procedure}} Example_5 {{Ada/kw|is}}
    {{Ada/kw|use}} Ada.Strings.Unbounded;
    {{Ada/kw|function}} Hash (S : {{Ada/kw|in}} Unbounded_String) {{Ada/kw|return}} Integer {{Ada/kw|is}} {{Ada/kw|separate}}; {{Ada/comment|omitted}}
    {{Ada/kw|package}} Map_Of_Unbounded_Strings {{Ada/kw|is}}
       {{Ada/kw|new}} Generic_Hash_Map (Element_Type =&gt; Unbounded_String,
                             Hash_Type =&gt; Integer,
                             Hash_Function =&gt; Hash);
    {{Ada/kw|package}} Serializer {{Ada/kw|is}}
       {{Ada/kw|new}} Map_Of_Unbounded_Strings.Serializer;
    M : Map_Of_Unbounded_Strings.Map;
 {{Ada/kw|begin}}
    Serializer.Restore (Item =&gt; M, From_File =&gt; "map.dat");
 {{Ada/kw|end}} Example_5;

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Object Orientation]]: tagged types provides other mean of polymorphism in Ada.

=== Wikipedia ===

* [[w:Generic programming|Generic programming]]

=== Ada Reference Manual ===

* {{Ada/RM|12|title=Generic Units}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Generics]]

[[es:Programación en Ada/Unidades genéricas]]
&lt;/noinclude&gt;</text>
      <sha1>oumxlfl9erdg67raiezavage326bhpi</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Input Output</title>
    <ns>0</ns>
    <id>22307</id>
    <revision>
      <id>3445077</id>
      <parentid>3445075</parentid>
      <timestamp>2018-07-21T14:29:16Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <minor/>
      <comment>[[WB:REVERT|Reverted]] edits by [[Special:Contributions/ManuelGR|ManuelGR]] ([[User talk:ManuelGR|talk]]) to last version by PokestarFan</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9652" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Input Output}}
__TOC__&lt;/noinclude&gt;

== Overview ==

The standard Ada libraries provide several Input/Output facilities, each one adapted to specific needs. Namely, the language defines the following dedicated packages:
* Text_IO
* Sequential_IO
* Direct_IO
* Stream_IO

The programmer must choose the adequate package depending on the application needs. For example, the following properties of the data handled by the application should be considered:
* '''Data contents''': plain text, or binary data?
* '''Accessing the data''': random access, or sequential access?
* '''Medium''': data file, console, network/data-bus?
* '''Data structure''': homogeneous file (sequence of the same data field), heterogeneous file (different data fields)?
* '''Data format''': adherence to an existing data format, or the application can freely choose a new one?

For example, Stream_IO is very powerful and can handle complex data structures but can be heavier than other packages; Sequential_IO is lean and easy to use but cannot be used by applications requiring random data access; Text_IO can handle just textual data, but it is enough for handling the command-line console.


The following table gives some advices for choosing the more adequate one:

{| class="wikitable"
|+ '''Simple heuristics for choosing an I/O package'''
! rowspan="2" | Data access
! rowspan="2" | Plain text
! colspan="2" | Binary data
|-
! Homogeneous || Heterogeneous
|-
! Sequential
| Text_IO || Sequential_IO || Stream_IO
|-
! Random
| Stream_IO || Direct_IO || Stream_IO
|}

So the most important lesson to learn is choosing the right one. This chapter will describe more in detail these standard packages, explaining how to use them effectively. Besides these Ada-defined packages for general I/O operations each Ada compiler usually has other implementation-defined Input-Output facilities, and there are also other [[Ada Programming#Other Language Libraries|external libraries for specialized I/O needs]] like XML processing or interfacing with databases.

== Text I/O ==

[[Ada Programming/Libraries/Ada.Text IO|Text I/O]] is probably the most used Input/Output package. All data inside the file are represented by human readable text. Text I/O provides support for line and page layout but the standard is free form text.

 {{Ada/keyword|with}} {{Ada/package|Ada|Text_IO}}{{Ada/delimiter|1=;}}
  
 {{Ada/keyword|procedure}} Main {{Ada/keyword|is}}
   Str  {{Ada/delimiter|1=:}} String {{Ada/delimiter|1=(}}1 {{Ada/delimiter|1=..}} 80{{Ada/delimiter|1=)}}{{Ada/delimiter|1=;}}
   Last {{Ada/delimiter|1=:}} Natural{{Ada/delimiter|1=;}}
 {{Ada/keyword|begin}}
   Ada{{Ada/delimiter|1=.}}Text_IO{{Ada/delimiter|1=.}}Get_Line {{Ada/delimiter|1=(}}Str{{Ada/delimiter|1=,}} Last{{Ada/delimiter|1=)}}{{Ada/delimiter|1=;}}
   Ada{{Ada/delimiter|1=.}}Text_IO{{Ada/delimiter|1=.}}Put_Line {{Ada/delimiter|1=(}}Str {{Ada/delimiter|1=(}}1 {{Ada/delimiter|1=..}} Last{{Ada/delimiter|1=)}}{{Ada/delimiter|1=)}}{{Ada/delimiter|1=;}}
 {{Ada/keyword|end}}{{Ada/delimiter|1=;}}

This example copies text from standard input to standard output when all lines are shorter than 80 characters, the string length. See package [[Ada Programming/Libraries/Ada.Text IO|Text I/O]] how to deal with longer lines.

The package also contains several generic packages for converting numeric and enumeration types to character strings; there are child packages for handling Bounded and Unbounded strings, allowing the programmer to read and write different data types in the same file easily (there are ready-to-use instantiations of these generic packages for the Integer, Float, and Complex types). Finally, the same family of Ada.Text_IO packages (including the several children and instantiation packages) for the type Wide_Character and Wide_Wide_Character.

It is worth noting that the family of Text_IO packages provide some automatic text processing. For example, the Get procedures for numeric and enumeration types ignore white space at the beginning of a line (Get_Line for String does not present this behavior), or adding line and page terminators when closing the file. This is thus adequate for applications handling simple textual data, but users requiring direct management of text (e.g. raw access to the character encoding) must consider other packages like Sequential_IO.

== Direct I/O ==

Direct I/O is used for random  access files which contain only elements of one specific type. With Direct_IO you can position the file pointer to any element of that type &lt;small&gt;(random access)&lt;/small&gt;, however you can't freely choose the element type, the element type needs to be a [[ada Programming/Subtypes#definite subtype|definite subtype]].

== Sequential I/O ==

Direct I/O is used for random access files which contain only elements of one specific type. With Sequential_IO it is the other way round: you can choose between [[ada Programming/Subtypes#definite subtype|definite]] and [[ada Programming/Subtypes#Ada Programming/Subtypes#indefinite subtype|indefinite]] element types but you have to read and write the elements one after the other.

== Stream I/O ==

Stream I/O is the most powerful input/output package which Ada provides. Stream I/O allows you to mix objects from different element types in one sequential file. In order to read/write from/to a stream each type provides a [[Ada Programming/Attributes/'Read|'Read]] and [[Ada Programming/Attributes/'Write|'Write]] attribute as well as an [[Ada Programming/Attributes/'Input|'Input]] and [[Ada Programming/Attributes/'Output|'Output]] attribute. These attributes are automatically generated for each type you declare.

The [[Ada Programming/Attributes/'Read|'Read]] and [[Ada Programming/Attributes/'Write|'Write]] attributes treat the elements as raw data. They are suitable for low level input/output as well as interfacing with other programming languages.

The [[Ada Programming/Attributes/'Input|'Input]] and [[Ada Programming/Attributes/'Output|'Output]] attributes add additional control information to the file, like for example the [[Ada Programming/Attributes/'First|'First]] and [[Ada Programming/Attributes/'Last|'Last]] attributes for an array.

In object orientated programming you can also use the [[Ada Programming/Attributes/'Class|'Class]][[Ada Programming/Attributes/'Input|'Input]] and [[Ada Programming/Attributes/'Class|'Class]][[Ada Programming/Attributes/'Output|'Output]] attributes - they will store and recover the actual object type as well.

Stream I/O is also the most flexible input/output package. All I/O attributes can be replaced with user defined functions or procedures using representation clauses and you can provide your own Stream I/O types using flexible object oriented techniques.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries/Ada.Direct IO]]
* [[Ada Programming/Libraries/Ada.Sequential IO]]
* [[Ada Programming/Libraries/Ada.Streams]]
** [[Ada Programming/Libraries/Ada.Streams.Stream IO]]
** [[Ada Programming/Libraries/Ada.Text IO.Text Streams]]
* [[Ada Programming/Libraries/Ada.Text IO]]
** [[Ada Programming/Libraries/Ada.Text IO.Enumeration IO]] (nested package)
** [[Ada Programming/Libraries/Ada.Text IO.Integer IO]] (nested package)
** [[Ada Programming/Libraries/Ada.Text IO.Modular IO]] (nested package)
** [[Ada Programming/Libraries/Ada.Text IO.Float IO]] (nested package)
** [[Ada Programming/Libraries/Ada.Text IO.Fixed IO]] (nested package)
** [[Ada Programming/Libraries/Ada.Text IO.Decimal IO]] (nested package)
** [[Ada Programming/Libraries/Ada.Text IO.Bounded IO]]
** [[Ada Programming/Libraries/Ada.Text IO.Unbounded IO]]
** [[Ada Programming/Libraries/Ada.Text IO.Complex IO]] (specialized needs annex)
** [[Ada Programming/Libraries/Ada.Text IO.Editing]] (specialized needs annex)
* [[Ada Programming/Libraries/Ada.Integer Text IO]]
* [[Ada Programming/Libraries/Ada.Float Text IO]]
* [[Ada Programming/Libraries/Ada.Complex Text IO]] (specialized needs annex)
* [[Ada Programming/Libraries/Ada.Storage IO]] (not a general-purpose I/O package)
* [[Ada Programming/Libraries/Ada.IO Exceptions]]
* [[Ada Programming/Libraries/Ada.Command Line]]
* [[Ada Programming/Libraries/Ada.Directories]]
* [[Ada Programming/Libraries/Ada.Environment Variables]]
* [[Ada Programming/Libraries/GNAT.IO]] (implementation defined)
* [[Ada Programming/Libraries/GNAT.IO Aux]] (implementation defined)
* [[Ada Programming/Libraries/GNAT.Calendar.Time IO]] (implementation defined)
* [[Ada Programming/Libraries/System.IO]] (implementation defined)
* [[Ada Programming/Libraries]]
** [[Ada Programming/Libraries/GUI]]
** [[Ada Programming/Libraries/Web]]
** [[Ada Programming/Libraries/Database]]
* [[Ada Programming/Platform]]
* [[Ada Programming/Platform/Linux]]
* [[Ada Programming/Platform/Windows]]

=== Ada Reference Manual ===

* {{Ada/RM2|A|6|Input-Output}}
* {{Ada/RM2|A|7|External Files and File Objects}}
* {{Ada/RM2|A|8|Sequential and Direct Files}}
* {{Ada/RM2|A|10|Text Input-Output}}
* {{Ada/RM2|A|11|Wide Text Input-Output and Wide Wide Text Input-Output}}
* {{Ada/RM2|A|12|Stream Input-Output}}
* {{Ada/RM2|A|13|Exceptions in Input-Output}}
* {{Ada/RM2|A|14|File Sharing}}

=== Ada 95 Quality and Style Guide ===

* {{Ada/SG2|7|7|Input/Output}}
** {{Ada/SG3|7|7|1|Name and Form Parameters}}
** {{Ada/SG3|7|7|2|File Closing}}
** {{Ada/SG3|7|7|3|Input/Output on Access Types}}
** {{Ada/SG3|7|7|4|Package Ada.Streams.Stream_IO}}
** {{Ada/SG3|7|7|5|Current Error Files}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|InputOutput]]
[[es:Programación en Ada/Entrada-salida]]
&lt;/noinclude&gt;</text>
      <sha1>91ldoilq40b0h85ljuymbqg63x6zqpo</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Installing</title>
    <ns>0</ns>
    <id>16583</id>
    <revision>
      <id>3520805</id>
      <parentid>3520804</parentid>
      <timestamp>2019-03-02T09:56:00Z</timestamp>
      <contributor>
        <username>OCTAGRAM</username>
        <id>975254</id>
      </contributor>
      <comment>/* ObjectAda from PTC (formerly Aonix/Atego) */ Ada 2012 support</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="43706" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Installing}}
__TOC__&lt;/noinclude&gt;

Ada [[Wikipedia:Compiler|compilers]] are available from several vendors, on a variety of host and target platforms. The [http://www.adaic.com Ada Resource Association] maintains a [http://www.adaic.com/compilers/comp-tool.html list of available compilers].

Below is an alphabetical list of available compilers with additional comments.

== AdaMagic from SofCheck ==

SofCheck used to produce an Ada&amp;nbsp;95 front-end that can be plugged into a code generating back-end to produce a full compiler.  This front-end is offered for licensing to compiler vendors.

Based on this front-end, SofCheck used to offer:

* AdaMagic, an Ada-to-C/C++ translator
* AppletMagic, an [[Ada_Programming/Platform/VM/Java|Ada-to-Java]] bytecode compiler

SofCheck has [http://www.adacore.com/press/adacore-sofcheck-merge merged] with AdaCore under the AdaCore name, leaving no visible trace of AdaMagic offering on AdaCore website.

However, MapuSoft is now licensed to resell AdaMagic. They renamed it to "[https://www.mapusoft.com/ada-to-c-changer/ Ada-to-C/C++ changer]". New name sounds like fake. Almost no Ada developer heard of MapuSoft. MapuSoft is never seen making Ada libraries, commercial or FLOSS. They are never seen at Ada conferences. Yet this is a real stuff, a validated Ada compiler that knows lots of tricks required to work on top of C/C++ compilers. E.g. it contains a proven knowledge of handling integer overflow with a special "-1" case.

Thanks to MapuSoft, AdaMagic really became available to developers. [https://connect.mapusoft.com/demo_evalform.html Get AppCOE], but not Win64 one, install it. In the MapuSoft/AppCOE_x32/Tools/Ada there will be AdaMagic. AdaMagic is known to support Win64, but AppCOE for Win64 is known to contain no AdaMagic at all.

Using AdaMagic from command line is badly supported in AppCOE, but possible. Set up ADA_MAGIC environment variable, edit Tools/Ada/{linux|windows}/SITE/rts_path to point to real path, edit SITE/config to get rid of unsupported C compiler keys, and compile via e.g.

&lt;source lang="bash"&gt;
adareg -key=`test_key | sed -e '/md5/!d;s/md5 = //'` Hello_World.adb
adabgen -key=`test_key | sed -e '/md5/!d;s/md5 = //'` Hello_World
&lt;/source&gt;

Commercial; proprietary.

== AdaMULTI from Green Hills Software ==

Green Hills Software sells development environments for multiple languages and multiple targets (including [[w:Digital signal processor|DSP]]s), primarily to embedded software developers.

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, C, C++, Fortran
|-
! License for the run-time library
| Proprietary, royalty free.
|-
! Native platforms
| GNU/Linux on i386, Microsoft Windows on i386, and Solaris on SPARC
|-
! Cross platforms
| INTEGRITY, INTEGRITY-178B and velOSity from Green Hills; VxWorks from Wind River; several bare board targets, including x86, PowerPC, ARM, MIPS and ColdFire/68k. Safety-critical GMART and GSTART run-time libraries certified to DO-178B level A.
|-
! Available from
| http://www.ghs.com/
|-
! Support
| Commercial
|-
! Add-ons included
| IDE, debugger, TimeMachine, integration with various version control systems, source browsers, other utilities
|}

GHS claims to make great efforts to ensure that their compilers produce the most efficient code and often cites the [http://www.eembc.com EEMBC] benchmark results as evidence, since many of the results published by chip manufacturers use GHS compilers to show their silicon in the best light, although these benchmarks are not Ada specific.

GHS has no publicly announced plans to support the two most recent Ada standards (2005 and 2012) but they do continue to actively market and develop their existing Ada products.

== DEC Ada from HP ==

DEC Ada was an Ada&amp;nbsp;83 compiler for [[w:OpenVMS|OpenVMS]]. While “DEC Ada” is probably the name most users know, the compiler has also been called “HP Ada”, "VAX Ada", and "Compaq Ada".

*[https://www.vmssoftware.com/pdfs/HP_branded_docs_1st_batch/ada_avms_ig.pdf Ada for OpenVMS Alpha Installation Guide] (PDF)
*[https://www.vmssoftware.com/pdfs/HP_branded_docs_1st_batch/ada_vvms_ig.pdf Ada for OpenVMS VAX Installation Guide] (PDF)

== GNAT, the GNU Ada Compiler from AdaCore and the Free Software Foundation ==

[[Wikipedia:GNAT|GNAT]] is the free GNU Ada compiler, which is part of the [[Wikipedia:GNU Compiler Collection|GNU Compiler Collection]]. It is the only Ada compiler that supports all of the optional annexes of the language standard.  The original authors formed the company [http://www.adacore.com AdaCore] to offer professional support, consulting, training and custom development services.  It is thus possible to obtain GNAT from many different sources, detailed below.

GNAT is always licensed under the terms of the [[Wikipedia:GNU General Public License|GNU General Public License]].

However, the run-time library uses either the [[Wikipedia:GNU General Public License|GPL]], or the [[Wikipedia:GNAT Modified General Public License|GNAT Modified GPL]], depending on where you obtain it.

Several optional add-ons are available from various places:

* ASIS, the [[w:Ada Semantic Interface Specification|Ada Semantic Interface Specification]], is a library that allows Ada programs to examine and manipulate other Ada programs.
* [[Ada Programming/Platform/POSIX|FLORIST]] is a library that provides a POSIX programming interface to the operating system.
* GDB, the GNU Debugger, with Ada extensions.
* GLADE implements Annex E, the Distributed Systems Annex.  With it, one can write distributed programs in Ada, where partitions of the program running on different computers communicate over the network with one another and with shared objects.
* GPS, the GNAT Programming Studio, is a full-featured integrated development environment, written in Ada.  It allows you to code in Ada, C and C++.

Many Free Software libraries are also available.

=== GNAT GPL Edition ===

This is a source and binary release from AdaCore, intended for use by Free
Software developers only.  If you want to distribute your binary programs
linked with the GPL run-time library,
then you must do so under terms compatible with the GNU General Public License.

As of GNAT GPL Edition 2013:

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, Ada&amp;nbsp;2005, Ada&amp;nbsp;2012, C, C++
|-
! License for the run-time library
| pure GPL
|-
! Native platforms
| GNU/Linux on x86_64; Microsoft Windows on i386; ; Mac OS X (Darwin, x86_64). Earlier releases have supported Solaris on SPARC, GNU/Linux on i386, Microsoft .NET on i386
|-
! Cross platforms
| AVR, hosted on Windows; Java VM, hosted on Windows; Mindstorms NXT, hosted on Windows; ARM, hosted on Windows and Linux;
|-
! Compiler back-end
| GCC 4.9
|-
! Available from
| https://www.adacore.com/download
|-
! Support
| None
|-
! Add-ons included
| GDB, GPS in source and binary form; many more in source-only form.
|}

=== GNAT Modified GPL releases ===

With these releases of GNAT, you can distribute your programs in binary form under licensing terms of your own choosing; you are not bound by the GPL.

==== GNAT 3.15p ====

This is the last public release of GNAT from AdaCore that uses the [[Wikipedia:GNAT Modified General Public License|GNAT Modified General Public License]].

GNAT 3.15p has passed the [[Wikipedia:ISO 18009|Ada Conformity Assessment Test Suite]] ([[Wiktionary:ACATS|ACATS]]).  It was released in October 2002.

The binary distribution from  AdaCore also contains an Ada-aware version of the GNU Debugger ([[Wikipedia:GDB|GDB]]), and a graphical front-end to GDB called the GNU Visual Debugger (GVD).

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, C
|-
! License for the run-time library
| GNAT-modified GPL
|-
! Native platforms
| GNU/Linux on i386 (with glibc 2.1 or later), Microsoft Windows on i386, OS/2 2.0 or later on i386, Solaris 2.5 or later on SPARC
|-
! Cross platforms
| none
|-
! Compiler back-end
| GCC 2.8.1
|-
! Available from
| ftp://ftp.cs.kuleuven.ac.be/pub/Ada-Belgium/mirrors/gnu-ada/3.15p/
|-
! Support
| None
|-
! Add-ons included
| ASIS, Florist, GLADE, GDB, Gnatwin (on Windows only), GtkAda 1.2, GVD
|}

==== GNAT Pro ====

GNAT Pro is the professional version of GNAT, offered as a subscription package by AdaCore.  The package also includes professional consulting, training and maintenance services.  AdaCore can provide custom versions of the compiler for native or cross development.  For more information, see http://www.adacore.com/.

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, Ada 2005, Ada 2012, C, and optionally C++
|-
! License for the run-time library
| GNAT-modified GPL
|-
! Native platforms
| many, see http://www.adacore.com/home/products/gnatpro/supported_platforms/
|-
! Cross platforms
| many, see http://www.adacore.com/home/products/gnatpro/supported_platforms/; even more on request
|-
! Compiler back-end
| GCC 4.3
|-
! Available from
| http://www.adacore.com/ by subscription (commercial)
|-
! Support
| Commercial; customer-only bug database
|-
! Add-ons included
| ASIS, Florist, GDB, GLADE, GPS, GtkAda, XML/Ada, and many more in source and, on request, binary form.
|}

==== GCC ====

GNAT has been part of the [http://www.fsf.org/ Free Software Foundation]'s [http://gcc.gnu.org/ GCC] since October 2001. The Free Software Foundation does not distribute binaries, only sources. Its licensing of the run-time library for Ada (and other languages) allows the development of proprietary software without necessarily imposing the terms of the [[Wikipedia:GNU General Public License|GPL]].

Most GNU/Linux distributions and several distributions for other platforms include prebuilt binaries; see below.

For technical reasons, we recommend against using the Ada compilers included in GCC 3.1, 3.2, 3.3 and 4.0. Instead, we recommend using GCC 3.4, 4.1 or later, or one of the releases from [http://www.adacore.com AdaCore] (3.15p, GPL Edition or Pro).

Since October 2003, AdaCore merge most of their changes from GNAT Pro into GCC during [http://gcc.gnu.org/develop.html#stage1 Stage 1]; this happens once for each major release.  Since GCC 3.4, AdaCore has gradually added support for revised language standards, first Ada 2005 and now Ada 2012.

GCC version 4.4 switched to [http://www.gnu.org/licenses/gpl.html version 3 of the GNU General Public License] and grants a [http://www.gnu.org/licenses/gcc-exception.html Runtime Library Exception] similar in spirit to the [[Wikipedia:GNAT Modified General Public License|GNAT Modified General Public License]] used in all previous versions.  This Runtime Library Exception applies to run-time libraries for all languages, not just Ada.

As of GCC 4.7, released on 2012-03-22:

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, Ada&amp;nbsp;2005, parts of Ada&amp;nbsp;2012, C, C++, Fortran 95, Java, Objective-C, Objective-C++ (and others)
|-
! License for the run-time library
| [http://www.gnu.org/licenses/gpl.html GPL version 3] with [http://www.gnu.org/licenses/gcc-exception.html Runtime Library Exception]
|-
! Native platforms
| none (source only)
|-
! Cross platforms
| none (source only)
|-
! Compiler back-end
| GCC 4.7
|-
! Available from
| http://gcc.gnu.org/ in source only form.
|-
! Support
| Volunteer; public bug database
|-
! Add-ons included
| none
|}

=== The GNU Ada Project ===

The [http://gnuada.sourceforge.net GNU Ada Project] provides source and binary packages of various GNAT versions for several operating systems, and, importantly, the scripts used to create the packages. This may be helpful if you plan to port the compiler to another platform or create a cross-compiler; there are instructions for building your own GNAT compiler for [http://ada.krischik.com/index.php/Articles/CompileGNAT GNU/Linux] and [http://forward-in-code.blogspot.com/2011/11/building-gcc-again.html Mac OS X] users.

Both [[w:GNU General Public License|GPL]] and
[[w:GNAT Modified General Public License|GMGPL]] or [http://www.gnu.org/licenses/gcc-exception.html GCC Runtime Library Exception] versions of GNAT are available.

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, Ada 2005, C. &lt;small&gt;(Some distributions also support Ada 2012, Fortran 90, Java, Objective C and Objective C++)&lt;/small&gt;
|-
! License for the run-time library
| pure, GNAT-modified GPL, or GCC Runtime Library Exception
|-
! Native platforms
| Fedora Core 4 and 5, MS-DOS, OS/2, Solaris 10, SuSE 10, Mac OS X, &lt;small&gt;(more?)&lt;/small&gt;
|-
! Cross platforms
| none
|-
! Compiler back-end
| GCC 2.8.1, 3.4, 4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6 &lt;small&gt;(various binary packages)&lt;/small&gt;
|-
! Available from
| [http://sourceforge.net/projects/gnuada/files/ Sourceforge]
|-
! Support
| Volunteer; public bug database
|-
! Add-ons included
| AdaBrowse, ASIS, Booch Components, Charles, GPS, GtkAda &lt;small&gt;(more?)&lt;/small&gt;
|}

=== A# (A-Sharp, a.k.a. Ada for .NET) ===

This compiler is historical as it has now been merged into [[#GNAT GPL Edition|GNAT GPL Edition]] and [[#GNAT Pro|GNAT Pro]].

A# is a port of Ada to the [http://www.microsoft.com/net/|Microsoft .NET Platform].  A# was originally developed at the Department of Computer Science at the United States Air Force Academy which distribute A# as a service to the Ada community under the terms of the GNU general public license. A# integrates well with Microsoft Visual Studio 2005, AdaGIDE and the RAPID open-source GUI Design tool. As of 2006-06-06:

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, C
|-
! License for the run-time library
| pure GPL
|-
! Native platforms
| Microsoft .NET
|-
! Cross platforms
| none
|-
! Compiler back-end
| GCC 3.4 (GNAT GPL 2006 Edition?)
|-
! Available from
| http://sourceforge.net/projects/asharp/
|-
! Support
| None (but see GNAT Pro)
|-
! Add-ons included
| none.
|}

=== GNAT for AVR microcontrollers ===

Rolf Ebert and others provide a version of GNAT configured as a cross-compiler to various [[Wikipedia:Atmel AVR|AVR microcontrollers]], as well as an experimental Ada run-time library suitable for use on the microcontrollers. As of Version 1.1.0 (2010-02-25):

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, Ada&amp;nbsp;2005, C
|-
! License for the run-time library
| GNAT-Modified GPL
|-
! Host platforms
| GNU/Linux and Microsoft Windows on i386
|-
! Target platforms
| Various AVR 8-bit microcontrollers
|-
! Compiler back-end
| GCC 4.7
|-
! Available from
| http://avr-ada.sourceforge.net/
|-
! Support
| Volunteer; public bug database
|-
! Add-ons included
| partial Ada run time system, AVR peripherals support library
|}

=== GNAT for LEON ===

The Real-Time Research Group of the Technical University of Madrid (UPM, ''Universidad Politécnica de Madrid'') wrote a [[w:Ravenscar profile|Ravenscar]]-compliant real-time kernel for execution on [[w:LEON|LEON processors]] and a modified run-time library. They also provide a GNAT cross-compiler.  As of version 2.0.1:

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, Ada&amp;nbsp;2005, C
|-
! License for the run-time library
| pure GPL
|-
! Native platforms
| none
|-
! Cross platforms
| GNU/Linux on i686 to LEON2 bare boards
|-
! Compiler back-end
| GCC 4.1 (GNAT GPL 2007 Edition)
|-
! Available from
| http://www.dit.upm.es/ork/
|-
! Support
| ?
|-
! Add-ons included
| OpenRavenscar real-time kernel; minimal run-time library
|}

=== GNAT for Macintosh (Mac OS X) ===

[http://www.macada.org/ GNAT for Macintosh] provides both FSF (GMGPL) and AdaCore (GPL) versions of [[w:GNAT|GNAT]] with [[w:Xcode|Xcode]] and [[w:Carbon (API)|Carbon]] integration and bindings.

Note that this site was last updated for GCC 4.3 and Mac OS X Leopard (both PowerPC and Intel-based). Aside from the work on integration with Apple’s Carbon graphical user interface and with Xcode 3.1 it may be preferable to [[#The_GNU_Ada_Project|see above]].

There is also support at [https://trac.macports.org/browser/trunk/dports/lang/gnat-gcc MacPorts]; the last update (at 25 Nov 2011) was for GCC 4.4.2.

=== Prebuilt packages as part of larger distributions ===

Many distributions contain prebuilt binaries of GCC or various public releases of GNAT from AdaCore.  Quality varies widely between distributions.  The list of distributions below is in alphabetical oder. ''(Please keep it that way.)''

==== AIDE (for Microsoft Windows) ====

[https://stef.genesix.org/aide/aide.html AIDE &amp;mdash; Ada Instant Development Environment] is a complete one-click, just-works Ada distribution for Windows, consisting of GNAT, comprehensive documentation, tools and libraries.  All are precompiled, and source code is also available.  The installation procedure is particularly easy (just unzip to default c:\aide and run).  AIDE is intended for beginners and teachers, but can also be used by advanced users.

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, C
|-
! License for the run-time library
| GNAT-modified GPL
|-
! Native platforms
| Microsoft Windows on i386
|-
! Cross platforms
| none
|-
! Compiler back-end
| GCC 2.8.1
|-
! Available from
| https://stef.genesix.org/aide/aide.html
|-
! Support
| stef@genesix.org
|-
! Add-ons included
| ASIS, GDB, GPS, GtkAda, Texinfo (more?)
|}

==== Cygwin (for Microsoft Windows) ====

[http://www.cygwin.com Cygwin], the Linux-like environment for Windows, also contains a version of the [[#GNAT, the GNU Ada Compiler from AdaCore and the Free Software Foundation|GNAT]] compiler. The [[w:Cygwin|Cygwin]] version of [[w:GNAT|GNAT]] is older than the [[w:MinGW|MinGW]] version and does not support DLLs and Multi-Threading &lt;small&gt;(as of 11.2004)&lt;/small&gt;.

==== Debian (GNU/Linux and GNU/kFreeBSD) ====

There is a [http://people.debian.org/~lbrenta/debian-ada-policy.html Debian Policy for Ada] which tries to make Debian the best Ada development ''and deployment'' platform.  The development platform includes the compiler and many libraries, pre-packaged and integrated so as to be easy to use in any program.  The deployment platform is the renowned ''[http://www.debian.org/releases/stable/ stable]'' distribution, which is suitable for mission-critical workloads and enjoys long life cycles, typically 3 to 4 years.  Because Debian is a binary distribution, it is possible to deploy non-free, binary-only programs on it while enjoying all the benefits of a stable platform. Compiler choices are conservative for this reason, and the Policy mandates that all Ada programs and libraries be compiled with the same version of GNAT.  This makes it possible to use all libraries in the same program.  Debian separates run-time libraries from development packages, so that end users do not have to install the development system just to run a program.

The GNU Ada compiler can be installed on a Debian system with this command:

 aptitude install gnat

This will also give you a list of related packages, which are likely to be useful for an Ada programmer.

Debian is unique in that it also allows programmers to use some of GNAT's internal components by means of two libraries:
* libgnatvsn (licensed under GNAT-Modified GPL) and
* libgnatprj (the project manager, licensed under pure GPL).
Debian packages make use of these libraries.

In the table below, the information about the future Debian 8.0 ''Jessie'' is accurate as of October 2014 and will change.

{| class="wikitable"
! &amp;nbsp; !! 3.1 ''Sarge'' !! 4.0 ''Etch'' !! 5.0 ''Lenny'' !! 6.0 ''Squeeze'' !! 7.0 ''Wheezy'' !! 8.0 ''Jessie''
|-
! Release date
| June 2005
| April 2007
| February 2009
| February 2011
| May 2013
| April 2015
|-
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, C
| colspan=4 | +Ada 2005, parts of Ada 2012, C, C++, Fortran 95, Java, Objective-C, Objective-C++
| +Ada 2012
|-
! License for the run-time library
| colspan=3 | GNAT-modified GPL (both ZCX and SJLJ versions starting from 5.0 ''Lenny'')
| colspan=3 | GPL version 3 with Run-time library exception
|-
! Native platforms:       !! 3.1 ''Sarge'' !! 4.0 ''Etch'' !! 5.0 ''Lenny'' !! 6.0 ''Squeeze'' !! 7.0 ''Wheezy'' !! 8.0 ''Jessie''
|-
| &lt;tt&gt;alpha&lt;/tt&gt;          ||     || yes || yes || || ||
|-
| &lt;tt&gt;amd64&lt;/tt&gt;          ||     || yes || yes || yes || yes || yes
|-
| &lt;tt&gt;armel&lt;/tt&gt;          ||     ||     ||     || preliminary || yes || yes
|-
| &lt;tt&gt;armhf&lt;/tt&gt;          ||     ||     ||     ||             || yes || yes
|-
| &lt;tt&gt;hppa&lt;/tt&gt;           ||     || yes || yes || yes || ||
|-
| &lt;tt&gt;hurd-i386&lt;/tt&gt;      ||     ||     ||     ||     || yes || yes
|-
| &lt;tt&gt;i386&lt;/tt&gt;           || yes || yes || yes || yes || yes || yes
|-
| &lt;tt&gt;ia64&lt;/tt&gt;           ||     || yes || yes || yes || yes ||
|-
| &lt;tt&gt;kfreebsd-amd64&lt;/tt&gt; ||     ||     ||     || yes || yes || yes
|-
| &lt;tt&gt;kfreebsd-i386&lt;/tt&gt;  ||     || yes || yes || yes || yes || yes
|-
| &lt;tt&gt;mips&lt;/tt&gt;           ||     || yes || yes || yes || yes || yes
|-
| &lt;tt&gt;mipsel&lt;/tt&gt;         ||     || yes || yes || yes || yes || yes
|-
| &lt;tt&gt;powerpc&lt;/tt&gt;        || yes || yes || yes || yes || yes || yes
|-
| &lt;tt&gt;ppc64&lt;/tt&gt;          ||     ||     || yes || yes || yes || yes
|-
| &lt;tt&gt;s390&lt;/tt&gt;           ||     || yes || yes || yes || yes || s390x
|-
| &lt;tt&gt;sparc&lt;/tt&gt;          || yes || yes || yes || yes || yes || yes
|-
! Cross platforms
| colspan=6 | none
|-
! Compiler back-end       || GCC 2.8.1 || GCC 4.1 || GCC 4.3 || GCC 4.4 || GCC 4.6 || GCC 4.9
|-
! Available from
| colspan=6 | http://www.debian.org/
|-
! Support
| colspan=6 | Volunteer; public bug database; paid support available from third parties; [http://lists.debian.org/debian-ada public mailing list]
|-
! Add-ons included      !! 3.1 ''Sarge'' !! 4.0 ''Etch'' !! 5.0 ''Lenny'' !! 6.0 ''Squeeze'' !! 7.0 ''Wheezy'' !! 8.0 ''Jessie''
|-
| ada-reference-manual  || 1995          || 1995         || 1995          || 2005            || 2012 || 2012
|-
| AdaBindX              || 0.7.2 || || || || ||
|-
| AdaBrowse             || 4.0.2 || 4.0.2 || 4.0.2 || 4.0.3 || 4.0.3 || -
|-
| AdaCGI                || 1.6 || 1.6 || 1.6 || 1.6 || 1.6 || 1.6
|-
| AdaControl            || || 1.6r8 || 1.9r4 || 1.12r3 || 1.12r3 || 1.16r11
|-
| APQ (with PostgreSQL) || || || || 3.0 || 3.2 || 3.2
|-
| AdaSockets            || 1.8.4.7 || 1.8.4.7 || 1.8.4.7 || 1.8.8 || 1.8.10 || 1.8.11
|-
| Ahven                 || || || 1.2 || 1.7 || 2.1 || 2.4
|-
| Alog                  || || || 0.1 || 0.3 || 0.4.1 || -
|-
| anet                  || || ||     ||     || 0.1 || 0.3.1
|-
| ASIS                  || 3.15p || 2005 || 2007 || 2008 || 2010 || 2014
|-
| AUnit                 || 1.01 || 1.03 || 1.03 || 1.03 || 1.03 || 3.7.1
|-
| AWS                   || 2.0 || 2.2 || 2.5 prerelease || 2.7 || 2.10.2 || 3.2.0
|-
| Charles               || 2005-02-17 || colspan=5 | (superseded by Ada.Containers in gnat)
|-
| Florist               || 3.15p || 2006 || 2006 || 2009 || 2011 || 2014
|-
| GDB                   || 5.3 || 6.4 || 6.8 || 7.0.1 || 7.4.1 || 7.7.1
|-
| GLADE                 || 3.15p || 2006 || || colspan=3 | (superseded by PolyORB)
|-
| GMPAda                || || || || 0.0.20091124 || 0.0.20120331 || 0.0.20131223
|-
| GNADE                 || 1.5.1 || 1.6.1 || 1.6.1 || 1.6.2 || 1.6.2 || -
|-
| GNAT Checker          || 1999-05-19 || colspan=5 | (superseded by AdaControl)
|-
| GPRBuild              || || || || 1.3.0w || 2011 || 2014
|-
| GPS                   || 2.1 || 4.0.1 || 4.0.1 || 4.3 || 5.0 || 5.3
|-
| GtkAda                || 2.4 || 2.8.1 || 2.8.1 || 2.14.2 || 2.24.1 || 2.24.4
|-
| Log4Ada               || || || || 1.0 || 1.2 || 1.2
|-
| Narval                || || || || 1.10.2 || ||
|-
| OpenToken             || 3.0b || 3.0b || 3.0b || 4.0b || 4.0b || 5.0a
|-
| PC/SC Ada             || || || || 0.6 || 0.7.1 || 0.7.2
|-
| PolyORB               || || || || 2.6 prerelease || 2.8 prerelease || 2.11 prerelease
|-
| PLPlot                || || || 5.9.0 || 5.9.5 || 5.9.5 || 5.10.0
|-
| Templates Parser      || || 10.0+20060522 || 11.1 || 11.5 || 11.6 || 11.8
|-
| TextTools             || 2.0.3 || 2.0.3 || 2.0.5 || 2.0.6 || || 2.1.0
|-
| XML/Ada               || 1.0 || 2.2 || 3.0 || 3.2 || 4.1 || 4.4
|-
| XML-EZ-out            || || || || 1.06 || 1.06.1 || 1.06.1
|}

The ADT plugin for Eclipse (see section [[#ObjectAda_from_Aonix|ObjectAda from Aonix]]) can be used with GNAT as packaged for Debian Etch.
Specify "/usr" as the toolchain path.

==== DJGPP (for MS-DOS) ====

DJGPP has [[w:GNAT|GNAT]] as part of their [[w:GCC|GCC]] distribution.

[http://www.delorie.com/djgpp/ DJGPP] is a port of a comprehensive collection of GNU utilities to MS-DOS with 32-bit extensions, and is actively supported (as of 1.2005). It includes the whole [[w:GCC|GCC]] compiler collection, that now includes Ada. See the [http://www.delorie.com/djgpp/ DJGPP] website for installation instructions.

DJGPP programs run also in a DOS command box in Windows, as well as in native MS-DOS systems.

==== FreeBSD and DragonFly ====

[http://www.freebsd.org FreeBSD]'s [http://www.freebsd.org/ports ports collection] has an Ada framework
with an expanding set of software packages.  The Framework is currently built by FSF GCC 6.3.1, although FSF GCC 5.4 can optionally be used instead.  The AdaCore GPL compilers are not present.  There are several reasons for this, not the least of which is the addition maintenance of multiple compilers is significant.  There are no non-GCC based Ada compilers represented in ports either.

While FreeBSD does have a snapshot that goes with each release, the ports are updating in a rolling
fashion continuously, and the vast majority of users prefer the "head" of ports which has the latest
packages.

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, Ada&amp;nbsp;2005, Ada&amp;nbsp;2012, C, C++, ObjC, Fortran
|-
! License for the run-time library
| GPLv3 with Runtime Library Exception v3
|-
! Native platforms
| FreeBSD i386, FreeBSD AMD64, FreeBSD ARM64, DragonFly x86-64
|-
! Cross platforms
| FreeBSD/DragonFly-&gt;Android (targets ARMv7 and x86), FreeBSD/DragonFly-&gt;FreeBSD/ARM64 (targets Aarch64)
|-
! Compiler back-end
| GCC 6.3.1
|-
! Available from
| http://www.freebsd.org, https://github.com/DragonFlyBSD/DPorts
|-
! Support
| Volunteer; public bug database
|}

There are two ways to install the software.  The quickest and easiest way is to install prebuilt binaries using the command "pkg install &lt;pkg name&gt;".  For example, to install the GNAT Programming Studio and all of its dependencies including the GNAT compiler, all you need is one command:

 pkg install gps-ide

If a specific package is not available, or the user just prefers to build from source (this can take a long time), then a typical command would be:

 cd /usr/ports/devel/gps &amp;&amp; make install clean

As with the binary installation, if any dependencies are missing they will be built first, also from source.

'''Available software as of 8 February 2017'''

{| class="wikitable"
! Directory || Common Name || version || pkg name
|-
| archivers/zip-ada || Zip-Ada (Library) || 52 || zip-ada
|-
| cad/ghdl || GNU VHDL simulator || 0.33 || ghdl
|-
| databases/adabase || Thick bindings to Postgres, MySQL and SQLite || 3.0 || adabase
|-
| databases/apq || Ada95 database interface library || 3.2.0 || apq
|-
| databases/apq-mysql || APQ MySQL driver || 3.2.0 || apq-mysql
|-
| databases/apq-odbc || APQ ODBC driver || 3.2.0 || apq-odbc
|-
| databases/apq-pgsql || APQ PostgreSQL driver || 3.2.0 || apq-pgsql
|-
| devel/ada-util || Ada 2005 app utilities (Library) || 1.8.0 || ada-util
|-
| devel/adaid || UUID generation library || 0.0.1 || adaid
|-
| devel/adabooch || Ada95 Booch Components (Library) || 2016-03-21 || adabooch
|-
| devel/adacurses || AdaCurses (Binding) || 2015-08-08 || adacurses
|-
| devel/afay || AFlex and AYACC parser generators || 041111 || afay
|-
| devel/ahven || Ahven (Unit Test Library) || 2.6 || ahven
|-
| devel/alog || Stackable logging framework || 0.5.2 || alog
|-
| devel/aunit || Unit testing framework || 2016 || aunit
|-
| devel/florist-gpl || Florist (Posix Binding) || 2016 || florist-gpl
|-
| devel/gnatcoll|| GNAT Component Collection || 2016 || gnatcoll
|-
| devel/gnatpython || GNATPython (python-based test framework) || 2014-02-24 || gnatpython
|-
| devel/gprbuild || GPRbuild (Multi-language build tool) || 20160609 || gprbuild
|-
| devel/gps || GNAT Programming Studio || 2016 || gps-ide
|-
| devel/libspark2012 || SPARK 2012 library source files || 2012 || libspark2012
|-
| devel/matreshka || Matreshka (Info Systems Library) || 0.7.0 || matreshka
|-
| devel/pcsc-ada || PCSC library || 0.7.3 || pcsc-ada
|-
| devel/pragmarcs || PragmAda Reusable Components || 20161207 || pragmarcs
|-
| devel/sdl_gnat || GNAT SDL bindings (Thin) || 2013 || sdl_gnat
|-
| devel/simple_components || Simple Ada components || 4.18 || simple_components
|-
| dns/ironsides || Spark/Ada Ironsides DNS Server || 2015-04-15 || ironsides
|-
| graphics/generic_image_decoder || image decoder library || 05 || generic_image_decoder
|-
| lang/adacontrol || AdaControl (Construct detection tool) || 1.17r3 || adacontrol
|-
| lang/asis || Ada Semantic Interface Specification || 2016 || asis
|-
| lang/gcc5-aux || GNAT Ada compiler (FSF GCC) || 5.4 (2016-06-03) || gcc5-aux
|-
| lang/gcc6-aux || GNAT Ada compiler (FSF GCC) || 6.3.1 (2017-02-02) || gcc6-aux
|-
| lang/gnat_util || GNAT sources (helper Library) || 2017-02-02 || gnat_util
|-
| lang/gnatcross-aarch64 || FreeBSD/ARM64 cross-compiler, Aarch64 || 2017-02-02 (6.3.1) || gnatcross-aarch64
|-
| lang/gnatcross-binutils-aarch64 || GNU Binutils used by FreeBSD/ARM64 cross-compiler || 2.27 || gnatcross-binutils-aarch64
|-
| lang/gnatcross-sysroot-aarch64 || FreeBSD/ARM64 sysroot || 1 || gnatcross-sysroot-aarch64
|-
| lang/gnatdroid-armv7 || Android 5.0 cross-compiler, ARMv7 || 2017-02-02 (6.3.1) || gnatdroid-armv7
|-
| lang/gnatdroid-binutils || GNU Binutils used by Android cross-compiler || 2.27 || gnatdroid-binutils
|-
| lang/gnatdroid-binutils-x86 || GNU Binutils used by Android cross-compiler (x86) || 2.27 || gnatdroid-binutils-x86
|-
| lang/gnatdroid-sysroot || Android API 4.0 to 6.0 sysroot || 23 || gnatdroid-sysroot
|-
| lang/gnatdroid-sysroot-x86 || Android API 4.4 to 6.0 sysroot (x86) || 23 || gnatdroid-sysroot-x86
|-
| lang/gnatdroid-x86|| Android 5.0 cross-compiler, x86 || 2017-02-02 (6.3.1) || gnatdroid-x86
|-
| lang/lua-ada || Ada bindings for Lua || 1.0 || ada-lua
|-
| math/plplot-ada || PLplot Ada bindings || 5.12.0 || plplot-ada
|-
| misc/excel-writer || Excel output library || 15 || excel-writer
|-
| misc/ini_file_manager || Configuration file library || 03 || ini_file_manager
|-
| net/adasockets || IPv4 socket library || 1.10 || adasockets
|-
| net/anet || Network library (IPv4 and IPv6) || 0.3.4 || anet
|-
| net/polyorb || PolyORB (CORBA/SOAP/DSA middleware) || 2.11.1 (2014) || polyorb
|-
| security/libadacrypt || Cryptography Library (symm &amp; asymm)  || 20151019 || libadacrypt
|-
| security/libsparkcrypto || LibSparkCrypto (Cryptography Library) || 0.1.1 || libsparkcrypto
|-
| shells/sparforte || Shell and scripting language for mission-critical projects || 2.0.2 || spareforte
|-
| textproc/adabrowse || AdaBrowse (Ada95 HTML doc. generator) || 4.0.3 || adabrowse
|-
| textproc/opentoken || Ada Lex analyzer and parser || 6.0b || opentoken
|-
| textproc/py-sphinxcontrib-adadomain || Sphinx documentation generator for Ada || 0.1 || py27-sphinxcontrib-adadomain
|-
| textproc/templates_parser || AWS Template Parser library || 17.0.0 || templates_parser
|-
| textproc/words || Words (Latin/English dictionary) || 1.97F || words
|-
| textproc/xml_ez_out || XML output (Library) || 1.06 || xml_ez_out
|-
| textproc/xmlada || XML/Ada (Library) || 17.0.0 || xmlada
|-
| www/aws || Ada Web Server || 17.0.1 || aws
|-
| www/aws-demos || Ada Web Server demos || 17.0.1 || aws-demos
|-
| x11-toolkits/gtkada || GTK2/Ada (bindings) || 2.24.4 || gtkada
|-
| x11-toolkits/gtkada3 || GTK3/Ada (bindings) || 3.14.2 || gtkada3
|}

==== Gentoo GNU/Linux ====

The GNU Ada compiler can be installed on a Gentoo system using emerge:

  emerge dev-lang/gnat

In contrast to Debian, Gentoo is primarily a source distribution, so many packages are available only in source form, and require the user to recompile them (using emerge).

Also in contrast to Debian, Gentoo supports several versions of GNAT in parallel on the same system.  Be careful, because not all add-ons and libraries are available with all versions of GNAT.

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, Ada 2005, C (more?)
|-
! License for the run-time library
| pure or GNAT-modified GPL (both available)
|-
! Native platforms
| Gentoo GNU/Linux on amd64, powerpc and i386
|-
! Cross platforms
| none
|-
! Compiler back-end
| GCC 3.4, 4.1 (various binary packages)
|-
! Available from
| http://www.gentoo.org/  (see other Gentoo [http://es.znurt.org/dev-ada dev-ada] packages)
|-
! Support
| Volunteer; public bug database
|-
! Add-ons included
| AdaBindX, AdaBroker, AdaDoc, AdaOpenGL, AdaSockets, ASIS, AUnit, Booch Components, CBind, Charles, Florist, GLADE, GPS, GtkAda, XML/Ada
|}

==== Mandriva Linux ====

The GNU Ada compiler can be installed on a Mandriva system with this command:

 urpmi gnat

==== MinGW (for Microsoft Windows) ====

[http://mingw.sourceforge.net MinGW &amp;mdash; Minimalist GNU for Windows] contains a version of the GNAT compiler.

The current version of MinGW (5.1.6) contains gcc-4.5.0.  This includes a fully functional GNAT compiler.  If the automatic downloader does not work correctly you can download the compiler directly: pick gcc-4.5.0-1 from MinGW/BaseSystem/GCC/Version4/

===== old instructions =====
The following list should help you with the installation. (I may have forgotten something &amp;mdash; but this is wiki, just add to the list)

# Install &lt;var&gt;MinGW-3.1.0-1.exe&lt;/var&gt;
## extract &lt;var&gt;binutils-2.15.91-20040904-1.tar.gz&lt;/var&gt;
## extract &lt;var&gt;mingw-runtime-3.5.tar.gz&lt;/var&gt;
## extract &lt;var&gt;gcc-core-3.4.2-20040916-1.tar.gz&lt;/var&gt;
## extract &lt;var&gt;gcc-ada-3.4.2-20040916-1.tar.gz&lt;/var&gt;
## extract &lt;var&gt;gcc-g++-3.4.2-20040916-1.tar.gz (Optional)&lt;/var&gt;
## extract &lt;var&gt;gcc-g77-3.4.2-20040916-1.tar.gz (Optional)&lt;/var&gt;
## extract &lt;var&gt;gcc-java-3.4.2-20040916-1.tar.gz (Optional)&lt;/var&gt;
## extract &lt;var&gt;gcc-objc-3.4.2-20040916-1.tar.gz (Optional)&lt;/var&gt;
## extract &lt;var&gt;w32api-3.1.tar.gz&lt;/var&gt;
# Install &lt;var&gt;mingw32-make-3.80.0-3.exe (Optional)&lt;/var&gt;
# Install &lt;var&gt;gdb-5.2.1-1.exe (Optional)&lt;/var&gt;
# Install &lt;var&gt;MSYS-1.0.10.exe (Optional)&lt;/var&gt;
# Install &lt;var&gt;msysDTK-1.0.1.exe (Optional)&lt;/var&gt;
## extract &lt;var&gt;msys-automake-1.8.2.tar.bz2 (Optional)&lt;/var&gt;
## extract &lt;var&gt;msys-autoconf-2.59.tar.bz2 (Optional)&lt;/var&gt;
## extract &lt;var&gt;msys-libtool-1.5.tar.bz2 (Optional)&lt;/var&gt;

I have made good experience in using &lt;var&gt;D:\MinGW&lt;/var&gt; as target directory for all installations and extractions.

Also noteworthy is that the Windows version for GNAT from Libre is also based on MinGW.

In gcc-3.4.2-release_notes.txt from MinGW site reads:
''please
check that the files in the /lib/gcc/mingw32/3.4.2/adainclude and adalib
directories are flagged as read-only. This attribute is necessary to
prevent them from being deleted when using gnatclean to clean a project.''

So be sure to do this.

==== OpenCSW (for Solaris on [[w:SPARC|SPARC]] and [[w:x86|x86]]) ====

[http://www.opencsw.org OpenCSW] has binary packages of GCC 3.4.6 and 4.6.2 with Ada support.  The package names are gcc3ada and gcc4ada respectively.

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, parts of Ada&amp;nbsp;2005, C, C++, Fortran 95, Java, Objective-C, Objective-C++
|-
! License for the run-time library
| GNAT-modified GPL
|-
! Native platforms
| Oracle Solaris and OpenSolaris on SPARC and x86
|-
! Cross platforms
| none
|-
! Compiler back-end
| GCC 3.4.6 and 4.6.2 (both available)
|-
! Support
| ?
|-
! Available from
| http://www.opencsw.org/
|-
! Add-ons included
| none (?)
|}

==== pkgsrc: NetBSD, DragonFly, FreeBSD and Solaris  ====

The [http://www.pkgsrc.org pkgsrc] portable package file system has a small Ada framework.
It is based on FSF GCC 5.4 currently and the FSF GCC 6.2 is available as well.  
The AdaCore GPL versions are not present, nor are non-GCC based compilers.

The pkgsrc system is released in quarterly branches, which are normally recommended.  However,
a user could also choose the "head" which would the very latest package versions.  The pkgsrc
system supports 21 platforms, but for Ada this is potentially limited to 5 due to the bootstrap
compiler requirement: NetBSD, DragonFly, SunOS (Solaris/Illumos), OpenBSD/MirBSD, and FreeBSD.

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, Ada&amp;nbsp;2005, Ada&amp;nbsp;2012, C, C++, ObjC, Fortran
|-
! License for the run-time library
| GPLv3 with Runtime Library Exception v3
|-
! Native platforms
| NetBSD i386 and amd64, DragonFly x86-64, FreeBSD i386 and amd64, Solaris i386 and x86_64
|-
! Cross platforms
| None
|-
! Compiler back-end
| GCC 5.4  (GCC 4.9 and 6 available)
|-
! Available from
| http://www.pkgsrc.org, status: http://www.pkgsrc.se
|-
! Support
| Volunteer; public bug database
|}

There are two ways to install the software.  The quickest and easiest way is to install prebuilt binaries using the command "pkg_add &lt;pkg name&gt;".  For example, to install the GNAT Programming Studio and all of its dependencies including the GNAT compiler, all you need is one command:

 pkg_add gps

If a specific package is not available, or the user just prefers to build from source (this can take a long time), then a typical command would be:

 cd /usr/pkg/devel/gps &amp;&amp; bmake install

As with the binary installation, if any dependencies are missing they will be built first, also from source.

'''Available software as of 14 December 2016'''

{| class="wikitable"
! Directory || Common Name || version || pkg name
|-
| cad/ghdl || GNU VHDL simulator || 0.32rc1|| ghdl
|-
| devel/florist || Florist (Posix Binding) || 2012 || florist-gpl
|-
| devel/gnatpython || GNATPython (python-based test framework) || 2011-09-12 || gnatpython
|-
| devel/gprbuild-aux || GPRbuild (Multi-language build tool) || 2016-06-09 || gprbuild-aux
|-
| lang/gcc-aux || GNAT Ada compiler (FSF GCC) || 4.9.2 (2014-10-23) || gcc-aux
|-
| lang/gcc5-aux || GNAT Ada compiler (FSF GCC) || 5.4.0 (2016-06-03) || gcc5-aux
|-
| lang/gcc6-aux || GNAT Ada compiler (FSF GCC) || 6.2.0 (2016-08-22) || gcc6-aux
|-
| textproc/xmlada || XML/Ada (Library) || 4.4.0 || xmlada
|-
| www/aws || Ada Web Server || 3.1.0.0 (w) || aws
|-
| www/aws-demos || Ada Web Server demos || 3.1.0.0 (w) || aws-demos
|-
| x11/gtkada || GTK/Ada (bindings) || 2.24.4 || gtkada
|}

==== SuSE Linux ====

All versions of SuSE Linux have a GNAT compiler included. SuSE versions 9.2 and higher also contains ASIS, Florist and GLADE libraries. The following two packages are needed:

 gnat
 gnat-runtime

For SuSE version 12.1, the compiler is in the package 
  gcc46-ada
  libada46

For 64 bit system you will need the 32 bit compatibility packages as well:

 gnat-32bit
 gnat-runtime-32bit

==== Ubuntu ====

Ubuntu (and derivatives like Kubuntu, Xubuntu...) is a Debian-based Linux distribution, thus the [[#Debian (GNU/Linux and GNU/kFreeBSD)|installation process described above]] can be used. Graphical package managers like Synaptic or Adept can also be employed to select the Ada packages.

== ICC from Irvine Compiler Corporation ==

[http://www.irvine.com/ Irvine Compiler Corporation] provides native and cross compilers for various platforms.[http://www.irvine.com/products.html]  The compiler and run-time system support development of certified, safety-critical software.

Commercial, proprietary. No-cost evaluation is possible on request.  Royalty-free redistribution of the run-time system is allowed.

== Janus/Ada&amp;nbsp;83 and 95 from RR Software ==

[http://www.rrsoftware.com RR Software] offers native compilers for MS-DOS, Microsoft Windows and various Unix and Unix-like systems, and a library for Windows GUI programming called CLAW.  There are academic, personal and professional editions, as well as support options.

[http://www.rrsoftware.com/html/blog/ja-321-rel.html Janus/Ada 95 supports subset of Ada 2007 and Ada 2012 features].

Commercial but relatively cheap; proprietary.

== MAXAda from Concurrent ==

[https://www.concurrent-rt.com Concurrent] offers [https://www.concurrent-rt.com/wp-content/uploads/2016/11/maxada-data-sheet.pdf MAXAda], an Ada&amp;nbsp;95 compiler for Linux/Xeon and PowerPC platforms, and Ada bindings to POSIX and X/Motif.[https://redhawk.concurrent-rt.com/docs/root/1Linux/5Compilers/Ada/0898539-3.5.1-SR3.pdf]

Commercial, proprietary.

== ObjectAda from PTC (formerly Aonix/Atego) ==

PTC offers [https://www.ptc.com/en/products/developer-tools/objectada ObjectAda] native (Windows, some flavors of Unix, and Linux) and cross (PPC, Intel, VxWorks, and ERC32) compilers.

Limited support of Ada 2012 is available.

Commercial, proprietary.

== PowerAda from OC Systems ==

[http://www.ocsystems.com/ OC Systems] offers Ada compilers and bindings to POSIX and X-11:
* [http://www.ocsystems.com/prod_powerada.html PowerAda], an Ada&amp;nbsp;95 compiler for Linux and AIX,
* [http://www.ocsystems.com/prod_legacyada.html LegacyAda/390], an Ada&amp;nbsp;83 compiler for IBM System 370 and 390 mainframes

Commercial, proprietary.

== ApexAda from PTC (formerly IBM Rational) ==

[https://www.ptc.com/en/products/developer-tools/apexada PTC ApexAda] for native and embedded development.

Commercial, proprietary.

== SCORE from DDC-I ==

[http://www.ddci.com/ DDC-I] offers its [https://www.ddci.com/products_score SCORE] cross-compilers for embedded development. SCORE stands for Safety-Critical, Object-oriented, Real-time Embedded.

Commercial, proprietary.

== TADS from Tartan ==

[http://tartan.com/index.html Tartan] offers the Tartan Ada Development System (TADS), with cross-compilers for some digital signal processors.

Commercial, proprietary.

== XD Ada from [http://www.dxc.technology DXC] ==

[http://assets1.dxc.technology/manufacturing/downloads/MD_6933a-18_XD_Ada_Cross-Compiler_OO_final.pdf XD Ada] is an Ada&amp;nbsp;83 cross-compiler for embedded development. Hosts include VAX, Alpha and Integrity Servers running OpenVMS.  Targets include Motorola 68000 and MIL-STD-1750A processors.

Commercial, proprietary.

== XGC Ada from XGC Software ==

XGC compilers are GCC with custom run-time libraries suitable for avionics and space applications. The run-time kernels are very small and do not support exception propagation (i.e. you can handle an exception only in the subprogram that raised it).

Commercial but some versions are also offered as free downloads.  Free Software.

{| class="wikitable"
! Languages supported
| Ada&amp;nbsp;83, Ada&amp;nbsp;95, C
|-
! License for the run-time library
| GNAT-Modified GPL
|-
! Native platforms
| none
|-
! Cross platforms
| Hosts: sun-sparc-solaris, pc-linux2.*; targets are bare boards with [[w:ERC32|ERC32]], [[w:MIL-STD-1750A|MIL-STD-1750A]], [[w:Motorola 68000|Motorola 68000]] family or [[w:IA 32|Intel 32-bit]] processors.  [[w:PowerPC|PowerPC]] and [[w:Intel 80186|Intel 80186]] targets on request.
|-
! Compiler back-end
| GCC 2.8.1
|-
! Available from
| http://www.xgc.com/
|-
! Support
| Commercial
|-
! Add-ons included
| Ravenscar-compliant run-time kernels, certified for avionics and space applications; gdb cross-debugger; target simulator.
|}

== References ==

&lt;references/&gt;

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Installing]]
[[es:Programación en Ada/Instalación]]
&lt;/noinclude&gt;</text>
      <sha1>mlgxarvycgxpoq7k04bl7r4p8m2xkhr</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Interfacing</title>
    <ns>0</ns>
    <id>176836</id>
    <revision>
      <id>3250110</id>
      <parentid>3211511</parentid>
      <timestamp>2017-07-31T00:25:40Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* See also */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1694" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Interfacing}}
__TOC__&lt;/noinclude&gt;

== Interfacing ==

Ada is one of the few languages where interfacing is part of the language standard. The programmer can interface with other programming languages, or with the hardware.

== Other programming languages ==

The language standard defines the interfaces for [[C Programming|C]], [[COBOL|Cobol]] and [[Programming:Fortran|Fortran]]. Of course any implementation might define further interfaces &amp;mdash; [[Ada Programming/GNAT|GNAT]] for example defines an interface to [[C++ Programming|C++]].

Interfacing with other languages is actually provided by pragma [[Ada Programming/Pragmas/Export|Export]], [[Ada Programming/Pragmas/Import|Import]] and [[Ada Programming/Pragmas/Convention|Convention]].

== Hardware devices ==

Embedded programmers usually have to write device drivers. Ada provides extensive support for interfacing with hardware, like using [[Ada Programming/Representation clauses|representation clauses]] to specify the exact representation of types used by the hardware, or standard interrupt handling for writing [[w:Interrupt service routine|Interrupt service routine]]s.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries/Interfaces]]

=== Ada Reference Manual ===

* {{Ada/RMA1|B|Interface to Other Languages}}
* {{Ada/RMA1|C|Systems Programming}}

=== Ada 95 Rationale ===

* {{Ada/95/R1|b|Interface to Other Languages|part=3}}

=== Ada Quality and Style Guide ===
* {{Ada/SG3|7|6|4|Interfacing to Foreign Languages}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Interfacing]]
[[{{BOOKCATEGORY|Ada Programming}}/Unfinished module|Interfacing]]
&lt;/noinclude&gt;</text>
      <sha1>3oxkyk8uypha2kzdyp66erp3w40el8l</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Keywords</title>
    <ns>0</ns>
    <id>16381</id>
    <revision>
      <id>3583467</id>
      <parentid>3583433</parentid>
      <timestamp>2019-10-05T10:32:01Z</timestamp>
      <contributor>
        <username>Mrjulesd</username>
        <id>1779740</id>
      </contributor>
      <comment>Rejected the last text change (by [[Special:Contributions/159.146.10.58|159.146.10.58]]) and restored revision 3250111 by PokestarFan</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1467" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Keywords}}
__TOC__&lt;/noinclude&gt;

== Language summary keywords ==

Most Ada “keywords” have different functions depending on where they are used. A good example is '''[[Ada Programming/Keywords/for|for]]''' which controls the representation clause when used within a declaration part and controls a loop when used within an implementation.

In Ada, a keyword is a '''reserved word''', so it cannot be used as an identifier. Some of them are used as [[Ada Programming/Attributes|attribute]] names.

== List of keywords ==

{{:Template:Ada/Keywords}}

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Aspects]]
* [[Ada Programming/Attributes]]
* [[Ada Programming/Pragmas]]

=== Ada Reference Manual ===

==== Ada 83 ====

* {{Ada/83/RM|2|9|title=Reserved Words}}
* {{Ada/83/RM|E|title=Syntax Summary}}

==== Ada 95 ====

* {{Ada/95/RM|2|9|title=Reserved Words}}
* {{Ada/95/RM|P|title=(informative) Syntax Summary}}

==== Ada 2005 ====

* {{Ada/2005/RM|2|9|title=Reserved Words}}
* {{Ada/2005/RM|P|title=(informative) Syntax Summary}}

==== Ada 2012 ====

* {{Ada/2012/RM|2|9|title=Reserved Words}}
* {{Ada/2012/RM|P|title=(informative) Syntax Summary}}

=== Ada Quality and Style Guide ===

* {{Ada/SG3|3|1|3|Capitalization}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Keywords]] 
[[{{BOOKCATEGORY|Ada Programming}}/Ada 2005 feature|Keywords]]


[[es:Programación en Ada/Palabras reservadas]]
&lt;/noinclude&gt;</text>
      <sha1>378ddjpxqwnochv2omnrrwadfca8jvk</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Lexical elements</title>
    <ns>0</ns>
    <id>41214</id>
    <revision>
      <id>3250176</id>
      <parentid>3211682</parentid>
      <timestamp>2017-07-31T00:27:03Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5615" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Lexical elements}}
__TOC__&lt;/noinclude&gt;

== Character set ==

The character set used in Ada programs is composed of:

* Upper-case letters: A, ..., Z and lower-case letters: a, ..., z.
* Digits: 0, ..., 9.
* Special characters.

Take into account that in Ada 95 the letter range includes accented characters and other letters used in Western Europe languages, those belonging to the ''[[w:ISO 8859-1|ISO Latin-1]]'' character set, as ç, ñ, ð, etc.

In [[Ada Programming/Ada 2005|Ada 2005]] the character set has been extended to the full [[w:Unicode|Unicode]] set, so the identifiers and comments can be written in almost any language in the world.

Ada is a case-insensitive language, i. e. the upper-case set is equivalent to the lower-case set except in character string literals and character literals.

== Lexical elements ==

In Ada we can find the following lexical elements:

* Identifiers
* Numeric Literals
* Character Literals
* String Literals
* [[../Delimiters|Delimiters]]
* Comments
* [[../Keywords|Reserved Words]]

Example:

 Temperature_In_Room := 25;  {{Ada/--|Temperature to be preserved in the room.}}

This line contains 5 lexical elements:

* The identifier &lt;code&gt;Temperature_In_Room&lt;/code&gt;.
* The compound delimiter &lt;code&gt;:=&lt;/code&gt;.
* The number &lt;code&gt;25&lt;/code&gt;.
* The single delimiter &lt;code&gt;;&lt;/code&gt;.
* The comment &lt;code&gt;{{Ada/--|Temperature to be preserved in the room.}}&lt;/code&gt;.

=== Identifiers ===

Definition in ''[[Wikipedia:Backus-Naur form|BNF]]'':

 identifier ::= letter { [ underscore ] letter | digit }
 letter ::= A | ... | Z | a | ... | z
 digit ::= 0 | ... | 9
 underscore ::= _

From this definition we must exclude the keywords that are reserved words in the language and cannot be used as identifiers.

Examples:

The following words are legal Ada identifiers:
 Time_Of_Day  TimeOfDay  El_Niño_Forecast  Façade  counter ALARM

The following ones are '''NOT''' legal Ada identifiers:
 _Time_Of_Day  2nd_turn  Start_  Access  Price_In_$  General__Alarm

'''Exercise''': could you give the reason for not being legal for each one of them?

=== Numbers ===

The numeric literals are composed of the following characters:
* digits &lt;code&gt;0 .. 9&lt;/code&gt;
* the decimal separator &lt;code&gt;.&lt;/code&gt;,
* the exponentiation sign &lt;code&gt;e&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt;,
* the negative sign &lt;code&gt;-&lt;/code&gt; (in exponents only) and
* the underscore &lt;code&gt;_&lt;/code&gt;.

The underscore is used as separator for improving legibility for humans, but it is ignored by the compiler. You can separate numbers following any rationale, e.g. decimal integers in groups of three digits, or binary integers in groups of eight digits.

For example, the real number such as 98.4 can be represented as: &lt;code&gt;9.84E1&lt;/code&gt;,
&lt;code&gt;98.4e0&lt;/code&gt;, &lt;code&gt;984.0e-1&lt;/code&gt; or &lt;code&gt;0.984E+2&lt;/code&gt;, but not as &lt;code&gt;984e-1&lt;/code&gt;.

For integer numbers, for example 1900, it could be written as &lt;code&gt;1900&lt;/code&gt;, &lt;code&gt;19E2&lt;/code&gt;, &lt;code&gt;190e+1&lt;/code&gt; or &lt;code&gt;1_900E+0&lt;/code&gt;.

A numeric literal could also be expressed in a base different to 10, by enclosing the number between &lt;code&gt;#&lt;/code&gt; characters, and preceding it by the base, which can be a number between 2 and 16. For example, &lt;code&gt;2#101#&lt;/code&gt;
is 101&lt;sub&gt;2&lt;/sub&gt;, that is 5&lt;sub&gt;10&lt;/sub&gt;; a hexadecimal number with exponent is &lt;code&gt;16#B#E2&lt;/code&gt;, that is 11 &amp;times; 16² = 2,816.

Note that there are no negative literals; e.g. -1 is not a literal, rather it is the literal 1 preceded by the unary minus operator.

=== Character literals ===

Their type is {{Ada/package|Standard}}.Character, Wide_Character or Wide_Wide_Character. They are delimited by an [[Ada Programming/Delimiters/'|apostrophe (')]].

Examples:

 'A' 'n' '%'

=== String literals ===

[[Ada Programming/Strings|String]] literals are of type {{Ada/package|Standard}}.String, Wide_String or Wide_Wide_String. They are delimited by the 
[[Ada Programming/Special/"|quotation mark (")]].

Example:

 "This is a string literal"

=== Delimiters ===

Single delimiters are one of the following special characters:

 &amp;    '    (    )    *    +    ,    -    .    /    :    ;    &lt;    =    &gt;    

Compound delimiters are composed of two special characters, and they are the following ones:
 =&gt;    ..    **    :=    /=    &gt;=    &lt;=    &lt;&lt;    &gt;&gt;    &lt;&gt;

You can see a full reference of the delimiters in [[Ada Programming/Delimiters]].

=== Comments ===

Comments in Ada start with two consecutive hyphens (&lt;code&gt;--&lt;/code&gt;) and end in the end of line.

 {{Ada/--|This is a comment in a full line}}
 My_Savings := My_Savings * 10.0; {{Ada/--|This is a comment in a line after a sentence}}
 My_Savings := My_Savings * {{Ada/--|This is a comment inserted inside a sentence}}
     1_000_000.0;

A comment can appear where an end of line can be inserted.

=== Reserved words ===

Reserved words are equivalent in upper-case and lower-case letters, although the typical style is the one from the Reference Manual, that is to write them in all lower-case letters.

In Ada some keywords have a different meaning depending on context. You can refer to [[Ada Programming/Keywords]] and the following pages for each keyword.

{{:Template:Ada/Keywords}}

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Delimiters]]
* [[Ada Programming/Keywords]]

=== Ada Reference Manual ===

* {{Ada/RM|2|title=Lexical Elements}}
* {{Ada/RM|2|1|title=Character Set}}
* {{Ada/RM|2|2|title=Lexical Elements, Separators, and Delimiters}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Lexical elements]]

[[es:Programación en Ada/Elementos del lenguaje]]
&lt;/noinclude&gt;</text>
      <sha1>1wukrdvts0xaixllmm79n3xal39i714</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries</title>
    <ns>0</ns>
    <id>21873</id>
    <revision>
      <id>3211686</id>
      <parentid>2401506</parentid>
      <timestamp>2017-05-01T20:09:04Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1437" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries}}
__TOC__&lt;/noinclude&gt;

== Predefined Language Libraries ==

The library which comes with Ada in general and [[w:GNAT|GNAT]] in particular. Ada's built in library is quite extensive and well structured. These chapters too are more reference like.

* [[Ada Programming/Libraries/Standard|Standard]]
* [[Ada Programming/Libraries/Ada|Ada]]
* [[Ada Programming/Libraries/Interfaces|Interfaces]]
* [[Ada Programming/Libraries/System|System]]
* [[Ada Programming/Libraries/GNAT|GNAT]]

== Other Language Libraries ==

Other libraries which are not part of the standard but freely available.

* [[Ada Programming/Libraries/MultiPurpose|Multi Purpose]]
* [[Ada Programming/Libraries/Container|Container Libraries]]
* [[Ada Programming/Libraries/GUI|GUI Libraries]]
* [[Ada Programming/Libraries/Distributed|Distributed Objects]]
* [[Ada Programming/Libraries/Database|Database]]
* [[Ada Programming/Libraries/Web|Web Programming]]
* [[Ada Programming/Libraries/IO|Input/Output]]

== See also ==

=== Wikibook ===

* [[Ada Programming]]

=== Ada Reference Manual ===

* {{Ada/RMA1|A|(normative) Predefined Language Environment}}

=== Resources ===

* A collection of [http://www.adaic.org/ada-resources/tools-libraries/ Tools and Libraries] maintained by the Ada Resource Association.

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Libraries]]
&lt;/noinclude&gt;

[[es:Programación en Ada/Unidades predefinidas]]</text>
      <sha1>6qypw540freywbpjw24ujectikl9cgq</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/Ada</title>
    <ns>0</ns>
    <id>17898</id>
    <revision>
      <id>3250177</id>
      <parentid>3211120</parentid>
      <timestamp>2017-07-31T00:27:04Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22348" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|Ada}}
__TOC__&lt;/noinclude&gt;

The '''Ada''' package is only an anchor or namespace for Ada's standard library. Most compilers will not allow you to add new packages to the Ada hierarchy and even if your compiler allows it you should not do so since all package names starting with ''Ada.'' are reserved for future extensions. 

== List of language defined child units ==

The following library units (packages and generic subprograms) are descendents of the package Ada.

; Ada 2005 : This package is available since [[Ada Programming/Ada 2005|Ada 2005]].

=== A &amp;ndash; C ===

* [[Ada Programming/Libraries/Ada.Assertions|Ada.Assertions]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Asynchronous Task Control|Ada.Asynchronous_Task_Control]]
* [[Ada Programming/Libraries/Ada.Calendar|Ada.Calendar]]
* [[Ada Programming/Libraries/Ada.Calendar.Arithmetic|Ada.Calendar.Arithmetic]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Calendar.Formatting|Ada.Calendar.Formatting]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Calendar.Time Zones|Ada.Calendar.Time_Zones]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Characters|Ada.Characters]]
* [[Ada Programming/Libraries/Ada.Characters.Conversions|Ada.Characters.Conversions]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Characters.Handling|Ada.Characters.Handling]]
* [[Ada Programming/Libraries/Ada.Characters.Latin 1|Ada.Characters.Latin_1]]
* [[Ada Programming/Libraries/Ada.Command Line|Ada.Command_Line]]
* [[Ada Programming/Libraries/Ada.Complex Text IO|Ada.Complex_Text_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers|Ada.Containers]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Doubly Linked Lists|Ada.Containers.Doubly_Linked_Lists]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Generic Array Sort|Ada.Containers.Generic_Array_Sort]] &lt;small&gt;(Ada 2005 generic procedure)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Generic Constrained Array Sort|Ada.Containers.Generic_Constrained_Array_Sort]] &lt;small&gt;(Ada 2005 generic procedure)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Hashed Maps|Ada.Containers.Hashed_Maps]] &lt;small&gt; (Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Hashed Sets|Ada.Containers.Hashed_Sets]] &lt;small&gt; (Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Indefinite Doubly Linked Lists|Ada.Containers.Indefinite_Doubly_Linked_Lists]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Indefinite Hashed Maps|Ada.Containers.Indefinite_Hashed_Maps]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Indefinite Hashed Sets|Ada.Containers.Indefinite_Hashed_Sets]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Indefinite Ordered Maps|Ada.Containers.Indefinite_Ordered_Maps]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Indefinite Ordered Sets|Ada.Containers.Indefinite_Ordered_Sets]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Indefinite Vectors|Ada.Containers.Indefinite_Vectors]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Ordered Maps|Ada.Containers.Ordered_Maps]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Ordered Sets|Ada.Containers.Ordered_Sets]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Containers.Vectors|Ada.Containers.Vectors]] &lt;small&gt;(Ada 2005)&lt;/small&gt;

=== D &amp;ndash; F ===

* [[Ada Programming/Libraries/Ada.Decimal|Ada.Decimal]]
* [[Ada Programming/Libraries/Ada.Direct IO|Ada.Direct_IO]]
* [[Ada Programming/Libraries/Ada.Directories|Ada.Directories]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Directories.Information|Ada.Directories.Information]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Dispatching|Ada.Dispatching]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Dispatching.EDF|Ada.Dispatching.EDF]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Dispatching.Round Robin|Ada.Dispatching.Round_Robin]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Dynamic Priorities|Ada.Dynamic_Priorities]]
* [[Ada Programming/Libraries/Ada.Environment Variables|Ada.Environment_Variables]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Exceptions|Ada.Exceptions]]
* [[Ada Programming/Libraries/Ada.Execution Time|Ada.Execution_Time]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Execution Time.Timers|Ada.Execution_Time.Timers]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Execution Time.Group Budgets|Ada.Execution_Time.Group_Budgets]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Finalization|Ada.Finalization]]
* [[Ada Programming/Libraries/Ada.Float Text IO|Ada.Float_Text_IO]]
* [[Ada Programming/Libraries/Ada.Float Wide Text IO|Ada.Float_Wide_Text_IO]]
* [[Ada Programming/Libraries/Ada.Float Wide Wide Text IO|Ada.Float_Wide_Wide_Text_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;

=== G &amp;ndash; R ===

* [[Ada Programming/Libraries/Ada.Integer Text IO|Ada.Integer_Text_IO]]
* [[Ada Programming/Libraries/Ada.Integer Wide Text IO|Ada.Integer_Wide_Text_IO]]
* [[Ada Programming/Libraries/Ada.Integer Wide Wide Text IO|Ada.Integer_Wide_Wide_Text_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Interrupts|Ada.Interrupts]]
* [[Ada Programming/Libraries/Ada.Interrupts.Names|Ada.Interrupts.Names]]
* [[Ada Programming/Libraries/Ada.IO Exceptions|Ada.IO_Exceptions]]
* [[Ada Programming/Libraries/Ada.Numerics|Ada.Numerics]]
* [[Ada Programming/Libraries/Ada.Numerics.Complex Arrays|Ada.Numerics.Complex_Arrays]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Complex Elementary Functions|Ada.Numerics.Complex_Elementary_Functions]]
* [[Ada Programming/Libraries/Ada.Numerics.Complex Types|Ada.Numerics.Complex_Types]]
* [[Ada Programming/Libraries/Ada.Numerics.Discrete Random|Ada.Numerics.Discrete_Random]]
* [[Ada Programming/Libraries/Ada.Numerics.Elementary Functions|Ada.Numerics.Elementary_Functions]]
* [[Ada Programming/Libraries/Ada.Numerics.Float Random|Ada.Numerics.Float_Random]]
* [[Ada Programming/Libraries/Ada.Numerics.Generic Complex Arrays|Ada.Numerics.Generic_Complex_Arrays]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Generic Complex Elementary Functions|Ada.Numerics.Generic_Complex_Elementary_Functions]]
* [[Ada Programming/Libraries/Ada.Numerics.Generic Complex Types|Ada.Numerics.Generic_Complex_Types]]
* [[Ada Programming/Libraries/Ada.Numerics.Generic Elementary Functions|Ada.Numerics.Generic_Elementary_Functions]]
* [[Ada Programming/Libraries/Ada.Numerics.Generic Real Arrays|Ada.Numerics.Generic_Real_Arrays]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Real Arrays|Ada.Numerics.Real_Arrays]] &lt;small&gt;(Ada 2005)&lt;/small&gt;

=== R &amp;ndash; S ===

* [[Ada Programming/Libraries/Ada.Real Time|Ada.Real_Time]]
* [[Ada Programming/Libraries/Ada.Real Time.Timing Events|Ada.Real_Time.Timing_Events]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Sequential IO|Ada.Sequential_IO]]
* [[Ada Programming/Libraries/Ada.Storage IO|Ada.Storage_IO]]
* [[Ada Programming/Libraries/Ada.Streams|Ada.Streams]]
* [[Ada Programming/Libraries/Ada.Streams.Stream IO|Ada.Streams.Stream_IO]]
* [[Ada Programming/Libraries/Ada.Strings|Ada.Strings]]
* [[Ada Programming/Libraries/Ada.Strings.Bounded|Ada.Strings.Bounded]]
* [[Ada Programming/Libraries/Ada.Strings.Bounded.Hash|Ada.Strings.Bounded.Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Fixed|Ada.Strings.Fixed]]
* [[Ada Programming/Libraries/Ada.Strings.Fixed.Hash|Ada.Strings.Fixed.Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Hash|Ada.Strings.Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Maps|Ada.Strings.Maps]]
* [[Ada Programming/Libraries/Ada.Strings.Maps.Constants|Ada.Strings.Maps.Constants]]
* [[Ada Programming/Libraries/Ada.Strings.Unbounded|Ada.Strings.Unbounded]]
* [[Ada Programming/Libraries/Ada.Strings.Unbounded.Hash|Ada.Strings.Unbounded.Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Bounded|Ada.Strings.Wide_Bounded]]
* [[Ada Programming/Libraries/Ada.Strings.Wide Bounded.Wide Hash|Ada.Strings.Wide_Bounded.Wide_Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Fixed|Ada.Strings.Wide_Fixed]]
* [[Ada Programming/Libraries/Ada.Strings.Wide Fixed.Wide Hash|Ada.Strings.Wide_Fixed.Wide_Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Hash|Ada.Strings.Wide_Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Maps|Ada.Strings.Wide_Maps]]
* [[Ada Programming/Libraries/Ada.Strings.Wide Maps.Wide Constants|Ada.Strings.Wide_Maps.Wide_Constants]]
* [[Ada Programming/Libraries/Ada.Strings.Wide Unbounded|Ada.Strings.Wide_Unbounded]]
* [[Ada Programming/Libraries/Ada.Strings.Wide Unbounded.Wide Hash|Ada.Strings.Wide_Unbounded.Wide_Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Wide Bounded|Ada.Strings.Wide_Wide_Bounded]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Wide Bounded.Wide Wide Hash|Ada.Strings.Wide_Wide_Bounded.Wide_Wide_Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Wide Fixed|Ada.Strings.Wide_Wide_Fixed]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Wide Fixed.Wide Wide Hash|Ada.Strings.Wide_Wide_Fixed.Wide_Wide_Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Wide Hash|Ada.Strings.Wide_Wide_Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Wide Maps|Ada.Strings.Wide_Wide_Maps]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Wide Maps.Wide Wide Constants|Ada.Strings.Wide_Wide_Maps.Wide_Wide_Constants]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Wide Unbounded|Ada.Strings.Wide_Wide_Unbounded]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Wide Unbounded.Wide Wide Hash|Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Hash]] &lt;small&gt;(Ada 2005 generic function)&lt;/small&gt;

* [[Ada Programming/Libraries/Ada.Synchronous Task Control|Ada.Synchronous_Task_Control]]

=== T &amp;ndash; U ===

* [[Ada Programming/Libraries/Ada.Tags|Ada.Tags]]
* [[Ada Programming/Libraries/Ada.Tags.Generic Dispatching Constructor|Ada.Tags.Generic_Dispatching_Constructor]] &lt;small&gt;(generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Task Attributes|Ada.Task_Attributes]]
* [[Ada Programming/Libraries/Ada.Task Identification|Ada.Task_Identification]]
* [[Ada Programming/Libraries/Ada.Task Termination|Ada.Task_Termination]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Text IO|Ada.Text_IO]]
* [[Ada Programming/Libraries/Ada.Text IO.Bounded IO|Ada.Text_IO.Bounded_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Text IO.Complex IO|Ada.Text_IO.Complex_IO]]
* [[Ada Programming/Libraries/Ada.Text IO.Decimal IO|Ada.Text_IO.Decimal_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Text IO.Editing|Ada.Text_IO.Editing]]
* [[Ada Programming/Libraries/Ada.Text IO.Enumeration IO|Ada.Text_IO.Enumeration_IO]] &lt;small&gt;(Nested package of [[Ada Programming/Libraries/Ada.Text IO|Ada.Text_IO]])&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Text IO.Fixed IO|Ada.Text_IO.Fixed_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Text IO.Float IO|Ada.Text_IO.Float_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Text IO.Integer IO|Ada.Text_IO.Integer_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Text IO.Modular IO|Ada.Text_IO.Modular_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Text IO.Text Streams|Ada.Text_IO.Text_Streams]]
* [[Ada Programming/Libraries/Ada.Text IO.Unbounded IO|Ada.Text_IO.Unbounded_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Unchecked Conversion|Ada.Unchecked_Conversion]] &lt;small&gt;(generic function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Unchecked Deallocation|Ada.Unchecked_Deallocation]] &lt;small&gt;(generic procedure)&lt;/small&gt;

=== W &amp;ndash; Z ===

* [[Ada Programming/Libraries/Ada.Wide Characters|Ada.Wide_Characters]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Text IO|Ada.Wide_Text_IO]]
* [[Ada Programming/Libraries/Ada.Wide Text IO.Bounded IO|Ada.Wide_Text_IO.Bounded_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Text IO.Complex IO|Ada.Wide_Text_IO.Complex_IO]]
* [[Ada Programming/Libraries/Ada.Wide Text IO.Decimal IO|Ada.Wide_Text_IO.Decimal_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Text IO.Editing|Ada.Wide_Text_IO.Editing]]
* [[Ada Programming/Libraries/Ada.Wide Text IO.Enumeration IO|Ada.Wide_Text_IO.Enumeration_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Text IO.Fixed IO|Ada.Wide_Text_IO.Fixed_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Text IO.Float IO|Ada.Wide_Text_IO.Float_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Text IO.Integer IO|Ada.Wide_Text_IO.Integer_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Text IO.Modular IO|Ada.Wide_Text_IO.Modular_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Text IO.Text Streams|Ada.Wide_Text_IO.Text_Streams]]
* [[Ada Programming/Libraries/Ada.Wide Text IO.Unbounded IO|Ada.Wide_Text_IO.Unbounded_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Characters|Ada.Wide_Wide_Characters]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO|Ada.Wide_Wide_Text_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Bounded IO|Ada.Wide_Wide_Text_IO.Bounded_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Complex IO|Ada.Wide_Wide_Text_IO.Complex_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Decimal IO|Ada.Wide_Wide_Text_IO.Decimal_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Editing|Ada.Wide_Wide_Text_IO.Editing]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Enumeration IO|Ada.Wide_Wide_Text_IO.Enumeration_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Fixed IO|Ada.Wide_Wide_Text_IO.Fixed_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Float IO|Ada.Wide_Wide_Text_IO.Float_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Integer IO|Ada.Wide_Wide_Text_IO.Integer_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Modular IO|Ada.Wide_Wide_Text_IO.Modular_IO]] &lt;small&gt;(Nested package of {{Ada/package|Ada.Wide_Wide_Text_IO}})&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Text Streams|Ada.Wide_Wide_Text_IO.Text_Streams]] &lt;small&gt;(Ada 2005)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.Unbounded IO|Ada.Wide_Wide_Text_IO.Unbounded_IO]] &lt;small&gt;(Ada 2005)&lt;/small&gt;

== List of implementation defined child units ==

The Reference Manual allows compiler vendors to add extensions to the Standard Libraries. However, these extensions cannot be directly childs of the package Ada, only grandchilds—for example {{Ada/package|Ada.Characters.Latin_9}}.

Currently, only the implementation defined library units of the [[w:GNAT|GNAT]] compiler are listed here. You can help Wikibooks by [http://en.wikibooks.org/w/index.php?title=Ada_Programming/Libraries/Ada&amp;action=edit adding] implementation dependent packages of other compilers:

; GNAT : Extended package [http://gcc.gnu.org/onlinedocs/gnat_rm/The-GNAT-Library.html implemented by GNAT].
; ObjectAda :  Extended package implemented by ObjectAda.
; APEX :  Extended package implemented by IBM/Rational APEX.

=== A &amp;ndash; K ===

* [[Ada Programming/Libraries/Ada.Characters.Latin 9|Ada.Characters.Latin_9]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Characters.Wide Latin 1|Ada.Characters.Wide_Latin_1]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Characters.Wide Latin 9|Ada.Characters.Wide_Latin_9]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Characters.Wide Wide Latin 1|Ada.Characters.Wide_Wide_Latin_1]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Characters.Wide Wide Latin 9|Ada.Characters.Wide_Wide_Latin_9]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Command Line.Environment|Ada.Command_Line.Environment]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Command Line.Remove|Ada.Command_Line.Remove]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Direct IO.C Streams|Ada.Direct_IO.C_Streams]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Exceptions.Is Null Occurrence|Ada.Exceptions.Is_Null_Occurrence]] &lt;small&gt;(GNAT child function)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Exceptions.Traceback|Ada.Exceptions.Traceback]] &lt;small&gt;(GNAT)&lt;/small&gt;

=== L &amp;ndash; Q ===

* [[Ada Programming/Libraries/Ada.Long Float Text IO|Ada.Long_Float_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Long Float Wide Text IO|Ada.Long_Float_Wide_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Long Integer Text IO|Ada.Long_Integer_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Long Integer Wide Text IO|Ada.Long_Integer_Wide_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Long Long Float Text IO|Ada.Long_Long_Float_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Long Long Float Wide Text IO|Ada.Long_Long_Float_Wide_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Long Long Integer Text IO|Ada.Long_Long_Integer_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Long Long Integer Wide Text IO|Ada.Long_Long_Integer_Wide_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Long Complex Elementary Functions|Ada.Numerics.Long_Complex_Elementary_Functions]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Long Complex Types|Ada.Numerics.Long_Complex_Types]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Long Elementary Functions|Ada.Numerics.Long_Elementary_Functions]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Long Long Complex Elementary Functions|Ada.Numerics.Long_Long_Complex_Elementary_Functions]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Long Long Complex Types|Ada.Numerics.Long_Long_Complex_Types]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Long Long Elementary Functions|Ada.Numerics.Long_Long_Elementary_Functions]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Short Complex Elementary Functions|Ada.Numerics.Short_Complex_Elementary_Functions]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Short Complex Types|Ada.Numerics.Short_Complex_Types]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Numerics.Short Elementary Functions|Ada.Numerics.Short_Elementary_Functions]] &lt;small&gt;(GNAT)&lt;/small&gt;

=== R &amp;ndash; Z ===

* [[Ada Programming/Libraries/Ada.Sequential IO.C Streams|Ada.Sequential_IO.C_Streams]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Short Float Text IO|Ada.Short_Float_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Short Float Wide Text IO|Ada.Short_Float_Wide_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Short Integer Text IO|Ada.Short_Integer_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Short Integer Wide Text IO|Ada.Short_Integer_Wide_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Short Short Integer Text IO|Ada.Short_Short_Integer_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Short Short Integer Wide Text IO|Ada.Short_Short_Integer_Wide_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Streams.Stream IO.C Streams|Ada.Streams.Stream_IO.C_Streams]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Unbounded.Text IO|Ada.Strings.Unbounded.Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Unbounded.Wide Text IO|Ada.Strings.Wide_Unbounded.Wide_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Strings.Wide Wide Unbounded.Wide Wide Text IO|Ada.Strings.Wide_Wide_Unbounded.Wide_Wide_Text_IO]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Text IO.C Streams|Ada.Text_IO.C_Streams]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Text IO.C Streams|Ada.Wide_Text_IO.C_Streams]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Ada.Wide Wide Text IO.C Streams|Ada.Wide_Wide_Text_IO.C_Streams]] &lt;small&gt;(GNAT)&lt;/small&gt;

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]
* [[Ada Programming/Libraries/Standard]]
* [[Ada Programming/Libraries/System]]
* [[Ada Programming/Libraries/Interfaces]]

=== Ada Reference Manual ===

{{Ada/RM2|A|2|The Package Ada}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Ada]]
[[{{BOOKCATEGORY|Ada Programming}}/Ada 2005 feature|Ada]]
&lt;/noinclude&gt;</text>
      <sha1>o6ox041ssw68zb3a64q4n53cc9sftde</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/Container</title>
    <ns>0</ns>
    <id>22258</id>
    <revision>
      <id>3211595</id>
      <parentid>2320829</parentid>
      <timestamp>2017-05-01T17:04:24Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1267" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|Container}}
__TOC__&lt;/noinclude&gt;

The following Libraries help you store and manage objects inside container classes:

; [[Ada Programming/Libraries/Container/Booch|Booch Components]] : the most complete of all container class libraries &lt;small&gt;(at least when used with [[Ada Programming/Libraries/MultiPurpose/AdaCL|AdaCL, Ada Class Library]])&lt;/small&gt;.
; [[Ada Programming/Libraries/MultiPurpose/AdaCL|AdaCL, Ada Class Library]] : A [[Ada Programming/Libraries/Container/Booch|Booch Components]] extension pack for storing indefinite objects.
; [[Ada Programming/Libraries/Container/Charles|Charles]] : Build on the C++ STL and therefore very easy to learn for C++ developers.
; [[Ada Programming/Libraries/Container/AI302|AI302]] : Proof of concept for [[Ada Programming/Libraries/Ada.Containers|Ada.Containers]]
; [[Ada Programming/Libraries/Ada.Containers|Ada.Containers]] : {{Ada/2005|Container}}
; [[Ada Programming/Libraries/SAL|Stephe's Ada Library]] : dynamic arrays, lists, trees

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]

=== Ada Reference Manual ===

* {{Ada/2005/RM3|A|18|1|The Package Containers}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Container]]
&lt;/noinclude&gt;</text>
      <sha1>ppiz7mhwin3ke7dktdp7x6x2x9mxi52</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/Database</title>
    <ns>0</ns>
    <id>22256</id>
    <revision>
      <id>3508900</id>
      <parentid>3508898</parentid>
      <timestamp>2019-01-10T16:34:35Z</timestamp>
      <contributor>
        <ip>62.242.41.180</ip>
      </contributor>
      <comment>SOCI-Ada link update</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3498" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|Database}}
__TOC__&lt;/noinclude&gt;

The following libraries help you in Database programming:

{| class="wikitable sortable"
! Library
! License
! Interbase Firebird
! MySQL
! ODBC
! Oracle
! PostgreSQL
! SQLite 3
! Sybase
! Other database
! Binary packages
! Notes
|-
| [http://directory.fsf.org/wiki/APQ APQ]
| GMGPL
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
| [http://packages.qa.debian.org/a/apq.html Debian]
| Thread-safe connection pools
|-
| [http://gnade.sourceforge.net GNADE (GNat Ada Database Environment)]
| GMGPL
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | 3.x, 4.x
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! | &amp;mdash;
| [http://packages.qa.debian.org/g/gnade.html Debian]
| Embedded SQL preprocessor
|-
| [http://repo.or.cz/w/gnadelite.git gnadelite]
| ?
| ?
| ?
| ?
| ?
| ?
 ! style="background:#C3FDB8" | Yes
| ?
| ?
| ?
| 
|-
| [http://github.com/AdaCore/gnatcoll-db GNATColl.DB]
| GPL/GMGPL
 ! | &amp;mdash;
 ! | &amp;mdash;
 ! | &amp;mdash;
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! | &amp;mdash;
| ?
| gnatcoll_db2ada generates thick Ada bindings to a specified database schema. Requires Ada 2005.
|-
| [[Ada Programming/Libraries/Database/GWindows|GWindows]]
| ?
| ?
| ?
 ! style="background:#C3FDB8" | Yes
| ?
| ?
| ?
| ?
| ?
| ?
| Windows only?
|-
| [http://forge.ada-ru.org/matreshka/wiki Matreshka SQL]
| BSD
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! | &amp;mdash;
| [http://www.opensuse.org OpenSUSE], [http://www.fedoraproject.org Fedora]
|
|-
| [http://pobry.blogspot.fr/p/ada-contributions.html ODBC]
| GPL
| ?
| ?
 ! style="background:#C3FDB8" | Yes
| ?
| ?
| ?
| ?
| ?
| none
| Windows only. Depends on Win32Ada. Very simple.
|-
| [[Ada_Programming/Libraries/GUI/QtAda| QtAda (QtSql package)]]
| GPL/GMGPL
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
| IBM DB/2, SQLite2
| Microsoft Windows
| Binding to Qt: requires C++
|-
| [http://www.dmitry-kazakov.de/ada/components.htm#SQLite Simple Components for Ada]
| GMGPL
 ! | &amp;mdash;
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! | &amp;mdash;
| Fedora, Debian
| SQLite bindings are intended for static linking with the SQLite3 amalgation. ODBC bindings support 32- and 64-bit platforms
|-
| [http://soci.sourceforge.net/doc/3.2/languages/ada/index.html SOCI-Ada]
| Boost
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! | &amp;mdash;
 ! | &amp;mdash;
| ?
| Requires C++.
|-
| [http://coreland.ath.cx/code/sqlite3-ada SQLite3-Ada]
| Public domain
 ! | &amp;mdash;
 ! | &amp;mdash;
 ! | &amp;mdash;
 ! | &amp;mdash;
 ! | &amp;mdash;
 ! style="background:#C3FDB8" | Yes
 ! | &amp;mdash;
 ! | &amp;mdash;
| ?
| 
|}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Database]]
&lt;/noinclude&gt;</text>
      <sha1>bvd02m0pf5mpm94gzo60e568porgll3</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/Distributed</title>
    <ns>0</ns>
    <id>22255</id>
    <revision>
      <id>3651569</id>
      <parentid>3651448</parentid>
      <timestamp>2020-01-08T17:13:17Z</timestamp>
      <contributor>
        <username>Mrjulesd</username>
        <id>1779740</id>
      </contributor>
      <comment>Rejected the last text change (by [[Special:Contributions/159.146.45.8|159.146.45.8]]) and restored revision 3250197 by PokestarFan</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="910" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|Distributed}}
__TOC__&lt;/noinclude&gt;

The following Libraries help you in Distributed programming:

; [[Ada Programming/Libraries/Distributed/GLADE|GLADE]] : A full implementation of the Ada  [http://www.adaic.org/standards/95lrm/html/RM-E.html Annex E: Distributed Systems]
; [[Ada Programming/Libraries/Distributed/PolyORB|PolyORB]] : A [[Programming:CORBA|CORBA]] and [http://www.adaic.org/standards/95lrm/html/RM-E.html Annex E: Distributed Systems] implementation.
; [[Ada Programming/Libraries/MultiPurpose/Matreshka|Matreshka]] : An implementation of SOAP and WS-Security (Simple Object Access Protocol)
== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]
* [[Programming:CORBA]]

=== Ada Reference Manual ===

* {{Ada/RMA1|E| (normative) Distributed Systems}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Database]]
&lt;/noinclude&gt;</text>
      <sha1>6fbq3dl76mt89if93hp7hbqc03h1nzj</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/GNAT</title>
    <ns>0</ns>
    <id>17899</id>
    <revision>
      <id>3250199</id>
      <parentid>3211619</parentid>
      <timestamp>2017-07-31T00:27:29Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* Child packages */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5254" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|GNAT}}
__TOC__&lt;/noinclude&gt;

The GNAT package hierarchy defines several units for general purpose programming provided by the GNAT compiler. It is distributed along with the compiler and uses the same license.

[http://sourceforge.net/projects/gnat4oa GNAT-4-ObjectAda] is a project for porting the GNAT library to the ObjectAda compiler.

== Child packages ==


* [[Ada Programming/Libraries/GNAT.Array Split|GNAT.Array_Split]]
* [[Ada Programming/Libraries/GNAT.AWK|GNAT.AWK]]
* [[Ada Programming/Libraries/GNAT.Bounded Buffers|GNAT.Bounded_Buffers]]
* [[Ada Programming/Libraries/GNAT.Bounded Mailboxes|GNAT.Bounded_Mailboxes]]
* [[Ada Programming/Libraries/GNAT.Bubble Sort|GNAT.Bubble_Sort]]
* [[Ada Programming/Libraries/GNAT.Bubble Sort A|GNAT.Bubble_Sort_A]]
* [[Ada Programming/Libraries/GNAT.Bubble Sort G|GNAT.Bubble_Sort_G]]
* [[Ada Programming/Libraries/GNAT.Calendar|GNAT.Calendar]]
** [[Ada Programming/Libraries/GNAT.Calendar.Time IO|GNAT.Calendar.Time_IO]]
* [[Ada Programming/Libraries/GNAT.Case Util|GNAT.Case_Util]]
* [[Ada Programming/Libraries/GNAT.CGI|GNAT.CGI]]
** [[Ada Programming/Libraries/GNAT.CGI.Cookie|GNAT.CGI.Cookie]]
** [[Ada Programming/Libraries/GNAT.CGI.Debug|GNAT.CGI.Debug]]
* [[Ada Programming/Libraries/GNAT.Command Line|GNAT.Command_Line]]
* [[Ada Programming/Libraries/GNAT.Compiler Version|GNAT.Compiler_Version]]
* [[Ada Programming/Libraries/GNAT.CRC32|GNAT.CRC32]]
* [[Ada Programming/Libraries/GNAT.Ctrl C|GNAT.Ctrl_C]]
* [[Ada Programming/Libraries/GNAT.Current Exception|GNAT.Current_Exception]]
* [[Ada Programming/Libraries/GNAT.Debug Pools|GNAT.Debug_Pools]]
* [[Ada Programming/Libraries/GNAT.Debug Utilities|GNAT.Debug_Utilities]]
* [[Ada Programming/Libraries/GNAT.Directory Operations|GNAT.Directory_Operations]]
** [[Ada Programming/Libraries/GNAT.Directory Operations.Iteration|GNAT.Directory_Operations.Iteration]]
* [[Ada Programming/Libraries/GNAT.Dynamic HTables|GNAT.Dynamic_HTables]]
* [[Ada Programming/Libraries/GNAT.Dynamic Tables|GNAT.Dynamic_Tables]]
* [[Ada Programming/Libraries/GNAT.Exception Actions|GNAT.Exception_Actions]]
* [[Ada Programming/Libraries/GNAT.Exceptions|GNAT.Exceptions]]
* [[Ada Programming/Libraries/GNAT.Exception Traces|GNAT.Exception_Traces]]
* [[Ada Programming/Libraries/GNAT.Expect|GNAT.Expect]]
* [[Ada Programming/Libraries/GNAT.Float Control|GNAT.Float_Control]]
* [[Ada Programming/Libraries/GNAT.Heap Sort|GNAT.Heap_Sort]]
* [[Ada Programming/Libraries/GNAT.Heap Sort A|GNAT.Heap_Sort_A]]
* [[Ada Programming/Libraries/GNAT.Heap Sort G|GNAT.Heap_Sort_G]]
* [[Ada Programming/Libraries/GNAT.HTable|GNAT.HTable]]
* [[Ada Programming/Libraries/GNAT.IO|GNAT.IO]]
* [[Ada Programming/Libraries/GNAT.IO Aux|GNAT.IO_Aux]]
* [[Ada Programming/Libraries/GNAT.Lock Files|GNAT.Lock_Files]]
* [[Ada Programming/Libraries/GNAT.MD5|GNAT.MD5]]
* [[Ada Programming/Libraries/GNAT.Memory Dump|GNAT.Memory_Dump]]
* [[Ada Programming/Libraries/GNAT.Most Recent Exception|GNAT.Most_Recent_Exception]]
* [[Ada Programming/Libraries/GNAT.OS Lib|GNAT.OS_Lib]]
* [[Ada Programming/Libraries/GNAT.Perfect Hash Generators|GNAT.Perfect_Hash_Generators]]
* [[Ada Programming/Libraries/GNAT.Regexp|GNAT.Regexp]]
* [[Ada Programming/Libraries/GNAT.Registry|GNAT.Registry]]
* [[Ada Programming/Libraries/GNAT.Regpat|GNAT.Regpat]]
* [[Ada Programming/Libraries/GNAT.Secondary Stack Info|GNAT.Secondary_Stack_Info]]
* [[Ada Programming/Libraries/GNAT.Semaphores|GNAT.Semaphores]]
* [[Ada Programming/Libraries/GNAT.Signals|GNAT.Signals]]
* [[Ada Programming/Libraries/GNAT.Sockets|GNAT.Sockets]] ([[Ada Programming/Libraries/GNAT.Sockets examples|GNAT.Sockets examples]])
** [[Ada Programming/Libraries/GNAT.Sockets.Constants|GNAT.Sockets.Constants]]
** [[Ada Programming/Libraries/GNAT.Sockets.Linker Options|GNAT.Sockets.Linker_Options]]
** [[Ada Programming/Libraries/GNAT.Sockets.Thin|GNAT.Sockets.Thin]]
* [[Ada Programming/Libraries/GNAT.Source Info|GNAT.Source_Info]]
* [[Ada Programming/Libraries/GNAT.Spelling Checker|GNAT.Spelling_Checker]]
* [[Ada Programming/Libraries/GNAT.Spitbol|GNAT.Spitbol]]
** [[Ada Programming/Libraries/GNAT.Spitbol.Patterns|GNAT.Spitbol.Patterns]]
** [[Ada Programming/Libraries/GNAT.Spitbol.Table Boolean new|GNAT.Spitbol.Table_Boolean new]]
** [[Ada Programming/Libraries/GNAT.Spitbol.Table Integer|GNAT.Spitbol.Table_Integer]]
** [[Ada Programming/Libraries/GNAT.Spitbol.Table VString new|GNAT.Spitbol.Table_VString new]]
* [[Ada Programming/Libraries/GNAT.Strings|GNAT.Strings]]
* [[Ada Programming/Libraries/GNAT.String Split|GNAT.String_Split]]
* [[Ada Programming/Libraries/GNAT.Table|GNAT.Table]]
* [[Ada Programming/Libraries/GNAT.Task Lock|GNAT.Task_Lock]]
* [[Ada Programming/Libraries/GNAT.Threads|GNAT.Threads]]
* [[Ada Programming/Libraries/GNAT.Traceback|GNAT.Traceback]]
** [[Ada Programming/Libraries/GNAT.Traceback.Symbolic|GNAT.Traceback.Symbolic]]
* [[Ada Programming/Libraries/GNAT.Wide String Split|GNAT.Wide_String_Split]]

== See also ==

=== External links ===

* [http://gcc.gnu.org/onlinedocs/gnat_rm/The-GNAT-Library.html The GNAT Library]

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|GNAT]]
&lt;/noinclude&gt;</text>
      <sha1>lfxqemle9x1n8po1ko19ifkxi9d4wdc</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/GUI</title>
    <ns>0</ns>
    <id>29684</id>
    <revision>
      <id>3250203</id>
      <parentid>3211647</parentid>
      <timestamp>2017-07-31T00:27:36Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1659" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|GUI}}
__TOC__&lt;/noinclude&gt;

The following libraries can be used to make Graphical User Interfaces:
; [http://www.rrsoftware.com/html/prodinf/claw/claw.htm CLAW] : Commercial GUI toolkit for Windows. [http://www.adapower.com/adapower1/claw/ Introductory Edition] is distributed under [[w:GMGPL|GMGPL]].
; [[Ada Programming/Libraries/GUI/GtkAda|GtkAda]] : Binding to the popular GTK+ toolkit.
; [[Ada Programming/Libraries/GUI/GWindows|GWindows]] : RAD GUI Development Framework for Windows.
; [[Ada Programming/Libraries/GUI/Qt4Ada|Qt4Ada]] : An Ada2005 binding to Qt4. Under CeCILL license V2.
; [[Ada Programming/Libraries/GUI/QtAda|QtAda]] : An Ada2005 binding to the Qt libraries and associated tools. Under GPL and [[w:GMGPL|GMGPL]] (commercially supported) licenses.
; [http://wiki.libagar.org/wiki/Ada_bindings libAgar] : Ada bindings for the [http://libagar.org/ libagar] OpenGL GUI library (BSD license).
; [http://sourceforge.net/projects/tcladashell/ TASH] : TclAdaSHell, An Ada binding to Tcl/Tk. GPL with "Linking Exception".

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]

=== Ada Reference Manual ===

—does not apply --

=== External links ===
* [http://commons.ada.cx/Category:GUI AdaCommons - GUI Category]
* [http://www.adapower.com/index.php?Command=Class&amp;ClassID=AdaGUI&amp;Title=Ada+GUI adapower.com - Links to tools and Bindings for GUI Applications]
* [http://www.adapower.com/index.php?Command=Class&amp;ClassID=GUIExamples&amp;Title=GUI+Examples adapower.com - Examples of programming GUIs in Ada] 

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|GUI]]
&lt;/noinclude&gt;</text>
      <sha1>q9wguvx6geu9lt4xt3nu2et8l5ymnh4</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/IO</title>
    <ns>0</ns>
    <id>35183</id>
    <revision>
      <id>3250207</id>
      <parentid>3211657</parentid>
      <timestamp>2017-07-31T00:27:40Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* Ada Reference Manual */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="975" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|IO}}
__TOC__&lt;/noinclude&gt;

The following libraries help you when doing [[Ada Programming/Input Output|input/output]]:

; [[Ada Programming/Libraries/MultiPurpose/AdaCL|AdaCL, Ada Class Library]] : A multipurpose library featuring filtering of text files, string I/O, command line parsing, etc.
; [[Ada Programming/Libraries/IO/XML/Ada|XML/Ada]] : XML and Unicode support.
; [[Ada Programming/Libraries/MultiPurpose/Matreshka|Matreshka]] : SAX-style XML reader and writer. Supports XML1.0 (Fifth Edition), XML1.1 (Second Edition), Namespaces in XML and XML Base Specifications. Strings, files and sockets can be used as input source in both blocking and non-blocking modes. Full Unicode support and many text codecs is provided also.
== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]

=== Ada Reference Manual ===

—does not apply --

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|IO]]
&lt;/noinclude&gt;</text>
      <sha1>f7rahqmt3445zb5d48a699pcos25ran</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/Interfaces</title>
    <ns>0</ns>
    <id>17897</id>
    <revision>
      <id>3496300</id>
      <parentid>3491998</parentid>
      <timestamp>2018-12-07T12:04:28Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <comment>Internal links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5273" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Packages|Interfaces}}
__TOC__&lt;/noinclude&gt;

The Interfaces package helps in interfacing with other programming languages. Ada is one of the few languages where interfacing with other languages is part of the language standard. The language standard defines the interfaces for [[C Programming|C]], [[COBOL|Cobol]] and [[Programming:Fortran|Fortran]]. Of course any implementation might define further interfaces &amp;mdash; [[Ada Programming/GNAT|GNAT]], for example, defines an interface to [[C++ Programming|C++]].

Interfacing with other languages is actually provided by {{Ada/pragma|Export}}, {{Ada/pragma|Import}} and {{Ada/pragma|Convention}}.

In Ada 2012 these clauses have an alternate form using [[Ada Programming/Aspects|"with" in place of "pragma."]] 
 
== Example ==

As an example, here is a complete program that queries the terminfo (terminal information) database on Unix systems to get the dimensions of the current terminal window.  It interfaces with C language functions in the ncurses package, so it must be linked with ncurses (e.g. with the -lncurses switch) when it is compiled.

  {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
  {{Ada/kw|with}} {{Ada/package|Interfaces|C}};
  {{Ada/kw|with}} {{Ada/package|Interfaces|C|Pointers}};
  {{Ada/kw|with}} {{Ada/package|Interfaces|C|Strings}};
  
  {{Ada/kw|procedure}} ctest {{Ada/kw|is}}
    use Interfaces.C;
  
    {{Ada/kw|type}} int_array {{Ada/kw|is}} {{Ada/kw|array (size_t {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} {{Ada/kw|aliased}} int {{Ada/kw|with}} Pack;
  
    {{Ada/kw|package}} Int_Pointers {{Ada/kw|is}} {{Ada/kw|new}} Pointers (
      Index              =&gt; size_t,
      Element            =&gt; int,
      Element_Array      =&gt; int_array,
      Default_Terminator =&gt; 0
    );
  
    {{Ada/--|int setupterm (char *term, int fildes, int *errret);}}
    {{Ada/kw|function}} Get_Terminal_Data (
      terminal           : Interfaces.C.Strings.chars_ptr; 
      file_descriptor    : int; 
      error_code_pointer : Int_Pointers.Pointer
    ) {{Ada/kw|return}} int
    {{Ada/kw|with}} Import =&gt; True, Convention =&gt; C, External_Name =&gt; "setupterm";
  
    {{Ada/--|int tigetnum (char *name);}}
    {{Ada/kw|function}} Get_Numeric_Value (name : Interfaces.C.Strings.chars_ptr) {{Ada/kw|return}} int
    {{Ada/kw|with}} Import =&gt; True, Convention =&gt; C, External_Name =&gt; "tigetnum";
  
    {{Ada/kw|function}} Format (value : int) {{Ada/kw|return}} String {{Ada/kw|is}}
      result : String := int'Image (value);
    {{Ada/kw|begin}}
      {{Ada/kw|return}} (if result(1) = ' ' then result(2..result'Last) else result);
    {{Ada/kw|end}} Format;
  
    error_code         : {{Ada/kw|aliased}} int;
    error_code_pointer : Int_Pointers.Pointer := error_code'Access;
  
  {{Ada/kw|begin}}
    {{Ada/kw|if}} Get_Terminal_Data (Interfaces.C.Strings.Null_Ptr, 1, error_code_pointer) = 0 {{Ada/kw|then}}
      Ada.Text_IO.Put_Line (
        "Window size: " &amp;
        Format (Get_Numeric_Value (Interfaces.C.Strings.New_String ("cols"))) &amp; "x" &amp; 
        Format (Get_Numeric_Value (Interfaces.C.Strings.New_String ("lines")))
      );
    {{Ada/kw|else}}
      Ada.Text_IO.Put_Line ("Can't access terminal data");
    {{Ada/kw|end}} {{Ada/kw|if}};
  {{Ada/kw|end}} ctest;

== Child Packages ==

* [[Ada Programming/Libraries/Interfaces.C|Interfaces.C]]
** [[Ada Programming/Libraries/Interfaces.C.Extensions|Interfaces.C.Extensions]] &lt;small&gt;(GNAT)&lt;/small&gt;
** [[Ada Programming/Libraries/Interfaces.C.Pointers|Interfaces.C.Pointers]]
** [[Ada Programming/Libraries/Interfaces.C.Streams|Interfaces.C.Streams]] &lt;small&gt;(GNAT)&lt;/small&gt;
** [[Ada Programming/Libraries/Interfaces.C.Strings|Interfaces.C.Strings]]
* [[Ada Programming/Libraries/Interfaces.CPP|Interfaces.CPP]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Interfaces.COBOL|Interfaces.COBOL]]
* [[Ada Programming/Libraries/Interfaces.Fortran|Interfaces.Fortran]]
* [[Ada Programming/Libraries/Interfaces.OS2Lib|Interfaces.OS2Lib]] &lt;small&gt;(GNAT, OS/2)&lt;/small&gt;
** [[Ada Programming/Libraries/Interfaces.OS2Lib.Errors|Interfaces.OS2Lib.Errors]] &lt;small&gt;(GNAT, OS/2)&lt;/small&gt;
** [[Ada Programming/Libraries/Interfaces.OS2Lib.Synchronization|Interfaces.OS2Lib.Synchronization]] &lt;small&gt;(GNAT, OS/2)&lt;/small&gt;
** [[Ada Programming/Libraries/Interfaces.OS2Lib.Threads|Interfaces.OS2Lib.Threads]] &lt;small&gt;(GNAT, OS/2)&lt;/small&gt;
* [[Ada Programming/Libraries/Interfaces.Packed Decimal|Interfaces.Packed_Decimal]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Libraries/Interfaces.VxWorks|Interfaces.VxWorks]] &lt;small&gt;(GNAT, VxWorks)&lt;/small&gt;
** [[Ada Programming/Libraries/Interfaces.VxWorks.IO|Interfaces.VxWorks.IO]] &lt;small&gt;(GNAT, VxWorks)&lt;/small&gt;

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]
* [[Ada Programming/Libraries/Standard]]
* [[Ada Programming/Libraries/Ada]]
* [[Ada Programming/Libraries/System]]

=== Ada Reference Manual ===

==== Ada 95 ====

* {{Ada/RMA1|B|Interface to Other Languages}}
* {{Ada/RM2|B|2|The Package Interfaces}}

==== Ada 2005 ====

* {{Ada/2005/RMA1|B|Interface to Other Languages}}
* {{Ada/2005/RM2|B|2|The Package Interfaces}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Interfaces]]


[[es:Programación en Ada/Unidades predefinidas/Interfaces]]
&lt;/noinclude&gt;</text>
      <sha1>ovk637bqv8z2xxhj0l6y9r1s3c9x0we</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/MultiPurpose</title>
    <ns>0</ns>
    <id>22259</id>
    <revision>
      <id>3250212</id>
      <parentid>3211727</parentid>
      <timestamp>2017-07-31T00:27:46Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1144" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|MultiPurpose}}
__TOC__&lt;/noinclude&gt;

; [[Ada Programming/Libraries/MultiPurpose/AdaCL|AdaCL, Ada Class Library]] : Filtering of text files, string tools, process control, command line parsing, CGI, garbage collector, components.
; [[Ada Programming/Libraries/MultiPurpose/Matreshka|Matreshka]] : Core components for information system development: Unicode support (case conversions and folding, collation, normalization); regular expression engine; XML processor; FastCGI, SQL database access.
; [[Ada Programming/Libraries/MultiPurpose/Paraffin|paraffin]]: "A suite of Ada 2005 generics to facilitate iterative and recursive parallelism".&lt;ref&gt;{{cite web
|url=http://sourceforge.net/projects/paraffin/
|title=Iterative and recursive parallelism generics for Ada 2005
|accessdate=2012-08-28}}&lt;/ref&gt; Features include load-balancing and monitoring of stacks.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]

=== Ada Reference Manual ===

—does not apply --

=== References ===

&lt;references/&gt;

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|MultiPurpose]]
&lt;/noinclude&gt;</text>
      <sha1>95tl2kwjisa52ns5r9tzhgvhnf6icb8</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/Standard</title>
    <ns>0</ns>
    <id>17443</id>
    <revision>
      <id>3211753</id>
      <parentid>1647426</parentid>
      <timestamp>2017-05-01T23:11:59Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4027" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|Standard}}
__TOC__&lt;/noinclude&gt;

The '''Standard''' package is implicit. This means two things:

# You do not need to {{Ada/kw|with}} or {{Ada/kw|use}} the package, in fact you cannot &lt;small&gt;(see below)&lt;/small&gt;. It's always available &lt;small&gt;(except where hidden by a homograph, RM {{Ada/RM2|8|3|(8)}})&lt;/small&gt;.
# '''Standard''' may contain constructs which are not quite legal Ada &lt;small&gt;(like the definitions of &lt;tt&gt;Character&lt;/tt&gt; and &lt;tt&gt;Wide_Character&lt;/tt&gt;)&lt;/small&gt;.

A {{Ada/kw|with}} clause mentioning &lt;tt&gt;Standard&lt;/tt&gt; references a user-defined package &lt;tt&gt;Standard&lt;/tt&gt; that hides the predefined one. So do not do this. However any library unit hidden by a homograph can be made visible again by qualifying its name with &lt;tt&gt;Standard&lt;/tt&gt;, like e.g. &lt;tt&gt;Standard.My_Unit&lt;/tt&gt;.

== Implementation ==

Since the package &lt;tt&gt;Standard&lt;/tt&gt; is very important for portability, here are some examples for various compilers:

* The package [[/RM|Standard]] from [[w:ISO 8652|ISO 8652]].
* The package [[/GNAT|Standard]] from [[w:GNAT|GNAT]].
* The package [[/Apex|Standard]] from [http://www-306.ibm.com/software/awdtools/developer/ada Rational Apex].
* The package [[/ObjectAda|Standard]] from [http://www.aonix.com/objectada.html ObjectAda]
* The [[/AppletMagic|Standard]] definitions for [http://www.sofcheck.com/products/adamagic.html#appletmagic AppletMagic]

== Portability ==

The only mandatory types in Standard are Boolean, Integer and its subtypes, Float, Character, Wide_Character, Wide_Wide_Character, String, Wide_String, Wide_Wide_String, Duration. There is an implementation permission in RM {{Ada/RM2|A|1|(51)}} that there may be more integer and floating point types and an implementation advice RM {{Ada/RM2|A|1|(52)}} about the names to be chosen. There even is no requirement that those additional types must have different sizes. So it is e.g. legal for an implementation to provide two types Long_Integer and Long_Long_Integer which both have the same range and size.

Note that the ranges and sizes of these types can be different in every platform &lt;small&gt;(except of course for Boolean and [[Wide_]Wide_]Character)&lt;/small&gt;. There is an implementation requirement that the size of type Integer is at least 16 bits, and that of Long_Integer at least 32 bits (if present) RM {{Ada/RM3|3|5|4|(21..22)}}. So if you want full portability of your types, do not use types from Standard &lt;small&gt;(except where you must, see below)&lt;/small&gt;, rather define you own types. A compiler will reject any type declaration whose range it cannot satisfy.

This means e.g. if you need a 64-bit type and find that with your current implementation Standard.Long_Long_Integer is such a type, when porting your program to another implementation, this type may be shorter, but the compiler will not tell you - and your program will most probably crash. However, when you define your own type like

 {{Ada/kw|type}} My_Integer_64 {{Ada/kw|is}} {{Ada/kw|range}} -(2**63) .. +(2**63 - 1);

then, when porting to an implementation that cannot satisfy this range, the compiler will reject your program.

The type Integer is mandatory when you use [[wide] wide] strings or exponentiation x**i. This is why some projects even define their own strings, but this means throwing out the child with the bath tub. Using Integer with strings and exponentiation will normally not lead to portability issues.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries#Predefined Language Libraries]]

=== Ada Reference Manual ===

* {{Ada/RM2|A|1|The Package Standard}}
* {{Ada/RM3|3|5|4|Integer Types}}
* {{Ada/RM3|3|5|7|Floating Point Types}}

=== Ada Quality and Style Guide ===

* {{Ada/SG3|7|1|1|Obsolescent Features}} &amp;ndash; Avoid using the package ASCII
* {{Ada/SG3|7|2|1|Predefined Numeric Types}} &amp;ndash; Avoid the predefined numeric types

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Standard]]


[[es:Programación en Ada/Unidades predefinidas/Standard]]
&lt;/noinclude&gt;</text>
      <sha1>3ru4je50fkb7479f5mrcfrrqhs1gub2</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/System</title>
    <ns>0</ns>
    <id>17900</id>
    <revision>
      <id>3250220</id>
      <parentid>3211761</parentid>
      <timestamp>2017-07-31T00:27:55Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17887" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|System}}
__TOC__&lt;noinclude&gt;

== Description ==

The '''System''' package is a standard library package provided with each Ada implementation. It includes implementation and system configuration-dependent definitions. The System package contains a standard set of language-defined (but implementation-dependent) types and named numbers.

=== Types ===

* Name
* Address
* Priority (also Interrupt_Priority and Any_Priority since Ada&amp;nbsp;95)
* Bit_Order (since Ada&amp;nbsp;95)

=== Constants ===

The following named numbers may be set by pragmas. These pragmas may only be used at the start of compilation:
* System_Name
* Storage_Unit
* Memory_Size

The following named numbers are set by the implementation:

* Null_Address (since Ada&amp;nbsp;95)
* Default_Priority (since Ada&amp;nbsp;95)
* Default_Bit_Order (since Ada&amp;nbsp;95)
* MIN_INT &amp;mdash; the smallest value of all predefined integer types (negative).
* MAX_INT &amp;mdash; the largest value of all predefined integer types (positive).
* MAX_BINARY_MODULUS &amp;mdash; the largest power of allowed as the modulus for modular types.
* MAX_NONBINARY_MODULUS &amp;mdash; the largest value allowed as the modulus for modular types. 
* MAX_BASE_DIGITS &amp;mdash; the largest number of significant decimal digits in a floating point declaration.
* MAX_DIGITS &amp;mdash; the largest number of significant decimal digits in a floating point declaration without a range specification. This value is at most as large as the previous one.
* MAX_MANTISSA &amp;mdash; the largest possible number of binary digits in the mantissa of fixed point values.
* FINE_DELTA &amp;mdash; The smallest delta allowed in a fixed point value (given a range constraint of -1.0 to 1.0).
* TICK &amp;mdash; the clock period (in seconds).

== Child packages ==

=== Standard System packages ===

The following six System packages are from the [[w:ISO 8652|ISO/IEC 8652:1995(E)]] standard.

* [[Ada Programming/Libraries/System|System]]
* [[Ada Programming/Libraries/System.Address To Access Conversions|System.Address_To_Access_Conversions]]
* [[Ada Programming/Libraries/System.Machine Code|System.Machine_Code]]
* [[Ada Programming/Libraries/System.RPC|System.RPC]]
* [[Ada Programming/Libraries/System.Storage Elements|System.Storage_Elements]]
* [[Ada Programming/Libraries/System.Storage Pools|System.Storage_Pools]]

=== GNAT System packages ===

* [[Ada Programming/Libraries/System.Address Image|System.Address_Image]]
* [[Ada Programming/Libraries/System.Assertions|System.Assertions]]
* [[Ada Programming/Libraries/System.Memory|System.Memory]]
* [[Ada Programming/Libraries/System.Partition Interface|System.Partition_Interface]]
* [[Ada Programming/Libraries/System.Task Info|System.Task_Info]]
* [[Ada Programming/Libraries/System.WCh Cnv|System.WCh_Cnv]]
* [[Ada Programming/Libraries/System.WCh Con|System.WCh_Con]] 

The following 200 odd packages form the GNAT runtime environment. They are mentioned here as a reference for advanced users. Normal GNAT users should ignore them because they are internal units of the runtime system.

* [[Ada Programming/Libraries/System.Address Operations|System.Address_Operations]]
* [[Ada Programming/Libraries/System.Arith 64|System.Arith_64]]
* [[Ada Programming/Libraries/System.AST Handling|System.AST_Handling]]
* [[Ada Programming/Libraries/System.Aux DEC|System.Aux_DEC]]
* [[Ada Programming/Libraries/System.Bit Ops|System.Bit_Ops]]
* [[Ada Programming/Libraries/System.Boolean Array Operations|System.Boolean_Array_Operations]]
* [[Ada Programming/Libraries/System.Compare Array Signed 8|System.Compare_Array_Signed_8]]
* [[Ada Programming/Libraries/System.Compare Array Unsigned 8|System.Compare_Array_Unsigned_8]]
* [[Ada Programming/Libraries/System.Compare Array Signed 16|System.Compare_Array_Signed_16]]
* [[Ada Programming/Libraries/System.Compare Array Signed 32|System.Compare_Array_Signed_32]]
* [[Ada Programming/Libraries/System.Compare Array Signed 64|System.Compare_Array_Signed_64]]
* [[Ada Programming/Libraries/System.Case Util|System.Case_Util]]
* [[Ada Programming/Libraries/System.Compare Array Unsigned 16|System.Compare_Array_Unsigned_16]]
* [[Ada Programming/Libraries/System.Compare Array Unsigned 32|System.Compare_Array_Unsigned_32]]
* [[Ada Programming/Libraries/System.Compare Array Unsigned 64|System.Compare_Array_Unsigned_64]]
* [[Ada Programming/Libraries/System.Checked Pools|System.Checked_Pools]]
* [[Ada Programming/Libraries/System.CRC32|System.CRC32]]
* [[Ada Programming/Libraries/System.CRTL|System.CRTL]]
* [[Ada Programming/Libraries/System.Direct IO|System.Direct_IO]]
* [[Ada Programming/Libraries/System.Error Reporting|System.Error_Reporting]]
* [[Ada Programming/Libraries/System.Exceptions|System.Exceptions]]
* [[Ada Programming/Libraries/System.Exception Table|System.Exception_Table]]
* [[Ada Programming/Libraries/System.Exn Int|System.Exn_Int]]
* [[Ada Programming/Libraries/System.Exn LLF|System.Exn_LLF]]
* [[Ada Programming/Libraries/System.Exn LLI|System.Exn_LLI]]
* [[Ada Programming/Libraries/System.Exp Int|System.Exp_Int]]
* [[Ada Programming/Libraries/System.Exp LLI|System.Exp_LLI]]
* [[Ada Programming/Libraries/System.Exp LLU|System.Exp_LLU]]
* [[Ada Programming/Libraries/System.Exp Mod|System.Exp_Mod]]
* [[Ada Programming/Libraries/System.Exp Uns|System.Exp_Uns]]
* [[Ada Programming/Libraries/System.Fat Flt|System.Fat_Flt]]
* [[Ada Programming/Libraries/System.Fat Gen|System.Fat_Gen]]
* [[Ada Programming/Libraries/System.Fat LFlt|System.Fat_LFlt]]
* [[Ada Programming/Libraries/System.Fat LLF|System.Fat_LLF]]
* [[Ada Programming/Libraries/System.Fat SFlt|System.Fat_SFlt]]
* [[Ada Programming/Libraries/System.File Control Block|System.File_Control_Block]]
* [[Ada Programming/Libraries/System.File IO|System.File_IO]]
* [[Ada Programming/Libraries/System.Finalization Implementation|System.Finalization_Implementation]]
* [[Ada Programming/Libraries/System.Finalization Root|System.Finalization_Root]]
* [[Ada Programming/Libraries/System.Fore|System.Fore]]
* [[Ada Programming/Libraries/System.Generic Vector Operations|System.Generic_Vector_Operations]]
* [[Ada Programming/Libraries/System.Global Locks|System.Global_Locks]]
* [[Ada Programming/Libraries/System.HIE Back End|System.HIE_Back_End]]
* [[Ada Programming/Libraries/System.HTable|System.HTable]]
* [[Ada Programming/Libraries/System.Img BIU|System.Img_BIU]]
* [[Ada Programming/Libraries/System.Img Bool|System.Img_Bool]]
* [[Ada Programming/Libraries/System.Img Char|System.Img_Char]]
* [[Ada Programming/Libraries/System.Img Dec|System.Img_Dec]]
* [[Ada Programming/Libraries/System.Img Enum|System.Img_Enum]]
* [[Ada Programming/Libraries/System.Img Int|System.Img_Int]]
* [[Ada Programming/Libraries/System.Img LLB|System.Img_LLB]]
* [[Ada Programming/Libraries/System.Img LLD|System.Img_LLD]]
* [[Ada Programming/Libraries/System.Img LLI|System.Img_LLI]]
* [[Ada Programming/Libraries/System.Img LLU|System.Img_LLU]]
* [[Ada Programming/Libraries/System.Img LLW|System.Img_LLW]]
* [[Ada Programming/Libraries/System.Img Real|System.Img_Real]]
* [[Ada Programming/Libraries/System.Img Uns|System.Img_Uns]]
* [[Ada Programming/Libraries/System.Img WChar|System.Img_WChar]]
* [[Ada Programming/Libraries/System.Img WIU|System.Img_WIU]]
* [[Ada Programming/Libraries/System.Interrupt Management.Operations|System.Interrupt_Management.Operations]]
* [[Ada Programming/Libraries/System.Interrupts|System.Interrupts]]
* [[Ada Programming/Libraries/System.Interrupt Management|System.Interrupt_Management]]
* [[Ada Programming/Libraries/System.IO|System.IO]]
* [[Ada Programming/Libraries/System.Mantissa|System.Mantissa]]
* [[Ada Programming/Libraries/System.Machine State Operations|System.Machine_State_Operations]]
* [[Ada Programming/Libraries/System.Memory Copy|System.Memory_Copy]]
* [[Ada Programming/Libraries/System.OS Interface|System.OS_Interface]]
* [[Ada Programming/Libraries/System.OS Primitives|System.OS_Primitives]]
* [[Ada Programming/Libraries/System.Pack 03|System.Pack_03]]
* [[Ada Programming/Libraries/System.Pack 05|System.Pack_05]]
* [[Ada Programming/Libraries/System.Pack 06|System.Pack_06]]
* [[Ada Programming/Libraries/System.Pack 07|System.Pack_07]]
* [[Ada Programming/Libraries/System.Pack 09|System.Pack_09]]
* [[Ada Programming/Libraries/System.Pack 10|System.Pack_10]]
* [[Ada Programming/Libraries/System.Pack 11|System.Pack_11]]
* [[Ada Programming/Libraries/System.Pack 12|System.Pack_12]]
* [[Ada Programming/Libraries/System.Pack 13|System.Pack_13]]
* [[Ada Programming/Libraries/System.Pack 14|System.Pack_14]]
* [[Ada Programming/Libraries/System.Pack 15|System.Pack_15]]
* [[Ada Programming/Libraries/System.Pack 17|System.Pack_17]]
* [[Ada Programming/Libraries/System.Pack 18|System.Pack_18]]
* [[Ada Programming/Libraries/System.Pack 19|System.Pack_19]]
* [[Ada Programming/Libraries/System.Pack 20|System.Pack_20]]
* [[Ada Programming/Libraries/System.Pack 21|System.Pack_21]]
* [[Ada Programming/Libraries/System.Pack 22|System.Pack_22]]
* [[Ada Programming/Libraries/System.Pack 23|System.Pack_23]]
* [[Ada Programming/Libraries/System.Pack 24|System.Pack_24]]
* [[Ada Programming/Libraries/System.Pack 25|System.Pack_25]]
* [[Ada Programming/Libraries/System.Pack 26|System.Pack_26]]
* [[Ada Programming/Libraries/System.Pack 27|System.Pack_27]]
* [[Ada Programming/Libraries/System.Pack 28|System.Pack_28]]
* [[Ada Programming/Libraries/System.Pack 29|System.Pack_29]]
* [[Ada Programming/Libraries/System.Pack 30|System.Pack_30]]
* [[Ada Programming/Libraries/System.Pack 31|System.Pack_31]]
* [[Ada Programming/Libraries/System.Pack 33|System.Pack_33]]
* [[Ada Programming/Libraries/System.Pack 34|System.Pack_34]]
* [[Ada Programming/Libraries/System.Pack 35|System.Pack_35]]
* [[Ada Programming/Libraries/System.Pack 36|System.Pack_36]]
* [[Ada Programming/Libraries/System.Pack 37|System.Pack_37]]
* [[Ada Programming/Libraries/System.Pack 38|System.Pack_38]]
* [[Ada Programming/Libraries/System.Pack 39|System.Pack_39]]
* [[Ada Programming/Libraries/System.Pack 40|System.Pack_40]]
* [[Ada Programming/Libraries/System.Pack 41|System.Pack_41]]
* [[Ada Programming/Libraries/System.Pack 42|System.Pack_42]]
* [[Ada Programming/Libraries/System.Pack 43|System.Pack_43]]
* [[Ada Programming/Libraries/System.Pack 44|System.Pack_44]]
* [[Ada Programming/Libraries/System.Pack 45|System.Pack_45]]
* [[Ada Programming/Libraries/System.Pack 46|System.Pack_46]]
* [[Ada Programming/Libraries/System.Pack 47|System.Pack_47]]
* [[Ada Programming/Libraries/System.Pack 48|System.Pack_48]]
* [[Ada Programming/Libraries/System.Pack 49|System.Pack_49]]
* [[Ada Programming/Libraries/System.Pack 50|System.Pack_50]]
* [[Ada Programming/Libraries/System.Pack 51|System.Pack_51]]
* [[Ada Programming/Libraries/System.Pack 52|System.Pack_52]]
* [[Ada Programming/Libraries/System.Pack 53|System.Pack_53]]
* [[Ada Programming/Libraries/System.Pack 54|System.Pack_54]]
* [[Ada Programming/Libraries/System.Pack 55|System.Pack_55]]
* [[Ada Programming/Libraries/System.Pack 56|System.Pack_56]]
* [[Ada Programming/Libraries/System.Pack 57|System.Pack_57]]
* [[Ada Programming/Libraries/System.Pack 58|System.Pack_58]]
* [[Ada Programming/Libraries/System.Pack 59|System.Pack_59]]
* [[Ada Programming/Libraries/System.Pack 60|System.Pack_60]]
* [[Ada Programming/Libraries/System.Pack 61|System.Pack_61]]
* [[Ada Programming/Libraries/System.Pack 62|System.Pack_62]]
* [[Ada Programming/Libraries/System.Pack 63|System.Pack_63]]
* [[Ada Programming/Libraries/System.Parameters|System.Parameters]]
* [[Ada Programming/Libraries/System.Pool Global|System.Pool_Global]]
* [[Ada Programming/Libraries/System.Pool Local|System.Pool_Local]]
* [[Ada Programming/Libraries/System.Pool Size|System.Pool_Size]]
* [[Ada Programming/Libraries/System.Powten Table|System.Powten_Table]]
* [[Ada Programming/Libraries/System.Program Info|System.Program_Info]]
* [[Ada Programming/Libraries/System.Pure Exceptions|System.Pure_Exceptions]]
* [[Ada Programming/Libraries/System.Restrictions|System.Restrictions]]
* [[Ada Programming/Libraries/System.Rident|System.Rident]]
* [[Ada Programming/Libraries/System.Scalar Values|System.Scalar_Values]]
* [[Ada Programming/Libraries/System.Secondary Stack|System.Secondary_Stack]]
* [[Ada Programming/Libraries/System.Sequential IO|System.Sequential_IO]]
* [[Ada Programming/Libraries/System.Shared Storage|System.Shared_Storage]]
* [[Ada Programming/Libraries/System.Soft Links|System.Soft_Links]]
* [[Ada Programming/Libraries/System.Soft Links.Tasking|System.Soft_Links.Tasking]]
* [[Ada Programming/Libraries/System.String Ops Concat 3|System.String_Ops_Concat_3]]
* [[Ada Programming/Libraries/System.String Ops Concat 4|System.String_Ops_Concat_4]]
* [[Ada Programming/Libraries/System.String Ops Concat 5|System.String_Ops_Concat_5]]
* [[Ada Programming/Libraries/System.Stack Checking|System.Stack_Checking]]
* [[Ada Programming/Libraries/System.Standard Library|System.Standard_Library]]
* [[Ada Programming/Libraries/System.Stack Checking.Operations|System.Stack_Checking.Operations]]
* [[Ada Programming/Libraries/System.Stream Attributes|System.Stream_Attributes]]
* [[Ada Programming/Libraries/System.String Compare|System.String_Compare]]
* [[Ada Programming/Libraries/System.String Ops|System.String_Ops]]
* [[Ada Programming/Libraries/System.Tasking.Async Delays|System.Tasking.Async_Delays]]
* [[Ada Programming/Libraries/System.Tasking.Entry Calls|System.Tasking.Entry_Calls]]
* [[Ada Programming/Libraries/System.Tasking.Protected Objects|System.Tasking.Protected_Objects]]
* [[Ada Programming/Libraries/System.Task Primitives.Operations|System.Task_Primitives.Operations]]
* [[Ada Programming/Libraries/System.Tasking.Restricted.Stages|System.Tasking.Restricted.Stages]]
* [[Ada Programming/Libraries/System.Tasking.Debug|System.Tasking.Debug]]
* [[Ada Programming/Libraries/System.Tasking.Initialization|System.Tasking.Initialization]]
* [[Ada Programming/Libraries/System.Tasking|System.Tasking]]
* [[Ada Programming/Libraries/System.Task Primitives|System.Task_Primitives]]
* [[Ada Programming/Libraries/System.Tasking.Queuing|System.Tasking.Queuing]]
* [[Ada Programming/Libraries/System.Tasking.Rendezvous|System.Tasking.Rendezvous]]
* [[Ada Programming/Libraries/System.Tasking.Restricted|System.Tasking.Restricted]]
* [[Ada Programming/Libraries/System.Tasking.Stages|System.Tasking.Stages]]
* [[Ada Programming/Libraries/System.Tasking.Utilities|System.Tasking.Utilities]]
* [[Ada Programming/Libraries/System.Tasking.Task Attributes|System.Tasking.Task_Attributes]]
* [[Ada Programming/Libraries/System.Task Primitives.Interrupt Operations|System.Task_Primitives.Interrupt_Operations]]
* [[Ada Programming/Libraries/System.Tasking.Protected Objects.Entries|System.Tasking.Protected_Objects.Entries]]
* [[Ada Programming/Libraries/System.Tasking.Protected Objects.Operations|System.Tasking.Protected_Objects.Operations]]
* [[Ada Programming/Libraries/System.Tasking.Protected Objects.Single Entry|System.Tasking.Protected_Objects.Single_Entry]]
* [[Ada Programming/Libraries/System.Traceback|System.Traceback]]
* [[Ada Programming/Libraries/System.Traces|System.Traces]]
* [[Ada Programming/Libraries/System.Traceback Entries|System.Traceback_Entries]]
* [[Ada Programming/Libraries/System.Traces.Tasking|System.Traces.Tasking]]
* [[Ada Programming/Libraries/System.Unsigned Types|System.Unsigned_Types]]
* [[Ada Programming/Libraries/System.Vax Float Operations|System.Vax_Float_Operations]]
* [[Ada Programming/Libraries/System.Val Bool|System.Val_Bool]]
* [[Ada Programming/Libraries/System.Val Char|System.Val_Char]]
* [[Ada Programming/Libraries/System.Val Dec|System.Val_Dec]]
* [[Ada Programming/Libraries/System.Val Enum|System.Val_Enum]]
* [[Ada Programming/Libraries/System.Val Int|System.Val_Int]]
* [[Ada Programming/Libraries/System.Val LLD|System.Val_LLD]]
* [[Ada Programming/Libraries/System.Val LLI|System.Val_LLI]]
* [[Ada Programming/Libraries/System.Val LLU|System.Val_LLU]]
* [[Ada Programming/Libraries/System.Val Real|System.Val_Real]]
* [[Ada Programming/Libraries/System.Val Uns|System.Val_Uns]]
* [[Ada Programming/Libraries/System.Val Util|System.Val_Util]]
* [[Ada Programming/Libraries/System.Val WChar|System.Val_WChar]]
* [[Ada Programming/Libraries/System.Vectors.Boolean Operations|System.Vectors.Boolean_Operations]]
* [[Ada Programming/Libraries/System.Vectors|System.Vectors]]
* [[Ada Programming/Libraries/System.Version Control|System.Version_Control]]
* [[Ada Programming/Libraries/System.VMS Exception Table|System.VMS_Exception_Table]]
* [[Ada Programming/Libraries/System.WCh JIS|System.WCh_JIS]]
* [[Ada Programming/Libraries/System.WCh StW|System.WCh_StW]]
* [[Ada Programming/Libraries/System.WCh WtS|System.WCh_WtS]]
* [[Ada Programming/Libraries/System.Wid Bool|System.Wid_Bool]] 
* [[Ada Programming/Libraries/System.Wid Char|System.Wid_Char]] 
* [[Ada Programming/Libraries/System.Wid Enum|System.Wid_Enum]] 
* [[Ada Programming/Libraries/System.Wid LLI|System.Wid_LLI]] 
* [[Ada Programming/Libraries/System.Wid LLU|System.Wid_LLU]] 
* [[Ada Programming/Libraries/System.Wid WChar|System.Wid_WChar]] 
* [[Ada Programming/Libraries/System.WWd Char|System.WWd_Char]] 
* [[Ada Programming/Libraries/System.WWd Enum|System.WWd_Enum]]
* [[Ada Programming/Libraries/System.Wwd WChar|System.Wwd_WChar]]

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]
* [[Ada Programming/Libraries/Standard]]
* [[Ada Programming/Libraries/Ada]]
* [[Ada Programming/Libraries/Interfaces]]

=== Ada 83 Reference Manual ===

* {{Ada/83/RM|13|7|title=The Package System}}

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|13|7|title=The Package System}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|13|7|title=The Package System}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|System]]
&lt;/noinclude&gt;</text>
      <sha1>guvear1cu0rjcb5xaki1o52e6whnfkj</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Libraries/Web</title>
    <ns>0</ns>
    <id>22257</id>
    <revision>
      <id>3250223</id>
      <parentid>3211785</parentid>
      <timestamp>2017-07-31T00:27:58Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* Ada Reference Manual */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="732" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Libraries|Web}}
__TOC__&lt;/noinclude&gt;

The following libraries help you in Internet or Web programming:

; [[Ada Programming/Libraries/MultiPurpose/AdaCL|AdaCL, Ada Class Library]] : Powerful CGI implementation.
; [[Ada Programming/Libraries/IO/XML/Ada|XML/Ada]] : XML and Unicode support.
; [[Ada Programming/Libraries/Web/AWS|AWS]] : A full-featured Web-Server.
; [[Ada Programming/Libraries/MultiPurpose/Matreshka|Matreshka]] : Web Services, JSON, FastCGI, XML, Unicode and localization support.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]

=== Ada Reference Manual ===

—does not apply --

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Web]]
&lt;/noinclude&gt;</text>
      <sha1>7480l4eezxiavlr9zd60a65ak3s15t0</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Mathematical calculations</title>
    <ns>0</ns>
    <id>25765</id>
    <revision>
      <id>3585335</id>
      <parentid>3585225</parentid>
      <timestamp>2019-10-09T02:17:15Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>[[WB:REVERT|Reverted]] edits by [[Special:Contributions/159.146.10.52|159.146.10.52]] ([[User talk:159.146.10.52|talk]]) to last version by WOSlinker</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="26442" xml:space="preserve">&lt;noinclude&gt;{{Computer Programming/Mathematical Calculations/0}}
__TOC__&lt;/noinclude&gt;

Ada is very well suited for all kinds of calculations. You can define your own fixed point and floating point types and &amp;mdash; with the aid of generic packages call all the mathematical functions you need. In that respect Ada is on par with [[Programming:Fortran|Fortran]]. This module will show you how to use them and while we progress we create a simple [[wikipedia:Reverse Polish notation|RPN]] calculator.

== Simple calculations ==

=== [[Wikipedia:Addition|Addition]] ===

Additions can be done using the predefined operator {{Ada/operator|+}}. The operator is predefined for all numeric types and the following, working code, demonstrates its use:

 {{Ada/Sourceforge|numeric_1.adb}}
 
 {{Ada/--|{{Ada/95/RM|A|10|1|title=The Package Text_IO}}}}
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 
 {{Ada/kw|procedure}} Numeric_1 {{Ada/kw|is}}
    {{Ada/kw|type}} Value_Type {{Ada/kw|is}} {{Ada/kw|digits}} 12
          {{Ada/kw|range}} -999_999_999_999.0e999 .. 999_999_999_999.0e999;
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} Ada.Text_IO;
    {{Ada/kw|package}} F_IO {{Ada/kw|is}} {{Ada/kw|new}}  Ada.Text_IO.Float_IO (Value_Type);
 
    Value_1 : Value_Type;
    Value_2 : Value_Type;
 
 {{Ada/kw|begin}}
    T_IO.Put ("First Value : ");
    F_IO.Get (Value_1);
    T_IO.Put ("Second Value : ");
    F_IO.Get (Value_2);
 
    F_IO.Put (Value_1);
    T_IO.Put (" + ");
    F_IO.Put (Value_2);
    T_IO.Put (" = ");
    F_IO.Put (Value_1 {{Ada/operator|+}} Value_2);
 {{Ada/kw|end}} Numeric_1;

=== [[Wikipedia:Subtraction|Subtraction]] ===

Subtractions can be done using the predefined operator {{Ada/operator|-}}. The following extended demo shows the use of + and - operator together:

 {{Ada/Sourceforge|numeric_2.adb}}
 
 {{Ada/--|{{Ada/95/RM|A|10|1|title=The Package Text_IO}}}}
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}}{{Ada/dl|;}}
 
 {{Ada/kw|procedure}} Numeric_2
 {{Ada/kw|is}}
   {{Ada/kw|type}} Value_Type
   {{Ada/kw|is}} {{Ada/kw|digits}}
      12
   {{Ada/kw|range}}
      -999_999_999_999.0e999 .. 999_999_999_999.0e999;
 
   {{Ada/kw|package}} T_IO {{Ada/kw|renames}} {{Ada/package|Ada|Text_IO}};
   {{Ada/kw|package}} F_IO {{Ada/kw|is}} {{Ada/kw|new}}  Ada.Text_IO.Float_IO (Value_Type);
 
   Value_1   : Value_Type;
   Value_2   : Value_Type;
   Result    : Value_Type;
   Operation : Character;
 
 {{Ada/kw|begin}}
   T_IO.Put ("First Value  : ");
   F_IO.Get (Value_1);
   T_IO.Put ("Second Value : ");
   F_IO.Get (Value_2);
   T_IO.Put ("Operation    : ");
   T_IO.Get (Operation);
 
   {{Ada/kw|case}} Operation {{Ada/kw|is}}
      {{Ada/kw|when}} '+' =&gt;
         Result := Value_1 + Value_2;
      {{Ada/kw|when}} '-' =&gt;
         Result := Value_1 - Value_2;
      {{Ada/kw|when}} {{Ada/kw|others}} =&gt;
         T_IO.Put_Line ("Illegal Operation.");
         {{Ada/kw|goto}} Exit_Numeric_2;
   {{Ada/kw|end}} {{Ada/kw|case}};
 
   F_IO.Put (Value_1);
   T_IO.Put (" ");
   T_IO.Put (Operation);
   T_IO.Put (" ");
   F_IO.Put (Value_2);
   T_IO.Put (" = ");
   F_IO.Put (Result);
 
 {{Ada/dl|&lt;&lt;}}Exit_Numeric_2{{Ada/dl|&gt;&gt;}}
   {{Ada/kw|return}};
 
 {{Ada/kw|end}} Numeric_2;

Purists might be surprised about the use of goto &amp;mdash; but some people prefer the use of goto over the use of multiple return statements if inside functions &amp;mdash; given that, the opinions on this topic vary strongly. See the [[Ada Programming/Control#Isn.27t goto evil.3F|isn't goto evil]] article.

=== [[Wikipedia:Multiplication|Multiplication]] ===

Multiplication can be done using the predefined operator {{Ada/operator|*}}. For a demo see the next chapter about Division.

=== [[Wikipedia:Division (mathematics)|Division]] ===

Divisions can be done using the predefined operators {{Ada/operator|/}}, {{Ada/operator|mod}}, {{Ada/operator|rem}}. The operator {{Ada/operator|/}} performs a normal division, {{Ada/operator|mod}} returns a modulus division and {{Ada/operator|rem}} returns the remainder of the modulus division.

The following extended demo shows the use of the {{Ada/operator|+}}, {{Ada/operator|-}}, {{Ada/operator|*}} and {{Ada/operator|/}} operators together as well as the use of a four number wide stack to store intermediate results:

The operators {{Ada/operator|mod}} and {{Ada/operator|rem}} are not part of the demonstration as they are only defined for integer types.

 {{Ada/Sourceforge|numeric_3.adb}}
 
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 
 {{Ada/kw|procedure}} Numeric_3 {{Ada/kw|is}}
    {{Ada/kw|procedure}} Pop_Value;
    {{Ada/kw|procedure}} Push_Value;
 
    {{Ada/kw|type}} Value_Type {{Ada/kw|is}} {{Ada/kw|digits}} 12 {{Ada/kw|range}}
      -999_999_999_999.0e999 .. 999_999_999_999.0e999;
 
    {{Ada/kw|type}} Value_Array {{Ada/kw|is}} {{Ada/kw|array}} (Natural {{Ada/kw|range}} 1 .. 4) {{Ada/kw|of}} Value_Type;
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} Ada.Text_IO;
    {{Ada/kw|package}} F_IO {{Ada/kw|is}} {{Ada/kw|new}} Ada.Text_IO.Float_IO (Value_Type);
 
    Values    : Value_Array := ({{Ada/kw|others}} =&gt; 0.0);
    Operation : String (1 .. 40);
    Last      : Natural;
 
    {{Ada/kw|procedure}} Pop_Value {{Ada/kw|is}}
    {{Ada/kw|begin}}
       Values (Values'{{Ada/attribute|First}} + 1 .. Values'{{Ada/attribute|Last}}) :=
         Values (Values'{{Ada/attribute|First}} + 2 .. Values'{{Ada/attribute|Last}}) &amp; 0.0;
    {{Ada/kw|end}} Pop_Value;
 
    {{Ada/kw|procedure}} Push_Value {{Ada/kw|is}}
    {{Ada/kw|begin}}
       Values (Values'{{Ada/attribute|First}} + 1 .. Values'{{Ada/attribute|Last}}) :=
         Values (Values'{{Ada/attribute|First}} .. Values'{{Ada/attribute|Last}} - 1);
    {{Ada/kw|end}} Push_Value;
 
 {{Ada/kw|begin}}
    Main_Loop:
    {{Ada/kw|loop}}
       T_IO.Put ("&gt;");
       T_IO.Get_Line (Operation, Last);
 
       {{Ada/kw|if}} Last = 1 {{Ada/kw|and}} {{Ada/kw|then}} Operation (1) = '+' {{Ada/kw|then}}
          Values (1) := Values (1) + Values (2);
          Pop_Value;
       {{Ada/kw|elsif}} Last = 1 {{Ada/kw|and}} {{Ada/kw|then}} Operation (1) = '-' {{Ada/kw|then}}
          Values (1) := Values (1) + Values (2);
          Pop_Value;
       {{Ada/kw|elsif}} Last = 1 {{Ada/kw|and}} {{Ada/kw|then}} Operation (1) = '*' {{Ada/kw|then}}
          Values (1) := Values (1) * Values (2);
          Pop_Value;
       {{Ada/kw|elsif}} Last = 1 {{Ada/kw|and}} {{Ada/kw|then}} Operation (1) = '/' {{Ada/kw|then}}
          Values (1) := Values (1) / Values (2);
          Pop_Value;
       {{Ada/kw|elsif}} Last = 4 {{Ada/kw|and}} {{Ada/kw|then}} Operation (1 .. 4) = "exit" {{Ada/kw|then}}
          {{Ada/kw|exit}} Main_Loop;
       {{Ada/kw|else}}
          Push_Value;
          F_IO.Get (From =&gt; Operation, Item =&gt; Values (1), Last =&gt; Last);
       {{Ada/kw|end}} {{Ada/kw|if}};
       
       Display_Loop:
       {{Ada/kw|for}} I {{Ada/kw|in}} {{Ada/kw|reverse}} Value_Array'{{Ada/attribute|Range}} {{Ada/kw|loop}}
          F_IO.Put
            (Item =&gt; Values (I),
             Fore =&gt; F_IO.Default_Fore,
             Aft  =&gt; F_IO.Default_Aft,
             Exp  =&gt; 4);
          T_IO.New_Line;
       {{Ada/kw|end}} {{Ada/kw|loop}} Display_Loop;
    {{Ada/kw|end}} {{Ada/kw|loop}} Main_Loop;
 
    {{Ada/kw|return}};
 {{Ada/kw|end}} Numeric_3;

== [[Wikipedia:Exponentiation|Exponential]] calculations ==

All exponential functions are defined inside the generic package {{Ada/package|Ada|Numerics|Generic_Elementary_Functions}}.

=== [[Wikipedia:Exponentiation|Power of]] ===

Calculation of the form &lt;math&gt;x^y&lt;/math&gt; are performed by the  operator {{Ada/operator|**}}. Beware: There are two versions of this operator. The predefined operator {{Ada/operator|**}} allows only for Standard.Integer to be used as exponent. If you need to use a floating point type as exponent you need to use the {{Ada/operator|**}} defined in {{Ada/package|Ada|Numerics|Generic_Elementary_Functions}}.

=== [[Wikipedia:Root (mathematics)|Root]] ===

The square root &lt;math&gt; \sqrt{x} &lt;/math&gt; is calculated with the function &lt;code&gt;Sqrt()&lt;/code&gt;. There is no function defined to calculate an arbitrary root &lt;math&gt;\sqrt[n]{x}&lt;/math&gt;. However you can use logarithms to calculate an arbitrary root using the mathematical identity: &lt;math&gt; \sqrt[b]{a} = e^{\log_e (a) / b} &lt;/math&gt; which will become &lt;code&gt;root := Exp (Log (a) / b)&lt;/code&gt; in Ada. Alternatively, use &lt;math&gt;\sqrt[b]{a}=a^{\frac1b}&lt;/math&gt; which, in Ada, is &lt;code&gt;root := a**(1.0/b)&lt;/code&gt;.

=== [[Wikipedia:Logarithm|Logarithm]] ===

{{Ada/package|Ada|Numerics|Generic_Elementary_Functions}} defines a function for both the arbitrary logarithm &lt;math&gt;log_n(x)&lt;/math&gt; and the natural logarithm &lt;math&gt;log_e(x)&lt;/math&gt;, both of which have the same name &lt;code&gt;Log()&lt;/code&gt; distinguished by the number of parameters.

=== Demonstration ===

The following extended demo shows the how to use the exponential functions  in Ada. The new demo also uses [[Ada Programming/Libraries/Ada.Strings.Unbounded|Unbounded_String]] instead of Strings which make the comparisons easier.

Please note that from now on we won't copy the full sources any more. Do follow the download links to see the full program.

 {{Ada/Sourceforge|numeric_4.adb}}
 
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 {{Ada/kw|with}} {{Ada/package|Ada|Numerics|Generic_Elementary_Functions}};
 {{Ada/kw|with}} {{Ada/package|Ada|Strings|Unbounded}};
 
 {{Ada/kw|procedure}} Numeric_4 {{Ada/kw|is}}
   {{Ada/kw|package}} Str {{Ada/kw|renames}} Ada.Strings.Unbounded;
   {{Ada/kw|package}} T_IO {{Ada/kw|renames}} Ada.Text_IO;
 
   {{Ada/kw|procedure}} Pop_Value;
   {{Ada/kw|procedure}} Push_Value;
   {{Ada/kw|function}} Get_Line {{Ada/kw|return}} Str.Unbounded_String;
 
   {{Ada/kw|type}} Value_Type {{Ada/kw|is}} {{Ada/kw|digits}} 12 {{Ada/kw|range}}
      -999_999_999_999.0e999 .. 999_999_999_999.0e999;
 
   {{Ada/kw|type}} Value_Array {{Ada/kw|is}} {{Ada/kw|array}} (Natural {{Ada/kw|range}} 1 .. 4) {{Ada/kw|of}} Value_Type;
 
   {{Ada/kw|package}} F_IO {{Ada/kw|is}} {{Ada/kw|new}} Ada.Text_IO.Float_IO (Value_Type);
   {{Ada/kw|package}} Value_Functions {{Ada/kw|is}} {{Ada/kw|new}} Ada.Numerics.Generic_Elementary_Functions (
      Value_Type);
 
   {{Ada/kw|use}} Value_Functions;
   {{Ada/kw|use}} {{Ada/kw|type}} Str.Unbounded_String;
 
   Values    : Value_Array := ({{Ada/kw|others}} =&gt; 0.0);
   Operation : Str.Unbounded_String;
   Dummy     : Natural;
 
   {{Ada/kw|function}} Get_Line {{Ada/kw|return}} Str.Unbounded_String {{Ada/kw|is}}
      BufferSize : {{Ada/kw|constant}} := 2000;
      Retval     : Str.Unbounded_String := Str.Null_Unbounded_String;
      Item       : String (1 .. BufferSize);
      Last       : Natural;
   {{Ada/kw|begin}}
      Get_Whole_Line :
         {{Ada/kw|loop}}
            T_IO.Get_Line (Item =&gt; Item, Last =&gt; Last);
 
            Str.Append (Source =&gt; Retval, New_Item =&gt; Item (1 .. Last));
 
            {{Ada/kw|exit}} Get_Whole_Line {{Ada/kw|when}} Last &lt; Item'{{Ada/attribute|Last}};
         {{Ada/kw|end}} {{Ada/kw|loop}} Get_Whole_Line;
 
      {{Ada/kw|return}} Retval;
   {{Ada/kw|end}} Get_Line;
 
 ...
 
 {{Ada/kw|begin}}
   Main_Loop :
      {{Ada/kw|loop}}
         T_IO.Put ("&gt;");
         Operation := Get_Line;
 
 ...
         {{Ada/kw|elsif}} Operation = "e" {{Ada/kw|then}}—insert e
            Push_Value;
            Values (1) := Ada.Numerics.e;
         {{Ada/kw|elsif}} Operation = "**" {{Ada/kw|or}} {{Ada/kw|else}} Operation = "^" {{Ada/kw|then}}—power of x^y
            Values (1) := Values (1) ** Values (2);
            Pop_Value;
         {{Ada/kw|elsif}} Operation = "sqr" {{Ada/kw|then}}—square root
            Values (1) := Sqrt (Values (1));
         {{Ada/kw|elsif}} Operation = "root" {{Ada/kw|then}}—arbritary root
            Values (1) :=
               Exp (Log (Values (2)) / Values (1));
            Pop_Value;
         {{Ada/kw|elsif}} Operation = "ln" {{Ada/kw|then}}—natural logarithm
            Values (1) := Log (Values (1));
         {{Ada/kw|elsif}} Operation = "log" {{Ada/kw|then}}—based logarithm
            Values (1) :=
               Log (Base =&gt; Values (1), X =&gt; Values (2));
            Pop_Value;
         {{Ada/kw|elsif}} Operation = "{{Ada/kw|exit}}" {{Ada/kw|then}}
            {{Ada/kw|exit}} Main_Loop;
         {{Ada/kw|else}}
            Push_Value;
            F_IO.Get
              (From =&gt; Str.To_String (Operation),
               Item =&gt; Values (1),
               Last =&gt; Dummy);
         {{Ada/kw|end}} {{Ada/kw|if}};
 
 ...
      {{Ada/kw|end}} {{Ada/kw|loop}} Main_Loop;
 
   {{Ada/kw|return}};
 {{Ada/kw|end}} Numeric_4;

== Higher math ==

=== [[Wikipedia:Trigonometry|Trigonometric]] calculations ===

The full set of [[/Trigonometry|trigonometric]] functions are defined inside the generic package {{Ada/package|Ada|Numerics|Generic_Elementary_Functions}}. All functions are defined for 2π and an arbitrary cycle value (a full cycle of revolution).

Please note the difference of calling the &lt;code&gt;Arctan ()&lt;/code&gt; function.

{{Ada/Sourceforge|numeric_5.adb}}

 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 {{Ada/kw|with}} {{Ada/package|Ada|Numerics|Generic_Elementary_Functions}};
 {{Ada/kw|with}} {{Ada/package|Ada|Strings|Unbounded}};
 
 {{Ada/kw|procedure}} Numeric_5 {{Ada/kw|is}}
 
 ...
 
   {{Ada/kw|procedure}} Put_Line (Value : {{Ada/kw|in}} Value_Type);
 
   {{Ada/kw|use}} Value_Functions;
   {{Ada/kw|use}} {{Ada/kw|type}} Str.Unbounded_String;
 
   Values    : Value_Array := ({{Ada/kw|others}} =&gt; 0.0);
   Cycle     : Value_Type  := Ada.Numerics.Pi;
   Operation : Str.Unbounded_String;
   Dummy     : Natural;
 
 ...
 
   {{Ada/kw|procedure}} Put_Line (Value : {{Ada/kw|in}} Value_Type) {{Ada/kw|is}}
   {{Ada/kw|begin}}
      {{Ada/kw|if}} {{Ada/kw|abs}} Value_Type'{{Ada/attribute|Exponent}} (Value) &gt;=
         {{Ada/kw|abs}} Value_Type'{{Ada/attribute|Exponent}} (10.0 ** F_IO.Default_Aft)
      {{Ada/kw|then}}
         F_IO.Put
           (Item =&gt; Value,
            Fore =&gt; F_IO.Default_Aft,
            Aft  =&gt; F_IO.Default_Aft,
            Exp  =&gt; 4);
      {{Ada/kw|else}}
         F_IO.Put
           (Item =&gt; Value,
            Fore =&gt; F_IO.Default_Aft,
            Aft  =&gt; F_IO.Default_Aft,
            Exp  =&gt; 0);
      {{Ada/kw|end}} {{Ada/kw|if}};
      T_IO.New_Line;
 
      {{Ada/kw|return}};
   {{Ada/kw|end}} Put_Line;
 
 ...
 
 {{Ada/kw|begin}}
   Main_Loop :
      {{Ada/kw|loop}}
         Display_Loop :
            {{Ada/kw|for}} I {{Ada/kw|in}} {{Ada/kw|reverse}}  Value_Array'{{Ada/attribute|Range}} {{Ada/kw|loop}}
               Put_Line (Values (I));
            {{Ada/kw|end}} {{Ada/kw|loop}} Display_Loop;
         T_IO.Put ("&gt;");
         Operation := Get_Line;
 
 ...
         {{Ada/kw|elsif}} Operation = "deg" {{Ada/kw|then}}—switch to degrees
            Cycle := 360.0;
         {{Ada/kw|elsif}} Operation = "rad" {{Ada/kw|then}}—switch to degrees
            Cycle := Ada.Numerics.Pi;
         {{Ada/kw|elsif}} Operation = "grad" {{Ada/kw|then}}—switch to degrees
            Cycle := 400.0;
         {{Ada/kw|elsif}} Operation = "pi" {{Ada/kw|or}} {{Ada/kw|else}} Operation = "π" {{Ada/kw|then}}—switch to degrees
            Push_Value;
            Values (1) := Ada.Numerics.Pi;
         {{Ada/kw|elsif}} Operation = "sin" {{Ada/kw|then}}—sinus
            Values (1) := Sin (X =&gt; Values (1), Cycle =&gt; Cycle);
         {{Ada/kw|elsif}} Operation = "cos" {{Ada/kw|then}}—cosinus
            Values (1) := Cos (X =&gt; Values (1), Cycle =&gt; Cycle);
         {{Ada/kw|elsif}} Operation = "tan" {{Ada/kw|then}}—tangents
            Values (1) := Tan (X =&gt; Values (1), Cycle =&gt; Cycle);
         {{Ada/kw|elsif}} Operation = "cot" {{Ada/kw|then}}—cotanents
            Values (1) := Cot (X =&gt; Values (1), Cycle =&gt; Cycle);
         {{Ada/kw|elsif}} Operation = "asin" {{Ada/kw|then}}—arc-sinus
            Values (1) := Arcsin (X =&gt; Values (1), Cycle =&gt; Cycle);
         {{Ada/kw|elsif}} Operation = "acos" {{Ada/kw|then}}—arc-cosinus
            Values (1) := Arccos (X =&gt; Values (1), Cycle =&gt; Cycle);
         {{Ada/kw|elsif}} Operation = "atan" {{Ada/kw|then}}—arc-tangents
            Values (1) := Arctan (Y =&gt; Values (1), Cycle =&gt; Cycle);
         {{Ada/kw|elsif}} Operation = "acot" {{Ada/kw|then}}—arc-cotanents
            Values (1) := Arccot (X =&gt; Values (1), Cycle =&gt; Cycle);
 
 ...
      {{Ada/kw|end}} {{Ada/kw|loop}} Main_Loop;
 
   {{Ada/kw|return}};
 {{Ada/kw|end}} Numeric_5;


The Demo also contains an improved numeric output which behaves more like a normal calculator.

=== [[Wikipedia:Hyperbolic function|Hyperbolic]] calculations ===

You guessed it: The full set of hyperbolic functions is defined inside the generic package {{Ada/package|Ada|Numerics|Generic_Elementary_Functions}}.

 {{Ada/Sourceforge|numeric_6.adb}}

 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 {{Ada/kw|with}} {{Ada/package|Ada|Numerics|Generic_Elementary_Functions}};
 {{Ada/kw|with}} {{Ada/package|Ada|Strings|Unbounded}};
 {{Ada/kw|with}} {{Ada/package|Ada|Exceptions}};
 
 {{Ada/kw|procedure}} Numeric_6 {{Ada/kw|is}}
   {{Ada/kw|package}} Str {{Ada/kw|renames}} Ada.Strings.Unbounded;
   {{Ada/kw|package}} T_IO {{Ada/kw|renames}} Ada.Text_IO;
   {{Ada/kw|package}} Exept {{Ada/kw|renames}} Ada.Exceptions;
 
 ...
 
  {{Ada/kw|begin}}
   Main_Loop :
      {{Ada/kw|loop}}
         Try :
            {{Ada/kw|begin}}
               Display_Loop :
 ...
               {{Ada/kw|elsif}} Operation = "sinh" {{Ada/kw|then}}—sinus hyperbolic
                  Values (1) := Sinh (Values (1));
               {{Ada/kw|elsif}} Operation = "cosh" {{Ada/kw|then}}—cosinus hyperbolic
                  Values (1) := Coth (Values (1));
               {{Ada/kw|elsif}} Operation = "tanh" {{Ada/kw|then}}—tangents hyperbolic
                  Values (1) := Tanh (Values (1));
               {{Ada/kw|elsif}} Operation = "coth" {{Ada/kw|then}}—cotanents hyperbolic
                  Values (1) := Coth (Values (1));
               {{Ada/kw|elsif}} Operation = "asinh" {{Ada/kw|then}}—arc-sinus hyperbolic
                  Values (1) := Arcsinh (Values (1));
               {{Ada/kw|elsif}} Operation = "acosh" {{Ada/kw|then}}—arc-cosinus hyperbolic
                  Values (1) := Arccosh (Values (1));
               {{Ada/kw|elsif}} Operation = "atanh" {{Ada/kw|then}}—arc-tangents hyperbolic
                  Values (1) := Arctanh (Values (1));
               {{Ada/kw|elsif}} Operation = "acoth" {{Ada/kw|then}}—arc-cotanents hyperbolic
                  Values (1) := Arccoth (Values (1));
 ...
            {{Ada/kw|exception}}
               {{Ada/kw|when}} An_Exception : {{Ada/kw|others}} =&gt;
                  T_IO.Put_Line
                    (Exept.Exception_Information (An_Exception));
            {{Ada/kw|end}} Try;
      {{Ada/kw|end}} {{Ada/kw|loop}} Main_Loop;
 
   {{Ada/kw|return}};
 {{Ada/kw|end}} Numeric_6;

As added bonus this version supports error handling and therefore won't just crash when an illegal calculation is performed.

=== [[Wikipedia:Complex number|Complex]] arithmethic ===

For [[Algebra/Complex Numbers|complex arithmetic]] Ada provides the package {{Ada/package|Ada|Numerics|Generic_Complex_Types}}. This package is part of the "special need Annexes" which means it is optional. The open source Ada compiler GNAT implements all "special need Annexes" and therefore has complex arithmetic available.

Since Ada supports user defined operators, all &lt;small&gt;({{Ada/operator|+}}, {{Ada/operator|-}}, {{Ada/operator|*}})&lt;/small&gt; operators have their usual meaning as soon as the package {{Ada/package|Ada|Numerics|Generic_Complex_Types}} has been instantiated &lt;small&gt;({{Ada/kw|package}} ... {{Ada/kw|is}} {{Ada/kw|new}} ...)&lt;/small&gt; and the type has been made visible &lt;small&gt;({{Ada/kw|use}} {{Ada/kw|type}} ...)&lt;/small&gt;

Ada also provides the packages {{Ada/package|Ada|Text_IO|Complex_IO}} and {{Ada/package|Ada|Numerics|Generic_Complex_Elementary_Functions}} which provide similar functionality to their normal counterparts. But there are some differences:

* {{Ada/package|Ada|Numerics|Generic_Complex_Elementary_Functions}} supports only the exponential and trigonometric functions which make sense in complex arithmetic.

* {{Ada/package|Ada|Text_IO|Complex_IO}} is a child package of {{Ada/package|Ada|Text_IO}} and therefore needs its own {{Ada/kw|with}}. Note: the &lt;code&gt;{{Ada/package|Ada|Text_IO|Complex_IO}}Get ()&lt;/code&gt; function is pretty fault tolerant - if you forget the "," or the "()" pair it will still parse the input correctly.

So, with only a very few modifications you can convert your "normals" calculator to a calculator for complex arithmetic:

{{Ada/Sourceforge|numeric_7.adb}}

 {{Ada/kw|with}} Ada.Text_IO.Complex_IO;
 {{Ada/kw|with}} Ada.Numerics.Generic_Complex_Types;
 {{Ada/kw|with}} Ada.Numerics.Generic_Complex_Elementary_Functions;
 {{Ada/kw|with}} Ada.Strings.Unbounded;
 {{Ada/kw|with}} Ada.Exceptions; 
 
 {{Ada/kw|procedure}} Numeric_7 {{Ada/kw|is}}
 
 ...
  
   {{Ada/kw|package}} Complex_Types {{Ada/kw|is}} {{Ada/kw|new}} Ada.Numerics.Generic_Complex_Types (
      Value_Type);
   {{Ada/kw|package}} Complex_Functions {{Ada/kw|is}} {{Ada/kw|new}}
      Ada.Numerics.Generic_Complex_Elementary_Functions (
      Complex_Types);
   {{Ada/kw|package}} C_IO {{Ada/kw|is}} {{Ada/kw|new}} Ada.Text_IO.Complex_IO (Complex_Types);
 
   {{Ada/kw|type}} Value_Array {{Ada/kw|is}}
      {{Ada/kw|array}} (Natural {{Ada/kw|range}} 1 .. 4) {{Ada/kw|of}} Complex_Types.Complex;
 
   {{Ada/kw|procedure}} Put_Line (Value : {{Ada/kw|in}} Complex_Types.Complex);
 
   {{Ada/kw|use}} {{Ada/kw|type}} Complex_Types.Complex;
   {{Ada/kw|use}} {{Ada/kw|type}} Str.Unbounded_String;
   {{Ada/kw|use}} Complex_Functions;
 
   Values    : Value_Array :=
      ({{Ada/kw|others}} =&gt; Complex_Types.Complex'(Re =&gt; 0.0, Im =&gt; 0.0));
 
 ...
  
   {{Ada/kw|procedure}} Put_Line (Value : {{Ada/kw|in}} Complex_Types.Complex) {{Ada/kw|is}}
   {{Ada/kw|begin}}
      {{Ada/kw|if}} ({{Ada/kw|abs}} Value_Type'{{Ada/attribute|Exponent}} (Value.Re) &gt;=
          {{Ada/kw|abs}} Value_Type'{{Ada/attribute|Exponent}} (10.0 ** C_IO.Default_Aft))
        {{Ada/kw|or}} {{Ada/kw|else}} ({{Ada/kw|abs}} Value_Type'{{Ada/attribute|Exponent}} (Value.Im) &gt;=
                 {{Ada/kw|abs}} Value_Type'{{Ada/attribute|Exponent}} (10.0 ** C_IO.Default_Aft))
      {{Ada/kw|then}}
         C_IO.Put
           (Item =&gt; Value,
            Fore =&gt; C_IO.Default_Aft,
            Aft  =&gt; C_IO.Default_Aft,
            Exp  =&gt; 4);
      {{Ada/kw|else}}
         C_IO.Put
           (Item =&gt; Value,
            Fore =&gt; C_IO.Default_Aft,
            Aft  =&gt; C_IO.Default_Aft,
            Exp  =&gt; 0);
      {{Ada/kw|end}} {{Ada/kw|if}};
      T_IO.New_Line;
 
      {{Ada/kw|return}};
   {{Ada/kw|end}} Put_Line;
 
 {{Ada/kw|begin}}
 
 ...
               {{Ada/kw|elsif}} Operation = "e" {{Ada/kw|then}}—insert e
                  Push_Value;
                  Values (1) :=
                     Complex_Types.Complex'(Re =&gt; Ada.Numerics.e, Im =&gt; 0.0);
 
 ...
 
               {{Ada/kw|elsif}} Operation = "pi" {{Ada/kw|or}} {{Ada/kw|else}} Operation = "π" {{Ada/kw|then}}—insert pi
                  Push_Value;
                  Values (1) :=
                     Complex_Types.Complex'(Re =&gt; Ada.Numerics.Pi, Im =&gt; 0.0);
               {{Ada/kw|elsif}} Operation = "sin" {{Ada/kw|then}}—sinus
                  Values (1) := Sin (Values (1));
               {{Ada/kw|elsif}} Operation = "cos" {{Ada/kw|then}}—cosinus
                  Values (1) := Cot (Values (1));
               {{Ada/kw|elsif}} Operation = "tan" {{Ada/kw|then}}—tangents
                  Values (1) := Tan (Values (1));
               {{Ada/kw|elsif}} Operation = "cot" {{Ada/kw|then}}—cotanents
                  Values (1) := Cot (Values (1));
               {{Ada/kw|elsif}} Operation = "asin" {{Ada/kw|then}}—arc-sinus
                  Values (1) := Arcsin (Values (1));
               {{Ada/kw|elsif}} Operation = "acos" {{Ada/kw|then}}—arc-cosinus
                  Values (1) := Arccos (Values (1));
               {{Ada/kw|elsif}} Operation = "atan" {{Ada/kw|then}}—arc-tangents
                  Values (1) := Arctan (Values (1));
               {{Ada/kw|elsif}} Operation = "acot" {{Ada/kw|then}}—arc-cotanents
                  Values (1) := Arccot (Values (1));
 
 ...
 
   {{Ada/kw|return}};
 {{Ada/kw|end}} Numeric_7;

=== [[Linear Algebra/Vectors in Space|Vector]] and [[Linear Algebra/Describing the Solution Set#matrix|Matrix]] Arithmetic ===

Ada supports [[Linear Algebra/Vectors in Space|vector]] and [[Linear Algebra/Describing the Solution Set#matrix|matrix]] Arithmetic for both normal real types and complex types. For those, the generic packages Ada.Numerics.Generic_Real_Arrays and Ada.Numerics.Generic_Complex_Arrays are used. Both packages offer the usual set of operations, however there is no I/O package and understandably, no package for elementary functions.

Since there is no I/O package for vector and matrix I/O creating a demo is by far more complex &amp;mdash; and hence not ready yet. You can have a look at the current progress which will be a universal calculator merging all feature.

Status: Stalled - for a Vector and Matrix stack we need Indefinite_Vectors &amp;mdash; which are currently not part of GNAT/Pro. Well I could use the booch components ...

{{Ada/Sourceforge|numeric_8-complex_calculator.ada}}
{{Ada/Sourceforge|numeric_8-get_line.ada}}
{{Ada/Sourceforge|numeric_8-real_calculator.ada}}
{{Ada/Sourceforge|numeric_8-real_vector_calculator.ada}}

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Delimiters/-]]
* [[Ada Programming/Libraries/Ada.Numerics.Generic Complex Types]]
* [[Ada Programming/Libraries/Ada.Numerics.Generic Elementary Functions]]

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|4|4|title=Expressions}}
* {{Ada/95/RM|A|5|1|title=Elementary Functions}}
* {{Ada/95/RM|A|10|1|title=The Package Text_IO}}
* {{Ada/95/RM|G|1|title=Complex Arithmetic}}
* {{Ada/95/RM|G|3|title=Vector and Matrix Manipulation}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|4|4|title=Expressions}}
* {{Ada/2005/RM|A|5|1|title=Elementary Functions}}
* {{Ada/2005/RM|A|10|1|title=The Package Text_IO}}
* {{Ada/2005/RM|G|1|title=Complex Arithmetic}}
* {{Ada/2005/RM|G|3|title=Vector and Matrix Manipulation}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Mathematical calculations]]
&lt;/noinclude&gt;</text>
      <sha1>4le1eir2udq6nk86essiilyd8qzd6wq</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Object Orientation</title>
    <ns>0</ns>
    <id>19143</id>
    <revision>
      <id>3446866</id>
      <parentid>3421218</parentid>
      <timestamp>2018-07-28T22:00:10Z</timestamp>
      <contributor>
        <ip>83.54.3.223</ip>
      </contributor>
      <comment>/* Object-Oriented Ada for C++ programmers */ Syntax highlighting</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="77900" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|OO}}
__TOC__&lt;/noinclude&gt;

== Object orientation in Ada ==

Object oriented programming consists in building the software in terms of "objects".  An "object" contains data and has a behavior.  The data, normally, consists in constants and variables as seen in the rest of this book but could also, conceivably, reside outside the program entirely, i.e. on disk or on the network.  The behavior consists in subprograms that operate on the data.  What makes Object Orientation unique, compared to procedural programming, is not a single feature but the combination of several features:

* ''encapsulation'', i.e. the ability to separate the implementation of an object from its interface; this in turn separates "clients" of the object, who can only use the object in certain predefined ways, from the internals of the object, which have no knowledge of the outside clients.

* ''inheritance'', the ability for one type of objects to inherit the data and behavior (subprograms) of another, without necessarily needing to break encapsulation;

* ''type extension'', the ability for an object to add new data components and new subprograms on top of the inherited ones and to ''replace'' some inherited subprograms with its own versions; this is called ''overriding''.

* ''polymorphism'', the ability for a "client" to use the services of an object without knowing the exact type of the object, i.e. in an abstract way.  Indeed at run time, the actual objects can have different types from one invocation to the next.

It is possible to do object-oriented programming in any language, even assembly.  However, type extension and polymorphism are very difficult to get right without language support.

In Ada, each of these concepts has a matching construct; this is why Ada supports object-oriented programming directly.

* Packages provide encapsulation;
* Derived types provide inheritance;
* Record extensions, described below, provide for type extension;
* Class-wide types, also described below, provide for polymorphism.

Ada has had encapsulation and derived types since the first version (MIL-STD-1815 in 1980), which led some to qualify the language as "object-oriented" in a very narrow sense.  Record extensions and class-wide types were added in Ada 95.  Ada 2005 further adds interfaces.  The rest of this chapter covers these aspects.

=== The simplest object: the Singleton ===

 {{Ada/kw|package}} Directory {{Ada/kw|is}}
   {{Ada/kw|function}} Present (Name_Pattern: String) {{Ada/kw|return}} Boolean;
   {{Ada/kw|generic}}
      {{Ada/kw|with procedure}} Visit (Full_Name, Phone_Number, Address: String;
                            Stop: {{Ada/kw|out}} Boolean);
   {{Ada/kw|procedure}} Iterate (Name_Pattern: String);
 {{Ada/kw|end}} Directory;

The Directory is an object consisting of data (the telephone numbers and addresses, presumably held in an external file or database) and behavior (it can look an entry up and traverse all the entries matching a Name_Pattern, calling Visit on each).

A simple package provides for encapsulation (the inner workings of the directory are hidden) and a pair of subprograms provide the behavior.

This pattern is appropriate when only one object of a certain type must exist; there is, therefore, no need for type extension or polymorphism.

=== Primitive operations ===

For the following, we need the definition of primitive operations:

The set of ''primitive operations of a type T'' consists of those subprograms that:

* are declared immediately within the same package as the type (not within a nested package nor a child package);
* take a parameter of the type or, for functions, ''return'' an object of the type;
* take an access parameter of the type or, for functions, ''return'' an access value of the type.

(Also predefined operators like equality "=" are primitive operations.)

An operation can be primitive on two or more types, but only on one tagged type. The following example would be illegal if also B were tagged.

 {{Ada/kw|package}} P {{Ada/kw|is}}
    {{Ada/kw|type}} A {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|private}};
    {{Ada/kw|type}} B {{Ada/kw|is}} {{Ada/kw|private}};
    {{Ada/kw|procedure}} Proc (This: A; That: B); {{Ada/comment|primitive on A and B}}
 {{Ada/kw|end}} P;

Note, however, that this does not limit the number of parameters of a tagged type. For example, following definition is legal.

 {{Ada/kw|package}} P {{Ada/kw|is}}
    {{Ada/kw|type}} A {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|private}};
    {{Ada/kw|procedure}} Proc (This, That: A); {{Ada/comment|primitive only on A}}
 {{Ada/kw|end}} P;

Primitive operations of tagged types are dispatching operations. Whether a call to such a primitive operation is in effect dispatching or statically bound, depends on the context (see below). Note that in a dispatching call both actual parameters of the last example must have the same tag (i.e. the same type); Constraint_Error will be called if the tag check fails.

=== Derived types ===

Type derivation has been part of Ada since the very start.

 {{Ada/kw|package}} P {{Ada/kw|is}}
   {{Ada/kw|type}} T {{Ada/kw|is private}};
   {{Ada/kw|function}} Create (Data: Boolean) {{Ada/kw|return}} T;  {{Ada/comment|primitive}}
   {{Ada/kw|procedure}} Work (Object : {{Ada/kw|in out}} T);        {{Ada/comment|primitive}}
   {{Ada/kw|procedure}} Work (Pointer: {{Ada/kw|access}} T);        {{Ada/comment|primitive}}
   {{Ada/kw|type}} Acc_T {{Ada/kw|is access}} T;
   {{Ada/kw|procedure}} Proc (Pointer: Acc_T);           {{Ada/comment|not primitive}}
 {{Ada/kw|private}}
   {{Ada/kw|type}} T {{Ada/kw|is record}}
     Data: Boolean;
   {{Ada/kw|end record}};
 {{Ada/kw|end}} P;

The above example creates a type T that contains data (here just a Boolean but it could be anything) and behavior consisting of some subprograms.  It also demonstrates encapsulation by placing the details of the type T in the private part of the package.

The primitive operations of T are the function Create, the overloaded procedures Work, and the predefined "=" operator; Proc is not primitive, since it has an ''access type'' on T as parameter — don't confuse this with an ''access parameter'', as used in the second procedure Work. When deriving from T, the primitive operations are inherited.

 {{Ada/kw|with}} P;
 {{Ada/kw|package}} Q {{Ada/kw|is}}
   {{Ada/kw|type}} Derived {{Ada/kw|is new}} P.T;
 {{Ada/kw|end}} Q;

The type Q.Derived has the same data ''and the same behavior'' as P.T; it inherits both the data ''and the subprograms''.  Thus it is possible to write:

 {{Ada/kw|with}} Q;
 {{Ada/kw|procedure}} Main {{Ada/kw|is}}
   Object: Q.Derived := Q.Create (Data =&gt; False);
 {{Ada/kw|begin}}
   Q.Work (Object);
 {{Ada/kw|end}} Main;

Inherited operations may be overridden and new operations added, but the rules (Ada 83) unfortunaltely are somewhat different from the rules for tagged types (Ada 95).

Admittedly, the reasons for writing this may seem obscure.
The purpose of this kind of code is to have objects of types P.T and Q.Derived, which are not compatible:

 Ob1: P.T;
 Ob2: Q.Derived;
 
 Ob1 := Ob2;              -- illegal
 Ob1 := P.T (Ob2);        -- but convertible
 Ob2 := Q.Derived (Ob1);  -- in both directions

This feature is not used very often (it's used e.g. for declaring types reflecting physical dimensions) but I present it here to introduce the next step: type extension.

=== Type extensions ===

Type extensions are an Ada 95 amendment.

A tagged type provides support for dynamic polymorphism and type extension. A tagged type bears a hidden tag that identifies the type at run-time.  Apart from the tag, a tagged record is like any other record, so it can contain arbitrary data.

 {{Ada/kw|package}} Person {{Ada/kw|is}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|tagged}} 
      {{Ada/kw|record}}
          Name   : String (1 .. 10);
          Gender : Gender_Type;
      {{Ada/kw|end}} {{Ada/kw|record}};
    {{Ada/kw|procedure}} Put (O : Object);
 {{Ada/kw|end}} Person;

As you can see, a &lt;code&gt;Person.Object&lt;/code&gt; is an ''object'' in the sense that it has data and behavior (the procedure &lt;code&gt;Put&lt;/code&gt;).  However, this object does not hide its data; any program unit that has a &lt;code&gt;{{Ada/kw|with}} Person&lt;/code&gt; clause can read and write the data in a Person.Object directly.  This breaks encapsulation and also illustrates that Ada completely separates the concepts of ''encapsulation'' and ''type''.  Here is a version of Person.Object that encapsulates its data:

 {{Ada/kw|package}} Person {{Ada/kw|is}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|tagged private}};
    {{Ada/kw|procedure}} Put (O : Object);
 {{Ada/kw|private}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|tagged}} 
      {{Ada/kw|record}}
          Name   : String (1 .. 10);
          Gender : Gender_Type;
      {{Ada/kw|end}} {{Ada/kw|record}};
 {{Ada/kw|end}} Person;

Because the type Person.Object is tagged, it is possible to create a record extension, which is a derived type with additional data.

 {{Ada/kw|with}} Person;
 {{Ada/kw|package}} Programmer {{Ada/kw|is}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|new}} Person.Object {{Ada/kw|with private}};
 {{Ada/kw|private}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|new}} Person.Object {{Ada/kw|with}} 
      {{Ada/kw|record}}
         Skilled_In : Language_List;
      {{Ada/kw|end}} {{Ada/kw|record}};
 {{Ada/kw|end}} Programmer;

The type &lt;code&gt;Programmer.Object&lt;/code&gt; inherits the data and behavior, i.e. the type's primitive operations, from &lt;code&gt;Person.Object&lt;/code&gt;; it is thus possible to write:

 {{Ada/kw|with}} Programmer;
 {{Ada/kw|procedure}} Main {{Ada/kw|is}}
    Me : Programmer.Object;
 {{Ada/kw|begin}}
    Programmer.Put (Me);
    Me.Put; {{Ada/comment|equivalent to the above, Ada 2005 only}}
 {{Ada/kw|end}} Main;

So the declaration of the type &lt;code&gt;Programmer.Object&lt;/code&gt;, as a record extension of &lt;code&gt;Person.Object&lt;/code&gt;, implicitly declares a &lt;code&gt;{{Ada/kw|procedure}} Put&lt;/code&gt; that applies to a &lt;code&gt;Programmer.Object&lt;/code&gt;.

Like in the case of untagged types, objects of type Person and Programmer are convertible. However, where untagged objects are convertible in either direction, conversion of tagged types only works in the direction to the root. (Conversion away from the root would have to add components out of the blue.) Such a conversion is called a ''view conversion'', because components are not lost, they only become invisible.

Extension aggregates have to be used if you go away from the root.

=== Overriding ===

Now that we have introduced tagged types, record extensions and primitive operations, it becomes possible to understand overriding.   In the examples above, we introduced a type &lt;code&gt;Person.Object&lt;/code&gt; with a primitive operation called &lt;code&gt;Put&lt;/code&gt;.  Here is the body of the package:

 {{Ada/kw|with}} Ada.Text_IO;
 {{Ada/kw|package body}} Person {{Ada/kw|is}}
    {{Ada/kw|procedure}} Put (O : Object) {{Ada/kw|is}}
    {{Ada/kw|begin}}
       Ada.Text_IO.Put (O.Name);
       Ada.Text_IO.Put (" is a ");
       Ada.Text_IO.Put_Line (Gender_Type'Image (O.Gender));
    {{Ada/kw|end}} Put;
 {{Ada/kw|end}} Person;

As you can see, this simple operation prints both data components of the record type to standard output.  Now, remember that the record extension &lt;code&gt;Programmer.Object&lt;/code&gt; has an additional data member.  If we write:

 {{Ada/kw|with}} Programmer;
 {{Ada/kw|procedure}} Main {{Ada/kw|is}}
    Me : Programmer.Object;
 {{Ada/kw|begin}}
    Programmer.Put (Me);
    Me.Put; {{Ada/comment|equivalent to the above, Ada 2005 only}}
 {{Ada/kw|end}} Main;

then the program will call the inherited primitive operation &lt;code&gt;Put&lt;/code&gt;, which will print the name and gender ''but not the additional data''.  In order to provide this extra behavior, we must ''override'' the inherited procedure &lt;code&gt;Put&lt;/code&gt; like this:

 {{Ada/kw|with}} Person;
 {{Ada/kw|package}} Programmer {{Ada/kw|is}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|new}} Person.Object {{Ada/kw|with private}};
    {{Ada/kw|overriding}} {{Ada/comment|Optional keyword, new in Ada 2005}}
    {{Ada/kw|procedure}} Put (O : Object);
 {{Ada/kw|private}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|new}} Person.Object {{Ada/kw|with}} 
      {{Ada/kw|record}}
         Skilled_In : Language_List;
      {{Ada/kw|end}} {{Ada/kw|record}};
 {{Ada/kw|end}} Programmer;
 
 {{Ada/kw|package body}} Programmer {{Ada/kw|is}}
    {{Ada/kw|procedure}} Put (O : Object) {{Ada/kw|is}}
    {{Ada/kw|begin}}
       Person.Put (Person.Object (O)); {{Ada/comment|view conversion to the ancestor type}}
       Put (O.Skilled_In); {{Ada/comment|presumably declared in the same package as Language_List}}
    {{Ada/kw|end}} Put;
 {{Ada/kw|end}} Programmer;

&lt;code&gt;Programmer.Put&lt;/code&gt; ''overrides'' &lt;code&gt;Person.Put&lt;/code&gt;; in other words it ''replaces'' it completely.  Since the intent is to extend the behavior rather than replace it, &lt;code&gt;Programmer.Put&lt;/code&gt; calls &lt;code&gt;Person.Put&lt;/code&gt; as part of its behavior.  It does this by converting its parameter from the type &lt;code&gt;Programmer.Object&lt;/code&gt; to its ancestor type &lt;code&gt;Person.Object&lt;/code&gt;.  This construct is a ''view conversion''; contrary to a normal type conversion, it does ''not'' create a new object and does ''not'' incur any run-time cost.  Of course, it is optional that an overriding operation call its ancestor; there are cases where the intent is indeed to replace, not extend, the inherited behavior.

(Note that also for untagged types, overriding of inherited operations is possible. The reason why it's discussed here is that derivation of untagged types is done rather seldom.)

=== Polymorphism, class-wide programming and dynamic dispatching ===

The full power of object orientation is realized by polymorphism, class-wide programming and dynamic dispatching, which are different words for the same, single concept.  To explain this concept, let us extend the example from the previous sections, where we declared a base tagged type &lt;code&gt;Person.Object&lt;/code&gt; with a primitive operation &lt;code&gt;Put&lt;/code&gt; and a record extension &lt;code&gt;Programmer.Object&lt;/code&gt; with additional data and an overriding primitive operation &lt;code&gt;Put&lt;/code&gt;.

Now, let us imagine a collection of persons.  In the collection, some of the persons are programmers.  We want to traverse the collection and call &lt;code&gt;Put&lt;/code&gt; on each person.  When the person under consideration is a programmer, we want to call &lt;code&gt;Programmer.Put&lt;/code&gt;; when the person is not a programmer, we want to call &lt;code&gt;Person.Put&lt;/code&gt;.  This, in essence, is polymorphism, class-wide programming and dynamic dispatching.

Ada implements this concept by means of ''class-wide types''.

Each tagged type, such as &lt;code&gt;Person.Object&lt;/code&gt;, has a corresponding ''class of types'' which is the set of types comprising the type &lt;code&gt;Person.Object&lt;/code&gt; itself and all types that extend &lt;code&gt;Person.Object&lt;/code&gt;.  In our example, this class consists of two types:

* &lt;code&gt;Person.Object&lt;/code&gt;
* &lt;code&gt;Programmer.Object&lt;/code&gt;

Ada 95 defines the &lt;code&gt;Person.Object'Class&lt;/code&gt; attribute to denote the corresponding class-wide type. In other words:

 {{ada/kw|declare}}
    Someone : Person.Object'Class := ...; {{ada/comment|to be expanded later}}
 {{ada/kw|begin}}
    Someone.Put; {{ada/comment|dynamic dispatching}}
 {{ada/kw|end}};

The declaration of Someone denotes an object that may be of ''either'' type, &lt;code&gt;Person.Object&lt;/code&gt; or &lt;code&gt;Programmer.Object&lt;/code&gt;.  Consequently, the call to the primitive operation &lt;code&gt;Put&lt;/code&gt; dispatches dynamically to either &lt;code&gt;Person.Put&lt;/code&gt; or &lt;code&gt;Programmer.Put&lt;/code&gt;.

The only problem is that, since we don't know whether Someone is a programmer or not, we don't know how many data components Someone has, either, and therefore we don't know how many bytes Someone takes in memory.  For this reason, the class-wide type &lt;code&gt;Person.Object'Class&lt;/code&gt; is [[ada Programming/Subtypes#Indefinite subtype|''indefinite'']].  It is impossible to declare an object of this type without giving some constraint.  It is, however, possible to:

* declare an object of a class-wide with an initial value (as above). The object is then constrained by its initial value.
* declare an ''access value'' to such an object (because the access value has a known size); 
* pass objects of a class-wide type as parameters to subprograms
* assign an object of a specific type (in particular, the result of a function call) to a variable of a class-wide type.

With this knowledge, we can now build a polymorphic collection of persons; in this example we will quite simply create an array of access values to persons:

 {{ada/kw|with}} Person;
 {{ada/kw|procedure}} Main {{ada/kw|is}}
    {{ada/kw|type}} Person_Access {{ada/kw|is access}} Person.Object'Class;
    {{ada/kw|type}} Array_Of_Persons  {{ada/kw|is array}} (Positive {{ada/kw|range}} &lt;&gt;) of Person_Access;
 
    {{ada/kw|function}} Read_From_Disk {{ada/kw|return}} Array_Of_Persons {{ada/kw|is separate}};
 
    Everyone : {{ada/kw|constant}} Array_Of_Persons := Read_From_Disk;
 {{ada/kw|begin}} {{Ada/comment|Main}}
    {{ada/kw|for}} K {{Ada/kw|in}} Everyone'Range {{ada/kw|loop}}
       Everyone (K).{{Ada/kw|all}}.Put; {{Ada/comment|dereference followed by dynamic dispatching}}
    {{ada/kw|end loop}};
 {{ada/kw|end}} Main;

The above procedure achieves our desired goal: it traverses the array of Persons and calls the procedure &lt;code&gt;Put&lt;/code&gt; that is appropriate for each person.

==== Advanced topic: How dynamic dispatching works ====

You don't need to know how dynamic dispatching works in order to use it effectively but, in case you are curious, here is an explanation.

The first component of each object in memory is the ''tag''; this is why objects are of a ''tagged'' type rather than plain records.  The tag really is an access value to a table; there is one table for each specific type.
The table contains access values to each primitive operation of the type.
In our example, since there are two types &lt;code&gt;Person.Object&lt;/code&gt; and &lt;code&gt;Programmer.Object&lt;/code&gt;, there are two tables, each containing a single access value.
The table for &lt;code&gt;Person.Object&lt;/code&gt; contains an access value to &lt;code&gt;Person.Put&lt;/code&gt; and the table for &lt;code&gt;Programmer.Object&lt;/code&gt; contains an access value to &lt;code&gt;Programmer.Put&lt;/code&gt;.
When you compile your program, the compiler constructs both tables and places them in the program executable code.

Each time the program creates a new object of a specific type, it automatically sets its tag to point to the appropriate table.

Each time the program performs a ''dispatching call'' of a primitive operation, the compiler inserts object code that:

* dereferences the tag to find the table of primitive operations for the specific type of the object at hand
* dereferences the access value to the primitive operation
* calls the primitive operation.

Conversely, when the program performs a call where the parameter is a view conversion to an ancestor type, the compiler performs these two dereferences at compile time rather than run time: such a call is ''statically bound''; the compiler emits code that directly calls the primitive operation of the ancestor type specified in the view conversion.

==== Redispatching ====

Dispatching is controlled by the (hidden) tag of the object. So what happens when a primitive operation &lt;code&gt;Op1&lt;/code&gt; calls another primitive operation &lt;code&gt;Op2&lt;/code&gt;? Which operations will be called when the call to &lt;code&gt;Op1&lt;/code&gt; is dispatching? Recalling the definitions, while
&lt;blockquote&gt;
The primitive subprograms of a tagged type (…) are called dispatching operations. &lt;br/&gt;{{Ada/RM|3|9|2|title=Dispatching Operations of Tagged Types}}
&lt;/blockquote&gt;
still, some controlling tags are determined at compile time and, accordingly, determination of a body to be executed is static. Some controlling tags are determined at run-time and then determination of a body is dynamic. 
&lt;blockquote&gt;
Such a call is termed a dispatching call. &lt;br/&gt;[ibid.]
&lt;/blockquote&gt;

  {{ada/kw|type}} Root {{ada/kw|is}} {{ada/kw|tagged}} {{ada/kw|private}};
  {{ada/kw|procedure}} Op1 (This: Root);
  {{ada/kw|procedure}} Op2 (This: Root);
 
  {{ada/kw|type}} Derived {{ada/kw|is}} {{ada/kw|new}} Root {{ada/kw|with}} {{ada/kw|private}};
  -- Derived inherits Op1
  {{ada/kw|overriding}} {{ada/kw|procedure}} Op2 (This: Derived);
 
  {{ada/kw|procedure}} Op1 (This: Root) {{ada/kw|is}}
  {{ada/kw|begin}}
    ...
    Op2 (This);               -- not redispatching
    Op2 (Root'Class (This));  -- redispatching
    This.Op2;                 -- not redispatching (new syntax since Ada 2005)
    (Root'Class (This)).Op2;  -- redispatching (new syntax since Ada 2005)
    ...
  {{ada/kw|end}} Op1;
 
  D: Derived;
  C: Root'Class := D;
 
  Op1 (D);  -- statically bound call
  Op1 (C);  -- dispatching call
  D.Op1;    -- statically bound call (new syntax since Ada 2005)
  C.Op1;    -- dispatching call (new syntax since Ada 2005)

In this fragment, &lt;code&gt;Op1&lt;/code&gt; is not overridden, whereas &lt;code&gt;Op2&lt;/code&gt; is overridden. The body of &lt;code&gt;Op1&lt;/code&gt; calls &lt;code&gt;Op2&lt;/code&gt;, thus which &lt;code&gt;Op2&lt;/code&gt; will there be called if &lt;code&gt;Op1&lt;/code&gt; is called with a parameter of type &lt;code&gt;Derived&lt;/code&gt;?

Ada source text completely controls dispatching and redispatching. If you want redispatching, it is required that you state this explicitly by converting the parameter of the specific type to the class-wide type again. (Remember: View conversions never lose components, they just hide them. A conversion to a class-wide type can unhide them again.)

Thus the first call &lt;code&gt;Op1 (D)&lt;/code&gt; (statically bound, i.e., not dispatching) executes the inherited &lt;code&gt;Op1&lt;/code&gt; — and within &lt;code&gt;Op1&lt;/code&gt;, then, the first call to &lt;code&gt;Op2&lt;/code&gt; is also statically bound (there is no redispatching), parameter &lt;code&gt;This&lt;/code&gt; is a view conversion to specific type &lt;code&gt;Root&lt;/code&gt;. However, the second call is dispatching, since the parameter &lt;code&gt;This&lt;/code&gt; is converted to the class-wide type. The call dispatches to the overriding &lt;code&gt;Op2&lt;/code&gt;.

The second call &lt;code&gt;Op1 (C)&lt;/code&gt; is a dispatching call to the inherited &lt;code&gt;Op1&lt;/code&gt; and behaves exactly as the first.
To understand what happens here, the implicitly defined inherited &lt;code&gt;Op1&lt;/code&gt; has a body calling the parent operation with a view conversion of the parameter:

  {{ada/kw|procedure}} Op1 (This: Derived) {{ada/kw|is}}
  {{ada/kw|begin}}
    Op1 (Root (This));  -- view conversion
  {{ada/kw|end}} Op1;

''This is very different from how other OO languages behave.'' In other OO languages, a method is either dispatching or not. In Ada, a routine is either ''available'' for dispatching or not. Whether or not dispatching is actually ''used'' for a given call depends on the way that the object's type is specified at that call point. For programmers accustomed to other OO languages, it can come as quite a surprise that calls from a dispatchable routine to other routines on the same object are, by default, ''not'' (dynamically) dispatched.

Similarly surprising but less commonly encountered, calls from a non-dispatchable routine for a tagged type to other routines on the same object are, by default, ''dispatched'':

  {{ada/kw|type}} Root {{ada/kw|is}} {{ada/kw|tagged}} {{ada/kw|private}};
  {{ada/kw|procedure}} Op1 (This: Root'Class);
  {{ada/kw|procedure}} Op2 (This: Root);
 
  {{ada/kw|type}} Derived {{ada/kw|is}} {{ada/kw|new}} Root {{ada/kw|with}} {{ada/kw|private}};
  -- Derived does '''not''' inherit Op1, rather Op1 is applicable to Derived.
  {{ada/kw|overriding}} {{ada/kw|procedure}} Op2 (This: Derived);
 
  {{ada/kw|procedure}} Op1 (This: Root'Class) {{ada/kw|is}}
  {{ada/kw|begin}}
    ...
    Op2 (This);               -- dispatching
    Op2 (Root (This));        -- static call
    This.Op2;                 -- dispatching (new syntax since Ada 2005)
    (Root (This)).Op2;        -- static call (new syntax since Ada 2005)
    ...
  {{ada/kw|end}} Op1;
 
  D: Derived;
  C: Root'Class := D;
 
  Op1 (D);  -- static call
  Op1 (C);  -- static call
  D.Op1;    -- static call (new syntax since Ada 2005)
  C.Op1;    -- static call (new syntax since Ada 2005)

Note that calls on Op1 are always static, since Op1 is ''not'' inherited. Its parameter type is classwide, so the operation is ''applicable'' to all types derived from Root. (Op2 has an entry for each type derived from Root in the dispatch table. There is no such dispatch table for Op1; rather there is only one such operation for all types in the class.)

==== Run-time type identification ====

Run-time type identification allows the program to (indirectly or directly) query the tag of an object at run time to determine which type the object belongs to.
This feature, obviously, makes sense only in the context of polymorphism and dynamic dispatching, so works only on tagged types.

You can determine whether an object belongs to a certain class of types, or to a specific type, by means of the membership test {{Ada/kw|in}}, like this:

 {{Ada/kw|type}} Base    {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|private}};
 {{Ada/kw|type}} Derived {{Ada/kw|is}} {{Ada/kw|new}} Base    {{Ada/kw|with}} {{Ada/kw|private}};
 {{Ada/kw|type}} Leaf    {{Ada/kw|is}} {{Ada/kw|new}} Derived {{Ada/kw|with}} {{Ada/kw|private}};
 
 ...
 {{Ada/kw|procedure}} Explicit_Dispatch (This : {{Ada/kw|in}} Base'Class) {{Ada/kw|is}}
 {{Ada/kw|begin}}
    {{Ada/kw|if}} This {{Ada/kw|in}} Leaf {{Ada/kw|then}} ... {{Ada/kw|end if}};
    {{Ada/kw|if}} This {{Ada/kw|in}} Derived'Class {{Ada/kw|then}} ... {{Ada/kw|end if}};
 {{Ada/kw|end}} Explicit_Dispatch;

Thanks to the strong typing rules of Ada, run-time type identification is in fact rarely needed; the distinction between class-wide and specific types usually allows the programmer to ensure objects are of the appropriate type without resorting to this feature.

Additionally, the reference manual defines &lt;code&gt;package Ada.Tags&lt;/code&gt; (RM 3.9(6/2)), attribute &lt;code&gt;'Tag&lt;/code&gt; (RM 3.9(16,18)), and &lt;code&gt;function Ada.Tags.Generic_Dispatching_Constructor&lt;/code&gt; (RM 3.9(18.2/2)), which enable direct manipulation with tags.

=== Creating Objects ===

The Language Reference Manual's section on
{{Ada/RM|3|3|title=Objects and Named Numbers}} states when an object
is created, and destroyed again. This subsection illustrates
how objects are created.

The LRM section starts,
{{Quote|''Objects are created at run time and contain a value of a given type. An object can be created and initialized as part of elaborating a declaration, evaluating an allocator, aggregate, or function_call''.|}}

For example, assume a typical hierarchy of
object oriented types: a top-level type &lt;code&gt;Person&lt;/code&gt;,
a &lt;code&gt;Programmer&lt;/code&gt; type derived from &lt;code&gt;Person&lt;/code&gt;,
and possibly more kinds of persons. Each person has a name; assume &lt;code&gt;Person&lt;/code&gt;
objects to have a &lt;code&gt;Name&lt;/code&gt; component.
Likewise, each &lt;code&gt;Person&lt;/code&gt; has a &lt;code&gt;Gender&lt;/code&gt; component.
The &lt;code&gt;Programmer&lt;/code&gt; type inherits the components and the operations
of the &lt;code&gt;Person&lt;/code&gt; type, so &lt;code&gt;Programmer&lt;/code&gt; objects
have a &lt;code&gt;Name&lt;/code&gt; and a &lt;code&gt;Gender&lt;/code&gt; component, too.
&lt;code&gt;Programmer&lt;/code&gt; objects may have additional components specific
to programmers.

Objects of a tagged type are created the same way 
as objects of any type.
The second LRM sentence says, for example, that an object will be created when you
declare a variable or a constant of a type.
For the tagged type &lt;code&gt;Person&lt;/code&gt;,

 {{Ada/keyword|declare}}
    P{{Ada/delimiter|:}} Person{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
    Text_IO{{Ada/delimiter|.}}Put_Line{{Ada/delimiter|(}}"The name is " {{Ada/operator|&amp;}} P{{Ada/delimiter|.}}Name{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 {{Ada/keyword|end}}{{Ada/delimiter|;}}

Nothing special so far. Just like any ordinary variable declaration
this O-O one is elaborated. The result of elaboration is an object named &lt;code&gt;P&lt;/code&gt;
of type &lt;code&gt;Person&lt;/code&gt;.  However, &lt;code&gt;P&lt;/code&gt; has only default
name and gender value components. These are likely not useful ones.
One way of giving initial values to the object's components is
to assign an aggregate.

 {{Ada/keyword|declare}}
    P{{Ada/delimiter|:}} Person {{Ada/delimiter|1=:=}} {{Ada/delimiter|(}}Name {{Ada/delimiter|1==&gt;}} "Scorsese"{{Ada/delimiter|,}} Gender {{Ada/delimiter|1==&gt;}} Male{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
    Text_IO{{Ada/delimiter|.}}Put_Line{{Ada/delimiter|(}}"The name is " {{Ada/operator|&amp;}} P{{Ada/delimiter|.}}Name{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 {{Ada/keyword|end}}{{Ada/delimiter|;}}

The parenthesized expression after := is called an ''aggregate''
({{Ada/RM|4|3|title=Aggregates}}).

Another way to create an object that is mentioned in the LRM
paragraph is to call a function. An object will be created as the
return value of a function call.
Therefore, instead of using an aggregate of initial values,
we might call a function returning an object.

Introducing proper O-O information
hiding, we change the package
containing the &lt;code&gt;Person&lt;/code&gt; type so that &lt;code&gt;Person&lt;/code&gt;
becomes a private type. To enable clients of the package to construct &lt;code&gt;Person&lt;/code&gt;
objects we declare a function that returns them. (The function may
do some interesting construction work on the objects. For instance, the aggregate above will most probably raise the exception Constraint_Error depending on the name string supplied; the function can mangle the name so that it matches the declaration of the component.) We also declare
a function that returns the name of &lt;code&gt;Person&lt;/code&gt; objects.

 {{Ada/keyword|package}} Persons {{Ada/keyword|is}}
 
    {{Ada/keyword|type}} Person {{Ada/keyword|is}} {{Ada/keyword|tagged}} {{Ada/keyword|private}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|function}} Make {{Ada/delimiter|(}}Name{{Ada/delimiter|:}} String{{Ada/delimiter|;}} Sex{{Ada/delimiter|:}} Gender_Type{{Ada/delimiter|)}} {{Ada/keyword|return}} Person{{Ada/delimiter|;}}
 
    {{Ada/keyword|function}} Name {{Ada/delimiter|(}}P{{Ada/delimiter|:}} Person{{Ada/delimiter|)}} {{Ada/keyword|return}} String{{Ada/delimiter|;}}
 
 {{Ada/keyword|private}}
    {{Ada/keyword|type}} Person {{Ada/keyword|is}} {{Ada/keyword|tagged}}
       {{Ada/keyword|record}}
          Name   {{Ada/delimiter|:}} String {{Ada/delimiter|(}}1 {{Ada/delimiter|..}} 10{{Ada/delimiter|)}}{{Ada/delimiter|;}}
          Gender {{Ada/delimiter|:}} Gender_Type{{Ada/delimiter|;}}
       {{Ada/keyword|end}} {{Ada/keyword|record}}{{Ada/delimiter|;}}
 
 {{Ada/keyword|end}} Persons{{Ada/delimiter|;}}

Calling the &lt;code&gt;Make&lt;/code&gt; function results in an
object which can be used for initialization.
Since the &lt;code&gt;Person&lt;/code&gt; type is '''private''' we can no longer refer to the &lt;code&gt;Name&lt;/code&gt;
component of &lt;code&gt;P&lt;/code&gt;.
But there is a corresponding function &lt;code&gt;Name&lt;/code&gt; declared
with type &lt;code&gt;Person&lt;/code&gt; making it a socalled primitive operation.
(The component and the function in this example are both named &lt;code&gt;Name&lt;/code&gt;
However, we can choose a different name for either
if we want.)

 {{Ada/keyword|declare}}
    P{{Ada/delimiter|:}} Person {{Ada/delimiter|1=:=}} Make {{Ada/delimiter|(}}Name {{Ada/delimiter|1==&gt;}} "Orwell"{{Ada/delimiter|,}} Sex {{Ada/delimiter|1==&gt;}} Male{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
    Text_IO{{Ada/delimiter|.}}Put_Line{{Ada/delimiter|(}}"The name is " {{Ada/operator|&amp;}} Name{{Ada/delimiter|(}}P{{Ada/delimiter|)}}{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 {{Ada/keyword|end}}{{Ada/delimiter|;}}

Objects can be copied into another. The target object is first destroyed.
Then the component values of the source object are assigned to the
corresponding components of the target object. In the following example,
the default initialized &lt;code&gt;P&lt;/code&gt; gets a copy of one of the objects
created by the &lt;code&gt;Make&lt;/code&gt; calls.

 {{Ada/keyword|declare}}
    P{{Ada/delimiter|:}} Person{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
    {{Ada/keyword|if}} 2001 {{Ada/op|&gt;}} 1984 {{Ada/keyword|then}}
       P {{Ada/delimiter|1=:=}} Make {{Ada/delimiter|(}}Name {{Ada/delimiter|1==&gt;}} "Kubrick"{{Ada/delimiter|,}} Sex {{Ada/delimiter|1==&gt;}} Male{{Ada/delimiter|)}}{{Ada/delimiter|;}}
    {{Ada/keyword|else}}
       P {{Ada/delimiter|1=:=}} Make {{Ada/delimiter|(}}Name {{Ada/delimiter|1==&gt;}} "Orwell"{{Ada/delimiter|,}} Sex {{Ada/delimiter|1==&gt;}} Male{{Ada/delimiter|)}}{{Ada/delimiter|;}}
    {{Ada/keyword|end}} {{Ada/keyword|if}}{{Ada/delimiter|;}} 
 
    Text_IO{{Ada/delimiter|.}}Put_Line{{Ada/delimiter|(}}"The name is " {{Ada/operator|&amp;}} Name{{Ada/delimiter|(}}P{{Ada/delimiter|)}}{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 {{Ada/keyword|end}}{{Ada/delimiter|;}}


So far there is no mention of the &lt;code&gt;Programmer&lt;/code&gt; type
derived from &lt;code&gt;Person&lt;/code&gt;.
There is no polymorphism yet, and likewise initialization
does not yet mention inheritance.
Before dealing with &lt;code&gt;Programmer&lt;/code&gt; objects and their initialization
a few words about class-wide types are in order.

=== More details on primitive operations ===

Remember what we said before about [[#Primitive_operations|"Primitive Operations"]].
Primitive operations are:
* subprograms taking a parameter of the tagged type;
* functions returning an object of the tagged type;
* subprograms taking a parameter of an ''anonymous access type'' to the tagged type;
* In Ada 2005 only, functions returning an ''anonymous access type'' to the tagged type;

Additionally, primitive operations must be declared before the type is ''frozen'' (the concept of freezing will be explained later):

Examples:

 {{Ada/kw|package}} X {{Ada/kw|is}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|null}} {{Ada/kw|record}};
 
    {{Ada/kw|procedure}} Primitive_1 (This : {{Ada/kw|in}}     Object);
    {{Ada/kw|procedure}} Primitive_2 (That :    {{Ada/kw|out}} Object);
    {{Ada/kw|procedure}} Primitive_3 (Me   : {{Ada/kw|in}} {{Ada/kw|out}} Object);
    {{Ada/kw|procedure}} Primitive_4 (Them : {{Ada/kw|access}} Object);
    {{Ada/kw|function}}  Primitive_5 {{Ada/kw|return}} Object;
    {{Ada/kw|function}}  Primitive_6 (Everyone : Boolean) {{Ada/kw|return}} {{Ada/kw|access}} Object;
 {{Ada/kw|end}} X;

All of these subprograms are primitive operations.

A primitive operation can also take parameters of the same or other types; also, the controlling operand does not have to be the first parameter:

 {{Ada/kw|package}} X {{Ada/kw|is}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|null}} {{Ada/kw|record}};
 
    {{Ada/kw|procedure}} Primitive_1 (This : {{Ada/kw|in}} Object; Number : {{Ada/kw|in}} Integer);
    {{Ada/kw|procedure}} Primitive_2 (You  : {{Ada/kw|in}} Boolean; That : {{Ada/kw|out}} Object);
    {{Ada/kw|procedure}} Primitive_3 (Me, Her : {{Ada/kw|in}} {{Ada/kw|out}} Object);
 {{Ada/kw|end}} X;

The definition of primitive operations specifically excludes named access types and class-wide types as well as operations not defined immediately in the same declarative region. Counter-examples:

 {{Ada/kw|package}} X {{Ada/kw|is}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|null}} {{Ada/kw|record}};
    {{Ada/kw|type}} Object_Access {{Ada/kw|is}} {{Ada/kw|access}} Object;
    {{Ada/kw|type}} Object_Class_Access {{Ada/kw|is}} {{Ada/kw|access}} Object'Class;
 
    {{Ada/kw|procedure}} Not_Primitive_1 (This : {{Ada/kw|in}}     Object'Class);
    {{Ada/kw|procedure}} Not_Primitive_2 (This : {{Ada/kw|in}} {{Ada/kw|out}} Object_Access);
    {{Ada/kw|procedure}} Not_Primitive_3 (This :    {{Ada/kw|out}} Object_Class_Access);
    {{Ada/kw|function}}  Not_Primitive_4 {{Ada/kw|return}} Object'Class;
  
    {{Ada/kw|package}} Inner {{Ada/kw|is}}
        {{Ada/kw|procedure}} Not_Primitive_5 (This : {{Ada/kw|in}} Object);
    {{Ada/kw|end}} Inner;
 {{Ada/kw|end}} X;

==== Advanced topic: Freezing rules ====

Freezing rules ([http://www.adaic.com/standards/05rm/html/RM-13-14.html ARM 13.14]) are perhaps the most complex part of the Ada language definition; this is because the standard tries to describe freezing as unambiguously as possible.
Also, that part of the language definition deals with freezing of all entities, including complicated situations like generics and objects reached by dereferencing access values.
You can, however, get an intuitive understanding of freezing of tagged types if you understand [[#Advanced_topic:_How_dynamic_dispatching_works|how dynamic dispatching works]].
In that section, we saw that the compiler emits a table of primitive operations for each tagged type.
The point in the program text where this happens is the point where the tagged type is ''frozen'', i.e. the point where the table becomes complete.
After the type is frozen, no more primitive operations can be added to it.

This point is the earliest of:
* the end of the package spec where the tagged type is declared
* the appearance of the first type derived from the tagged type

Example:

 {{ada/kw|package}} X {{ada/kw|is}}
 
   {{ada/kw|type}} Object {{ada/kw|is}} {{ada/kw|tagged}} {{ada/kw|null}} {{ada/kw|record}};
   {{ada/kw|procedure}} Primitive_1 (This: {{ada/kw|in}} Object);
 
   -- this declaration freezes Object
   {{ada/kw|type}} Derived {{ada/kw|is}} {{ada/kw|new}} Object {{ada/kw|with}} {{ada/kw|null}} {{ada/kw|record}};
 
   -- illegal: declared after Object is frozen
   {{ada/kw|procedure}} Primitive_2 (This: {{ada/kw|in}} Object);
 
 {{ada/kw|end}} X;

Intuitively: at the point where Derived is declared, the compiler starts a new table of primitive operations for the derived type.  This new table, initially, is equal to the table of the primitive operations of the parent type, &lt;code&gt;Object&lt;/code&gt;.  Hence, &lt;code&gt;Object&lt;/code&gt; must freeze.

* the declaration of a variable of the tagged type

Example:

 {{ada/kw|package}} X {{ada/kw|is}}
 
   {{ada/kw|type}} Object {{ada/kw|is}} {{ada/kw|tagged}} {{ada/kw|null}} {{ada/kw|record}};
   {{ada/kw|procedure}} Primitive_1 (This: {{ada/kw|in}} Object);
 
   V: Object;  -- this declaration freezes Object

   -- illegal: Primitive operation declared after Object is frozen
   {{ada/kw|procedure}} Primitive_2 (This: {{ada/kw|in}} Object);
 
 {{ada/kw|end}} X;

Intuitively: after the declaration of &lt;code&gt;V&lt;/code&gt;, it is possible to call any of the primitive operations of the type on &lt;code&gt;V&lt;/code&gt;.  Therefore, the list of primitive operations must be known and complete, i.e. frozen.

* The completion (''not'' the declaration, if any) of a constant of the tagged type:

 {{ada/kw|package}} X {{ada/kw|is}}
 
   {{ada/kw|type}} Object {{ada/kw|is}} {{ada/kw|tagged}} {{ada/kw|null}} {{ada/kw|record}};
   {{ada/kw|procedure}} Primitive_1 (This: {{ada/kw|in}} Object);
 
   -- this declaration does NOT freeze Object
   Deferred_Constant: {{ada/kw|constant}} Object;
 
   {{ada/kw|procedure}} Primitive_2 (This : {{ada/kw|in}} Object); -- OK
 
 {{ada/kw|private}}

   -- only the completion freezes Object
   Deferred_Constant: {{ada/kw|constant}} Object := ({{ada/kw|null}} {{ada/kw|record}});
 
   -- illegal: declared after Object is frozen
   {{ada/kw|procedure}} Primitive_3 (This: {{ada/kw|in}} Object);
 
  {{ada/kw|end}} X;

=== New features of Ada 2005 ===

{{Ada/2005}} 

Ada 2005 adds overriding indicators, allows anonymous access types in more places and offers the object.method notation.

==== Overriding indicators ====

The new keyword {{Ada/keyword|overriding}} can be used to indicate whether an operation overrides an inherited subprogram or not. Its use is optional because of upward-compatibility with Ada 95. For example:

 {{Ada/kw|package}} X {{Ada/kw|is}}
     {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|null}} {{Ada/kw|record}};
 
    {{Ada/kw|function}}  Primitive {{Ada/kw|return}} {{Ada/kw|access}} Object; {{Ada/comment|new in Ada 2005}}
 
    {{Ada/kw|type}} Derived_Object {{Ada/kw|is}} {{Ada/kw|new}} Object {{Ada/kw|with}} {{Ada/kw|null}} {{Ada/kw|record}};
 
    {{Ada/kw|not overriding}} {{Ada/comment|new optional keywords in Ada 2005}}
    {{Ada/kw|procedure}} Primitive (This : {{Ada/kw|in}} Derived_Object); {{Ada/comment|new primitive operation}}
 
    {{Ada/kw|overriding}}
    {{Ada/kw|function}}  Primitive {{Ada/kw|return access}} Derived_Object;
 {{Ada/kw|end}} X;

The compiler will check the desired behaviour.

This is a good programming practice because it avoids some nasty bugs like not overriding an inherited subprogram because the programmer spelt the identifier incorrectly, or because a new parameter is added later in the parent type.

It can also be used with abstract operations, with renamings, or when instantiating a generic subprogram:

 {{Ada/kw|not}} {{Ada/kw|overriding}}
 {{Ada/kw|procedure}} Primitive_X (This : {{Ada/kw|in}} Object) {{Ada/kw|is}} {{Ada/kw|abstract}};
  
 {{Ada/kw|overriding}}
 {{Ada/kw|function}}  Primitive_Y {{Ada/kw|return}} Object {{Ada/kw|renames}} Some_Other_Subprogram;
 
 {{Ada/kw|not}} {{Ada/kw|overriding}}
 {{Ada/kw|procedure}} Primitive_Z (This : {{Ada/kw|out}} Object)
       {{Ada/kw|is}} {{Ada/kw|new}} Generic_Procedure (Element =&gt; Integer);

==== Object.Method notation ====

We have already seen this notation:

 {{Ada/kw|package}} X {{Ada/kw|is}}
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|null}} {{Ada/kw|record}};
 
    {{Ada/kw|procedure}} Primitive (This: {{Ada/kw|in}} Object; That: {{ada/kw|in}} Boolean);
 {{Ada/kw|end}} X;

 {{Ada/kw|with}} X;
 {{Ada/kw|procedure}} Main {{Ada/kw|is}}
    Obj : X.Object;
 {{Ada/kw|begin}}
    Obj.Primitive (That =&gt; True); {{Ada/comment|Ada 2005 object.method notation}}
 {{Ada/kw|end}} Main;

This notation is only available for primitive operations where the controlling parameter is the ''first'' parameter.

=== Abstract types ===

A tagged type can also be abstract (and thus can have abstract operations):

 {{Ada/kw|package}} X {{Ada/kw|is}}
 
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|abstract}} {{Ada/kw|tagged}} …;
 
    {{Ada/kw|procedure}} One_Class_Member      (This : {{Ada/kw|in}}     Object);
    {{Ada/kw|procedure}} Another_Class_Member  (This : {{Ada/kw|in}} {{Ada/kw|out}} Object);
    {{Ada/kw|function}}  Abstract_Class_Member {{Ada/kw|return}} Object  {{Ada/kw|is}} {{Ada/kw|abstract}};
 
 {{Ada/kw|end}} X;

An abstract operation cannot have any body, so derived types are forced to override it (unless those derived types are also abstract). See next section about interfaces for more information about this.

The difference with a non-abstract tagged type is that you cannot declare any variable of this type. However, you can declare an access to it, and use it as a parameter of a class-wide operation.

=== Multiple Inheritance via Interfaces ===

{{Ada/2005|OO}}

Interfaces allow for a limited form of multiple inheritance (taken from Java). On a semantic level they are similar to an "abstract tagged null record" as they may have primitive operations but cannot hold any data and thus these operations cannot have a body, they are either declared {{Ada/kw|abstract}} or {{Ada/kw|null}}. ''Abstract'' means the operation has to be overridden, ''null'' means the default implementation is a null body, i.e. one that does nothing.

An interface is declared with:

 {{Ada/kw|package}} Printable {{Ada/kw|is}}
 
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|interface}};
 
    {{Ada/kw|procedure}} Class_Member_1 (This : {{Ada/kw|in}}     Object) {{Ada/kw|is}} {{Ada/kw|abstract}};
    {{Ada/kw|procedure}} Class_Member_2 (This :    {{Ada/kw|out}} Object) {{Ada/kw|is}} {{Ada/kw|null}};
 
 {{Ada/kw|end}} Printable;

You implement an {{Ada/kw|interface}} by adding it to a concrete ''class'':

 {{Ada/kw|with}} Person;
 
 {{Ada/kw|package}} Programmer {{Ada/kw|is}}
 
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|new}} Person.Object
                   {{Ada/kw|and}} Printable.Object
    {{Ada/kw|with}} 
       {{Ada/kw|record}}
          Skilled_In : Language_List;
       {{Ada/kw|end}} {{Ada/kw|record}};
 
    {{Ada/kw|overriding}}
    {{Ada/kw|procedure}} Class_Member_1   (This : {{Ada/kw|in}} Object);
 
    {{Ada/kw|not}} {{Ada/kw|overriding}}
    {{Ada/kw|procedure}} New_Class_Member (This : Object; That : String);
 
 {{Ada/kw|end}} Programmer;

As usual, all inherited abstract operations must be overridden although ''null subprograms'' ones need not.

Such a type may implement a list of interfaces (called the ''progenitors''), but can have only one ''parent''. The parent may be a concrete type or also an interface.

 {{Ada/kw|type}} Derived {{Ada/kw|is}} {{Ada/kw|new}} Parent {{Ada/kw|and}} Progenitor_1 {{Ada/kw|and}} Progenitor_2 ... {{Ada/kw|with}} ...;

=== Multiple Inheritance via Mix-in ===

Ada supports multiple inheritance of ''interfaces'' (see above), but only single inheritance of ''implementation''.  This means that a tagged type can ''implement'' multiple interfaces but can only ''extend'' a single ancestor tagged type.

This can be problematic if you want to add behavior to a type that already extends another type; for example, suppose you have

 {{Ada/kw|type}} Base {{Ada/kw|is tagged private}};
 {{Ada/kw|type}} Derived {{Ada/kw|is new}} Base {{Ada/kw|with private}};

and you want to make &lt;code&gt;Derived&lt;/code&gt; controlled, i.e. add the behavior that &lt;code&gt;Derived&lt;/code&gt; controls its initialization, assignment and finalization.  Alas you cannot write:

 {{Ada/kw|type}} Derived {{Ada/kw|is new}} Base {{Ada/kw|and}} Ada.Finalization.Controlled {{Ada/kw|with private}}; {{Ada/comment|illegal}}

since &lt;code&gt;Ada.Finalization&lt;/code&gt; for historical reasons does not define interfaces &lt;code&gt;Controlled&lt;/code&gt; and &lt;code&gt;Limited_Controlled&lt;/code&gt;, but abstract types.

If your base type is not limited, there is no good solution for this; you have to go back to the root of the class and make it controlled. (The reason will become obvious presently.)

For limited types however, another solutions is the use of a mix-in:

 {{Ada/kw|type}} Base {{Ada/kw|is tagged limited private}};
 {{Ada/kw|type}} Derived;
 
 {{Ada/kw|type}} Controlled_Mix_In (Enclosing: {{Ada/kw|access}} Derived) {{Ada/kw|is}}
   {{Ada/kw|new}} Ada.Finalization.Limited_Controlled {{Ada/kw|with null record}};
 
 {{Ada/kw|overriding procedure}} Initialize (This: {{Ada/kw|in out}} Controlled_Mix_In);
 {{Ada/kw|overriding procedure}} Finalize   (This: {{Ada/kw|in out}} Controlled_Mix_In);
 
 {{Ada/kw|type}} Derived {{Ada/kw|is new}} Base {{Ada/kw|with record}}
   Mix_In: Controlled_Mix_In (Enclosing =&gt; Derived'Access); {{Ada/comment|special syntax here}}
   {{Ada/comment|other components here...}}
 {{Ada/kw|end record}};

This special kind of mix-in is an object with an access discriminant that references its enclosing object (also known as ''Rosen trick'').  In the declaration of the &lt;code&gt;Derived&lt;/code&gt; type, we initialize this discriminant with a special syntax: &lt;code&gt;Derived'Access&lt;/code&gt; really refers to an access value to the ''current instance'' of type &lt;code&gt;Derived&lt;/code&gt;. Thus the access discriminant allows the mix-in to see its enclosing object and all its components; therefore it can initialize and finalize its enclosing object:

 {{Ada/kw|overriding procedure}} Initialize (This: {{Ada/kw|in out}} Controlled_Mix_In) {{Ada/kw|is}}
   Enclosing: Derived {{Ada/kw|renames}} This.Enclosing.{{Ada/kw|all}};
 {{Ada/kw|begin}}
   {{Ada/comment|initialize Enclosing...}}
 {{Ada/kw|end}} Initialize;

and similarly for &lt;code&gt;Finalize&lt;/code&gt;.

The reason why this does not work for non-limited types is the self-referentiality via the discriminant. Imagine you have two variables of such a non-limited type and assign one to the other:

 X := Y;

In an assignment statement, &lt;code&gt;Adjust&lt;/code&gt; is called only ''after'' &lt;code&gt;Finalize&lt;/code&gt; of the target &lt;code&gt;X&lt;/code&gt; and so cannot provide the new value of the discriminant. Thus &lt;code&gt;X.Mixin_In.Enclosing&lt;/code&gt; will inevitably reference &lt;code&gt;Y&lt;/code&gt;.

Now let's further extend our hierarchy:

 {{Ada/kw|type}} Further {{Ada/kw|is new}} Derived {{Ada/kw|with null record}};
 
 {{Ada/kw|overriding procedure}} Initialize (This: {{Ada/kw|in out}} Further);
 {{Ada/kw|overriding procedure}} Finalize   (This: {{Ada/kw|in out}} Further);

Oops, this does not work because there are no corresponding procedures for &lt;code&gt;Derived&lt;/code&gt;, yet - so let's quickly add them.

 {{Ada/kw|type}} Base {{Ada/kw|is tagged limited private}};
 {{Ada/kw|type}} Derived;
 
 {{Ada/kw|type}} Controlled_Mix_In (Enclosing: {{Ada/kw|access}} Derived) {{Ada/kw|is}}
   {{Ada/kw|new}} Ada.Finalization.Limited_Controlled {{Ada/kw|with null record}};
 
 {{Ada/kw|overriding procedure}} Initialize (This: {{Ada/kw|in out}} Controlled_Mix_In);
 {{Ada/kw|overriding procedure}} Finalize   (This: {{Ada/kw|in out}} Controlled_Mix_In);
 
 {{Ada/kw|type}} Derived {{Ada/kw|is new}} Base {{Ada/kw|with record}}
   Mix_In: Controlled_Mix_In (Enclosing =&gt; Derived'Access);  {{Ada/comment|special syntax here}}
   {{Ada/comment|other components here...}}
 {{Ada/kw|end record}};
 
 {{Ada/kw|not overriding procedure}} Initialize (This: {{Ada/kw|in out}} Derived);  {{Ada/comment|sic, they are new}}
 {{Ada/kw|not overriding procedure}} Finalize   (This: {{Ada/kw|in out}} Derived);
 
 {{Ada/kw|type}} Further {{Ada/kw|is new}} Derived {{Ada/kw|with null record}};
 
 {{Ada/kw|overriding procedure}} Initialize (This: {{Ada/kw|in out}} Further);
 {{Ada/kw|overriding procedure}} Finalize   (This: {{Ada/kw|in out}} Further);

We have of course to write &lt;code&gt;not overriding&lt;/code&gt; for the procedures on &lt;code&gt;Derived&lt;/code&gt; because there is indeed nothing they could override. The bodies are

 {{Ada/kw|not overriding procedure}} Initialize (This: {{Ada/kw|in out}} Derived) {{Ada/kw|is}}
 {{Ada/kw|begin}}
   {{Ada/comment|initialize Derived...}}
 {{Ada/kw|end}} Initialize;
 
 {{Ada/kw|overriding procedure}} Initialize (This: {{Ada/kw|in out}} Controlled_Mix_In) {{Ada/kw|is}}
   Enclosing: Derived {{Ada/kw|renames}} This.Enclosing.{{Ada/kw|all}};
 {{Ada/kw|begin}}
   Initialize (Enclosing);
 {{Ada/kw|end}} Initialize;

To our dismay, we have to learn that &lt;code&gt;Initialize/Finalize&lt;/code&gt; for objects of type &lt;code&gt;Further&lt;/code&gt; will not be called, instead those for the parent &lt;code&gt;Derived&lt;/code&gt;. Why?

 {{Ada/kw|declare}}
   X: Further;  -- Initialize (Derived (X)) is called here
 {{Ada/kw|begin}}
   null;
 {{Ada/kw|end}};  -- Finalize (Derived (X)) is called here

The reason is that the mix-in defines the local object &lt;code&gt;Enclosing&lt;/code&gt; to be of type &lt;code&gt;Derived&lt;/code&gt; in the renames-statement above.
To cure this, we have necessarily to use the dreaded redispatch (shown in different but equivalent notations):

 {{Ada/kw|overriding procedure}} Initialize (This: {{Ada/kw|in out}} Controlled_Mix_In) {{Ada/kw|is}}
   Enclosing: Derived {{Ada/kw|renames}} This.Enclosing.{{Ada/kw|all}};
 {{Ada/kw|begin}}
   Initialize (Derived'Class (Enclosing));
 {{Ada/kw|end}} Initialize;
 
 {{Ada/kw|overriding procedure}} Finalize (This: {{Ada/kw|in out}} Controlled_Mix_In) {{Ada/kw|is}}
   Enclosing: Derived'Class {{Ada/kw|renames}} Derived'Class (This.Enclosing.{{Ada/kw|all}});
 {{Ada/kw|begin}}
   Enclosing.Finalize;
 {{Ada/kw|end}} Finalize;
 
 {{Ada/kw|declare}}
   X: Further;  -- Initialize (X) is called here
 {{Ada/kw|begin}}
   null;
 {{Ada/kw|end}};  -- Finalize (X) is called here

Alternatively (and presumably better still) is to write

 {{Ada/kw|type}} Controlled_Mix_In (Enclosing: {{Ada/kw|access}} Derived'Class) {{Ada/kw|is}}
   {{Ada/kw|new}} Ada.Finalization.Limited_Controlled {{Ada/kw|with null record}};

Then we automatically get redispatch and can omit the type conversions on &lt;code&gt;Enclosing&lt;/code&gt;.

== Class names ==

Both the class package and the class record need a name. In theory they may have the same name, but in practice this leads to nasty &lt;small&gt;(because of unintutive error messages)&lt;/small&gt; name clashes when you use the &lt;code&gt;{{Ada/kw|use}}&lt;/code&gt; clause. So over time three de facto naming standards have been commonly used.

=== Classes/Class ===

The package is named by a plural noun and the record is named by the corresponding singular form.

 {{Ada/kw|package}} Persons {{Ada/kw|is}}
 
    {{Ada/kw|type}} Person {{Ada/kw|is}} {{Ada/kw|tagged}} 
       {{Ada/kw|record}}
          Name   : String (1 .. 10);
          Gender : Gender_Type;
       {{Ada/kw|end}} {{Ada/kw|record}};
 
 {{Ada/kw|end}} Persons;

This convention is the usually used in Ada's built-in libraries.

Disadvantage: Some "multiples" are tricky to spell, especially for those of us who aren't native English speakers.

=== Class/Object ===

The package is named after the class, the record is just named Object.

 {{Ada/kw|package}} Person {{Ada/kw|is}}
 
    {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|tagged}} 
       {{Ada/kw|record}}
          Name   : String (1 .. 10);
          Gender : Gender_Type;
       {{Ada/kw|end}} {{Ada/kw|record}};
 
 {{Ada/kw|end}} Person;

Most [[w:Unified Modeling Language|UML]] and [[w:Interface description language|IDL]] code generators use this technique.

Disadvantage: You can't use the &lt;code&gt;{{Ada/kw|use}}&lt;/code&gt; clause on more than one such class packages at any one time. However you can always use the "type" instead of the package.

=== Class/Class_Type ===

The package is named after the class, the record is postfixed with ''_Type''.

 {{Ada/kw|package}} Person {{Ada/kw|is}}
 
    {{Ada/kw|type}} Person_Type {{Ada/kw|is}} {{Ada/kw|tagged}} 
       {{Ada/kw|record}}
          Name   : String (1 .. 10);
          Gender : Gender_Type;
       {{Ada/kw|end}} {{Ada/kw|record}};
 
 {{Ada/kw|end}} Person;

Disadvantage: lots of ugly "_Type" postfixes.

== Object-Oriented Ada for C++ programmers ==

In C++, the construct
&lt;syntaxhighlight lang="c++"&gt;
 struct C {
   virtual void v();
   void w();
   static void u();
 };
&lt;/syntaxhighlight&gt;
is strictly equivalent to the following in Ada:

 {{Ada/kw|package}} P {{Ada/kw|is}}
   {{Ada/kw|type}} C {{Ada/kw|is tagged null record}};
   {{Ada/kw|procedure}} V (This : {{Ada/kw|in out}} C);        {{Ada/comment|primitive operation, will be inherited upon derivation}}
   {{Ada/kw|procedure}} W (This : {{Ada/kw|in out}} C'Class);  {{Ada/comment|not primitive, will not be inherited upon derivation}}
   {{Ada/kw|procedure}} U;
 {{Ada/kw|end}} P;

In C++, member functions implicitly take a parameter &lt;code&gt;this&lt;/code&gt; which is of type &lt;code&gt;C*&lt;/code&gt;.  In Ada, all parameters are explicit.  As a consequence, the fact that &lt;code&gt;u()&lt;/code&gt; does ''not'' take a parameter is implicit in C++ but explicit in Ada.

In C++, &lt;code&gt;this&lt;/code&gt; is a pointer.  In Ada, the explicit &lt;code&gt;This&lt;/code&gt; parameter does not have to be a pointer; all parameters of a tagged type are implicitly passed by reference anyway.

=== Static dispatching ===

In C++, function calls dispatch statically in the following cases:

* the target of the call is an object type
* the member function is non-virtual

For example:
&lt;syntaxhighlight lang="c++"&gt;
 C object;
 object.v();
 object.w();
&lt;/syntaxhighlight&gt;
both dispatch statically.  In particular, the static dispatch for v() may be confusing; this is because object is neither a pointer nor a reference. Ada behaves exactly the same in this respect, except that Ada calls this ''static binding'' rather than ''dispatching'':

 {{Ada/kw|declare}}
    Object : P.C;
 {{Ada/kw|begin}}
    Object.V; {{Ada/comment|statically bound}}
    Object.W; {{Ada/comment|statically bound}}
 {{Ada/kw|end}};

=== Dynamic dispatching ===

In C++, a function call dispatches dynamically if the two following conditions are met simultaneously:

* the target of the call is a pointer or a reference
* the member function is virtual.

For example:
&lt;syntaxhighlight lang="c++"&gt;
 C* object;
 object-&gt;v(); // dynamic dispatch
 object-&gt;w(); // static, non-virtual member function
 object-&gt;u(); // illegal: static member function
 C::u(); // static dispatch
&lt;/syntaxhighlight&gt;
In Ada, a primitive subprogram call dispatches (dynamically) if and only if:

* the target object is of a class-wide type;

Note: In Ada vernacular, the term ''dispatching'' always means ''dynamic''.

For example:

 {{Ada/kw|declare}}
    Object : P.C'Class := ...;
 {{Ada/kw|begin}}
    P.V (Object); {{Ada/comment|dispatching}}
    P.W (Object); {{Ada/comment|statically bound: not a primitive operation}}
    P.U; {{Ada/comment|statically bound}}
 {{Ada/kw|end}};

As can be seen ''there is no need for access types or pointers'' to do dispatching in Ada.  In Ada, ''tagged types are always passed by-reference to subprograms'' without the need for explicit access values.

Also note that in C++, the class serves as:

* the unit of encapsulation (Ada uses packages and visibility for this)
* the type, like in Ada.

As a consequence, you call C::u() in C++ because u() is encapsulated in C, but P.U in Ada since U is encapsulated in the ''package'' P, not the ''type'' C.

=== Class-wide and specific types ===

The most confusing part for C++ programmers is the concept of a "class-wide type".  To help you understand:

* pointers and references in C++ are really, implicitly, class-wide;
* object types in C++ are really specific;
* C++ provides no way to declare the equivalent of:

 {{Ada/kw|type}} C_Specific_Access {{Ada/kw|is access}} C;

* C++ provides no way to declare the equivalent of:

 {{Ada/kw|type}} C_Specific_Access_One {{Ada/kw|is access}} C;
 {{Ada/kw|type}} C_Specific_Access_Two {{Ada/kw|is access}} C;

which, in Ada, are two different, ''incompatible'' types, possibly allocating their memory from different storage pools!

* In Ada, you do ''not'' need access values for dynamic dispatching.
* In Ada, you use access values for dynamic memory management (only) and class-wide types for dynamic dispatching (only).
* In C++, you use pointers and references both for dynamic memory management and for dynamic dispatching.
* In Ada, class-wide types are explicit (with &lt;code&gt;'Class&lt;/code&gt;).
* In C++, class-wide types are implicit (with &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;&amp;&lt;/code&gt;).

=== Constructors ===

in C++, a special syntax declares a constructor:
&lt;syntaxhighlight lang="c++"&gt;
 class C {
    C(/* optional parameters */); // constructor
 };
&lt;/syntaxhighlight&gt;
A constructor cannot be virtual.  A class can have as many constructors, differentiated by their parameters, as necessary.

Ada does not have such constructors. Perhaps they were not deemed necessary since in Ada, any function that returns an object of the tagged type can serve as a kind of constructor. This is however not the same as a real constructor like the C++ one; this difference is most striking in cases of derivation trees (see Finalization below). The Ada constructor subprograms do not have to have a special name and there can be as many constructors as necessary; each function can take parameters as appropriate.

 {{ada/kw|package}} P {{ada/kw|is}}
   {{ada/kw|type}} T is {{ada/kw|tagged}} {{ada/kw|private}};
   {{ada/kw|function}} Make                 {{ada/kw|return}} T;  -- constructor
   {{ada/kw|function}} To_T (From: Integer) {{ada/kw|return}} T;  -- another constructor
   {{ada/kw|procedure}} Make (This: {{ada/kw|out}} T);            -- not a constructor
 {{ada/kw|private}}
   ...
 {{ada/kw|end}} P;

If an Ada constructor function is also a primitive operation (as in the example above), it becomes abstract upon derivation and has to be overridden if the derived type is not itself abstract. If you do not want this, declare such functions in a nested scope.

In C++, one idiom is the ''copy constructor'' and its cousin the ''assignment operator'':
&lt;syntaxhighlight lang="c++"&gt;
 class C {
    C(const C&amp; that); // copies "that" into "this"
    C&amp; operator= (const C&amp; right); // assigns "right" to "this", which is "left"
 };
&lt;/syntaxhighlight&gt;
This copy constructor is invoked implicitly on initialization, e.g.
&lt;syntaxhighlight lang="c++"&gt;
 C a = b; // calls the copy constructor
 C c;
 a = c;   // calls the assignment operator
&lt;/syntaxhighlight&gt;
Ada provides a similar functionality by means of ''controlled types''.  A controlled type is one that extends the predefined type &lt;code&gt;Ada.Finalization.Controlled&lt;/code&gt;:

 {{ada/kw|with}} Ada.Finalization;
 {{ada/kw|package}} P {{ada/kw|is}}
   {{ada/kw|type}} T {{ada/kw|is}} {{ada/kw|new}} Ada.Finalization.Controlled {{ada/kw|with}} {{ada/kw|private}};
   {{ada/kw|function}} Make {{ada/kw|return}} T;  -- constructor
 {{ada/kw|private}}
   {{ada/kw|type}} T {{ada/kw|is}} ... {{ada/kw|end}} {{ada/kw|record}};
   {{ada/kw|overriding}} {{ada/kw|procedure}} Initialize (This: {{ada/kw|in}} {{ada/kw|out}} T);
   {{ada/kw|overriding}} {{ada/kw|procedure}} Adjust     (This: {{ada/kw|in}} {{ada/kw|out}} T); -- copy constructor
 {{ada/kw|end}} P;

Note that Initialize is not a constructor; it resembles the C++ constructor in some way, but is also very different. Suppose you have a type T1 derived from T with an appropriate overriding of Initialize. A real constructor (like the C++ one) would automatically first construct the parent components (T), then the child components. In Ada, this is not automatic. In order to mimic this in Ada, we have to write:

 {{ada/kw|procedure}} Initialize (This: {{ada/kw|in}} {{ada/kw|out}} T1) {{ada/kw|is}}
 {{ada/kw|begin}}
   Initialize (T (This));  -- Don't forget this part!
   ...  -- handle the new components here
 {{ada/kw|end}} Initialize;

The compiler inserts a call to Initialize after each object of type T is allocated when no initial value is given. It also inserts a call to Adjust after each assignment to the object.  Thus, the declarations:

 A: T;
 B: T := X;

will:

* allocate memory for A
* call Initialize (A)
* allocate memory for B
* copy the contents of X to B
* call Adjust (B)

Initialize (B) will not be called because of the explicit initialization.

So, the equivalent of a copy constructor is an overriding of Adjust.

If you would like to provide this functionality to a type that extends another, non-controlled type, see [[#Multiple_Inheritance|"Multiple Inheritance"]].

=== Destructors ===

In C++, a destructor is a member function with only the implicit &lt;code&gt;this&lt;/code&gt; parameter:
&lt;syntaxhighlight lang="c++"&gt;
 class C {
    virtual ~C(); // destructor
 }
&lt;/syntaxhighlight&gt;
While a constructor ''cannot'' be virtual, a destructor ''must'' be virtual if the class is to be used with dynamic dispatch (has virtual methods or derives from a class with virtual methods). C++ classes do not use dynamic dispatch by default, so it can catch some programmers out and wreak havoc in their programs by simply forgetting the keyword &lt;code&gt;virtual&lt;/code&gt;.

In Ada, the equivalent functionality is again provided by controlled types, by overriding the procedure Finalize:

 {{ada/kw|with}} Ada.Finalization;
 {{ada/kw|package}} P {{ada/kw|is}}
    {{ada/kw|type}} T {{ada/kw|is}} {{ada/kw|new}} Ada.Finalization.Controlled {{ada/kw|with}} {{ada/kw|private}};
    {{ada/kw|function}} Make {{ada/kw|return}} T;  -- constructor
 {{ada/kw|private}}
    {{ada/kw|type}} T {{ada/kw|is}} ... {{ada/kw|end}} {{ada/kw|record}};
    {{ada/kw|overriding}} {{ada/kw|procedure}} Finalize (This: {{ada/kw|in}} {{ada/kw|out}} T);  -- destructor
 {{ada/kw|end}} P;

Because Finalize is a primitive operation, it is automatically "virtual"; you cannot, in Ada, forget to make a destructor virtual.

=== Encapsulation: public, private and protected members ===

In C++, the unit of encapsulation is the class; in Ada, the unit of encapsulation is the package.  This has consequences on how an Ada programmer places the various components of an object type.
&lt;syntaxhighlight lang="c++"&gt;
 class C {
 public:
    int a;
    void public_proc();
 protected:
    int b;
    int protected_func();
 private:
    bool c;
    void private_proc();
 };
&lt;/syntaxhighlight&gt;
A way to mimic this C++ class in Ada is to define a hierarchy of types, where the base type is the public part, which must be abstract so that no stand-alone objects of this base type can be defined. It looks like so:

 {{Ada/kw|private}} {{Ada/kw|with}} Ada.Finalization;
 
 {{Ada/kw|package}} CPP {{Ada/kw|is}}
 
   {{Ada/kw|type}} Public_Part {{Ada/kw|is}} {{Ada/kw|abstract}} {{Ada/kw|tagged}} {{Ada/kw|record}}  -- no objects of this type
     A: Integer;
   {{Ada/kw|end}} {{Ada/kw|record}};
 
   {{Ada/kw|procedure}} Public_Proc (This: {{Ada/kw|in}} {{Ada/kw|out}} Public_Part);
 
   {{Ada/kw|type}} Complete_Type {{Ada/kw|is}} {{Ada/kw|new}} Public_Part {{Ada/kw|with}} {{Ada/kw|private}};
 
   -- procedure Public_Proc (This: in out Complete_Type);  -- inherited, implicitly defined
 
 {{Ada/kw|private}}  -- visible for children
 
   {{Ada/kw|type}} Private_Part;  -- declaration stub
   {{Ada/kw|type}} Private_Part_Pointer {{Ada/kw|is}} {{Ada/kw|access}} Private_Part;
 
   {{Ada/kw|type}} Private_Component {{Ada/kw|is}} {{Ada/kw|new}} Ada.Finalization.Controlled {{Ada/kw|with}} {{Ada/kw|record}}
     P: Private_Part_Pointer;
   {{Ada/kw|end}} record;
 
   {{Ada/kw|overriding}} {{Ada/kw|procedure}} Initialize (X: {{Ada/kw|in}} {{Ada/kw|out}} Private_Component);
   {{Ada/kw|overriding}} {{Ada/kw|procedure}} Adjust     (X: {{Ada/kw|in}} {{Ada/kw|out}} Private_Component);
   {{Ada/kw|overriding}} {{Ada/kw|procedure}} Finalize   (X: {{Ada/kw|in}} {{Ada/kw|out}} Private_Component);
 
   {{Ada/kw|type}} Complete_Type {{Ada/kw|is}} {{Ada/kw|new}} Public_Part {{Ada/kw|with}} {{Ada/kw|record}}
     B: Integer;
     P: Private_Component;  -- must be controlled to avoid storage leaks
   {{Ada/kw|end}} {{Ada/kw|record}};
 
   {{Ada/kw|not}} {{Ada/kw|overriding}} {{Ada/kw|procedure}} Protected_Proc (This: Complete_Type);
 
 {{Ada/kw|end}} CPP;

The private part is defined as a stub only, its completion is hidden in the body. In order to make it a component of the complete type, we have to use a pointer since the size of the component is still unknown (the size of a pointer is known to the compiler). With pointers, unfortunately, we incur the danger of memory leaks, so we have to make the private component controlled.

For a little test, this is the body, where the subprogram bodies are provided with identifying prints:

 {{Ada/kw|with}} Ada.Unchecked_Deallocation;
 {{Ada/kw|with}} Ada.Text_IO;
 
 {{Ada/kw|package}} {{Ada/kw|body}} CPP {{Ada/kw|is}}
 
   {{Ada/kw|procedure}} Public_Proc (This: {{Ada/kw|in}} {{Ada/kw|out}} Public_Part) {{Ada/kw|is}}  -- primitive
   {{Ada/kw|begin}}
     Ada.Text_IO.Put_Line ("Public_Proc" &amp; Integer'Image (This.A));
   {{Ada/kw|end}} Public_Proc;
 
   {{Ada/kw|type}} Private_Part {{Ada/kw|is}} {{Ada/kw|record}}  -- complete declaration
     C: Boolean;
   {{Ada/kw|end}} {{Ada/kw|record}};
 
   {{Ada/kw|overriding}} {{Ada/kw|procedure}} Initialize (X: {{Ada/kw|in}} {{Ada/kw|out}} Private_Component) {{Ada/kw|is}}
   {{Ada/kw|begin}}
     X.P := new Private_Part'(C =&gt; True);
     Ada.Text_IO.Put_Line ("Initialize " &amp; Boolean'Image (X.P.C));
   {{Ada/kw|end}} Initialize;
 
   {{Ada/kw|overriding}} {{Ada/kw|procedure Adjust}} (X: {{Ada/kw|in}} {{Ada/kw|out}} Private_Component) {{Ada/kw|is}}
   {{Ada/kw|begin}}
     Ada.Text_IO.Put_Line ("Adjust " &amp; Boolean'Image (X.P.C));
     X.P := new Private_Part'(C =&gt; X.P.C);  -- deep copy
   {{Ada/kw|end}} Adjust;
 
   {{Ada/kw|overriding}} {{Ada/kw|procedure}} Finalize (X: {{Ada/kw|in}} {{Ada/kw|out}} Private_Component) {{Ada/kw|is}}
     {{Ada/kw|procedure}} Free {{Ada/kw|is}} {{Ada/kw|new}} Ada.Unchecked_Deallocation (Private_Part, Private_Part_Pointer);
   {{Ada/kw|begin}}
     Ada.Text_IO.Put_Line ("Finalize " &amp; Boolean'Image (X.P.C));
     Free (X.P);
   {{Ada/kw|end}} Finalize;
 
   {{Ada/kw|procedure}} Private_Proc (This: {{Ada/kw|in}} {{Ada/kw|out}} Complete_Type) {{Ada/kw|is}}  -- not primitive
   {{Ada/kw|begin}}
     Ada.Text_IO.Put_Line ("Private_Proc" &amp; Integer'Image (This.A) &amp; Integer'Image (This.B) &amp; ' ' &amp; Boolean'Image (This.P.P.C));
   {{Ada/kw|end}} Private_Proc;
 
   {{Ada/kw|not}} {{Ada/kw|overriding}} {{Ada/kw|procedure}} Protected_Proc (This: Complete_Type) {{Ada/kw|is}}  -- primitive
     X: Complete_Type := This;
   {{Ada/kw|begin}}
     Ada.Text_IO.Put_Line ("Protected_Proc" &amp; Integer'Image (This.A) &amp; Integer'Image (This.B));
     Private_Proc (X);
   {{Ada/kw|end}} Protected_Proc;
 
 {{Ada/kw|end}} CPP;

We see that, due to the construction, the private procedure is not a primitive operation.

Let's define a child class so that the protected operation can be reached:

 {{Ada/kw|package}} CPP.Child {{Ada/kw|is}} 
 
   {{Ada/kw|procedure}} Do_It (X: Complete_Type);  -- not primitive
  
 {{Ada/kw|end}} CPP.Child;

A child can look inside the private part of the parent and thus can see the protected procedure:

 {{Ada/kw|with}} Ada.Text_IO;
 
 {{Ada/kw|package}} {{Ada/kw|body}} CPP.Child {{Ada/kw|is}}
 
   {{Ada/kw|procedure}} Do_It (X: Complete_Type) {{Ada/kw|is}}
   {{Ada/kw|begin}}
     Ada.Text_IO.Put_Line ("Do_It" &amp; Integer'Image (X.A) &amp; Integer'Image (X.B));
     Protected_Proc (X);
   {{Ada/kw|end}} Do_It;
 
 {{Ada/kw|end}} CPP.Child;

This is a simple test program, its output is shown below.

 {{Ada/kw|with}} CPP.Child;
 {{Ada/kw|use}}  CPP.Child, CPP;
 
 {{Ada/kw|procedure}} Test_CPP {{Ada/kw|is}}
 
   X, Y: Complete_Type;
 
 {{Ada/kw|begin}}
 
   X.A := +1;
   Y.A := -1;
 
   Public_Proc (X);  Do_It (X);
   Public_Proc (Y);  Do_It (Y);
 
   X := Y;
 
   Public_Proc (X);  Do_It (X);
 
 {{Ada/kw|end}} Test_CPP;

This is the commented output of the test program:

 Initialize TRUE                     Test_CPP: Initialize X
 Initialize TRUE                                      and Y
 Public_Proc 1                       |  Public_Proc (X):  A=1
 Do_It 1-1073746208                  |  Do_It (X):        B uninitialized
 Adjust TRUE                         |  |  Protected_Proc (X): Adjust local copy X of This
 Protected_Proc 1-1073746208         |  |  |
 Private_Proc 1-1073746208 TRUE      |  |  |  Private_Proc on local copy of This
 Finalize TRUE                       |  |  Protected_Proc (X): Finalize local copy X
 Public_Proc-1                       |  ditto for Y
 Do_It-1 65536                       |  |
 Adjust TRUE                         |  |
 Protected_Proc-1 65536              |  |
 Private_Proc-1 65536 TRUE           |  |
 Finalize TRUE                       |  |
 Finalize TRUE                       |  Assignment: Finalize target X.P.C
 Adjust TRUE                         |  |           Adjust: deep copy
 Public_Proc-1                       |  again for X, i.e. copy of Y
 Do_It-1 65536                       |  |
 Adjust TRUE                         |  |
 Protected_Proc-1 65536              |  |
 Private_Proc-1 65536 TRUE           |  |
 Finalize TRUE                       |  |
 Finalize TRUE                       Finalize Y
 Finalize TRUE                            and X

You see that a direct translation of the C++ behaviour into Ada is difficult, if feasible at all. Methinks, the primitive Ada subprograms corresponds more to virtual C++ methods (in the example, they are not). Each language has its own idiosyncrasies which have to be taken into account, so that attempts to directly translate code from one into the other may not be the best approach.

=== De-encapsulation: friends and stream input-output ===

In C++, a friend function or class can see all members of the class it is a friend of.
Friends break encapsulation and are therefore to be discouraged.
In Ada, since packages and not classes are the unit of encapsulation, a "friend" subprogram is simply one that is declared in the same package as the tagged type.

In C++, stream input and output are the particular case where friends are usually necessary:
&lt;syntaxhighlight lang="c++"&gt;
 #include &lt;iostream&gt;
 class C {
 public:
    C();
    friend ostream&amp; operator&lt;&lt;(ostream&amp; output, C&amp; arg);
 private:
    int a, b;
    bool c;
 };

 #include &lt;iostream&gt;
 int main() {
    C object;
    cout &lt;&lt; object;
    return 0;
 };
&lt;/syntaxhighlight&gt;
Ada does not need this construct because it defines stream input and output operations by default:

 {{Ada/kw|package}} P {{Ada/kw|is}}
     {{Ada/kw|pragma}} Elaborate_Body{{Ada/delimiter|;}} {{Ada/-- | explained below}}
     {{Ada/kw|type}} C {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|private}}{{Ada/delimiter|;}}
  {{Ada/kw|private}}
     {{Ada/kw|type}} C {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|record}}
        A{{Ada/delimiter|,}} B {{Ada/delimiter|:}} Integer{{Ada/delimiter|;}}
        C {{Ada/delimiter|:}} Boolean{{Ada/delimiter|;}}
     {{Ada/kw|end}} {{Ada/kw|record}}{{Ada/delimiter|;}}
  {{Ada/kw|end}} P{{Ada/delimiter|;}}
 
  {{Ada/kw|with}} Ada{{Ada/delimiter|.}}Text_IO{{Ada/delimiter|.}}Text_Streams{{Ada/delimiter|;}}
  {{Ada/kw|with}} P{{Ada/delimiter|;}}
  {{Ada/kw|procedure}} Main {{Ada/kw|is}}
     Object {{Ada/delimiter|:}} P{{Ada/delimiter|.}}C{{Ada/delimiter|;}}
  {{Ada/kw|begin}}
     P{{Ada/delimiter|.}}C{{Ada/delimiter|'}}{{Ada/attribute|Output}} {{Ada/delimiter|(}}Stream =&gt; Ada{{Ada/delimiter|.}}Text_IO{{Ada/delimiter|.}}Text_Streams{{Ada/delimiter|.}}Stream {{Ada/delimiter|(}}Ada{{Ada/delimiter|.}}Text_IO{{Ada/delimiter|.}}Default_Output{{Ada/delimiter|)}}{{Ada/delimiter|,}}
                 Item =&gt; Object{{Ada/delimiter|)}}{{Ada/delimiter|;}}
  {{Ada/kw|end}} Main{{Ada/delimiter|;}}
 
By default, the &lt;code&gt;Output&lt;/code&gt; attribute sends the tag of the object to the stream then calls the more basic &lt;code&gt;Write&lt;/code&gt; attribute, which sends the components to the stream in the same order as the declaration, i.e. A, B then C.  It is possible to override the default implementation of the &lt;code&gt;Input&lt;/code&gt;, &lt;code&gt;Output&lt;/code&gt;, &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; attributes like this:

  {{Ada/kw|with}} Ada{{Ada/delimiter|.}}Streams{{Ada/delimiter|;}}
  {{Ada/kw|package}} {{Ada/kw|body}} P {{Ada/kw|is}}
     {{Ada/kw|procedure}} My_Write {{Ada/delimiter|(}}Stream {{Ada/delimiter|:}} {{Ada/kw|not}} {{Ada/kw|null}} {{Ada/kw|access}} Ada{{Ada/delimiter|.}}Streams{{Ada/delimiter|.}}Root_Stream_Type{{Ada/delimiter|'}}{{Ada/attribute|Class}}{{Ada/delimiter|;}}
                         Item {{Ada/delimiter|:}} {{Ada/kw|in}} C{{Ada/delimiter|)}} {{Ada/kw|is}}
     {{Ada/kw|begin}}
        {{Ada/-- | The default is to write A then B then C; here we change the ordering.}}
        Boolean{{Ada/delimiter|'}}{{Ada/attribute|Write}} {{Ada/delimiter|(}}Stream{{Ada/delimiter|,}} Item{{Ada/delimiter|.}}C{{Ada/delimiter|)}}{{Ada/delimiter|;}}
        Integer{{Ada/delimiter|'}}{{Ada/attribute|Write}} {{Ada/delimiter|(}}Stream{{Ada/delimiter|,}} Item{{Ada/delimiter|.}}B{{Ada/delimiter|)}}{{Ada/delimiter|;}}
        Integer{{Ada/delimiter|'}}{{Ada/attribute|Write}} {{Ada/delimiter|(}}Stream{{Ada/delimiter|,}} Item{{Ada/delimiter|.}}A{{Ada/delimiter|)}}{{Ada/delimiter|;}}
     {{Ada/kw|end}} My_Write{{Ada/delimiter|;}}
  
    {{Ada/kw|for}} C{{Ada/delimiter|'}}{{Ada/attribute|Write}} {{Ada/kw|use}} My_Write{{Ada/delimiter|;}} {{Ada/-- | override the default attribute}}
  {{Ada/kw|end}} P{{Ada/delimiter|;}}
 
In the above example, &lt;code&gt;P.C'output&lt;/code&gt; calls &lt;code&gt;P.C'Write&lt;/code&gt; which is overridden in the body of the package.  Since the specification of package &lt;code&gt;P&lt;/code&gt; does not define any subprograms, it does not normally need a body, so a package body is forbidden.  The &lt;code&gt;pragma Elaborate_Body&lt;/code&gt; tells the compiler that this package does have a body that is needed for other reasons.

Note that the stream IO attributes are not primitive operations of the tagged type; this is also the case in C++ where the friend operators are not, in fact, member functions of the type.

=== Terminology ===

{| class="wikitable"
! Ada !! C++
|-
| Package          || class (as a unit of encapsulation)
|-
| Tagged type      || class (of objects) (as a type) (''not'' pointer or reference, which are class-wide)
|-
| Primitive operation  || virtual member function
|-
| Tag              || pointer to the virtual table
|-
| Class (of types) || a tree of classes, rooted by a base class and including all the (recursively-)derived classes of that base class
|-
| Class-wide type  || -
|-
| Class-wide operation || static member function
|-
| Access value to a specific tagged type || -
|-
| Access value to a class-wide type      || pointer or reference to a class
|}

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Types/record]]
* [[Ada Programming/Keywords/record|record]]
* [[Ada Programming/Keywords/interface|interface]]
* [[Ada Programming/Keywords/tagged|tagged]]

=== Wikipedia ===

* [[Wikipedia:Object-oriented programming|Object-oriented programming]]

=== Ada Reference Manual ===

==== Ada 95 ====

* {{Ada/95/RM|3|8|title=Record Types}}
* {{Ada/95/RM|3|9|title=Tagged Types and Type Extensions}}
* {{Ada/95/RM|3|9|1|title=Type Extensions}}
* {{Ada/95/RM|3|9|2|title=Dispatching Operations of Tagged Types}}
* {{Ada/95/RM|3|9|3|title=Abstract Types and Subprograms}}
* {{Ada/95/RM|3|10|title=Access Types}}

==== Ada 2005 ====

* {{Ada/2005/RM|3|8|title=Record Types}}
* {{Ada/2005/RM|3|9|title=Tagged Types and Type Extensions}}
* {{Ada/2005/RM|3|9|1|title=Type Extensions}}
* {{Ada/2005/RM|3|9|2|title=Dispatching Operations of Tagged Types}}
* {{Ada/2005/RM|3|9|3|title=Abstract Types and Subprograms}}
* {{Ada/2005/RM|3|9|4|title=Interface Types}}
* {{Ada/2005/RM|3|10|title=Access Types}}

=== Ada Quality and Style Guide ===

* {{Ada/95/SG1|9|Object-Oriented Features}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|OO]]
&lt;/noinclude&gt;

[[es:Programación en Ada/Tipos etiquetados]]</text>
      <sha1>1fnzplj02i82iirqs6jfwti60mcvpj1</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Operators</title>
    <ns>0</ns>
    <id>16535</id>
    <revision>
      <id>3250228</id>
      <parentid>3211729</parentid>
      <timestamp>2017-07-31T00:28:07Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6057" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Operators}}
__TOC__&lt;/noinclude&gt;

== Standard operators ==

[[Ada Programming|Ada]] allows [[w:operator overloading|operator overloading]] for all standard operators and so the following summaries can only describe the suggested standard operations for each operator. It is quite possible to misuse any standard operator to perform something unusual.

Each operator is either a [[Ada Programming/Keywords|keyword]] or a [[Ada Programming/Delimiters|delimiter]]—hence all operator pages are redirects to the appropriate [[Ada Programming/Keywords|keyword]] or  [[Ada Programming/Delimiters|delimiter]].

Operators have arguments which in the RM are called Left and Right for binary operators, Right for unary operators (indicating the position with respect to the operator symbol).

The list is sorted from lowest precedence to highest precedence.

=== Logical operators ===

; [[Ada Programming/Operators/and|and]] : and &lt;math&gt;x \land y&lt;/math&gt;, &lt;small&gt;(also keyword [[Ada Programming/Keywords/and|and]])&lt;/small&gt;
; [[Ada Programming/Operators/or|or]] : or &lt;math&gt;x \lor y&lt;/math&gt;, &lt;small&gt;(also keyword [[Ada Programming/Keywords/or|or]])&lt;/small&gt;
; [[Ada Programming/Operators/xor|xor]] : exclusive or &lt;math&gt;(x \land \bar{y}) \lor (\bar{x} \land y)&lt;/math&gt;, &lt;small&gt;(also keyword [[Ada Programming/Keywords/xor|xor]])&lt;/small&gt;

=== Relational operators ===

; [[Ada Programming/Operators//=|/=]] : Not Equal &lt;math&gt;x \ne y&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters//=|/=]])&lt;/small&gt;
; [[Ada Programming/Operators/=|=]] : Equal &lt;math&gt;x = y&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters/=|=]])&lt;/small&gt;
; [[Ada Programming/Operators/less than|&lt;]] : Less than &lt;math&gt;x&lt;y&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters/less than|&lt;]])&lt;/small&gt;
; [[Ada Programming/Operators/less than or equal to|&lt;=]] : Less than or equal to (&lt;math&gt;x \le y&lt;/math&gt;), &lt;small&gt;(also special character [[Ada Programming/Delimiters/less than or equal to|&lt;=]])&lt;/small&gt;
; [[Ada Programming/Operators/greater than|&gt;]] : Greater than (&lt;math&gt;x &gt; y&lt;/math&gt;), &lt;small&gt;(also special character [[Ada Programming/Delimiters/greater than|&gt;]])&lt;/small&gt;
; [[Ada Programming/Operators/greater than or equal to|&gt;=]] : Greater than or equal to (&lt;math&gt;x \ge y&lt;/math&gt;), &lt;small&gt;(also special character [[Ada Programming/Delimiters/greater than or equal to|&gt;=]])&lt;/small&gt;

=== Binary adding operators ===

; [[Ada Programming/Delimiters/+|+]] : Add &lt;math&gt;x + y&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters/+|+]])&lt;/small&gt;
; [[Ada Programming/Delimiters/-|-]] : Subtract &lt;math&gt;x - y&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters/-|-]])&lt;/small&gt;
; [[Ada Programming/Delimiters/&amp;|&amp;]] : Concatenate , &lt;math&gt;x&lt;/math&gt; &amp; &lt;math&gt; y&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters/&amp;|&amp;]])&lt;/small&gt;

=== Unary adding operators ===

; [[Ada Programming/Delimiters/+|+]] : Plus sign &lt;math&gt;+x&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters/+|+]])&lt;/small&gt;
; [[Ada Programming/Delimiters/-|-]] : Minus sign &lt;math&gt;-x&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters/-|-]])&lt;/small&gt;

=== Multiplying operator ===

; [[Ada Programming/Delimiters/*|*]] : Multiply, &lt;math&gt;x \times y&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters/*|*]])&lt;/small&gt;
; [[Ada Programming/Delimiters//|/]] : Divide &lt;math&gt;x / y&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters//|/]])&lt;/small&gt;
; [[Ada Programming/Operators/mod|mod]] : modulus &lt;small&gt;(also keyword [[Ada Programming/Keywords/mod|mod]])&lt;/small&gt;
; [[Ada Programming/Keywords/rem|rem]] : remainder &lt;small&gt;(also keyword [[Ada Programming/Keywords/rem|rem]])&lt;/small&gt;

=== Highest precedence operator ===

; [[Ada Programming/Delimiters/**|**]] : Power &lt;math&gt;x^y&lt;/math&gt;, &lt;small&gt;(also special character [[Ada Programming/Delimiters/**|**]])&lt;/small&gt;
; [[Ada Programming/Operators/not|not]] : logical not &lt;math&gt;\lnot x&lt;/math&gt;, &lt;small&gt;(also keyword [[Ada Programming/Keywords/not|not]])&lt;/small&gt;
; [[Ada Programming/Operators/abs|abs]] : absolute value &lt;small&gt; &lt;math&gt;|x|&lt;/math&gt; (also keyword [[Ada Programming/Keywords/abs|abs]])&lt;/small&gt;

== Short-circuit control forms ==

These are not operators and thus cannot be overloaded.

; [[Ada Programming/Operators/and#Boolean shortcut operator|and then]] : ''e.g.'' &lt;code&gt;'''if''' Y /= 0 '''and then''' X/Y &gt; Limit '''then''' ...&lt;/code&gt;
; [[Ada Programming/Operators/or#Boolean shortcut operator|or else]] : ''e.g.'' &lt;code&gt;'''if''' Ptr = '''null''' '''or else''' Ptr.I = 0 '''then''' ...&lt;/code&gt;

== Membership tests  ==

The Membership Tests also cannot be overloaded because they are not operators.

; [[Ada Programming/Operators/in|in]] : element of, &lt;math&gt;var \in type&lt;/math&gt;, ''e.g.''  &lt;code&gt;{{Ada/kw|if}} I {{Ada/kw|in}} Positive {{Ada/kw|then}}&lt;/code&gt;, &lt;small&gt;(also keyword {{Ada/kw|in}})&lt;/small&gt;
; [[Ada Programming/Operators/in|not in]] : not element of, &lt;math&gt;var \notin type&lt;/math&gt;, ''e.g.''  &lt;code&gt;{{Ada/kw|if}} I {{Ada/kw|not}} {{Ada/kw|in}} Positive {{Ada/kw|then}}&lt;/code&gt;, &lt;small&gt;(also keywords {{Ada/kw|not}} {{Ada/kw|in}})&lt;/small&gt;

=== Range membership test ===

 {{Ada/kw|if}} Today {{Ada/kw|not}} {{Ada/kw|in}} Tuesday .. Thursday {{Ada/kw|then}}
    ...

=== Subtype membership test ===

 Is_Non_Negative := X {{Ada/kw|in}} Natural;

=== Class membership test ===

 {{Ada/kw|exit}} {{Ada/kw|when}} Object {{Ada/kw|in}} Circle'{{Ada/attribute|Class}};

== See also ==

=== Wikibook ===

* [[Ada Programming]]

=== Ada 95 Reference Manual ===

* {{Ada/RM2|4|5|Operators and Expression Evaluation}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM2|4|5|Operators and Expression Evaluation}}

=== Ada Quality and Style Guide ===

* {{Ada/SG3|2|1|3|Alignment of Operators}}
* {{Ada/SG3|5|7|4|Overloaded Operators}}
* {{Ada/SG3|5|7|5|Overloading the Equality Operator}}

{{:Template:Ada/Operators}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Operators]]


[[es:Programación en Ada/Operadores]]

&lt;/noinclude&gt;</text>
      <sha1>d16uptfmqqefk40eupqd0mdr1084dlk</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Packages</title>
    <ns>0</ns>
    <id>21872</id>
    <revision>
      <id>3421245</id>
      <parentid>3250229</parentid>
      <timestamp>2018-05-08T12:30:51Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>510943</id>
      </contributor>
      <comment>tag fix</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="32629" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Packages}}
__TOC__&lt;/noinclude&gt;

Ada encourages the division of code into separate modules called ''packages''. Each package can contain any combination of items.

Some of the benefits of using packages are:
* package contents are placed in a separate namespace, preventing naming collisions,
* implementation details of the package can be hidden from the programmer (information hiding),
* object orientation requires defining a type and its primitive subprograms within a package, and
* packages can be separately compiled.

Some of the more common package usages are:
* a group of related subprograms along with their shared data, with the data not visible outside the package,
* one or more data types along with subprograms for manipulating those data types, and
* a generic package that can be instantiated under varying conditions.

The following is a quote from the current Ada Reference Manual {{Ada/RM|7|title=Packages. RM 7(1)}}

{{quote|Packages are program units that allow the specification of groups of logically related entities. Typically, a package contains the declaration of a type (often a private type or private extension) along with the declaration of primitive subprograms of the type, which can be called from outside the package, while their inner workings remain hidden from outside users.}}

== Separate compilation ==

It is very common for package declarations and package bodies to be coded into separate files and separately compiled. Doing so places the package at the ''library level'' where it will be accessible to all other code via the '''with''' statement&amp;mdash;if a more restricted scope is desired, simply declare the package (and package body, if needed) within the appropriate scope. The package body can itself be divided into multiple files by specifying that one or more subprogram implementations are '''separate'''.

One of the biggest advantages of Ada over most other programming languages is its well defined system of modularization and separate compilation. Even though Ada allows separate compilation, it maintains the strong type checking among the various compilations by enforcing rules of compilation order and compatibility checking. Ada uses separate compilation (like [[w:Modula-2|Modula-2]], [[w:Java programming language|Java]] and [[w:C Sharp programming language|C#]]), and not independent compilation (as [[w:C programming language|C]]/[[w:C++|C++]] does), in which the various parts are compiled with no knowledge of the other compilation units with which they will be combined.

A note to C/C++ users: Yes, you can use the preprocessor to emulate separate compilation &amp;mdash; but it is only an emulation and the smallest mistake leads to very hard to find bugs. It is telling that all C/C++ successor languages including [[w:D programming language|D]] have turned away from the independent compilation and the use of the preprocessor.

So it's good to know that Ada has had separate compilation ever since Ada-83 and is probably the most sophisticated implementation around.

== Parts of a package ==

A package generally consists of two parts, the specification and the body. A package specification can be further divided in two logical parts, the visible part and the private part. Only the visible part of the specification is mandatory. The private part of the specification is optional, and a package specification might not have a package body&amp;mdash;the package body only exists to complete any ''incomplete'' items in the specification. Subprogram declarations are the most common ''incomplete'' items. There must not be a package body if there is no incomplete declaration, and there has to be a package body if there is some incomplete declaration in the specification.

To understand the value of the three-way division, consider the case of a package that has already been released and is in use. A change to the visible part of the specification will require that the programmers of all using software verify that the change does not affect the using code. A change to the private part of the declaration will require that all using code be recompiled but no review is normally needed. Some changes to the private part can change the meaning of the client code however. An example is changing a private record type into a private access type. This change can be done with changes in the private part, but change the semantic meaning of assignment in the clients code. A change to the package body will only require that the file containing the package body be recompiled, because ''nothing'' outside of the package body can ever access anything within the package body (beyond the declarations in the specification part).

A common usage of the three parts is to declare the existence of a type and some subprograms that operate on that type in the visible part, define the actual structure of the type (e.g. as a record) in the private part, and provide the code to implement the subprograms in the package body.

=== The package specification &amp;mdash; the visible part ===

The visible part of a package specification describes all the subprogram specifications, variables, types, constants etc. that are visible to anyone who wishes to use the package.

 {{Ada/kw|package}} Public_Only_Package {{Ada/kw|is}}
 
   {{Ada/kw|type}} Range_10 {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;
 
 {{Ada/kw|end}} Public_Only_Package;

Since Range_10 is an integer type, there are a lot of operations declared implicitly in this package.

=== The private part ===

The private part of a package serves two purposes:
* To complete the deferred definition of private types and constants.
* To export entities only visible to the children of the package.

 {{Ada/kw|package}} Package_With_Private {{Ada/kw|is}}
      
    {{Ada/kw|type}} Private_Type {{Ada/kw|is}} {{Ada/kw|private}};
 
 {{Ada/kw|private}}
 
    {{Ada/kw|type}} Private_Type {{Ada/kw|is}} {{Ada/kw|array}} (1 .. 10) {{Ada/kw|of}} Integer;
 
 {{Ada/kw|end}} Package_With_Private;

Since the type is private, clients cannot make any use of it as long as there are no operations defined in the visible part.

=== The package body ===

The package body defines the implementation of the package. All the subprograms defined in the specification have to be implemented in the body. New subprograms, types and objects can be defined in the body that are not visible to the users of the package.
 
 {{Ada/kw|package}} Package_With_Body {{Ada/kw|is}}
 
    {{Ada/kw|type}} Basic_Record {{Ada/kw|is}} {{Ada/kw|private}};
 
    {{Ada/kw|procedure}} Set_A (This : {{Ada/kw|in}} {{Ada/kw|out}} Basic_Record;
                     An_A : {{Ada/kw|in}}     Integer);
 
    {{Ada/kw|function}} Get_A (This : Basic_Record) {{Ada/kw|return}} Integer;
 
 {{Ada/kw|private}}
 
    {{Ada/kw|type}} Basic_Record {{Ada/kw|is}} 
       {{Ada/kw|record}} 
          A : Integer;
       {{Ada/kw|end}} {{Ada/kw|record}} ;
 
    {{Ada/pragma|Pure_Function}}  (Get_A);  -- not a standard Ada pragma
    {{Ada/pragma|Inline}} (Get_A);
    {{Ada/pragma|Inline}} (Set_A);
 
 {{Ada/kw|end}} Package_With_Body;

 {{Ada/kw|package}} {{Ada/kw|body}} Package_With_Body {{Ada/kw|is}}
 
    {{Ada/kw|procedure}} Set_A (This : {{Ada/kw|in}} {{Ada/kw|out}} Basic_Record;
                     An_A : {{Ada/kw|in}}     Integer) {{Ada/kw|is}}
    {{Ada/kw|begin}}
       This.A := An_A;
    {{Ada/kw|end}} Set_A;
 
    {{Ada/kw|function}} Get_A (This : Basic_Record) {{Ada/kw|return}} Integer {{Ada/kw|is}}
    {{Ada/kw|begin}}
       {{Ada/kw|return}} This.A;
    {{Ada/kw|end}} Get_A;
 
 {{Ada/kw|end}} Package_With_Body;

; {{Ada/pragma|Pure_Function}}: Only available when using [[w:GNAT|GNAT]].

=== Two Flavors of Package ===

The packages above each define a type together with operations of the type.
When the type's composition is placed in the private part of a
package, the package then exports what is known to be
an [[w:Abstract data type|Abstract Data Type]] or ADT for short.
Objects of the type are then constructed by calling one of the subprograms
associated with the respective type.

A different kind of package is the Abstract State Machine or ASM.
A package will be modeling a single item of the problem domain, such as the
motor of a car. If a program controls one car, there is typically
just one motor, or ''the'' motor. The public part of the package specification
only declares the operations of the module (of the motor, say), but no type.
All data of the module are hidden in the body of the package
where they act as state variables to be queried, or
manipulated by the subprograms of the package.
The initialization part sets the state variables to their initial values.

 {{Ada/keyword|package}} Package_With_Body {{Ada/keyword|is}}
 
    {{Ada/keyword|procedure}} Set_A {{Ada/delimiter|(}}An_A {{Ada/delimiter|:}} {{Ada/keyword|in}} Integer{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|function}} Get_A {{Ada/keyword|return}} Integer{{Ada/delimiter|;}}
 
 {{Ada/keyword|private}}
 
    {{Ada/keyword|pragma}} Pure_Function {{Ada/delimiter|(}}Get_A{{Ada/delimiter|)}}{{Ada/delimiter|;}}—not a standard Ada pragma
 
 {{Ada/keyword|end}} Package_With_Body{{Ada/delimiter|;}}

 {{Ada/keyword|package}} {{Ada/keyword|body}} Package_With_Body {{Ada/keyword|is}}
 
    The_A{{Ada/delimiter|:}} Integer{{Ada/delimiter|;}}
 
    {{Ada/keyword|procedure}} Set_A {{Ada/delimiter|(}}An_A {{Ada/delimiter|:}} {{Ada/keyword|in}} Integer{{Ada/delimiter|)}} {{Ada/keyword|is}}
    {{Ada/keyword|begin}}
       The_A {{Ada/delimiter|1=:=}} An_A{{Ada/delimiter|;}}
    {{Ada/keyword|end}} Set_A{{Ada/delimiter|;}}
 
    {{Ada/keyword|function}} Get_A {{Ada/keyword|return}} Integer {{Ada/keyword|is}}
    {{Ada/keyword|begin}}
       {{Ada/keyword|return}} The_A{{Ada/delimiter|;}}
    {{Ada/keyword|end}} Get_A{{Ada/delimiter|;}}
 
 
 {{Ada/keyword|begin}}
 
    The_A {{Ada/delimiter|1=:=}} 0{{Ada/delimiter|;}}
 
 {{Ada/keyword|end}} Package_With_Body{{Ada/delimiter|;}}

(A note on construction:
The package initialization part after {{Ada/kw|begin}} corresponds to a construction subprogram
of an ADT package. 
However, as a state machine ''is'' an “object” already, “construction” is
happening during package initialization.
(Here it sets the state variable &lt;tt&gt;The_A&lt;/tt&gt; to its initial value.)
An ASM package can be viewed as a [[w:Singleton pattern|singleton]].)

== Using packages ==

{{sectstub}}

To utilize a package it's needed to name it in a '''with''' clause, whereas to have direct visibility of that package it's needed to name it in a '''use''' clause.

For C++ programmers, Ada's '''with''' clause is analogous to the C++ preprocessor's '''#include''' and Ada's '''use''' is similar to the '''using namespace''' statement in C++.  In particular, '''use''' leads to the same namespace pollution problems as '''using namespace''' and thus should be used sparingly.  Renaming can shorten long compound names to a manageable length, while the '''use type''' clause makes a type's operators visible.  These features reduce the need for plain '''use'''.

=== Standard with ===

The standard with clause provides visibility for the public part of a unit to the following defined unit. The imported package can be used in any part of the defined unit, including the body when the clause is used in the specification.

=== Private with ===

{{Ada/2005|Packages}}

 {{Ada/kw|private}} {{Ada/kw|with}} Ada.Strings.Unbounded; 
 
 {{Ada/kw|package}} Private_With {{Ada/kw|is}}
 
    {{Ada/--|The package Ada.String.Unbounded is not visible at this point}}
 
    {{Ada/kw|type}} Basic_Record {{Ada/kw|is}} {{Ada/kw|private}};
 
    {{Ada/kw|procedure}} Set_A (This : {{Ada/kw|in}} {{Ada/kw|out}} Basic_Record;
                     An_A : {{Ada/kw|in}}     String);
 
    {{Ada/kw|function}} Get_A (This : Basic_Record) {{Ada/kw|return}} String;
 
 {{Ada/kw|private}}
    {{Ada/--|The visibility of package Ada.String.Unbounded starts here}}
 
    {{Ada/kw|package}} Unbounded {{Ada/kw|renames}} Ada.Strings.Unbounded;
 
    {{Ada/kw|type}} Basic_Record {{Ada/kw|is}} 
       {{Ada/kw|record}} 
          A : Unbounded.Unbounded_String;
       {{Ada/kw|end}} {{Ada/kw|record}};
 
    {{Ada/pragma|Pure_Function}}  (Get_A);
    {{Ada/pragma|Inline}} (Get_A);
    {{Ada/pragma|Inline}} (Set_A);
 
 {{Ada/kw|end}} Private_With;

 {{Ada/kw|package}} {{Ada/kw|body}} Private_With {{Ada/kw|is}}
 
    {{Ada/--|The private withed package is visible in the body too}}
 
    {{Ada/kw|procedure}} Set_A (This : {{Ada/kw|in}} {{Ada/kw|out}} Basic_Record;
                     An_A : {{Ada/kw|in}}     String)
    {{Ada/kw|is}}
    {{Ada/kw|begin}}
       This.A := Unbounded.To_Unbounded_String (An_A);
    {{Ada/kw|end}} Set_A;
 
    {{Ada/kw|function}} Get_A (This : Basic_Record) {{Ada/kw|return}} String {{Ada/kw|is}}
    {{Ada/kw|begin}}
       {{Ada/kw|return}} Unbounded.To_String (This.A);
    {{Ada/kw|end}} Get_A;
 
 {{Ada/kw|end}} Private_With;

=== Limited with ===

{{Ada/2005|Packages}}

 {{Ada/kw|limited}} {{Ada/kw|with}} Departments;
 
 {{Ada/kw|package}} Employees {{Ada/kw|is}}
 
    {{Ada/kw|type}} Employee {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|private}};
 
    {{Ada/kw|procedure}} Assign_Employee
      (E : {{Ada/kw|in}} {{Ada/kw|out}} Employee;
       D : {{Ada/kw|access}} Departments.Department'{{Ada/attribute|Class}});
 
    {{Ada/kw|type}} Dept_Ptr {{Ada/kw|is}} {{Ada/kw|access}} {{Ada/kw|all}} Departments.Department'{{Ada/attribute|Class}};
 
    {{Ada/kw|function}} Current_Department(E : {{Ada/kw|in}} Employee) {{Ada/kw|return}} Dept_Ptr;
    ...
 {{Ada/kw|end}} Employees;

 {{Ada/kw|limited}} {{Ada/kw|with}} Employees;
 
 {{Ada/kw|package}} Departments {{Ada/kw|is}}
 
    {{Ada/kw|type}} Department {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|private}};
 
    {{Ada/kw|procedure}} Choose_Manager
      (Dept    : {{Ada/kw|in}} {{Ada/kw|out}} Department;
       Manager : {{Ada/kw|access}} Employees.Employee'{{Ada/attribute|Class}});
    ...
 {{Ada/kw|end}} Departments;

=== Making operators visible ===

Suppose you have a package Universe that defines some numeric type T.

 {{Ada/keyword|with}} Universe{{Ada/delimiter|;}}
 {{Ada/keyword|procedure}} P {{Ada/keyword|is}}
   V{{Ada/delimiter|:}} Universe{{Ada/delimiter|.}}T {{Ada/delimiter|1=:=}} 10{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
   V {{Ada/delimiter|1=:=}} V {{Ada/operator|*}} 42{{Ada/delimiter|.}}0{{Ada/delimiter|;}}  {{Ada/comment| illegal}}
 {{Ada/keyword|end}} P{{Ada/delimiter|;}}

This program fragment is illegal since the operators implicitly defined in Universe are not directly visible.

You have four choices to make the program legal.

Use a use_package_clause. This makes '''all declarations''' in Universe directly visible (provided they are not hidden because of other homographs).

 {{Ada/keyword|with}} Universe{{Ada/delimiter|;}}
 {{Ada/keyword|use}}  Universe{{Ada/delimiter|;}}
 {{Ada/keyword|procedure}} P {{Ada/keyword|is}}
   V{{Ada/delimiter|:}} Universe{{Ada/delimiter|.}}T {{Ada/delimiter|1=:=}} 10{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
   V {{Ada/delimiter|1=:=}} V {{Ada/operator|*}} 42{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
 {{Ada/keyword|end}} P{{Ada/delimiter|;}}

Use renaming. This is error prone since if you rename many operators, cut and paste errors are probable.

 {{Ada/keyword|with}} Universe{{Ada/delimiter|;}}
 {{Ada/keyword|procedure}} P {{Ada/keyword|is}}
   {{Ada/keyword|function}} "*" {{Ada/delimiter|(}}Left{{Ada/delimiter|,}} Right{{Ada/delimiter|:}} Universe{{Ada/delimiter|.}}T{{Ada/delimiter|)}} {{Ada/keyword|return}} Universe{{Ada/delimiter|.}}T {{Ada/keyword|renames}} Universe{{Ada/delimiter|.}}"*"{{Ada/delimiter|;}}
   {{Ada/keyword|function}} "/" {{Ada/delimiter|(}}Left{{Ada/delimiter|,}} Right{{Ada/delimiter|:}} Universe{{Ada/delimiter|.}}T{{Ada/delimiter|)}} {{Ada/keyword|return}} Universe{{Ada/delimiter|.}}T {{Ada/keyword|renames}} Universe{{Ada/delimiter|.}}"*"{{Ada/delimiter|;}}  {{Ada/comment| oops}}
   V{{Ada/delimiter|:}} Universe{{Ada/delimiter|.}}T {{Ada/delimiter|1=:=}} 10{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
   V {{Ada/delimiter|1=:=}} V {{Ada/operator|*}} 42{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
 {{Ada/keyword|end}} P{{Ada/delimiter|;}}

Use qualification. This is extremely ugly and unreadable.

 {{Ada/keyword|with}} Universe{{Ada/delimiter|;}}
 {{Ada/keyword|procedure}} P {{Ada/keyword|is}}
   V{{Ada/delimiter|:}} Universe{{Ada/delimiter|.}}T {{Ada/delimiter|1=:=}} 10{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
   V {{Ada/delimiter|1=:=}} Universe{{Ada/delimiter|.}}"*" {{Ada/delimiter|(}}V{{Ada/delimiter|,}} 42{{Ada/delimiter|.}}0{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 {{Ada/keyword|end}} P{{Ada/delimiter|;}}

Use the use_type_clause. This makes only the '''operators''' in Universe directly visible.

 {{Ada/keyword|with}} Universe{{Ada/delimiter|;}}
 {{Ada/keyword|procedure}} P {{Ada/keyword|is}}
   V{{Ada/delimiter|:}} Universe{{Ada/delimiter|.}}T {{Ada/delimiter|1=:=}} 10{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
   {{Ada/keyword|use}} {{Ada/keyword|type}} Universe{{Ada/delimiter|.}}T{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
   V {{Ada/delimiter|1=:=}} V {{Ada/operator|*}} 42{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
 {{Ada/keyword|end}} P{{Ada/delimiter|;}}

There is a special beauty in the use_type_clause. Suppose you have a set of packages like so:

 {{Ada/keyword|with}} Universe{{Ada/delimiter|;}}
 {{Ada/keyword|package}} Pack {{Ada/keyword|is}}
   {{Ada/keyword|subtype}} T {{Ada/keyword|is}} Universe{{Ada/delimiter|.}}T{{Ada/delimiter|;}}
 {{Ada/keyword|end}} Pack{{Ada/delimiter|;}}

 {{Ada/keyword|with}} Pack{{Ada/delimiter|;}}
 {{Ada/keyword|procedure}} P {{Ada/keyword|is}}
   V{{Ada/delimiter|:}} Pack{{Ada/delimiter|.}}T {{Ada/delimiter|1=:=}} 10{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
   V {{Ada/delimiter|1=:=}} V {{Ada/operator|*}} 42{{Ada/delimiter|.}}0{{Ada/delimiter|;}}  {{Ada/comment| illegal}}
 {{Ada/keyword|end}} P{{Ada/delimiter|;}}

Now you've got into trouble. Since Universe is not made visible, you cannot use a use_package_clause for Universe to make the operator directly visible, nor can you use qualification for the same reason. Also a use_package_clause for Pack does not help, since the operator is not defined in Pack.
The effect of the above construct means that the operator is not nameable, i.e. it cannot be renamed in a renaming statement.

Of course you can add Universe to the context clause, but this may be impossible due to some other reasons (e.g. coding standards); also adding the operators to Pack may be forbidden or not feasible. So what to do?

The solution is simple. Use the use_type_clause for Pack.T and all is well!

 {{Ada/keyword|with}} Pack{{Ada/delimiter|;}}
 {{Ada/keyword|procedure}} P {{Ada/keyword|is}}
   V{{Ada/delimiter|:}} Pack{{Ada/delimiter|.}}T {{Ada/delimiter|1=:=}} 10{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
   {{Ada/keyword|use}} {{Ada/keyword|type}} Pack{{Ada/delimiter|.}}T{{Ada/delimiter|;}}
 {{Ada/keyword|begin}}
   V {{Ada/delimiter|1=:=}} V {{Ada/operator|*}} 42{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
 {{Ada/keyword|end}} P{{Ada/delimiter|;}}

== Package organisation ==

{{sectstub}}

=== Nested packages ===

A nested package is a package declared inside a package.
Like a normal package, it has a public part and a private part.
From outside, items declared in a nested package N
will have visibility as usual; the
programmer may refer to these items using a full dotted name like
&lt;code&gt;P.N.X&lt;/code&gt;. (But not &lt;code&gt;P.M.Y&lt;/code&gt;.)

 {{Ada/keyword|package}} P {{Ada/keyword|is}}
    D{{Ada/delimiter|:}} Integer{{Ada/delimiter|;}}
 
    {{Ada/comment| a nested package:}}
    {{Ada/keyword|package}} N {{Ada/keyword|is}}
       X{{Ada/delimiter|:}} Integer{{Ada/delimiter|;}}
    {{Ada/keyword|private}}
       Foo{{Ada/delimiter|:}} Integer{{Ada/delimiter|;}}
    {{Ada/keyword|end}} N{{Ada/delimiter|;}}
 
    E{{Ada/delimiter|:}} Integer{{Ada/delimiter|;}}
 {{Ada/keyword|private}}
    {{Ada/comment| another nested package:}}
    {{Ada/keyword|package}} M {{Ada/keyword|is}}
       Y{{Ada/delimiter|:}} Integer{{Ada/delimiter|;}}
    {{Ada/keyword|private}}
       Bar{{Ada/delimiter|:}} Integer{{Ada/delimiter|;}}
    {{Ada/keyword|end}} M{{Ada/delimiter|;}}
 
 {{Ada/keyword|end}} P{{Ada/delimiter|;}}

Inside a package, declarations become visible as they are introduced, in textual order.
That is, a nested package N that is declared ''after'' some other declaration D can refer to this declaration D.
A declaration E following N can refer to items of N.&lt;ref&gt;For example,
&lt;code&gt;E: Integer := D + N.X;&lt;/code&gt;&lt;/ref&gt;
But neither can “look ahead” and refer to any declaration that
goes after them.
For example, spec &lt;code&gt;N&lt;/code&gt; above cannot refer to &lt;code&gt;M&lt;/code&gt; in any way.

In the following example, a type is derived in both of the two nested packages &lt;tt&gt;Disks&lt;/tt&gt;
and &lt;tt&gt;Books&lt;/tt&gt;.
Notice that the full declaration of parent type &lt;tt&gt;Item&lt;/tt&gt; appears before the two
nested packages.

 {{Ada/keyword|with}} {{Ada/package|Ada|Strings|Unbounded}}{{Ada/delimiter|;}} {{Ada/keyword|use}} {{Ada/package|Ada|Strings|Unbounded}}{{Ada/delimiter|;}}
 
 {{Ada/keyword|package}} Shelf {{Ada/keyword|is}}
 
    {{Ada/keyword|pragma}} Elaborate_Body{{Ada/delimiter|;}}
 
    {{Ada/comment| things to put on the shelf}}
 
    {{Ada/keyword|type}} ID {{Ada/keyword|is}} {{Ada/keyword|range}} 1_000 {{Ada/delimiter|..}} 9_999{{Ada/delimiter|;}}
    {{Ada/keyword|type}} Item {{Ada/delimiter|(}}Identifier {{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|abstract}} {{Ada/keyword|tagged}} {{Ada/keyword|limited}} {{Ada/keyword|null}} {{Ada/keyword|record}}{{Ada/delimiter|;}}
    {{Ada/keyword|type}} Item_Ref {{Ada/keyword|is}} {{Ada/keyword|access}} {{Ada/keyword|constant}} Item{{Ada/delimiter|'}}{{Ada/attribute|class}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|function}} Next_ID {{Ada/keyword|return}} ID{{Ada/delimiter|;}}
    {{Ada/comment| a fresh ID for an Item to Put on the shelf}}
 
 
    {{Ada/keyword|package}} Disks {{Ada/keyword|is}}
 
       {{Ada/keyword|type}} Music {{Ada/keyword|is}} {{Ada/delimiter|(}}
          Jazz{{Ada/delimiter|,}}
          Rock{{Ada/delimiter|,}}
          Raga{{Ada/delimiter|,}}
          Classic{{Ada/delimiter|,}}
          Pop{{Ada/delimiter|,}}
          Soul{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
       {{Ada/keyword|type}} Disk {{Ada/delimiter|(}}Style {{Ada/delimiter|:}} Music{{Ada/delimiter|;}} Identifier {{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|new}} Item {{Ada/delimiter|(}}Identifier{{Ada/delimiter|)}}
          {{Ada/keyword|with}} {{Ada/keyword|record}}
             Artist {{Ada/delimiter|:}} Unbounded_String{{Ada/delimiter|;}}
             Title  {{Ada/delimiter|:}} Unbounded_String{{Ada/delimiter|;}}
          {{Ada/keyword|end}} {{Ada/keyword|record}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|end}} Disks{{Ada/delimiter|;}}
 
 
    {{Ada/keyword|package}} Books {{Ada/keyword|is}}
 
       {{Ada/keyword|type}} Literature {{Ada/keyword|is}} {{Ada/delimiter|(}}
          Play{{Ada/delimiter|,}}
          Novel{{Ada/delimiter|,}}
          Poem{{Ada/delimiter|,}}
          Story{{Ada/delimiter|,}}
          Text{{Ada/delimiter|,}}
          Art{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
       {{Ada/keyword|type}} Book {{Ada/delimiter|(}}Kind {{Ada/delimiter|:}} Literature{{Ada/delimiter|;}} Identifier {{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|new}} Item {{Ada/delimiter|(}}Identifier{{Ada/delimiter|)}}
          {{Ada/keyword|with}} {{Ada/keyword|record}}
             Authors {{Ada/delimiter|:}} Unbounded_String{{Ada/delimiter|;}}
             Title   {{Ada/delimiter|:}} Unbounded_String{{Ada/delimiter|;}}
             Year    {{Ada/delimiter|:}} Integer{{Ada/delimiter|;}}
          {{Ada/keyword|end}} {{Ada/keyword|record}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|end}} Books{{Ada/delimiter|;}}
 
    {{Ada/comment| shelf manipulation}}
 
    {{Ada/keyword|procedure}} Put {{Ada/delimiter|(}}it{{Ada/delimiter|:}} Item_Ref{{Ada/delimiter|)}}{{Ada/delimiter|;}}
    {{Ada/keyword|function}} Get {{Ada/delimiter|(}}identifier {{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|return}} Item_Ref{{Ada/delimiter|;}}
    {{Ada/keyword|function}} Search {{Ada/delimiter|(}}title {{Ada/delimiter|:}} String{{Ada/delimiter|)}} {{Ada/keyword|return}} ID{{Ada/delimiter|;}}
 
 {{Ada/keyword|private}}
 
    {{Ada/comment| keeping private things private}}
 
    {{Ada/keyword|package}} Boxes {{Ada/keyword|is}}
       {{Ada/keyword|type}} Treasure{{Ada/delimiter|(}}Identifier{{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|limited}} {{Ada/keyword|private}}{{Ada/delimiter|;}}
    {{Ada/keyword|private}}
       {{Ada/keyword|type}} Treasure{{Ada/delimiter|(}}Identifier{{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|new}} Item{{Ada/delimiter|(}}Identifier{{Ada/delimiter|)}} {{Ada/keyword|with}} {{Ada/keyword|null}} {{Ada/keyword|record}}{{Ada/delimiter|;}}
    {{Ada/keyword|end}} Boxes{{Ada/delimiter|;}}
 
 {{Ada/keyword|end}} Shelf{{Ada/delimiter|;}}

A package may also be nested inside a subprogram. In fact, packages can be declared
in any declarative part, including those of a block.

=== Child packages ===

Ada allows one to extend the functionality of a unit (package) with so-called children (child packages).
With certain exceptions, all the functionality of the parent is available to a child.
This means that all public and private declarations of the parent package are visible to
all child packages.
 
The above example, reworked as a hierarchy of packages, looks like this. Notice that
the package {{Ada/package|Ada|Strings|Unbounded}} is not needed by the top
level package &lt;tt&gt;Shelf&lt;/tt&gt;, hence its with clause doesn't appear here. (We have added a
match function for searching a shelf, though):


 {{Ada/keyword|package}} Shelf {{Ada/keyword|is}}
 
    {{Ada/keyword|pragma}} Elaborate_Body{{Ada/delimiter|;}}
 
    {{Ada/keyword|type}} ID {{Ada/keyword|is}} {{Ada/keyword|range}} 1_000 {{Ada/delimiter|..}} 9_999{{Ada/delimiter|;}}
    {{Ada/keyword|type}} Item {{Ada/delimiter|(}}Identifier {{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|abstract}} {{Ada/keyword|tagged}} {{Ada/keyword|limited}} {{Ada/keyword|null}} {{Ada/keyword|record}}{{Ada/delimiter|;}}
    {{Ada/keyword|type}} Item_Ref {{Ada/keyword|is}} {{Ada/keyword|access}} {{Ada/keyword|constant}} Item{{Ada/delimiter|'}}{{Ada/attribute|Class}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|function}} Next_ID {{Ada/keyword|return}} ID{{Ada/delimiter|;}}
    {{Ada/comment| a fresh ID for an Item to Put on the shelf}}
 
    {{Ada/keyword|function}} match {{Ada/delimiter|(}}it {{Ada/delimiter|:}} Item{{Ada/delimiter|;}} Text {{Ada/delimiter|:}} String{{Ada/delimiter|)}} {{Ada/keyword|return}} Boolean {{Ada/keyword|is}} {{Ada/keyword|abstract}}{{Ada/delimiter|;}}
    {{Ada/comment| see whether It has bibliographic information matching Text}}
 
 
    {{Ada/comment|  shelf manipulation}}
 
    {{Ada/keyword|procedure}} Put {{Ada/delimiter|(}}it{{Ada/delimiter|:}} Item_Ref{{Ada/delimiter|)}}{{Ada/delimiter|;}}
    {{Ada/keyword|function}} Get {{Ada/delimiter|(}}identifier {{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|return}} Item_Ref{{Ada/delimiter|;}}
    {{Ada/keyword|function}} Search {{Ada/delimiter|(}}title {{Ada/delimiter|:}} String{{Ada/delimiter|)}} {{Ada/keyword|return}} ID{{Ada/delimiter|;}}
 
 {{Ada/keyword|end}} Shelf{{Ada/delimiter|;}}

The name of a child package consists of the parent unit's name followed by the
child package's identifier, separated by a period (dot) `{{Ada/delimiter|.}}'.

 {{Ada/keyword|with}} {{Ada/package|Ada|Strings|Unbounded}}{{Ada/delimiter|;}} {{Ada/keyword|use}} {{Ada/package|Ada|Strings|Unbounded}}{{Ada/delimiter|;}}
 
 {{Ada/keyword|package}} Shelf{{Ada/delimiter|.}}Books {{Ada/keyword|is}}
 
    {{Ada/keyword|type}} Literature {{Ada/keyword|is}} {{Ada/delimiter|(}}
       Play{{Ada/delimiter|,}}
       Novel{{Ada/delimiter|,}}
       Poem{{Ada/delimiter|,}}
       Story{{Ada/delimiter|,}}
       Text{{Ada/delimiter|,}}
       Art{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|type}} Book {{Ada/delimiter|(}}Kind {{Ada/delimiter|:}} Literature{{Ada/delimiter|;}} Identifier {{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|new}} Item {{Ada/delimiter|(}}Identifier{{Ada/delimiter|)}}
       {{Ada/keyword|with}} {{Ada/keyword|record}}
          Authors {{Ada/delimiter|:}} Unbounded_String{{Ada/delimiter|;}}
          Title   {{Ada/delimiter|:}} Unbounded_String{{Ada/delimiter|;}}
          Year    {{Ada/delimiter|:}} Integer{{Ada/delimiter|;}}
       {{Ada/keyword|end}} {{Ada/keyword|record}}{{Ada/delimiter|;}}
 
    {{Ada/keyword|function}} match{{Ada/delimiter|(}}it{{Ada/delimiter|:}} Book{{Ada/delimiter|;}} text{{Ada/delimiter|:}} String{{Ada/delimiter|)}} {{Ada/keyword|return}} Boolean{{Ada/delimiter|;}}
 
 {{Ada/keyword|end}} Shelf{{Ada/delimiter|.}}Books{{Ada/delimiter|;}}

&lt;tt&gt;Book&lt;/tt&gt; has two components of type &lt;tt&gt;Unbounded_String&lt;/tt&gt;,
so {{Ada/package|Ada|Strings|Unbounded}} appears in a with clause of the child package.
This is unlike the nested packages case which requires that all
units needed by any one of the nested packages be listed in the context clause of the enclosing package
(see {{Ada/2005/RM3|10|1|2|Context Clauses - With Clauses}}).
Child packages thus give better control over package dependences. With clauses are more local.

The new child package &lt;tt&gt;Shelf.Disks&lt;/tt&gt; looks similar. The &lt;tt&gt;Boxes&lt;/tt&gt; package which was
a nested package in the private part of the original &lt;tt&gt;Shelf&lt;/tt&gt; package is moved to a private
child package:

 {{Ada/keyword|private}} {{Ada/keyword|package}} Shelf{{Ada/delimiter|.}}Boxes {{Ada/keyword|is}}
     {{Ada/keyword|type}} Treasure{{Ada/delimiter|(}}Identifier{{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|limited}} {{Ada/keyword|private}}{{Ada/delimiter|;}}
 {{Ada/keyword|private}}
     {{Ada/keyword|type}} Treasure{{Ada/delimiter|(}}Identifier{{Ada/delimiter|:}} ID{{Ada/delimiter|)}} {{Ada/keyword|is}} {{Ada/keyword|new}} Item{{Ada/delimiter|(}}Identifier{{Ada/delimiter|)}} {{Ada/keyword|with}} {{Ada/keyword|null}} {{Ada/keyword|record}}{{Ada/delimiter|;}}
     {{Ada/keyword|function}} match{{Ada/delimiter|(}}it{{Ada/delimiter|:}} Treasure{{Ada/delimiter|;}} text{{Ada/delimiter|:}} String{{Ada/delimiter|)}} {{Ada/keyword|return}} Boolean{{Ada/delimiter|;}}
 {{Ada/keyword|end}} Shelf{{Ada/delimiter|.}}Boxes{{Ada/delimiter|;}}

The privacy of the package means that it can only be used by equally private client
units. These clients include private siblings and also the bodies of siblings
(as bodies are never public).

Child packages may be listed in context clauses just like normal packages.
A {{Ada/keyword|with}} of a child also 'withs' the parent.

=== Subunits ===

A subunit is just a feature to move a body into a place of its own when otherwise the enclosing body will become too large. It can also be used for limiting the scope of context clauses.

The subunits allow to physically divide a package into different compilation units without breaking the logical unity of the package. Usually each separated subunit goes to a different file allowing separate compilation of each subunit and independent version control history for each one.

  {{Ada/keyword|package}} {{Ada/keyword|body}} Pack {{Ada/keyword|is}}
    {{Ada/keyword|procedure}} Proc {{Ada/keyword|is}} {{Ada/keyword|separate}}{{Ada/delimiter|1=;}}
  {{Ada/keyword|end}} Pack{{Ada/delimiter|1=;}}
 
  {{Ada/keyword|with}} Some_Unit{{Ada/delimiter|1=;}}
  {{Ada/keyword|separate}} {{Ada/delimiter|1=(}}Pack{{Ada/delimiter|1=)}}
  {{Ada/keyword|procedure}} Proc {{Ada/keyword|is}}
  {{Ada/keyword|begin}}
    ...
  {{Ada/keyword|end}} Proc{{Ada/delimiter|1=;}}

== Notes ==

&lt;references/&gt;

== See also ==

=== Wikibook ===

* [[Ada Programming]]

=== Wikipedia ===

* [[Wikipedia:Module (programming)|Module]]

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|7|title=Packages}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|7|title=Packages}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Packages]]
[[{{BOOKCATEGORY|Ada Programming}}/Unfinished module|Packages]]

[[es:Programación en Ada/Paquetes]]
&lt;/noinclude&gt;</text>
      <sha1>hhpbxmxnaek1wq1smzyhietfcqjlg2b</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Platform</title>
    <ns>0</ns>
    <id>28709</id>
    <revision>
      <id>3250230</id>
      <parentid>3211734</parentid>
      <timestamp>2017-07-31T00:28:10Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* Ada Reference Manual */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="755" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Platform}}
__TOC__&lt;/noinclude&gt;

Ada is known to be very portable, but there is sometimes a necessity of using  a specific platform feature. For that matter, there are some non-standard libraries.

* [[Ada Programming/Platform/Linux|Linux]]
* [[Ada Programming/Platform/Windows|Windows]]
* [[Ada Programming/Platform/POSIX|POSIX systems]]
* [[Ada Programming/Platform/VM|Virtual machines]]
** [[Ada Programming/Platform/VM/Java|Java]]
** [[Ada Programming/Platform/VM/dotNET|.NET]]

== See also ==

=== Wikibook ===

* [[Ada Programming]]

=== Ada Reference Manual ===

—does not apply --

=== Ada Quality and Style Guide ===

* {{Ada/SG1|7|Portability}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Platform]]
&lt;/noinclude&gt;</text>
      <sha1>g9g8fpfvzjx6hh5ptf8evbvmdv633jf</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Platform/Linux</title>
    <ns>0</ns>
    <id>22262</id>
    <revision>
      <id>3250231</id>
      <parentid>3211721</parentid>
      <timestamp>2017-07-31T00:28:11Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* Ada Reference Manual */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1068" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Platform|Linux}}
__TOC__&lt;/noinclude&gt;

The following libraries help you when you target the Linux Platform.

; [[Ada Programming/Platform/POSIX|Florist]] : POSIX.5 binding. It will let you perform Linux system calls in the POSIX subset.
; [[Ada Programming/Platform/Ncurses|Ncurses]] : text terminal library.
; [[Ada Programming/Platform/Texttools|Texttools]] : ncurses-based library for the Linux console. 
; [[Ada Programming/Libraries/GUI/GtkAda|GtkAda]] : GUI library (actually multiplatform).

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]

=== Ada Reference Manual ===

—does not apply --

=== External resources ===

* [http://www.pegasoft.ca/resources/boblap/book.html The Big Online Book of Linux Ada Programming]
* [http://www.cs.kuleuven.be/~dirk/ada-belgium/events/06/060226-fosdem-4-ada-in-debian.pdf Ada in Debian GNU/Linux], slides suitable for a 50minute presentation, by [[User:Ludovic Brenta|Ludovic Brenta]].


&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Linux]]
&lt;/noinclude&gt;</text>
      <sha1>l1wm15oibnr5xgjil5zc0b09jxp3vnh</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Platform/VM</title>
    <ns>0</ns>
    <id>22261</id>
    <revision>
      <id>3250233</id>
      <parentid>3211783</parentid>
      <timestamp>2017-07-31T00:28:13Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* Ada Reference Manual */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="554" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Platform|VM}}
__TOC__&lt;/noinclude&gt;

The following tools help you when you target a virtual machine.

; [[Ada Programming/Platform/VM/Java|Java]] : Programming Ada 95 for Java's JVM (JGnat, AppletMagic)
; [[Ada Programming/Platform/VM/dotNET|.NET]] : Programming Ada for the .NET Platform (GNAT Pro .NET, A#)

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]

=== Ada Reference Manual ===

—does not apply --

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Virtual Machine]]
&lt;/noinclude&gt;</text>
      <sha1>7p8jivtdfcncc5lji27zzq97dkuhrfc</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Platform/Windows</title>
    <ns>0</ns>
    <id>22260</id>
    <revision>
      <id>3569222</id>
      <parentid>3569215</parentid>
      <timestamp>2019-09-06T02:34:00Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>[[WB:REVERT|Reverted]] edits by [[Special:Contributions/37.154.214.114|37.154.214.114]] ([[User talk:37.154.214.114|talk]]) to last version by PokestarFan</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1092" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Platform|Windows}}
__TOC__&lt;/noinclude&gt;

The following Libraries and Tools help you when you target the MS-Windows Platform.

; [[Ada Programming/Platform/Windows/win32binding|GWindows]] : Win32 binding
; [http://www.rrsoftware.com/html/prodinf/claw/claw.htm CLAW] : Another Win32 binding that works with any Ada 95 compiler. An introductory edition is available free of charge for non-commercial use.
; [[Ada Programming/Platform/Windows/win32binding|GNATCOM]] : COM/DCOM/ActiveX binding
; [[Ada Programming/Platform/Windows/win32binding|GNAVI]] : Visual [[w:Rapid application development|RAD]] &lt;small&gt;([[w:Rapid application development|Rapid application development]])&lt;/small&gt; Development environment
; [[/Console/]] : Libraries for console I/O.
; [[/Visual C++ - GNAT interface/]] : Guide for calling Ada functions from C++ using GNAT and Visual C++.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries]]

=== Ada Reference Manual ===

—does not apply --

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Windows]]
&lt;/noinclude&gt;</text>
      <sha1>51ydbddlsl36r1vbgtwg06ik0oefxx2</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Portals</title>
    <ns>0</ns>
    <id>29730</id>
    <revision>
      <id>3445539</id>
      <parentid>3250239</parentid>
      <timestamp>2018-07-22T19:42:55Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <comment>/* Forges of open-source projects */ Removed and updated dead links. New link</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3790" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Portals}}
__TOC__&lt;/noinclude&gt;

== Forges of open-source projects ==

; [http://sourceforge.net/directory/language:ada/ SourceForge] : Currently there are 200 Ada projects hosted at SourceForge &amp;mdash; including the example programs for [https://sourceforge.net/projects/wikibook-ada Ada Programming] wikibook.

; [https://github.com/topic/ada GitHub] : A source code repository based on Git with many recent developments.

; Ada-centric forges: There are some Ada-centric forges hosted by Ada associations and individuals:
:* http://forge.ada-ru.org 
:* http://codelabs.ch
:* http://www.adaforge.io

== Directories of freely available tools and libraries ==

; [http://www.adaic.org/ada-resources/tools-libraries/ Ada Information Clearinghouse &amp;mdash; Free Tools and Libraries]

; Oloh ([http://www.ohloh.net/languages/21 language summary], [http://www.ohloh.net/tags/ada ada tag], [http://www.ohloh.net/p?page=3&amp;q=language%3Aada&amp;sort=relevance language search]) : Oloh is a directory of Open Source projects. Its main features are source code analysis of public repositories and public reviews of projects.

; [http://freecode.com/tags/ada?sort=vitality&amp;with=&amp;without= Freecode] : Freecode, formerly Freshmeat.net, is a software directory where developers can register their projects and users find interesting software. Although the content is somewhat redundant to other portals, some projects are exclusively listed here.

== Collections of Ada source code ==

; [http://www.iste.uni-stuttgart.de/ps/adabasis.html AdaBasis] : AdaBasis consists of about 560 MB of public domain source code and documents, mainly taken from the Public Ada Library (PAL). The software has been classified and is presented in a hierarchical manner, separated in different application domains, and, for some domains, with an additional multi-faceted searching facility.&lt;br/&gt; The intent is to provide students, teachers and researchers with a large collection of reusable Ada components and systems for use in language and software engineering courses. &lt;br/&gt; AdaBasis was set up by the Programming Languages Group of the Institut für Informatik at the University of Stuttgart, Germany. They plan to enlarge the library in the future, and welcome free public domain contributions. For more informations or to make suggestions please contact [mailto:adabasis@informatik.uni-stuttgart.de adabasis@informatik.uni-stuttgart.de]

; [http://www2.informatik.uni-stuttgart.de/iste/ps/ada-software/html/PAL.html The Public Ada Library (PAL)] : The PAL is a library of Ada and VHDL software, information, and courseware that contains over 1 BILLION bytes of material (mainly in compressed form). All items in the PAL have been released to the public with unlimited distribution, and, in most cases (the exceptions are shareware), the items are freeware.

; [ftp://ftp.cs.kuleuven.ac.be/pub/Ada-Belgium/cdrom/index.html Ada and Software Engineering Library Version 2 (ASE2)] : ''The ASE2 Library contains over 1.1GB of material on Ada and Software Engineering assembled through a collaboration with over 60 organizations''. Walnut Creek CDROM once sold copies of this library. Nowadays it is no longer maintained but  is still hosted in the Ada Belgium FTP server. It may contain useful resources, but it is highly redundant with other libraries.

; [http://www.adapower.com/index.php?Command=Packages&amp;Title=Packages+for+Reuse AdaPower] : A directory and collection of Ada tools and resources.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Tutorials]]
* [[Ada Programming/Wikis]]

=== Ada Reference Manual ===

—does not apply --

=== Ada Quality and Style Guide ===

—does not apply --

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Portals]]
&lt;/noinclude&gt;</text>
      <sha1>sox2o6h48nilmu910xzq2d1eh48rq4m</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Pragmas</title>
    <ns>0</ns>
    <id>16957</id>
    <revision>
      <id>3263227</id>
      <parentid>3250240</parentid>
      <timestamp>2017-08-12T02:19:56Z</timestamp>
      <contributor>
        <username>PokestarFanBot</username>
        <id>3066054</id>
      </contributor>
      <minor/>
      <comment>Bot: Automatic cosmetic changes, TEST EDIT</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="23163" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Pragmas}}
__TOC__&lt;/noinclude&gt;

== Description ==

[[Ada Programming/Pragmas|Pragmas]] control the compiler, i.e. they are [[w:Compiler directive|compiler directives]]. They have the standard form of

 {{Ada/keyword|pragma}} ''Name'' (''Parameter_List'');

where the parameter list is optional.

== List of language defined pragmas ==

Some pragmas are specially marked:

; Ada&amp;nbsp;2005 : This is a new [[Ada Programming/Ada 2005|Ada&amp;nbsp;2005]] pragma.
; Ada&amp;nbsp;2012 : This is a new [[Ada Programming/Ada 2012|Ada&amp;nbsp;2012]] pragma.
; Obsolescent : This is a deprecated pragma and it should not be used in new code.

=== A &amp;ndash; H ===

* [[Ada Programming/Pragmas/All Calls Remote|All_Calls_Remote]]
* [[Ada Programming/Pragmas/Assert|Assert]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt;
* [[Ada Programming/Pragmas/Assertion Policy|Assertion_Policy]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt;
* [[Ada Programming/Pragmas/Asynchronous|Asynchronous]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Atomic|Atomic]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Atomic Components|Atomic_Components]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Attach Handler|Attach_Handler]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Controlled|Controlled]] &lt;small&gt;(Removed from Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Convention|Convention]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/CPU|CPU]] &lt;small&gt;(Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Default Storage Pool|Default_Storage_Pool]] &lt;small&gt;(Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Detect Blocking|Detect_Blocking]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt;
* [[Ada Programming/Pragmas/Discard Names|Discard_Names]]
* [[Ada Programming/Pragmas/Dispatching Domain|Dispatching_Domain]] &lt;small&gt;(Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Elaborate|Elaborate]]
* [[Ada Programming/Pragmas/Elaborate All|Elaborate_All]]
* [[Ada Programming/Pragmas/Elaborate Body|Elaborate_Body]]
* [[Ada Programming/Pragmas/Export|Export]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;

=== I &amp;ndash; O ===

* [[Ada Programming/Pragmas/Import|Import]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Independent|Independent]] &lt;small&gt;(Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Independent Component|Independent_Component]] &lt;small&gt;(Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Inline|Inline]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Inspection Point|Inspection_Point]]
* [[Ada Programming/Pragmas/Interface|Interface]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Pragmas/Interrupt Handler|Interrupt_Handler]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Interrupt Priority|Interrupt_Priority]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Linker Options|Linker_Options]]
* [[Ada Programming/Pragmas/List|List]]
* [[Ada Programming/Pragmas/Locking Policy|Locking_Policy]]
* [[Ada Programming/Pragmas/Memory Size|Memory_Size]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Pragmas/No Return|No_Return]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt; &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Normalize Scalars|Normalize_Scalars]]
* [[Ada Programming/Pragmas/Optimize|Optimize]]

=== P &amp;ndash; R ===

* [[Ada Programming/Pragmas/Pack|Pack]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Page|Page]]
* [[Ada Programming/Pragmas/Partition Elaboration Policy|Partition_Elaboration_Policy]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt;
* [[Ada Programming/Pragmas/Preelaborable Initialization|Preelaborable_Initialization]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt;
* [[Ada Programming/Pragmas/Preelaborate|Preelaborate]]
* [[Ada Programming/Pragmas/Priority|Priority]] &lt;small&gt;(Obsolescent since Ada&amp;nbsp;2012)&lt;/small&gt;
* [[Ada Programming/Pragmas/Priority Specific Dispatching|Priority_Specific_Dispatching]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt;
* [[Ada Programming/Pragmas/Profile|Profile]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt;
* [[Ada Programming/Pragmas/Pure|Pure]]
* [[Ada Programming/Pragmas/Queueing Policy|Queueing_Policy]]
* [[Ada Programming/Pragmas/Relative Deadline|Relative_Deadline]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt;
* [[Ada Programming/Pragmas/Remote Call Interface|Remote_Call_Interface]]
* [[Ada Programming/Pragmas/Remote Types|Remote_Types]]
* [[Ada Programming/Pragmas/Restrictions|Restrictions]]
* [[Ada Programming/Pragmas/Reviewable|Reviewable]]

=== S &amp;ndash; Z ===

* [[Ada Programming/Pragmas/Shared|Shared]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Pragmas/Shared Passive|Shared_Passive]]
* [[Ada Programming/Pragmas/Storage Size|Storage_Size]]
* [[Ada Programming/Pragmas/Storage Unit|Storage_Unit]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Pragmas/Suppress|Suppress]]
* [[Ada Programming/Pragmas/System Name|System_Name]] &lt;small&gt;(Obsolescent)&lt;/small&gt;
* [[Ada Programming/Pragmas/Task Dispatching Policy|Task_Dispatching_Policy]]
* [[Ada Programming/Pragmas/Unchecked Union|Unchecked_Union]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt;
* [[Ada Programming/Pragmas/Unsuppress|Unsuppress]] &lt;small&gt;(Ada&amp;nbsp;2005)&lt;/small&gt;
* [[Ada Programming/Pragmas/Volatile|Volatile]]
* [[Ada Programming/Pragmas/Volatile Components|Volatile_Components]]

== List of implementation defined pragmas ==

The following pragmas are not available in all Ada compilers, only in those that had implemented them.

Currently, there are only listed the implementation-defined pragmas of a few compilers. You can help Wikibooks [http://en.wikibooks.org/w/index.php?title=Ada_Programming/Pragmas&amp;action=edit adding] specific aspects of other compilers:

; GNAT : [http://www.adacore.com/wp-content/files/auto_update/gnat-unw-docs/html/gnat_rm_2.html Implementation defined pragma] of the [[Ada Programming/GNAT|GNAT]] compiler from AdaCore and FSF.
; HP Ada : [http://h71000.www7.hp.com/commercial/ada/ada_lrm.pdf Implementation defined pragma] of the [http://h71000.www7.hp.com/commercial/ada/ada_index.html HP Ada] compiler (formerly known as "DEC Ada").
; ICC : Implementation-defined pragma&lt;ref&gt;"2.2 ICC-Defined Pragmas", ''ICC Ada Implementation Reference &amp;mdash; ICC Ada Version 8.2.5 for i960MC Targets'', document version 2.11.4.[http://www.irvine.com/support/general/]&lt;/ref&gt; of the Irvine [http://www.irvine.com/products.html ICC] compiler.
; PowerAda : [http://www.ocsystems.com/user_guide/powerada/html/powerada-106.html#HEADING106-0 Implementation defined pragma] of OC Systems' [http://www.ocsystems.com/prod_powerada.html PowerAda].
; SPARCompiler : [http://docs.sun.com/app/docs/doc/802-3641/6i7h8si5i?a=view#F.Implementation-Dependent_Characteristi-2 Implementation defined pragma] of Sun's [http://docs.sun.com/app/docs/coll/15.4 SPARCompiler Ada].[http://findarticles.com/p/articles/mi_m0EIN/is_1994_Nov_2/ai_15882197]

=== A &amp;ndash; C ===

* [[Ada Programming/Pragmas/Abort Defer|Abort_Defer]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Ada 83|Ada_83]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Ada 95|Ada_95]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Ada 05|Ada_05]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Ada 2005|Ada_2005]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Ada 12|Ada_12]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Ada 2012|Ada_2012]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Annotate|Annotate]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Assume No Invalid Values|Assume_No_Invalid_Values]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Ast Entry|Ast_Entry]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Bit Pack|Bit_Pack]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Built In|Built_In]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Byte Pack|Byte_Pack]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/C Pass By Copy|C_Pass_By_Copy]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Call Mechanism|Call_Mechanism]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Canonical Streams|Canonical_Streams]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Check|Check]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Check Name|Check_Name]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Check Policy|Check_Policy]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/CM Info|CM_Info]] &lt;small&gt;(PowerAda)&lt;/small&gt;
* [[Ada Programming/Pragmas/Comment|Comment]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Common Object|Common_Object]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Compatible Calls|Compatible_Calls]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Compile Time Error|Compile_Time_Error]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Compile Time Warning|Compile_Time_Warning]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Complete Representation|Complete_Representation]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Complex Representation|Complex_Representation]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Component Alignment|Component_Alignment]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Compress|Compress]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Constrain Private|Constrain_Private]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Convention Identifier|Convention_Identifier]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/CPP Class|CPP_Class]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/CPP Constructor|CPP_Constructor]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/CPP Virtual|CPP_Virtual]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/CPP Vtable|CPP_Vtable]] &lt;small&gt;(GNAT)&lt;/small&gt;

=== D &amp;ndash; H ===

* [[Ada Programming/Pragmas/Data Mechanism|Data_Mechanism]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Debug|Debug]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Debug Policy|Debug_Policy]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Delete Subprogram Entry|Delete_Subprogram_Entry]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Elaboration Checks|Elaboration_Checks]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Eliminate|Eliminate]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Error|Error]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Export Exception|Export_Exception]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Export Function|Export_Function]] &lt;small&gt;(GNAT, HP Ada, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Export Mechanism|Export_Mechanism]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Export Object|Export_Object]] &lt;small&gt;(GNAT, HP Ada, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Export Procedure|Export_Procedure]] &lt;small&gt;(GNAT, HP Ada, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Export Value|Export_Value]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Export Valued Procedure|Export_Valued_Procedure]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Extend System|Extend_System]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Extensions Allowed|Extensions_Allowed]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/External|External]] &lt;small&gt;(GNAT, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/External Name|External_Name]] &lt;small&gt;(ICC, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/External Name Casing|External_Name_Casing]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Fast Math|Fast_Math]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Favor Top Level|Favor_Top_Level]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Finalize Storage Only|Finalize_Storage_Only]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Float Representation|Float_Representation]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Foreign|Foreign]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Generic Mechanism|Generic_Mechanism]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Generic Policy|Generic_Policy]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;

=== I &amp;ndash; L ===

* [[Ada Programming/Pragmas/i960 Intrinsic|i960_Intrinsic]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Ident|Ident]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Images|Images]] &lt;small&gt;(PowerAda)&lt;/small&gt;
* [[Ada Programming/Pragmas/Implemented|Implemented]], previously named 'Implemented_By_Entry' &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Implicit Code|Implicit_Code]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Implicit Packing|Implicit_Packing]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Import Exception|Import_Exception]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Import Function|Import_Function]] &lt;small&gt;(GNAT, HP Ada, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Import Mechanism|Import_Mechanism]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Import Object|Import_Object]] &lt;small&gt;(GNAT, HP Ada, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Import Procedure|Import_Procedure]] &lt;small&gt;(GNAT, HP Ada, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Import Valued Procedure|Import_Valued_Procedure]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Include|Include]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Initialize|Initialize]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Initialize Scalars|Initialize_Scalars]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Inline Always|Inline_Always]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Inline Generic|Inline_Generic]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Inline Only|Inline_Only]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Instance Policy|Instance_Policy]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Interface Constant|Interface_Constant]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Interface Information|Interface_Information]] &lt;small&gt;(PowerAda)&lt;/small&gt;
* [[Ada Programming/Pragmas/Interface Mechanism|Interface_Mechanism]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Interface Name|Interface_Name]] &lt;small&gt;(GNAT, HP Ada, ICC, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Interrupt State|Interrupt_State]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Invariant|Invariant]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Keep Names|Keep_Names]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Label|Label]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/License|License]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Link With|Link_With]] &lt;small&gt;(GNAT, ICC, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Linker Alias|Linker_Alias]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Linker Constructor|Linker_Constructor]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Linker Destructor|Linker_Destructor]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Linker Section|Linker_Section]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Long Float|Long_Float]] &lt;small&gt;(GNAT: OpenVMS, HP Ada)&lt;/small&gt;

=== M &amp;ndash; P ===

* [[Ada Programming/Pragmas/Machine Attribute|Machine_Attribute]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Main|Main]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Main Storage|Main_Storage]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/No Body|No_Body]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/No Image|No_Image]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/No Strict Aliasing|No_Strict_Aliasing]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/No Suppress|No_Suppress]] &lt;small&gt;(PowerAda)&lt;/small&gt;
* [[Ada Programming/Pragmas/No Reorder|No_Reorder]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/No Zero|No_Zero]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Noinline|Noinline]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Non Reentrant|Non_Reentrant]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Not Elaborated|Not_Elaborated]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Not Null|Not_Null]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Obsolescent|Obsolescent]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Optimize Alignment|Optimize_Alignment]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Optimize Code|Optimize_Code]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Optimize Options|Optimize_Options]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Ordered|Ordered]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Parameter Mechanism|Parameter_Mechanism]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Passive|Passive]] &lt;small&gt;(GNAT, HP Ada, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Persistent BSS|Persistent_BSS]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Physical Address|Physical_Address]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Polling|Polling]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Postcondition|Postcondition]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Precondition|Precondition]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Preserve Layout|Preserve_Layout]] &lt;small&gt;(PowerAda)&lt;/small&gt;
* [[Ada Programming/Pragmas/Profile Warnings|Profile_Warnings]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Propagate Exceptions|Propagate_Exceptions]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Protect Registers|Protect_Registers]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Protected Call|Protected_Call]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Protected Return|Protected_Return]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Psect Object|Psect_Object]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Pure Function|Pure_Function]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Put|Put]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Put Line|Put_Line]] &lt;small&gt;(ICC)&lt;/small&gt;

=== R &amp;ndash; S ===

* [[Ada Programming/Pragmas/Reserve Registers|Reserve_Registers]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Restriction Warnings|Restriction_Warnings]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/RTS Interface|RTS_Interface]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/SCCS ID|SCCS_ID]] &lt;small&gt;(PowerAda)&lt;/small&gt;
* [[Ada Programming/Pragmas/Share Body|Share_Body]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Share Code|Share_Code]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Share Generic|Share_Generic]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Shareable|Shareable]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Short Circuit And Or|Short_Circuit_And_Or]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Short Descriptors|Short_Descriptors]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Simple Storage Pool Type|Simple_Storage_Pool_Type]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Simple Task|Simple_Task]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Source File Name|Source_File_Name]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Source File Name Project|Source_File_Name_Project]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Source Reference|Source_Reference]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Stack Size|Stack_Size]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Static Elaboration|Static_Elaboration]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Static Elaboration Desired|Static_Elaboration_Desired]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Stream Convert|Stream_Convert]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Style Checks|Style_Checks]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Subtitle|Subtitle]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Suppress All|Suppress_All]] &lt;small&gt;(GNAT, HP Ada, PowerAda, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Suppress Elaboration Checks|Suppress_Elaboration_Checks]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Suppress Exception Locations|Suppress_Exception_Locations]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Suppress Initialization|Suppress_Initialization]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/System Table|System_Table]] &lt;small&gt;(ICC)&lt;/small&gt;

=== T &amp;ndash; Z ===

* [[Ada Programming/Pragmas/Task Attributes|Task_Attributes]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Task Info|Task_Info]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Task Name|Task_Name]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Task Storage|Task_Storage]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Test Case|Test_Case]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Thread Body|Thread_Body]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Thread Local Storage|Thread_Local_Storage]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Time Slice|Time_Slice]] &lt;small&gt;(GNAT, HP Ada, ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Time Slice Attributes|Time_Slice_Attributes]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Title|Title]] &lt;small&gt;(GNAT, HP Ada)&lt;/small&gt;
* [[Ada Programming/Pragmas/Unimplemented Unit|Unimplemented_Unit]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Universal Aliasing|Universal_Aliasing]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Universal Data|Universal_Data]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Unmodified|Unmodified]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Unreferenced|Unreferenced]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Unreferenced Objects|Unreferenced_Objects]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Unreserve All Interrupts|Unreserve_All_Interrupts]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Unsigned Literal|Unsigned_Literal]] &lt;small&gt;(ICC)&lt;/small&gt;
* [[Ada Programming/Pragmas/Use VADS Size|Use_VADS_Size]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Validity Checks|Validity_Checks]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Warning|Warning]] &lt;small&gt;(SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Warnings|Warnings]] &lt;small&gt;(GNAT, SPARCompiler)&lt;/small&gt;
* [[Ada Programming/Pragmas/Weak External|Weak_External]] &lt;small&gt;(GNAT)&lt;/small&gt;
* [[Ada Programming/Pragmas/Wide Character Encoding|Wide_Character_Encoding]] &lt;small&gt;(GNAT)&lt;/small&gt;

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Aspects]]
* [[Ada Programming/Attributes]]
* [[Ada Programming/Keywords]]

=== Ada Reference Manual ===

==== Ada 83 ====
* {{Ada/83/RM|2|8|title=Pragmas}}
* {{Ada/83/RM|B|title=Predefined Language Pragmas}}

==== Ada 95 ====
* {{Ada/95/RM|2|8|title=Pragmas}}
* {{Ada/95/RM|L|title=(informative) Language-Defined Pragmas}}

==== Ada 2005 ====
* {{Ada/2005/RM|2|8|title=Pragmas}}
* {{Ada/2005/RM|L|title=(informative) Language-Defined Pragmas}}

==== Ada 2012 ====
* {{Ada/2012/RM|2|8|title=Pragmas}}
* {{Ada/2012/RM|L|title=(informative) Language-Defined Pragmas}}

== References ==
&lt;references/&gt;

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Pragmas]]
[[{{BOOKCATEGORY|Ada Programming}}/Ada 2005 feature|Pragmas]]


&lt;/noinclude&gt;

[[es:Programación en Ada/Pragmas]]</text>
      <sha1>ohjgrvmxbbfru6u9mkgy4bjr6cy34ba</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Pragmas/Atomic:3</title>
    <ns>0</ns>
    <id>159719</id>
    <revision>
      <id>3211352</id>
      <parentid>2504021</parentid>
      <timestamp>2017-05-01T12:25:53Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4401" xml:space="preserve">It '''is almost always incorrect to use [[Ada Programming/Pragmas/Atomic|atomic]] or [[Ada Programming/Pragmas/Volatile|volatile]] variables for [[Ada Programming/Tasking|tasking]]'''.&lt;ref&gt;{{cite web
|title = Volatile: Almost Useless for Multi-Threaded Programming
|author = Arch Robison
|date = 2007-11-30
|publisher = Intel Software Network
|url = http://softwareblogs.intel.com/2007/11/30/volatile-almost-useless-for-multi-threaded-programming/
|accessdate = 2008-05-30
|quote = There is a widespread notion that the keyword volatile is good for multi-threaded programming (...) volatile is almost useless for multi-threaded programming.
}}&lt;/ref&gt; When an object is atomic it just means that it will be read from or written to memory atomically. The compiler ''will not'' generate atomic instructions or memory barriers when accessing to that object, it will just:
* check that the architecture guarantees atomic memory loads and stores, 
* disallow some compiler optimizations, like reordering or suppressing redundant accesses to the object.

For example, the following code, where &lt;tt&gt;A&lt;/tt&gt; is an atomic object can be misunderstood:

 A := A + 1;  {{Ada/--|Not an atomic increment!}}

The compiler '''will not''' (and is not allowed by the Standard to) generate an atomic increment instruction to directly increment and update from memory the variable &lt;tt&gt;A&lt;/tt&gt;.&lt;ref name="taylor2008"&gt;{{cite web
|title = Volatile
|author = Ian Lance Taylor
|date = 2008-03-05
|url = http://www.airs.com/blog/archives/154
|accessdate = 2008-05-28
|quote = Using [the C/C++ qualifier] volatile does not mean that the variable is accessed atomically; no locks are used. Using volatile does not mean that other cores in a multi-core system will see the memory accesses; no cache flushes are used. (...) Using volatile does not imply any sort of memory barrier; the processor can and will rearrange volatile memory accesses. (...) You should not use more than one such variable to communicate between any pair of threads, as there is no guarantee that the different threads will see the accesses in the same order.
}}&lt;/ref&gt; This is the code generated by the compiler:

   A := A + 1;
 804969f:	a1 04 95 05 08       	mov    0x8059504,%eax
 80496a4:	40                   	inc    %eax
 80496a5:	a3 04 95 05 08       	mov    %eax,0x8059504

As can be seen, no atomic increment instruction or test-and-set opcode will be generated. Like in other programming languages, if these specific instructions are required in the program they must be written explicitly using machine code insertions.&lt;ref&gt;{{cite book
|author = Laurent Guerby 
|title = Ada 95 Rationale
|month = January
|year = 1995
|chapter = {{Ada/95/R2|C|5|Shared Variable Control|part=3}}
|publisher = Intermetrics
|accessdate = 2008-05-28
|quote = A need to access specific machine instructions arises sometimes (...). Examples include instructions that perform compound operations atomically on shared memory, such as test-and-set and compare-and-swap (...)
}}&lt;/ref&gt;

The above code snippet is equivalent to the following code (both code sequences generates exactly the same object code), where &lt;tt&gt;T&lt;/tt&gt; is a (non-atomic) temporary variable:

 T := A;      {{Ada/--|A is copied atomically to local variable T}}
 T := T + 1;  {{Ada/--|local variable T is incremented}}
 A := T;      {{Ada/--|A is stored atomically}}

Thus it is incorrect to modify an atomic variable at the same time from multiple tasks. For example, two tasks incrementing a counter in parallel. Even in an uniprocessor, other Ada tasking features like a protected object should be used instead. In multiprocessors, depending on the [[w:Memory model (programming)|memory consistency model]], using various atomic or volatile variables for task communication can have surprising consequences.&lt;ref name="taylor2008"/&gt;&lt;ref&gt;{{cite journal
|author = Sarita V. Adve, Kourosh Gharachorloo
|title = Shared Memory Consistency Models: A Tutorial
|month = December 
|year = 1996
|journal = IEEE Computer
|volume = 29
|issue = 12
|pages = 66&amp;ndash;76
|url = http://www.hpl.hp.com/techreports/Compaq-DEC/WRL-95-7.pdf
|accessdate = 2008-05-28
}}&lt;/ref&gt; Therefore, extreme care should be taken when using atomic objects for task data sharing or synchronization, specially in a multiprocessor.&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Common errors|Atomic]]
&lt;/noinclude&gt;

== References ==
{{reflist}}</text>
      <sha1>m5yp5kr3z6ze7unvswvd70b1ol61h94</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Pragmas/Pack:3</title>
    <ns>0</ns>
    <id>159717</id>
    <revision>
      <id>3250250</id>
      <parentid>3211353</parentid>
      <timestamp>2017-07-31T00:28:30Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1840" xml:space="preserve">== Exact data representation ==

It is important to realize that '''pragma [[Ada Programming/Pragmas/Pack|Pack]] must not be used to specify the exact representation of a data type''', but to help the compiler to improve the efficiency of the generated code.&lt;ref&gt;{{cite newsgroup 
|title = Pragma Pack vs. Convention C, portability issue?
|author = Adam Beneschan
|date = 2008-01-09
|newsgroup = comp.lang.ada
|id = 3f729fc9-708f-49a5-82a5-b2d82038a47c@s12g2000prg.googlegroups.com
|url = http://groups.google.es/group/comp.lang.ada/msg/6698960624779ec7
|accessdate = 2008-05-27
}}&lt;/ref&gt; The compiler is free to ignore the pragma, therefore if a specific representation of a type is required, [[Ada Programming/Representation clauses|representation clauses]] should be used instead (record representation clauses, and/or attributes [[Ada Programming/Attributes/'Size|'Size]] or [[Ada Programming/Attributes/'Component Size|'Component_Size]]).

== Bit-wise operations ==

Although in Ada 83 packed boolean arrays were used for bit-wise operations,&lt;ref&gt;Software Productivity Consortium (October 1995). ''Ada 95 Quality and Style Guide'', "{{Ada/SG3|10|5|7|Packed Boolean Array Shifts}}"&lt;/ref&gt; since Ada 95 [[Ada Programming/Types/mod|modular types]] are more adequate for these operations.&lt;ref&gt;Software Productivity Consortium (October 1995). ''Ada 95 Quality and Style Guide'', "{{Ada/SG3|10|6|3|Bit Operations on Modular Types}}"&lt;/ref&gt; The argument may be weighed against the advantages of named Boolean array indexes such as &lt;tt&gt;Traffic_Lights{{Ada/delimiter|'}}{{Ada/delimiter|(}}Red {{Ada/delimiter|1==&gt;}} True{{Ada/delimiter|,}} {{Ada/keyword|others}} {{Ada/delimiter|1==&gt;}} False{{Ada/delimiter|)}}&lt;/tt&gt;, depending on use case.&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Common errors|Pack]]
&lt;/noinclude&gt;

==References==
{{Reflist}}</text>
      <sha1>95h8vtt8bm588uzok58wjpfu0mdtugi</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Statements</title>
    <ns>0</ns>
    <id>22588</id>
    <revision>
      <id>3211766</id>
      <parentid>2504000</parentid>
      <timestamp>2017-05-01T23:16:41Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="517" xml:space="preserve">&lt;noinclude&gt;{{Computer Programming/Statements/0}}
__TOC__&lt;/noinclude&gt;
{{:Template:Computer Programming/Statements/1}}
 Ada.Text_IO.Put_Line ("Hi there!");

{{:Template:Computer Programming/Statements/2|Put_Line}}
 Ada.Text_IO.Put_Line ("Hi there!");
 Ada.Text_IO.Put_Line ("Strange things are afoot...");

This does seem like a lot of typing but don't worry: Ada allows you to declare shorter aliasnames if you need a long statement very often.

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Statements]]
&lt;/noinclude&gt;</text>
      <sha1>puim3o1jdpxhbv6bzuqdhmrc8pb9cnv</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Strings</title>
    <ns>0</ns>
    <id>30370</id>
    <revision>
      <id>3250261</id>
      <parentid>3211765</parentid>
      <timestamp>2017-07-31T00:28:41Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* Fixed-length string handling */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7980" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Strings}}
__TOC__&lt;/noinclude&gt;

Ada supports three different types of strings. Each string type is designed  to solve a different problem.

In addition, every string type is implemented for each available Characters type &lt;small&gt;(Character, Wide_Character, Wide_Wide_Character)&lt;/small&gt; giving a complement of nine combinations.

== Fixed-length string handling ==

Fixed-Length Strings (the [[Ada Programming/Types#Predefined types|predefined type String]]) are [[Ada Programming/Types/array|arrays]] of Character, and consequently of a fixed length. Since String is an [[ada Programming/Subtypes#Indefinite subtype|indefinite subtype]] the length does not need to be known at compile time &amp;mdash; the length may well be calculated at run time. In the following example the length is calculated from command-line argument 1:

 X : String := Ada.Command_Line.Argument (1);

However once the length has been calculated and the string has been created the length stays constant. Try the following program which shows a typical mistake:

 {{Ada/Sourceforge|show_commandline_1.adb}}
 
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 {{Ada/kw|with}} {{Ada/package|Ada|Command_Line}};
 
 {{Ada/kw|procedure}} Show_Commandline_1 {{Ada/kw|is}}
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} {{Ada/package|Ada|Text_IO}};
    {{Ada/kw|package}} CL   {{Ada/kw|renames}} {{Ada/package|Ada|Command_Line}};
 
    X : String := CL.Argument (1);
 
 {{Ada/kw|begin}}
    T_IO.Put ("Argument 1 = ");
    T_IO.Put_Line (X);
 
    X := CL.Argument (2);
 
    T_IO.Put ("Argument 2 = ");
    T_IO.Put_Line (X);
 {{Ada/kw|end}} Show_Commandline_1;

The program will only work when the 1st and 2nd parameter have the same length. This is even true when the 2nd parameter is shorter. There is neither an automatic padding of shorter strings nor an automatic truncation of longer strings.

Having said that, the package {{Ada/package|Ada|Strings|Fixed}} contains a set of procedures and functions for Fixed-Length String Handling which allows padding of shorter strings and truncation of longer strings.

Try the following example to see how it works:

 {{Ada/Sourceforge|show_commandline_2.adb}}

 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 {{Ada/kw|with}} {{Ada/package|Ada|Command_Line}};
 {{Ada/kw|with}} {{Ada/package|Ada|Strings|Fixed}};
 
 {{Ada/kw|procedure}} Show_Commandline_2 {{Ada/kw|is}}
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} {{Ada/package|Ada|Text_IO}};
    {{Ada/kw|package}} CL   {{Ada/kw|renames}} {{Ada/package|Ada|Command_Line}};
    {{Ada/kw|package}} S    {{Ada/kw|renames}} {{Ada/package|Ada|Strings}};
    {{Ada/kw|package}} SF   {{Ada/kw|renames}} {{Ada/package|Ada|Strings|Fixed}};
 
    X : String := CL.Argument (1);
 
 {{Ada/kw|begin}}
    T_IO.Put ("Argument 1 = ");
    T_IO.Put_Line (X);
 
    SF.Move (
      Source  =&gt; CL.Argument (2),
      Target  =&gt; X,
      Drop    =&gt; S.Right,
      Justify =&gt; S.Left,
      Pad     =&gt; S.Space);
 
    T_IO.Put ("Argument 2 = ");
    T_IO.Put_Line (X);
 {{Ada/kw|end}} Show_Commandline_2;

== Bounded-length string handling ==

Bounded-Length Strings can be used when the maximum length of a string is known and/or restricted. This is often the case in database applications where only a limited number of characters can be stored.

Like Fixed-Length Strings the maximum length does not need to be known at compile time &amp;mdash; it can also be calculated at runtime &amp;mdash; as the example below shows:

 {{Ada/Sourceforge|show_commandline_3.adb}}
 
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 {{Ada/kw|with}} {{Ada/package|Ada|Command_Line}};
 {{Ada/kw|with}} {{Ada/package|Ada|Strings|Bounded}};
 
 {{Ada/kw|procedure}} Show_Commandline_3 {{Ada/kw|is}}
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} Ada.Text_IO;
    {{Ada/kw|package}} CL   {{Ada/kw|renames}} Ada.Command_Line;
 
    {{Ada/kw|function}} Max_Length (
       Value_1 : Integer;
       Value_2 : Integer)
    {{Ada/kw|return}}
       Integer
    {{Ada/kw|is}}
       Retval : Integer;
    {{Ada/kw|begin}}
       {{Ada/kw|if}} Value_1 &gt; Value_2 {{Ada/kw|then}}
          Retval := Value_1;
       {{Ada/kw|else}}
          Retval := Value_2;
       {{Ada/kw|end}} {{Ada/kw|if}};
       {{Ada/kw|return}} Retval;
    {{Ada/kw|end}} Max_Length;
 
    {{Ada/kw|pragma}} Inline (Max_Length);
 
    {{Ada/kw|package}} SB
    {{Ada/kw|is}} {{Ada/kw|new}} Ada.Strings.Bounded.Generic_Bounded_Length (
        Max =&gt; Max_Length (
                   Value_1 =&gt; CL.Argument (1)'Length,
                   Value_2 =&gt; CL.Argument (2)'Length));
 
    X :  SB.Bounded_String
      := SB.To_Bounded_String (CL.Argument (1));
 
 {{Ada/kw|begin}}
    T_IO.Put ("Argument 1 = ");
    T_IO.Put_Line (SB.To_String (X));
 
    X := SB.To_Bounded_String (CL.Argument (2));
 
    T_IO.Put ("Argument 2 = ");
    T_IO.Put_Line (SB.To_String (X));
 {{Ada/kw|end}} Show_Commandline_3;

You should know that Bounded-Length Strings have some distinct disadvantages. Most noticeable is that each Bounded-Length String is a different type which makes converting them rather cumbersome. Also a Bounded-Length String type always allocates memory for the maximum permitted string length for the type. The memory allocation for a Bounded-Length String is equal to the maximum number of string "characters" plus an implementation dependent number containing the string length (each character can require allocation of more than one byte per character, depending on the underlying character type of the string, and the length number is 4 bytes long for the Windows GNAT Ada compiler v3.15p, for example).

== Unbounded-length string handling ==

Last but not least there is the Unbounded-Length String. In fact: If you are not doing embedded or database programming this will be the string type you are going to use most often as it gives you the maximum amount of flexibility.

As the name suggest the Unbounded-Length String can hold strings of almost any length &amp;mdash; limited only to the value of Integer'Last or your available heap memory. This is because Unbounded_String type is implemented using dynamic memory allocation behind the scenes, providing lower efficiency but maximum flexibility.

 {{Ada/Sourceforge|show_commandline_4.adb}}

 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 {{Ada/kw|with}} {{Ada/package|Ada|Command_Line}};
 {{Ada/kw|with}} {{Ada/package|Ada|Strings|Unbounded}};
 
 {{Ada/kw|procedure}} Show_Commandline_4 {{Ada/kw|is}}
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} Ada.Text_IO;
    {{Ada/kw|package}} CL   {{Ada/kw|renames}} Ada.Command_Line;
    {{Ada/kw|package}} SU   {{Ada/kw|renames}} Ada.Strings.Unbounded;
 
    X :  SU.Unbounded_String 
      := SU.To_Unbounded_String (CL.Argument (1));
 
 {{Ada/kw|begin}}
    T_IO.Put ("Argument 1 = ");
    T_IO.Put_Line (SU.To_String (X));
 
    X := SU.To_Unbounded_String (CL.Argument (2));
 
    T_IO.Put ("Argument 2 = ");
    T_IO.Put_Line (SU.To_String (X));
 {{Ada/kw|end}} Show_Commandline_4;

As you can see the Unbounded-Length String example is also the shortest &lt;small&gt;(discarding the first example, which is buggy)&lt;/small&gt; &amp;mdash; this makes using Unbounded-Length Strings very appealing.

== See also ==

=== Wikibook ===

* [[Ada Programming]]

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|2|6|title=String Literals}}
* {{Ada/95/RM|3|6|3|title=String Types}}
* {{Ada/95/RM|A|4|3|title=Fixed-Length String Handling}}
* {{Ada/95/RM|A|4|4|title=Bounded-Length String Handling}}
* {{Ada/95/RM|A|4|5|title=Unbounded-Length String Handling}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|2|6|title=String Literals}}
* {{Ada/2005/RM|3|6|3|title=String Types}}
* {{Ada/2005/RM|A|4|3|title=Fixed-Length String Handling}}
* {{Ada/2005/RM|A|4|4|title=Bounded-Length String Handling}}
* {{Ada/2005/RM|A|4|5|title=Unbounded-Length String Handling}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Strings]] 

[[es:Programación en Ada/Tipos/Strings]]
&lt;/noinclude&gt;</text>
      <sha1>h9xtl1d8vlju13pw4i5zd04bnpw8f8f</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Subprograms</title>
    <ns>0</ns>
    <id>26797</id>
    <revision>
      <id>3371737</id>
      <parentid>3250262</parentid>
      <timestamp>2018-02-06T10:54:14Z</timestamp>
      <contributor>
        <ip>2003:C7:83CD:CA3E:7594:4EAB:2C53:94EE</ip>
      </contributor>
      <comment>/* Functions */ Attribute 'Min CKWG</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14768" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Subprograms}}
__TOC__&lt;/noinclude&gt;

In Ada the subprograms are classified into two categories: [[#Procedures|procedures]] and [[#Functions|functions]]. A procedures call is a statement and does not return any value, whereas a function returns a value and must therefore be a part of an expression.

Subprogram parameters may have three modes.

; {{Ada/kw|in}}: The actual parameter value goes into the call and is not changed there. The formal parameter is a constant and allows only reading. This is the default when no mode is given. The actual parameter is an expression.
; {{Ada/kw|in}} {{Ada/kw|out}}: The actual parameter goes into the call and may be redefined. The formal parameter is a variable and can be read and written.
; {{Ada/kw|out}}: The actual parameter's value before the call is irrelevant, it will get a value in the call. The formal parameter can be read and written. (In Ada 83 {{Ada/kw|out}} parameters were write-only.)

A parameter of any mode may also be explicitly {{Ada/kw|aliased}}.

; {{Ada/kw|access}}: The formal parameter is an access (a pointer) to some variable. (This is not a parameter mode from the reference manual point of view.)

Note that parameter modes do not specify the parameter passing method. Their purpose is to document the data flow.

The parameter passing method depends on the type of the parameter. A rule of thumb is that parameters fitting into a register are passed by copy, others are passed by reference. For certain types, there are special rules, for others the parameter passing mode is left to the compiler (which you can assume to do what is most sensible). Tagged types are always passed by reference.

Explicitly {{Ada/kw|aliased}} parameters and {{Ada/kw|access}} parameters specify pass by reference.

Unlike in the C class of programming languages, Ada subprogram calls cannot have empty parameters parentheses &lt;code&gt;{{Ada/dl|(}} {{Ada/dl|)}}&lt;/code&gt; when there are no parameters.

== Procedures ==

A procedure call in Ada constitutes a statement by itself.

For example:

 {{Ada/kw|procedure}} A_Test {{Ada/dl|(}}A, B: {{Ada/kw|in}} Integer; C: {{Ada/kw|out}} Integer{{Ada/dl|)}} {{Ada/kw|is}}
 {{Ada/kw|begin}}
    C := A + B;
 {{Ada/kw|end}} A_Test;

When the procedure is called with the statement
 A_Test (5 + P, 48, Q);
the expressions 5 + P and 48 are evaluated (expressions are only allowed for in parameters), and then assigned to the formal parameters A and B, which behave like constants. Then, the value A + B is assigned to formal variable C, whose value will be assigned to the actual parameter Q when the procedure finishes.

C, being an {{Ada/kw|out}} parameter, is an uninitialized variable before the first assignment. (Therefore in Ada 83, there existed the restriction that {{Ada/kw|out}} parameters are write-only. If you wanted to read the value written, you had to declare a local variable, do all calculations with it, and finally assign it to C before return. This was awkward and error prone so the restriction was removed in Ada 95.)

Within a procedure, the return statement can be used without arguments to exit the procedure and return the control to the caller.

For example, to solve an equation of the kind &lt;math&gt;ax^2 + bx + c = 0&lt;/math&gt;:

 {{Ada/kw|with}} {{Ada/package|Ada|Numerics|Elementary_Functions}};
 {{Ada/kw|use}}  {{Ada/package|Ada|Numerics|Elementary_Functions}};
 
 {{Ada/kw|procedure}} Quadratic_Equation
    {{Ada/dl|(}}A, B, C :     Float;   {{Ada/--|By default it is "in".}}
     R1, R2  : {{Ada/kw|out}} Float;
     Valid   : {{Ada/kw|out}} Boolean{{Ada/dl|)}}
 {{Ada/kw|is}}
    Z : Float;
 {{Ada/kw|begin}}
    Z := B**2 - 4.0 * A * C;
    {{Ada/kw|if}} Z &lt; 0.0 {{Ada/kw|or}} A = 0.0 {{Ada/kw|then}}
       Valid := False;  {{Ada/--|Being out parameter, it should be modified at least once.}}
       R1    := 0.0;
       R2    := 0.0;
    {{Ada/kw|else}}
       Valid := True;
       R1    := (-B + Sqrt (Z)) / (2.0 * A);
       R2    := (-B - Sqrt (Z)) / (2.0 * A);
    {{Ada/kw|end}} {{Ada/kw|if}};
 {{Ada/kw|end}} Quadratic_Equation;

The function SQRT calculates the square root of non-negative values.  If the roots are real, they are given back in R1 and R2, but if they are complex or the equation degenerates (A = 0), the execution of the procedure finishes after assigning to the Valid variable the False value, so that it is controlled after the call to the procedure.  Notice that the {{Ada/kw|out}} parameters should be modified at least once, and that if a mode is not specified, it is implied {{Ada/kw|in}}.

== Functions ==

A function is a subprogram that can be invoked as part of an expression. Until Ada 2005, functions can only take {{Ada/kw|in}} (the default) or {{Ada/kw|access}} parameters; the latter can be used as a work-around for the restriction that functions may not have {{Ada/kw|out}} parameters. Ada 2012 has removed this restriction.

Here is an example of a function body:

 {{Ada/kw|function}} Minimum (A, B: Integer) {{Ada/kw|return}} Integer {{Ada/kw|is}}
 {{Ada/kw|begin}}
    {{Ada/kw|if}} A &lt;= B {{Ada/kw|then}}
       {{Ada/kw|return}} A;
    {{Ada/kw|else}}
       {{Ada/kw|return}} B;
    {{Ada/kw|end}} {{Ada/kw|if}};
 {{Ada/kw|end}} Minimum;

(There is, by the way, also the attribute &lt;code&gt;Integer'Min&lt;/code&gt;, see RM 3.5.) Or in Ada2012:

 {{Ada/kw|function}} Minimum (A, B: Integer) {{Ada/kw|return}} Integer {{Ada/kw|is}}
 {{Ada/kw|begin}}
    {{Ada/kw|return}} ({{Ada/kw|if}} A &lt;= B {{Ada/kw|then}} A {{Ada/kw|else}} B);
 {{Ada/kw|end}} Minimum;

or even shorter as an ''expression function''

 {{Ada/kw|function}} Minimum (A, B: Integer) {{Ada/kw|return}} Integer {{Ada/kw|is}} ({{Ada/kw|if}} A &lt;= B {{Ada/kw|then}} A {{Ada/kw|else}} B);

The formal parameters with mode {{Ada/kw|in}} behave as local constants whose values are provided by the corresponding actual parameters.  The statement {{Ada/kw|return}} is used to indicate the value returned by the function call and to give back the control to the expression that called the function.  The expression of the {{Ada/kw|return}} statement may be of arbitrary complexity and must be of the same type declared in the specification.  If an incompatible type is used, the compiler gives an error.  If the restrictions of a subtype are not fulfilled, e.g. a range, it raises a Constraint_Error exception.

The body of the function can contain several {{Ada/kw|return}} statements and the execution of any of them will finish the function, returning control to the caller.  If the flow of control within the function branches in several ways, it is necessary to make sure that each one of them is finished with a {{Ada/kw|return}}
statement.  If at run time the end of a function is reached without encountering a {{Ada/kw|return}} statement, the exception Program_Error is raised.  Therefore, the body of a function must have at least one such {{Ada/kw|return}}
statement.

Every call to a function produces a new copy of any object declared within it.  When the function finalizes, its objects disappear.  Therefore, it is possible to call the function recursively.  For example, consider this implementation of the factorial function:

 {{Ada/kw|function}} Factorial (N : Positive) {{Ada/kw|return}} Positive {{Ada/kw|is}}
 {{Ada/kw|begin}}
    {{Ada/kw|if}} N = 1 {{Ada/kw|then}}
       {{Ada/kw|return}} 1;
    {{Ada/kw|else}}
       {{Ada/kw|return}} (N * Factorial (N - 1));
    {{Ada/kw|end}} {{Ada/kw|if}};
 {{Ada/kw|end}} Factorial;

When evaluating the expression &lt;code&gt;Factorial (4);&lt;/code&gt; the function
will be called with parameter 4 and within the function it will
try to evaluate the expression &lt;code&gt;Factorial (3)&lt;/code&gt;, calling itself as a function, but in this case parameter N would be 3 (each call copies the parameters) and so on until N = 1 is evaluated which will finalize the recursion and then the expression will begin to be completed in the reverse order.

A formal parameter of a function can be of any type, including vectors or
records.  Nevertheless, it cannot be an anonymous type, that is, its
type must be declared before, for example:

 {{Ada/kw|type}} Float_Vector {{Ada/kw|is}} {{Ada/kw|array}} (Positive {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} Float;
 
 {{Ada/kw|function}} Add_Components (V: Float_Vector) {{Ada/kw|return}} Float {{Ada/kw|is}}
    Result : Float := 0.0;
 {{Ada/kw|begin}}
    {{Ada/kw|for}} I {{Ada/kw|in}} V'{{Ada/attribute|Range}} {{Ada/kw|loop}}
       Result := Result + V(I);
    {{Ada/kw|end}} {{Ada/kw|loop}};
    {{Ada/kw|return}} Result;
 {{Ada/kw|end}} Add_Components;

In this example, the function can be used on a vector of arbitrary dimension.
Therefore, there are no static bounds in the parameters passed to the
functions. For example, it is possible to be used in the following
way:

 V4  : Float_Vector (1 .. 4) := (1.2, 3.4, 5.6, 7.8);
 Sum : Float;
 
 Sum := Add_Components (V4);

In the same way, a function can also return a type whose bounds are not known a priori. For example:

 {{Ada/kw|function}} Invert_Components (V : Float_Vector) {{Ada/kw|return}} Float_Vector {{Ada/kw|is}}
    Result : Float_Vector(V'{{Ada/attribute|Range}});   {{Ada/--|Fix the bounds of the vector to be returned.}}
 {{Ada/kw|begin}}
    {{Ada/kw|for}} I {{Ada/kw|in}} V'{{Ada/attribute|Range}} {{Ada/kw|loop}}
       Result(I) := V (V'{{Ada/attribute|First}} + V'{{Ada/attribute|Last}} - I);
    {{Ada/kw|end}} {{Ada/kw|loop}};
    {{Ada/kw|return}} Result;
 {{Ada/kw|end}} Invert_Components; 

The variable Result has the same bounds as V, so the returned vector will always have the same dimension as the one passed as parameter.

A value returned by a function can be used without assigning it to a variable, it can be referenced as an expression.  For example, &lt;code&gt;Invert_Components (V4) (1)&lt;/code&gt;, where the first element of the vector returned by the function would be obtained (in this case, the last element of V4, i.e. 7.8).

== Named parameters ==

In subprogram calls, named parameter notation (i.e. the name of the formal
parameter followed of the symbol {{Ada/dl|1= =&gt;}} and then the actual parameter) allows the rearrangement of the parameters in the call. For example:

 Quadratic_Equation (Valid =&gt; OK, A =&gt; 1.0, B =&gt; 2.0, C =&gt; 3.0, R1 =&gt; P, R2 =&gt; Q);
 F := Factorial (N =&gt; (3 + I));

This is especially useful to make clear which parameter is which.

 Phi := Arctan (A, B);
 Phi := Arctan (Y =&gt; A, X =&gt; B);

The first call (from Ada.Numerics.Elementary_Functions) is not very clear. One might easily confuse the parameters. The second call makes the meaning clear without any ambiguity.

Another use is for calls with numeric literals:

 Ada.Float_Text_IO.Put_Line (X, 3, 2, 0);  -- ?
 Ada.Float_Text_IO.Put_Line (X, Fore =&gt; 3, Aft =&gt; 2, Exp =&gt; 0);  -- OK

== Default parameters ==

On the other hand, formal parameters may have default values. They can, therefore, be omitted in the subprogram call. For example:

 {{Ada/kw|procedure}} By_Default_Example (A, B: {{Ada/kw|in}} Integer := 0);

can be called in these ways:

 By_Default_Example (5, 7);      {{Ada/--|&lt;nowiki&gt;A = 5, B = 7&lt;/nowiki&gt;}}
 By_Default_Example (5);         {{Ada/--|&lt;nowiki&gt;A = 5, B = 0&lt;/nowiki&gt;}}
 By_Default_Example;             {{Ada/--|&lt;nowiki&gt;A = 0, B = 0&lt;/nowiki&gt;}}
 By_Default_Example (B =&gt; 3);    {{Ada/--|&lt;nowiki&gt;A = 0, B = 3&lt;/nowiki&gt;}}
 By_Default_Example (1, B =&gt; 2); {{Ada/--|&lt;nowiki&gt;A = 1, B = 2&lt;/nowiki&gt;}}

In the first statement, a "regular call" is used (with positional association); the second also uses positional association but omits the second parameter to use the default; in the third statement, all parameters are by default; the fourth statement uses named association to omit the first parameter; finally, the fifth statement uses mixed association, here the positional parameters have to precede the named ones.

Note that the default expression is evaluated once for each formal parameter that has no actual parameter. Thus, if in the above example a function would be used as defaults for A and B, the function would be evaluated once in case 2 and 4; twice in case 3, so A and B could have different values; in the others cases, it would not be evaluated.

== Renaming ==

Subprograms may be renamed. The parameter and result profile for a renaming-as-declaration must be mode conformant.

 {{Ada/kw|procedure}} Solve
   (A, B, C: {{Ada/kw|in}}  Float;
    R1, R2 : {{Ada/kw|out}} Float;
    Valid  : {{Ada/kw|out}} Boolean) {{Ada/kw|renames}} Quadratic_Equation;

This may be especially comfortable for tagged types.

 {{Ada/kw|package}} Some_Package {{Ada/kw|is}}
   {{Ada/kw|type}} Message_Type {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|null}} {{Ada/kw|record}};
   {{Ada/kw|procedure}} Print (Message: {{Ada/kw|in}} Message_Type);
 {{Ada/kw|end}} Some_Package; 

 {{Ada/kw|with}} Some_Package;
 {{Ada/kw|procedure}} Main {{Ada/kw|is}}
   Message: Some_Package.Message_Type;
   {{Ada/kw|procedure}} Print {{Ada/kw|renames}} Message.Print;  {{Ada/--|this has convention intrinsic, see RM 6.3.1(10.1/2)}}
   &lt;s&gt;Method_Ref: {{Ada/kw|access}} {{Ada/kw|procedure}} := Print'{{Ada/kw|Access}};&lt;/s&gt;  {{Ada/--|thus taking 'Access should be illegal; GNAT GPL 2012 allows this}}
 {{Ada/kw|begin}}  {{Ada/--|All these calls are equivalent:}}
   Some_Package.Print (Message);  {{Ada/--|traditional call without use clause}}
   Message.Print;                 {{Ada/--|Ada 2005 method.object call - note: no use clause necessary}}
   Print;                         {{Ada/--|Message.Print is a parameterless procedure and can be renamed as such}}
   &lt;s&gt;Method_Ref.{{Ada/kw|all}};&lt;/s&gt;                {{Ada/--|GNAT GPL 2012 allows illegal call via an access to the renamed procedure Print}}
                                  {{Ada/--|This has been corrected in the current version (as of Nov 22, 2012)}}
 {{Ada/kw|end}} Main;

But note that &lt;code&gt;Message.Print'{{Ada/kw|Access}};&lt;/code&gt; is illegal, you have to use a renaming declaration as above.

Since only mode conformance is required (and not full conformance as between specification and body), parameter names and default values may be changed with renamings:

 {{Ada/kw|procedure }}P (X: {{Ada/kw|in }}Integer :=  0);
 {{Ada/kw|procedure }}R (A: {{Ada/kw|in }}Integer := -1) {{Ada/kw|renames }}P;

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Operators]]

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|6|title=Subprograms}}
* {{Ada/95/RM|4|4|title=Expressions}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|6|title=Subprograms}}
* {{Ada/2005/RM|4|4|title=Expressions}}

=== Ada Quality and Style Guide ===

* {{Ada/SG3|4|1|3|Subprograms}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Subprograms]]

[[es:Programación en Ada/Subprogramas]]
&lt;/noinclude&gt;</text>
      <sha1>8hdjxva75s6pmwpccqwf7w4rygqgpvr</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Tasking</title>
    <ns>0</ns>
    <id>22443</id>
    <revision>
      <id>3445508</id>
      <parentid>3445507</parentid>
      <timestamp>2018-07-22T17:00:47Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <minor/>
      <comment>/* Requeue statements */ Restore [with abort] that was removed by the formatting</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="28983" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Tasking}}
__TOC__&lt;/noinclude&gt;

== Tasks ==

A ''task unit'' is a program unit that is obeyed concurrently with the rest of an Ada program.  The corresponding activity, a new locus of control, is called a ''task'' in Ada terminology, and is similar to a ''thread'', for example in [[Java:Threads|Java Threads]].  The execution of the main program is also a task, the anonymous environment task.  A task unit has both a declaration and a body, which is mandatory.  A task body may be compiled separately as a subunit, but a task may not be a library unit, nor may it be generic.  Every task depends on a ''master'', which is the immediately surrounding declarative region - a block, a subprogram, another task, or a package.  The execution of a master does not complete until all its dependent tasks have terminated.  The environment task is the master of all other tasks; it terminates only when all other tasks have terminated.

Task units are similar to packages in that a task declaration defines entities exported from the task, whereas its body contains local declarations and statements of the task.

A single task is declared as follows:

   {{Ada/kw|task}} Single {{Ada/kw|is}}
      ''declarations of exported identifiers''
   {{Ada/kw|end}} Single;
   ...
   {{Ada/kw|task}} {{Ada/kw|body}} Single {{Ada/kw|is}}
     '' local declarations and statements''
   {{Ada/kw|end}} Single;

A task declaration can be simplified, if nothing is exported, thus:

   {{Ada/kw|task}} No_Exports;

Ex. 1

   {{Ada/kw|procedure}} Housekeeping {{Ada/kw|is}}
   
      {{Ada/kw|task}} Check_CPU;
      {{Ada/kw|task}} Backup_Disk;
   
      {{Ada/kw|task}} {{Ada/kw|body}} Check_CPU {{Ada/kw|is}}
         ...
      {{Ada/kw|end}} Check_CPU;
   
      {{Ada/kw|task}} {{Ada/kw|body}} Backup_Disk {{Ada/kw|is}}
         ...
      {{Ada/kw|end}} Backup_Disk;
      {{Ada/--|the two tasks are automatically created and begin execution}}
   {{Ada/kw|begin}} {{Ada/--|Housekeeping}}
      {{Ada/kw|null}};
      {{Ada/--|Housekeeping waits here for them to terminate}}
   {{Ada/kw|end}} Housekeeping;

It is possible to declare task types, thus allowing task units to be  created dynamically, and incorporated in data structures:

   {{Ada/kw|task}} {{Ada/kw|type}} T {{Ada/kw|is}}
      ...
   {{Ada/kw|end}} T;
   ...
   Task_1, Task_2 : T;
   ...
   {{Ada/kw|task}} {{Ada/kw|body}} T {{Ada/kw|is}}
      ...
   {{Ada/kw|end}} T;

Task types are '''limited''', i.e. they are restricted in the same way as limited private types, so assignment and comparison are not allowed.

=== Rendezvous ===

The only entities that a task may export are entries. An '''entry''' looks much like a procedure. It has an identifier and may have '''in''', '''out''' or '''in out''' parameters. Ada supports communication from task to task by means of the ''entry call''. Information passes between tasks through the actual parameters of the entry call. We can encapsulate data structures within tasks and operate on them by means of entry calls, in a way analogous to the use of packages for encapsulating variables. The main difference is that an entry is executed by the called task, not the calling task, which is suspended until the call completes.  If the called task is not ready to service a call on an entry, the calling task waits in a (FIFO) queue associated with the entry. This interaction between calling task and called task is known as a ''rendezvous''. The calling task requests rendezvous with a specific named task by calling one of its entries. A task accepts rendezvous with any caller of a specific entry by executing an '''accept''' statement for the entry. If no caller is waiting, it is held up. 
Thus entry call and accept statement behave symmetrically. (To be honest, optimized object code may reduce the number of context switches below the number implied by this poor description.)

Ex. 2
The following task type implements a single-slot buffer, i.e. an encapsulated variable that can have values inserted and removed in strict alternation. Note that the buffer task has no need of state variables to implement the buffer protocol: the alternation of insertion and removal operations is directly enforced by the control structure in the body of Encapsulated_Buffer_Task_Type which is, as is typical, a '''loop'''.

   {{Ada/kw|task}} {{Ada/kw|type}} Encapsulated_Buffer_Task_Type {{Ada/kw|is}}
      {{Ada/kw|entry}} Insert (An_Item : {{Ada/kw|in}}  Item);
      {{Ada/kw|entry}} Remove (An_Item : {{Ada/kw|out}} Item);
   {{Ada/kw|end}} Encapsulated_Buffer_Task_Type;
   ...
   Buffer_Pool : {{Ada/kw|array}} (0 .. 15) {{Ada/kw|of}} Encapsulated_Buffer_Task_Type;
   This_Item   : Item;
   ...
   {{Ada/kw|task}} {{Ada/kw|body}} Encapsulated_Buffer_Task_Type {{Ada/kw|is}}
      Datum : Item;
   {{Ada/kw|begin}}
      {{Ada/kw|loop}}
         {{Ada/kw|accept}} Insert (An_Item : {{Ada/kw|in}}  Item) {{Ada/kw|do}}
            Datum := An_Item;
         {{Ada/kw|end}} Insert;
         {{Ada/kw|accept}} Remove (An_Item : {{Ada/kw|out}} Item) {{Ada/kw|do}}
            An_Item := Datum;
         {{Ada/kw|end}} Remove;
      {{Ada/kw|end}} {{Ada/kw|loop}};
   {{Ada/kw|end}} Encapsulated_Buffer_Task_Type;
   ...
   Buffer_Pool(1).Remove (This_Item);
   Buffer_Pool(2).Insert (This_Item);

=== Selective Wait ===

To avoid being held up when it could be doing productive work, a server task often needs the freedom to accept a call on any one of a number of alternative entries.  It does this by means of the ''selective wait'' statement, which allows a task to wait for a call on any of two or more entries.

If only one of the alternatives in a selective wait statement has a pending entry call, then that one is accepted.
If two or more alternatives have calls pending, the implementation is free to accept any one of them.  For example, it could choose one at random.  This introduces ''bounded non-determinism'' into the program.  A sound Ada program should not depend on a particular method being used to choose between pending entry calls.
(However, there are facilities to influence the method used, when that is necessary.)

Ex. 3

   {{Ada/kw|task}} {{Ada/kw|type}} Encapsulated_Variable_Task_Type {{Ada/kw|is}}
      {{Ada/kw|entry}} Store (An_Item : {{Ada/kw|in}}  Item);
      {{Ada/kw|entry}} Fetch (An_Item : {{Ada/kw|out}} Item);
   {{Ada/kw|end}} Encapsulated_Variable_Task_Type;
   ...
   {{Ada/kw|task}} {{Ada/kw|body}} Encapsulated_Variable_Task_Type {{Ada/kw|is}}
      Datum : Item;
   {{Ada/kw|begin}}
      {{Ada/kw|accept}} Store (An_Item : {{Ada/kw|in}} Item) {{Ada/kw|do}}
         Datum := An_Item;
      {{Ada/kw|end}} Store;
      {{Ada/kw|loop}}
         {{Ada/kw|select}}   
            {{Ada/kw|accept}} Store (An_Item : {{Ada/kw|in}} Item) {{Ada/kw|do}}
               Datum := An_Item;
            {{Ada/kw|end}} Store;
         {{Ada/kw|or}}
            {{Ada/kw|accept}} Fetch (An_Item : {{Ada/kw|out}} Item) {{Ada/kw|do}}
               An_Item := Datum;
            {{Ada/kw|end}} Fetch;
         {{Ada/kw|end}} {{Ada/kw|select}};
      {{Ada/kw|end}} {{Ada/kw|loop}};
   {{Ada/kw|end}} Encapsulated_Variable_Task_Type;

   x, y : Encapsulated_Variable_Task_Type;

creates two variables of type Encapsulated_Variable_Task_Type. They can be used thus:

   it : Item;
   ...
   x.Store(Some_Expression);
   ...
   x.Fetch (it);
   y.Store (it);

Again, note that the control structure of the body ensures that an Encapsulated_Variable_Task_Type must be given an initial value by a first Store operation before any Fetch operation can be accepted.

=== Guards ===

Depending on circumstances, a server task may not be able to accept calls for some of the entries that have accept alternatives in a selective wait statement.  The acceptance of any alternative can be made conditional by using a ''guard'', which is ''[[Ada Programming/Types#Boolean|Boolean]]'' precondition for acceptance.  This makes it easy to write monitor-like server tasks, with no need for an explicit signaling mechanism, nor for mutual exclusion.
An alternative with a True guard is said to be ''open''.  It is an error if no alternative is open when the selective wait statement is executed, and this raises the Program_Error exception.

Ex. 4

   {{Ada/kw|task}} Cyclic_Buffer_Task_Type {{Ada/kw|is}}
      {{Ada/kw|entry}} Insert (An_Item : {{Ada/kw|in}}  Item);
      {{Ada/kw|entry}} Remove (An_Item : {{Ada/kw|out}} Item);
   {{Ada/kw|end}} Cyclic_Buffer_Task_Type;
   ...
   {{Ada/kw|task}} {{Ada/kw|body}} Cyclic_Buffer_Task_Type {{Ada/kw|is}}
      Q_Size : {{Ada/kw|constant}} := 100;
      {{Ada/kw|subtype}} Q_Range {{Ada/kw|is}} Positive {{Ada/kw|range}} 1 .. Q_Size;
      Length : Natural {{Ada/kw|range}} 0 .. Q_Size := 0;
      Head, Tail : Q_Range := 1;
      Data : {{Ada/kw|array}} (Q_Range) {{Ada/kw|of}} Item;
   {{Ada/kw|begin}}
      {{Ada/kw|loop}}
         {{Ada/kw|select}}
            {{Ada/kw|when}} Length &lt; Q_Size =&gt;
               {{Ada/kw|accept}} Insert (An_Item : {{Ada/kw|in}}  Item) {{Ada/kw|do}}
                  Data(Tail) := An_Item;
               {{Ada/kw|end}} Insert;
               Tail := Tail {{Ada/kw|mod}} Q_Size + 1;
               Length := Length + 1;
         {{Ada/kw|or}}
            {{Ada/kw|when}} Length &gt; 0 =&gt;
               {{Ada/kw|accept}} Remove (An_Item : {{Ada/kw|out}} Item) {{Ada/kw|do}}
                  An_Item := Data(Head);
               {{Ada/kw|end}} Remove;
               Head := Head {{Ada/kw|mod}} Q_Size + 1;
               Length := Length - 1;
         {{Ada/kw|end}} {{Ada/kw|select}};
      {{Ada/kw|end}} {{Ada/kw|loop}};
   {{Ada/kw|end}} Cyclic_Buffer_Task_Type;

== Protected types ==

Tasks allow for encapsulation and safe usage of variable data without the need for any explicit mutual exclusion and signaling mechanisms.  Ex. 4 shows how easy it is to write server tasks that safely manage locally-declared
data on behalf of multiple clients. There is no need for mutual exclusion of access to the managed data, 
''because it is never accessed concurrently''. However, the overhead of creating a task merely to serve up some data may be excessive. For such applications, Ada 95 provides '''protected''' modules, based on the well-known computer science concept of a ''[[w:Monitor (synchronization)|monitor]]''. A protected module encapsulates a data structure and exports subprograms that operate on it under automatic mutual exclusion.
It also provides automatic, implicit signaling of conditions between client tasks. Again, a protected module can be either a single protected object or a protected type, allowing many protected objects to be created. 

A protected module can export only procedures, functions and entries, and its body may contain only the bodies of procedures, functions and entries. The protected data is declared after '''private''' in its specification, but is accessible only within the protected module's body. Protected procedures and entries may read and/or write its encapsulated data, and automatically exclude each other.  Protected functions may only read the encapsulated data,
so that multiple protected function calls can be concurrently executed in the same protected object, with complete safety; but protected procedure calls and entry calls exclude protected function calls, and vice versa. Exported entries and subprograms of a protected object are executed by its calling task, as a protected object has no independent locus of control.  (To be honest, optimized object code may reduce the number of context switches below the number implied by this naive description.)

Like a task entry, a protected entry can employ a guard to control admission. This provides automatic signaling, and ensures that when a protected entry call is accepted, its guard condition is True, so that a guard provides a reliable precondition for the entry body.

Ex. 5
The following is a simple protected type analogous to the Encapsulated_Buffer task in Ex. 2. 

   {{Ada/kw|protected}} {{Ada/kw|type}} Protected_Buffer_Type {{Ada/kw|is}}
      {{Ada/kw|entry}} Insert (An_Item : {{Ada/kw|in}}  Item);
      {{Ada/kw|entry}} Remove (An_Item : {{Ada/kw|out}} Item);
   {{Ada/kw|private}}
      Buffer : Item;
      Empty  : Boolean := True;
   {{Ada/kw|end}} Protected_Buffer_Type;
   ...
   {{Ada/kw|protected}} {{Ada/kw|body}} Protected_Buffer_Type {{Ada/kw|is}}
      {{Ada/kw|entry}} Insert (An_Item : {{Ada/kw|in}}  Item)
         {{Ada/kw|when}} Empty {{Ada/kw|is}}
      {{Ada/kw|begin}}
         Buffer := An_Item;
         Empty := False;
      {{Ada/kw|end}} Insert;
      {{Ada/kw|entry}} Remove (An_Item : {{Ada/kw|out}} Item)
         {{Ada/kw|when}} {{Ada/kw|not}} Empty {{Ada/kw|is}}
      {{Ada/kw|begin}}
         An_Item := Buffer;
         Empty := True;
      {{Ada/kw|end}} Remove;
   {{Ada/kw|end}} Protected_Buffer_Type;

Note how the guards, using the state variable Empty, ensure that messages are alternately inserted and removed, 
and that no attempt can be made to take data from an empty buffer.  All this is achieved without explicit signaling or mutual exclusion constructs, whether in the calling task or in the protected type itself.

The notation for calling a protected entry or procedure is exactly the same as that for calling a task entry.  This makes it easy to replace one implementation of the abstract type by the other, the calling code being unaffected.

Ex. 6
The following task type implements Dijkstra's semaphore ADT, with FIFO scheduling of resumed processes.  The algorithm will accept calls to both Wait and Signal, so long as the semaphore invariant would not be violated.  When that circumstance approaches, calls to Wait are ignored for the time being.

   {{Ada/kw|task}} {{Ada/kw|type}} Semaphore_Task_Type {{Ada/kw|is}}
      {{Ada/kw|entry}} Initialize (N : {{Ada/kw|in}} Natural);
      {{Ada/kw|entry}} Wait;
      {{Ada/kw|entry}} Signal;
   {{Ada/kw|end}} Semaphore_Task_Type;
   ...
   {{Ada/kw|task}} {{Ada/kw|body}} Semaphore_Task_Type {{Ada/kw|is}}
      Count : Natural;
   {{Ada/kw|begin}}
      {{Ada/kw|accept}} Initialize (N : {{Ada/kw|in}} Natural) {{Ada/kw|do}}
         Count := N;
      {{Ada/kw|end}} Initialize;
      {{Ada/kw|loop}}
         {{Ada/kw|select}}
            {{Ada/kw|when}} Count &gt; 0 =&gt;
                {{Ada/kw|accept}} Wait {{Ada/kw|do}}
                   Count := Count - 1;
                {{Ada/kw|end}} Wait;
         {{Ada/kw|or}}
                {{Ada/kw|accept}} Signal;
                Count := Count + 1;
         {{Ada/kw|end}} {{Ada/kw|select}};
      {{Ada/kw|end}} {{Ada/kw|loop}};
   {{Ada/kw|end}} Semaphore_Task_Type;

This task could be used as follows:

   nr_Full, nr_Free : Semaphore_Task_Type;
   ...
   nr_Full.Initialize (0); nr_Free.Initialize (nr_Slots);
   ...
   nr_Free.Wait; nr_Full.Signal;

Alternatively, semaphore functionality can be provided by a protected object, with major efficiency gains.

Ex. 7
The Initialize and Signal operations of this protected type are unconditional, so they are implemented as protected procedures, but the Wait operation must be guarded and is therefore implemented as an entry. 

   {{Ada/kw|protected}} {{Ada/kw|type}} Semaphore_Protected_Type {{Ada/kw|is}}
      {{Ada/kw|procedure}} Initialize (N : {{Ada/kw|in}} Natural);
      {{Ada/kw|entry}} Wait;
      {{Ada/kw|procedure}} Signal;
   {{Ada/kw|private}}
      Count : Natural := 0;
   {{Ada/kw|end}} Semaphore_Protected_Type;
   ...
   {{Ada/kw|protected}} {{Ada/kw|body}} Semaphore_Protected_Type {{Ada/kw|is}}
      {{Ada/kw|procedure}} Initialize (N : {{Ada/kw|in}} Natural) {{Ada/kw|is}}
      {{Ada/kw|begin}}
         Count := N;
      {{Ada/kw|end}} Initialize;
      {{Ada/kw|entry}} Wait
         {{Ada/kw|when}} Count &gt; 0 {{Ada/kw|is}}
      {{Ada/kw|begin}}
         Count := Count - 1;
      {{Ada/kw|end}} Wait;
      {{Ada/kw|procedure}} Signal {{Ada/kw|is}}
      {{Ada/kw|begin}}
         Count := Count + 1;
      {{Ada/kw|end}} Signal;
   {{Ada/kw|end}} Semaphore_Protected_Type;

Unlike the task type above, this does not ensure that Initialize is called before Wait or Signal, and Count is given a default initial value instead.  Restoring this defensive feature of the task version is left as an exercise for the reader.

== Entry families ==

Sometimes we need a group of related entries.  Entry ''families'', indexed by a ''[[ada Programming/Types#List of Types|discrete type]]'', meet this need.

Ex. 8
This task provides a pool of several buffers.

   {{Ada/kw|subtype}} Buffer_Id {{Ada/kw|is}} Integer {{Ada/kw|range}} 1 .. nr_Bufs;
   ...
   {{Ada/kw|task}} Buffer_Pool_Task {{Ada/kw|is}}
      {{Ada/kw|entry}} Insert (Buffer_Id) (An_Item : {{Ada/kw|in}} Item);
      {{Ada/kw|entry}} Remove (Buffer_Id) (An_Item : {{Ada/kw|out}} Item);
   {{Ada/kw|end}} Buffer_Pool_Task;
   ...
   {{Ada/kw|task}} {{Ada/kw|body}} Buffer_Pool_Task {{Ada/kw|is}}
      Data   : {{Ada/kw|array}} (Buffer_Id) {{Ada/kw|of}} Item;
      Filled : {{Ada/kw|array}} (Buffer_Id) {{Ada/kw|of}} Boolean  := (others =&gt; False);
   {{Ada/kw|begin}}
     {{Ada/kw|loop}}
       {{Ada/kw|for}} I {{Ada/kw|in}} Data'{{Ada/attribute|Range}} {{Ada/kw|loop}}
         {{Ada/kw|select}}
           {{Ada/kw|when}} {{Ada/kw|not}} Filled(I) =&gt;
              {{Ada/kw|accept}} Insert (I) (An_Item : {{Ada/kw|in}} Item) {{Ada/kw|do}}
                 Data(I) := An_Item;
              {{Ada/kw|end}} Insert;
              Filled(I) := True;
         {{Ada/kw|or}}
           {{Ada/kw|when}} Filled(I) =&gt;
              {{Ada/kw|accept}} Remove (I) (An_Item : {{Ada/kw|out}} Item) {{Ada/kw|do}}
                     An_Item := Data(I);
              {{Ada/kw|end}} Remove;
              Filled(I) := False;
         {{Ada/kw|else}}
           {{Ada/kw|null}}; {{Ada/--|N.B. "polling" or "busy waiting"}}
         {{Ada/kw|end}} {{Ada/kw|select}};
       {{Ada/kw|end}} {{Ada/kw|loop}};
     {{Ada/kw|end}} {{Ada/kw|loop}};   
   {{Ada/kw|end}} Buffer_Pool_Task;
   ...
   Buffer_Pool_Task.Remove(K)(This_Item);

Note that the busy wait {{Ada/kw|else}} {{Ada/kw|null}} is necessary here to prevent the task from being suspended on some buffer when there was no call pending for it, because such suspension would delay serving requests for all the other buffers (perhaps indefinitely).

== Termination ==

Server tasks often contain infinite loops to allow them to service an arbitrary number of calls in succession. 
But control cannot leave a task's master until the task terminates, so we need a way for a server to know when it should terminate.  This is done by a ''terminate alternative'' in a selective wait.

Ex. 9

   {{Ada/kw|task}} {{Ada/kw|type}} Terminating_Buffer_Task_Type {{Ada/kw|is}}
      {{Ada/kw|entry}} Insert (An_Item : {{Ada/kw|in}}  Item);
      {{Ada/kw|entry}} Remove (An_Item : {{Ada/kw|out}} Item);
   {{Ada/kw|end}} Terminating_Buffer_Task_Type;
   ...
   {{Ada/kw|task}} {{Ada/kw|body}} Terminating_Buffer_Task_Type {{Ada/kw|is}}
      Datum : Item;
   {{Ada/kw|begin}}
      {{Ada/kw|loop}}
         {{Ada/kw|select}}
            {{Ada/kw|accept}} Insert (An_Item : {{Ada/kw|in}}  Item) {{Ada/kw|do}}
               Datum := An_Item;
            {{Ada/kw|end}} Insert;
         {{Ada/kw|or}}
            {{Ada/kw|terminate}};
         {{Ada/kw|end}} {{Ada/kw|select}};
         {{Ada/kw|select}}
            {{Ada/kw|accept}} Remove (An_Item : {{Ada/kw|out}} Item) {{Ada/kw|do}}
               An_Item := Datum;
            {{Ada/kw|end}} Remove;
         {{Ada/kw|or}}
            {{Ada/kw|terminate}};
         {{Ada/kw|end}} {{Ada/kw|select}};
      {{Ada/kw|end}} {{Ada/kw|loop}};
   {{Ada/kw|end}} Terminating_Buffer_Task_Type;

The task terminates when:
# at least one terminate alternative is open, and
# there are no pending calls to its entries, and
# all other tasks of the same master are in the same state (or already terminated), and
# the task's master has completed (i.e. has run out of statements to execute).

Conditions (1) and (2) ensure that the task is in a fit state to stop. 
Conditions (3) and (4) ensure that stopping cannot have an adverse effect on the rest of the program, because no further calls that might change its state are possible.

== Timeout ==

A task may need to avoid being held up by calling to a slow server. A ''timed entry call'' lets a client specify a maximum delay before achieving rendezvous, failing which the attempted entry call is withdrawn and an alternative sequence of statements is executed.

Ex. 10

   {{Ada/kw|task}} Password_Server {{Ada/kw|is}}
      {{Ada/kw|entry}} Check (User, Pass : {{Ada/kw|in}} String; Valid : {{Ada/kw|out}} Boolean);
      {{Ada/kw|entry}} Set (User, Pass : {{Ada/kw|in}}  String);
   {{Ada/kw|end}} Password_Server;
   ...
   User_Name, Password : String (1 .. 8);
   ...
   Put ("Please give your new password:");
   Get_Line (Password);
   {{Ada/kw|select}}
      Password_Server.Set (User_Name, Password);
      Put_Line ("Done");
   {{Ada/kw|or}}
      {{Ada/kw|delay}} 10.0;
      Put_Line ("The system is busy now, please try again later.");
   {{Ada/kw|end}} {{Ada/kw|select}};

To time out the ''functionality'' provided by a task, two distinct entries are needed: one to pass in arguments, and one to collect the result.  Timing out on rendezvous with the latter achieves the desired effect.

Ex. 11

   {{Ada/kw|task}} Process_Data {{Ada/kw|is}}
      {{Ada/kw|entry}} Input (D  : {{Ada/kw|in}}  Datum);
      {{Ada/kw|entry}} Output (D  : {{Ada/kw|out}} Datum);
   {{Ada/kw|end}} Process_Data;
   
   Input_Data, Output_Data : Datum;
   
   {{Ada/kw|loop}}
      ''collect'' Input_Data ''from sensors'';
      Process_Data.Input (Input_Data);
      {{Ada/kw|select}}
         Process_Data.Output (Output_Data);
         ''pass'' Output_Data ''to display task'';
      {{Ada/kw|or}}
         {{Ada/kw|delay}} 0.1;
         Log_Error ("Processing did not complete quickly enough.");
      {{Ada/kw|end}} {{Ada/kw|select}};
   {{Ada/kw|end}} {{Ada/kw|loop}};

Symmetrically, a delay alternative in a selective wait statement allows a server task to withdraw an offer to accept calls after a maximum delay in achieving rendezvous with any client.

Ex. 12

   {{Ada/kw|task}} Resource_Lender {{Ada/kw|is}}
      {{Ada/kw|entry}} Get_Loan (Period : {{Ada/kw|in}} Duration);
      {{Ada/kw|entry}} Give_Back;
   {{Ada/kw|end}} Resource_Lender;
   ...
   {{Ada/kw|task}} {{Ada/kw|body}} Resource_Lender {{Ada/kw|is}}
      Period_Of_Loan : Duration;
   {{Ada/kw|begin}}
      {{Ada/kw|loop}}
         {{Ada/kw|select}}
            {{Ada/kw|accept}} Get_Loan (Period : {{Ada/kw|in}} Duration) {{Ada/kw|do}}
               Period_Of_Loan := Period;
            {{Ada/kw|end}} Get_Loan;
            {{Ada/kw|select}}
               {{Ada/kw|accept}} Give_Back;
            {{Ada/kw|or}}
               {{Ada/kw|delay}} Period_Of_Loan;
               Log_Error ("Borrower did not give up loan soon enough.");
            {{Ada/kw|end}} {{Ada/kw|select}};
         {{Ada/kw|or}}
            {{Ada/kw|terminate}};
         {{Ada/kw|end}} {{Ada/kw|select}};
      {{Ada/kw|end}} {{Ada/kw|loop}};
   {{Ada/kw|end}} Resource_Lender;

== Conditional entry calls ==

An entry call can be made conditional, so that it is withdrawn if the rendezvous is not immediately achieved. This uses the select statement notation with an '''else''' part. Thus the constructs

   {{Ada/kw|select}}
     Callee.Rendezvous;
   {{Ada/kw|else}}
     Do_something_else;
   {{Ada/kw|end}} {{Ada/kw|select}};

and

   {{Ada/kw|select}}
     Callee.Rendezvous;
   {{Ada/kw|or}}
     {{Ada/kw|delay}} 0.0;
     Do_something_else;
   {{Ada/kw|end}} {{Ada/kw|select}};

seem to be conceptually equivalent. However, the attempt to start the rendezvous may take some time, especially if the callee is on another processor, so the ''delay 0.0;'' may expire although the callee would be able to accept the rendezvous, whereas the ''else'' construct is safe.

== Requeue statements ==

A requeue statement allows an accept statement or entry body to be completed while redirecting it to a different or the same entry queue, even to one of another task. The called entry has to share the same parameter list or be parameter-less. The caller of the original entry is not aware of the requeue and the entry call continues although now to possibly another entry of another task.

The requeue statement should normally be used to quickly check some precondition for the work proper. If these are fulfilled, the work proper is delegated to another task, hence the caller should nearly immediately be requeued.

Thus requeuing may have an effect on timed entry calls. To be a bit more specific, say the timed entry call is to T1.E1, the requeue within T1.E1 to T2.E2:

 {{Ada/keyword|task}} {{Ada/keyword|body}} T1 {{Ada/keyword|is}}
   ...
   {{Ada/keyword|accept}} E1 {{Ada/keyword|do}}
     ...  {{Ada/-- | Here quick check of preconditions.}}
     {{Ada/keyword|requeue}} T2{{Ada/delimiter|.}}E2{{Ada/delimiter|;}}  {{Ada/-- | delegation}}
   {{Ada/keyword|end}} E1{{Ada/delimiter|;}}
   ...
 {{Ada/keyword|end}} T1{{Ada/delimiter|;}}

Let Delta_T be the timeout of the timed entry call to T1.E1. There are now several possibilities:

1. Delta_T expires before T1.E1 is accepted.&lt;/br&gt;
The entry call is aborted, i.e. taken out of the queue.

2. Delta_T expires after T1.E1 is accepted.&lt;/br&gt;
T1.E1 is completed and T2.E2 is to be accepted.&lt;/br&gt;
For the caller, who is unaware of the requeue, the entry call is still executing; it is completed only with the completion T2.E2.

Thus, although the original entry call may be postponed for a long time while T2.E2 is waiting to be accepted, the call is executing from the caller's point of view.

To avoid this behaviour, a call may be ''requeued with abort''. This changes case 2 above:

2.a The call is requeued to T2.E2 before Delta_T expires.

2.a.1 T2.E2 is accepted before expiration, the call continues until T2.E2 is completed.

2.a.2 Delta_T expires before T2.E2 is accepted: The entry call is aborted, i.e. taken out of the queue of T2.E2.

2.b The call is requeued to T2.E2 after the expiration of Delta_T.

2.b.1 T2.E2 is immediately available (i.e. there is no requeue), T2.E2 continues to completion.

2.b.2 T2.E2 is queued: The entry call is aborted, i.e. taken out of the queue of T2.E2.

In short, for a requeue with abort, the entry call to T1.E1 is completed in cases 1, 2.a.1 and 2.b.1; it is aborted in 2.a.2 and 2.b.2.

So what is the difference between these three entries?

  {{Ada/keyword|accept}} E1 {{Ada/keyword|do}}
     ...  {{Ada/-- | Here quick check of preconditions.}}
     {{Ada/keyword|requeue}} T2{{Ada/delimiter|.}}E2 {{Ada/keyword|with}} {{Ada/keyword|abort}}{{Ada/delimiter|;}}  {{Ada/-- | delegation}}
   {{Ada/keyword|end}} E1{{Ada/delimiter|;}}
 
   {{Ada/keyword|accept}} E2 {{Ada/keyword|do}}
     ...  {{Ada/-- | Here quick check of preconditions.}}
     T2{{Ada/delimiter|.}}E2 &lt;nowiki&gt;[&lt;/nowiki&gt;{{Ada/keyword|with}} {{Ada/keyword|abort}}]{{Ada/delimiter|;}}  {{Ada/-- | delegation}}
   {{Ada/keyword|end}} E2{{Ada/delimiter|;}}
 
   {{Ada/keyword|accept}} E3 {{Ada/keyword|do}}
     ...  {{Ada/-- | Here quick check of preconditions.}}
   {{Ada/keyword|end}} E3{{Ada/delimiter|;}}
   T2{{Ada/delimiter|.}}E2{{Ada/delimiter|;}}  {{Ada/-- | delegation}}

E1 has just been discussed. After the requeue, its enclosing task is free for other work, while the caller is still suspended until its call is completed or aborted.

E2 also delegates, however via an entry call. Thus E2 completes only with the completion of T2.E2.

E3 first frees the caller, then delegates to T2.E2, i.e. the entry call is completed with E3.

== Scheduling ==

FIFO, priority, priority inversion avoidance, ... to be completed.

== Interfaces ==

{{Ada/2005|Tasking}}

Task and Protected types can also implement [[Ada Programming/Keywords/interface|interfaces]].

 {{Ada/kw|type}} Printable {{Ada/kw|is}} {{Ada/kw|task}} {{Ada/kw|interface}};
 
 {{Ada/kw|procedure}} Input (D  : {{Ada/kw|in}}  Printable);
 
 
 {{Ada/kw|task}} Process_Data {{Ada/kw|is}} {{Ada/kw|new}} Printable {{Ada/kw|with}}
    {{Ada/kw|entry}} Input  (D  : {{Ada/kw|in}}  Datum);
    {{Ada/kw|entry}} Output (D  : {{Ada/kw|out}} Datum);
 {{Ada/kw|end}} Process_Data;

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Libraries/Ada.Storage IO]]

=== Ada Reference Manual ===

==== Ada 95 ====

* {{Ada/95/RM|9|title=Tasks and Synchronization}}

==== Ada 2005 ====

* {{Ada/2005/RM|3|9|4|title=Interface Types}}
* {{Ada/2005/RM|9|title=Tasks and Synchronization}}

== Ada Quality and Style Guide ==
* '''Chapter 4: Program Structure'''
** {{Ada/SG3|4|1|9|Tasks}}
** {{Ada/SG3|4|1|10|Protected Types}}
* [http://www.adaic.org/docs/95style/html/sec_6/toc.html Chapter 6: Concurrency]

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Tasking]]
&lt;/noinclude&gt;

[[es:Programación en Ada/Tareas]]</text>
      <sha1>e1i2aj0dd8i4npsfcso2a20n0acttu8</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Tips</title>
    <ns>0</ns>
    <id>19275</id>
    <revision>
      <id>3250264</id>
      <parentid>3211777</parentid>
      <timestamp>2017-07-31T00:28:45Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="13641" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Tips}}
__TOC__&lt;/noinclude&gt;

== Full declaration of a type can be deferred to the unit's body ==

Often, you'll want to make changes to the internals of a private type.  This, in turn, will require the algorithms that act on it to be modified.  If the type is completed in the unit specification, it is a pain to edit and recompile both files, even with an [[Wikipedia:Integrated development environment|IDE]], but it's something some programmers learn to live with.

It turns out you don't have to.  Nonchalantly mentioned in the [http://www.adaic.org/standards/95lrm/html/RM-TTL.html ARM], and generally skipped over in tutorials, is the fact that private types can be completed in the unit's body itself, making them much closer to the relevant code, and saving a recompile of the specification, as well as every unit depending on it.  This may seem like a small thing, and, for small projects, it is.  However, if you have one of those uncooperative types that requires dozens of tweaks, or if your dependence graph has much depth, the time and annoyance saved add up quickly.

Also, this construction is very useful when coding a shared library, because it permits to change the implementation of the type while still providing a compatible [[w:Application binary interface|ABI]].

Code sample:

 {{Ada/kw|package}} Private_And_Body {{Ada/kw|is}}
 
   {{Ada/kw|type}} Private_Type {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}};
 
   {{Ada/--|Operations...}}
 
 {{Ada/kw|private}}
   {{Ada/kw|type}} Body_Type;   {{Ada/--|incomplete type declaration completed in the body}}
   {{Ada/kw|type}} Private_Type {{Ada/kw|is}} {{Ada/kw|access}} Body_Type;
 {{Ada/kw|end}} Private_And_Body;

The type in the public part is an [[Ada Programming/Types/access|access]] to the hidden type. This has the drawback that memory management has to be provided by the package implementation. That is the reason why &lt;tt&gt;Private_Type&lt;/tt&gt; is a limited type, the client will not be allowed to copy the access values, in order to prevent dangling references.

Normally, the full type definition has to be given in the specification because the compiler has to know how much place to allocate to objects in order to produce code using this type. And the astute reader will note that also in this case the full type definition is given for Private_Type: it is an access to some other (albeit incomplete) type, and the size of an access value is known. This is why the full type definition of Body_Type can be moved to the body.

The construction centering around &lt;tt&gt;Private_Type&lt;/tt&gt; is sometimes called an [[w:opaque pointer|opaque pointer]].

== Lambda calculus through generics ==

Suppose you've decided to roll your own [[Wikipedia:Set (computer science)|set]] type. You can add things to it, remove things from it, and you want to let a user apply some arbitrary function to all of its members. But the scoping rules seem to conspire against you, forcing nearly everything to be global.

The mental stumbling block is that most examples given of [[../Generics|generics]] are packages, and the Set package is already generic. In this case, the solution is to make the Apply_To_All procedure generic as well; that is, to nest the generics. Generic procedures inside packages exist in a strange scoping limbo, where anything in scope at the instantiation can be used by the instantiation, and anything normally in scope at the formal can be accessed by the formal. The end result is that the relevant scoping roadblocks no longer apply. It isn't the full lambda calculus, just one of the most useful parts.

 {{Ada/kw|generic}}
   {{Ada/kw|type}} Element {{Ada/kw|is}} {{Ada/kw|private}};
 {{Ada/kw|package}} Sets {{Ada/kw|is}}
   {{Ada/kw|type}} Set {{Ada/kw|is}} {{Ada/kw|private}};
    ''[..]''
   {{Ada/kw|generic}}
     {{Ada/kw|with}} {{Ada/kw|procedure}} Apply_To_One (The_Element : {{Ada/kw|in}} {{Ada/kw|out}} Element);
   {{Ada/kw|procedure}} Apply_To_All (The_Set : {{Ada/kw|in}} {{Ada/kw|out}} Set);
 {{Ada/kw|end}} Sets;

For a view of Functional Programming in Ada see.&lt;ref&gt;[http://okasaki.blogspot.com/2008/07/functional-programming-inada.html Functional Programming in...Ada?], by Chris Okasaki&lt;/ref&gt;

== Compiler Messages ==

Different compilers can diagnose different things differently, or the same thing using different messages, etc..
Having two compilers at hand can be useful.

; &lt;code&gt;selected component&lt;/code&gt;: When a source program contains a construct such as &lt;code&gt;Foo.Bar&lt;/code&gt;, you may see messages saying something like «selected component "Bar"» or maybe like «selected component "Foo"». The phrases may seem confusing, because one refers to &lt;code&gt;Foo&lt;/code&gt;, while the other refers to &lt;code&gt;Bar&lt;/code&gt;. But they are both right. The reason is that &lt;tt&gt;selected_component&lt;/tt&gt; is an item from Ada's grammar ({{Ada/RM3|4|1|3|Selected Components}}). It denotes all of: a prefix, a dot, and a selector_name. In the &lt;code&gt;Foo.Bar&lt;/code&gt; example these correspond to &lt;code&gt;Foo&lt;/code&gt;, '&lt;code&gt;.&lt;/code&gt;', and &lt;code&gt;Bar&lt;/code&gt;. Look for more grammar words in the compiler messages, e.g. «prefix», and associate them with identifiers quoted in the messages.

: For example, if you submit the following code to the compiler,

 {{Ada/keyword|with}} ''Pak''{{Ada/delimiter|;}}
 {{Ada/keyword|package}} Foo {{Ada/keyword|is}}
    {{Ada/keyword|type}} T {{Ada/keyword|is}} {{Ada/keyword|new}} ''Pak''{{Ada/delimiter|.}}Bar{{Ada/delimiter|;}}  {{Ada/comment| Oops, Pak is generic!}}
 {{Ada/keyword|end}} Foo{{Ada/delimiter|;}}

: the compiler may print a diagnostic message about a prefixed component: &lt;code&gt;Foo&lt;/code&gt;'s author thought that &lt;code&gt;Pak&lt;/code&gt; denotes a package, but actually it is the name of a ''generic'' package. (Which needs to be instantiated first; and then the ''instance'' name is a suitable prefix.)

== Universal integers ==

All integer literals and also some attributes like &lt;code&gt;'Length&lt;/code&gt; are of the anonymous type ''universal_integer'', which comprises the infinite set of mathematical integers. Named numbers are of this type and are evaluated exactly (no overflow except for machine storage limitations), e.g.

  Very_Big: {{Ada/keyword|constant}} := 10**1_000_000 - 1;

Since ''universal_integer'' has no operators, its values are converted in this example to ''root_integer'', another anonymous type, the calcuation is performed and the result again converted back in ''universal_integer''.

Generally values of ''universal_integer'' are implicitly converted to the appropriate type when used in some expression. So the expression &lt;code&gt;{{Ada/keyword|not}} A{{Ada/delimiter|'}}{{Ada/attribute|Length}}&lt;/code&gt; is fine; the value of &lt;code&gt;A{{Ada/delimiter|'}}{{Ada/attribute|Length}}&lt;/code&gt; is interpreted as a modular integer since {{Ada/keyword|not}} can only be applied to modular integers (of course a context is needed to decide which modular integer type is meant). This feature can lead to pitfalls. Consider

    {{Ada/keyword|type}} Ran_6 {{Ada/keyword|is}} {{Ada/keyword|range}} 1 {{Ada/delimiter|..}} 6{{Ada/delimiter|;}}
    {{Ada/keyword|type}} Mod_6 {{Ada/keyword|is}} {{Ada/keyword|mod}} 6{{Ada/delimiter|;}}

and then

    {{Ada/comment| 1}}
    {{Ada/keyword|if}} A{{Ada/delimiter|'}}{{Ada/attribute|Length}} {{Ada/keyword|in}} Ran_6 {{Ada/keyword|then}}  {{Ada/comment| OK}}
       …
 
    {{Ada/comment| 2}}
    {{Ada/keyword|if}} {{Ada/keyword|not}} A{{Ada/delimiter|'}}{{Ada/attribute|Length}} {{Ada/keyword|in}} Ran_6 {{Ada/keyword|then}}  {{Ada/comment| not OK}}
       …
    {{Ada/comment| this is the same as}}
    {{Ada/keyword|if}} ({{Ada/keyword|not}} A{{Ada/delimiter|'}}{{Ada/attribute|Length}}) {{Ada/keyword|in}} Ran_6 {{Ada/keyword|then}}  {{Ada/comment| not OK}}
       …
 
    {{Ada/comment| 3}}
    {{Ada/keyword|if}} A{{Ada/delimiter|'}}{{Ada/attribute|Length}} {{Ada/keyword|in}} 1 {{Ada/delimiter|..}} 6 {{Ada/keyword|then}}  {{Ada/comment| OK}}
       …
 
    {{Ada/comment| 4}}
    {{Ada/keyword|if}} {{Ada/keyword|not}} A{{Ada/delimiter|'}}{{Ada/attribute|Length}} {{Ada/keyword|in}} 1 {{Ada/delimiter|..}} 6 {{Ada/keyword|then}}  {{Ada/comment| not OK}}
       …
 
    {{Ada/comment| 5}}
    {{Ada/keyword|if}} A{{Ada/delimiter|'}}{{Ada/attribute|Length}} {{Ada/keyword|in}} Mod_6 {{Ada/keyword|then}}  {{Ada/comment| OK?}}
       …
 
    {{Ada/comment| 6}}
    {{Ada/keyword|if}} {{Ada/keyword|not}} A{{Ada/delimiter|'}}{{Ada/attribute|Length}} {{Ada/keyword|in}} Mod_6 {{Ada/keyword|then}}  {{Ada/comment| OK?}}
       …

:The second conditional cannot be compiled because the expressions to the left of &lt;code&gt;{{Ada/keyword|in}}&lt;/code&gt; is incompatible to the type at the right. Note that &lt;code&gt;{{Ada/keyword|not}}&lt;/code&gt; has precedence over &lt;code&gt;{{Ada/keyword|in}}&lt;/code&gt;. It does not negate the entire membership test but only &lt;code&gt;A{{Ada/delimiter|'}}{{Ada/attribute|Length}}&lt;/code&gt;.

: The fourth conditional fails in various ways.

: The sixth conditional might be fine because &lt;code&gt;{{Ada/keyword|not}}&lt;/code&gt; turns &lt;code&gt;A{{Ada/delimiter|'}}{{Ada/attribute|Length}}&lt;/code&gt; into a modular value which is OK if the value is covered by modular type &lt;code&gt;Mod_6&lt;/code&gt;. 

: GNAT GPL 2009 gives these diagnoses respectively:

 error: incompatible types
 error: operand of not must be enclosed in parentheses
 warning: not expression should be parenthesized here

: A way to ''avoid'' these problems is to use &lt;code&gt;{{Ada/keyword|not}} {{Ada/keyword|in}}&lt;/code&gt; for the membership test (which, btw., is the language-intended form),

    {{Ada/keyword|if}} A{{Ada/delimiter|'}}{{Ada/attribute|Length}} {{Ada/keyword|not}} {{Ada/keyword|in}} Ran_6 {{Ada/keyword|then}}  {{Ada/comment| OK}}
       …

: See
:* {{Ada/RM2|2|4|Numeric Literals}},
:* {{Ada/RM3|3|6|2|Operations of Array Types}}), and 
:* {{Ada/RM2|4|5|Operators and Expression Evaluation}},
:* {{Ada/RM3|4|5|2|Relational Operators and Membership Tests}},
:* [[Ada Programming/Operators#Membership tests|Membership Tests]]

== I/O ==

=== Text_IO Issues ===

A canonical method of reading a sequence of lines from a text file uses the standard procedure {{Ada/package|Ada|Text_IO}}.''Get_Line''.
When the end of input is reached, ''Get_Line'' will fail, and exception ''End_Error'' is raised. Some programs will use another function
from {{Ada/package|Ada|Text_IO}} to prevent this and test for ''End_of_File''. However, this isn't always the best choice, as has been explained
for example in a Get_Line news group discussion on
[http://groups.google.com/group/comp.lang.ada/browse_thread/thread/5afe598156615c8b# comp.lang.ada].

A working solution uses an exception handler instead:

   {{Ada/keyword|declare}}
      The_Line{{Ada/delimiter|:}} String{{Ada/delimiter|(}}1{{Ada/delimiter|..}}100{{Ada/delimiter|)}}{{Ada/delimiter|;}}
      Last{{Ada/delimiter|:}} Natural{{Ada/delimiter|;}}
   {{Ada/keyword|begin}}
      {{Ada/keyword|loop}}
         Text_IO{{Ada/delimiter|.}}Get_Line{{Ada/delimiter|(}}The_Line{{Ada/delimiter|,}} Last{{Ada/delimiter|)}}{{Ada/delimiter|;}}
         {{Ada/comment| do something with The_Line ...}}
      {{Ada/keyword|end}} {{Ada/keyword|loop}}{{Ada/delimiter|;}}
   {{Ada/keyword|exception}}
      {{Ada/keyword|when}} Text_IO{{Ada/delimiter|.}}End_Error {{Ada/delimiter|1= =&gt;}}
         {{Ada/keyword|null}}{{Ada/delimiter|;}}
   {{Ada/keyword|end}}{{Ada/delimiter|;}}

The function End_of_File RM A.10.1(34) works fine as long as the file follows the canonical form of text files presumed by Ada, which is always the case when the file has been written by {{Ada/package|Ada|Text_IO}}. This canonical form requires an End_of_Line marker followed by an End_of_Page marker at the very end before the End_of_File.

If the file was produced by another any other means, it will generally not have this canonical form, so a test for End_of_File will fail. That's why the exception End_Error has to be used in those cases (which always works).

== Quirks ==

Using GNAT on Windows, calls to subprograms from {{Ada/package|Ada|Real_Time}} might need special attention. (For example, the &lt;code&gt;Real_Time.Clock&lt;/code&gt; function might seem to return values indicating that no time has passed between two invocations when certainly some time has passed.) The cause is reported to be a missing initialization of the run-time support when no other real-time features are present in the program.&lt;ref&gt;{{Ada/Cite cla 
|author = Vincent Celier
|title = Timing code blocks
|date = 2010-03-08
|url = http://groups.google.es/group/comp.lang.ada/browse_thread/thread/c8acfc87fbb1813d
|quote = The problem is now understood and corrected in the development version of GNAT.
|accessdate = 2010-03-11
}} Usenet article forwards this information from AdaCore.&lt;/ref&gt;  As a provisional fix, it is suggested to insert

 {{Ada/keyword|delay}} 0{{Ada/delimiter|.}}0{{Ada/delimiter|;}}

before any use of &lt;code&gt;Real_Time&lt;/code&gt; services.

=== Stack Size ===

With some implementations, notably GNAT, knowledge of stack size manipulation will be to your advantage. Executables produced with GNAT tools and standard settings can hit the stack size limit. If so, the operating system might allow setting higher limits. Using GNU/Linux and the Bash command shell, try

 $ ulimit -s [some number]

The current value is printed when only &lt;code&gt;-s&lt;/code&gt; is given to ''ulimit''.

== References ==

&lt;references/&gt;

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Errors]]

=== Ada Reference Manual ===

* {{Ada/RM3|3|10|1|Incomplete Type Declarations}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Tips]]
&lt;/noinclude&gt;</text>
      <sha1>oxmsd4zw38hw13mejmyudpl9d304e1l</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Tutorials</title>
    <ns>0</ns>
    <id>72986</id>
    <revision>
      <id>3553824</id>
      <parentid>3211773</parentid>
      <timestamp>2019-06-24T14:00:33Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <comment>Links and information updated</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2092" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Tutorials}}
&lt;/noinclude&gt;

This page contains a list of other Ada tutorials on the Net.

# [[Ada Programming]], available on Wikibooks, is based on the [[Ada Programming/Ada 2005|Ada 2005]] standard and currently being updated to [[Ada Programming/Ada 2012|Ada 2012]].
# [https://learn.adacore.com/courses/intro-to-ada/ Introduction to Ada at learn.adacore.com] is an iteractive web tutorial based on Ada 2012. It has editable and compilable examples.
# [http://www.dwheeler.com/lovelace/ Lovelace] is a free (no-charge), self-directed Ada 95 tutorial available on the World Wide Web (WWW). Lovelace assumes that the user already knows another algorithmic programming language, such as C, C++, or Pascal. Lovelace is interactive and contains many short sections, most of which end with a question to help ensure that users understand the material. Lovelace can be used directly from the WWW, downloaded, or run from CD-ROM. Lovelace was developed by David A. Wheeler.
# [http://zhu-qy.blogspot.com.es/2012/08/adatutor.html AdaTutor] is an interactive Ada 95 tutorial that was distributed as a [https://github.com/qunying/AdaTutor/tree/master/adatutor public-domain Ada program] and has been converted to a web tutorial.
# The [http://www.adahome.com/Ammo/Cplpl2Ada.html Ada-95: A guide for C and C++ programmers] is a short hypertext tutorial for programmers who have a C or C++ style programming language background. It was written by Simon Johnston, with some additional text by Tucker Taft. [http://home.agh.edu.pl/~jpi/download/ada/guide-c2ada.pdf PDF edition].
# [http://goanna.cs.rmit.edu.au/~dale/ada/aln.html Dale Stanbrough's Introduction] is a set of notes that provide a simple introduction to Ada. This material has been used for a few years as a simple introduction to the language.
# Coronado Enterprises Ada 95 Tutorial: [http://www.infres.enst.fr/~pautet/Ada95/a95list.htm shareware edition], [http://www.coronadoenterprises.com/tutorials/ada95/index.html commercial edition].

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Tutorials]]
&lt;/noinclude&gt;</text>
      <sha1>55d9mqwcqp1pzi2po4fua8zsbgrp8hs</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Type System</title>
    <ns>0</ns>
    <id>18395</id>
    <revision>
      <id>3421236</id>
      <parentid>3366761</parentid>
      <timestamp>2018-05-08T12:29:01Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>510943</id>
      </contributor>
      <comment>tag fix</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="51585" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Subtypes}}
__TOC__&lt;/noinclude&gt;

Ada's type system allows the programmer to construct powerful abstractions that represent the real world, and to provide valuable information to the compiler, so that the compiler can find many logic or design errors before they become bugs.  It is at the heart of the language, and good Ada programmers learn to use it to great advantage.  Four principles govern the type system:

* '''Strong typing''': types are incompatible with one another, so it is not possible to mix apples and oranges.  There are, however, ways to convert between types.
* '''Static typing''': type checked while compiling, this allows type errors to be found earlier.
* '''Abstraction''': types represent the real world or the problem at hand; not how the computer represents the data internally.  There are ways to specify exactly how a type must be represented at the bit level, but we will defer that discussion to another chapter.
* '''Name equivalence''', as opposed to ''structural equivalence'' used in most other languages.  Two types are compatible if and only if they have the same name; ''not'' if they just happen to have the same size or bit representation.  You can thus declare two integer types with the same ranges that are totally incompatible, or two record types with exactly the same components, but which are incompatible.

Types are incompatible with one another.  However, each type can have any number of ''subtypes'', which are compatible with their base type and may be compatible with one another. See below for examples of subtypes which are incompatible with one another.

== Predefined types ==

There are several predefined types, but most programmers prefer to define their own, application-specific types.  Nevertheless, these predefined types are very useful as interfaces between libraries developed independently.  The predefined library, obviously, uses these types too.

These types are predefined in the {{Ada/package|Standard}} package:
; Integer: This type covers at least the range &lt;math&gt;-2^{15}+1&lt;/math&gt; .. &lt;math&gt;+2^{15}-1&lt;/math&gt; (RM {{Ada/RM3|3|5|4|(21)}}). The Standard also defines &lt;code&gt;Natural&lt;/code&gt; and &lt;code&gt;Positive&lt;/code&gt; subtypes of this type.
{{Ada/Integer subtypes diagram}}
; Float: There is only a very weak implementation requirement on this type (RM {{Ada/RM3|3|5|7|(14)}}); most of the time you would define your own floating-point types, and specify your precision and range requirements.
; Duration: A [[Ada Programming/Types/delta|fixed point type]] used for timing. It represents a period of time in seconds (RM {{Ada/RM2|A|1|(43)}}).
; Character : A special form of [[Ada Programming/Types/Enumeration|Enumerations]]. There are three predefined kinds of character types: 8-bit characters (called &lt;code&gt;Character&lt;/code&gt;), 16-bit characters (called &lt;code&gt;Wide_Character&lt;/code&gt;), and 32-bit characters (&lt;code&gt;Wide_Wide_Character&lt;/code&gt;). &lt;code&gt;Character&lt;/code&gt; has been present since the first version of the language ([[Ada Programming/Ada 83|Ada 83]]), &lt;code&gt;Wide_Character&lt;/code&gt; was added in [[Ada Programming/Ada 95|Ada 95]], while the type &lt;code&gt;Wide_Wide_Character&lt;/code&gt; is available with [[Ada Programming/Ada 2005|Ada 2005]].
; [[Ada Programming/Strings|String]]: Three indefinite [[Ada Programming/Types/array|array types]], of &lt;code&gt;Character&lt;/code&gt;, &lt;code&gt;Wide_Character&lt;/code&gt;, and &lt;code&gt;Wide_Wide_Character&lt;/code&gt; respectively.  The standard library contains packages for handling strings in three variants: fixed length (&lt;code&gt;{{Ada/package|Ada|Strings|Fixed}}&lt;/code&gt;), with varying length below a certain upper bound (&lt;code&gt;{{Ada/package|Ada|Strings|Bounded}}&lt;/code&gt;), and unbounded length (&lt;code&gt;{{Ada/package|Ada|Strings|Unbounded}}&lt;/code&gt;).  Each of these packages has a &lt;code&gt;Wide_&lt;/code&gt; and a &lt;code&gt;Wide_Wide_&lt;/code&gt; variant.
; Boolean : A &lt;code&gt;Boolean&lt;/code&gt; in Ada is an [[Ada Programming/Types/Enumeration|Enumeration]] of &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt; with special semantics.

Packages &lt;code&gt;{{Ada/package|System}}&lt;/code&gt; and &lt;code&gt;{{Ada/package|System|Storage_Elements}}&lt;/code&gt; predefine some types which are primarily useful for low-level programming and interfacing to hardware.

; System.Address : An address in memory.
; System.Storage_Elements.Storage_Offset : An offset, which can be added to an address to obtain a new address.  You can also subtract one address from another to get the offset between them.  Together, &lt;code&gt;Address&lt;/code&gt;, &lt;code&gt;Storage_Offset&lt;/code&gt; and their associated subprograms provide for address arithmetic.
; System.Storage_Elements.Storage_Count : A subtype of &lt;code&gt;Storage_Offset&lt;/code&gt; which cannot be negative, and represents the memory size of a data structure (similar to C's &lt;code&gt;size_t&lt;/code&gt;).
; System.Storage_Elements.Storage_Element : In most computers, this is a byte.  Formally, it is the smallest unit of memory that has an address.
; System.Storage_Elements.Storage_Array : An array of &lt;code&gt;Storage_Element&lt;/code&gt;s without any meaning, useful when doing raw memory access.

== The Type Hierarchy ==

Types are organized hierarchically.  A type inherits properties from types above it in the hierarchy.  For example, all scalar types (integer, enumeration, modular, fixed-point and floating-point types) have [[Ada Programming/Operators|operators]] "{{Ada/op|&lt;}}", "{{Ada/op|&gt;}}" and arithmetic operators defined for them, and all discrete types can serve as array indexes.

[[Image:Ada_types.png|thumb|550px|center|Ada type hierarchy]]

Here is a broad overview of each category of types; please follow the links for detailed explanations. Inside parenthesis there are equivalences in C and Pascal for readers familiar with those languages.

; [[Ada Programming/Types/range|Signed Integers]] &lt;small&gt;('''int''', '''INTEGER''')&lt;/small&gt; : Signed Integers are defined via the [[Ada Programming/Types/range|range]] of values needed.
; [[Ada Programming/Types/mod|Unsigned Integers]] &lt;small&gt;('''unsigned''', '''CARDINAL''')&lt;/small&gt; : Unsigned Integers are called [[Ada Programming/Types/mod|Modular Types]]. Apart from being unsigned they also have wrap-around functionality.
; [[Ada Programming/Types/Enumeration|Enumerations]] &lt;small&gt;('''enum''', '''char''', '''bool''', '''BOOLEAN''')&lt;/small&gt; : Ada [[Ada Programming/Types/Enumeration|Enumeration]] types are a separate type family.
; [[Ada Programming/Types/digits|Floating point]] &lt;small&gt;('''float''', '''double''', '''REAL''')&lt;/small&gt; : Floating point types are defined by the [[Ada Programming/Types/digits|digits]] needed, the relative error bound.
; [[Ada Programming/Types/delta|Ordinary and Decimal Fixed Point]] &lt;small&gt;('''DECIMAL''')&lt;/small&gt; : Fixed point types are defined by their [[Ada Programming/Types/delta|delta]], the absolute error bound.
; [[Ada Programming/Types/array|Arrays]] &lt;small&gt;( '''[ ]''', '''ARRAY [ ] OF''', '''STRING''' )&lt;/small&gt; : Arrays with both compile-time and run-time determined size are supported.
; [[Ada Programming/Types/record|Record]] &lt;small&gt;('''struct''', '''class''', '''RECORD OF''')&lt;/small&gt; : A '''record''' is a [[Ada Programming/Types#List of types|composite type]] that groups one or more fields.
; [[Ada Programming/Types/access|Access]] &lt;small&gt;('''*''', '''^''', '''POINTER TO''')&lt;/small&gt; : Ada's [[Ada Programming/Types/access|Access]] types may be more than just a simple memory address.
; [[Ada Programming/Tasking|Task &amp; Protected]] &lt;small&gt;(no equivalence in C or Pascal)&lt;/small&gt; : Task and Protected types allow the control of concurrency
; [[Ada Programming/Keywords/interface|Interfaces]] &lt;small&gt;(no equivalence in C or Pascal)&lt;/small&gt; : New in Ada 2005, these types are similar to the Java interfaces.

=== Classification of Types ===

Ada's types can be classified as follows.

'''Specific vs. Class-wide'''

 {{Ada/kw|type}} T {{Ada/kw|is}} ...  -- a specific type
   T'Class      -- the corresponding class-wide type (exists only for tagged types)

&lt;code&gt;T'Class&lt;/code&gt; and &lt;code&gt;T'Class'Class&lt;/code&gt; are the same.

Primitive operations with parameters of specific types are ''non-dispatching'', those with parameters of class-wide types are ''dispatching''.

New types can be declared by ''deriving'' from specific types; primitive operations are ''inherited'' by derivation. You cannot derive from class-wide types.

'''Constrained vs. Unconstrained'''

 {{Ada/kw|type}} I {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;           -- constrained
 {{Ada/kw|type}} AC {{Ada/kw|is}} {{Ada/kw|array}} (1 .. 10) {{Ada/kw|of}} ...  -- constrained

 {{Ada/kw|type}} AU {{Ada/kw|is}} {{Ada/kw|array}} (I {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} ...          -- unconstrained
 {{Ada/kw|type}} R (X: Discriminant [:= Default]) {{Ada/kw|is}} ...  -- unconstrained

By giving a ''constraint'' to an unconstrained subtype, a subtype or object becomes constrained:

 {{Ada/kw|subtype}} RC {{Ada/kw|is}} R (Value);  -- constrained subtype of R
 OC: R (Value);            -- constrained object of anonymous constrained subtype of R
 OU: R;                    -- unconstrained object

Declaring an unconstrained object is only possible if a default value is given in the type declaration above. The language does not specify how such objects are allocated. GNAT allocates the maximum size, so that size changes that might occur with discriminant changes present no problem. Another possibility is implicit dynamic allocation on the heap and re-allocation followed by a deallocation when the size changes.

''' Definite vs. Indefinite'''

 {{Ada/kw|type}} I {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;                     -- definite
 {{Ada/kw|type}} RD (X: Discriminant := Default) {{Ada/kw|is}} ...  -- definite

 {{Ada/kw|type}} T (&lt;&gt;) {{Ada/kw|is}} ...                    -- indefinite
 {{Ada/kw|type}} AU {{Ada/kw|is}} {{Ada/kw|array}} (I {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} ...  -- indefinite
 {{Ada/kw|type}} RI (X: Discriminant) {{Ada/kw|is}} ...      -- indefinite

Definite subtypes allow the declaration of objects without initial value, since objects of definite subtypes have constraints that are known at creation-time. Object declarations of indefinite subtypes need an initial value to supply a constraint; they are then constrained by the constraint delivered by the initial value.

 OT: T  := Expr;                       -- some initial expression (object, function call, etc.)
 OA: AU := (3 =&gt; 10, 5 =&gt; 2, 4 =&gt; 4);  -- index range is now 3 .. 5
 OR: RI := Expr;                       -- again some initial expression as above

'''Unconstrained vs. Indefinite'''

Note that unconstrained subtypes are not necessarily indefinite as can be seen above with RD: it is a definite unconstrained subtype.

== Concurrency Types ==

The Ada language uses types for one more purpose in addition to classifying data
+ operations. The type system integrates concurrency (threading, parallelism).
Programmers will use types for expressing the concurrent
threads of control of their programs.

The core pieces of this part of the type system, the '''task''' types and
the '''protected''' types are explained in greater depth in
[[Ada Programming/Tasking|a section on tasking]].

== Limited Types ==

Limiting a type means disallowing assignment.
The &amp;ldquo;concurrency types&amp;rdquo; described above are always limited.
Programmers can define their own types to be limited, too, like this:

 {{Ada/keyword|type}} T {{Ada/keyword|is}} {{Ada/keyword|limited}} &amp;hellip;;

(The ellipsis stands for {{Ada/kw|private}}, or for a {{Ada/kw|record}} definition,
see the corresponding subsection on this page.)
A  limited type also doesn't have
an equality operator unless the programmer defines one.

You can learn more in the [[Ada Programming/Types/limited|limited types]] chapter.

== Defining new types and subtypes ==

You can define a new type with the following syntax:

 {{Ada/kw|type}} T {{Ada/kw|is}}...

followed by the description of the type, as explained in detail in each category of type.

Formally, the above declaration creates a type and its ''first subtype'' named &lt;code&gt;T&lt;/code&gt;.  The type itself, correctly called the "type of T", is anonymous; the RM refers to it as &lt;code&gt;''T''&lt;/code&gt; (in italics), but often speaks sloppily about the type T. But this is an academic consideration; for most purposes, it is sufficient to think of &lt;code&gt;T&lt;/code&gt; as a type.
For scalar types, there is also a base type called &lt;code&gt;T'Base&lt;/code&gt;, which encompasses all values of T.

For signed integer types, the type of T comprises the (complete) set of mathematical integers. The base type is a certain hardware type, symmetric around zero (except for possibly one extra negative value), encompassing all values of T.  

As explained above, all types are incompatible; thus:

 {{Ada/kw|type}} Integer_1 {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;
 {{Ada/kw|type}} Integer_2 {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;
 A : Integer_1 := 8;
 B : Integer_2 := A; {{Ada/comment|illegal!}}

is illegal, because &lt;code&gt;Integer_1&lt;/code&gt; and &lt;code&gt;Integer_2&lt;/code&gt; are different and incompatible types.  It is this feature which allows the compiler to detect logic errors at compile time, such as adding a file descriptor to a number of bytes, or a length to a weight.  The fact that the two types have the same range does not make them compatible: this is ''name equivalence'' in action, as opposed to structural equivalence.  (Below, we will see how you can convert between incompatible types; there are strict rules for this.)

=== Creating subtypes ===

You can also create new subtypes of a given type, which will be compatible with each other, like this:

 {{Ada/kw|type}} Integer_1 {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;
 {{Ada/kw|subtype}} Integer_2 {{Ada/kw|is}} Integer_1      {{Ada/kw|range}} 7 .. 11;  {{Ada/comment|bad}}
 {{Ada/kw|subtype}} Integer_3 {{Ada/kw|is}} Integer_1'Base {{Ada/kw|range}} 7 .. 11;  {{Ada/comment|OK}}
 A : Integer_1 := 8;
 B : Integer_3 := A; {{Ada/comment|OK}}

The declaration of &lt;code&gt;Integer_2&lt;/code&gt; is bad because the constraint &lt;code&gt;7 .. 11&lt;/code&gt; is not compatible with &lt;code&gt;Integer_1&lt;/code&gt;; it raises &lt;code&gt;Constraint_Error&lt;/code&gt; at subtype elaboration time.

&lt;code&gt;Integer_1&lt;/code&gt; and &lt;code&gt;Integer_3&lt;/code&gt; are compatible because they are both subtypes of the same type, namely &lt;code&gt;Integer_1'Base&lt;/code&gt;.

It is not necessary that the subtype ranges overlap, or be included in one another.  The compiler inserts a run-time range check when you assign A to B; if the value of A, at that point, happens to be outside the range of &lt;code&gt;Integer_3&lt;/code&gt;, the program raises &lt;code&gt;Constraint_Error&lt;/code&gt;.

There are a few predefined subtypes which are very useful:

 {{Ada/kw|subtype}} Natural  {{Ada/kw|is}} Integer {{Ada/kw|range}} 0 .. Integer'Last;
 {{Ada/kw|subtype}} Positive {{Ada/kw|is}} Integer {{Ada/kw|range}} 1 .. Integer'Last;

=== Derived types ===

A derived type is a new, full-blown type created from an existing one.  Like any other type, it is incompatible with its parent; however, it inherits the primitive operations defined for the parent type.

 {{Ada/kw|type}} Integer_1 {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;
 {{Ada/kw|type}} Integer_2 {{Ada/kw|is}} {{Ada/kw|new}} Integer_1 {{Ada/kw|range}} 2 .. 8;
 A : Integer_1 := 8;
 B : Integer_2 := A; {{Ada/comment|illegal!}}

Here both types are discrete; it is mandatory that the range of the derived type be included in the range of its parent.  Contrast this with subtypes.  The reason is that the derived type inherits the primitive operations defined for its parent, and these operations assume the range of the parent type.  Here is an illustration of this feature:

 {{Ada/kw|procedure}} Derived_Types {{Ada/kw|is}}
 
    {{Ada/kw|package}} Pak {{Ada/kw|is}}
       {{Ada/kw|type}} Integer_1 {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;
       {{Ada/kw|procedure}} P (I: {{Ada/kw|in}} Integer_1); {{Ada/comment|primitive operation, assumes 1 .. 10}}
       {{Ada/kw|type}} Integer_2 {{Ada/kw|is}} {{Ada/kw|new}} Integer_1 {{Ada/kw|range}} 8 .. 10; {{Ada/comment|must not break P's assumption}}
       {{Ada/comment|procedure P (I: in Integer_2);  inherited P implicitly defined here}}
    {{Ada/kw|end}} Pak;
 
    {{Ada/kw|package}} {{Ada/kw|body}} Pak {{Ada/kw|is}}
       {{Ada/comment|omitted}}
    {{Ada/kw|end}} Pak;
 
    {{Ada/kw|use}} Pak;
    A: Integer_1 := 4;
    B: Integer_2 := 9;
 
 {{Ada/kw|begin}}
 
    P (B); {{Ada/comment|OK, call the inherited operation}}
 
 {{Ada/kw|end}} Derived_Types;

When we call &lt;code&gt;P (B)&lt;/code&gt;, the parameter B is converted to &lt;code&gt;Integer_1&lt;/code&gt;; this conversion of course passes since the set of acceptable values for the derived type (here, 8 .. 10) must be included in that of the parent type (1 .. 10). Then P is called with the converted parameter.

Consider however a variant of the example above:

 {{Ada/kw|procedure}} Derived_Types {{Ada/kw|is}}
 
   {{Ada/kw|package}} Pak {{Ada/kw|is}}
     {{Ada/kw|type}} Integer_1 {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;
     {{Ada/kw|procedure}} P (I: {{Ada/kw|in}} Integer_1; J: {{Ada/kw|out}} Integer_1);
     {{Ada/kw|type}} Integer_2 {{Ada/kw|is}} {{Ada/kw|new}} Integer_1 {{Ada/kw|range}} 8 .. 10;
   {{Ada/kw|end}} Pak;
 
   {{Ada/kw|package}} {{Ada/kw|body}} Pak {{Ada/kw|is}}
     {{Ada/kw|procedure}} P (I: {{Ada/kw|in}} Integer_1; J: {{Ada/kw|out}} Integer_1) {{Ada/kw|is}}
     {{Ada/kw|begin}}
       J := I - 1;
     {{Ada/kw|end}} P;
   {{Ada/kw|end}} Pak;
 
   {{Ada/kw|use}} Pak;
 
   A: Integer_1 := 4;  X: Integer_1;
   B: Integer_2 := 8;  Y: Integer_2;
 
 {{Ada/kw|begin}}
 
   P (A, X);
   P (B, Y);
 
 {{Ada/kw|end}} Derived_Types;

When &lt;code&gt;P (B, Y)&lt;/code&gt; is called, both parameters are converted to &lt;code&gt;Integer_1&lt;/code&gt;. Thus the range check on J (7) in the body of P will pass. However on return parameter Y is converted back to &lt;code&gt;Integer_2&lt;/code&gt; and the range check on Y will of course fail.

With the above in mind, you will see why in the following program Constraint_Error will be called at run time, before &lt;code&gt;P&lt;/code&gt; is even called.

 {{Ada/kw|procedure}} Derived_Types {{Ada/kw|is}}
 
   {{Ada/kw|package}} Pak {{Ada/kw|is}}
     {{Ada/kw|type}} Integer_1 {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;
     {{Ada/kw|procedure}} P (I: {{Ada/kw|in}} Integer_1; J: {{Ada/kw|out}} Integer_1);
     {{Ada/kw|type}} Integer_2 {{Ada/kw|is}} {{Ada/kw|new}} Integer_1'Base {{Ada/kw|range}} 8 .. 12;
   {{Ada/kw|end}} Pak;
 
   {{Ada/kw|package}} {{Ada/kw|body}} Pak {{Ada/kw|is}}
     {{Ada/kw|procedure}} P (I: {{Ada/kw|in}} Integer_1; J: {{Ada/kw|out}} Integer_1) {{Ada/kw|is}}
     {{Ada/kw|begin}}
       J := I - 1;
     {{Ada/kw|end}} P;
   {{Ada/kw|end}} Pak;
 
   {{Ada/kw|use}} Pak;
 
   B: Integer_2 := 11;  Y: Integer_2;
 
 {{Ada/kw|begin}}
 
   P (B, Y);
 
 {{Ada/kw|end}} Derived_Types;

== Subtype categories ==

Ada supports various categories of subtypes which have different abilities. Here is an overview in alphabetical order.

=== Anonymous subtype ===

A subtype which does not have a name assigned to it. Such a subtype is created with a variable declaration:

 X : String (1 .. 10) := ({{Ada/kw|others}} =&gt; ' ');

Here, (1 .. 10) is the constraint. This variable declaration is equivalent to:

 {{Ada/kw|subtype}} Anonymous_String_Type {{Ada/kw|is}} String (1 .. 10);
 
 X : Anonymous_String_Type := ({{Ada/kw|others}} =&gt; ' ');

=== Base type ===

In Ada, all types are [[#anonymous|anonymous]] and only subtypes may be [[#named subtype|named]].
For scalar types, there is a special subtype of the anonymous type, called the ''base type'', which is nameable with the '{{Ada/attribute|Base}} attribute.
The base type comprises all values of the ''first subtype''. Some examples:

  {{Ada/kw|type}} Int {{Ada/kw|is}} {{Ada/kw|range}} 0 .. 100;

The base type &lt;code&gt;Int'Base&lt;/code&gt; is a hardware type selected by the compiler that comprises the values of &lt;code&gt;Int&lt;/code&gt;. Thus it may have the range -2&lt;sup&gt;7&lt;/sup&gt; .. 2&lt;sup&gt;7&lt;/sup&gt;-1 or -2&lt;sup&gt;15&lt;/sup&gt; .. 2&lt;sup&gt;15&lt;/sup&gt;-1 or any other such type.

  {{Ada/kw|type}} Enum  {{Ada/kw|is}} (A, B, C, D);
  {{Ada/kw|type}} Short {{Ada/kw|is}} {{Ada/kw|new}} Enum {{Ada/kw|range}} A .. C;

&lt;code&gt;Enum'Base&lt;/code&gt; is the same as &lt;code&gt;Enum&lt;/code&gt;, but &lt;code&gt;Short'Base&lt;/code&gt; also holds the literal &lt;code&gt;D&lt;/code&gt;.

=== Constrained subtype ===

A subtype of an indefinite subtype that adds constraints. The following example defines a 10 character string sub-type.

  {{Ada/kw|subtype}} String_10 {{Ada/kw|is}} String (1 .. 10);

You cannot partially constrain an unconstrained subtype:

  {{Ada/kw|type}} My_Array {{Ada/kw|is}} {{Ada/kw|array}} (Integer {{Ada/kw|range}} &lt;&gt;, Integer {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} Some_Type;
 
  -- {{Ada/kw|subtype}} Constr {{Ada/kw|is}} My_Array (1 .. 10, Integer {{Ada/kw|range}} &lt;&gt;);  illegal
 
  {{Ada/kw|subtype}} Constr {{Ada/kw|is}} My_Array (1 .. 10, -100 .. 200);

Constraints for all indices must be given, the result is necessarily a definite subtype.

=== Definite subtype ===

A definite subtype is a subtype whose size is known at compile-time. All subtypes which are not indefinite subtypes are, by definition, definite subtypes.

Objects of definite subtypes may be declared without additional constraints.

=== Indefinite subtype ===

An '''indefinite subtype''' is a subtype whose size is not known at compile-time but is dynamically calculated at run-time. An indefinite subtype does not by itself provide enough information to create an object; an additional constraint or explicit initialization expression is necessary in order to calculate the actual size and therefore create the object.

 X : String := "This is a string";

&lt;code&gt;X&lt;/code&gt; is an object of the indefinite (sub)type &lt;code&gt;String&lt;/code&gt;. Its constraint is derived implicitly from its initial value.  &lt;code&gt;X&lt;/code&gt; may change its value, but not its bounds.

It should be noted that it is not necessary to initialize the object from a literal. You can also use a function. For example:

 X : String := Ada.Command_Line.Argument (1);

This statement reads the first command-line argument and assigns it to &lt;code&gt;X&lt;/code&gt;.

A subtype of an indefinite subtype that does not add a constraint only introduces a new name for the original subtype (a kind of renaming under a different notion).

  {{Ada/kw|subtype}} My_String {{Ada/kw|is}} String;

&lt;tt&gt;My_String&lt;/tt&gt; and &lt;tt&gt;String&lt;/tt&gt; are interchangeable.

=== Named subtype ===

A subtype which has a name assigned to it. “First subtypes” are created with the keyword &lt;code&gt;{{Ada/kw|type}}&lt;/code&gt; (remember that types are always anonymous, the name in a type declaration is the name of the first subtype), others with the keyword &lt;code&gt;{{Ada/kw|subtype}}&lt;/code&gt;. For example:

 {{Ada/kw|type}} Count_To_Ten {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;

&lt;code&gt;Count_to_Ten&lt;/code&gt; is the first subtype of a suitable integer base type.
However, if you would like to use this as an index constraint on &lt;code&gt;String&lt;/code&gt;, the following declaration is illegal:

 {{Ada/kw|subtype}} Ten_Characters {{Ada/kw|is}} String (Count_to_Ten);

This is because &lt;code&gt;String&lt;/code&gt; has &lt;code&gt;Positive&lt;/code&gt; as its index, which is a subtype of &lt;code&gt;Integer&lt;/code&gt; (these declarations are taken from package &lt;code&gt;Standard&lt;/code&gt;):

 {{Ada/kw|subtype}} Positive {{Ada/kw|is}} Integer {{Ada/kw|range}} 1 .. Integer'Last;
 
 {{Ada/kw|type}} String {{Ada/kw|is}} (Positive {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} Character;

So you have to use the following declarations:

 {{Ada/kw|subtype}} Count_To_Ten {{Ada/kw|is}} Integer {{Ada/kw|range}} 1 .. 10;
 {{Ada/kw|subtype}} Ten_Characters {{Ada/kw|is}} String (Count_to_Ten);

Now &lt;code&gt;Ten_Characters&lt;/code&gt; is the name of that subtype of &lt;code&gt;String&lt;/code&gt; which is constrained to &lt;code&gt;Count_To_Ten&lt;/code&gt;.
You see that posing constraints on types versus subtypes has very different effects.

=== Unconstrained subtype ===

Any indefinite type is also an unconstrained subtype. However, unconstrainedness and indefiniteness are not the same.

  {{Ada/kw|type}} My_Enum {{Ada/kw|is}} (A, B, C);
  {{Ada/kw|type}} My_Record (Discriminant: My_Enum) {{Ada/kw|is}} ...;
 
  My_Object_A: My_Record (A);

This type is unconstrained and indefinite because you need to give an actual discriminant for object declarations; the object is constrained to this discriminant which may not change.

When however a default is provided for the discriminant, the type is definite yet unconstrained; it allows to define both, constrained and unconstrained objects:

  {{Ada/kw|type}} My_Enum {{Ada/kw|is}} (A, B, C);
  {{Ada/kw|type}} My_Record (Discriminant: My_Enum := A) {{Ada/kw|is}} ...;
 
  My_Object_U: My_Record;      -- unconstrained object
  My_Object_B: My_Record (B);  -- constrained to discriminant B like above

Here, My_Object_U is unconstrained; upon declaration, it has the discriminant A (the default) which however may change.

=== Incompatible subtypes ===

  {{Ada/kw|type}} My_Integer {{Ada/kw|is}} {{Ada/kw|range}} -10 .. + 10;
  {{Ada/kw|subtype}} My_Positive {{Ada/kw|is}} My_Integer {{Ada/kw|range}} + 1 .. + 10;
  {{Ada/kw|subtype}} My_Negative {{Ada/kw|is}} My_Integer {{Ada/kw|range}} -10 .. -  1;

These subtypes are of course incompatible.

Another example are subtypes of a discriminated record:

  {{Ada/kw|type}} My_Enum {{Ada/kw|is}} (A, B, C);
  {{Ada/kw|type}} My_Record (Discriminant: My_Enum) {{Ada/kw|is}} ...;
  {{Ada/kw|subtype}} My_A_Record {{Ada/kw|is}} My_Record (A);
  {{Ada/kw|subtype}} My_C_Record {{Ada/kw|is}} My_Record (C);

Also these subtypes are incompatible.

== Qualified expressions ==

In most cases, the compiler is able to infer the type of an expression; for example:

 {{Ada/kw|type}} Enum {{Ada/kw|is}} (A, B, C);
 E : Enum := A;

Here the compiler knows that &lt;code&gt;A&lt;/code&gt; is a value of the type &lt;code&gt;Enum&lt;/code&gt;.  But consider:

 {{Ada/kw|procedure}} Bad {{Ada/kw|is}}
    {{Ada/kw|type}} Enum_1 {{Ada/kw|is}} (A, B, C);
    {{Ada/kw|procedure}} P (E : {{Ada/kw|in}} Enum_1) {{Ada/kw|is}}... {{Ada/comment|omitted}}
    {{Ada/kw|type}} Enum_2 {{Ada/kw|is}} (A, X, Y, Z);
    {{Ada/kw|procedure}} P (E : {{Ada/kw|in}} Enum_2) {{Ada/kw|is}}... {{Ada/comment|omitted}}
 {{Ada/kw|begin}}
    P (A); {{Ada/comment|illegal: ambiguous}}
 {{Ada/kw|end}} Bad;

The compiler cannot choose between the two versions of &lt;code&gt;P&lt;/code&gt;; both would be equally valid.  To remove the ambiguity, you use a ''qualified expression'':

    P (Enum_1'(A)); {{Ada/comment|OK}}

As seen in the following example, this syntax is often used when creating new objects. If you try to compile the example, it will fail with a compilation error since the compiler will determine that 256 is not in range of &lt;code&gt;Byte&lt;/code&gt;.

 {{Ada/Sourceforge|convert_evaluate_as.adb}}
 
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 
 {{Ada/kw|procedure}} Convert_Evaluate_As {{Ada/kw|is}}
    {{Ada/kw|type}} Byte     {{Ada/kw|is}} {{Ada/kw|mod}} 2**8;
    {{Ada/kw|type}} Byte_Ptr {{Ada/kw|is}} {{Ada/kw|access}} Byte;
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} {{Ada/package|Ada|Text_IO}};
    {{Ada/kw|package}} M_IO {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada|Text_IO|Modular_IO}} (Byte);
 
    A : {{Ada/kw|constant}} Byte_Ptr := {{Ada/kw|new}} Byte'(256);
 {{Ada/kw|begin}}
    T_IO.Put ("A = ");
    M_IO.Put (Item  =&gt; A.all,
              Width =&gt;  5,
              Base  =&gt; 10);
 {{Ada/kw|end}} Convert_Evaluate_As;

You should use qualified expression when getting a string literal's length.

&lt;syntaxhighlight lang="ada"&gt;
"foo"'Length                  -- compilation error: prefix of attribute must be a name
                              --                    qualify expression to turn it into a name
String'("foo" &amp; "bar")'Length -- 6
&lt;/syntaxhighlight&gt;

== Type conversions ==

Data do not always come in the format you need them. You must, then, face the task of converting them. As a true multi-purpose language with a special emphasis on "mission critical", "system programming" and "safety", Ada has several conversion techniques.  The most difficult part is choosing the right one, so the following list is sorted in order of utility. You should try the first one first; the last technique is a last resort, to be used if all others fail. There are also a few related techniques that you might choose instead of actually converting the data.

Since the most important aspect is not the result of a successful conversion, but how the system will react to an invalid conversion, all examples also demonstrate '''faulty''' conversions.

=== Explicit type conversion ===

An explicit type conversion looks much like a function call; it does not use the ''tick'' (apostrophe, ') like the qualified expression does.

 Type_Name (''Expression'')

The compiler first checks that the conversion is legal, and if it is, it inserts a run-time check at the point of the conversion; hence the name ''checked conversion''.  If the conversion fails, the program raises Constraint_Error.  Most compilers are very smart and optimise away the constraint checks; so, you need not worry about any performance penalty.  Some compilers can also warn that a constraint check will always fail (and optimise the check with an unconditional raise).

Explicit type conversions are legal:
* between any two numeric types
* between any two subtypes of the same type
* between any two types derived from the same type (note special rules for tagged types)
* between array types under certain conditions (see RM 4.6(24.2/2..24.7/2))
* and ''nowhere else''

(The rules become more complex with class-wide and anonymous access types.)

 I: Integer := Integer (10);  {{Ada/--|Unnecessary explicit type conversion}}
 J: Integer := 10;            {{Ada/--|Implicit conversion from universal integer}}
 K: Integer := Integer'(10);  {{Ada/--|Use the value 10 of type Integer: qualified expression}}
                              {{Ada/--|(qualification not necessary here).}}

This example illustrates explicit type conversions:

 {{Ada/Sourceforge|convert_checked.adb}}
 
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 
 {{Ada/kw|procedure}} Convert_Checked {{Ada/kw|is}}
    {{Ada/kw|type}} Short {{Ada/kw|is}} {{Ada/kw|range}} -128 .. +127;
    {{Ada/kw|type}} Byte  {{Ada/kw|is}} {{Ada/kw|mod}} 256;
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} {{Ada/package|Ada|Text_IO}};
    {{Ada/kw|package}} I_IO {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada|Text_IO|Integer_IO}} (Short);
    {{Ada/kw|package}} M_IO {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada|Text_IO|Modular_IO}} (Byte);
 
    A : Short := -1;
    B : Byte;
 {{Ada/kw|begin}}
    B := Byte (A);  -- range check will lead to Constraint_Error
    T_IO.Put ("A = ");
    I_IO.Put (Item  =&gt;  A,
              Width =&gt;  5,
              Base  =&gt; 10);
    T_IO.Put (", B = ");
    M_IO.Put (Item  =&gt;  B,
              Width =&gt;  5,
              Base  =&gt; 10);
 {{Ada/kw|end}} Convert_Checked;

Explicit conversions are possible between any two numeric types: integers, fixed-point and floating-point types. If one of the types involved is a fixed-point or floating-point type, the compiler not only checks for the range constraints (thus the code above will raise Constraint_Error), but also performs any loss of precision necessary.

Example 1: the loss of precision causes the procedure to only ever print "0" or "1", since &lt;code&gt;P / 100&lt;/code&gt; is an integer and is always zero or one.

 {{Ada/kw|with}} Ada.Text_IO;
 {{Ada/kw|procedure}} Naive_Explicit_Conversion {{Ada/kw|is}}
    {{Ada/kw|type}} Proportion {{Ada/kw|is}} {{Ada/kw|digits}} 4 {{Ada/kw|range}} 0.0 .. 1.0;
    {{Ada/kw|type}} Percentage {{Ada/kw|is}} {{Ada/kw|range}} 0 .. 100;
    {{Ada/kw|function}} To_Proportion (P : {{Ada/kw|in}} Percentage) {{Ada/kw|return}} Proportion {{Ada/kw|is}}
    {{Ada/kw|begin}}
       {{Ada/kw|return}} Proportion (P / 100);
    {{Ada/kw|end}} To_Proportion;
 {{Ada/kw|begin}}
    Ada.Text_IO.Put_Line (Proportion'Image (To_Proportion (27)));
 {{Ada/kw|end}} Naive_Explicit_Conversion;

Example 2: we use an intermediate floating-point type to guarantee the precision.

 {{Ada/kw|with}} Ada.Text_IO;
 {{Ada/kw|procedure}} Explicit_Conversion {{Ada/kw|is}}
    {{Ada/kw|type}} Proportion {{Ada/kw|is}} {{Ada/kw|digits}} 4 {{Ada/kw|range}} 0.0 .. 1.0;
    {{Ada/kw|type}} Percentage {{Ada/kw|is}} {{Ada/kw|range}} 0 .. 100;
    {{Ada/kw|function}} To_Proportion (P : {{Ada/kw|in}} Percentage) {{Ada/kw|return}} Proportion {{Ada/kw|is}}
       {{Ada/kw|type}} Prop {{Ada/kw|is}} {{Ada/kw|digits}} 4 {{Ada/kw|range}} 0.0 .. 100.0;
    {{Ada/kw|begin}}
       {{Ada/kw|return}} Proportion (Prop (P) / 100.0);
    {{Ada/kw|end}} To_Proportion;
 {{Ada/kw|begin}}
    Ada.Text_IO.Put_Line (Proportion'Image (To_Proportion (27)));
 {{Ada/kw|end}} Explicit_Conversion;

You might ask why you should convert between two subtypes of the same type. An example will illustrate this.

 {{Ada/kw|subtype}} String_10 {{Ada/kw|is}} String (1 .. 10);
 X: String := "A line long enough to make the example valid";
 Slice: {{Ada/kw|constant}} String := String_10 (X (11 .. 20));

Here, &lt;code&gt;Slice&lt;/code&gt; has bounds 1 and 10, whereas &lt;code&gt;X (11 .. 20)&lt;/code&gt; has bounds 11 and 20.

=== Change of Representation ===

Type conversions can be used for packing and unpacking of records or arrays.

 {{Ada/kw|type}} Unpacked {{Ada/kw|is}} {{Ada/kw|record}}
   {{Ada/comment|any components}}
 {{Ada/kw|end}} {{Ada/kw|record}};
 
 {{Ada/kw|type}} Packed {{Ada/kw|is}} {{Ada/kw|new}} Unpacked;
 {{Ada/kw|for}}  Packed {{Ada/kw|use}} {{Ada/kw|record}}
   {{Ada/comment|component clauses for some or for all components}}
 {{Ada/kw|end}} {{Ada/kw|record}};

 P: Packed;
 U: Unpacked;
 
 P := Packed (U);  {{Ada/comment|packs U}}
 U := Unpacked (P);  {{Ada/comment|unpacks P}}

=== Checked conversion for non-numeric types ===

The examples above all revolved around conversions between numeric types; it is possible to convert between any two numeric types in this way.  But what happens between non-numeric types, e.g. between array types or record types?  The answer is two-fold:

* you can convert explicitly between a type and types derived from it, or between types derived from the same type,
* and that's all.  No other conversions are possible.

Why would you want to derive a record type from another record type?  Because of representation clauses.  Here we enter the realm of low-level systems programming, which is not for the faint of heart, nor is it useful for desktop applications.  So hold on tight, and let's dive in.

Suppose you have a record type which uses the default, efficient representation.  Now you want to write this record to a device, which uses a special record format.  This special representation is more compact (uses fewer bits), but is grossly inefficient.  You want to have a layered programming interface: the upper layer, intended for applications, uses the efficient representation.  The lower layer is a device driver that accesses the hardware directly and uses the inefficient representation.

 {{Ada/kw|package}} Device_Driver {{Ada/kw|is}}
    {{Ada/kw|type}} Size_Type {{Ada/kw|is}} {{Ada/kw|range}} 0 .. 64;
    {{Ada/kw|type}} Register {{Ada/kw|is}} {{Ada/kw|record}}
       A, B : Boolean;
       Size : Size_Type;
    {{Ada/kw|end}} {{Ada/kw|record}};
 
    {{Ada/kw|procedure}} Read (R : {{Ada/kw|out}} Register);
    {{Ada/kw|procedure}} Write (R : {{Ada/kw|in}} Register);
 {{Ada/kw|end}} Device_Driver;

The compiler chooses a default, efficient representation for &lt;code&gt;Register&lt;/code&gt;.  For example, on a 32-bit machine, it would probably use three 32-bit words, one for A, one for B and one for Size.  This efficient representation is good for applications, but at one point we want to convert the entire record to just 8 bits, because that's what our hardware requires.

 {{Ada/kw|package}} {{Ada/kw|body}} Device_Driver {{Ada/kw|is}}
    {{Ada/kw|type}} Hardware_Register {{Ada/kw|is}} {{Ada/kw|new}} Register; {{Ada/comment|Derived type.}}
    {{Ada/kw|for}} Hardware_Register {{Ada/kw|use}} {{Ada/kw|record}}
       A {{Ada/kw|at}} 0 {{Ada/kw|range}} 0 .. 0;
       B {{Ada/kw|at}} 0 {{Ada/kw|range}} 1 .. 1;
       Size {{Ada/kw|at}} 0 {{Ada/kw|range}} 2 .. 7;
    {{Ada/kw|end}} {{Ada/kw|record}};
 
    {{Ada/kw|function}} Get {{Ada/kw|return}} Hardware_Register; {{Ada/comment|Body omitted}}
    {{Ada/kw|procedure}} Put (H : {{Ada/kw|in}} Hardware_Register); {{Ada/comment|Body omitted}}
 
    {{Ada/kw|procedure}} Read (R : {{Ada/kw|out}} Register) {{Ada/kw|is}}
       H : Hardware_Register := Get;
    {{Ada/kw|begin}}
       R := Register (H); {{Ada/comment|Explicit conversion.}}
    {{Ada/kw|end}} Read;
 
    {{Ada/kw|procedure}} Write (R : {{Ada/kw|in}} Register) {{Ada/kw|is}}
    {{Ada/kw|begin}}
       Put (Hardware_Register (R)); {{Ada/comment|Explicit conversion.}}
    {{Ada/kw|end}} Write;
 {{Ada/kw|end}} Device_Driver;

In the above example, the package body declares a derived type with the inefficient, but compact representation, and converts to and from it.

This illustrates that '''type conversions can result in a change of representation'''.

=== View conversion, in object-oriented programming ===

Within [[Ada Programming/Object Orientation|object-oriented programming]] you have to distinguish between ''specific'' types and ''class-wide'' types.

With specific types, only conversions in the direction to the root are possible, which of course cannot fail. There are no conversions in the opposite direction &lt;small&gt;(where would you get the further components from?)&lt;/small&gt;; ''extension aggregates'' have to be used instead.

With the conversion itself, no components of the source object that are not present in the target object are lost, they are just hidden from visibility. Therefore, this kind of conversion is called a ''view conversion'' since it provides a view of the source object as an object of the target type (especially it does not change the object's tag).

It is a common idiom in object oriented programming to rename the result of a view conversion. (A renaming declaration does not create a new object; it only gives a new name to something that already exists.)

 {{Ada/kw|type}} Parent_Type {{Ada/kw|is}} {{Ada/kw|tagged}} {{Ada/kw|record}}
    &lt;components&gt;;
 {{Ada/kw|end}} {{Ada/kw|record}};
 {{Ada/kw|type}} Child_Type {{Ada/kw|is}} {{Ada/kw|new}} Parent_Type {{Ada/kw|with}} {{Ada/kw|record}}
    &lt;further components&gt;;
 {{Ada/kw|end}} {{Ada/kw|record}};
 
 Child_Instance : Child_Type;
 Parent_View    : Parent_Type {{Ada/kw|renames}} Parent_Type (Child_Instance);
 Parent_Part    : Parent_Type := Parent_Type (Child_Instance);

&lt;code&gt;Parent_View&lt;/code&gt; is not a new object, but another name for &lt;code&gt;Child_Instance&lt;/code&gt; viewed as the parent, i.e. only the parent components are visible, the child-specific components are hidden. &lt;code&gt;Parent_Part&lt;/code&gt;, however, is an object of the parent type, which of course has no storage for the child-specific components, so they are lost with the assignment.

All types derived from a tagged type &lt;code&gt;T&lt;/code&gt; form a tree rooted at &lt;code&gt;T&lt;/code&gt;. The class-wide type &lt;code&gt;T'Class&lt;/code&gt; can hold any object within this tree. With class-wide types, conversions in any direction are possible; there is a run-time tag check that raises &lt;code&gt;Constraint_Error&lt;/code&gt; if the check fails. These conversions are also view conversions, no data is created or lost.

 Object_1 : Parent_Type'{{Ada/attribute|Class}} := Parent_Type'{{Ada/attribute|Class}} (Child_Instance);
 Object_2 : Parent_Type'{{Ada/attribute|Class}} {{Ada/kw|renames}} Parent_Type'{{Ada/attribute|Class}} (Child_Instance);

&lt;code&gt;Object_1&lt;/code&gt; is a new object, a copy; &lt;code&gt;Object_2&lt;/code&gt; is just a new name. Both objects are of the class-wide type. Conversions to any type within the given class are legal, but are tag-checked.

 Success : Child_Type := Child_Type (Parent_Type'Class (Parent_View));
 Failure : Child_Type := Child_Type (Parent_Type'Class (Parent_Part));

The first conversion passes the tag check and both objects &lt;code&gt;Child_Instance&lt;/code&gt; and &lt;code&gt;Success&lt;/code&gt; are equal. The second conversion fails the tag check. &lt;small&gt;(Conversion assignments of this kind will rarely be used; dispatching will do this automatically, see [[Ada Programming/Object Orientation|object oriented programming]].)&lt;/small&gt;

You can perform these checks yourself with membership tests:

 {{Ada/kw|if}} Parent_View {{Ada/kw|in|}} Child_Type {{Ada/kw|then|}} ...
 {{Ada/kw|if}} Parent_View {{Ada/kw|in|}} Child_Type'{{Ada/kw|Class}} {{Ada/kw|then|}} ...

There is also the package &lt;code&gt;Ada.Tags&lt;/code&gt;.

=== Address conversion ===

Ada's [[Ada Programming/Types/access|access type]] is not just a memory location (a thin pointer). Depending on implementation and the [[Ada Programming/Types/access|access type]] used, the [[Ada Programming/Types/access|access]] might keep additional information (a fat pointer). For example GNAT keeps two memory addresses for each [[Ada Programming/Types/access|access]] to an indefinite object &amp;mdash; one for the data and one for the constraint informations &lt;small&gt;({{Ada/attribute|Size}}, {{Ada/attribute|First}}, {{Ada/attribute|Last}}'')&lt;/small&gt;.

If you want to convert an access to a simple memory location you can use the package &lt;code&gt;{{Ada/package|System|Address_To_Access_Conversions}}&lt;/code&gt;.
Note however that an address and a fat pointer cannot be converted reversibly into one another.

The address of an array object is the address of its first component. Thus the bounds get lost in such a conversion.

 {{Ada/kw|type}} My_Array {{Ada/kw|is}} {{Ada/kw|array}} (Positive {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} Something;
 A: My_Array (50 .. 100);
 
      A'{{Ada/attribute|Address}} = A(A'{{Ada/attribute|First}})'{{Ada/attribute|Address}}

=== Unchecked conversion ===

One of the great criticisms of Pascal was "there is no escape". The reason was that sometimes you have to convert the incompatible. For this purpose, Ada has the generic function ''Unchecked_Conversion'':

 {{Ada/kw|generic}}
    {{Ada/kw|type}} Source (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}};
    {{Ada/kw|type}} Target (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}};
 {{Ada/kw|function}} {{Ada/package|Ada|Unchecked_Conversion}} (S : Source) {{Ada/kw|return}} Target;

&lt;code&gt;''Unchecked_Conversion''&lt;/code&gt; will bit-copy the source data and reinterpret them under the target type without any checks. It is '''your''' chore to make sure that the requirements on unchecked conversion as stated in RM {{Ada/RM2|13|9|}} are fulfilled; if not, the result is implementation dependent and may even lead to abnormal data. Use the 'Valid attribute after the conversion to check the validity of the data in problematic cases.

A function call to (an instance of) &lt;code&gt;Unchecked_Conversion&lt;/code&gt; will copy the source to the destination. The compiler may also do a conversion ''in place'' (every instance has the convention ''Intrinsic'').

To use &lt;code&gt;Unchecked_Conversion&lt;/code&gt; you need to instantiate the generic.

In the example below, you can see how this is done. When run, the example will output &lt;code&gt;A = -1, B = 255&lt;/code&gt;. No error will be reported, but is this the result you expect?

 {{Ada/Sourceforge|convert_unchecked.adb}}
 
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 {{Ada/kw|with}} {{Ada/package|Ada|Unchecked_Conversion}};
 
 {{Ada/kw|procedure}} Convert_Unchecked {{Ada/kw|is}}
 
    {{Ada/kw|type}} Short {{Ada/kw|is}} {{Ada/kw|range}} -128 .. +127;
    {{Ada/kw|type}} Byte  {{Ada/kw|is}} {{Ada/kw|mod}} 256;
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} {{Ada/package|Ada|Text_IO}};
    {{Ada/kw|package}} I_IO {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada|Text_IO|Integer_IO}} (Short);
    {{Ada/kw|package}} M_IO {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada|Text_IO|Modular_IO}} (Byte);
 
    {{Ada/kw|function}} Convert {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada|Unchecked_Conversion}} (Source =&gt; Short,
                                                      Target =&gt; Byte);
 
    A : {{Ada/kw|constant}} Short := -1;
    B : Byte;
 
 {{Ada/kw|begin}}
 
    B := Convert (A);
    T_IO.Put ("A = ");
    I_IO.Put (Item  =&gt;  A,
              Width =&gt;  5,
              Base  =&gt; 10);
    T_IO.Put (", B = ");
    M_IO.Put (Item  =&gt;  B,
              Width =&gt;  5,
              Base  =&gt; 10);
 
 {{Ada/kw|end}} Convert_Unchecked;

There is of course a range check in the assignment &lt;code&gt;B := Convert (A);&lt;/code&gt;. Thus if &lt;code&gt;B&lt;/code&gt; were defined as &lt;code&gt;B: Byte {{Ada/kw|range}} 0 .. 10;&lt;/code&gt;, &lt;code&gt;Constraint_Error&lt;/code&gt; would be raised.

=== Overlays ===

If the copying of the result of &lt;code&gt;Unchecked_Conversion&lt;/code&gt; is too much waste in terms of performance, then you can try overlays, i.e. address mappings. By using overlays, both objects share the same memory location. If you assign a value to one, the other changes as well. The syntax is:

 {{Ada/kw|for}} Target'{{Ada/attribute|Address}} {{Ada/kw|use}} ''expression'';
 {{Ada/pragma|Import}} (Ada, Target);

where ''expression'' defines the address of the source object.

While overlays might look more elegant than &lt;code&gt;Unchecked_Conversion&lt;/code&gt;, you should be aware that they are even more dangerous and have even greater potential for doing something very wrong. For example if &lt;code&gt;Source'{{Ada/attribute|Size}} &lt; Target'{{Ada/attribute|Size}}&lt;/code&gt; and you assign a value to Target, you might inadvertently write into memory allocated to a different object.

You have to take care also of implicit initializations of objects of the target type, since they would overwrite the actual value of the source object. The Import pragma with convention Ada can be used to prevent this, since it avoids the implicit initialization, RM {{Ada/RM2|B|1|}}.

The example below does the same as the example from "Unchecked Conversion".

 {{Ada/Sourceforge|convert_address_mapping.adb}}
 
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 
 {{Ada/kw|procedure}} Convert_Address_Mapping {{Ada/kw|is}}
    {{Ada/kw|type}} Short {{Ada/kw|is}} {{Ada/kw|range}} -128 .. +127;
    {{Ada/kw|type}} Byte  {{Ada/kw|is}} {{Ada/kw|mod}} 256;
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} {{Ada/package|Ada|Text_IO}};
    {{Ada/kw|package}} I_IO {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada|Text_IO|Integer_IO}} (Short);
    {{Ada/kw|package}} M_IO {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada|Text_IO|Modular_IO}} (Byte);
 
    A : {{Ada/kw|aliased}} Short;
    B : {{Ada/kw|aliased}} Byte;
   
    {{Ada/kw|for}} B'{{Ada/attribute|Address}} {{Ada/kw|use}} A'{{Ada/attribute|Address}};
   {{Ada/pragma|Import}} (Ada, B);
   
 {{Ada/kw|begin}}
    A := -1;
    T_IO.Put ("A = ");
    I_IO.Put (Item  =&gt;  A,
              Width =&gt;  5,
              Base  =&gt; 10);
    T_IO.Put (", B = ");
    M_IO.Put (Item  =&gt;  B,
              Width =&gt;  5,
              Base  =&gt; 10);
 {{Ada/kw|end}} Convert_Address_Mapping;

=== Export / Import ===

Just for the record: There is still another method using the {{Ada/pragma name|Export}} and {{Ada/pragma name|Import}} pragmas. However, since this method completely undermines Ada's visibility and type concepts even more than overlays, it has no place here in this language introduction and is left to experts.

== Elaborated Discussion of Types for Signed Integer Types ==

As explained before, a type declaration

 {{Ada/kw|type}} T {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 10;

declares an anonymous type &lt;code&gt;''T''&lt;/code&gt; and its first subtype &lt;code&gt;T&lt;/code&gt; (please note the italicization). &lt;code&gt;''T''&lt;/code&gt; encompasses the complete set of mathematical integers. Static expressions and named numbers make use of this fact.

All numeric integer literals are of type &lt;code&gt;Universal_Integer&lt;/code&gt;. They are converted to the appropriate specific type where needed. &lt;code&gt;Universal_Integer&lt;/code&gt; itself has no operators.

Some examples with static named numbers:

  S1: {{Ada/kw|constant}} := Integer'{{Ada/at|Last}} + Integer'{{Ada/at|Last}};       {{Ada/--|"+" of Integer}}
  S2: {{Ada/kw|constant}} := Long_Integer'{{Ada/at|Last}} + 1;             {{Ada/--|"+" of Long_Integer}}
  S3: {{Ada/kw|constant}} := S1 + S2;                           {{Ada/--|"+" of root_integer}}
  S4: {{Ada/kw|constant}} := Integer'{{Ada/at|Last}} + Long_Integer'{{Ada/at|Last}};  {{Ada/--|illegal}}

Static expressions are evaluated at compile-time on the appropriate types with no overflow checks, i.e. mathematically exact (only limited by computer store). The result is then implicitly converted to &lt;code&gt;Universal_Integer&lt;/code&gt;.

The literal 1 in &lt;code&gt;S2&lt;/code&gt; is of type &lt;code&gt;Universal_Integer&lt;/code&gt; and implicitly converted to &lt;code&gt;Long_Integer&lt;/code&gt;.

&lt;code&gt;S3&lt;/code&gt; implicitly converts the summands to &lt;code&gt;root_integer&lt;/code&gt;, performs the calculation and converts back to &lt;code&gt;Universal_Integer&lt;/code&gt;.

&lt;code&gt;S4&lt;/code&gt; is illegal because it mixes two different types. You can however write this as

  S5: {{Ada/kw|constant}} := Integer'Pos (Integer'{{Ada/at|Last}}) + Long_Integer'Pos (Long_Integer'{{Ada/at|Last}});  {{Ada/--|"+" of root_integer}}

where the Pos attributes convert the values to &lt;code&gt;Universal_Integer&lt;/code&gt;, which are then further implicitly converted to &lt;code&gt;root_integer&lt;/code&gt;, added and the result converted back to &lt;code&gt;Universal_Integer&lt;/code&gt;.

&lt;code&gt;root_integer&lt;/code&gt; is the anonymous greatest integer type representable by the hardware. It has the range &lt;code&gt;System.Min_Integer .. System.Max_Integer&lt;/code&gt;. All integer types are rooted at &lt;code&gt;root_integer&lt;/code&gt;, i.e. derived from it. &lt;code&gt;Universal_Integer&lt;/code&gt; can be viewed as &lt;code&gt;root_integer'Class&lt;/code&gt;.

During run-time, computations of course are performed with range checks and overflow checks on the appropriate subtype. Intermediate results may however exceed the range limits. Thus with &lt;code&gt;I, J, K&lt;/code&gt; of the subtype &lt;code&gt;T&lt;/code&gt; above, the following code will return the correct result:

 I := 10;
 J :=  8;
 K := (I + J) - 12;
 {{Ada/--|1= I := I + J;  -- range check would fail, leading to Constraint_Error}}

Real literals are of type &lt;code&gt;Universal_Real&lt;/code&gt;, and similar rules as the ones above apply accordingly.

== Relations between types ==

Types can be made from other types. Array types, for example, are made from two types, one for the arrays' index and one for the arrays' components. An array, then, expresses an association, namely that between one value of the index type and a value of the component type.

  {{Ada/keyword|type}} Color {{Ada/keyword|is}} (Red, Green, Blue);
  {{Ada/keyword|type}} Intensity {{Ada/keyword|is}} {{Ada/keyword|range}} 0 .. 255;
  
  {{Ada/keyword|type}} Colored_Point {{Ada/keyword|is}} {{Ada/keyword|array}} (Color) {{Ada/keyword|of}} Intensity;

The type &lt;tt&gt;Color&lt;/tt&gt; is the index type and the type &lt;tt&gt;Intensity&lt;/tt&gt; is the component type of the array type &lt;tt&gt;Colored_Point&lt;/tt&gt;. See [[Ada Programming/Types/array|array]].

== See also ==

=== Wikibook ===

* [[Ada Programming]]

=== Ada Reference Manual ===

* {{Ada/RM3|3|2|1|Type Declarations}}
* {{Ada/RM2|3|3|Objects and Named Numbers}}
* {{Ada/RM2|3|7|Discriminants}}
* {{Ada/RM2|3|10|Access Types}}
* {{Ada/RM2|4|9|Static Expressions and Static Subtypes}}
* {{Ada/RM2|13|9|Unchecked Type Conversions}}
* {{Ada/RM2|13|3|Operational and Representation Attributes}}
* {{Ada/RMA1|K|(informative) Language-Defined Attributes}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Type System]]
[[es:Programación en Ada/Tipos]]
&lt;/noinclude&gt;</text>
      <sha1>7abyrc0ximz7bg59miw3pvm323iwuz6</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Types/Enumeration</title>
    <ns>0</ns>
    <id>19211</id>
    <revision>
      <id>3598710</id>
      <parentid>3424907</parentid>
      <timestamp>2019-11-19T18:45:41Z</timestamp>
      <contributor>
        <ip>147.105.3.202</ip>
      </contributor>
      <comment>/* Enumeration literals */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6998" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Types|Enumeration}}
__TOC__
&lt;/noinclude&gt;
An '''enumeration''' type is defined as a list of possible values:

  {{Ada/kw|type}} Primary_Color {{Ada/kw|is}} (Red, Green, Blue);

Like for numeric types, where e.g. 1 is an integer literal, Red, Green and Blue are called the literals of this type. There are no other values assignable to objects of this type.

== Operators and attributes ==

Apart from equality ("="), the only operators on enumeration types are the ordering [[Ada Programming/Operators|operators]]: "&lt;", "&lt;=", "=", "/=", "&gt;=", "&gt;", where the order relation is given implicitly by the sequence of literals: Each literal has a position, starting with 0 for the first, incremented by one for each successor. This position can be queried via the 'Pos [[Ada Programming/Attributes|attribute]]; the inverse is 'Val, which returns the corresponding literal. In our example:

 Primary_Color'{{Ada/attribute|Pos}} (Red) = 0
 Primary_Color'{{Ada/attribute|Val}} (0)   = Red

There are two other important attributes: {{Ada/attribute|Image}} and {{Ada/attribute|Value}} (don't confuse {{Ada/attribute|Val}} with {{Ada/attribute|Value}}). {{Ada/attribute|Image}} returns the string representation of the value (in capital letters), {{Ada/attribute|Value}} is the inverse:

 Primary_Color'{{Ada/attribute|Image}} ( Red ) = "RED"
 Primary_Color'{{Ada/attribute|Value}} ("Red") =  Red

These attributes are important for simple [[Ada Programming/Input Output|IO]] (there are more elaborate IO facilities in {{Ada/package|Ada|Text_IO}} for enumeration types). Note that, since Ada is case-insensitive, the string given to 'Value can be in any case.

== Enumeration literals ==
Literals are overloadable, i.e. you can have another type with the same literals.

 {{Ada/kw|type}} Traffic_Light {{Ada/kw|is}} (Red, Yellow, Green);

Overload resolution within the context of use of a literal normally resolves which Red is meant. Only if you have an unresolvable overloading conflict, you can qualify with special syntax which Red is meant:

 Primary_Color'(Red)

Like many other declarative items, enumeration literals can be renamed. In fact, such a literal is actually a [[Ada Programming/Subprograms#Functions|function]], so it has to be renamed as such:

 {{Ada/kw|function}} Red {{Ada/kw|return}} P.Primary_Color {{Ada/kw|renames}} P.Red;

Here, Primary_Color is assumed to be defined in package P, which is visible at the place of the renaming declaration. Renaming makes Red directly visible without necessity to resort the use-clause.

Note that redeclaration as a function does not affect the staticness of the literal.

=== Characters as enumeration literals ===
Rather unique to Ada is the use of character literals as enumeration literals:

  {{Ada/kw|type}} ABC {{Ada/kw|is}} ('A', 'B', 'C');

This literal 'A' has '''nothing''' in common with the literal 'A' of the predefined type Character (or Wide_Character).

Every type that has at least one character literal is a character type. For every character type, string literals and the concatenation [[Ada Programming/Delimiters/&amp;|operator "&amp;"]] are also implicitly defined.

 {{Ada/kw|type}} My_Character {{Ada/kw|is}} (No_Character, 'a', Literal, 'z');
 {{Ada/kw|type}} My_String {{Ada/kw|is}} {{Ada/kw|array}} (Positive {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} My_Character;
 
 S: My_String := "aa" &amp; Literal &amp; "za" &amp; 'z';
 T: My_String := ('a', 'a', Literal, 'z', 'a', 'z');

In this example, S and T have the same value.

Ada's Character type is defined that way. See [[Ada Programming/Libraries/Standard]].

=== Booleans as enumeration literals ===

Also Booleans are defined as enumeration types:

  {{Ada/kw|type}} Boolean {{Ada/kw|is}} (False, True);

There is special semantics implied with this declaration in that objects and expressions of this type can be used as conditions. Note that the literals False and True are not Ada keywords.

Thus it is not sufficient to declare a type with these literals and then hope objects of this type can be used like so:

  {{Ada/kw|type}} My_Boolean {{Ada/kw|is}} (False, True);
  Condition: My_Boolean;
 
  {{Ada/kw|if}} Condition {{Ada/kw|then}}—wrong, won't compile

If you need your own Booleans (perhaps with special size requirements), you have to derive from the predefined Boolean:

  {{Ada/kw|type}} My_Boolean {{Ada/kw|is}} {{Ada/kw|new}} Boolean;
  Condition: My_Boolean;
 
  {{Ada/kw|if}} Condition {{Ada/kw|then}}—OK

== Enumeration subtypes ==

You can use &lt;tt&gt;{{Ada/kw|range}}&lt;/tt&gt; to subtype an enumeration type:

  {{Ada/kw|subtype}} Capital_Letter {{Ada/kw|is}} Character {{Ada/kw|range}} 'A' .. 'Z';

  {{Ada/kw|type}} Day_Of_Week {{Ada/kw|is}} (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);
  
  {{Ada/kw|subtype}} Working_Day {{Ada/kw|is}} Day_Of_Week {{Ada/kw|range}} Monday .. Friday;

== Using enumerations ==

Enumeration types being scalar subtypes, type attributes such as &lt;tt&gt;First&lt;/tt&gt; and &lt;tt&gt;Succ&lt;/tt&gt; will allow stepping through a subsequence of the values.

      {{Ada/kw|case}} Day_Of_Week{{Ada/delimiter|'}}{{Ada/attribute|First}} {{Ada/kw|is}}
         {{Ada/kw|when}} Sunday {{Ada/delimiter|1=arrow|2==&gt;}}
            ISO (False);
         {{Ada/kw|when}} Day_Of_Week{{Ada/delimiter|'}}{{Ada/attribute|Succ}} (Sunday) {{Ada/delimiter|1=arrow|2==&gt;}}
            ISO (True);
         {{Ada/kw|when}} Tuesday .. Saturday {{Ada/delimiter|1=arrow|2==&gt;}}
            {{Ada/kw|raise}} Program_Error;
      {{Ada/kw|end}} {{Ada/kw|case}};

A loop will automatically step through the values of the subtype's range. Filtering week days to include only working days with an even position number:

      {{Ada/kw|for}} Day {{Ada/kw|in}} Working_Day {{Ada/kw|loop}}
         {{Ada/kw|if}} Day_Of_Week{{Ada/delimiter|'}}{{Ada/attribute|Pos}} (Day) {{Ada/kw|mod}} 2 {{Ada/operator|1==}} 0 {{Ada/kw|then}}
            Work_In_Backyard;
         {{Ada/kw|end}} {{Ada/kw|if}};
      {{Ada/kw|end}} {{Ada/kw|loop}};

Enumeration types can be used as array index subtypes, yielding a table feature:

   {{Ada/kw|type}} Officer_ID {{Ada/kw|is}} {{Ada/kw|range}} 0 .. 50;
   {{Ada/kw|type}} Schedule {{Ada/kw|is}} {{Ada/kw|array}} (Working_Day) {{Ada/kw|of}} Officer_ID;

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Types]]
* [[Ada Programming/Libraries/Standard]]
* [[Ada_Programming/Attributes/'First]]
* [[Ada_Programming/Attributes/'Last]]
* [[Ada_Programming/Attributes/'Pred]]
* [[Ada_Programming/Attributes/'Succ]]
* [[Ada_Programming/Attributes/'Img]]
* [[Ada_Programming/Attributes/'Image]]
* [[Ada_Programming/Attributes/'Value]]
* [[Ada_Programming/Attributes/'Pos]]
* [[Ada_Programming/Attributes/'Val]]
* [[Ada_Programming/Attributes/'Enum_Rep]]
* [[Ada_Programming/Attributes/'Enum_Val]]

=== Ada Reference Manual ===

* {{Ada/RM3|3|5|1|Enumeration Types}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Enumeration]]

&lt;/noinclude&gt;

[[es:Programación en Ada/Tipos/Enumeraciones]]</text>
      <sha1>d0fktxt7iautwh7hb1apcpqw4d2wxhr</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Types/access</title>
    <ns>0</ns>
    <id>19283</id>
    <revision>
      <id>3570250</id>
      <parentid>3459509</parentid>
      <timestamp>2019-09-08T14:03:17Z</timestamp>
      <contributor>
        <username>Neils51</username>
        <id>2133188</id>
      </contributor>
      <minor/>
      <comment>/* Constructing Reference Counting Pointers */  sp</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="25398" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Types|access}}
__TOC__&lt;/noinclude&gt;

== What's an Access Type? ==

Access types in Ada are what other languages call pointers. They point to objects located at certain addresses. So normally one can think of access types as simple addresses (there are exceptions from this simplified view). Ada instead of saying ''points to'' talks of ''granting access to'' or ''designating'' an object.

Objects of access types are implicitly initialized with {{Ada/kw|null}}, i.e. they point to nothing when not explicitly initialized.

Access types should be used rarely in Ada. In a lot of circumstances where pointers are used in other languages, there are other ways without pointers. If you need dynamic data structures, first check whether you can use the Ada Container library. Especially for indefinite record or array components, the Ada 2012 package Indefinite_Holders (RM {{Ada/RM|A|18|18}}) can be used instead of pointers.

There are four kinds of access types in Ada: Pool access types - General access types - Anonymous access types - Access to subprogram types.

== Pool access ==

A ''pool access type'' handles accesses to objects which were created on some specific heap (or storage pool as it is called in Ada). A pointer of these types cannot point to a stack or library level (static) object or an object in a different storage pool. Therefore, conversion between pool access types is illegal. (Unchecked_Conversion may be used, but note that deallocation via an access object with a storage pool different from the one it was allocated with is erroneous.)

 {{Ada/kw|type}} Person {{Ada/kw|is}} {{Ada/kw|record}}
   First_Name : String (1..30);
   Last_Name  : String (1..20);
 {{Ada/kw|end}} {{Ada/kw|record}};
 
 {{Ada/kw|type}} Person_Access {{Ada/kw|is}} {{Ada/kw|access}} Person;

A size clause may be used to limit the corresponding (implementation defined anonymous) storage pool. A size clause of 0 disables calls of an allocator.

 {{Ada/kw|for}} Person_Access'{{Ada/kw|Size}} {{Ada/kw|use}} 0;

The storage pool is implementation defined if not specified. Ada supports user defined storage pools, so you can define the storage pool with

 {{Ada/kw|for}} Person_Access'{{Ada/attribute|Storage_Pool}} {{Ada/kw|use}} Pool_Name;

Objects in a storage pool are created with the keyword {{Ada/kw|new}}:

 Father: Person_Access := {{Ada/kw|new}} Person;                                          -- uninitialized
 Mother: Person_Access := {{Ada/kw|new}} Person'(Mothers_First_Name, Mothers_Last_Name);  -- initialized

You access the object in the storage pool by appending &lt;code&gt;.{{Ada/kw|all}}&lt;/code&gt;. &lt;code&gt;Mother.{{Ada/kw|all}}&lt;/code&gt; is the complete record; components are denoted as usual with the dot notation: &lt;code&gt;Mother.{{Ada/kw|all}}.First_Name&lt;/code&gt;. When accessing components, ''implicit dereferencing'' (i.e. omitting {{Ada/kw|all}}) can serve as a convenient shorthand:

 Mother.{{Ada/kw|all}} := (Last_Name =&gt; Father.Last_Name, First_Name =&gt; Mother.First_Name);  -- marriage

Implicit dereferencing also applies to arrays:

   {{Ada/kw|type}} Vector {{Ada/kw|is}} {{Ada/kw|array}} (1 .. 3) {{Ada/kw|of}} Complex;
   {{Ada/kw|type}} Vector_Access {{Ada/kw|is}} {{Ada/kw|access}} Vector;
 
   VA: Vector_Access := {{Ada/kw|new}} Vector;
   VB: {{Ada/kw|array}} (1 .. 3) {{Ada/kw|of}} Vector_Access := ({{Ada/kw|others}} =&gt; {{Ada/kw|new}} Vector);
 
   C1: Complex := VA (3);    -- a shorter equivalent for VA   .{{Ada/kw|all}} (3)
   C2: Complex := VB (3)(1); -- a shorter equivalent for VB(3).{{Ada/kw|all}} (1)

Be careful to discriminate between deep and shallow copies when copying with access objects:

 Obj1.{{Ada/kw|all}} := Obj2.{{Ada/kw|all}};  -- Deep copy: Obj1 still refers to an object different from Obj2, but it has the same content
 Obj1 := Obj2;          -- Shallow copy: Obj1 now refers to the same object as Obj2

=== Deleting objects from a storage pool ===

Although the Ada standard mentions a garbage collector, which would automatically remove all unneeded objects that have been created on the heap (when no storage pool has been defined), only Ada compilers targeting a virtual machine like Java or .NET actually have garbage collectors. &lt;s&gt;There is also a &lt;code&gt;{{Ada/kw|pragma}} Controlled&lt;/code&gt;, which, when applied to such an access type, prevents automatic garbage collection of objects created with it.&lt;/s&gt; Note that &lt;code&gt;{{Ada/kw|pragma}} Controlled&lt;/code&gt; will be dropped from Ada 2012, subpools for storage management replacing it. See RM 2012 {{Ada/2012/RM|13|11|3}} and {{Ada/2012/RM|13|11|4}}.

Therefore in order to delete an object from the heap, you need the generic unit {{Ada/package|Ada|Unchecked_Deallocation}}. Apply utmost care to not create dangling pointers when deallocating objects as is shown in the example below. (And note that deallocating objects with a different access type than the one with which they were created is erroneous when the corresponding storage pools are different.)

 {{Ada/kw|with}} {{Ada/package|Ada|Unchecked_Deallocation}};
 
 {{Ada/kw|procedure}} Deallocation_Sample {{Ada/kw|is}}
 
    {{Ada/kw|type}} Vector     {{Ada/kw|is}} {{Ada/kw|array}} (Integer {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} Float;
    {{Ada/kw|type}} Vector_Ref {{Ada/kw|is}} {{Ada/kw|access}} Vector;
 
    {{Ada/kw|procedure}} Free_Vector {{Ada/kw|is}} {{Ada/kw|new}} {{Ada/package|Ada|Unchecked_Deallocation}}
       (Object =&gt; Vector, Name =&gt; Vector_Ref);
   
    VA, VB: Vector_Ref;
    V     : Vector;
 
 {{Ada/kw|begin}}
 
    VA     := {{Ada/kw|new}} Vector (1 .. 10);
    VB     := VA;  -- points to the same location as VA
 
    VA.{{Ada/kw|all}} := ({{Ada/kw|others}} =&gt; 0.0);
 
    --  ... Do whatever you need to do with the vector
 
    Free_Vector (VA); -- The memory is deallocated and VA is now null
 
    V := VB.all;  -- VB is not null, access to a dangling pointer is erroneous
 
 {{Ada/kw|end}} Deallocation_Sample;

It is exactly because of this problem with dangling pointers that the deallocation operation is called '''unchecked'''. It is the chore of the programmer to take care that this does not happen.

Since Ada allows for user defined storage pools, you could also try a [[Ada Programming/Libraries/MultiPurpose/AdaCL#Garbage Collector|garbage collector library]].

=== Constructing Reference Counting Pointers ===

You can find some implementations of reference counting pointers, called ''Safe'' or ''Smart Pointers'', on the net. Using such a type prevents caring about deallocation, since this will automatically be done when there are no more pointers to an object. But be careful - most of those implementations do not prevent deliberate deallocation, thus undermining the alleged safety attained with their use.

A nice tutorial how to construct such a type can be found in a series of Gems on the AdaCore web site.

[http://www.adacore.com/2011/01/17/gem-97-reference-counting-in-ada-part-1/ Gem #97: Reference Counting in Ada – Part 1] This little gem constructs a simple reference counted pointer that does not prevent deallocation, i.e. is inherently unsafe.

[http://www.adacore.com/2011/06/06/gem-107-preventing-deallocation-for-reference-counted-types/ Gem #107: Preventing Deallocation for Reference-counted Types] This further gem describes how to arrive at a pointer type whose safety cannot be compromised (tasking issues aside). The cost of this improved safety is awkward syntax.

[http://www.adacore.com/adaanswers/gems/gem-123-implicit-dereferencing-in-ada-2012/ Gem #123: Implicit Dereferencing in Ada 2012] This gem shows how to simplify the syntax with the new Ada 2012 generation. (Admittedly, this gem is a bit unrelated to reference counting since the new language feature can be applied to any kind of container.)

== General access ==

''General access types'' grant access to objects created on any storage pool, on the stack or at library level (static). They come in two versions, granting either read-write access or read-only access. Conversions between general access types are allowed, but subject to certain access level checks.

Dereferencing is like for pool access types. Objects (other than pool objects) to be referenced have to be declared {{Ada/kw|aliased}}, and references to them are created with the attribute &lt;code&gt;'Access&lt;/code&gt;. Access level restrictions prevent accesses to objects from outliving the accessed object, which would make the program erroneous. The attribute &lt;code&gt;'Unchecked_Access&lt;/code&gt; omits the corresponding checks.

=== Access to Variable ===

When the keyword {{Ada/kw|all}} is used in their definition, they grant read-write access.

 {{Ada/kw|type}} Day_Of_Month {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 31;            
 {{Ada/kw|type}} Day_Of_Month_Access {{Ada/kw|is}} {{Ada/kw|access}} {{Ada/kw|all}} Day_Of_Month;

=== Access to Constant ===

General access types granting read-only access to the referenced object use the keyword {{Ada/kw|constant}} in their definition. The referenced object may be a constant or a variable.

 {{Ada/kw|type}} Day_Of_Month {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 31;            
 {{Ada/kw|type}} Day_Of_Month_Access {{Ada/kw|is}} {{Ada/kw|access}} {{Ada/kw|constant}} Day_Of_Month;

=== Some examples ===

  {{Ada/kw|type}} General_Pointer  {{Ada/kw|is}} {{Ada/kw|access}} {{Ada/kw|all}}      Integer;
  {{Ada/kw|type}} Constant_Pointer {{Ada/kw|is}} {{Ada/kw|access}} {{Ada/kw|constant}} Integer;
 
  I1: {{Ada/kw|aliased}} {{Ada/kw|constant}} Integer := 10;
  I2: {{Ada/kw|aliased}} Integer;
 
  P1: General_Pointer  := I1'{{Ada/attribute|Access}};  -- illegal
  P2: Constant_Pointer := I1'{{Ada/attribute|Access}};  -- OK, read only
  P3: General_Pointer  := I2'{{Ada/attribute|Access}};  -- OK, read and write
  P4: Constant_Pointer := I2'{{Ada/attribute|Access}};  -- OK, read only
 
  P5: {{Ada/kw|constant}} General_Pointer := I2'Access;  -- read and write only to I2

== Anonymous access ==

Also ''Anonymous access types'' come in two versions like general access types, granting either read-write access or read-only access depending on whether the keyword {{Ada/kw|constant}} appears.

An anonymous access can be used as a parameter to a subprogram or as a discriminant. Here are some examples:

 {{Ada/kw|procedure}} Modify (Some_Day: {{Ada/kw|access}}          Day_Of_Month);
 {{Ada/kw|procedure}} Test   (Some_Day: {{Ada/kw|access}} {{Ada/kw|constant}} Day_Of_Month);  -- Ada 2005 only

 {{Ada/kw|task}} {{Ada/kw|type}} Thread (Execute_For_Day: {{Ada/kw|access}} Day_Of_Month) {{Ada/kw|is}}
    ...
 {{Ada/kw|end}} Thread;

 {{Ada/kw|type}} Day_Data (Store_For_Day: {{Ada/kw|access}} Day_Of_Month) {{Ada/kw|is}} {{Ada/kw|record}}
   -- components
 {{Ada/kw|end}} {{Ada/kw|record}};

Before using an anonymous access, you should consider a named access type or, even better, consider if the "{{Ada/kw|out}}" or "{{Ada/kw|in}} {{Ada/kw|out}}" modifier is not more appropriate.

{{Ada/2005|Access}}

In Ada 2005, anonymous accesses are allowed in more circumstances:

 {{Ada/kw|type}} Object {{Ada/kw|is}} {{Ada/kw|record}}
   M   : Integer;
   Next: {{Ada/kw|access}} Object;
 {{Ada/kw|end}} {{Ada/kw|record}};
 
 X: {{Ada/kw|access}} Integer;
 
 {{Ada/kw|function}} F {{Ada/kw|return}} {{Ada/kw|access}} {{Ada/kw|constant}} Float;

== Implicit Dereference ==
Ada 2012 will simplify accesses to objects via pointers with new syntax.

Imagine you have a container holding some kind of elements.

 {{Ada/kw|type}} Container   {{Ada/kw|is}} {{Ada/kw|private}};
 {{Ada/kw|type}} Element_Ptr {{Ada/kw|is}} {{Ada/kw|access}} Element;
 
 {{Ada/kw|procedure}} Put (X: Element; Into: {{Ada/kw|in}} {{Ada/kw|out}} Container);

Now how do you access elements stored in the container. Of course you can retrieve them by

 {{Ada/kw|function}} Get (From: Container) {{Ada/kw|return}} Element;

This will however copy the element, which is unfortunate if the element is big. You get direct access with

 {{Ada/kw|function}} Get (From: Container) {{Ada/kw|return}} Element_Ptr;

Now pointers are dangerous since you might easily create dangling pointers like so:

 P: Element_Ptr := Get (Cont);
 P.{{Ada/kw|all}} := E;
 Free (P);
 ... Get (Cont) -- this is now a dangling pointer

Use of an accessor object instead of an access type can prevent inadvertant deallocation (this is still Ada 2005):

 {{Ada/kw|type}} Accessor (Data: {{Ada/kw|not}} {{Ada/kw|null}} {{Ada/kw|access}} Element) {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}};  -- read/write access
 {{Ada/kw|function}} Get (From: Container) {{Ada/kw|return}} Accessor;

(For the null exclusion {{Ada/kw|not}} {{Ada/kw|null}} in the declaration of the discriminant, see below). Access via such an accessor is safe: The discriminant can only be used for dereferencing, it cannot be copied to an object of type Element_Ptr because its accessibility level is deeper. In the form above, the accessor provides read and write access. If the keyword {{Ada/kw|constant}} is added, only read access is possible.

 {{Ada/kw|type}} Accessor (Data: {{Ada/kw|not}} {{Ada/kw|null}} {{Ada/kw|access}} {{Ada/kw|constant}} Element) {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}};  -- only read access

Access to the container object now looks like so:

 Get (Cont).{{Ada/kw|all}}      := E;  -- via access type: dangerous
 Get (Cont).Data.{{Ada/kw|all}} := E;  -- via accessor: safe, but ugly

Here the new Ada 2012 feature of ''aspects'' comes along handy; for the case at hand, the aspect ''Implicit_Dereference'' is the one we need:

 {{Ada/kw|type}} Accessor (Data: {{Ada/kw|not}} {{Ada/kw|null}} {{Ada/kw|access}} Element) {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}}
    {{Ada/kw|with}} Implicit_Dereference =&gt; Data;

Now rather than writing the long and ugly function call of above, we can just omit the discriminant and its dereference like so:

 Get (Cont).Data.{{Ada/kw|all}} := E;  -- Ada 2005 via accessor: safe, but ugly
 Get (Cont)          := E;  -- Ada 2012 implicit dereference

Note that the call &lt;code&gt;Get (Cont)&lt;/code&gt; is overloaded — it can denote the accessor object or the element, the compiler will select the correct interpretation depending on context.

== Null exclusions ==

{{Ada/2005|Access}}

All access subtypes can be modified with {{Ada/kw|not}} {{Ada/kw|null}}, objects of such a subtype can then never have the value null, so initializations are compulsory.

 {{Ada/kw|type}}    Day_Of_Month_Access          {{Ada/kw|is}} {{Ada/kw|access}}   Day_Of_Month;
 {{Ada/kw|subtype}} Day_Of_Month_Not_Null_Access {{Ada/kw|is}} {{Ada/kw|not}} {{Ada/kw|null}} Day_Of_Month_Access;

The language also allows to declare ''the first subtype'' directly with a null exclusion:

 {{Ada/kw|type}} Day_Of_Month_Access {{Ada/kw|is}} {{Ada/kw|not}} {{Ada/kw|null}} {{Ada/kw|access}} Day_Of_Month;

However, in nearly all cases this is not a good idea because it renders objects of this type nearly unusable (for example, you are unable to free the allocated memory). Not null accesses are intended for access ''subtypes'', object ''declarations'', and subprogram ''parameters''.[http://groups.google.com/group/comp.lang.ada/msg/13a41ced7af75192]

== Access to Subprogram ==

An access to subprogram allows the caller to call a [[Ada Programming/Subprograms|subprogram]] without knowing its name nor its declaration location. One of the uses of this kind of access is the well known callbacks.

 {{Ada/kw|type}} Callback_Procedure {{Ada/kw|is}} {{Ada/kw|access}} {{Ada/kw|procedure}} (Id  : Integer;
                                              Text: String);
 
 {{Ada/kw|type}} Callback_Function {{Ada/kw|is}} {{Ada/kw|access}} {{Ada/kw|function}} (The_Alarm: Alarm) {{Ada/kw|return}} Natural;

For getting an access to a subprogram, the attribute {{Ada/attribute|Access}} is applied to a subprogram name with the proper parameter and result profile.

 {{Ada/kw|procedure}} Process_Event (Id  : Integer;
                          Text: String);
 
 My_Callback: Callback_Procedure := Process_Event'{{Ada/attribute|Access}};

=== Anonymous access to Subprogram ===

{{Ada/2005|Access}}

 {{Ada/kw|procedure}} Test (Call_Back: {{Ada/kw|access}} {{Ada/kw|procedure}} (Id: Integer; Text: String));

There is now no limit on the number of keyword in a sequence:

 {{Ada/kw|function}} F {{Ada/kw|return}} {{Ada/kw|access}} {{Ada/kw|function}} {{Ada/kw|return}} {{Ada/kw|access}} {{Ada/kw|function}} {{Ada/kw|return}} {{Ada/kw|access}} Some_Type;

This is a function that returns the access to a function that in turn returns an access to a function returning an access to some type.

== Access FAQ ==

A few "Frequently Asked Question" and "Frequently Encountered Problems" (mostly from [[Programming:C|C]] users) regarding Ada's access types.

=== Access vs. access all ===

An {{Ada/kw|access}} {{Ada/kw|all}} can do anything a simple {{Ada/kw|access}} can do. So one might ask: "Why use simple {{Ada/kw|access}} at all?" - And indeed some programmers never use simple {{Ada/kw|access}}.

Unchecked_Deallocation is always dangerous if misused. It is just as easy to deallocate a pool-specific object twice, and just as dangerous as deallocating a stack object. The advantage of "access all" is that you may not need to use Unchecked_Deallocation at all.

Moral: if you have (or may have) a valid reason to store an 'Access or 'Unchecked_Access into an access object, then use "access all" and don't worry about it. If not, the mantra of "least privilege" suggests that the "all" should be left out (don't enable capabilities that you are not going to use).

The following (perhaps disastrous) example will try to deallocate a stack object:

 {{Ada/kw|declare}}
 
   {{Ada/kw|type}} Day_Of_Month {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 31;            
   {{Ada/kw|type}} Day_Of_Month_Access {{Ada/kw|is}} {{Ada/kw|access}} {{Ada/kw|all}} Day_Of_Month;
 
   {{Ada/kw|procedure}} Free {{Ada/kw|is}} {{Ada/kw|new}} Ada.Unchecked_Deallocation
       (Object =&gt; Day_Of_Month
        Name   =&gt; Day_Of_Month_Access);
 
   A  : {{Ada/kw|aliased}} Day_Of_Month;
   Ptr: Day_Of_Month_Access := A'{{Ada/attribute|Access}};
 
 {{Ada/kw|begin}}
 
    Free(Ptr);
 
 {{Ada/kw|end}};

With a simple {{Ada/kw|access}} you know at least that you won't try to deallocate a stack object.

=== Access vs. System.Address ===

An access can be something different from a mere memory address, it may be something more. For example, an "access to String" often needs some way of storing the string size as well. If you need a simple address and are not concerned about strong typing, use the System.Address type.

=== C compatible pointer ===

The correct way to create a C compatible access is to use {{Ada/pragma|Convention}}:

 {{Ada/kw|type}} Day_Of_Month {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 31;
 {{Ada/kw|for}}  Day_Of_Month'{{Ada/attribute|Size}} {{Ada/kw|use}} Interfaces.C.int'{{Ada/attribute|Size}};
 
 {{Ada/pragma|Convention}} (Convention =&gt; C,
                    Entity     =&gt; Day_Of_Month);
 
 {{Ada/kw|type}} Day_Of_Month_Access {{Ada/kw|is}} {{Ada/kw|access}} Day_Of_Month;
 
 {{Ada/pragma|Convention}} (Convention =&gt; C,
                    Entity     =&gt; Day_Of_Month_Access);

{{Ada/pragma|Convention}} should be used on any type you want to use in C. The compiler will warn you if the type cannot be made C compatible.

You may also consider the following - shorter - alternative when declaring Day_Of_Month:

 {{Ada/kw|type}} Day_Of_Month {{Ada/kw|is}} {{Ada/kw|new}} Interfaces.C.int {{Ada/kw|range}} 1 .. 31;

Before you use access types in C, you should consider using the normal "in", "out" and "in out" modifiers. {{Ada/pragma|Export}} and {{Ada/pragma|Import}} know how parameters are usually passed in C and will use a pointer to pass a parameter automatically where C would have used them as well. Of course the RM contains precise rules on when to use a pointer for "in", "out", and "in out" - see "{{Ada/RM|B|3|title=Interfacing with C}}".

=== Where is void*? ===

While actually a problem for "interfacing with C", here are some possible solutions:

 {{Ada/kw|procedure}} Test {{Ada/kw|is}}
 
   {{Ada/kw|subtype}} Pvoid {{Ada/kw|is}} System.Address;
 
   -- the declaration in C looks like this:
   -- int C_fun(int *)
   {{Ada/kw|function}} C_fun (pv: Pvoid) {{Ada/kw|return}} Integer;
   {{Ada/pragma|Import}} (Convention    =&gt; C,
                  Entity        =&gt; C_fun,     -- any Ada name
                  External_Name =&gt; "C_fun");  -- the C name
 
   Pointer: Pvoid;
 
   Input_Parameter: {{Ada/kw|aliased}} Integer := 32;
   Return_Value   : Integer;
 
 {{Ada/kw|begin}}
 
   Pointer      := Input_Parameter'{{Ada/attribute|Address}};
   Return_Value := C_fun (Pointer);
 
 {{Ada/kw|end}} Test;

Less portable but perhaps more usable &lt;small&gt;(for 32 bit CPUs)&lt;/small&gt;:

 {{Ada/kw|type}} void {{Ada/kw|is}} {{Ada/kw|mod}} 2 ** 32;
 {{Ada/kw|for}} void'{{Ada/attribute|Size}} {{Ada/kw|use}} 32;

With GNAT you can get 32/64 bit portability by using:

 {{Ada/kw|type}} void {{Ada/kw|is}} {{Ada/kw|mod}} System.Memory_Size;
 {{Ada/kw|for}} void'{{Ada/attribute|Size}} {{Ada/kw|use}} System.Word_Size;

Closer to the true nature of void - pointing to an element of zero size is a pointer to a null record. This also has the advantage of having a representation for &lt;code&gt;void&lt;/code&gt; and &lt;code&gt;void*&lt;/code&gt;:

 {{Ada/kw|type}} Void {{Ada/kw|is}} {{Ada/kw|null}} {{Ada/kw|record}};
 {{Ada/pragma|Convention}} (C, Void);
 
 {{Ada/kw|type}} Void_Ptr {{Ada/kw|is}} {{Ada/kw|access}} {{Ada/kw|all}} Void;
 {{Ada/pragma|Convention}} (C, Void_Ptr);

== Thin and Fat Access Types ==

The difference between an access type and an address will be detailed in the following. The term ''pointer'' is used because this is usual terminology.

There is a predefined unit &lt;code&gt;System.Address_to_Access_Conversion&lt;/code&gt; converting back and forth between access values and addresses. Use these conversions with care, as is explained below.

=== Thin Pointers ===

Thin pointers grant access to constrained subtypes.

 {{Ada/kw|type}} Int     {{Ada/kw|is}} {{Ada/kw|range}} -100 .. +500;
 {{Ada/kw|type}} Acc_Int {{Ada/kw|is}} {{Ada/kw|access}} Int;
 
 {{Ada/kw|type}} Arr     {{Ada/kw|is}} {{Ada/kw|array}} (1 .. 80) {{Ada/kw|of}} Character;
 {{Ada/kw|type}} Acc_Arr {{Ada/kw|is}} {{Ada/kw|access}} Arr;

Objects of subtypes like these have a static size, so a simple address suffices to access them. In the case of arrays, this is generally the address of the first element.

For pointers of this kind, use of &lt;code&gt;System.Address_to_Access_Conversion&lt;/code&gt; is safe.

=== Fat Pointers ===

 {{Ada/kw|type}} Unc     {{Ada/kw|is}} {{Ada/kw|array}} (Integer {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} Character;
 {{Ada/kw|type}} Acc_Unc {{Ada/kw|is}} {{Ada/kw|access}} Unc;

Objects of subtype &lt;code&gt;Unc&lt;/code&gt; need a constraint, i.e. a start and a stop index, thus pointers to them need also to include those. So a simple address like the one of the first component is not sufficient. Note that A'Address is the same as A(A'First)'Address for any array object.

For pointers of this kind, &lt;code&gt;System.Address_to_Access_Conversion&lt;/code&gt; will probably not work satisfactorily.

=== Example ===

 CO: {{Ada/kw|aliased}} Unc (-1 .. +1) := (-1 .. +1 =&gt; ' ');
 UO: {{Ada/kw|aliased}} Unc            := (-1 .. +1 =&gt; ' ');

Here, CO is a ''nominally constrained'' object, a pointer to it need not store the constraint, i.e. a thin pointer suffices. In contrast, UO is an object of a ''nominally unconstrained'' subtype, its ''actual subtype'' is constrained by the initial value.

 A: Acc_Unc            := CO'Access;  -- illegal
 B: Acc_Unc            := UO'Access;  -- OK
 C: Acc_Unc (CO'Range) := CO'Access;  -- also illegal

The relevant paragraphs in the RM are difficult to understand. In short words:

An access type's target type is called the ''designated subtype'', in our example &lt;code&gt;Unc&lt;/code&gt;. RM {{Ada/RM|3|10|2}}(27.1/2) requires that &lt;code&gt;Unc_Acc&lt;/code&gt;'s designated subtype statically match the ''nominal subtype'' of the object.

Now the nominal subtype of &lt;code&gt;CO&lt;/code&gt; is the constrained anonymous subtype &lt;code&gt;Unc (-1 .. +1)&lt;/code&gt;, the nominal subtype of &lt;code&gt;UO&lt;/code&gt; is the unconstrained subtype &lt;code&gt;Unc&lt;/code&gt;. In the illegal cases, the designated and nominal subtypes do not statically match.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Types]]

=== Ada Reference Manual ===

==== Ada 95 ====

* {{Ada/95/RM|4|8|title=Allocators}}
* {{Ada/95/RM|13|11|title=Storage Management}}
* {{Ada/95/RM|13|11|2|title=Unchecked Storage Deallocation}}
* {{Ada/95/RM|3|7|title=Discriminants}}
* {{Ada/95/RM|3|10|title=Access Types}}
* {{Ada/95/RM|6|1|title=Subprogram Declarations}}
* {{Ada/95/RM|B|3|title=Interfacing with C}}

==== Ada 2005 ====

* {{Ada/2005/RM|4|8|title=Allocators}}
* {{Ada/2005/RM|13|11|title=Storage Management}}
* {{Ada/2005/RM|13|11|2|title=Unchecked Storage Deallocation}}
* {{Ada/2005/RM|3|7|title=Discriminants}}
* {{Ada/2005/RM|3|10|title=Access Types}}
* {{Ada/2005/RM|6|1|title=Subprogram Declarations}}
* {{Ada/2005/RM|B|3|title=Interfacing with C}}

=== Ada Quality and Style Guide ===

* {{Ada/SG3|5|4|5|Dynamic Data}}
* {{Ada/SG3|5|9|2|Unchecked Deallocation}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Access]]
[[{{BOOKCATEGORY|Ada Programming}}/FAQ|Access]]


[[es:Programación en Ada/Tipos/Punteros]]

&lt;/noinclude&gt;</text>
      <sha1>ko2f6ox242sb0h3z8dltb68rwp7b8fb</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Types/array</title>
    <ns>0</ns>
    <id>18135</id>
    <revision>
      <id>3250268</id>
      <parentid>3211578</parentid>
      <timestamp>2017-07-31T00:28:52Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="13411" xml:space="preserve">&lt;noinclude&gt;
{{Ada/Navigation|Types|array}}
__TOC__
&lt;/noinclude&gt;

An [[w:array|array]] is a collection of elements which can be accessed by one or more index values. In Ada any definite type is allowed as element and any discrete type, i.e. [[Ada Programming/Types/range|Range]], [[Ada Programming/Types/mod|Modular]] or [[Ada Programming/Types/Enumeration|Enumeration]], can be used as an index.

== Declaring arrays ==

Ada's arrays are quite powerful and so there are quite a few syntax variations, which are presented below.

=== Basic syntax ===

The basic form of an Ada array is:

 {{Ada/kw|array}} (Index_Range) {{Ada/kw|of}} Element_Type

where Index_Range is a range of values within a discrete index type, and Element_Type is a definite subtype. The array consists of one element of "Element_Type" for each possible value in the given range. If you for example want to count how often a specific letter appears inside a text, you could use:

 {{Ada/kw|type}} Character_Counter {{Ada/kw|is}} {{Ada/kw|array}} (Character) {{Ada/kw|of}} Natural;

As a general advice, do not use Integer as the index range, since most of the time negative indices do not make sense. It is also a good style when using numeric indices, to define them starting in 1 instead of 0, since it is more intuitive for humans and avoids [[w:off-by-one error|off-by-one error]]s.

=== With known subrange ===

Often you don't need an array of all possible values of the index type. In this case you can {{Ada/kw|subtype}} your index type to the actually needed range.

 {{Ada/kw|subtype}} Index_Sub_Type {{Ada/kw|is}} Index_Type {{Ada/kw|range}} First .. Last
 
 {{Ada/kw|array}} (Index_Sub_Type) {{Ada/kw|of}} Element_Type

Since this may involve a lot of typing and you may also run out of useful names for new [[ada Programming/Subtypes|subtypes]], the array declaration allows for a shortcut:

 {{Ada/kw|array}} (Index_Type {{Ada/kw|range}} First .. Last) {{Ada/kw|of}} Element_Type

Since &lt;tt&gt;First&lt;/tt&gt; and &lt;tt&gt;Last&lt;/tt&gt; are expressions of &lt;tt&gt;Index_Type&lt;/tt&gt;, a simpler form of the above is:

 {{Ada/kw|array}} (First .. Last) {{Ada/kw|of}} Element_Type

Note that if &lt;tt&gt;First&lt;/tt&gt; and &lt;tt&gt;Last&lt;/tt&gt; are numeric literals, this implies the index type &lt;tt&gt;Integer&lt;/tt&gt;.

If in the example above the character counter should only count upper case characters and discard all other characters, you can use the following array type:

 {{Ada/kw|type}} Character_Counter {{Ada/kw|is}} {{Ada/kw|array}} (Character {{Ada/kw|range}} 'A' .. 'Z') {{Ada/kw|of}} Natural;

=== With unknown subrange ===

Sometimes the range actually needed is not known until runtime or you need objects of different lengths. In some languages you would resort to pointers to element types. Not with Ada. Here we have the box '&lt;&gt;', which allows us to declare indefinite arrays:

 {{Ada/kw|array}} (Index_Type {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} Element_Type;

When you declare objects of such a type, the bounds must of course be given and the object is constrained to them.

The predefined type [[Ada Programming/Strings|String]] is such a type. It is defined as

  {{Ada/kw|type}} String {{Ada/kw|is}} {{Ada/kw|array}} (Positive {{Ada/kw|range}} &lt;&gt;) {{Ada/kw|of}} Character;

You define objects of such an unconstrained type in several ways (the extrapolation to other arrays than String should be obvious):

  Text : String (10 .. 20);
  Input: String := Read_from_some_file;

(These declarations additionally define anonymous subtypes of String.) In the first example, the range of indices is explicitly given. In the second example, the range is implicitly defined from the initial expression, which here could be via a function reading data from some file.
Both objects are constrained to their ranges, i.e. they cannot grow nor shrink.

=== With aliased elements ===

If you come from [[Programming:C|C]]/[[Programming:C plus plus|C++]], you are probably used to the fact that every element of an array has an address. The [[Programming:C|C]]/[[Programming:C plus plus|C++]] standards actually demand that.

In Ada, this is not true. Consider the following array:

  {{Ada/kw|type}} Day_Of_Month {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 31;
  {{Ada/kw|type}} Day_Has_Appointment {{Ada/kw|is}} {{Ada/kw|array}} (Day_Of_Month) {{Ada/kw|of}} Boolean;
  {{Ada/pragma|Pack}} (Day_Has_Appointment); 

Since we have packed the array, the compiler will use as little storage as possible. And in most cases this will mean that 8 boolean values will fit into one byte.

So Ada knows about arrays where more than one element shares one address. So what if you need to address each single element. Just not using '''[[Ada Programming/Keywords/pragma|pragma]]''' ''[[Ada Programming/Pragmas/Pack|Pack]]'' is not enough. If the [[w:CPU|CPU]] has very fast bit access, the compiler might pack the array without being told. You need to tell the compiler that you need to address each element via an access.

  {{Ada/kw|type}} Day_Of_Month {{Ada/kw|is}} {{Ada/kw|range}} 1 .. 31;
  {{Ada/kw|type}} Day_Has_Appointment {{Ada/kw|is}} {{Ada/kw|array}} (Day_Of_Month) {{Ada/kw|of}} {{Ada/kw|aliased}} Boolean;

=== Arrays with more than one dimension ===

Arrays can have more than one index. Consider the following 2-dimensional array:

   {{Ada/kw|type}} Character_Display {{Ada/kw|is}}
      {{Ada/kw|array}} {{Ada/dl|(}}Positive {{Ada/kw|range}} {{Ada/dl|&lt;&gt;}}{{Ada/dl|,}} Positive {{Ada/kw|range}} {{Ada/dl|&lt;&gt;}}{{Ada/dl|)}} {{Ada/kw|of}} Character{{Ada/dl|;}}

This type permits declaring rectangular arrays of characters.
Example:

   Magic_Square{{Ada/dl|:}} {{Ada/kw|constant}} Character_Display {{Ada/dl|1=:=}}
      {{Ada/dl|(}}{{Ada/dl|(}}{{Ada/dl|'}}S{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}A{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}T{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}O{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}R{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|,}}
       {{Ada/dl|(}}{{Ada/dl|'}}A{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}R{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}E{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}P{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}O{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|,}}
       {{Ada/dl|(}}{{Ada/dl|'}}T{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}E{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}N{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}E{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}T{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|,}}
       {{Ada/dl|(}}{{Ada/dl|'}}O{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}P{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}E{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}R{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}A{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|,}}
       {{Ada/dl|(}}{{Ada/dl|'}}R{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}O{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}T{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}A{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}S{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|)}}{{Ada/dl|;}}

Or, stating some index values explicitly,

   Magic_Square{{Ada/dl|:}} {{Ada/kw|constant}} Character_Display{{Ada/dl|(}}1 {{Ada/dl|..}} 5{{Ada/dl|,}} 1 {{Ada/dl|..}} 5{{Ada/dl|)}} {{Ada/dl|1=:=}}
      {{Ada/dl|(}}1 {{Ada/dl|1==&gt;}} {{Ada/dl|(}}{{Ada/dl|'}}S{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}A{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}T{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}O{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}R{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|,}}
       2 {{Ada/dl|1==&gt;}} {{Ada/dl|(}}{{Ada/dl|'}}A{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}R{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}E{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}P{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}O{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|,}}
       3 {{Ada/dl|1==&gt;}} {{Ada/dl|(}}{{Ada/dl|'}}T{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}E{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}N{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}E{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}T{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|,}}
       4 {{Ada/dl|1==&gt;}} {{Ada/dl|(}}{{Ada/dl|'}}O{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}P{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}E{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}R{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}A{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|,}}
       5 {{Ada/dl|1==&gt;}} {{Ada/dl|(}}{{Ada/dl|'}}R{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}O{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}T{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}A{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}S{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|)}}{{Ada/dl|;}}

The index values of the second dimension, those indexing the characters in each row,
are in 1 {{Ada/dl|..}} 5 here. By choosing a different second range, we could
change these to be in 11 {{Ada/dl|..}} 15:

   Magic_Square{{Ada/dl|:}} {{Ada/kw|constant}} Character_Display{{Ada/dl|(}}1 {{Ada/dl|..}} 5{{Ada/dl|,}} 11 {{Ada/dl|..}} 15{{Ada/dl|)}} {{Ada/dl|1=:=}}
      {{Ada/dl|(}}1 {{Ada/dl|1==&gt;}} {{Ada/dl|(}}{{Ada/dl|'}}S{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}A{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}T{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}O{{Ada/dl|'}}{{Ada/dl|,}} {{Ada/dl|'}}R{{Ada/dl|'}}{{Ada/dl|)}}{{Ada/dl|,}}
        ...

By adding more dimensions to an array type, we could have squares, cubes (or « bricks »), etc., of homogenous data items.

Finally, an array of characters is a string (see [[Ada Programming/Strings]]). Therefore, &lt;tt&gt;Magic_Square&lt;/tt&gt; may simply be declared like this:

   Magic_Square{{Ada/dl|:}} {{Ada/kw|constant}} Character_Display {{Ada/dl|1=:=}}
      {{Ada/dl|(}}"SATOR"{{Ada/dl|,}}
       "AREPO"{{Ada/dl|,}}
       "TENET"{{Ada/dl|,}}
       "OPERA"{{Ada/dl|,}}
       "ROTAS"{{Ada/dl|)}}{{Ada/dl|;}}

== Using arrays ==

=== Assignment ===

When accessing elements, the index is specified in parentheses. It is also possible to access slices in this way:

 Vector_A (1 .. 3) := Vector_B (3 .. 5);

Note that the index range slides in this example: After the assignment, Vector_A (1) = Vector_B (3) and similarly for the other indices.

Also note that the ranges overlap, nevertheless Vector_A (3) /= Vector_B (3); a compiler delivering such a result would be severely broken.

=== Concatenate ===

The operator "&amp;" can be used to concatenate arrays:

 Name := First_Name &amp; ' ' &amp; Last_Name;

In both cases, if the resulting array does not fit in the destination array, Constraint_Error is raised.

If you try to access an existing element by indexing outside the array bounds, Constraint_Error is raised (unless checks are suppressed).

=== Array Attributes ===

There are four Attributes which are important for arrays: '{{Ada/attribute|First}}, '{{Ada/attribute|Last}}, '{{Ada/attribute|Length}} and '{{Ada/attribute|Range}}. Lets look at them with an example. Say we have the following three strings:

 Hello_World  : {{Ada/kw|constant}} String := "Hello World!";
 World        : {{Ada/kw|constant}} String := Hello_World (7 .. 11);
 Empty_String : {{Ada/kw|constant}} String := "";

Then the four attributes will have the following values:

{| class="wikitable"
! Array !! '{{Ada/attribute|First}} !! '{{Ada/attribute|Last}} !! '{{Ada/attribute|Length}} !! '{{Ada/attribute|Range}}
|-
|Hello_World  || 1 || 12 || 12 || 1 .. 12
|-
|World        || 7 || 11 || 5  || 7 .. 11
|-
|Empty_String || 1 || 0 || 0  || 1 .. 0
|}

The example was chosen to show a few common beginner's mistakes:

# The assumption that strings begin with the index value 1 is wrong (cf. World'First = 7 on the second line).
# The assumption (which follows from the first one) that X'Length = X'Last is wrong.
# The assumption that X'Last &gt;= X'First; this is not true for empty strings.

The index subtype of predefined type String is Positive, therefore excluding 0 or -17 etc. from the set of possible index values, by subtype constraint (of Positive).  Also, 'A' or 2.17e+4 are excluded, since they are not of type Positive.

The attribute '{{Ada/attribute|Range}} is a little special as it does not return a discrete value but an abstract description of the array. One might wonder what it is good for. The most common use is in the [[Ada Programming/Control#for loop on arrays|for loop on arrays]] but '{{Ada/attribute|Range}} can also be used in declaring a name for the index subtype:

 {{Ada/kw|subtype}} Hello_World_Index {{Ada/kw|is}} Integer {{Ada/kw|range}} Hello_World'Range;

The {{Ada/attribute|Range}} attribute can be convenient when programming
index checks:

 {{Ada/kw|if}} K {{Ada/kw|in}} World{{Ada/dl|'}}{{Ada/attribute|Range}} {{Ada/kw|then}}
    {{Ada/kw|return}} World{{Ada/dl|(}}K{{Ada/dl|)}}{{Ada/dl|;}}
 {{Ada/kw|else}}
    {{Ada/kw|return}} Substitute{{Ada/dl|;}}
 {{Ada/kw|end}} {{Ada/kw|if}}{{Ada/dl|;}}

=== Empty or Null Arrays ===

As you have seen in the section above, Ada allows for empty arrays. And &amp;mdash; of course &amp;mdash; you can have empty arrays of all sorts, not just String:

 {{Ada/kw|type}} Some_Array {{Ada/kw|is}} {{Ada/kw|array}} (Positive range &lt;&gt;) {{Ada/kw|of}} Boolean;
 
 Empty_Some_Array : {{Ada/kw|constant}} Some_Array (1 .. 0) := ({{Ada/kw|others}} =&gt; False);

Note: If you give an initial expression to an empty array (which is a must for a constant), the expression in the aggregate will of course not be evaluated since there are no elements actually stored.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Types]]
* [[Data Structures]]
* [[Data Structures/Arrays]]

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|3|6|title=Array Types}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|3|6|title=Array Types}}

=== Ada Quality and Style Guide ===

* {{Ada/SG3|10|5|7|Packed Boolean Array Shifts}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Array]]

&lt;/noinclude&gt;

[[es:Programación en Ada/Tipos/Arrays]]</text>
      <sha1>b3pauzckdwftv74zasqpvvgyzr5qzuw</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Types/delta</title>
    <ns>0</ns>
    <id>19214</id>
    <revision>
      <id>3250269</id>
      <parentid>3211604</parentid>
      <timestamp>2017-07-31T00:28:53Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* See also */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6501" xml:space="preserve">&lt;noinclude&gt;
{{Ada/Navigation|Types|delta}}
__TOC__
&lt;/noinclude&gt;

== Description ==
{{Wikipedia|Fixed-point arithmetic}}
A fixed point type defines a set of values that are evenly spaced with a given absolute precision. In contrast, floating point values are all spaced according to a relative precision.

The absolute precision is given as the delta of the type. There are two kinds of fixed point types, ordinary and decimal.

For '''Ordinary Fixed Point''' types, the delta gives a hint to the compiler how to choose the small value if it is not specified: It can be ''any integer power of two'' not greater than delta. You may specify the small via an attribute clause to be ''any value'' not greater than delta. (If the compiler cannot conform to this small value, it has to reject the declaration.)

For '''Decimal Fixed Point''' types, the small is defined to be the delta, which in turn must be an integer power of ten. (Thus you cannot specify the small by an attribute clause.)

For example, if you define a decimal fixed point type with a delta of 0.1, you will be able to accurately store the values 0.1, 1.0, 2.2, 5.7, etc. You will not be able to accurately store the value 0.01. Instead, the value will be rounded down to 0.0.

If the compiler accepts your fixed point type definition, it guarantees that values represented by that type will have at least the degree of accuracy specified (or better). If the compiler cannot support the type definition (e.g. due to limited hardware) then a compile-time error will result.

== Ordinary Fixed Point ==

For an ordinary fixed point, you just define the delta and a range:

 {{Ada/kw|delta}} ''Delta'' {{Ada/kw|range}} ''Low'' .. ''High''

The delta can be any real value &amp;mdash; for example you may define a circle with one arcsecond resolution with:

 {{Ada/kw|delta}} 1 / (60 * 60) {{Ada/kw|range}} 0.0 .. 360.0

[There is one rather strange rule about fixed point types: Because of the way they are internally represented, the range might only go up to &lt;code&gt;'Last - Delta&lt;/code&gt;. This is a bit like a circle &amp;mdash; the 0° and 360° mark is also the same.]

It should be noted that in the example above the smallest possible value used is not &lt;math&gt;\frac{1}{60^2} = \frac{1}{3600}&lt;/math&gt;. The compiler will choose a smaller value which, by default, is an integer power of 2 not greater than the delta. In our example this could be &lt;math&gt;2^{-12} = \frac{1}{4096}&lt;/math&gt;. In most cases this should render better performance but sacrifices precision for it.

If this is not what you wish and precision is indeed more important, you can choose your own small value via the attribute clause '{{Ada/attribute|Small}}.

 {{Ada/kw|type}} Angle {{Ada/kw|is}} {{Ada/kw|delta}} Pi/2.0**31 {{Ada/kw|range}} -Pi .. Pi;
 {{Ada/kw|for}} Angle'Small {{Ada/kw|use}} Pi/2.0**31;

As internal representation, you will get a 32 bit signed integer type.

== Decimal Fixed Point ==

You define a decimal fixed point by defining the delta and the number of digits needed:

  {{Ada/kw|delta}} ''Delta'' {{Ada/kw|digits}} ''Num_Digits''

Delta must be a positive or negative integer power of 10 &amp;mdash; otherwise the declaration is illegal.

 {{Ada/kw|delta}} 10.0**(+2) {{Ada/kw|digits}} 12
 {{Ada/kw|delta}} 10.0**(-2) {{Ada/kw|digits}} 12

If you like, you can also define the range needed:

 {{Ada/kw|delta}} Delta_Value {{Ada/kw|digits}} Num_Digits {{Ada/kw|range}} Low .. High

== Differences between Ordinary and Decimal Fixed Point Types ==

There is an alternative way of declaring a "decimal" fixed point: You declare an ordinary fixed point and use an integer power of 10 as '{{Ada/attribute|Small}}. The following two declarations are equivalent with respect to the internal representation:

 -- decimal fixed point
 
 {{Ada/kw|type}} Duration {{Ada/kw|is}} {{Ada/kw|delta}} 10.0**(-9) {{Ada/kw|digits}} 9;

 -- ordinary fixed point
 
 {{Ada/kw|type}} Duration {{Ada/kw|is}} {{Ada/kw|delta}} 10.0**(-9) {{Ada/kw|range}} -1.0 .. 1.0;
 {{Ada/kw|for}} Duration'{{Ada/attribute|Small}} {{Ada/kw|use}} 10.0**(-9);

You might wonder what the difference then is between these two declarations. The answer is:

''None with respect to precision, addition, subtraction, multiplication with integer values.''

The following is an incomplete list of differences between ordinary and decimal fixed point types.

* Decimal fixed point types are intended to reflect typical '''COBOL''' declarations with a given number of digits.

* Truncation is required for decimal, not for ordinary, fixed point in multiplication and division (RM {{Ada/95/RM|4|5|5|title=(21)}}) and type conversions. Operations on decimal fixed point are fully specified, which is not true for ordinary fixed point.

* The following attributes are only defined for decimal fixed point: T'Digits (RM {{Ada/95/RM|3|5|10|title=(10)}}) corresponds to the number of decimal digits that are representable; T'Scale (RM {{Ada/95/RM|3|5|10|title=(11)}}, taken from '''COBOL''') indicates the position of the point relative to the rightmost significant digits; T'Round (RM {{Ada/95/RM|3|5|10|title=(12)}}) can be used to specify rounding on conversion.

* Package Decimal (RM {{Ada/95/RM|F|2|title=}}), which of course applies only to decimal fixed point, defines the decimal Divide generic procedure. If annex F is supported (GNAT does), at least 18 digits must be supported (there is no such rule for fixed point).

* Decimal_IO (RM {{Ada/95/RM|A|10|1|title=(73)}}) has semantics different from Fixed_IO (RM {{Ada/95/RM|A|10|1|title=(68)}}).

* Static expressions must be a multiple of the Small for decimal fixed point.

'''Conclusion:'''
For normal numeric use, an ordinary fixed point (probably with 'Small defined) should be defined. Only if you are interested in COBOL like use, i.e. well defined deterministic decimal semantics (especially for financial computations, but that might apply to cases other than money) should you take decimal fixed point.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Types]]
* [[Ada Programming/Types/range]]
* [[Ada Programming/Types/digits]]
* [[Ada Programming/Types/mod]]
* [[Ada Programming/Keywords/delta]]
* [[Ada Programming/Attributes/'Small]]

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|3|5|9|title=Fixed Point Types}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|3|5|9|title=Fixed Point Types}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Delta]]
&lt;/noinclude&gt;

[[es:Programación en Ada/Tipos/Coma fija]]</text>
      <sha1>gj8qxo07gaarl6ppnyynpl84p4c8a2y</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Types/digits</title>
    <ns>0</ns>
    <id>19212</id>
    <revision>
      <id>3576966</id>
      <parentid>3576699</parentid>
      <timestamp>2019-09-19T00:27:07Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>[[WB:REVERT|Reverted]] edits by [[Special:Contributions/37.154.171.54|37.154.171.54]] ([[User talk:37.154.171.54|talk]]) to last version by PokestarFan</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1538" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Types|digits}}
__TOC__&lt;/noinclude&gt;

== Description ==
{{Wikipedia|Floating point}}

To define a floating point type, you only have to say how many '''[[Ada Programming/Keywords/digits|digits]]''' are needed, i.e. you define the relative precision:

 {{Ada/kw|digits}} Num_Digits

If you like, you can declare the minimum range needed as well:

 {{Ada/kw|digits}} Num_Digits '''[[Ada Programming/Keywords/range|range]]''' Low .. High

This facility is a great benefit of Ada over (most) other programming languages. In other languages, you just choose between "float" and "long float", and what most people do is:
* choose float if they don't care about accuracy
* otherwise, choose long float, because it is the best you can get

In either case, you don't know what accuracy you get.

In Ada, you specify the accuracy you need, and the compiler will choose an appropriate floating point type with ''at least'' the accuracy you asked for. This way, your requirement is guaranteed. Moreover, if the computer has more than two floating point types available, the compiler can make use of all of them.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Types]]
* [[Ada Programming/Types/range]]
* [[Ada Programming/Types/delta]]
* [[Ada Programming/Types/mod]]
* [[Ada Programming/Keywords/digits]]

=== Ada Reference Manual ===

* {{Ada/RM3|3|5|7|Floating Point Types}}
&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Digits]]
&lt;/noinclude&gt;

[[es:Programación en Ada/Tipos/Coma flotante]]</text>
      <sha1>niwnezdv28w57iq89fqameylm5tybyf</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Types/limited</title>
    <ns>0</ns>
    <id>121408</id>
    <revision>
      <id>3250271</id>
      <parentid>3211722</parentid>
      <timestamp>2017-07-31T00:28:55Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* Initialising Limited Types */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11201" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation}}
__TOC__&lt;/noinclude&gt;

== Limited Types ==

When a type is declared {{Ada/kw|limited}} this means that objects of
the type cannot be assigned values of the same type.
An Object &lt;tt&gt;b&lt;/tt&gt; of limited type &lt;tt&gt;LT&lt;/tt&gt; cannot be copied into an object
&lt;tt&gt;a&lt;/tt&gt; of same type &lt;tt&gt;LT&lt;/tt&gt;.

Additionally, there is no predefined equality operation
for objects of a limited type.

The desired effects of declaring a type limited
include prevention of shallow copying. Also, the (unique)
identity of an object is retained:
once declared, a name of a variable of type &lt;tt&gt;LT&lt;/tt&gt; will
continue to refer to the same object.

The following example will use a rather simplifying type &lt;tt&gt;Boat&lt;/tt&gt;.

      {{Ada/keyword|type}} Boat {{Ada/keyword|is}} {{Ada/keyword|limited}} {{Ada/keyword|private}}{{Ada/delimiter|;}}
 
      {{Ada/keyword|function}} Choose
        {{Ada/delimiter|(}}Load  {{Ada/delimiter|:}} Sailors_Units{{Ada/delimiter|;}}
         Speed {{Ada/delimiter|:}} Sailors_Units{{Ada/delimiter|)}}
         {{Ada/keyword|return}}  Boat{{Ada/delimiter|;}}
 
      {{Ada/keyword|procedure}} Set_Sail {{Ada/delimiter|(}}The_Boat {{Ada/delimiter|:}} {{Ada/keyword|in}} {{Ada/keyword|out}} Boat{{Ada/delimiter|)}}{{Ada/delimiter|;}}

When we declare a variable to be of type &lt;tt&gt;Boat&lt;/tt&gt;, its name will denote
one boat from then on. Boats will not be copied into one another.

The full view of a boat might be implemented as a record such as

      {{Ada/keyword|type}} Boat {{Ada/keyword|is}} {{Ada/keyword|limited}} {{Ada/keyword|record}}
         Max_Sail_Area {{Ada/delimiter|:}} Sailors_Units{{Ada/delimiter|;}}
         Max_Freight   {{Ada/delimiter|:}} Sailors_Units{{Ada/delimiter|;}}
         Sail_Area     {{Ada/delimiter|:}} Sailors_Units{{Ada/delimiter|;}}
         Freight       {{Ada/delimiter|:}} Sailors_Units{{Ada/delimiter|;}}
      {{Ada/keyword|end}} {{Ada/keyword|record}}{{Ada/delimiter|;}}

The &lt;tt&gt;Choose&lt;/tt&gt; function returns a &lt;tt&gt;Boat&lt;/tt&gt; object depending on the parameters
&lt;tt&gt;Load&lt;/tt&gt; and &lt;tt&gt;Speed&lt;/tt&gt;.
If we now declare a variable of type Boat we will be better off Choosing an initial Boat 
(or else we might be dropping into uninitialized waters!). But when we
do so, the initialization looks suspiciously like assignment which is not available with limited types:

   {{Ada/keyword|procedure}} Travel {{Ada/delimiter|(}}People {{Ada/delimiter|:}} Positive{{Ada/delimiter|;}} Average_Speed {{Ada/delimiter|:}} Sailors_Units{{Ada/delimiter|)}} {{Ada/keyword|is}}
 
      Henrietta {{Ada/delimiter|:}} Boat {{Ada/delimiter|1=:=}}   {{Ada/--|assignment?}}
         Choose
           {{Ada/delimiter|(}}Load  {{Ada/delimiter|1= =&gt;}} People {{Ada/operator|*}} Average_Weight {{Ada/operator|*}} 1{{Ada/delimiter|.}}5{{Ada/delimiter|,}}
            Speed {{Ada/delimiter|1= =&gt;}} Average_Speed {{Ada/operator|*}} 1{{Ada/delimiter|.}}5{{Ada/delimiter|)}}{{Ada/delimiter|;}}
 
   {{Ada/keyword|begin}}
      Set_Sail {{Ada/delimiter|(}}Henrietta{{Ada/delimiter|)}}{{Ada/delimiter|;}}
   {{Ada/keyword|end}} Travel{{Ada/delimiter|;}}

Fortunately, current Ada distinguishes initialization from copying. Objects of a limited
type may be initialized by an initialization expression on the right of the delimiter
{{Ada/delimiter|1=:=}}.

(Just to prevent confusion: The Ada Reference Manual discriminates between ''assignment'' and ''assignment statement'', where assignment is part of the assignment statement. An initialisation is of course an assignment which, for limited types, is done ''in place''. An assignment statement involves copying, which is forbidden for limited types.)

Related to this feature are [http://www.adacore.com/2007/05/14/gem-1/ aggregates of limited types] and
“constructor functions” for limited types.
Internally, the implementation of the &lt;tt&gt;Choose&lt;/tt&gt; function will return
a limited record. However, since the return type &lt;tt&gt;Boat&lt;/tt&gt; is limited,
there must be no copying anywhere. Will this work?
A first attempt might be to declare a &lt;tt&gt;result&lt;/tt&gt; variable local
to &lt;tt&gt;Choose&lt;/tt&gt;, manipulate &lt;tt&gt;result&lt;/tt&gt;, and return it.
The &lt;tt&gt;result&lt;/tt&gt; object needs to be “transported” into the calling environment.
But &lt;tt&gt;result&lt;/tt&gt; is a variable local to &lt;tt&gt;Choose&lt;/tt&gt;.
When &lt;tt&gt;Choose&lt;/tt&gt; returns, &lt;tt&gt;result&lt;/tt&gt; will no longer be in scope.
Therefore it looks like &lt;tt&gt;result&lt;/tt&gt; must be copied but this is not permitted
for limited types. There are two solutions provided by the language:
extended return statements (see {{Ada/2005/RM|6|5|title=Return Statements}})
and aggregates of limited types. The following body of &lt;tt&gt;Choose&lt;/tt&gt;
returns an aggregate of limited type &lt;tt&gt;Boat&lt;/tt&gt;, after finding the
initial values for its components.

      {{Ada/keyword|function}} Choose
        {{Ada/delimiter|(}}Load  {{Ada/delimiter|:}} Sailors_Units{{Ada/delimiter|;}}
         Speed {{Ada/delimiter|:}} Sailors_Units{{Ada/delimiter|)}}
         {{Ada/keyword|return}}  Boat
      {{Ada/keyword|is}}
         Capacity {{Ada/delimiter|:}} {{Ada/keyword|constant}} Sailors_Units {{Ada/delimiter|1=:=}} Capacity_Needed {{Ada/delimiter|(}}Load{{Ada/delimiter|)}}{{Ada/delimiter|;}}
      {{Ada/keyword|begin}}
         {{Ada/keyword|return}} Boat{{Ada/delimiter|'}}
           {{Ada/delimiter|(}}Max_Freight   {{Ada/delimiter|1= =&gt;}} Capacity{{Ada/delimiter|,}}
            Max_Sail_Area {{Ada/delimiter|1= =&gt;}} Sail_Needed {{Ada/delimiter|(}}Capacity{{Ada/delimiter|)}}{{Ada/delimiter|,}}
            Freight       {{Ada/delimiter|1= =&gt;}} Load{{Ada/delimiter|,}}
            Sail_Area     {{Ada/delimiter|1= =&gt;}} 0{{Ada/delimiter|.}}0{{Ada/delimiter|)}}{{Ada/delimiter|;}}
      {{Ada/keyword|end}} Choose{{Ada/delimiter|;}}

The object that is returned is at the same time the object that is to have
the returned value. The function therefore initializes &lt;tt&gt;Henrietta&lt;/tt&gt;
''in place''.

In parallel to the predefined type  {{Ada/package|Ada|Finalization}}&lt;tt&gt;.Controlled&lt;/tt&gt;,
Ada provides the type &lt;tt&gt;Limited_Controlled&lt;/tt&gt; in the same package. 
It is a limited version of the former.

== Initialising Limited Types ==

A few methods to initialise such types are presented.

 {{Ada/kw|package}} Limited_Private_Samples {{Ada/kw|is}}
 
   {{Ada/kw|type}} Uninitialised  {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}};
   {{Ada/kw|type}} Preinitialised {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}};
 
   {{Ada/kw|type}} Dynamic_Initialisation {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}};
   {{Ada/kw|function}} Constructor (X: Integer)  {{Ada/comment|any kind of parameters}}
     {{Ada/kw|return}} Dynamic_Initialisation;
 
   {{Ada/kw|type}} Needs_Constructor (&lt;&gt;) {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|private}};
   {{Ada/kw|function}} Constructor (X: Integer)  {{Ada/comment|any kind of parameters}}
     {{Ada/kw|return}} Needs_Constructor;
 
 {{Ada/kw|private}}
 
   {{Ada/kw|type}} Uninitialised {{Ada/kw|is}} {{Ada/kw|record}}
     I: Integer;
   {{Ada/kw|end}} {{Ada/kw|record}};
 
   {{Ada/kw|type}} Preinitialised {{Ada/kw|is}} {{Ada/kw|record}}
     I: Integer := 0;  {{Ada/comment|can also be a function call}}
   {{Ada/kw|end}} {{Ada/kw|record}};
 
   {{Ada/kw|type}} Void {{Ada/kw|is}} {{Ada/kw|null}} {{Ada/kw|record}};
   {{Ada/kw|function}} Constructor (Object: {{Ada/kw|access}} Dynamic_Initialisation) {{Ada/kw|return}} Void;
 
   {{Ada/kw|type}} Dynamic_Initialisation {{Ada/kw|is}} {{Ada/kw|limited}} {{Ada/kw|record}}
     Hook: Void := Constructor (Dynamic_Initialisation'{{Ada/kw|Access}});
     Bla : Integer;  {{Ada/comment|any needed components}}
   {{Ada/kw|end}} {{Ada/kw|record}};
 
   {{Ada/kw|type}} Needs_Constructor {{Ada/kw|is}} {{Ada/kw|record}}
     I: Integer;
   {{Ada/kw|end}} {{Ada/kw|record}};
 
 {{Ada/kw|end}} Limited_Private_Samples;

 {{Ada/kw|package}} {{Ada/kw|body}} Limited_Private_Samples {{Ada/kw|is}}
 
   {{Ada/kw|function}} Constructor (Object: {{Ada/kw|access}} Dynamic_Initialisation) {{Ada/kw|return}} Void {{Ada/kw|is}}
   {{Ada/kw|begin}}
     Object.Bla := 5;  {{Ada/comment|may be any value only known at run time}}
     {{Ada/kw|return}} ({{Ada/kw|null}} {{Ada/kw|record}});
   {{Ada/kw|end}} Constructor;
 
   {{Ada/kw|function}} Constructor (X: Integer) {{Ada/kw|return}} Dynamic_Initialisation {{Ada/kw|is}}
   {{Ada/kw|begin}}
     {{Ada/kw|return}} (Hook =&gt; ({{Ada/kw|null}} {{Ada/kw|record}}),
             Bla  =&gt; 42);
   {{Ada/kw|end}} Constructor;
 
   {{Ada/kw|function}} Constructor (X: Integer) {{Ada/kw|return}} Needs_Constructor {{Ada/kw|is}}
   {{Ada/kw|begin}}
     {{Ada/kw|return}} (I =&gt; 42);
   {{Ada/kw|end}} Constructor;
 
 {{Ada/kw|end}} Limited_Private_Samples;

  {{Ada/keyword|with}} Limited_Private_Samples{{Ada/delimiter|1=;}}
  {{Ada/keyword|use}}  Limited_Private_Samples{{Ada/delimiter|1=;}}
  
  {{Ada/keyword|procedure}} Try {{Ada/keyword|is}}
  
    U{{Ada/delimiter|1=:}} Uninitialised{{Ada/delimiter|1=;}}   {{Ada/--|very bad}}
    P{{Ada/delimiter|1=:}} Preinitialised{{Ada/delimiter|1=;}}  {{Ada/--|has initial value (good)}}
   
    D1{{Ada/delimiter|1=:}} Dynamic_Initialisation{{Ada/delimiter|1=;}}  {{Ada/--|has initial value (good)}}
    D2{{Ada/delimiter|1=:}} Dynamic_Initialisation {{Ada/delimiter|1=:=}} Constructor {{Ada/delimiter|1=(}}0{{Ada/delimiter|1=)}}{{Ada/delimiter|1=;}}  {{Ada/--|Ada 2005 initialisation}}
    D3{{Ada/delimiter|1=:}} Dynamic_Initialisation {{Ada/keyword|renames}} Constructor {{Ada/delimiter|1=(}}0{{Ada/delimiter|1=)}}{{Ada/delimiter|1=;}}  {{Ada/--|already Ada 95}}
  
    {{Ada/--|I: Needs_Constructor;  -- Illegal without initialisation}}
    N{{Ada/delimiter|1=:}} Needs_Constructor {{Ada/delimiter|1=:=}} Constructor {{Ada/delimiter|1=(}}0{{Ada/delimiter|1=)}}{{Ada/delimiter|1=;}}  {{Ada/--|Ada 2005 initialisation}}
  
  {{Ada/keyword|begin}}
  
    {{Ada/keyword|null}}{{Ada/delimiter|1=;}}
  
  {{Ada/keyword|end}} Try{{Ada/delimiter|1=;}}
 
Note that D3 is a constant, whereas all others are variables.

Also note that the initial value that is defined for the component of Preinitialised is evaluated at the time of object creation, i.e. if an expression is used instead of the literal, the value can be run-time dependent.

 X, Y: Preinitialised;

In this declaration of two objects, the initial expression will be evaluated twice and can deliver different values, because it is equivalent to the sequence:&lt;ref&gt;
{{Ada/2005/Cite RM|3|3|1
|      title = Object Declarations
|        par = 7
|         id = 
|      quote = Any declaration [...] with more than one &lt;tt&gt;defining_identifier&lt;/tt&gt; is equivalent to a series of declarations each containing one &lt;tt&gt;defining_identifier&lt;/tt&gt; from the list, [...] in the same order as the list.
}}
&lt;/ref&gt;

 X: Preinitialised;
 Y: Preinitialised;

So X is initialised before Y.

== See also ==

=== Ada 95 Reference Manual ===

* {{Ada/95/RM|7|5|title=Limited Types}}

=== Ada 2005 Reference Manual ===

* {{Ada/2005/RM|7|5|title=Limited Types}}

=== Ada Quality and Style Guide ===

* {{Ada/SG3|5|3|3|Private Types}}
* {{Ada/SG3|8|3|3|Formal Private and Limited Private Types}}

== References ==
&lt;references /&gt;

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|{{SUBPAGENAME}}]]
&lt;/noinclude&gt;</text>
      <sha1>16s5t0i4tkahavnhpuku76jig6gq9zg</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Types/mod</title>
    <ns>0</ns>
    <id>19210</id>
    <revision>
      <id>3250272</id>
      <parentid>3211726</parentid>
      <timestamp>2017-07-31T00:28:56Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* See also */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2440" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Types|mod}}
__TOC__
&lt;/noinclude&gt;

== Description ==
Unsigned integers in Ada have a value range from 0 to some positive number (not necessarily 1 subtracted from some power of 2). They are defined using the {{Ada/kw|mod}} keyword because they implement a wrap-around arithmetic.

  {{Ada/kw|mod}} Modulus

where '{{Ada/attribute|First}} is 0 and '{{Ada/attribute|Last}} is Modulus - 1.

Wrap-around arithmetic means that 'Last + 1 = 0 = 'First, and 'First - 1 = 'Last. Additionally to the normal arithmetic operators, bitwise {{Ada/kw|and}}, {{Ada/kw|or}} and {{Ada/kw|xor}} are defined for the type (see below).

The predefined package {{Ada/package|Interfaces}} (RM {{Ada/RM2|B|2|}}) presents unsigned integers based on powers of 2

 {{Ada/kw|type}} Unsigned_''n'' {{Ada/kw|is}} {{Ada/kw|mod}} 2**''n'';

for which also shift and rotate operations are defined. The values of ''n'' depend on compiler and target architecture.

You can use {{Ada/kw|range}} to sub-range a modular type:

 {{Ada/kw|type}} Byte {{Ada/kw|is}} {{Ada/kw|mod}} 256;
 {{Ada/kw|subtype}} Half_Byte {{Ada/kw|is}} Byte {{Ada/kw|range}} 0 .. 127;

But beware: the Modulus of Half_Byte is still 256! Arithmetic with such a type is interesting to say the least.

== Bitwise Operations ==

Be very careful with bitwise operators {{Ada/kw|and}}, {{Ada/kw|or}}, {{Ada/kw|xor}}, {{Ada/kw|not}}, when the modulus is not a power of two.
An example might exemplify the problem.

 {{Ada/kw|type}} Unsigned {{Ada/kw|is}} {{Ada/kw|mod}} 2**5;   -- modulus 32
 X: Unsigned := 2#10110#;     -- 22
 {{Ada/kw|not}} X        = 2#01001#      -- bit reversal: 9 ( = 31 - 22 ) as expected

The other operators work similarly.

Now take a modulus that is not a power of two. Naive expectations about the results may lead out of the value range.
As an example take again the {{Ada/kw|not}} operator (see  the RM for the others):

 {{Ada/kw|type}} Unsigned {{Ada/kw|is}} {{Ada/kw|mod}} 5;
 X: Unsigned := 2#001#;  -- 1, bit reversal: 2#110# = 6 leads out of range

The definition of {{Ada/kw|not}} is therefore:

  {{Ada/kw|not}} X = Unsigned'Last – X  -- here: 4 – 1 = 2#011#

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Types]]
* [[Ada Programming/Keywords/mod]]

=== Ada Reference Manual ===

* {{Ada/RM2|4|4|Expressions}}
* {{Ada/RM3|3|5|4|Integer Types}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Mod]]

&lt;/noinclude&gt;</text>
      <sha1>q89j0dmcwhbmpu035wt3lmys9u2v40e</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Types/range</title>
    <ns>0</ns>
    <id>18304</id>
    <revision>
      <id>3250273</id>
      <parentid>3211739</parentid>
      <timestamp>2017-07-31T00:28:57Z</timestamp>
      <contributor>
        <username>PokestarFan</username>
        <id>2882103</id>
      </contributor>
      <minor/>
      <comment>/* See also */clean up &amp; typo fixing using [[Project:AWB|AWB]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1934" xml:space="preserve">&lt;noinclude&gt;{{Ada/Navigation|Types|range}}
__TOC__
&lt;/noinclude&gt;

A {{Ada/kw|range}} is a signed integer value which ranges from a {{Ada/attribute|First}} to a last {{Ada/attribute|Last}}. It is defined as

  {{Ada/kw|range}} First .. Last

When a value is assigned to an object with such a range constraint, the value is checked for validity and Constraint_Error [[Ada Programming/Exceptions|exception]] is raised when the value is not within {{Ada/attribute|First}} to {{Ada/attribute|Last}}.

When declaring a range type, the corresponding mathematical operators are implicitly declared by the language at the same place.

The compiler is free to choose a suitable underlaying hardware type for this user defined type.

== Working demo ==

The following Demo defines a new range from -5 to 10 and then prints the whole range out.

 {{Ada/Sourceforge|range_1.adb}}
  
 {{Ada/kw|with}} {{Ada/package|Ada|Text_IO}};
 
 {{Ada/kw|procedure}} Range_1 {{Ada/kw|is}}
    {{Ada/kw|type}} Range_Type {{Ada/kw|is}} {{Ada/kw|range}} -5 .. 10;
 
    {{Ada/kw|package}} T_IO {{Ada/kw|renames}} Ada.Text_IO;
    {{Ada/kw|package}} I_IO {{Ada/kw|is}} {{Ada/kw|new}} Ada.Text_IO.Integer_IO (Range_Type);
 
 {{Ada/kw|begin}}
    {{Ada/kw|for}} A {{Ada/kw|in}} Range_Type {{Ada/kw|loop}}
       I_IO.Put (
          Item  =&gt; A,
          Width =&gt; 3,
          Base  =&gt; 10);
 
       {{Ada/kw|if}} A &lt; Range_Type'{{Ada/attribute|Last}} {{Ada/kw|then}}
          T_IO.Put (",");
       {{Ada/kw|else}}
          T_IO.New_Line;
       {{Ada/kw|end}} {{Ada/kw|if}};
    {{Ada/kw|end}} {{Ada/kw|loop}};
 {{Ada/kw|end}} Range_1;

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Types]]
* [[Ada Programming/Keywords/range]]

=== Ada Reference Manual ===

* {{Ada/RM2|4|4|Expressions}}
* {{Ada/RM3|3|5|4|Integer Types}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Range]]

&lt;/noinclude&gt;

[[es:Programación en Ada/Tipos/Enteros]]</text>
      <sha1>c966zu2ql4e5ibsrjg3nnt9uqpmty33</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Types/record</title>
    <ns>0</ns>
    <id>19248</id>
    <revision>
      <id>3569545</id>
      <parentid>3569542</parentid>
      <timestamp>2019-09-06T13:51:33Z</timestamp>
      <contributor>
        <username>Stanglavine</username>
        <id>1656124</id>
      </contributor>
      <minor/>
      <comment>[[WB:REVERT|Reverted]] edits by [[Special:Contributions/159.146.10.177|159.146.10.177]] ([[User talk:159.146.10.177|talk]]) to last version by 204.27.169.105</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14076" xml:space="preserve">&lt;noinclude&gt;
{{Ada/Navigation|Types|record}}
__TOC__
&lt;/noinclude&gt;

A '''record''' is a [[ada Programming/Types#List of types|composite type]] that groups one or more fields. A field can be of any type, even a record.

== Basic record ==

  {{Ada/kw|type}} Basic_Record {{Ada/kw|is}}
     {{Ada/kw|record}}
        A : Integer;
     {{Ada/kw|end}} {{Ada/kw|record}};

== Null record ==

The null record is when a type without data is needed. There are two ways to declare a null record:

 {{Ada/kw|type}} Null_Record {{Ada/kw|is}}
    {{Ada/kw|record}}
       {{Ada/kw|null}};
    {{Ada/kw|end}} {{Ada/kw|record}}; 

 {{Ada/kw|type}} Null_Record {{Ada/kw|is}} {{Ada/kw|null}} {{Ada/kw|record}};

For the compiler they are the same. However, programmers often use the first variant if the type is not finished yet to show that they are planning to expand the type later, or they usually use the second if the (tagged) record is a base class in object oriented programming.

== Record Values ==

Values of a record type can be specified using a record aggregate, giving a list of named components thus

   A_Basic_Record       {{Ada/delimiter|:}} Basic_Record         {{Ada/delimiter|1=:=}} Basic_Record{{Ada/delimiter|'}}{{Ada/delimiter|(}}A {{Ada/delimiter|1= =&gt;}} 42{{Ada/delimiter|)}}{{Ada/delimiter|;}}
   Another_Basic_Record {{Ada/delimiter|:}} Basic_Record         {{Ada/delimiter|1=:=}} {{Ada/delimiter|(}}A {{Ada/delimiter|1= =&gt;}} 42{{Ada/delimiter|)}}{{Ada/delimiter|;}}
   Nix                  {{Ada/delimiter|:}} {{Ada/keyword|constant}} Null_Record {{Ada/delimiter|1=:=}} {{Ada/delimiter|(}}{{Ada/keyword|null}} {{Ada/keyword|record}}{{Ada/delimiter|)}}{{Ada/delimiter|;}}

Given a somewhat larger record type,

   {{Ada/keyword|type}} Car {{Ada/keyword|is}} {{Ada/keyword|record}}
      Identity       {{Ada/delimiter|:}} Long_Long_Integer{{Ada/delimiter|;}}
      Number_Wheels  {{Ada/delimiter|:}} Positive {{Ada/keyword|range}} 1 {{Ada/delimiter|..}} 10{{Ada/delimiter|;}}
      Paint          {{Ada/delimiter|:}} Color{{Ada/delimiter|;}}
      Horse_Power_kW {{Ada/delimiter|:}} Float {{Ada/keyword|range}} 0{{Ada/delimiter|.}}0 {{Ada/delimiter|..}} 2_000{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
      Consumption    {{Ada/delimiter|:}} Float {{Ada/keyword|range}} 0{{Ada/delimiter|.}}0 {{Ada/delimiter|..}} 100{{Ada/delimiter|.}}0{{Ada/delimiter|;}}
   {{Ada/keyword|end}} {{Ada/keyword|record}}{{Ada/delimiter|;}}

a value ''may'' be specified using ''positional'' notation, that is, specifying a value for each record component in declaration order

   BMW {{Ada/delimiter|:}} Car {{Ada/delimiter|1=:=}} {{Ada/delimiter|(}}2007_752_83992434{{Ada/delimiter|,}} 5{{Ada/delimiter|,}} Blue{{Ada/delimiter|,}} 190{{Ada/delimiter|.}}0{{Ada/delimiter|,}} 10{{Ada/delimiter|.}}1{{Ada/delimiter|)}}{{Ada/delimiter|;}}

However, naming the components of a &lt;tt&gt;Car&lt;/tt&gt; aggregate offers a number of advantages.
# Easy identification of which value is used for which component. (After all, named components are the raison d'être of records.)
# Reordering the components is allowed—you only have to remember the component names, not their position.
# Improved compiler diagnostic messages.

Reordering components is possible because component names will inform the compiler (and the human reader!) of the intended value associations.
Improved compiler messages are also in consequence of this additional information passed to the compiler.
While an omitted component will always be reported due to Ada's [http://www.adacore.com/2007/05/14/gem-1/ coverage rules],
messages can be much more specific when there are named associations. 
Considering the &lt;tt&gt;Car&lt;/tt&gt; type from above, suppose a
programmer by mistake specifies only one of the two floating point values for &lt;tt&gt;BMW&lt;/tt&gt; in positional notation.
The compiler, in search of another component value,
will then not be able to decide whether the specified value is intended for &lt;tt&gt;Horse_Power_kW&lt;/tt&gt;
or for &lt;tt&gt;Consumption&lt;/tt&gt;.
If the programmer instead uses named association, say 
Horse_Power_kW {{Ada/delimiter|1= =&gt;}} 190{{Ada/delimiter|.}}0{{Ada/delimiter|,}}
it will be clear which other component is missing.

   BMW {{Ada/delimiter|:}} Car {{Ada/delimiter|1=:=}}
     {{Ada/delimiter|(}}Identity       {{Ada/delimiter|1= =&gt;}} 2007_752_83992434{{Ada/delimiter|,}}
      Number_Wheels  {{Ada/delimiter|1= =&gt;}} 5{{Ada/delimiter|,}}
      Horse_Power_kW {{Ada/delimiter|1= =&gt;}} 190{{Ada/delimiter|.}}0{{Ada/delimiter|,}}
      Consumption    {{Ada/delimiter|1= =&gt;}} 10{{Ada/delimiter|.}}1{{Ada/delimiter|,}}
      Paint          {{Ada/delimiter|1= =&gt;}} Blue{{Ada/delimiter|)}}{{Ada/delimiter|;}}

In order to access a component of a record instance, use the dot delimiter ({{Ada/delimiter|.}}), as in &lt;tt&gt;BMW{{Ada/delimiter|.}}Number_Wheels&lt;/tt&gt;.

== Discriminated record ==

  {{Ada/kw|type}} Discriminated_Record (Size : Natural) {{Ada/kw|is}} 
     {{Ada/kw|record}}
        A : String (1 .. Size);
     {{Ada/kw|end}} {{Ada/kw|record}};

== Variant record ==

The variant record is a special type of discriminated record where the presence of some components depend on the value of the discriminant.

  {{Ada/kw|type}} Traffic_Light {{Ada/kw|is}} (Red, Yellow, Green);
 
  {{Ada/kw|type}} Variant_Record (Option : Traffic_Light) {{Ada/kw|is}} 
     {{Ada/kw|record}}
        {{Ada/--|common components}}
        
        {{Ada/kw|case}} Option {{Ada/kw|is}}
           {{Ada/kw|when}} Red =&gt;
              {{Ada/--|components for red}}
           {{Ada/kw|when}} Yellow =&gt;
              {{Ada/--|components for yellow}}
           {{Ada/kw|when}} Green =&gt;
              {{Ada/--|components for green}}
        {{Ada/kw|end}} {{Ada/kw|case}};
     {{Ada/kw|end}} {{Ada/kw|record}};

=== Mutable and immutable variant records ===

You can declare variant record types such that its discriminant, and thus its variant structure, can be changed during the lifetime of the variable.  Such a record is said to be ''mutable''.  When "mutating" a record, you must assign '''all''' components of the variant structure which you are mutating at once, replacing the record with a complete variant structure.  Although a variant record declaration may allow objects of its type to be mutable, there are certain restrictions on whether the objects will be mutable.  Reasons restricting an object from being mutable include:

* the object is declared with a discriminant (see Immutable_Traffic_Light below)
* the object is aliased (either by use of {{Ada/kw|aliased}} in the object declaration, or by allocation on the heap using {{Ada/kw|new}})


  {{Ada/kw|type}} Traffic_Light {{Ada/kw|is}} (Red, Yellow, Green);
 
  {{Ada/kw|type}} Mutable_Variant_Record (Option : Traffic_Light := Red) {{Ada/kw|is}}      {{Ada/--|the discriminant must have a default value}}
     {{Ada/kw|record}}
        {{Ada/--|common components}}
        Location : Natural;
        {{Ada/kw|case}} Option {{Ada/kw|is}}
           {{Ada/kw|when}} Red =&gt;
              {{Ada/--|components for red}}
              Flashing : Boolean := True;
           {{Ada/kw|when}} Yellow =&gt;
              {{Ada/--|components for yellow}}
              Timeout    : Duration := 0.0;
           {{Ada/kw|when}} Green =&gt;
              {{Ada/--|components for green}}
              Whatever : Positive := 1;
        {{Ada/kw|end}} {{Ada/kw|case}};
     {{Ada/kw|end}} {{Ada/kw|record}};
 ...
 Mutable_Traffic_Light   : Mutable_Variant_Record;                    {{Ada/--|not declaring a discriminant makes this record mutable}}
                                                                      {{Ada/--|it has the default discriminant/variant}}
                                                                      {{Ada/--|structure and values}}
 
 Immutable_Traffic_Light : Mutable_Variant_Record (Option =&gt; Yellow); {{Ada/--|this record is immutable, the discriminant cannot be changed}}
                                                                      {{Ada/--|even though the type declaration allows for mutable objects}}
                                                                      {{Ada/--|with different discriminant values}}
 ...
 Mutable_Traffic_Light   := (Option =&gt; Yellow,                        {{Ada/--|mutation requires assignment of all components}}
                             Location =&gt; 54,                          {{Ada/--|for the given variant structure}}
                             Timeout =&gt; 2.3);
 ...
 {{Ada/--|restrictions on objects, causing them to be immutable}}
 {{Ada/kw|type}} Traffic_Light_Access {{Ada/kw|is}} {{Ada/kw|access}} Mutable_Variant_Record;
 Any_Traffic_Light       : Traffic_Light_Access :=
                            {{Ada/kw|new}} Mutable_Variant_Record;
 Aliased_Traffic_Light   : {{Ada/kw|aliased}} Mutable_Variant_Record;


Conversely, you can declare record types so that the discriminant along with the structure of the variant record may not be changed.  To make a record type declaration ''immutable'', the discriminant must '''not''' have a default value.

  {{Ada/kw|type}} Traffic_Light {{Ada/kw|is}} (Red, Yellow, Green);
 
  {{Ada/kw|type}} Immutable_Variant_Record (Option : Traffic_Light) {{Ada/kw|is}} {{Ada/--|no default value makes the record type immutable}}
     {{Ada/kw|record}}
        {{Ada/--|common components}}
        Location : Natural := 0;
        {{Ada/kw|case}} Option {{Ada/kw|is}}
           {{Ada/kw|when}} Red =&gt;
              {{Ada/--|components for red}}
              Flashing : Boolean := True;
           {{Ada/kw|when}} Yellow =&gt;
              {{Ada/--|components for yellow}}
              Timeout    : Duration;
           {{Ada/kw|when}} Green =&gt;
              {{Ada/--|components for green}}
              Whatever : Positive := 1;
        {{Ada/kw|end}} {{Ada/kw|case}};
     {{Ada/kw|end}} {{Ada/kw|record}};
 ...
 Default_Traffic_Light   : Immutable_Variant_Record;                    {{Ada/--|ILLEGAL!}}
 Immutable_Traffic_Light : Immutable_Variant_Record (Option =&gt; Yellow); {{Ada/--|this record is immutable, since the type declaration is immutable}}

== Union ==

{{Ada/2005|Record}}

  {{Ada/kw|type}} Traffic_Light {{Ada/kw|is}} (Red, Yellow, Green);
 
  {{Ada/kw|type}} Union (Option : Traffic_Light := Traffic_Light'First) {{Ada/kw|is}} 
     {{Ada/kw|record}}
        {{Ada/--|common components}}
        
        {{Ada/kw|case}} Option {{Ada/kw|is}}
           {{Ada/kw|when}} Red =&gt;
              {{Ada/--|components for red}}
           {{Ada/kw|when}} Yellow =&gt;
              {{Ada/--|components for yellow}}
           {{Ada/kw|when}} Green =&gt;
              {{Ada/--|components for green}}
        {{Ada/kw|end}} {{Ada/kw|case}};
     {{Ada/kw|end}} {{Ada/kw|record}};
 
  {{Ada/pragma|Unchecked_Union}} (Union);
  {{Ada/pragma|Convention}} (C, Union);    {{Ada/--|optional}}

The difference to a variant record is such that &lt;var&gt;Option&lt;/var&gt; is not actually stored inside the record and never checked for correctness - it's just a dummy.

This kind of record is usually used for interfacing with C but can be used for other purposes as well (then without &lt;code&gt;{{Ada/pragma|Convention}} (C, Union);&lt;/code&gt;).

== Tagged record ==

The tagged record is one part of what in other languages is called a class. It is the basic foundation of [[ada Programming/Object Orientation|object orientated programming in Ada]]. The other two parts a class in Ada needs is a [[ada Programming/Object Orientation#The package|package]] and [[ada Programming/Object Orientation#Primitive operations|primitive operations]].

 {{Ada/kw|type}} Person {{Ada/kw|is}} {{Ada/kw|tagged}} 
    {{Ada/kw|record}}
       Name   : String (1 .. 10);
       Gender : Gender_Type;
    {{Ada/kw|end}} {{Ada/kw|record}};

 {{Ada/kw|type}} Programmer {{Ada/kw|is}} {{Ada/kw|new}} Person {{Ada/kw|with}}
    {{Ada/kw|record}}
       Skilled_In : Language_List;
    {{Ada/kw|end}} {{Ada/kw|record}};

Ada 2005 only:

 {{Ada/kw|type}} Programmer {{Ada/kw|is}} {{Ada/kw|new}} Person 
                    {{Ada/kw|and}} Printable 
 {{Ada/kw|with}} 
    {{Ada/kw|record}}
       Skilled_In : Language_List;
    {{Ada/kw|end}} {{Ada/kw|record}};

== Abstract tagged record ==

An abstract type has at least one abstract primitive operation, i.e. one of its operations is not defined and implementation must be provided by derivatives of the abstract type.

== With aliased elements ==

If you come from [[C Programming|C]]/[[C++ Programming|C++]], you are probably used to the fact that every element of a record - which is not part of a bitset - has an address. In Ada, this is not true because records, just like arrays, can be packed. And just like arrays you can use {{Ada/kw|aliased}} to ensure that an element can be accessed via an access type.

 {{Ada/kw|type}} Basic_Record {{Ada/kw|is}} 
    {{Ada/kw|record}}
       A : {{Ada/kw|aliased}} Integer;
    {{Ada/kw|end}} {{Ada/kw|record}} ;

Please note: each element needs its own {{Ada/kw|aliased}}.

== Limited Records ==

In addition to being variant, tagged, and abstract,
records may also be limited (no assignment, and no predefined
equality operation for [[Ada Programming/Types/limited|Limited Types]]).
In object oriented programming, when tagged objects are
handled by references instead of copying them, this blends
well with making objects limited.

== See also ==

=== Wikibook ===

* [[Ada Programming]]
* [[Ada Programming/Types]]
* [[Ada Programming/Keywords/record]]
* [[Ada Programming/Keywords/null]]
* [[Ada Programming/Keywords/abstract]]
* [[Ada Programming/Keywords/case]]
* [[Ada Programming/Keywords/when]]
* [[Ada Programming/Pragmas/Unchecked Union]]

=== Ada Reference Manual ===

==== Ada 95 ====

* {{Ada/95/RM|3|8|title=Record Types}}

==== Ada 2005 ====

* {{Ada/2005/RM|3|8|title=Record Types}}
* {{Ada/2005/RM|B|3|3|title=Pragma Unchecked_Union}}

==== Ada Issues ====

* {{Ada/95/AI|216|Unchecked unions &amp;mdash; variant records with no run-time discriminant}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|Record]]
[[es:Programación en Ada/Tipos/Registros]]
&lt;/noinclude&gt;</text>
      <sha1>ks3plycihii65qlvrv8quu81rways7c</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Variables</title>
    <ns>0</ns>
    <id>22539</id>
    <revision>
      <id>3211782</id>
      <parentid>2504002</parentid>
      <timestamp>2017-05-01T23:26:07Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="747" xml:space="preserve">&lt;noinclude&gt;{{Computer Programming/Variables/0}}
__TOC__&lt;/noinclude&gt;
{{:Template:Computer Programming/Variables/1}}

Assignment statements are written as &lt;code&gt;''name'' '''[[Ada Programming/Delimiters/:=|:=]]''' ''value''&lt;/code&gt;.

   X [[Ada Programming/Delimiters/:=|:=]] 10;

{{:Computer Programming/Variables/2}}

Ada is the same. The declaration is as follows:

 {{Ada/kw|declare}}
   X : Integer [[Ada Programming/Delimiters/:=|:=]] 10;
 {{Ada/kw|begin}}
   Do_Something (X);
 {{Ada/kw|end}};

{{:Template:Computer Programming/Variables/3}}
== See also ==

=== Ada Reference Manual ===
*{{Ada/RM2|3|3|Objects and Named Numbers}}

&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}|{{SUBPAGENAME}}]]
[[es:Programación en Ada/Objetos]]
&lt;/noinclude&gt;</text>
      <sha1>6o3z0fh4f39kiieauvaa77rvv4njc4a</sha1>
    </revision>
  </page>
  <page>
    <title>Ada Programming/Web 2.0</title>
    <ns>0</ns>
    <id>35269</id>
    <revision>
      <id>3445548</id>
      <parentid>3445149</parentid>
      <timestamp>2018-07-22T21:37:53Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <minor/>
      <comment>/* News &amp; Blogs */ Google+</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4034" xml:space="preserve">{{Ada/Navigation|Wikis}}
__TOC__

Here is a list of [[Wikipedia:Web 2.0|Web 2.0]] resources about Ada:

== News &amp; Blogs ==

* [http://www.reddit.com/r/ada/ reddit.com &amp;mdash; Ada] [&lt;small&gt;[http://www.reddit.com/r/ada/.rss RSS]&lt;/small&gt;], social news website on which users can post links to content on the web
* [https://www.adacore.com/gems/ Ada Gems], programming tips and articles about specific language features
* [https://plus.google.com/communities/102688015980369378804 Ada Programming community at Google+]
* [https://twitter.com/adaprogrammers @AdaProgrammers at Twitter]
* [http://ada-programming.blogspot.com/ Ada Programming blog] [&lt;small&gt;[http://ada-programming.blogspot.com/feeds/posts/default RSS]&lt;/small&gt;], by Martin Krischik and other authors
* [https://blog.vacs.fr/vacs/ Java 2 Ada] [&lt;small&gt;[http://adrianhoe.com/adrianhoe/feed/rss/ RSS]&lt;/small&gt;]
* [http://blog.adalabs.com/ AdaLabs]
* [http://thomaslockerambling.blogspot.com/ Thomas Løcke Rambling]

== Forums &amp; developer rings ==
* [http://stackoverflow.com/questions/tagged/ada Stack Overflow &amp;mdash; Ada questions]
* [http://www.linkedin.com/groups?gid=114211 Linked In &amp;mdash; Ada developers group] (free register needed)
* [http://www.tek-tips.com/threadminder.cfm?pid=199 Tek-Tips &amp;mdash; Ada Forum]

== General Info ==
* [http://www.adaic.org/ Ada Resource Association]
* [http://www.slideshare.net/ SlideShare], presentations about [http://www.slideshare.net/tag/ada-programming Ada programming], [http://www.slideshare.net/tag/ada-95 Ada 95], [http://www.slideshare.net/tag/ada-2005 Ada 2005], [http://www.slideshare.net/tag/ada-2012 Ada 2012] tag pages.
* [http://www.ohloh.net/tags/ada Ohloh], a directory of Open Source projects. Its main features are [http://www.ohloh.net/languages/21 source code analysis] of public repositories and public reviews of projects
* [http://ada.krischik.com Ada@Krischik], Ada homepage of Martin Krischik
* [http://www.wikicfp.com/cfp/call?conference=ada WikiCFP &amp;mdash; Calls For Papers on Ada] [&lt;small&gt;[http://www.wikicfp.com/cfp/rss?cat=ada RSS]&lt;/small&gt;]
* [http://www.youtube.com/user/AdaCore05 AdaCore channel on youtube.com], Ada related videos.

== Wikimedia projects ==
* '''Wikipedia articles''' ([[wikipedia:Category:Ada programming language|Ada category]]):
** [[wikipedia:Ada (programming language)|Ada]]
** [[wikipedia:Jean Ichbiah|Jean Ichbiah]]
** [[wikipedia:Beaujolais effect|Beaujolais effect]]
** [[wikipedia:ISO 8652|ISO 8652]]
** [[wikipedia:Ada Semantic Interface Specification|Ada Semantic Interface Specification]]
** ...
* '''Wiktionary entries''':
** [[wiktionary:ACATS|ACATS]]
** [[wiktionary:Ada|Ada]]
** [[wiktionary:ASIS|ASIS]]
* '''Wikisource documents''':
** [[s:Steelman language requirements|Steelman language requirements]]
** [[s:Stoneman requirements|Stoneman requirements]]
* '''Wikibooks tutorials''':
** ''[[:es:Programación en Ada|Programación en Ada]]'', in Spanish
** ''[[:fr:Programmation Ada|Programmation Ada]]'', in French
** ''[[:it:Ada|Ada]]'', in Italian
* '''Wikiquote''':
** [http://en.wikiquote.org/wiki/Programming_languages#Ada Programming languages &amp;mdash; Ada]
* '''Wikiversity''':
** [http://en.wikiversity.org/wiki/Ada Ada course] (you can enroll!)

== Source code ==

* [http://wikibook-ada.sourceforge.net Examples ''Ada Programming'' wikibook]
* [http://www.rosettacode.org/wiki/Ada Rosetta Code &amp;mdash; Ada Category], programming examples in multiple languages

== Projects ==

* [http://adacl.sourceforge.net/index.php AdaCL]
* [http://booch95.sourceforge.net/pmwiki.php The Ada 95 Booch Components]
* [http://gnuada.sourceforge.net The GNU Ada Compiler]
* [http://gnat-asis.sourceforge.net ASIS]
* [http://gnat-glade.sourceforge.net GLADE]
* [http://gnat-florist.sourceforge.net Florist]
* [http://gcc.gnu.org/wiki/GNAT GNAT &amp;mdash; GCC Wiki]
* [https://devel.rtems.org/wiki/TBR/UserManual/RTEMSAda RTEMSAda]
* [http://avr-ada.sourceforge.net/ AVR-Ada] - Ada compiler for Atmel microcontrollers (Arduinos)

[[{{BOOKCATEGORY|Ada Programming}}|Web 2.0]]</text>
      <sha1>08v8no12yy254r6sy6eoud8jn92mc3e</sha1>
    </revision>
  </page>
  <page>
    <title>Computer Programming/Variables/2</title>
    <ns>0</ns>
    <id>196917</id>
    <redirect title="Template:Computer Programming/Variables/2" />
    <revision>
      <id>1515102</id>
      <timestamp>2009-06-01T19:35:13Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <comment>moved [[Computer Programming/Variables/2]] to [[Template:Computer Programming/Variables/2]]:&amp;#32;Making general template since used by multiple books.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="55" xml:space="preserve">#REDIRECT [[Template:Computer Programming/Variables/2]]</text>
      <sha1>j1p1zpwk2jmm9a3a778fl1x7z1os6bx</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/--</title>
    <ns>10</ns>
    <id>25586</id>
    <redirect title="Template:Ada/comment" />
    <revision>
      <id>3211252</id>
      <parentid>1372514</parentid>
      <timestamp>2017-05-01T01:23:56Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="96" xml:space="preserve">#redirect [[Template:Ada/comment]]

[[{{BOOKCATEGORY|Ada Programming}}/Code templates|^Comment]]</text>
      <sha1>9wdiakfv1vv85do29l71pjkq0msqhag</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/2005</title>
    <ns>10</ns>
    <id>19336</id>
    <revision>
      <id>3211089</id>
      <parentid>3083214</parentid>
      <timestamp>2017-04-30T19:14:43Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="282" xml:space="preserve">''This language feature is only available from [[Ada Programming/Ada 2005|Ada 2005]] on.''&lt;includeonly&gt;[[{{BOOKCATEGORY|Ada Programming}}/Ada 2005 feature|{{{1|{{SUBPAGENAME}}}}}]]&lt;/includeonly&gt;&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Tagging templates|Ada:2005]]
&lt;/noinclude&gt;</text>
      <sha1>64b6t93flx22twr89g3u4f31nsxfzl0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/2005/ARM-url</title>
    <ns>10</ns>
    <id>179104</id>
    <revision>
      <id>3211354</id>
      <parentid>1370043</parentid>
      <timestamp>2017-05-01T12:27:33Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="688" xml:space="preserve">&lt;includeonly&gt;http://www.adaic.com/standards/05rm/html/RM&lt;/includeonly&gt;&lt;noinclude&gt;
''Base URL to the Ada 2005 Reference Manual.''

This template shouldn't be used directly, it is used internally by other templates.

==See also==
* References to the LRM y AARM:
** {{tl|Ada/Ref RM}}
*** {{tl|Ada/83/Ref RM}}
*** {{tl|Ada/95/Ref RM}}
*** {{tl|Ada/2005/Ref RM}}
** {{tl|Ada/Ref AARM}}
*** {{tl|Ada/83/Ref AARM}}
*** {{tl|Ada/95/Ref AARM}}
*** {{tl|Ada/2005/Ref AARM}}
* Citations to the LRM y AARM:
** {{tl|Ada/95/Cite RM}}
** {{tl|Ada/2005/Cite RM}}
** {{tl|Ada/95/Cite AARM}}
** {{tl|Ada/2005/Cite AARM}}

[[{{BOOKCATEGORY|Ada Programming}}/Private templates|Base URL RM 2005]]
&lt;/noinclude&gt;</text>
      <sha1>3o616jimm8fp5j7g2vz8ptxxhu3qm4l</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/2005/Cite RM</title>
    <ns>10</ns>
    <id>179772</id>
    <revision>
      <id>3211355</id>
      <parentid>1372482</parentid>
      <timestamp>2017-05-01T12:28:07Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="460" xml:space="preserve">{{cite book
|     author = ISO/IEC 8652:2007
|      title = Ada&amp;nbsp;2005 Reference Manual
|    chapter = {{uc:{{{1}}}}}{{#if:{{{2|}}}|.{{{2}}}{{#if:{{{3|}}}|.{{{3}}}}}}} {{{title}}} {{#if:{{{par|}}}|({{{par}}})}}
| chapterurl = {{Ada/2005/URL RM|{{{1}}}|{{{2|}}}|{{{3|}}}|par={{{par|}}}|id={{{id|}}}}}
|      quote = {{{quote|}}}
| accessdate = {{{accessdate|}}}
}}&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Citation templates|Cite LRM:2005]]
&lt;/noinclude&gt;</text>
      <sha1>t98dvakqpkstguchuk4uglulxdqvdl4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/2005/RM</title>
    <ns>10</ns>
    <id>179361</id>
    <revision>
      <id>2504596</id>
      <parentid>1372544</parentid>
      <timestamp>2013-03-22T17:13:15Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <comment>share doc</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="256" xml:space="preserve">&lt;includeonly&gt;{{Ada/RM|1={{{1|}}}|2={{{2|}}}|3={{{3|}}}|title={{{title|}}}|lrm-url=http://www.adaic.com/standards/05rm/html/RM|aarm-url=http://www.adaic.com/standards/05aarm/html/AA}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation|Template:Ada/RM/doc}}&lt;/noinclude&gt;</text>
      <sha1>5w5oun3hwn7mb059x44lmqnz93ulh0f</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/2005/RM2</title>
    <ns>10</ns>
    <id>26157</id>
    <revision>
      <id>3211118</id>
      <parentid>1373584</parentid>
      <timestamp>2017-04-30T21:06:12Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="501" xml:space="preserve">[http://www.adaic.com/standards/05rm/html/RM-{{{1}}}-{{{2}}}.html {{{1}}}.{{{2}}} {{{3}}}] &lt;small style="color:grey66"&gt;([http://www.adaic.com/standards/05aarm/html/AA-{{{1}}}-{{{2}}}.html Annotated])&lt;/small&gt;&lt;includeonly&gt;[[{{BOOKCATEGORY|Ada Programming}}/Pages containing deprecated templates]]&lt;/includeonly&gt;&lt;noinclude&gt;


'''''This template is deprecated, {{tl|Ada/2005/RM}} with optional parameters should be used instead.'''''


[[{{BOOKCATEGORY|Ada Programming}}/Deprecated templates]]
&lt;/noinclude&gt;</text>
      <sha1>21nt6lzpzsyzil0tilw8nofj2iuuf1z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/2005/RM3</title>
    <ns>10</ns>
    <id>26156</id>
    <revision>
      <id>3211189</id>
      <parentid>1596642</parentid>
      <timestamp>2017-04-30T23:32:27Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="309" xml:space="preserve">[http://www.adaic.com/standards/05rm/html/RM-{{{1}}}-{{{2}}}-{{{3}}}.html {{{1}}}.{{{2}}}.{{{3}}} {{{4}}}] &lt;small style="color:grey66"&gt;([http://www.adaic.com/standards/05aarm/html/AA-{{{1}}}-{{{2}}}-{{{3}}}.html Annotated])&lt;/small&gt;&lt;noinclude&gt;[[{{BOOKCATEGORY|Ada Programming}}/Templates|2005/RM3]]&lt;/noinclude&gt;</text>
      <sha1>9lfp7unksgjpvly76kpmu41bj40t5yb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/2005/RMA1</title>
    <ns>10</ns>
    <id>26155</id>
    <revision>
      <id>3211157</id>
      <parentid>1596643</parentid>
      <timestamp>2017-04-30T22:30:51Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="268" xml:space="preserve">[http://www.adaic.com/standards/05rm/html/RM-{{{1}}}.html Annex {{{1}}} {{{2}}}] &lt;small style="color:grey66"&gt;([http://www.adaic.com/standards/05aarm/html/AA-{{{1}}}.html Annotated])&lt;/small&gt;&lt;noinclude&gt;[[{{BOOKCATEGORY|Ada Programming}}/Templates|2005/RMA1]]&lt;/noinclude&gt;</text>
      <sha1>btrfo9idb5defnw6jz21gnhqatedung</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/2005/RMA3</title>
    <ns>10</ns>
    <id>28492</id>
    <revision>
      <id>3211460</id>
      <parentid>1596646</parentid>
      <timestamp>2017-05-01T14:53:44Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="316" xml:space="preserve">[http://www.adaic.com/standards/05rm/html/RM-{{{1}}}-{{{2}}}-{{{3}}}.html Annex {{{1}}}.{{{2}}}.{{{3}}} {{{4}}}] &lt;small style="color:grey66"&gt;([http://www.adaic.com/standards/05aarm/html/AA-{{{1}}}-{{{2}}}-{{{3}}}.html Annotated])&lt;/small&gt;&lt;noinclude&gt;[[{{BOOKCATEGORY|Ada Programming}}/Templates|2005/RMA3]]&lt;/noinclude&gt;</text>
      <sha1>1dwu3d2cu60a8z805amzxzj3xynn1sz</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/2005/URL RM</title>
    <ns>10</ns>
    <id>179773</id>
    <redirect title="Template:Ada/URL RM" />
    <revision>
      <id>1370026</id>
      <timestamp>2009-01-01T11:25:03Z</timestamp>
      <contributor>
        <username>Suruena</username>
        <id>3371</id>
      </contributor>
      <comment>[[Template:Ada/2005/URL RM]] moved to [[Template:Ada/URL RM]]:&amp;#32;Generalization</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33" xml:space="preserve">#REDIRECT [[Template:Ada/URL RM]]</text>
      <sha1>inr8g3vmrfxk3xemskrjhk80ho1699o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/2012/RM</title>
    <ns>10</ns>
    <id>266110</id>
    <revision>
      <id>2504595</id>
      <parentid>2274556</parentid>
      <timestamp>2013-03-22T17:11:58Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <comment>share doc</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="262" xml:space="preserve">&lt;includeonly&gt;{{Ada/RM|1={{{1|}}}|2={{{2|}}}|3={{{3|}}}|title={{{title|}}}|lrm-url=http://www.ada-auth.org/standards/12rm/html/RM|aarm-url=http://www.ada-auth.org/standards/12aarm/html/AA}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation|Template:Ada/RM/doc}}&lt;/noinclude&gt;</text>
      <sha1>3q7os4h5d2ipu64k6yudi6xp4cvppwb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/83/RM</title>
    <ns>10</ns>
    <id>179141</id>
    <revision>
      <id>2504614</id>
      <parentid>2504612</parentid>
      <timestamp>2013-03-22T18:12:42Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <comment>+missing .html</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="893" xml:space="preserve">&lt;includeonly&gt;{{ #if: {{{1|}}} | [http://archive.adaic.com/standards/83lrm/html/lrm-{{ #switch: {{{1|}}}
 | A | B | C | D | E | F | TOC = {{{1}}}.html
 | {{#ifexpr: {{{1}}} &lt;= 9| 0{{{1}}} | {{{1}}} }}{{#if: {{{2|}}}
 | -{{#ifexpr: {{{2}}} &lt;= 9| 0{{{2}}} | {{{2}}} }}
}}.html&amp;#35;{{{1}}}{{ #if: {{{2|}}} | .{{{2}}} }}{{ #if: {{{3|}}} | .{{{3}}} }}
}} {{ #if: {{{2|}}} | {{ #switch: {{{1|}}}
 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14
 | A | B | C | D | E | F = {{{1}}}.{{{2}}}{{ #if: {{{3|}}} |.{{{3|}}}}}
 | #default = TOC
 }} | {{ #switch: {{{1|}}}
 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 = Section {{{1}}}
 | A | B | C | D | E | F = Annex {{{1}}}
 | #default = TOC
 }} }}{{ #if: {{{title|}}} | &lt;nowiki&gt;:&lt;/nowiki&gt; }} {{{title|}}}]
  | ERROR, at least one parameter is needed!
}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation|Template:Ada/RM/doc}}&lt;/noinclude&gt;</text>
      <sha1>4pez2y0ebtjg7mvcn47fvj49pcd6yf2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/95/AI</title>
    <ns>10</ns>
    <id>24282</id>
    <revision>
      <id>3211410</id>
      <parentid>1372575</parentid>
      <timestamp>2017-05-01T14:24:33Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="827" xml:space="preserve">&lt;includeonly&gt;[http://www.ada-auth.org/cgi-bin/cvsweb.cgi/AIs/AI-{{padleft:{{#if: {{{alt|}}} | {{#expr: (({{{alt}}} - 1) * 10000) + {{{1}}} }} | {{{1}}} }}|5}}.TXT{{#if:{{{rev|}}} |?rev={{{rev}}}}} AI95-{{padleft:{{{1}}}|5}}-{{padleft:{{#if: {{{alt|}}} | {{{alt}}} | 01 }}|2}} {{{2}}}]&lt;/includeonly&gt;&lt;noinclude&gt;

Usage:
 &lt;nowiki&gt;* {{Ada/95/AI|00285|Support for 16-bit and 32-bit characters}}&lt;/nowiki&gt;

gives:
* {{Ada/95/AI|00285|Support for 16-bit and 32-bit characters}}


Optional arguments:
 &lt;nowiki&gt;* {{Ada/95/AI|291|By-reference types and the recommended level of support for representation items|alt=2|rev=1.6}}&lt;/nowiki&gt;

gives:
* {{Ada/95/AI|00291|By-reference types and the recommended level of support for representation items|alt=2|rev=1.6}}


[[{{BOOKCATEGORY|Ada Programming}}/Linking templates|AI:1995]]
&lt;/noinclude&gt;</text>
      <sha1>f6y8bsqv5pttbr07jnf22yv5c6lupt1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/95/Cite AI</title>
    <ns>10</ns>
    <id>179719</id>
    <revision>
      <id>3211356</id>
      <parentid>1372487</parentid>
      <timestamp>2017-05-01T12:29:20Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="614" xml:space="preserve">{{cite web
|     author = AI95-{{padleft:{{{id}}}|5}}-{{padleft:{{#if: {{{alt|}}} | {{{alt}}} | 01 }}|2}} 
|       date = {{{date|}}}
|      title = {{{title}}}
|  publisher = Ada Rapporteur Group
|       work = {{#if: {{{class|}}} | Class: {{{class|}}} }}
|        url = http://www.ada-auth.org/cgi-bin/cvsweb.cgi/ais/ai-{{padleft:{{#if: {{{alt|}}} | {{#expr: (({{{alt}}} - 1) * 10000) + {{{id}}} }} | {{{id}}} }}|5}}.txt{{#if:{{{rev|}}} |?rev={{{rev}}}}}
|      quote = {{{quote|}}}
| accessdate = {{{accessdate|}}}
}}
&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Citation templates|Cite AI:1995]]
&lt;/noinclude&gt;</text>
      <sha1>lubdn2qpresw4a4wf4qdnnyvmizfxvb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/95/R1</title>
    <ns>10</ns>
    <id>34945</id>
    <revision>
      <id>3211461</id>
      <parentid>1596653</parentid>
      <timestamp>2017-05-01T14:53:46Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="182" xml:space="preserve">[http://www.adaic.org/standards/95rat/RAThtml/rat95-p{{{part}}}-{{lc:{{{1}}}}}.html {{uc:{{{1}}}}} {{{2}}}]&lt;noinclude&gt;[[{{BOOKCATEGORY|Ada Programming}}/Templates|95/R1]]&lt;/noinclude&gt;</text>
      <sha1>bktgfs8od5owfeanwlitubohvy7w35u</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/95/R2</title>
    <ns>10</ns>
    <id>34944</id>
    <revision>
      <id>3211271</id>
      <parentid>1596655</parentid>
      <timestamp>2017-05-01T02:30:07Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="191" xml:space="preserve">[http://www.adaic.org/standards/95rat/RAThtml/rat95-p{{{part}}}-{{lc:{{{1}}}}}.html#{{{2}}} {{{1}}}.{{{2}}} {{{3}}}]&lt;noinclude&gt;[[{{BOOKCATEGORY|Ada Programming}}/Templates|95/R2]]&lt;/noinclude&gt;</text>
      <sha1>c5ykodykqey65ia2uyq6jiuhnre22gn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/95/RM</title>
    <ns>10</ns>
    <id>179358</id>
    <revision>
      <id>2504598</id>
      <parentid>1372546</parentid>
      <timestamp>2013-03-22T17:14:45Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <comment>share doc</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="257" xml:space="preserve">&lt;includeonly&gt;{{Ada/RM|1={{{1|}}}|2={{{2|}}}|3={{{3|}}}|title={{{title|}}}|lrm-url=http://www.adaic.com/standards/95lrm/html/RM|aarm-url=http://www.adaic.com/standards/95aarm/html/AA}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation|Template:Ada/RM/doc}}&lt;/noinclude&gt;</text>
      <sha1>bqx6hc3fpeo5rz3w9w1pqgl27ubr8go</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/95/SG1</title>
    <ns>10</ns>
    <id>24268</id>
    <revision>
      <id>3211463</id>
      <parentid>1596664</parentid>
      <timestamp>2017-05-01T14:53:50Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="154" xml:space="preserve">[http://www.adaic.org/docs/95style/html/sec_{{{1}}}/ Chapter {{{1}}}: {{{2}}}]&lt;noinclude&gt;[[{{BOOKCATEGORY|Ada Programming}}/Templates|95/SG1]]&lt;/noinclude&gt;</text>
      <sha1>cfw7g7inj1xjfy1jnu3780v3160k75u</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/95/SG2</title>
    <ns>10</ns>
    <id>24269</id>
    <revision>
      <id>3211464</id>
      <parentid>1596665</parentid>
      <timestamp>2017-05-01T14:53:52Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="173" xml:space="preserve">[http://www.adaic.org/docs/95style/html/sec_{{{1}}}/{{{1}}}-{{{2}}}.html {{{1}}}.{{{2}}} {{{3}}}]&lt;noinclude&gt;[[{{BOOKCATEGORY|Ada Programming}}/Templates|95/SG2]]&lt;/noinclude&gt;</text>
      <sha1>bn5157ny2gz08spnum3r7tx9kjbb2uo</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/95/SG3</title>
    <ns>10</ns>
    <id>24270</id>
    <revision>
      <id>3211106</id>
      <parentid>1596666</parentid>
      <timestamp>2017-04-30T20:53:03Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="189" xml:space="preserve">[http://www.adaic.org/docs/95style/html/sec_{{{1}}}/{{{1}}}-{{{2}}}-{{{3}}}.html {{{1}}}.{{{2}}}.{{{3}}} {{{4}}}]&lt;noinclude&gt;[[{{BOOKCATEGORY|Ada Programming}}/Templates|95/SG3]]&lt;/noinclude&gt;</text>
      <sha1>rjkwbqbfq58yxetrauuxuo39c60dtmj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/95/cite AI</title>
    <ns>10</ns>
    <id>179722</id>
    <redirect title="Template:Ada/95/Cite AI" />
    <revision>
      <id>3211359</id>
      <parentid>3211358</parentid>
      <timestamp>2017-05-01T12:38:05Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>typo</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="108" xml:space="preserve">#REDIRECT [[Template:Ada/95/Cite AI]]

[[{{BOOKCATEGORY|Ada Programming}}/Citation templates|^Cite AI:1995]]</text>
      <sha1>ewkdut4qlhc7cfq9s9updwscl5iugj9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/ARM-url</title>
    <ns>10</ns>
    <id>179102</id>
    <redirect title="Template:Ada/2005/ARM-url" />
    <revision>
      <id>3211361</id>
      <parentid>1370781</parentid>
      <timestamp>2017-05-01T12:39:10Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="113" xml:space="preserve">#REDIRECT [[Template:Ada/2005/ARM-url]]

[[{{BOOKCATEGORY|Ada Programming}}/Private templates|^Base URL RM Last]]</text>
      <sha1>b5aoufd0orp2sqro4wo7ixhbjcjbmfp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/Cite cla</title>
    <ns>10</ns>
    <id>179778</id>
    <revision>
      <id>3211453</id>
      <parentid>1372491</parentid>
      <timestamp>2017-05-01T14:46:43Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="315" xml:space="preserve">{{cite newsgroup 
 |      title = {{{title}}}
 |     author = {{{author|}}}
 |       date = {{{date|}}}
 |  newsgroup = comp.lang.ada
 |        url = {{{url|}}}
 |      quote = {{{quote|}}}
 | accessdate = {{{accessdate|}}}
}}&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Citation templates|Cite CLA]]
&lt;/noinclude&gt;</text>
      <sha1>91om14ulfc3owvje3gdrwj7ok99taho</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/Integer subtypes diagram</title>
    <ns>10</ns>
    <id>86104</id>
    <revision>
      <id>3211371</id>
      <parentid>1373623</parentid>
      <timestamp>2017-05-01T13:39:50Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1088" xml:space="preserve">&lt;center&gt;
&lt;timeline&gt;
ImageSize  = width:535 height:100
PlotArea   = width:480 height:60 left:50 bottom:20
TimeAxis   = orientation:horizontal
DateFormat = yyyy
Define $first = -20
Define $last = 20
Period     = from:$first till:$last
AlignBars  = early
Colors =
  id:canvas value:rgb(1,1,0.85)
  id:grey value:gray(0.5)
ScaleMajor = unit:year increment:1000 start:0 gridcolor:grey
BackgroundColors = canvas:canvas
PlotData =
  width:2
  bar:Positive from:1 till:$last color:blue
  bar:Positive at:1 text:"Positive'First=1" shift:(3,3) fontsize:M
  bar:Natural from:0 till:$last color:green
  bar:Natural at:0 text:"Natural'First=0" shift:(3,3) fontsize:M
  bar:Integer from:$first till:$last color:red
  bar:Integer at:0 mark:(line,white)
  bar:Integer at:1 mark:(line,white)
  bar:Integer at:1 text:"1" shift:(0,3)
  bar:Integer at:$first text:"Integer'First" align:left shift:(3,3) fontsize:M
  bar:Integer at:$last text:"Integer'Last" align:right shift:(-1,3) fontsize:M
&lt;/timeline&gt;
&lt;/center&gt;&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Figures|Integer subtypes diagram]]
&lt;/noinclude&gt;</text>
      <sha1>707i6lubjpxauvsjfnfrsmpf0ryvkhh</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/Keywords</title>
    <ns>10</ns>
    <id>23899</id>
    <revision>
      <id>3543725</id>
      <parentid>3211159</parentid>
      <timestamp>2019-05-07T20:17:06Z</timestamp>
      <contributor>
        <username>Tacsipacsi</username>
        <id>694515</id>
      </contributor>
      <comment>reduce the number of HTML elements and attributes, make it up to 100% wide on small screens</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2650" xml:space="preserve">{| class="toccolours" style="margin: 2.5em auto 0 auto; min-width:75%; clear:both;"
! style="text-align:center; background:#ccccff" colspan="5" | [[Ada Programming/All Keywords|Ada Keywords]]
|- 
| &lt;tt&gt;{{Ada/kw|abort}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|else}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|new}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|return}}&lt;/tt&gt;
|
|-
| &lt;tt&gt;{{Ada/kw|abs}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|elsif}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|not}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|reverse}}&lt;/tt&gt;
|
|- 
| &lt;tt&gt;{{Ada/kw|abstract}}&lt;/tt&gt; (Ada&amp;nbsp;95)
| &lt;tt&gt;{{Ada/kw|end}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|null}}&lt;/tt&gt;
|
|
|- 
| &lt;tt&gt;{{Ada/kw|accept}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|entry}}&lt;/tt&gt;
|
| &lt;tt&gt;{{Ada/kw|select}}&lt;/tt&gt;
|
|- 
| &lt;tt&gt;{{Ada/kw|access}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|exception}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|of}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|separate}}&lt;/tt&gt;
|
|- 
| &lt;tt&gt;{{Ada/kw|aliased}}&lt;/tt&gt; (Ada&amp;nbsp;95)
| &lt;tt&gt;{{Ada/kw|exit}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|or}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|some}}&lt;/tt&gt; (Ada&amp;nbsp;2012)
|
|- 
| &lt;tt&gt;{{Ada/kw|all}}&lt;/tt&gt;
|
| &lt;tt&gt;{{Ada/kw|others}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|subtype}}&lt;/tt&gt;
|
|- 
| &lt;tt&gt;{{Ada/kw|and}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|for}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|out}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|synchronized}}&lt;/tt&gt; (Ada&amp;nbsp;2005)
|
|- 
| &lt;tt&gt;{{Ada/kw|array}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|function}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|overriding}}&lt;/tt&gt; (Ada&amp;nbsp;2005)
|
|
|- 
| &lt;tt&gt;{{Ada/kw|at}}&lt;/tt&gt;
|
|
| &lt;tt&gt;{{Ada/kw|tagged}}&lt;/tt&gt; (Ada&amp;nbsp;95)
|
|- 
|
| &lt;tt&gt;{{Ada/kw|generic}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|package}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|task}}&lt;/tt&gt;
|
|- 
| &lt;tt&gt;{{Ada/kw|begin}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|goto}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|pragma}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|terminate}}&lt;/tt&gt;
|
|-
| &lt;tt&gt;{{Ada/kw|body}}&lt;/tt&gt;
|
| &lt;tt&gt;{{Ada/kw|private}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|then}}&lt;/tt&gt;
|
|-
|
| &lt;tt&gt;{{Ada/kw|if}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|procedure}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|type}}&lt;/tt&gt;
|
|- 
| &lt;tt&gt;{{Ada/kw|case}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|in}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|protected}}&lt;/tt&gt; (Ada&amp;nbsp;95)
|
|
|- 
| &lt;tt&gt;{{Ada/kw|constant}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|interface}}&lt;/tt&gt; (Ada&amp;nbsp;2005)
|
| &lt;tt&gt;{{Ada/kw|until}}&lt;/tt&gt; (Ada&amp;nbsp;95)
|
|- 
|
| &lt;tt&gt;{{Ada/kw|is}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|raise}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|use}}&lt;/tt&gt;
|
|-
| &lt;tt&gt;{{Ada/kw|declare}}&lt;/tt&gt;
|
| &lt;tt&gt;{{Ada/kw|range}}&lt;/tt&gt;
|
|
|- 
| &lt;tt&gt;{{Ada/kw|delay}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|limited}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|record}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|when}}&lt;/tt&gt;
|
|- 
| &lt;tt&gt;{{Ada/kw|delta}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|loop}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|rem}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|while}}&lt;/tt&gt;
|
|- 
| &lt;tt&gt;{{Ada/kw|digits}}&lt;/tt&gt;
|
| &lt;tt&gt;{{Ada/kw|renames}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|with}}&lt;/tt&gt;
|
|- 
| &lt;tt&gt;{{Ada/kw|do}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|mod}}&lt;/tt&gt;
| &lt;tt&gt;{{Ada/kw|requeue}}&lt;/tt&gt; (Ada&amp;nbsp;95)
| &lt;tt&gt;{{Ada/kw|xor}}&lt;/tt&gt;
|
|}&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Navigation templates|Keywords]]
&lt;/noinclude&gt;</text>
      <sha1>kngangl9etfusmbz5imeqd8yw291xzx</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/Navigation</title>
    <ns>10</ns>
    <id>20237</id>
    <revision>
      <id>3445413</id>
      <parentid>3211107</parentid>
      <timestamp>2018-07-22T11:26:53Z</timestamp>
      <contributor>
        <username>ManuelGR</username>
        <id>3056</id>
      </contributor>
      <comment>New picture for the book. Discussion: [[Talk:Ada Programming/New Picture]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="386" xml:space="preserve">&lt;div id="toc"&gt;&lt;small&gt;[[Subject:Computing|Computing]] » [[Subject:Computer science|Computer Science]] » [[Subject:Computer programming|Computer Programming]] » [[Ada Programming]]&lt;/small&gt;&lt;/div&gt;
-------------
[[File:Ada_Mascot_with_slogan.png|right|float|157px]]&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Navigation templates|Navigation]]
[[Category:Exclude in print]]
&lt;/noinclude&gt;</text>
      <sha1>0de3d9id1udjw8zt9ok8gy1t2xv5mnb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/Operators</title>
    <ns>10</ns>
    <id>35847</id>
    <revision>
      <id>3211200</id>
      <parentid>1372541</parentid>
      <timestamp>2017-04-30T23:53:57Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1710" xml:space="preserve">&lt;br clear=all&gt;
&lt;center&gt;
{| width="75%"  class="toccolours" style="margin: 0 2em 0 2em;"
! align="center" style="background:#ccccff" width="100%" | [[Ada Programming/All Operators|Ada Operators]]
|-
| align="center" |
{| width="100%" border="0"
|-
| &lt;tt&gt;'''[[Ada Programming/Keywords/and|and]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Keywords/and#Boolean shortcut operator|and then]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters/greater than|&gt;]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters/+|+]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Keywords/abs|abs]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters/&amp;|&amp;]]'''&lt;/tt&gt; 
|-
| &lt;tt&gt;'''[[Ada Programming/Keywords/or|or]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Keywords/or#Boolean shortcut operator|or else]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters/greater than or equal to|&gt;=]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters/-|-]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Keywords/mod|mod]]'''&lt;/tt&gt;
|
|-
| &lt;tt&gt;'''[[Ada Programming/Keywords/xor|xor]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters/=|=]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters/less than|&lt;]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters/*|*]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Keywords/rem|rem]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Keywords/in|in]]'''&lt;/tt&gt;
|-
| &lt;tt&gt;'''[[Ada Programming/Keywords/not|not]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters//=|/=]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters/less than or equal to|&lt;=]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters/**|**]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Delimiters//|/]]'''&lt;/tt&gt;
| &lt;tt&gt;'''[[Ada Programming/Keywords/in|not in]]'''&lt;/tt&gt;
|}
|}
&lt;/center&gt;&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Navigation templates|Operators]]
&lt;/noinclude&gt;</text>
      <sha1>4798dp6jwahcy5uvgh1icraqqi6uiu4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/RM</title>
    <ns>10</ns>
    <id>179359</id>
    <revision>
      <id>2504600</id>
      <parentid>2504599</parentid>
      <timestamp>2013-03-22T17:18:43Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <minor/>
      <comment>fixed</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1116" xml:space="preserve">&lt;includeonly&gt;{{ #if: {{{1|}}} | [{{{lrm-url|http://www.ada-auth.org/standards/12rm/html/RM}}}-{{ #switch: {{{1|}}}
 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14
 | A | B | C | D | E | F | G | H | I | J | K | L | M | N | P = {{{1}}}
 | #default = TOC
 }}{{ #if: {{{2|}}} | -{{{2}}} }}{{ #if: {{{3|}}} | -{{{3}}} }}.html {{ #if: {{{2|}}}
 | {{ #switch: {{{1|}}}
 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14
 | A | B | C | D | E | F | G | H | I | J | K | L | M | N | P = {{{1}}}.{{{2}}}{{ #if: {{{3|}}} |.{{{3|}}}}}
 | #default = TOC
 }} | {{ #switch: {{{1|}}}
 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 = Section {{{1}}}
 | A | B | C | D | E | F | G | H | I | J | K | L | M | N | P = Annex {{{1}}}
 | #default = TOC:
 }} }}{{#if:{{{title|}}}|&lt;nowiki&gt;:&lt;/nowiki&gt;}} {{{title|}}}] &lt;small style="color:grey66"&gt;([{{{aarm-url|http://www.ada-auth.org/standards/12aarm/html/AA}}}-{{{1}}}{{ #if: {{{2|}}} | -{{{2}}} }}{{ #if: {{{3|}}} | -{{{3|}}} }}.html Annotated])&lt;/small&gt;
  | ERROR, at least one parameter is needed!
}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>nzfxsy0ygoh6qk90y4pj09wsbxdo6vb</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/RM2</title>
    <ns>10</ns>
    <id>26141</id>
    <redirect title="Template:Ada/2005/RM2" />
    <revision>
      <id>3211119</id>
      <parentid>1369231</parentid>
      <timestamp>2017-04-30T21:07:23Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="94" xml:space="preserve">#REDIRECT [[Template:Ada/2005/RM2]]

[[{{BOOKCATEGORY|Ada Programming}}/Deprecated templates]]</text>
      <sha1>smd5l67tn4f91moxk6fm98f7f8knofv</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/RM3</title>
    <ns>10</ns>
    <id>26142</id>
    <redirect title="Template:Ada/2005/RM3" />
    <revision>
      <id>1197310</id>
      <parentid>211496</parentid>
      <timestamp>2008-05-30T09:57:56Z</timestamp>
      <contributor>
        <username>Suruena</username>
        <id>3371</id>
      </contributor>
      <comment>Ada 2005 is the current version of Ada</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="35" xml:space="preserve">#REDIRECT [[Template:Ada/2005/RM3]]</text>
      <sha1>a2dd7gfru8jzqcus97ot5lcnb824bim</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/RMA1</title>
    <ns>10</ns>
    <id>35865</id>
    <redirect title="Template:Ada/2005/RMA1" />
    <revision>
      <id>3211158</id>
      <parentid>1369232</parentid>
      <timestamp>2017-04-30T22:31:24Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="95" xml:space="preserve">#REDIRECT [[Template:Ada/2005/RMA1]]

[[{{BOOKCATEGORY|Ada Programming}}/Deprecated templates]]</text>
      <sha1>anlf74fc76d0g876rxcpnxgz8fjdfe2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/SG1</title>
    <ns>10</ns>
    <id>26144</id>
    <redirect title="Template:Ada/95/SG1" />
    <revision>
      <id>211508</id>
      <parentid>175421</parentid>
      <timestamp>2005-08-12T15:23:33Z</timestamp>
      <contributor>
        <username>Suruena</username>
        <id>3371</id>
      </contributor>
      <comment>Used templates with the new maming policy</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33" xml:space="preserve">#REDIRECT [[Template:Ada/95/SG1]]</text>
      <sha1>3zg3m8dzgzoy61zbrwx5x0rj3rwuqqe</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/SG2</title>
    <ns>10</ns>
    <id>26145</id>
    <redirect title="Template:Ada/95/SG2" />
    <revision>
      <id>211507</id>
      <parentid>175422</parentid>
      <timestamp>2005-08-12T15:23:28Z</timestamp>
      <contributor>
        <username>Suruena</username>
        <id>3371</id>
      </contributor>
      <comment>Used templates with the new maming policy</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33" xml:space="preserve">#REDIRECT [[Template:Ada/95/SG2]]</text>
      <sha1>5ri9bbdpi1ob1adqg67zr417eak12ur</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/SG3</title>
    <ns>10</ns>
    <id>26146</id>
    <redirect title="Template:Ada/95/SG3" />
    <revision>
      <id>211509</id>
      <parentid>175423</parentid>
      <timestamp>2005-08-12T15:23:35Z</timestamp>
      <contributor>
        <username>Suruena</username>
        <id>3371</id>
      </contributor>
      <comment>Used templates with the new maming policy</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33" xml:space="preserve">#REDIRECT [[Template:Ada/95/SG3]]</text>
      <sha1>9nn7r7jpswlx2ng9cntfpooe47bgpr6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/Sourceforge</title>
    <ns>10</ns>
    <id>26986</id>
    <revision>
      <id>3211125</id>
      <parentid>1372554</parentid>
      <timestamp>2017-04-30T21:11:36Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="562" xml:space="preserve">&lt;div style="background-color: snow; border: solid 1px PeachPuff; padding: 1em;"&gt;File: {{{1}}} &lt;small&gt;([http://wikibook-ada.svn.sourceforge.net/viewvc/wikibook-ada/trunk/demos/Source/{{{1}}}?view=markup view], [http://wikibook-ada.svn.sourceforge.net/viewvc/*checkout*/wikibook-ada/trunk/demos/Source/{{{1}}} plain text], [https://sourceforge.net/project/showfiles.php?group_id=124904 download page], [http://wikibook-ada.sourceforge.net/html/index.html browse all])&lt;/small&gt;&lt;/div&gt;&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Templates|Sourceforge]]
&lt;/noinclude&gt;</text>
      <sha1>90all48expdwz3fyivc21ib3txmnqeg</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/URL RM</title>
    <ns>10</ns>
    <id>179771</id>
    <revision>
      <id>3211362</id>
      <parentid>1370798</parentid>
      <timestamp>2017-05-01T12:39:51Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="678" xml:space="preserve">&lt;includeonly&gt;{{#if: {{{1|}}}
  | {{ #if: {{{base-url|}}} | {{{base-url}}} | {{Ada/ARM-url}} }}-{{uc:{{{1}}}}}{{ #if: {{{2|}}} | -{{{2}}} }}{{ #if: {{{3|}}} | -{{{3}}} }}.html{{ #if: {{{id|}}} | &amp;#35;{{{id}}}}}
  | ERROR, at least the section number is required!
}}&lt;/includeonly&gt;&lt;noinclude&gt;
''URL to the last version of the Ada Reference Manual.''

This template shouldn't be used directly, it is used internally by other templates.

Usage:
  &lt;nowiki&gt;{{&lt;/nowiki&gt;Ada/URL RM|13|5|3|par=2|id=I4589|base-url=...}}

Gives:

{{Ada/URL RM|13|5|3|par=2|id=I4589}}

All parameters but the first one are optional.

[[{{BOOKCATEGORY|Ada Programming}}/Private templates|URL RM]]
&lt;/noinclude&gt;</text>
      <sha1>sr7kd0l2wbwmdcr0m27j3merqt0zmgu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/at</title>
    <ns>10</ns>
    <id>179711</id>
    <redirect title="Template:Ada/attribute" />
    <revision>
      <id>3211441</id>
      <parentid>1372516</parentid>
      <timestamp>2017-05-01T14:35:43Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="100" xml:space="preserve">#REDIRECT [[Template:Ada/attribute]]

[[{{BOOKCATEGORY|Ada Programming}}/Code templates|^Attribute]]</text>
      <sha1>n36pwdw5s7h3srzb6mdscyih1pb1rca</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/attribute</title>
    <ns>10</ns>
    <id>24273</id>
    <revision>
      <id>3211108</id>
      <parentid>1372498</parentid>
      <timestamp>2017-04-30T20:57:49Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="304" xml:space="preserve">{{#ifeq:{{{1}}}|'|&lt;font style="color:maroon"&gt;&amp;#39;&lt;/font&gt;&lt;font style="color:teal"&gt;[[Ada Programming/Attributes/'{{{2}}}|{{{2}}}]]&lt;/font&gt;|&lt;font style="color:teal"&gt;[[Ada Programming/Attributes/'{{{1}}}|{{{1}}}]]}}&lt;/font&gt;&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Code templates|Attribute]]
&lt;/noinclude&gt;</text>
      <sha1>lhmpkdqgegzs4v939ksu1bq3sv26b51</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/comment</title>
    <ns>10</ns>
    <id>25566</id>
    <revision>
      <id>3211280</id>
      <parentid>1372502</parentid>
      <timestamp>2017-05-01T02:56:06Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="133" xml:space="preserve">&lt;font style="color:gray"&gt;&lt;i&gt;-- {{{1}}}&lt;/i&gt;&lt;/font&gt;&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Code templates|Comment]]
&lt;/noinclude&gt;</text>
      <sha1>ecer6ewfspctfm6zjs5rbnjv5qfr1n5</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/delimiter</title>
    <ns>10</ns>
    <id>26481</id>
    <revision>
      <id>3211109</id>
      <parentid>1372497</parentid>
      <timestamp>2017-04-30T20:59:16Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2683" xml:space="preserve">&lt;font style="color:maroon"&gt;[[Ada Programming{{#if: {{{2|}}} | /Delimiters/{{{1}}} |
{{ #ifeq: {{{1}}} | &amp;  | /Delimiters/&amp; |
{{ #ifeq: {{{1}}} | '  | /Delimiters/' |
{{ #ifeq: {{{1}}} | (  | /Delimiters/( |
{{ #ifeq: {{{1}}} | )  | /Delimiters/) |
{{ #ifeq: {{{1}}} | *  | /Delimiters/* |
{{ #ifeq: {{{1}}} | +  | /Delimiters/+ |
{{ #ifeq: {{{1}}} | ,  | /Delimiters/, |
{{ #ifeq: {{{1}}} | -  | /Delimiters/- |
{{ #ifeq: {{{1}}} | .  | /Delimiters/dot |
{{ #ifeq: {{{1}}} | /  | /Delimiters// |
{{ #ifeq: {{{1}}} | :  | /Delimiters/: |
{{ #ifeq: {{{1}}} | ;  | /Delimiters/; |
{{ #ifeq: {{{1}}} | &lt;  | /Delimiters/less than |
{{ #ifeq: {{{1}}} | =  | /Delimiters/= |
{{ #ifeq: {{{1}}} | &gt;  | /Delimiters/greater than |
{{ #ifeq: {{{1}}} | &amp;#124; | /Delimiters/vertical line |
{{ #ifeq: {{{1}}} | =&gt; | /Delimiters/arrow |
{{ #ifeq: {{{1}}} | .. | /Delimiters/double dot |
{{ #ifeq: {{{1}}} | ** | /Delimiters/** |
{{ #ifeq: {{{1}}} | := | /Delimiters/:= |
{{ #ifeq: {{{1}}} | /= | /Delimiters//= |
{{ #ifeq: {{{1}}} | &gt;= | /Delimiters/greater than or equal to |
{{ #ifeq: {{{1}}} | &lt;= | /Delimiters/less than or equal to |
{{ #ifeq: {{{1}}} | &lt;&lt; | /Delimiters/left label |
{{ #ifeq: {{{1}}} | &gt;&gt; | /Delimiters/right label |
{{ #ifeq: {{{1}}} | &lt;&gt; | /Delimiters/box |
{{ #ifeq: {{{1}}} | "  | /Special/" |
{{ #ifeq: {{{1}}} | #  | /Special/number sign |
| {{{1}}} }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}|{{#if: {{{2|}}} | {{{2}}} |
{{ #ifeq: {{{1}}} | &amp;  | &amp; |
{{ #ifeq: {{{1}}} | '  | ' |
{{ #ifeq: {{{1}}} | (  | ( |
{{ #ifeq: {{{1}}} | )  | ) |
{{ #ifeq: {{{1}}} | *  | &amp;#42; |
{{ #ifeq: {{{1}}} | +  | + |
{{ #ifeq: {{{1}}} | ,  | , |
{{ #ifeq: {{{1}}} | -  | - |
{{ #ifeq: {{{1}}} | .  | . |
{{ #ifeq: {{{1}}} | /  | / |
{{ #ifeq: {{{1}}} | :  | &amp;#58; |
{{ #ifeq: {{{1}}} | ;  | &amp;#59; |
{{ #ifeq: {{{1}}} | &lt;  | &lt; |
{{ #ifeq: {{{1}}} | =  | = |
{{ #ifeq: {{{1}}} | &gt;  | &gt; |
{{ #ifeq: {{{1}}} | &amp;#124; |&amp;#124;  |
{{ #ifeq: {{{1}}} | =&gt; | =&gt; |
{{ #ifeq: {{{1}}} | .. | .. |
{{ #ifeq: {{{1}}} | ** | &amp;#42;* |
{{ #ifeq: {{{1}}} | := | &amp;#58;= |
{{ #ifeq: {{{1}}} | /= | /= |
{{ #ifeq: {{{1}}} | &gt;= | &gt;= |
{{ #ifeq: {{{1}}} | &lt;= | &lt;= |
{{ #ifeq: {{{1}}} | &lt;&lt; | &lt;&lt; |
{{ #ifeq: {{{1}}} | &gt;&gt; | &gt;&gt; |
{{ #ifeq: {{{1}}} | &lt;&gt; | &lt;&gt; |
{{ #ifeq: {{{1}}} | "  | " |
{{ #ifeq: {{{1}}} | #  | &amp;#35; |
| &amp;nbsp; }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}]]&lt;/font&gt;{{#if:{{{2|}}}|[[{{BOOKCATEGORY|Ada Programming}}/Pages containing deprecated templates]]}}&lt;noinclude&gt;
&lt;!-- The optional parameter is deprecated --&gt;

Usage:
 * &lt;nowiki&gt;{{&lt;/nowiki&gt;Ada/delimiter|:}}

gives:
* {{Ada/delimiter|:}}

[[{{BOOKCATEGORY|Ada Programming}}/Code templates|Delimiter]]
&lt;/noinclude&gt;</text>
      <sha1>2mgz5tfos0pb8saf36fdmz7ms0cr7dq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/dl</title>
    <ns>10</ns>
    <id>179709</id>
    <redirect title="Template:Ada/delimiter" />
    <revision>
      <id>3211192</id>
      <parentid>1372517</parentid>
      <timestamp>2017-04-30T23:35:41Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="100" xml:space="preserve">#REDIRECT [[Template:Ada/delimiter]]

[[{{BOOKCATEGORY|Ada Programming}}/Code templates|^Delimiter]]</text>
      <sha1>i9z0tbqhjbvgxfcninz5qzow4gpodbm</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/keyword</title>
    <ns>10</ns>
    <id>24271</id>
    <redirect title="Template:Ada/kw" />
    <revision>
      <id>3211168</id>
      <parentid>1372519</parentid>
      <timestamp>2017-04-30T22:57:02Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="91" xml:space="preserve">#redirect [[Template:Ada/kw]]

[[{{BOOKCATEGORY|Ada Programming}}/Code templates|^Keyword]]</text>
      <sha1>7fhexrtiymkiyytypeqxqggq23lyaqq</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/kw</title>
    <ns>10</ns>
    <id>24090</id>
    <revision>
      <id>3653012</id>
      <parentid>3211111</parentid>
      <timestamp>2020-01-14T10:08:59Z</timestamp>
      <contributor>
        <username>Tacsipacsi</username>
        <id>694515</id>
      </contributor>
      <comment>use TemplateStyles, move documentation to subpage</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="157" xml:space="preserve">&lt;templatestyles src="Ada/kw/styles.css" /&gt; &lt;code class="ada-kw"&gt;[[Ada Programming/Keywords/{{{1}}}|{{{1}}}]]&lt;/code&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>5qmsr57a57skbqi1mjgg0cmzsjb7gtu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/kw/styles.css</title>
    <ns>10</ns>
    <id>413185</id>
    <revision>
      <id>3653010</id>
      <timestamp>2020-01-14T10:07:51Z</timestamp>
      <contributor>
        <username>Tacsipacsi</username>
        <id>694515</id>
      </contributor>
      <comment>Created page with ".ada-kw { 	background: none; 	border: none; 	padding: 0; 	margin: 0; 	color: DodgerBlue; 	font-weight: bold; } .ada-kw a, .ada-kw a:visited { 	color: inherit; }"</comment>
      <model>sanitized-css</model>
      <format>text/css</format>
      <text bytes="160" xml:space="preserve">.ada-kw {
	background: none;
	border: none;
	padding: 0;
	margin: 0;
	color: DodgerBlue;
	font-weight: bold;
}
.ada-kw a,
.ada-kw a:visited {
	color: inherit;
}</text>
      <sha1>rcysjjxjvtojg4ime9opg1qbsiph2k1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/op</title>
    <ns>10</ns>
    <id>179712</id>
    <redirect title="Template:Ada/operator" />
    <revision>
      <id>3211434</id>
      <parentid>1372518</parentid>
      <timestamp>2017-05-01T14:35:26Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="98" xml:space="preserve">#REDIRECT [[Template:Ada/operator]]

[[{{BOOKCATEGORY|Ada Programming}}/Code templates|^Operator]]</text>
      <sha1>lgk1c3e4wps1gcleavikdyq8hz07v7d</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/operator</title>
    <ns>10</ns>
    <id>24272</id>
    <revision>
      <id>3211425</id>
      <parentid>3211424</parentid>
      <timestamp>2017-05-01T14:30:23Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2316" xml:space="preserve">&lt;font style="color:ForestGreen"&gt;[[Ada Programming{{#if: {{{2|}}} | /Operators/{{{1}}} |
{{ #ifeq: {{{1}}} | and | /Operators/and |
{{ #ifeq: {{{1}}} | or  | /Operators/or  |
{{ #ifeq: {{{1}}} | xor | /Operators/xor |
{{ #ifeq: {{{1}}} | mod | /Operators/mod |
{{ #ifeq: {{{1}}} | rem | /Operators/rem |
{{ #ifeq: {{{1}}} | not | /Operators/not |
{{ #ifeq: {{{1}}} | abs | /Operators/abs |
{{ #ifeq: {{{1}}} | and then | /Operators/and |
{{ #ifeq: {{{1}}} | or else  | /Operators/or |
{{ #ifeq: {{{1}}} | in       | /Operators/in |
{{ #ifeq: {{{1}}} | not in   | /Operators/in |
{{ #ifeq: {{{1}}} | &amp;  | /Operators/&amp; |
{{ #ifeq: {{{1}}} | *  | /Operators/* |
{{ #ifeq: {{{1}}} | +  | /Operators/+ |
{{ #ifeq: {{{1}}} | -  | /Operators/- |
{{ #ifeq: {{{1}}} | /  | /Operators// |
{{ #ifeq: {{{1}}} | &lt;  | /Operators/less than |
{{ #ifeq: {{{1}}} | =  | /Operators/= |
{{ #ifeq: {{{1}}} | &gt;  | /Operators/greater than |
{{ #ifeq: {{{1}}} | ** | /Operators/** |
{{ #ifeq: {{{1}}} | /= | /Operators//= |
{{ #ifeq: {{{1}}} | &gt;= | /Operators/greater than or equal to |
{{ #ifeq: {{{1}}} | &lt;= | /Operators/less than or equal to |
| {{{1}}} }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}|{{#if: {{{2|}}} | {{{2}}} |
{{ #ifeq: {{{1}}} | and | and |
{{ #ifeq: {{{1}}} | or  | or  |
{{ #ifeq: {{{1}}} | xor | xor |
{{ #ifeq: {{{1}}} | mod | mod |
{{ #ifeq: {{{1}}} | rem | rem |
{{ #ifeq: {{{1}}} | not | not |
{{ #ifeq: {{{1}}} | abs | abs |
{{ #ifeq: {{{1}}} | and then | and then |
{{ #ifeq: {{{1}}} | or else  | or else |
{{ #ifeq: {{{1}}} | in       | in |
{{ #ifeq: {{{1}}} | not in   | not in |
{{ #ifeq: {{{1}}} | &amp;  | &amp; |
{{ #ifeq: {{{1}}} | *  | &amp;#42; |
{{ #ifeq: {{{1}}} | +  | + |
{{ #ifeq: {{{1}}} | -  | - |
{{ #ifeq: {{{1}}} | /  | / |
{{ #ifeq: {{{1}}} | &lt;  | &lt; |
{{ #ifeq: {{{1}}} | =  | = |
{{ #ifeq: {{{1}}} | &gt;  | &gt; |
{{ #ifeq: {{{1}}} | ** | &amp;#42;* |
{{ #ifeq: {{{1}}} | /= | /= |
{{ #ifeq: {{{1}}} | &gt;= | &gt;= |
{{ #ifeq: {{{1}}} | &lt;= | &lt;= |
| &amp;nbsp; }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}]]&lt;/font&gt;{{#if:{{{2|}}}|[[{{BOOKCATEGORY|Ada Programming}}/Pages containing deprecated templates]]}}&lt;noinclude&gt;

&lt;!-- The optional parameter is deprecated --&gt;

Usage:
 *&lt;nowiki&gt;{{&lt;/nowiki&gt;Ada/operator|&gt;}}

gives:
*{{Ada/operator|&gt;}}

[[{{BOOKCATEGORY|Ada Programming}}/Code templates|Operator]]
&lt;/noinclude&gt;</text>
      <sha1>pkwqd0izjp5kw9plh5b917yiec0cid7</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/package</title>
    <ns>10</ns>
    <id>24275</id>
    <revision>
      <id>3211114</id>
      <parentid>1372499</parentid>
      <timestamp>2017-04-30T21:01:17Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="585" xml:space="preserve">&lt;font style="color:OliveDrab4"&gt;[[Ada Programming/Libraries/{{{1}}}|{{{1}}}]]&lt;/font&gt;{{ #if: {{{2|}}} | {{Ada/delimiter|.}}&lt;font style="color:OliveDrab4"&gt;[[Ada Programming/Libraries/{{{1}}}.{{{2}}}|{{{2}}}]]&lt;/font&gt;{{ #if: {{{3|}}} | {{Ada/delimiter|.}}&lt;font style="color:OliveDrab4"&gt;[[Ada Programming/Libraries/{{{1}}}.{{{2}}}.{{{3}}}|{{{3}}}]]&lt;/font&gt;{{ #if: {{{4|}}} | {{Ada/delimiter|.}}&lt;font style="color:OliveDrab4"&gt;[[Ada Programming/Libraries/{{{1}}}.{{{2}}}.{{{3}}}.{{{4}}}|{{{4}}}]]&lt;/font&gt; }}}}}}&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Code templates|Package]]
&lt;/noinclude&gt;</text>
      <sha1>4dzxoc34f582juo50bwtsj1gai93j8w</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/pk</title>
    <ns>10</ns>
    <id>179710</id>
    <redirect title="Template:Ada/package" />
    <revision>
      <id>3211433</id>
      <parentid>1372515</parentid>
      <timestamp>2017-05-01T14:35:23Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="96" xml:space="preserve">#REDIRECT [[Template:Ada/package]]

[[{{BOOKCATEGORY|Ada Programming}}/Code templates|^Package]]</text>
      <sha1>94yo5nb0er8313nayk35kulvsjnq1g2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/pragma</title>
    <ns>10</ns>
    <id>24274</id>
    <revision>
      <id>3211115</id>
      <parentid>1372500</parentid>
      <timestamp>2017-04-30T21:01:46Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="128" xml:space="preserve">{{Ada/kw|pragma}} {{Ada/pragma name|{{{1}}}}}&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Code templates|Pragma]]
&lt;/noinclude&gt;</text>
      <sha1>n3bdros580qj8kd54hqgwt2ekfj00ck</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ada/pragma name</title>
    <ns>10</ns>
    <id>57390</id>
    <revision>
      <id>3211116</id>
      <parentid>1372521</parentid>
      <timestamp>2017-04-30T21:02:23Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKCATEGORY</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="166" xml:space="preserve">&lt;font style="color:HotPink"&gt;[[Ada Programming/Pragmas/{{{1}}}|{{{1}}}]]&lt;/font&gt;&lt;noinclude&gt;
[[{{BOOKCATEGORY|Ada Programming}}/Code templates|Pragma name]]
&lt;/noinclude&gt;</text>
      <sha1>ofm2lvzrcfbm64rrhdyi6agykdsouvn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ambox</title>
    <ns>10</ns>
    <id>384875</id>
    <redirect title="Template:Bmbox" />
    <revision>
      <id>3228920</id>
      <timestamp>2017-06-12T23:26:41Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <comment>JackPotte moved page [[Template:Ambox]] to [[Template:Bmbox]] over redirect: per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="28" xml:space="preserve">#REDIRECT [[Template:Bmbox]]</text>
      <sha1>dxps9o5us57jnv4ru2ijugfl7l7m3fr</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ambox/core</title>
    <ns>10</ns>
    <id>384876</id>
    <redirect title="Template:Bmbox/core" />
    <revision>
      <id>3228922</id>
      <timestamp>2017-06-12T23:26:42Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <comment>JackPotte moved page [[Template:Ambox/core]] to [[Template:Bmbox/core]]: per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33" xml:space="preserve">#REDIRECT [[Template:Bmbox/core]]</text>
      <sha1>h9ijn3lsvc1xiywalc32i94xf9ujsdf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BOOKCATEGORY</title>
    <ns>10</ns>
    <id>378612</id>
    <revision>
      <id>3365859</id>
      <parentid>3318591</parentid>
      <timestamp>2018-01-24T02:52:43Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKNAME (new-style)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="131" xml:space="preserve">&lt;includeonly&gt;Category:Book:{{{book|{{BOOKNAME|{{{1|{{FULLPAGENAME}}}}}}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>lloy4fm1jzvf8hvj4tiuynvt6q10c3o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BOOKNAME</title>
    <ns>10</ns>
    <id>200630</id>
    <revision>
      <id>3365699</id>
      <parentid>3365668</parentid>
      <timestamp>2018-01-23T20:13:41Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>moved</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="185" xml:space="preserve">&lt;includeonly&gt;{{BOOKNAME/core|namespace={{ARTICLESPACE:{{{1|{{FULLPAGENAME}}}}}}}|pagename={{PAGENAME:{{{1|{{FULLPAGENAME}}}}}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>2zoc5zvlxanv2krulr6gt7b6cby47sa</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BOOKNAME/core</title>
    <ns>10</ns>
    <id>377904</id>
    <revision>
      <id>3365708</id>
      <parentid>3365674</parentid>
      <timestamp>2018-01-23T20:25:43Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>moved</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="236" xml:space="preserve">{{#switch:{{{namespace}}}
|Template={{#invoke:TScope|override|BOOKNAME/refactor}}
|Category={{#invoke:TScope|override|BOOKNAME/category}}
|#default={{#invoke:TScope|override|BOOKNAME/inbook}}
}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>qi6t884khyp7aou5pr0g0bdratkpv3e</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BOOKNAME/inbook</title>
    <ns>10</ns>
    <id>379921</id>
    <revision>
      <id>3415335</id>
      <parentid>3365706</parentid>
      <timestamp>2018-04-22T21:58:27Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>department, shelf</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="523" xml:space="preserve">{{#switch:{{{namespace}}}
|={{#if:{{evalx|
          (let (x (get-arg 2))
            (if (equal? (get-substring x 1 11) "Department:")
                "x"
                (if (equal? (get-substring x 1 6) "Shelf:")
                    "x"
                    "")))
          |{{ucfirst:{{{pagename}}}}}}}
    |Wikibooks Stacks
    |{{#titleparts:{{{pagename}}}|1}}}}
|User    ={{#invoke:TScope|override|BOOKNAME/user}}
|#default={{{namespace}}}:{{#titleparts:{{{pagename}}}|1}}
}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>gkue6tkj35d5gklu0t2d6o38tkpp9w6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BOOKPAGENAME</title>
    <ns>10</ns>
    <id>379865</id>
    <revision>
      <id>3166151</id>
      <parentid>3166150</parentid>
      <timestamp>2016-12-12T03:18:49Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:BOOKPAGENAME]]": High-impact page ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="189" xml:space="preserve">&lt;includeonly&gt;{{BOOKPAGENAME/core|namespace={{ARTICLESPACE:{{{1|{{FULLPAGENAME}}}}}}}|pagename={{PAGENAME:{{{1|{{FULLPAGENAME}}}}}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>stdbkao4mee1xu8fxunq5dxhz59x63a</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BOOKPAGENAME/core</title>
    <ns>10</ns>
    <id>379867</id>
    <revision>
      <id>3415718</id>
      <parentid>3167400</parentid>
      <timestamp>2018-04-24T02:51:26Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>turn inside-out ; department, shelf</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="417" xml:space="preserve">{{#invoke:TScope|override|BOOKPAGENAME/{{#switch:{{{namespace}}}
|Template=refactor
|Category=category
|={{evalx|
    (let (x (get-arg 2))
      (if (equal? (get-substring x 1 11) "Department:")
          "department"
          (if (equal? (get-substring x 1 6) "Shelf:")
              "shelf"
              "inbook")))
    |{{ucfirst:{{{pagename}}}}}}}
|#default=inbook
}}}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>qodhtnyqpvpqi56enjg0lvyxy0vne6i</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BOOKPAGENAME/inbook</title>
    <ns>10</ns>
    <id>379928</id>
    <revision>
      <id>3167387</id>
      <parentid>3167386</parentid>
      <timestamp>2016-12-13T20:02:48Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:BOOKPAGENAME/inbook]]": High-impact page: Matching protection on parent ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="170" xml:space="preserve">{{#switch:{{{namespace}}}
|User    ={{#invoke:TScope|override|BOOKPAGENAME/user}}
|#default={{#titleparts:{{{pagename}}}||2}}
}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>aacktly8sjw57na8q6sbtvibf8bzzkk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BOOKSORTKEY</title>
    <ns>10</ns>
    <id>132808</id>
    <revision>
      <id>3366141</id>
      <parentid>3365034</parentid>
      <timestamp>2018-01-24T20:15:07Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKNAME (new-style)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="140" xml:space="preserve">{{{{#if:{{BOOKPAGENAME|{{{1|{{FULLPAGENAME}}}}}}}|BOOKPAGENAME|BOOKNAME}}|{{{1|{{FULLPAGENAME}}}}}}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>jtaxod9a5ukdy5ui1sfskudad368esj</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Bmbox</title>
    <ns>10</ns>
    <id>151630</id>
    <revision>
      <id>3228919</id>
      <parentid>1764517</parentid>
      <timestamp>2017-06-12T23:26:41Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <minor/>
      <comment>JackPotte moved page [[Template:Ambox]] to [[Template:Bmbox]] over redirect: per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="944" xml:space="preserve">&lt;!--{{Ambox}} begin--&gt;{{#switch:{{{small|}}}
| left = 
  {{Ambox/core
  | small      = left
  | type       = {{{type|}}}
  | image      = {{#if:{{{smallimage|}}}
                 | {{{smallimage}}}
                 | {{{image|}}}
                 }}
  | imageright = {{#if:{{{smallimageright|}}}
                 | {{{smallimageright}}}
                 | {{{imageright|}}}
                 }}
  | style      = {{{style|}}}
  | textstyle  = {{{textstyle|}}}
  | text       = {{#if:{{{smalltext|}}}
                 | {{{smalltext}}} 
                 | {{{text}}} 
                 }}
  }}
| #default = 
  {{Ambox/core
  | type       = {{{type|}}}
  | image      = {{{image|}}}
  | imageright = {{{imageright|}}}
  | style      = {{{style|}}}
  | textstyle  = {{{textstyle|}}}
  | text       = {{{text}}}
  }}
}}&lt;!--{{Ambox}} end--&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>71dedvqsi5zx5gybeme7bvom2cuhqki</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Bmbox/core</title>
    <ns>10</ns>
    <id>224716</id>
    <revision>
      <id>3228921</id>
      <parentid>2054530</parentid>
      <timestamp>2017-06-12T23:26:42Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <minor/>
      <comment>JackPotte moved page [[Template:Ambox/core]] to [[Template:Bmbox/core]]: per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2195" xml:space="preserve">&lt;table class="metadata plainlinks ambox {{#switch:{{{small|}}}
| left = mbox-small-left
}} {{#switch:{{{type|}}}
| speedy     = ambox-speedy
| delete     = ambox-delete
| content    = ambox-content
| style      = ambox-style
| move       = ambox-move
| protection = ambox-protection
| notice     &lt;!-- notice = default --&gt;
| #default   = ambox-notice
}}" style="{{{style|}}}"&gt;
&lt;tr&gt;
{{#switch:{{{image|}}}
| blank    &lt;!-- Fall back to "none", since deprecated. --&gt;
| none = &lt;td class="mbox-empty-cell"&gt;&lt;/td&gt;   &lt;!-- No image. Cell with some width or padding necessary for text cell to have 100% width. --&gt;
| #default = 
  &lt;td class="mbox-image"&gt;{{
  #switch:{{{small|}}}
  | left = &lt;!-- Don't use the DIV --&gt; 
  | #default = &lt;div style="width: 52px;"&gt; 
  }}
  {{#if:{{{image|}}}
  | {{{image}}}
  | [[File:{{#switch:{{{type|}}}
    | speedy     = Ambox warning pn.svg
    | delete     = Ambox warning pn.svg
    | content    = Book important2.svg
    | style      = Edit-clear.svg
    | move       = Merge-split-transwiki default.svg
    | protection = Padlock-silver-medium.svg
    | notice          &lt;!-- notice = default --&gt;
    | #default   = Information icon4.svg
    }} | {{#switch:{{{small|}}} 
      | left = 20x20px 
      | #default = 40x40px 
      }} |link=|alt=]]
  }}{{#switch:{{{small|}}}
  | left = &lt;!-- Don't use the /DIV --&gt;
  | #default = &lt;/div&gt; 
  }}&lt;/td&gt;
}}
&lt;td class="mbox-text" style="{{{textstyle|}}}"&gt; {{{text}}} &lt;/td&gt;
{{#if:{{{imageright|}}}
| {{#ifeq:{{{imageright|}}}|none
  | &lt;!-- No image. --&gt;
  | &lt;td class="mbox-imageright"&gt;{{#switch:{{{small|}}}
    | left = {{{imageright}}}
    | #default = &lt;div style="width: 52px;"&gt; {{{imageright}}} &lt;/div&gt;
    }}&lt;/td&gt;
  }}
}}
&lt;/tr&gt;
&lt;/table&gt;&lt;!-- 
Detect and report usage with faulty "type" parameter:
--&gt;{{#switch:{{{type|}}}
|   &lt;!-- No type fed, is also valid input --&gt;
| speedy
| delete
| content
| style
| move
| protection
| notice     = &lt;!-- Do nothing, valid "type" --&gt;
| #default   = &lt;div style="text-align: center;"&gt;This message box is using an invalid "type={{{type|}}}" parameter and needs fixing.&lt;/div&gt;
}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>tb1vy56jqr2f8rxcta3c3zxkitwyn88</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Book Search</title>
    <ns>10</ns>
    <id>236354</id>
    <redirect title="Template:Book search" />
    <revision>
      <id>1898195</id>
      <timestamp>2010-07-22T18:06:03Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <comment>moved [[Template:Book Search]] to [[Template:Book search]]: Convention.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="34" xml:space="preserve">#REDIRECT [[Template:Book search]]</text>
      <sha1>lulo9nsjqcir2nxte8lk5lr785sgwrc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Book search</title>
    <ns>10</ns>
    <id>220864</id>
    <revision>
      <id>3365862</id>
      <parentid>3260837</parentid>
      <timestamp>2018-01-24T03:05:57Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKNAME (new-style)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1015" xml:space="preserve">&lt;includeonly&gt;{{#ifeq:{{{float|right}}}|center|&lt;center&gt;|}}&lt;div class="noprint {{{class|}}}" style="{{#ifeq:{{{float|right}}}|center||float:{{{float|right}}};}} width:{{px|{{{width|250px}}}}}; clear:right; margin:0 0 1em 1em;"&gt;
{| {{#ifeq:{{{style|simple}}}|simple||style="background:{{{background|#f9f9f9}}};border:solid #aaaaaa 1px;-moz-border-radius:5px;"}}
| width="50px" |
{{#ifeq:{{{style|simple}}}|simple||[[File:{{{image|Loupe light.svg}}}|50px|middle|link=]]}}
| width="385px" |
{{#tag:inputbox|
type={{{type|fulltext}}}
buttonlabel={{{buttonlabel|Search this book}}}
searchbuttonlabel={{{searchbuttonlabel|Search this book}}}
break={{{break|yes}}}
prefix={{{prefix|{{BOOKNAME}}}}}/
width={{#expr:({{#if:{{{width|}}}|{{#iferror: {{#expr:{{{width}}} &gt; 0 }}|{{str left|{{{width}}}|{{#expr:{{str len|{{{width}}}}} - 2}}}}|{{{width}}}}}|250}} * 0.111272727273) -14.4363636364}}
placeholder={{{placeholder|}}}
}}
|}
&lt;/div&gt;{{#ifeq:{{{float|right}}}|center|&lt;/center&gt;|}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{doc}}
&lt;/noinclude&gt;</text>
      <sha1>rf5rnbjgp4c074qim9yw12xxb9e14fg</sha1>
    </revision>
  </page>
  <page>
    <title>Template:C++ Programming/kw</title>
    <ns>10</ns>
    <id>234527</id>
    <revision>
      <id>3227666</id>
      <parentid>1883809</parentid>
      <timestamp>2017-06-08T23:42:55Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BookCat}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="186" xml:space="preserve">[[C++ Programming/Programming Languages/C++/Code/Keywords/{{{1}}}|&lt;tt style="color:DodgerBlue; text-decoration:none; font-weight:bold;"&gt;{{{1}}}&lt;/tt&gt;]]&lt;noinclude&gt;
{{BookCat}}
&lt;/noinclude&gt;</text>
      <sha1>gkissq0jle324y2sjj6q2yoxz2zh4me</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Citation/core</title>
    <ns>10</ns>
    <id>179448</id>
    <revision>
      <id>1777757</id>
      <parentid>1777756</parentid>
      <timestamp>2010-04-27T04:06:15Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Citation/core]]": Uses complex features of wiki syntax ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24993" xml:space="preserve">&lt;span class="citation {{{Citation class|{{{Citation type|}}}}}}"
{{
  #switch:{{{Ref|}}}
  ||none =
  |#default = id="{{anchorencode:{{{Ref}}}}}"
  |harv = {{#if:{{{Surname1|}}}{{{EditorSurname1|}}}
    |id="CITEREF{{anchorencode:{{#if:{{{Surname1|}}}
      |{{{Surname1}}}{{{Surname2|}}}{{{Surname3|}}}{{{Surname4|}}}
      |{{{EditorSurname1|}}}{{{EditorSurname2|}}}{{{EditorSurname3|}}}{{{EditorSurname4|}}}
    }}{{{Year|{{{Date|}}}}}}}}"
  }}
}}&gt;{{
&lt;!--============  Author or editor and date  ============--&gt;
  #if:{{{Surname1|}}}
  |{{
     #if: {{{AuthorMask|}}}
     |{{
        #iferror: {{ #expr: 1*{{{AuthorMask}}} }}
        |{{{AuthorMask}}}
        |&lt;del&gt;{{loop|{{{AuthorMask}}}|2=&amp;emsp;}}&lt;/del&gt;
      }}
     |{{
        #if: {{{Authorlink1|}}}
        |[[w:{{{Authorlink1}}} |{{{Surname1}}}{{
          #if: {{{Given1|}}}
          |{{{NameSep|,&amp;#32;}}}{{{Given1}}}
         }}]]
        |{{{Surname1}}}{{
           #if: {{{Given1|}}}
           |{{{NameSep|,&amp;#32;}}}{{{Given1}}}
         }}
      }}
   }}{{
     #if: {{{Surname2|}}}
     |{{#ifexpr:{{{Trunc|8}}}&lt;2
       |&amp;#32;''et al''.
       |{{
          #iferror: {{ #expr: 1*0.0{{{AuthorMask|}}} }}
          |&amp;#32;&lt;!-- then punctuation should be included in AuthorMask --&gt;
          |{{
            #if: {{{Surname3|}}}
            |{{{AuthorSep|&amp;#059;&amp;#32;}}}
            |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
          }}
        }}{{
          #if: {{{Authorlink2|}}}
          |[[w:{{{Authorlink2}}} |{{{Surname2}}}{{
             #if: {{{Given2|}}}
             |{{{NameSep|,&amp;#32;}}}{{{Given2}}}
           }}]]
          |{{{Surname2}}}{{
             #if: {{{Given2|}}}
             |{{{NameSep|,&amp;#32;}}}{{{Given2}}}
           }}
        }}{{
          #if: {{{Surname3|}}}
          |{{#ifexpr:{{{Trunc|8}}}&lt;3
            |&amp;#32;''et al''.
            |{{
               #if: {{{Surname4|}}}
               |{{{AuthorSep|&amp;#059;&amp;#32;}}}
               |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
             }}{{
               #if: {{{Authorlink3|}}}
               |[[w:{{{Authorlink3}}} |{{{Surname3}}}{{
                  #if: {{{Given3|}}}
                  |{{{NameSep|,&amp;#32;}}}{{{Given3}}}
                }}]]
               |{{{Surname3}}}{{
                  #if: {{{Given3|}}}
                  |{{{NameSep|,&amp;#32;}}}{{{Given3}}}
                }}
             }}{{
               #if:{{{Surname4|}}}
               |{{#ifexpr:{{{Trunc|8}}}&lt;4
                 |&amp;#32;''et al''.
                 |{{
                    #if: {{{Surname5|}}}
                    |{{{AuthorSep|&amp;#059;&amp;#32;}}}
                    |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
                  }}{{
                    #if: {{{Authorlink4|}}}
                    |[[w:{{{Authorlink4}}} |{{{Surname4}}}{{
                       #if: {{{Given4|}}}
                       |{{{NameSep|,&amp;#32;}}}{{{Given4}}}
                     }}]]
                    |{{{Surname4}}}{{
                       #if: {{{Given4|}}}
                       |{{{NameSep|,&amp;#32;}}}{{{Given4}}}
                    }}
                  }}{{
                  #if:{{{Surname5|}}}
                  |{{#ifexpr:{{{Trunc|8}}}&lt;5
                    |&amp;#32;''et al''.
                    |{{
                     #if: {{{Surname6|}}}
                     |{{{AuthorSep|&amp;#059;&amp;#32;}}}
                     |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
                    }}{{
                     #if: {{{Authorlink5|}}}
                     |[[w:{{{Authorlink5}}} |{{{Surname5}}}{{
                        #if: {{{Given5|}}}
                        |{{{NameSep|,&amp;#32;}}}{{{Given5}}}
                      }}]]
                     |{{{Surname5}}}{{
                        #if: {{{Given5|}}}
                        |{{{NameSep|,&amp;#32;}}}{{{Given5}}}
                      }}
                   }}{{
                     #if:{{{Surname6|}}}
                     |{{#ifexpr:{{{Trunc|8}}}&lt;6
                     |&amp;#32;''et al''.
                      |{{
                        #if: {{{Surname7|}}}
                        |{{{AuthorSep|&amp;#059;&amp;#32;}}}
                        |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
                      }}{{
                        #if: {{{Authorlink6|}}}
                        |[[w:{{{Authorlink6}}} |{{{Surname6}}}{{
                           #if: {{{Given6|}}}
                           |{{{NameSep|,&amp;#32;}}}{{{Given6}}}
                         }}]]
                        |{{{Surname6}}}{{
                           #if: {{{Given6|}}}
                           |{{{NameSep|,&amp;#32;}}}{{{Given6}}}
                         }}
                      }}{{
                        #if:{{{Surname7|}}}
                         |{{#ifexpr:{{{Trunc|8}}}&lt;7
                           |&amp;#32;''et al''.
                        |{{
                           #if: {{{Surname8|}}}
                           |{{{AuthorSep|&amp;#059;&amp;#32;}}}
                           |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
                         }}{{
                           #if: {{{Authorlink7|}}}
                           |[[w:{{{Authorlink7}}} |{{{Surname7}}}{{
                              #if: {{{Given7|}}}
                              |{{{NameSep|,&amp;#32;}}}{{{Given7}}}
                            }}]]
                           |{{{Surname7}}}{{
                              #if: {{{Given7|}}}
                              |{{{NameSep|,&amp;#32;}}}{{{Given7}}}
                            }}
                                    }}{{
                                       #if:{{{Surname8|}}}
                                       |{{#ifexpr:{{{Trunc|8}}}&lt;8
                                           |&amp;#32;''et al''.
                                           |{{
                                              #if: {{{Surname9|}}}
                                              |{{{AuthorSep|&amp;#059;&amp;#32;}}}
                                              |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
                                            }}{{
                                              #if: {{{Authorlink8|}}}
                                              |[[w:{{{Authorlink8}}} |{{{Surname8}}}{{
                                                 #if: {{{Given8|}}}
                                                 |{{{NameSep|,&amp;#32;}}}{{{Given8}}}
                                               }}]]
                                              |{{{Surname8}}}{{
                                                 #if: {{{Given8|}}}
                                                 |{{{NameSep|,&amp;#32;}}}{{{Given8}}}
                                               }}
                                            }}{{
                                              #if:{{{Surname9|}}}
                                              |&amp;#32;''et al''.
                                            }}
                                         }}
                                      }}
                                   }}
                                }}
                             }}
                          }}
                       }}
                     }}
                  }}
               }}
            }}
         }}
      }}

   }}{{
     #if: {{{Coauthors|}}}
     |{{{AuthorSep|&amp;#059;&amp;#32;}}}{{{Coauthors|}}}|
   }}{{
     #if: {{{Date|}}}
     |&amp;#32;({{{Date}}}){{
       #if:{{{YearNote|}}}
     |&amp;#32;[{{{YearNote}}}]
     }}
   }}
  |{{&lt;!-- ============== No author: display editors first == --&gt;
     #if: {{{EditorSurname1|}}}
     |{{
        #if: {{{Editorlink1|}}}
        |[[w:{{{Editorlink1}}} |{{{EditorSurname1}}}{{
           #if: {{{EditorGiven1|}}}
           |, {{{EditorGiven1}}}
         }}]]
        |{{{EditorSurname1}}}{{
           #if: {{{EditorGiven1|}}}
           |, {{{EditorGiven1}}}
         }}
      }}{{
        #if: {{{EditorSurname2|}}}
        |{{
          #if: {{{EditorSurname3|}}}
          |{{{AuthorSep|&amp;#059;&amp;#32;}}}
          |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
        }}{{
           #if: {{{Editorlink2|}}}
           |[[w:{{{Editorlink2}}} |{{{EditorSurname2}}}{{
              #if: {{{EditorGiven2|}}}
              |, {{{EditorGiven2}}}
            }}]]
           |{{{EditorSurname2}}}{{
              #if: {{{EditorGiven2|}}}
              |, {{{EditorGiven2}}}
            }}
         }}{{
           #if: {{{EditorSurname3|}}}
           |{{
              #if: {{{EditorSurname4|}}}
              |{{{AuthorSep|&amp;#059;&amp;#32;}}}
              |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
            }}{{
              #if: {{{Editorlink3|}}}
              |[[w:{{{Editorlink3}}} |{{{EditorSurname3}}}{{
                 #if: {{{EditorGiven3|}}}
                 |, {{{EditorGiven3}}}
               }}]]
              |{{{EditorSurname3}}}{{
                 #if: {{{EditorGiven3|}}}
                 |, {{{EditorGiven3}}}
               }}
            }}{{
              #if:{{{EditorSurname4|}}}
              |&amp;#32;et al.
            }}
         }}
       }}, ed{{#if:{{{EditorSurname2|}}}|s}}{{#ifeq:{{{Sep|,}}}|.||.}}{{
        #if: {{{Date|}}}
        |&amp;#32;({{{Date}}}){{
         #if:{{{YearNote|}}}
       |&amp;#32;[{{{YearNote}}}]
       }}
      }}
   }}
}}{{
&lt;!--============  Title of included work  ============--&gt;
  #if: {{{IncludedWorkTitle|}}}{{#if:{{{Periodical|}}}||{{#if:{{{TransItalic|}}}||{{{TransTitle|}}}}}}}
  |{{
     #if:{{{Surname1|}}}{{{EditorSurname1|}}}
     |{{{Sep|,}}}&amp;#32;
   }}{{Citation/make link
     | 1={{
           #if: {{{IncludedWorkURL|}}}
           |{{{IncludedWorkURL}}}
           |{{
              #if: {{{URL|}}}
              |{{{URL}}}
&lt;!-- Only link URL if to a free full text - as at PubMedCentral (PMC)--&gt;
              |{{#ifexpr:{{#time: U}} &gt; {{#time: U | {{{Embargo|2001-10-10}}} }}
                |{{
                   #if: {{{PMC|}}}
                   |http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=pmcentrez&amp;artid={{{PMC}}}
                 }}
               }}
            }}
         }}
     | 2={{
           #if: {{{Periodical|}}}
           |''&lt;nowiki /&gt;{{{IncludedWorkTitle}}}&lt;nowiki /&gt;''
           |"{{{IncludedWorkTitle|}}}{{
             #if: {{{TransTitle|}}}
             |{{
                #if: {{{IncludedWorkTitle|}}}
                |&amp;#32;
              }}&amp;#91;{{{TransTitle}}}&amp;#93;
           }}"
         }}
   }}
}}{{
&lt;!--============  Place (if different than PublicationPlace) ============--&gt;
  #if: {{{Place|}}}
  |{{
     #ifeq: {{{Place|}}} | {{{PublicationPlace|}}}
     |
     |{{
        #if: {{{Surname1|}}}{{{EditorSurname1|}}}{{{IncludedWorkTitle|}}}
        |{{{Sep|,}}}&amp;#32;written at {{{Place}}}
      }}
   }}
}}{{
&lt;!--============  Editor of compilation  ============--&gt;
  #if: {{{EditorSurname1|}}}
  |{{
     #if: {{{Surname1|}}}
     |{{{Sep|,}}}&amp;#32;{{
        #if: {{{IncludedWorkTitle|}}}
        |in&amp;#32;
      }}{{
        #if: {{{Editorlink1|}}}
        |[[w:{{{Editorlink1}}} |{{{EditorSurname1}}}{{
           #if: {{{EditorGiven1|}}}
           |, {{{EditorGiven1}}}
         }}]]
        |{{{EditorSurname1}}}{{
           #if: {{{EditorGiven1|}}}
           |, {{{EditorGiven1}}}
         }}}}{{
        #if: {{{EditorSurname2|}}}
        |{{
          #if: {{{EditorSurname3|}}}
            |{{{AuthorSep|&amp;#059;&amp;#32;}}}
            |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
          }}{{
           #if: {{{Editorlink2|}}}
           |[[w:{{{Editorlink2}}}|{{{EditorSurname2}}}{{
              #if: {{{EditorGiven2|}}}
              |, {{{EditorGiven2}}}
            }}]]
           |{{{EditorSurname2}}}{{
              #if: {{{EditorGiven2|}}}
              |, {{{EditorGiven2}}}
            }}
         }}{{
           #if: {{{EditorSurname3|}}}
           |{{
              #if: {{{EditorSurname4|}}}
              |&amp;#059;&amp;#32;
              |{{#if:{{{amp|}}}|&amp;#32;&amp;amp;&amp;#32;|{{{AuthorSep|&amp;#059;&amp;#32;}}}}}
            }}{{
              #if: {{{Editorlink3|}}}
              |[[w:{{{Editorlink3}}}|{{{EditorSurname3}}}{{
                 #if: {{{EditorGiven3|}}}
                 |, {{{EditorGiven3}}}
               }}]]
              |{{{EditorSurname3}}}{{
                 #if: {{{EditorGiven3|}}}
                 |, {{{EditorGiven3}}}
               }}
            }}{{
              #if:{{{EditorSurname4|}}}
              |&amp;#32;et al.
            }}
         }}
      }}{{
        #if: {{{IncludedWorkTitle|}}}
        |
        |{{{Sep|,}}}&amp;#32;ed{{#if:{{{EditorSurname2|}}}|s}}{{#ifeq:{{{Sep|,}}}|.||.}}
      }}
   }}
}}{{
  &lt;!--============  Periodicals  ============--&gt;
  #if: {{{Periodical|}}}
  |{{
     #if: {{{Other|}}}
     |{{{Sep|,}}}&amp;#32;{{{Other|}}}
   }}{{
     #if: {{{Surname1|}}}{{{EditorSurname1|}}}{{{IncludedWorkTitle|}}}
     |{{{Sep|,}}}&amp;#32;}}{{
     #if: {{{Title|}}}{{{TransTitle|}}}
     |{{Citation/make link
        | 1={{
              #if: {{{IncludedWorkTitle|}}}
              |{{
                 #if: {{{IncludedWorkURL|}}}
                 |{{
                    #if: {{{URL|}}}
                    |{{{URL}}}
                    |{{
                       #ifexpr: {{#time: U}} &gt; {{#time: U | {{{Embargo|2001-10-10}}} }} | {{
                         #if: {{{PMC|}}}
                         |  http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=pmcentrez&amp;artid={{{PMC}}}
                       }}
                     }}
                  }}
               }}
              |{{
                 #if: {{{URL|}}}
                 |{{{URL}}}
                 |{{#ifexpr:{{#time: U}} &gt; {{#time: U | {{{Embargo|2001-10-10}}} }} |{{
                       #if: {{{PMC|}}}
                       |  http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=pmcentrez&amp;artid={{{PMC}}}
                    }}
                 }}
               }}
            }}
        | 2="{{{Title}}}{{
          #if: {{{TransTitle|}}}
          |{{
             #if: {{{Title|}}}
             |&amp;#32;
           }}&amp;#91;{{{TransTitle}}}&amp;#93;
        }}"
      }}{{
        #if: {{{TitleNote|}}}
        |{{{Sep|,}}}&amp;#32;{{{TitleNote}}}
      }}
   }}
}}{{
  #if: {{{language|}}}
  |&amp;#32;(in {{{language}}})
}}{{
  #if: {{{format|}}}
  |&amp;#32;({{{format}}})
}}{{
   #if: {{{Periodical|}}}
   |{{
      #if:{{{IncludedWorkTitle|}}}{{{Title|}}}{{{TransTitle|}}}
      |{{{Sep|,}}}&amp;#32;
    }}''&lt;nowiki /&gt;{{{Periodical}}}&lt;nowiki /&gt;''{{
      #if: {{{Series|}}}
      |{{{Sep|,}}}&amp;#32;{{{Series}}}
    }}{{
      #if: {{{PublicationPlace|}}}
      |{{
         #if: {{{Publisher|}}}
         |&amp;#32;({{{PublicationPlace}}}&lt;nowiki&gt;: &lt;/nowiki&gt;{{{Publisher}}})
         |&amp;#32;({{{PublicationPlace}}})
       }}
      |{{
         #if: {{{Publisher|}}}
         |&amp;#32;({{{Publisher}}})
       }}
    }}{{
      #if: {{{Volume|}}}
      |&amp;#32;'''&lt;nowiki /&gt;{{{Volume}}}&lt;nowiki /&gt;'''{{
         #if: {{{Issue|}}}
         |&amp;#32;({{{Issue}}})
       }}
      |{{
         #if: {{{Issue|}}}
         |&amp;#32;({{{Issue}}})
       }}
    }}{{
      #if: {{{At|}}}
      |&lt;nowiki&gt;: &lt;/nowiki&gt; {{{At}}}
    }}
   |{{
      &lt;!--============ Anything else with a title, including books ============--&gt;
      #if: {{{Title|}}}{{{TransItalic|}}}
      |{{
         #if: {{{Surname1|}}}{{{EditorSurname1|}}}{{{IncludedWorkTitle|}}}{{{Periodical|}}}
         |{{{Sep|,}}}
       }}&amp;#32;{{Citation/make link
         | 1={{
               #if: {{{IncludedWorkTitle|}}}
               |{{
                  #if: {{{IncludedWorkURL|}}}
                  |{{
                     #if: {{{URL|}}}
                     |{{{URL}}}
                     |{{#ifexpr:{{#time: U}} &gt; {{#time: U | {{{Embargo|2001-10-10}}} }}|{{
                        #if: {{{PMC|}}}
                        |  http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=pmcentrez&amp;artid={{{PMC}}}
                      }}}}
                   }}
                }}
               |{{
                  #if: {{{URL|}}}
                  |{{{URL}}}
                                |{{#ifexpr:{{#time: U}} &gt; {{#time: U | {{{Embargo|2001-10-10}}} }}|{{
                     #if: {{{PMC|}}}
                     |  http://www.pubmedcentral.nih.gov/articlerender.fcgi?tool=pmcentrez&amp;artid={{{PMC}}}
                   }}}}
                }}
             }}
         | 2=''&lt;nowiki /&gt;{{{Title|}}}{{
            #if:{{{TransItalic|}}}|&amp;#32;&amp;#91;{{{TransItalic}}}&amp;#93;
          }}&lt;nowiki /&gt;''
       }}
    }}{{
      #if: {{{TitleType|}}}
      |&amp;#32;({{{TitleType}}})
    }}{{
      #if: {{{Series|}}}
      |{{{Sep|,}}}&amp;#32;{{{Series}}}
    }}{{
      #if: {{{Volume|}}}
      |{{{Sep|,}}}&amp;#32;'''&lt;nowiki /&gt;{{{Volume}}}&lt;nowiki /&gt;'''
    }}{{
      #if: {{{Other|}}}
      |{{{Sep|,}}}&amp;#32;{{{Other|}}}
    }}{{
      #if: {{{Edition|}}}
      |&amp;#32;({{{Edition}}} ed.)
    }}{{
      #if: {{{PublicationPlace|}}}
      |{{{Sep|,}}}&amp;#32;{{{PublicationPlace}}}
    }}{{
      #if: {{{Publisher|}}}
      |{{
         #if: {{{PublicationPlace|}}}
         |&lt;nowiki&gt;:&lt;/nowiki&gt;
         |{{{Sep|,}}}
       }}&amp;#32;{{{Publisher}}}
    }}
}}{{
&lt;!--============ Date (if no author/editor) ============--&gt;
  #if: {{{Surname1|}}}{{{EditorSurname1|}}}
  |
  |{{
     #if: {{{Date|}}}
     |{{{Sep|,}}}&amp;#32;{{{Date}}}{{
       #if:{{{YearNote|}}}
     |&amp;#32;[{{{YearNote}}}]
     }}
   }}
}}{{
&lt;!--============ Publication date ============--&gt;
  #if: {{{PublicationDate|}}}
  |{{
     #ifeq: {{{PublicationDate|}}} | {{{Date|}}}
     |
     |{{
        #if: {{{EditorSurname1|}}}
        |{{
           #if: {{{Surname1|}}}
           |{{{Sep|,}}}&amp;#32;{{{PublicationDate}}}
           |&amp;#32;(published {{{PublicationDate}}})
         }}
        |{{
           #if: {{{Periodical|}}}
           |{{{Sep|,}}}&amp;#32;{{{PublicationDate}}}
           |&amp;#32;(published {{{PublicationDate}}})
         }}
      }}
   }}
}}{{
&lt;!--============ Page within included work ============--&gt;
  #if: {{{Periodical|}}}
  |
  |{{
     #if: {{{At|}}}
     |{{{Sep|,}}}&amp;#32;{{{At}}}
   }}
}}{{
&lt;!--===============DOI================--&gt;
#if:{{{DOI|}}}
  |{{{Sep|,}}}&amp;#32;{{citation/identifier  |identifier=doi |input1={{{DOI|}}}  |input2={{{DoiBroken|}}} }}
}}{{
&lt;!--============  Misc. Identifier ============--&gt;
  #if: {{{ID|}}}
  |{{
     #if: {{{Surname1|}}}{{{EditorSurname1|}}}{{{IncludedWorkTitle|}}}{{{Periodical|}}}{{{Title|}}}{{{TransItalic|}}}
     |{{{Sep|,}}}&amp;#32;{{{ID}}}
     |{{{ID}}}
   }}
}}{{
&lt;!--============  ISBN ============--&gt;
  #if: {{{ISBN|}}}
  |{{{Sep|,}}}&amp;#32;{{citation/identifier  |identifier=isbn |input1={{{ISBN|}}} }}
}}{{
&lt;!--============  ISSN ============--&gt;
  #if: {{{ISSN|}}}
  |{{{Sep|,}}}&amp;#32;{{citation/identifier  |identifier=issn |input1={{{ISSN|}}} }}
}}{{
&lt;!--============  OCLC ============--&gt;
  #if: {{{OCLC|}}}
  |{{{Sep|,}}}&amp;#32;{{citation/identifier  |identifier=oclc |input1={{{OCLC|}}} }}
}}{{
&lt;!--============  PMID ============--&gt;
  #if: {{{PMID|}}}
  |{{{Sep|,}}}&amp;#32;{{citation/identifier  |identifier=pmid |input1={{{PMID|}}} }}
}}{{
&lt;!--============  PMC ============--&gt;
  #if: {{{PMC|}}}
  |{{
     #if: {{{URL|}}}
     |{{{Sep|,}}}&amp;#32;{{citation/identifier  |identifier=pmc |input1={{{PMC|}}} }}
     |{{only in  print|{{{Sep|,}}}&amp;#32;{{citation/identifier  |identifier=pmc |input1={{{PMC|}}} }} }}&lt;!--Should  only display by default in print--&gt;
   }}
}}{{
&lt;!--============ BIBCODE ============--&gt;
  #if: {{{Bibcode|}}}
  |{{{Sep|,}}}&amp;#32;{{citation/identifier  |identifier=bibcode |input1={{{Bibcode|}}} }}
}}{{
&lt;!--============  Archive data, etc ===========--&gt;
#if: {{{Archive|}}}
|{{{Sep|,}}}&amp;#32;{{{Archive}}}
|{{
  #if:{{{ArchiveURL|}}}{{{ArchiveDate|}}}
  |{{{Sep|,}}}&amp;#32;{{#ifeq:{{{Sep}}}|.|A|a}}rchived{{
    #if:{{{OriginalURL|}}}{{{IncludedWorkURL|}}}
    |{{#if:{{{ArchiveURL|}}}|&amp;#32;from {{Citation/make link|{{{OriginalURL|{{{IncludedWorkURL|}}}}}}|the original}}}}
    }}{{
    #if:{{{ArchiveDate|}}}
    |&amp;#32;on {{{ArchiveDate}}}
    }}{{
    #if:{{#if:{{{ArchiveURL|}}}||A}}{{#if:{{{OriginalURL|}}}{{{IncludedWorkURL|}}}||B}}{{#if:{{{ArchiveDate|}}}||C}}
    |. {{citation error
       |If you specify &lt;code&gt;&amp;#124;{{#if:{{{ArchiveURL|}}}|archiveurl|archivedate}}&amp;#61;&lt;/code&gt;, you must {{#if:{{{OriginalURL|}}}{{{IncludedWorkURL|}}}| also specify &lt;code&gt;&amp;#124;{{#if:{{{ArchiveURL|}}}|archivedate|archiveurl}}&amp;#61;&lt;/code&gt;|first specify &lt;code&gt;&amp;#124;url&amp;#61;&lt;/code&gt;}}}}
    }}
  }}
}}{{
&lt;!--============ URL and AccessDate ============--&gt;
  #if: {{{URL|}}}{{{IncludedWorkURL|}}}
  |{{
     #if: {{{Title|}}}{{{IncludedWorkTitle|}}}{{{TransTitle|}}}
     |&lt;span class="printonly"&gt;{{{Sep|,}}}&amp;#32;{{
                                      #if: {{{IncludedWorkURL|}}}
                                      |{{{IncludedWorkURL}}}
                                      |{{{URL}}}
                                    }}&lt;/span&gt;
     |{{{Sep|,}}}&amp;#32;{{
              #if: {{{IncludedWorkURL|}}}
              |{{{IncludedWorkURL}}}
              |{{{URL}}}
            }}
   }}{{
     #if: {{{AccessDate|}}}
     | &lt;span class="reference-accessdate"&gt;{{#ifeq:{{{Sep|,}}}|,|,&amp;#32;r|.&amp;#32;R}}etrieved {{{AccessDate}}}&lt;/span&gt;
     }}
}}{{#if:{{{laysummary|}}}
  |{{{Sep|,}}}&amp;#32;[{{{laysummary}}} Lay summary]{{#if: {{{laysource|}}}|&amp;nbsp;&amp;ndash;&amp;nbsp;''&lt;nowiki /&gt;{{{laysource}}}&lt;nowiki /&gt;''}}
}}{{#if:{{{laydate|}}}
  | &amp;#32;({{{laydate}}})
}}{{#if:{{{quote|}}}
  |{{{Sep|,}}}&amp;#32;"{{{quote}}}"
}}{{{PS|}}}&lt;/span&gt;&lt;!--

=== This is a COinS tag (http://ocoins.info), which allows automated tools to parse the citation information: ===

--&gt;&lt;span
    class="Z3988"
    title="ctx_ver=Z39.88-2004&amp;rft_val_fmt={{urlencode:info:ofi/fmt:kev:mtx:}}{{
      #if: {{{Periodical|}}}
      |journal&amp;rft.genre=article&amp;rft.atitle={{urlencode:{{{Title|}}}}}&amp;rft.jtitle={{urlencode:{{{Periodical|}}}}}
      |book{{
         #if: {{{IncludedWorkTitle|}}}
         |&amp;rft.genre=bookitem&amp;rft.btitle={{urlencode:{{{IncludedWorkTitle|}}}}}&amp;rft.atitle={{urlencode:{{{Title|}}}}}
         |&amp;rft.genre=book&amp;rft.btitle={{urlencode:{{{Title|}}}}}
       }}
    }}{{
     #if: {{{Surname1|}}} |&amp;rft.aulast={{urlencode:{{{Surname1}}}}}{{
       #if: {{{Given1|}}} |&amp;rft.aufirst={{urlencode:{{{Given1}}}}}
     }}
   }}{{
     #if: {{{Surname1|}}} |&amp;rft.au={{urlencode:{{{Surname1}}}}}{{
       #if: {{{Given1|}}} |{{urlencode:{{{NameSep|,&amp;#32;}}}{{{Given1}}}}}
     }}
   }}{{
     #if: {{{Surname2|}}} |&amp;rft.au={{urlencode:{{{Surname2}}}}}{{
       #if: {{{Given2|}}} |{{urlencode:{{{NameSep|,&amp;#32;}}}{{{Given2}}}}}
     }}
   }}{{
     #if: {{{Surname3|}}} |&amp;rft.au={{urlencode:{{{Surname3}}}}}{{
       #if: {{{Given3|}}} |{{urlencode:{{{NameSep|,&amp;#32;}}}{{{Given3}}}}}
     }}
   }}{{
     #if: {{{Surname4|}}} |&amp;rft.au={{urlencode:{{{Surname4}}}}}{{
       #if: {{{Given4|}}} |{{urlencode:{{{NameSep|,&amp;#32;}}}{{{Given4}}}}}
     }}
   }}{{
     #if: {{{Surname5|}}} |&amp;rft.au={{urlencode:{{{Surname5}}}}}{{
       #if: {{{Given5|}}} |{{urlencode:{{{NameSep|,&amp;#32;}}}{{{Given5}}}}}
     }}
   }}{{
     #if: {{{Surname6|}}} |&amp;rft.au={{urlencode:{{{Surname6}}}}}{{
       #if: {{{Given6|}}} |{{urlencode:{{{NameSep|,&amp;#32;}}}{{{Given6}}}}}
     }}
   }}{{
     #if: {{{Surname7|}}} |&amp;rft.au={{urlencode:{{{Surname7}}}}}{{
       #if: {{{Given7|}}} |{{urlencode:{{{NameSep|,&amp;#32;}}}{{{Given7}}}}}
     }}
   }}{{
     #if: {{{Surname8|}}} |&amp;rft.au={{urlencode:{{{Surname8}}}}}{{
       #if: {{{Given8|}}} |{{urlencode:{{{NameSep|,&amp;#32;}}}{{{Given8}}}}}
     }}
   }}{{
     #if: {{{Surname9|}}} |&amp;rft.au={{urlencode:{{{Surname9}}}}}{{
       #if: {{{Given9|}}} |{{urlencode:{{{NameSep|,&amp;#32;}}}{{{Given9}}}}}
     }}
    }}{{
      #if: {{{Date|}}} |&amp;rft.date={{urlencode:{{{Date}}}}}
    }}{{
      #if: {{{Series|}}} |&amp;rft.series={{urlencode:{{{Series}}}}}
    }}{{
      #if: {{{Volume|}}} |&amp;rft.volume={{urlencode:{{{Volume}}}}}
    }}{{
      #if: {{{Issue|}}} |&amp;rft.issue={{urlencode:{{{Issue}}}}}
    }}{{
      #if: {{{At|}}} |&amp;rft.pages={{urlencode:{{{At}}}}}
    }}{{
      #if: {{{Edition|}}} |&amp;rft.edition={{urlencode:{{{Edition}}}}}
    }}{{
      #if: {{{PublicationPlace|}}}{{{Place|}}} |&amp;rft.place={{urlencode:{{{PublicationPlace|{{{Place}}}}}}}}
    }}{{
      #if: {{{Publisher|}}} |&amp;rft.pub={{urlencode:{{{Publisher}}}}}
    }}{{
      #if: {{{DOI|}}} |&amp;rft_id=info:doi/{{urlencode:{{{DOI}}}}}
    }}{{
      #if: {{{PMID|}}} |&amp;rft_id=info:pmid/{{urlencode:{{{PMID}}}}}
    }}{{
      #if: {{{Bibcode|}}} |&amp;rft_id=info:bibcode/{{urlencode:{{{Bibcode}}}}}
    }}{{
      #if: {{{OCLC|}}} |&amp;rft_id=info:oclcnum/{{urlencode:{{{OCLC}}}}}
    }}{{
      #if: {{{ISBN|}}} |&amp;rft.isbn={{urlencode:{{{ISBN}}}}}
    }}{{
      #if: {{{ISSN|}}} |&amp;rft.issn={{urlencode:{{{ISSN}}}}}
    }}{{
      #if: {{{URL|}}}{{{IncludedWorkURL|}}} |&amp;rft_id={{urlencode:{{{URL|{{{IncludedWorkURL|}}}}}}}}
    }}&amp;rfr_id=info:sid/en.wikibooks.org:{{FULLPAGENAMEE}}"&gt;&lt;span style="display: none;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>f534q1qq5nzb4bi2ovhzuheo8hfy5pi</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Citation/identifier</title>
    <ns>10</ns>
    <id>225332</id>
    <revision>
      <id>1778209</id>
      <parentid>1777999</parentid>
      <timestamp>2010-04-27T13:42:36Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>fixed links</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3568" xml:space="preserve">{{#switch:{{{identifier}}}
 |arxiv={{hide in print
         |[[w:arXiv|arXiv]]:[http://arxiv.org/abs/{{{input1|}}}{{{input2|}}} {{{input1|}}}{{{input2|}}}]&lt;!--
          --&gt;{{#if:{{{input3|}}}
              |&amp;nbsp;[{{{input3|}}}]
              |
             }}
        }}&lt;!--
     --&gt;{{only in print
         |arXiv:{{{input1|}}}{{{input2|}}}&lt;!--
          --&gt;{{#if:{{{input3|}}}
              |&amp;nbsp;[{{{input3|}}}]
              |
             }}
        }}
 |doi={{hide in print
       |{{#if:{{{input2|}}}
         |[[w:Digital object identifier|doi]]:{{{input1|}}} (inactive {{{input2|}}}) {{#ifeq: {{NAMESPACE}} | {{ns:0}}
                   |[[Category:Pages with DOIs broken since {{#time: Y | {{{input2|}}} }}]]
                   |
                  }}
         |[[w:Digital object identifier|doi]]:[http://dx.doi.org/{{urlencode:{{{input1|}}}}} {{{input1|}}}]
        }}
      }}&lt;!--
   --&gt;{{only in print
       |{{#if:{{{input2|}}}
         |doi:{{{input1|}}} (inactive {{{input2|}}})
         |doi:{{{input1|}}}
        }}
      }}
 |asin={{hide in print
        |[[w:Amazon Standard Identification Number|ASIN]]&amp;nbsp;[http://www.amazon.com/dp/{{{input1|}}} {{{input1|}}}]
       }}&lt;!--
    --&gt;{{only in print
        |ASIN&amp;nbsp;{{{input1|}}}
       }}
 |bibcode={{hide in print
           |[[w:Bibcode|Bibcode]]:&amp;nbsp;[http://adsabs.harvard.edu/abs/{{{input1|}}} {{{input1|}}}]
          }}&lt;!--
       --&gt;{{only in print
           |Bibcode:&amp;nbsp;{{{input1|}}}
          }}
 |jfm={{hide in print
       |[[w:Jahrbuch über die Fortschritte der Mathematik|JFM]]&amp;nbsp;[http://www.zentralblatt-math.org/zmath/en/search/?q{{=}}an:{{{input1|}}}&amp;format{{=}}complete {{{input1|}}}]
      }}&lt;!--
   --&gt;{{only in print
       |JFM&amp;nbsp;{{{input1|}}}
      }}
 |jstor={{hide in print
         |[[w:JSTOR|JSTOR]]&amp;nbsp;[http://www.jstor.org/stable/{{{input1|}}} {{{input1|}}}]
        }}&lt;!--
     --&gt;{{only in print
         |JSTOR&amp;nbsp;{{{input1|}}}
         }}
 |isbn={{hide in print
        |[[w:International Standard Book Number|ISBN]]&amp;nbsp;[[Special:BookSources/{{{input1|}}}|{{{input1|}}}]]
       }}&lt;!--
    --&gt;{{only in print
        |ISBN&amp;nbsp;{{{input1|}}}
       }}
 |issn={{hide in print
        |[[w:International Standard Serial Number|ISSN]]&amp;nbsp;[http://www.worldcat.org/issn/{{{input1|}}} {{{input1|}}}]
       }}&lt;!--
    --&gt;{{only in print
        |ISSN&amp;nbsp;{{{input1|}}}
       }}
 |mr={{hide in print
      |[[w:Mathematical Reviews|MR]][http://www.ams.org/mathscinet-getitem?mr{{=}}{{{input1|}}} {{{input1|}}}]
     }}&lt;!--
  --&gt;{{only in print
      |MR{{{input1|}}}
     }}
 |oclc={{hide in print
        |[[w:Online Computer Library Center|OCLC]]&amp;nbsp;[http://www.worldcat.org/oclc/{{{input1|}}} {{{input1|}}}]
       }}&lt;!--
    --&gt;{{only in print
        |OCLC&amp;nbsp;{{{input1|}}}
       }}
 |pmc={{hide in print
       |[[w:PubMed Central|PMC]]&amp;nbsp;[http://www.pubmedcentral.gov/articlerender.fcgi?tool{{=}}pmcentrez&amp;artid{{=}}{{{input1|}}} {{{input1|}}}] 
      }}&lt;!--
   --&gt;{{only in print
       |PMC&amp;nbsp;{{{input1|}}}
      }}
 |pmid={{hide in print
        |[[w:PubMed Identifier|PMID]]&amp;nbsp;[http://www.ncbi.nlm.nih.gov/pubmed/{{{input1|}}} {{{input1|}}}]
       }}&lt;!--
    --&gt;{{only in print
        |PMID&amp;nbsp;{{{input1|}}}
       }}
 |zbl={{hide in print
        |[[w:Zentralblatt MATH|ZBL]]&amp;nbsp;[http://www.zentralblatt-math.org/zmath/en/search/?q{{=}}an:{{{input1|}}}&amp;format{{=}}complete {{{input1|}}}]
       }}&lt;!--
    --&gt;{{only in print
        |ZBL&amp;nbsp;{{{input1|}}}
       }}
}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>87h9307qvwh4p44dbglfz1ab3icnnzt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Citation/make link</title>
    <ns>10</ns>
    <id>225330</id>
    <revision>
      <id>1777964</id>
      <parentid>1777950</parentid>
      <timestamp>2010-04-27T13:10:40Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Citation/make link]]": Uses complex features of wiki syntax ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="535" xml:space="preserve">{{#if:{{{1|}}}
 |[{{{1}}} {{{2}}}]
 |{{{2}}}
}}&lt;noinclude&gt;&lt;!--
  Code notes (here so that people /read/ it)
  1. Parameter #2 is always nonempty when called from {{Citation/core}}.
  2. It's up to {{Citation/core}} to stop italicized "'foo' &amp; 'bar'" from becoming
     "'''foo' &amp; 'bar'''". Citation/core does this by having a &lt;nowiki&gt;&lt;/nowiki&gt;
     at both beginning and end of the call to this template. Since this is only
     needed once, it's more efficient to do it in {{Citation/core}} than here.
--&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>kpq1iofpfn0fdo5bshpu1vjve3ehx2d</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite book</title>
    <ns>10</ns>
    <id>98807</id>
    <revision>
      <id>1778743</id>
      <parentid>1778699</parentid>
      <timestamp>2010-04-27T15:25:20Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>includeonlys to remove extra gap above documentation section</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4722" xml:space="preserve">&lt;includeonly&gt;{{Citation/core
 |Citation class=book
  |AuthorMask = {{{authormask|{{{author-mask|}}}}}}
  |Surname1 = {{{last|{{{surname|{{{last1|{{{surname1|{{{author1|{{{author|{{{authors|{{{author|}}}}}}}}}}}}}}}}}}}}}}}}
  |Surname2 = {{{last2|{{{surname2|{{{author2|}}}}}}}}}
  |Surname3 = {{{last3|{{{surname3|{{{author3|}}}}}}}}}
  |Surname4 = {{{last4|{{{surname4|{{{author4|}}}}}}}}}
  |Surname5 = {{{last5|{{{surname5|{{{author5|}}}}}}}}}
  |Surname6 = {{{last6|{{{surname6|{{{author6|}}}}}}}}}
  |Surname7 = {{{last7|{{{surname7|{{{author7|}}}}}}}}}
  |Surname8 = {{{last8|{{{surname8|{{{author8|}}}}}}}}}
  |Surname9 = {{{last9|{{{surname9|{{{author9|}}}}}}}}}
  |Given1 = {{{first1|{{{given1|{{{first|{{{given|}}}}}}}}}}}}

  |Given2 = {{{first2|{{{given2|}}}}}}
  |Given3 = {{{first3|{{{given3|}}}}}}
  |Given4 = {{{first4|{{{given4|}}}}}}
  |Given5 = {{{first5|{{{given5|}}}}}}
  |Given6 = {{{first6|{{{given6|}}}}}}
  |Given7 = {{{first7|{{{given7|}}}}}}
  |Given8 = {{{first8|{{{given8|}}}}}}
  |Given9 = {{{first9|{{{given9|}}}}}}
  |Authorlink1 = {{{author-link|{{{author1-link|{{{authorlink|{{{authorlink1|}}}}}}}}}}}}
  |Authorlink2 = {{{author2-link|{{{authorlink2|}}}}}}
  |Authorlink3 = {{{author3-link|{{{authorlink3|}}}}}}
  |Authorlink4 = {{{author4-link|{{{authorlink4|}}}}}}
  |Authorlink5 = {{{author5-link|{{{authorlink5|}}}}}}
  |Authorlink6 = {{{author6-link|{{{authorlink6|}}}}}}
  |Authorlink7 = {{{author7-link|{{{authorlink7|}}}}}}
  |Authorlink8 = {{{author8-link|{{{authorlink8|}}}}}}
  |Authorlink9 = {{{author9-link|{{{authorlink9|}}}}}}
  |Coauthors = {{{coauthor|{{{coauthors|}}}}}}
  |Year={{{year|{{    &lt;!-- attempt to derive year from date, if possible --&gt;
             #if: {{{date|}}}
             |{{
                #iferror:{{#time:Y|{{{date|}}} }}
                |{{#iferror:{{#time:Y|{{{publication-date|einval}}} }}||{{#time:Y|{{{publication-date|}}} }}}}
                |{{#time:Y|{{{date|}}} }}
              }}
             |{{{publication-date|}}} &lt;!-- last resort --&gt;
           }}
        }}}
  |YearNote = {{{origyear|}}}
  |Date = {{#if:{{{date|}}}|{{{date}}}|{{{day|}}} {{{month|}}} {{{year|{{{publication-date|}}}}}}}}
  |Title={{{title|}}}
  |TransTitle={{{trans_chapter|}}}
  |TransItalic={{{trans_title|}}}
  |URL={{{url|}}}
  |TitleType={{{type|}}}
  |Series={{{series|}}}
  |Volume = {{{volume|}}}
  |Issue = {{{issue|{{{number|}}}}}}
  |At = {{
          #if: {{{journal|{{{periodical|{{{newspaper|{{{magazine|}}}}}}}}}}}}
          |{{{pages|{{{page|{{{at|}}}}}}}}}
          |{{
             #if: {{{page|}}}
             |{{#if:{{{nopp|}}}||p.&amp;nbsp;}}{{{page}}}
             |{{
                #if: {{{pages|}}}
                |{{#if:{{{nopp|}}}||pp.&amp;nbsp;}}{{{pages}}}
                |{{{at|}}}
              }}
           }}
        }}
  |IncludedWorkTitle = {{{chapter|{{{contribution|}}}}}}
  |IncludedWorkURL = {{{chapter-url|{{{chapterurl|{{{contribution-url|}}}}}}}}}
  |Other = {{{others|}}}
  |Edition = {{{edition|}}}
  |Place = {{{place|{{{location|}}}}}}
  |PublicationPlace = {{{publication-place|{{{place|{{{location|}}}}}}}}}
  |Publisher = {{{publisher|}}}
  |PublicationDate = {{{publication-date|}}}
  |EditorSurname1 = {{{editor-last|{{{editor-surname|{{{editor1-last|{{{editor1-surname|{{{editor|{{{editors|}}}}}}}}}}}}}}}}}}
  |EditorSurname2 = {{{editor2-last|{{{editor2-surname|}}}}}}
  |EditorSurname3 = {{{editor3-last|{{{editor3-surname|}}}}}}
  |EditorSurname4 = {{{editor4-last|{{{editor4-surname|}}}}}}
  |EditorGiven1 = {{{editor-first|{{{editor-given|{{{editor1-first|{{{editor1-given|}}}}}}}}}}}}
  |EditorGiven2={{{editor2-first|{{{editor2-given|}}}}}}
  |EditorGiven3={{{editor3-first|{{{editor3-given|}}}}}}
  |EditorGiven4={{{editor4-first|{{{editor4-given|}}}}}}
  |Editorlink1={{{editor-link|{{{editor1-link|}}}}}}
  |Editorlink2={{{editor2-link|}}}
  |Editorlink3={{{editor3-link|}}}
  |Editorlink4={{{editor4-link|}}}
  |language = {{{language|{{{in|}}}}}}
  |format = {{{format|}}}
  |ID={{{id|{{{ID|}}}}}}
  |ISBN={{{isbn|{{{ISBN|}}}}}}
  |OCLC={{{oclc|{{{OCLC|}}}}}}
  |Bibcode={{{bibcode|}}}
  |DOI={{{doi|{{{DOI|}}}}}}
  |DoiBroken={{{doi_brokendate|}}}
  |AccessDate={{{access-date|{{{accessdate|}}}}}}
  |DateFormat={{{dateformat|none}}}
  |quote = {{{quote|}}}
  |laysummary = {{{laysummary|}}}
  |laydate = {{{laydate|}}}
  |Ref={{{ref|}}}
  |Sep = {{{separator|{{{seperator|.}}}}}}
  |PS = {{#if:{{{quote|}}}||{{{postscript|.}}}}}
  |AuthorSep = {{#ifeq:{{{author-separator|}}}|;|&amp;#059;|{{{author-separator|&amp;#059;}}}}}&amp;#32;
  |NameSep = {{{author-name-separator|,}}}&amp;#32;
  |Trunc = {{{display-authors|8}}}
  |amp = {{{lastauthoramp|}}}
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>ep7zglljgao7mwwzfm5700o62zprc5r</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite conference</title>
    <ns>10</ns>
    <id>107573</id>
    <revision>
      <id>1780100</id>
      <parentid>1780099</parentid>
      <timestamp>2010-04-27T22:45:13Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Cite conference]]": High-impact page ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4563" xml:space="preserve">&lt;includeonly&gt;{{Citation/core
  |Citation class = book
  |Surname1 = {{{last|{{{surname|{{{last1|{{{surname1|{{{author1|{{{author|{{{authors|{{{author|}}}}}}}}}}}}}}}}}}}}}}}}
  |Surname2 = {{{last2|{{{surname2|{{{author2|}}}}}}}}}
  |Surname3 = {{{last3|{{{surname3|{{{author3|}}}}}}}}}
  |Surname4 = {{{last4|{{{surname4|{{{author4|}}}}}}}}}
  |Surname5 = {{{last5|{{{surname5|{{{author5|}}}}}}}}}
  |Surname6 = {{{last6|{{{surname6|{{{author6|}}}}}}}}}
  |Surname7 = {{{last7|{{{surname7|{{{author7|}}}}}}}}}
  |Surname8 = {{{last8|{{{surname8|{{{author8|}}}}}}}}}
  |Surname9 = {{{last9|{{{surname9|{{{author9|}}}}}}}}}
  |Given1 = {{{first1|{{{given1|{{{first|{{{given|}}}}}}}}}}}}
  |Given2 = {{{first2|{{{given2|}}}}}}
  |Given3 = {{{first3|{{{given3|}}}}}}
  |Given4 = {{{first4|{{{given4|}}}}}}
  |Given5 = {{{first5|{{{given5|}}}}}}
  |Given6 = {{{first6|{{{given6|}}}}}}
  |Given7 = {{{first7|{{{given7|}}}}}}
  |Given8 = {{{first8|{{{given8|}}}}}}
  |Given9 = {{{first9|{{{given9|}}}}}}
  |Authorlink1 = {{{author-link|{{{author1-link|{{{authorlink|{{{authorlink1|}}}}}}}}}}}}
  |Authorlink2 = {{{author2-link|{{{authorlink2|}}}}}}
  |Authorlink3 = {{{author3-link|{{{authorlink3|}}}}}}
  |Authorlink4 = {{{author4-link|{{{authorlink4|}}}}}}
  |Authorlink5 = {{{author5-link|{{{authorlink5|}}}}}}
  |Authorlink6 = {{{author6-link|{{{authorlink6|}}}}}}
  |Authorlink7 = {{{author7-link|{{{authorlink7|}}}}}}
  |Authorlink8 = {{{author8-link|{{{authorlink8|}}}}}}
  |Authorlink9 = {{{author9-link|{{{authorlink9|}}}}}}
  |Coauthors = {{{coauthor|{{{coauthors|}}}}}}
  |Year = {{{year|{{    &lt;!-- attempt to derive year from date, if possible --&gt;
             #if: {{{date|}}}
             |{{
                #iferror:{{#time:Y|{{{date|}}} }}
                |{{#iferror:{{#time:Y|{{{publication-date|einval}}} }}||{{#time:Y|{{{publication-date|}}} }}}}
                |{{#time:Y|{{{date|}}} }}
              }}
             |{{{publication-date|}}} &lt;!-- last resort --&gt;
           }}
        }}}
  |YearNote = {{{origyear|}}}
  |Date = {{#if:{{{date|}}}|{{{date}}}|{{{day|}}} {{{month|}}} {{{year|{{{publication-date|}}}}}}}}
  |Title = {{{booktitle|}}}
  |TransTitle = {{{trans_chapter|}}}
  |TransItalic = {{{trans_title|}}}
  |URL = {{{conferenceurl|}}}
  |Series = {{{conference|}}}
  |Volume = {{{volume|}}}
  |At = {{
          #if: {{{journal|{{{periodical|{{{newspaper|{{{magazine|}}}}}}}}}}}}
          |{{{pages|{{{page|{{{at|}}}}}}}}}
          |{{
             #if: {{{page|}}}
             |{{#if:{{{nopp|}}}||p.&amp;nbsp;}}{{{page}}}
             |{{
                #if: {{{pages|}}}
                |{{#if:{{{nopp|}}}||pp.&amp;nbsp;}}{{{pages}}}
                |{{{at|}}}
              }}
           }}
        }}
  |IncludedWorkTitle = {{{title|}}}
  |IncludedWorkURL = {{#if:{{{archiveurl|}}}|{{{archiveurl|}}}|{{{url|}}}}}
  |Other = {{{others|}}}
  |Edition = {{{edition|}}}
  |Place = {{{place|{{{location|}}}}}}
  |PublicationPlace = {{{publication-place|{{{place|{{{location|}}}}}}}}}
  |Publisher = {{{publisher|}}}
  |PublicationDate = {{{publication-date|}}}
  |EditorSurname1 = {{{editor-last|{{{editor-surname|{{{editor1-last|{{{editor1-surname|{{{editor|{{{editors|}}}}}}}}}}}}}}}}}}
  |EditorSurname2 = {{{editor2-last|{{{editor2-surname|}}}}}}
  |EditorSurname3 = {{{editor3-last|{{{editor3-surname|}}}}}}
  |EditorSurname4 = {{{editor4-last|{{{editor4-surname|}}}}}}
  |EditorGiven1 = {{{editor-first|{{{editor-given|{{{editor1-first|{{{editor1-given|}}}}}}}}}}}}
  |EditorGiven2 = {{{editor2-first|{{{editor2-given|}}}}}}
  |EditorGiven3 = {{{editor3-first|{{{editor3-given|}}}}}}
  |EditorGiven4 = {{{editor4-first|{{{editor4-given|}}}}}}
  |Editorlink1 = {{{editor-link|{{{editor1-link|}}}}}}
  |Editorlink2 = {{{editor2-link|}}}
  |Editorlink3 = {{{editor3-link|}}}
  |Editorlink4 = {{{editor4-link|}}}
  |language = {{{language|{{{in|}}}}}}
  |format = {{{format|}}}
  |ID = {{{id|{{{ID|}}}}}}
  |ISBN = {{{isbn|{{{ISBN|}}}}}}
  |OCLC = {{{oclc|{{{OCLC|}}}}}}
  |Bibcode = {{{bibcode|}}}
  |DOI = {{{doi|{{{DOI|}}}}}}
  |DoiBroken = {{{doi_brokendate|}}}
  |AccessDate = {{{access-date|{{{accessdate|}}}}}}
  |DateFormat = {{{dateformat|none}}}
  |quote = {{{quote|}}}
  |laysummary = {{{laysummary|}}}
  |laydate = {{{laydate|}}}
  |Ref = {{{ref|}}}
  |Sep = {{{separator|{{{seperator|.}}}}}}
  |PS = {{#if:{{{quote|}}}||{{{postscript|.}}}}}
  |OriginalURL={{{url|}}}
  |ArchiveURL={{{archiveurl|}}}
  |ArchiveDate={{{archivedate|}}}
  |amp = {{{lastauthoramp|}}}
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>42uogb3eeuc2agyu75yf13thplo4ola</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite journal</title>
    <ns>10</ns>
    <id>86694</id>
    <revision>
      <id>1779566</id>
      <parentid>1779565</parentid>
      <timestamp>2010-04-27T20:44:38Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Cite journal]]": High-impact page ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5013" xml:space="preserve">&lt;includeonly&gt;{{Citation/core
  |Citation type=Journal
  |AuthorMask = {{{author-mask|{{{authormask|}}}}}}
  |Surname1 = {{{last|{{{surname|{{{last1|{{{surname1|{{{author1|{{{author|{{{authors|{{{author|}}}}}}}}}}}}}}}}}}}}}}}}
  |Surname2 = {{{last2|{{{surname2|{{{author2|}}}}}}}}}
  |Surname3 = {{{last3|{{{surname3|{{{author3|}}}}}}}}}
  |Surname4 = {{{last4|{{{surname4|{{{author4|}}}}}}}}}
  |Surname5 = {{{last5|{{{surname5|{{{author5|}}}}}}}}}
  |Surname6 = {{{last6|{{{surname6|{{{author6|}}}}}}}}}
  |Surname7 = {{{last7|{{{surname7|{{{author7|}}}}}}}}}
  |Surname8 = {{{last8|{{{surname8|{{{author8|}}}}}}}}}
  |Surname9 = {{{last9|{{{surname9|{{{author9|}}}}}}}}}
  |Given1 = {{{first1|{{{given1|{{{first|{{{given|}}}}}}}}}}}}
  |Given2 = {{{first2|{{{given2|}}}}}}
  |Given3 = {{{first3|{{{given3|}}}}}}
  |Given4 = {{{first4|{{{given4|}}}}}}
  |Given5 = {{{first5|{{{given5|}}}}}}
  |Given6 = {{{first6|{{{given6|}}}}}}
  |Given7 = {{{first7|{{{given7|}}}}}}
  |Given8 = {{{first8|{{{given8|}}}}}}
  |Given9 = {{{first9|{{{given9|}}}}}}
  |Authorlink1 = {{{author-link|{{{author1-link|{{{authorlink|{{{authorlink1|}}}}}}}}}}}}
  |Authorlink2 = {{{author2-link|{{{authorlink2|}}}}}}
  |Authorlink3 = {{{author3-link|{{{authorlink3|}}}}}}
  |Authorlink4 = {{{author4-link|{{{authorlink4|}}}}}}
  |Authorlink5 = {{{author5-link|{{{authorlink5|}}}}}}
  |Authorlink6 = {{{author6-link|{{{authorlink6|}}}}}}
  |Authorlink7 = {{{author7-link|{{{authorlink7|}}}}}}
  |Authorlink8 = {{{author8-link|{{{authorlink8|}}}}}}
  |Authorlink9 = {{{author9-link|{{{authorlink9|}}}}}}
  |Coauthors = {{{coauthor|{{{coauthors|}}}}}}
  |Year={{{year|{{    &lt;!-- attempt to derive year from date, if possible --&gt;
             #if: {{{date|}}}
             |{{
                #iferror:{{#time:Y|{{{date|}}} }}
                |{{#iferror:{{#time:Y|{{{publication-date|einval}}} }}||{{#time:Y|{{{publication-date|}}} }}}}
                |{{#time:Y|{{{date|}}} }}
              }}
             |{{{publication-date|}}} &lt;!-- last resort --&gt;
           }}
        }}}
  |Date = {{#if:{{{date|}}}|{{{date}}}|{{{day|}}} {{{month|}}} {{{year|{{{publication-date|}}}}}}}}
  |Title={{{title|}}}
  |TransTitle={{{trans_title|}}}
  |URL={{#if:{{{archiveurl|}}}|{{{archiveurl}}}|{{{url|}}}}} 
  |Series={{{series|{{{version|}}}}}}
  |Periodical = {{{journal|{{{periodical|{{{magazine|{{{work|}}}}}}}}}}}}
  |Volume = {{{volume|}}}
  |Issue = {{{issue|{{{number|}}}}}}
  |At = {{
          #if: {{{journal|{{{periodical|{{{magazine|{{{work|}}}}}}}}}}}}
          |{{{pages|{{{page|{{{at|}}}}}}}}}
          |{{
             #if: {{{page|}}}
             |p. {{{page}}}
             |{{
                #if: {{{pages|}}}
                |pp. {{{pages}}}
                |{{{at|}}}
              }}
           }}
        }}
  |IncludedWorkTitle = {{{chapter|{{{contribution|}}}}}}
  |IncludedWorkURL = {{{chapter-url|{{{chapterurl|{{{contribution-url|}}}}}}}}}
  |Edition = {{{edition|}}}
  |Place = {{{place|{{{location|}}}}}}
  |PublicationPlace = {{{publication-place|{{{place|{{{location|}}}}}}}}}
  |Publisher = {{{publisher|}}}
  |PublicationDate = {{{publication-date|}}}
  |EditorSurname1 = {{{editor-last|{{{editor-surname|{{{editor1-last|{{{editor1-surname|{{{editor|{{{editors|}}}}}}}}}}}}}}}}}}
  |EditorSurname2 = {{{editor2-last|{{{editor2-surname|}}}}}}
  |EditorSurname3 = {{{editor3-last|{{{editor3-surname|}}}}}}
  |EditorSurname4 = {{{editor4-last|{{{editor4-surname|}}}}}}
  |EditorGiven1 = {{{editor-first|{{{editor-given|{{{editor1-first|{{{editor1-given|}}}}}}}}}}}}
  |EditorGiven2={{{editor2-first|{{{editor2-given|}}}}}}
  |EditorGiven3={{{editor3-first|{{{editor3-given|}}}}}}
  |EditorGiven4={{{editor4-first|{{{editor4-given|}}}}}}
  |Editorlink1={{{editor-link|{{{editor1-link|}}}}}}
  |Editorlink2={{{editor2-link|}}}
  |Editorlink3={{{editor3-link|}}}
  |Editorlink4={{{editor4-link|}}}
  |Other = {{{others|}}}
  |language = {{{language|{{{in|}}}}}}
  |format = {{{format|}}}
  |ID={{{id|{{{ID|}}}}}}
  |ISBN={{{isbn|{{{ISBN|}}}}}}
  |ISSN={{{issn|{{{ISSN|}}}}}}
  |OCLC={{{oclc|{{{OCLC|}}}}}}
  |PMID={{{pmid|{{{PMID|}}}}}}
  |PMC={{{pmc|{{{PMC|}}}}}}
  |Embargo={{{pmc-embargo-date|1010-10-10}}}
  |Bibcode={{{bibcode|}}}
  |DOI={{{doi|{{{DOI|}}}}}}
  |DoiBroken={{{doi_brokendate|}}}
  |AccessDate={{{access-date|{{{accessdate|}}}}}}
  |OriginalURL={{{url|}}}
  |ArchiveURL={{{archiveurl|}}}
  |ArchiveDate={{{archivedate|}}}
  |laysource = {{{laysource|}}}
  |laysummary = {{{laysummary|}}}
  |laydate = {{{laydate|}}}
  |quote = {{{quote|}}}
  |Ref={{{ref|}}}
  |Sep = {{#ifeq:{{{separator|{{{seperator}}} }}}|;|&amp;#059;|{{{separator|{{{seperator|.}}} }}} }}
  |PS = {{{postscript|.}}}
  |AuthorSep = {{#ifeq:{{{author-separator|}}}|;|&amp;#059;|{{{author-separator|&amp;#059;}}}}}&amp;#32;
  |NameSep = {{{author-name-separator|,}}}&amp;#32;
  |Trunc = {{#if:{{{display-authors|}}}|{{{display-authors}}}|8}}
  |amp = {{{use ampersand before last author|}}}
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>knv88jwm4u3bp3rbzzahe39tk8lt69m</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite newsgroup</title>
    <ns>10</ns>
    <id>159051</id>
    <revision>
      <id>1781022</id>
      <parentid>1781019</parentid>
      <timestamp>2010-04-28T00:30:33Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Cite newsgroup]]": High-impact page ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="724" xml:space="preserve">&lt;includeonly&gt;&lt;span class="citation newsgroup"&gt;{{{author|}}}{{#if: {{{date|}}}
   |&amp;#32;({{{date}}}){{{Sep|.}}}&amp;#32;
   |{{#if: {{{author|}}}
     |{{{Sep|.}}}&amp;#32;
   }}
 }}"''{{#if: {{{id|}}}
   |[news:{{{id}}} {{{title}}}]
   |{{{title}}}
 }}''"{{{Sep|.}}}&amp;#32;{{#if: {{{newsgroup|}}}
   |[news:{{{newsgroup}}} {{{newsgroup}}}]{{{Sep|.}}}&amp;#32;
 }}{{#if: {{{url|}}}
   |[{{{url}}} (Web link)]{{{Sep|.}}}&amp;#32;
   |{{#if: {{{id|}}}
      |[http://groups.google.com/groups?selm={{{id}}} (Google Groups)]{{{Sep|.}}}&amp;#32;
   }}
 }}{{#if: {{{accessdate|}}}
   |Retrieved on {{{accessdate}}}{{{Sep|.}}}&amp;#32; 
 }}{{#if:{{{quote|}}}
   |"{{{quote}}}"&amp;#32;
 }}{{{PS|}}}&lt;/span&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}} 
&lt;/noinclude&gt;</text>
      <sha1>fqvudmqxqx7cdxwvmj1vc386s6kw04z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite paper</title>
    <ns>10</ns>
    <id>162925</id>
    <redirect title="Template:Cite journal" />
    <revision>
      <id>1779557</id>
      <parentid>1779556</parentid>
      <timestamp>2010-04-27T20:39:10Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Cite paper]]": Redirect to protect page ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="34" xml:space="preserve">#REDIRECT[[Template:Cite journal]]</text>
      <sha1>tduh0u1higngnp6sq21bekil5kl4i1m</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Cite web</title>
    <ns>10</ns>
    <id>91492</id>
    <revision>
      <id>1779995</id>
      <parentid>1779993</parentid>
      <timestamp>2010-04-27T22:29:53Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Cite web]]": High-impact page ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3774" xml:space="preserve">&lt;includeonly&gt;{{Citation/core
  |Citation class=web
  |Surname1 = {{#if:{{{last|}}}
                |{{{last}}}
                |{{#if:{{{last1|}}}
                   |{{{last1}}}
                   |{{{author|}}} 
                 }}
              }}
  |Surname2 = {{{last2|{{{surname2|{{{author2|}}}}}}}}} 
  |Surname3 = {{{last3|}}}
  |Surname4 = {{{last4|}}}
  |Surname5 = {{{last5|}}}
  |Surname6 = {{{last6|}}}
  |Surname7 = {{{last7|}}}
  |Surname8 = {{{last8|}}}
  |Surname9 = {{{last9|}}}
  |Given1 = {{#if:{{{first|}}}|{{{first}}}|{{{first1|}}}}}
  |Given2 = {{{first2|}}}
  |Given3 = {{{first3|}}}
  |Given4 = {{{first4|}}}
  |Given5 = {{{first5|}}}
  |Given6 = {{{first6|}}}
  |Given7 = {{{first7|}}}
  |Given8 = {{{first8|}}}
  |Given9 = {{{first9|}}}
  |Authorlink1 = {{#if:{{{authorlink|}}}|{{{authorlink}}}|{{{authorlink1|}}}}}
  |Authorlink2 = {{{authorlink2|}}}
  |Authorlink3 = {{{authorlink3|}}}
  |Authorlink4 = {{{authorlink4|}}}
  |Authorlink5 = {{{authorlink5|}}}
  |Authorlink6 = {{{authorlink6|}}}
  |Authorlink7 = {{{authorlink7|}}}
  |Authorlink8 = {{{authorlink8|}}}
  |Authorlink9 = {{{authorlink9|}}}
  |Coauthors = {{{coauthor|{{{coauthors|}}}}}}
  |EditorSurname1 = {{{editor-last|{{{editor-surname|{{{editor1-last|{{{editor1-surname|{{{editor1|{{{editor|{{{editors|}}}}}}}}}}}}}}}}}}}}}
  |EditorSurname2 = {{{editor2-last|{{{editor2-surname|{{{editor2|}}}}}}}}}
  |EditorSurname3 = {{{editor3-last|{{{editor3-surname|{{{editor3|}}}}}}}}}
  |EditorSurname4 = {{{editor4-last|{{{editor4-surname|{{{editor4|}}}}}}}}}
  |EditorGiven1 = {{{editor-first|{{{editor-given|{{{editor1-first|{{{editor1-given|}}}}}}}}}}}}
  |EditorGiven2={{{editor2-first|{{{editor2-given|}}}}}}
  |EditorGiven3={{{editor3-first|{{{editor3-given|}}}}}}
  |EditorGiven4={{{editor4-first|{{{editor4-given|}}}}}}
  |Editorlink1={{{editor-link|{{{editor1-link|}}}}}}
  |Editorlink2={{{editor2-link|}}}
  |Editorlink3={{{editor3-link|}}}
  |Editorlink4={{{editor4-link|}}}
  |Year={{#if:{{{year|}}}|{{{year}}}    &lt;!-- attempt to derive year from date, if possible --&gt;
          |{{#if: {{{date|}}}
             |{{#iferror: {{#time:Y|{{{date|}}} }}
                |{{#iferror:{{#time:Y|{{{publication-date|einval}}} }}||{{#time:Y|{{{publication-date|}}} }}}}
                |{{#time:Y|{{{date|}}} }}
              }}
             |{{{publication-date|}}} &lt;!-- last resort --&gt;
           }}
        }}
  |Date = {{#if:{{{date|}}}|{{{date}}}|{{{day|}}} {{{month|}}} {{#if:{{{year|}}}|{{{year}}}|{{{publication-date|}}}}}}}
  |Title={{{work|}}}
  |TransTitle={{{trans_title|}}}
  |At = {{#if:{{{page|}}}|p. {{{page}}}|{{#if:{{{pages|}}}|pp. {{{pages|}}}|{{{at|}}} }} }}
  |IncludedWorkTitle = {{
    #if:{{{title|}}}
    |{{{title}}}
    |{{
      #if:{{{trans_title|}}}
      |
      |{{Citation error|no &lt;code&gt;&amp;#124;title&amp;#61;&lt;/code&gt; specified|Cite web}}
      }}
    }}
  |IncludedWorkURL = {{#if:{{{archiveurl|}}}|{{{archiveurl|}}}|{{{url|}}}}}
  |PublicationPlace = {{{location|}}}
  |Publisher = {{{publisher|}}}
  |language = {{{language|}}}
  |format = {{{format|}}}
  |DOI={{{doi|{{{DOI|}}}}}}
  |AccessDate={{#if:{{{accessdate|}}}
                |{{#if: {{{accessyear|}}}
                   |{{{accessdate}}} {{{accessyear}}}
                   |{{{accessdate}}}
                 }}
                |{{{accessday|}}} {{{accessmonth|}}} {{{accessyear|}}}
   }}
  |DateFormat={{#if:{{{dateformat|}}}|{{{dateformat}}}|none}}
  |quote = {{{quote|}}}
  |Ref={{{ref|}}}
  |Sep = {{#ifeq:{{{separator|{{{seperator}}} }}}|;|&amp;#059;|{{{separator|{{{seperator|.}}} }}} }}
  |PS={{#if:{{{quote|}}}||{{{postscript|.}}}}}
  |ArchiveURL = {{{archiveurl|}}}
  |OriginalURL = {{{url|}}}
  |ArchiveDate= {{{archivedate|}}}
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>2gp8ea9tjh9vkfl8nufahdy47b6i8k1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/1</title>
    <ns>10</ns>
    <id>22657</id>
    <revision>
      <id>3363686</id>
      <parentid>1515158</parentid>
      <timestamp>2018-01-18T01:46:47Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="573" xml:space="preserve">== Conditionals ==

Conditional clauses are blocks of code that will only execute if a particular expression (the condition) is [[w:Truth function|true]].

=== ''if''-''else'' ===

The ''if''-''else'' statement is the simplest of the conditional statements. They are also called branches, as when the program arrives at an ''if'' statement during its execution, control will "branch" off into one of two or more "directions". An ''if''-''else'' statement is generally in the following form:
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>5hgzge3q902ty3lh2yp4p85etsh3c2u</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/1.1</title>
    <ns>10</ns>
    <id>26564</id>
    <revision>
      <id>3363697</id>
      <parentid>1514917</parentid>
      <timestamp>2018-01-18T02:45:53Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="657" xml:space="preserve">If the original condition is met, then all the code within the first statement is executed. The optional else section specifies an alternative statement that will be executed if the condition is false. Exact syntax will vary between programming languages, but the majority of programming languages (especially [[Computer Programming/Procedural programming|procedural]] and [[Computer Programming/Structured programming|structured]] languages) will have some form of if-else conditional statement built-in. The if-else statement can usually be extended to the following form:
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>pww7o7m2agdemyueoc65xjhny61kteu</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/1.2</title>
    <ns>10</ns>
    <id>26565</id>
    <revision>
      <id>3363698</id>
      <parentid>1514920</parentid>
      <timestamp>2018-01-18T02:45:56Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="312" xml:space="preserve">Only one statement in the entire block will be executed. This statement will be the first one with a condition which evaluates to be true. The concept of an if-else-if structure is easier to understand with the aid of an example:
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>silvkq0qp517v4kz32brvmcs1989g5r</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/1.3</title>
    <ns>10</ns>
    <id>26566</id>
    <revision>
      <id>3363699</id>
      <parentid>1515004</parentid>
      <timestamp>2018-01-18T02:45:58Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1379" xml:space="preserve">=== Optimizing hints ===

When this program executes, the computer will check all conditions in order until one of them matches its concept of truth. As soon as this occurs, the program will execute the statement immediately following the condition and continue on, without checking any other condition for truth. For this reason, when you are trying to [[Wikipedia:Optimization_%28computer_science%29|optimize]] a program, it is a good idea to sort your if-else conditions in descending [[Probability/Introduction|probability]]. This will ensure that in the most common scenarios, the computer has to do less work, as it will most likely only have to check one or two "branches" before it finds the statement which it should execute. However, when writing programs for the first time, try not to think about this too much lest you find yourself undertaking [[w:Premature_optimization#When_to_optimize|premature optimization]].

Having said all that, you should be aware that an [[w:Optimizing_compiler|optimizing compiler]] might rearrange your ''if statement'' at will when the statement in question is free from [[w:Side-effect_(computer_science)|side effects]]. Among other techniques optimizing compilers might even apply [[w:Jump_table|jump tables]] and [[w:Binary_search|binary searches]].
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>j4lbguqhauvy41uwy7gf1vx6qskmadp</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/10</title>
    <ns>10</ns>
    <id>22669</id>
    <revision>
      <id>3363677</id>
      <parentid>2310438</parentid>
      <timestamp>2018-01-18T01:46:21Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="362" xml:space="preserve">=== Loop with condition in the middle ===

Sometimes you need to first make a calculation and exit the loop when a certain criterion is met. However when the criterion is not met there is something else to be done. Hence you need a loop where the exit condition is in the middle.
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>4t8k7mv0eqn33qvdiizsfjhja8fk43j</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/11</title>
    <ns>10</ns>
    <id>22670</id>
    <revision>
      <id>3363676</id>
      <parentid>1634183</parentid>
      <timestamp>2018-01-18T01:46:18Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="390" xml:space="preserve">=== ''for'' loop ===

Quite often one needs a loop where a specific variable is counted from a given start value up or down to a specific end value. You could use the [[#Loop with condition at the beginning|while]] loop here &amp;mdash; but since this is a very common loop there is an easier syntax available.

&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>bzmv1ctonjyko0p8c91qahdodx81f9o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/12</title>
    <ns>10</ns>
    <id>22671</id>
    <revision>
      <id>3363675</id>
      <parentid>1514936</parentid>
      <timestamp>2018-01-18T01:46:16Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="273" xml:space="preserve">==== ''for'' loop on arrays ====

Another very common situation is the need for a loop which iterates over every element of an array. The following sample code shows you how to achieve this:
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>sw7igh3ny5z1v0fy0maia8hjwxl9p8u</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/2</title>
    <ns>10</ns>
    <id>22658</id>
    <revision>
      <id>3363685</id>
      <parentid>1514939</parentid>
      <timestamp>2018-01-18T01:46:44Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="277" xml:space="preserve">=== ''case'' ===

Often it is necessary to compare one specific variable against several constant expressions. For this kind of conditional expression the ''case'' statement exists. For example:
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>9f3c5pbp5o83q3l317t06fxakj9fo2v</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/3</title>
    <ns>10</ns>
    <id>22662</id>
    <revision>
      <id>3506933</id>
      <parentid>3506932</parentid>
      <timestamp>2019-01-02T10:55:21Z</timestamp>
      <contributor>
        <username>Vermont</username>
        <id>3120144</id>
      </contributor>
      <minor/>
      <comment>[[WB:REVERT|Reverted]] edits by [[Special:Contributions/149.200.93.168|149.200.93.168]] ([[User talk:149.200.93.168|talk]]) to last version by Pi zero</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="434" xml:space="preserve">== Unconditionals ==

Unconditionals let you change the flow of your program without a condition. You should be careful when using unconditionals. Often they make programs difficult to understand. Read [[#Isn.27t_goto_evil.3F|Isn't goto evil?]] for more information.

=== ''return'' ===

End a function and return to the calling procedure or function.
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>35v9n6psc4va6q0lwxcb7uwpc50e6of</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/4</title>
    <ns>10</ns>
    <id>22663</id>
    <revision>
      <id>3363683</id>
      <parentid>1514949</parentid>
      <timestamp>2018-01-18T01:46:39Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="161" xml:space="preserve">=== ''goto'' ===

''Goto'' transfers control to the statement after the label.
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>2wsmp4aar52sj0yia8n3i2wk62a8wzf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/5</title>
    <ns>10</ns>
    <id>22664</id>
    <revision>
      <id>3363682</id>
      <parentid>3315841</parentid>
      <timestamp>2018-01-18T01:46:36Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="869" xml:space="preserve">==== Isn't ''goto'' evil? ====

One often hears that ''goto'' is '''evil''' and one should avoid using ''goto''. But it is often overlooked that any return which is not the last statement inside a procedure or function is also an unconditional statement &amp;mdash; a ''goto'' in disguise.  There is an important difference though: a return is a forward only use of ''goto''.  Exceptions are also a type of goto statement; worse, they need not specify where they are going to!

Therefore if you have functions and procedures with more than one ''return'' statement you can just as well use ''goto''. In practice, nearly every programmer is familiar with a 'return' statement and its associated behavior; thus, when it comes down to readability the following two samples are almost the same:
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>gf1wcqzoprhk3bcegmcdoho37oyxf47</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/6</title>
    <ns>10</ns>
    <id>22665</id>
    <revision>
      <id>3363681</id>
      <parentid>1514959</parentid>
      <timestamp>2018-01-18T01:46:32Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="472" xml:space="preserve">Because the use of a ''goto'' needs the declaration of a label, the ''goto'' is in fact twice as readable than the use of ''return''. So if readability is your concern and not a strict "don't use ''goto''" programming rule then you should rather use ''goto'' than multiple ''return''s. Best, of course, is the structured approach where neither ''goto'' nor multiple ''returns'' are needed:
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>ox34cjdilrkvbp2ep2bmvs1jys4juf2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/7</title>
    <ns>10</ns>
    <id>22666</id>
    <revision>
      <id>3363680</id>
      <parentid>3071026</parentid>
      <timestamp>2018-01-18T01:46:30Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="466" xml:space="preserve">== Loops ==

Loops allow you to have a set of statements repeated over and over again.

=== Endless Loop ===

The endless loop is a loop which never ends and the statements inside are repeated forever. The term, ''endless loop'', is a relative term; if the running program is forcibly terminated by some means beyond the control of the program, then an endless loop will indeed end.

&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>jcdcwaoroa9amjjdagl99gqzonxp6db</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/8</title>
    <ns>10</ns>
    <id>22667</id>
    <revision>
      <id>3363679</id>
      <parentid>2052500</parentid>
      <timestamp>2018-01-18T01:46:26Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="341" xml:space="preserve">=== Loop with condition at the beginning ===

This loop has a condition at the beginning.  The statements are repeated as long as the condition is met.  If the condition is not met at the very beginning then the statements inside the loop are never executed.
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>jrtcuwq05mx8qnv57b3rocqozhmfmai</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Control/9</title>
    <ns>10</ns>
    <id>22668</id>
    <revision>
      <id>3363678</id>
      <parentid>1515010</parentid>
      <timestamp>2018-01-18T01:46:23Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="292" xml:space="preserve">=== Loop with condition at the end ===

This loop has a condition at the end and the statements are repeated until the condition is met. Since the check is at the end the statements are at least executed once.
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>7qon9s8gk92w4z7f7pfezccqn8i0w1h</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Statements/1</title>
    <ns>10</ns>
    <id>22587</id>
    <revision>
      <id>3363661</id>
      <parentid>1515090</parentid>
      <timestamp>2018-01-18T01:28:22Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="340" xml:space="preserve">''Note: there are some simplifications in the explanations below.  Don't take anything too literally.''

Most programming languages have the concept of a statement.  A '''''statement''''' is a command that the programmer gives to the computer.  For example:
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>rrk0c1ac968oa3j0fc5dqe5tlzfc7dk</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Statements/2</title>
    <ns>10</ns>
    <id>22591</id>
    <revision>
      <id>3363660</id>
      <parentid>1515093</parentid>
      <timestamp>2018-01-18T01:28:13Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="648" xml:space="preserve">This command has a verb ("{{{1}}}") and other details (what to print).  In this case, the command &lt;tt&gt;"{{{1}}}"&lt;/tt&gt; means "show on the screen," not "print on the printer."  The programmer either gives the statement directly to the computer (by typing it while running a special program), or creates a text file with the command in it.  You could create a file called "hi.txt", put the above command in it, and give the file to the computer.

If you have more than one command in the file, each will be performed in order, top to bottom.  So the file could contain:
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>7lsxppbqos2dptpubjj5igjbmp9zt90</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Variables/1</title>
    <ns>10</ns>
    <id>22538</id>
    <revision>
      <id>3363590</id>
      <parentid>1515100</parentid>
      <timestamp>2018-01-17T22:04:23Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="792" xml:space="preserve">Variables are ''references'' that stand in for a ''value'' that is contained at a certain memory address.

Variables are said to have a value and ''may'' have a [[Computer Programming/Types|data type]].  If a variable has a type, then only values of this type may be assigned to it. Variables do not always have a type.

A value can have many values of many different types: integers (7), ratios (1/2), (approximations of) reals (10.234), complex numbers (4+2i), characters ('a'), strings ("hello"), and much more.

Different languages use different names for their types and may not include any of the above.

== Assignment statements ==

An ''assignment statement'' is used to set a variable to a new value.
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>gce0hvjeyhwyz6g66dkpnbnqg6y9y4c</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Variables/2</title>
    <ns>10</ns>
    <id>22540</id>
    <revision>
      <id>3363591</id>
      <parentid>1515104</parentid>
      <timestamp>2018-01-17T22:04:53Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="368" xml:space="preserve">The example set the variable ''X'' to the integer value of ''10''. The assignment statement overwrites the contents of the variable and the previous value is lost.

In some languages, before a variable can be used, it will have to be declared, where the declaration specifies the type.
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>nmyxdi8kazr6jz9duq20o6ekxae2ksy</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Computer Programming/Variables/3</title>
    <ns>10</ns>
    <id>22543</id>
    <revision>
      <id>3363592</id>
      <parentid>2145410</parentid>
      <timestamp>2018-01-17T22:05:01Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>{{BOOKSORTKEY}}</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="197" xml:space="preserve">== Uses ==

Variables store everything in your program.  The purpose of any useful program is to modify variables.
&lt;noinclude&gt;[[Category:Computer Programming Templates|{{BOOKSORTKEY}}]]&lt;/noinclude&gt;</text>
      <sha1>njwyfsvc7fccjanu1b70xv8p3prddzf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Evalx</title>
    <ns>10</ns>
    <id>377857</id>
    <revision>
      <id>3149922</id>
      <parentid>3140393</parentid>
      <timestamp>2016-11-18T23:55:55Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Evalx]]": high-impact page ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="116" xml:space="preserve">{{#invoke:{{#if:{{{test-eval|}}}|{{{test-eval}}}|Wikilisp}}|trep|{{{1|}}}}}&lt;noinclude&gt;
{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>gi5tdyhnger0muaubi6cl480g1rg8rt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Existlist</title>
    <ns>10</ns>
    <id>122484</id>
    <revision>
      <id>1618516</id>
      <parentid>988019</parentid>
      <timestamp>2009-08-29T03:34:35Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>+category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1663" xml:space="preserve">&lt;includeonly&gt;&lt;!--
--&gt;{{#ifeq:{{{1|}}}|{{{1|+}}}|{{#ifexist:{{#rel2abs:{{{1}}}}}|{{#rel2abs:{{{1}}}}}|&lt;!--
--&gt;{{#ifeq:{{{2|}}}|{{{2|+}}}|{{#ifexist:{{#rel2abs:{{{2}}}}}|{{#rel2abs:{{{2}}}}}|&lt;!--
--&gt;{{#ifeq:{{{3|}}}|{{{3|+}}}|{{#ifexist:{{#rel2abs:{{{3}}}}}|{{#rel2abs:{{{3}}}}}|&lt;!--
--&gt;{{#ifeq:{{{4|}}}|{{{4|+}}}|{{#ifexist:{{#rel2abs:{{{4}}}}}|{{#rel2abs:{{{4}}}}}|&lt;!--
--&gt;{{#ifeq:{{{5|}}}|{{{5|+}}}|{{#ifexist:{{#rel2abs:{{{5}}}}}|{{#rel2abs:{{{5}}}}}|&lt;!--
--&gt;{{#ifeq:{{{6|}}}|{{{6|+}}}|{{#ifexist:{{#rel2abs:{{{6}}}}}|{{#rel2abs:{{{6}}}}}|&lt;!--
--&gt;{{#ifeq:{{{7|}}}|{{{7|+}}}|{{#ifexist:{{#rel2abs:{{{7}}}}}|{{#rel2abs:{{{7}}}}}|&lt;!--
--&gt;{{#ifeq:{{{8|}}}|{{{8|+}}}|{{#ifexist:{{#rel2abs:{{{8}}}}}|{{#rel2abs:{{{8}}}}}|&lt;!--
--&gt;{{#ifeq:{{{9|}}}|{{{9|+}}}|{{#ifexist:{{#rel2abs:{{{9}}}}}|{{#rel2abs:{{{9}}}}}|&lt;!--
--&gt;{{#ifeq:{{{10|}}}|{{{10|+}}}|{{#ifexist:{{#rel2abs:{{{10}}}}}|{{#rel2abs:{{{10}}}}}|&lt;!--
--&gt;{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|&lt;!--
--&gt;{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|&lt;!--
--&gt;{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|&lt;!--
--&gt;{{{else|}}}}}|{{{else|}}}}}&lt;!--
--&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{esoteric}}

;Example Usage: [[{{tlx|existlist|A|B|C|Wikibooks:Sandbox|E|F|G}}]]
;Result: [[{{existlist|A|B|C|Wikibooks:Sandbox|E|F|G}}]]

;Example Usage: [[{{tlx|existlist|A|B|C|Wikibooks:Sandbox|E|F|G}}|click here]]
;Result: [[{{existlist|A|B|C|Wikibooks:Sandbox|E|F|G}}|click here]]

;What it does: returns the name of the first page which exists up to 10 max.
[[Category:Utility templates|{{PAGENAME}}]]
&lt;/noinclude&gt;</text>
      <sha1>ky5n5d7c3w6km147ef9nw9iawcrdar3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Featured book</title>
    <ns>10</ns>
    <id>118950</id>
    <revision>
      <id>3366025</id>
      <parentid>3065778</parentid>
      <timestamp>2018-01-24T14:17:42Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKNAME (new-style)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2218" xml:space="preserve">{{ambox|type=notice|image=[[File:Featured book en.svg|50px|link=]]|{{#ifeq:{{{image|}}}|{{{image|}}}||imageright=[[File:{{{image|}}}|{{{size|50px}}}]]}}|text=''{{BOOKNAME}}'' is a [[Wikibooks:Featured books|featured book]] on Wikibooks because it contains substantial content, it is well-formatted, and the Wikibooks community {{#if:{{{page|}}}|[[{{{page}}}|has decided]]|{{#ifexist:Wikibooks:Featured books/Nominations/Addition/{{SUBJECTPAGENAME}}|[[Wikibooks:Featured books/Nominations/Addition/{{SUBJECTPAGENAME}}|has decided]]|has decided}}}} to feature it on the [[Main Page|main page]] or in other places. Please continue to improve it and thanks for the great work so far! {{#ifexist:Template:{{Featured book/Ad base}}/{{PAGENAME}}|You can edit its [[Template:{{Featured book/Ad base}}/{{PAGENAME}}|advertisement template]].|A {{tlx|{{Featured book/Ad base}}}} template should be created to [{{fullurl:Template:{{Featured book/Ad base}}/{{PAGENAME}}|action=edit&amp;preload=Template:{{anchorencode:{{Featured book/Ad base}}}}/Blank&amp;editintro=Template:{{anchorencode:{{Featured book/Ad base}}}}/Editintro}} advertise it].}} {{#if:{{{print|{{{PDF|}}}}}}|This book is also available as {{#if:{{{print|}}}|a [[File:Document-print.svg|20px|link=]] '''[{{fullurl:{{existlist|{{BOOKNAME}}/{{{print}}}|/{{{print}}}|{{{print}}}}}|printable=yes}} print version]''' {{#if:{{{PDF|}}}|&amp;nbsp;and as|.}} &lt;includeonly&gt;[[Category:Books with print version|{{PAGENAME}}]]&lt;/includeonly&gt;}} {{#if:{{{PDF|}}}|a [[File:Gnome-mime-application-pdf.svg|20px|link=]] '''[[Media:{{{PDF}}}.pdf|PDF version]]'''. &lt;includeonly&gt;[[Category:Books with PDF version|{{PAGENAME}}]]&lt;/includeonly&gt;}}}}&lt;includeonly&gt;{{#ifeq:{{{example|no}}}|no| {{#ifeq: {{#titleparts:{{PAGENAME}}||2}} | | [[Category:Featured books|{{PAGENAME}}]] }} }}&lt;/includeonly&gt;}}&lt;noinclude&gt;
==Parameters==
*&lt;tt&gt;image&lt;/tt&gt;: a thumbnail image representing the book; usually the same as the one on the good book template
*&lt;tt&gt;size&lt;/tt&gt;: for the size of the optional image (defaults to 50px)
*&lt;tt&gt;print&lt;/tt&gt;: the subpage name of the print version with no slash
*&lt;tt&gt;PDF&lt;/tt&gt;: the name of the book's PDF file with no ".pdf" at the end

[[Category:Featured-book templates|Book]]&lt;/noinclude&gt;</text>
      <sha1>p4rlfc9gr0q382epnqujwhgaclbxq72</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Featured book/Ad base</title>
    <ns>10</ns>
    <id>227636</id>
    <revision>
      <id>1807599</id>
      <parentid>1807590</parentid>
      <timestamp>2010-05-25T21:05:10Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>don't generate the namespace</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="478" xml:space="preserve">&lt;includeonly&gt;{{#if:{{NAMESPACE}}|Featured {{NAMESPACE}} book|Goodbook}}&lt;/includeonly&gt;&lt;noinclude&gt;
== Description ==
This template works out the base name for the advertisement template for a featured book.  If the book is in mainspace, the base template name is "Goodbook"; otherwise, it is {{nowrap|"Featured &lt;nowiki&gt;{{NAMESPACE}}&lt;/nowiki&gt; book"}}.
== See also ==
* [[Template:Goodbook]]
* [[Template:Featured Wikijunior book]]
[[Category:Featured-book templates| ]]&lt;/noinclude&gt;</text>
      <sha1>qj8wtiavak7ixcugmcaj3epncj3aul8</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Hide in print</title>
    <ns>10</ns>
    <id>225341</id>
    <revision>
      <id>1778094</id>
      <parentid>1778093</parentid>
      <timestamp>2010-04-27T13:31:08Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Hide in print]]": High-impact page ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="109" xml:space="preserve">&lt;includeonly&gt;{{{1|}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
[[Category:Exclude in print| ]]
&lt;/noinclude&gt;</text>
      <sha1>tvnms9jz42yzpfjz17tdfa22mm11pav</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Mbox-side</title>
    <ns>10</ns>
    <id>134043</id>
    <revision>
      <id>2308615</id>
      <parentid>2308609</parentid>
      <timestamp>2012-04-18T14:30:41Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Changed protection level for "[[Template:Mbox-side]]": High-impact page (‎[edit=sysop] (indefinite) ‎[move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1453" xml:space="preserve">&lt;table class="plainlinks noprint messagebox {{{type|notice}}}" style="width:250px; float:right; clear:right; margin:0px; margin-left:10px;"&gt;  
&lt;tr style="vertical-align:middle;"&gt;{{#ifeq:{{{image|yes}}}|none
 |&lt;!-- no image cell --&gt;
 |&lt;td style="padding:0.1em; text-align:center; vertical-align:middle; width:45px; border:none;"&gt;
{{#if:{{{image|}}}|[[Image:{{{image}}}|{{{size|40x40px}}}|link=]]|{{#switch:{{{type|notice}}}
 | warning  = [[Image:Nuvola apps important.svg|{{{size|40x40px}}}|link=]]
 | serious  = [[Image:Stop hand nuvola.svg|{{{size|40x40px}}}|link=]]
 | content  = [[Image:Book important2.svg|{{{size|45x45px}}}|link=]]
 | style    = [[Image:Applications-office.svg|{{{size|40x40px}}}|link=]]
 | merge    = [[Image:Merge-split-transwiki default.svg|{{{size|40x40px}}}|link=]]
 | move     = [[Image:Merge-split-transwiki default.svg|{{{size|40x40px}}}|link=]]
 | notice   = [[Image:Warning icon WikiBooks.svg|{{{size|40x40px}}}|link=]]
 | growth   = [[Image:Nuvola apps bookcase.svg|{{{size|40x40px}}}|link=]]
 | idea     = [[Image:Dialog-information on.svg|{{{size|40x40px}}}|link=]]
 | query    = [[Image:Emblem-question.svg|{{{size|40x40px}}}|link=]]
 | blank    = &lt;!-- empty image cell --&gt;}}}}&lt;/td&gt;}}
&lt;td style="{{{text style|color:black; text-align:left; vertical-align:middle; padding:0.5em; padding-left:0em; border:none;}}}"&gt;
{{{1|{{{msg|{{{text|Enter a message}}}}}}}}}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>sqzshy81a0z1bewsjiyas59niao0fw1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:NOTE</title>
    <ns>10</ns>
    <id>57094</id>
    <revision>
      <id>3563141</id>
      <parentid>3563135</parentid>
      <timestamp>2019-08-14T15:54:11Z</timestamp>
      <contributor>
        <username>QuiteUnusual</username>
        <id>134830</id>
      </contributor>
      <comment>Undid revision 3563135 by [[Special:Contributions/Spider 001757|Spider 001757]] ([[User talk:Spider 001757|discuss]]) - WB policy is to retain interwikis</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="835" xml:space="preserve">{| class="notice notice-note noprint" style="background: #f2fff2; border: solid 1px #bfffbf; padding: 0.5em; width: 95%; margin: auto; vertical-align: top; -moz-border-radius:10px;" 
 |
'''Note:'''&lt;br/&gt;
{{{1|{{{note}}}}}}
|}&lt;noinclude&gt;
Use: &lt;pre&gt;{{NOTE|note|Wikibookian}}&lt;/pre&gt;

All parameters are optional.
*note - the text displayed inside the NOTE box.
*Wikibookian - The name of the Wikibookian that wrote the NOTE. (Can be important to know who to contact in regard with a particular note)

This template adds a note intended for readers that should be valid independent of Wikibooks (for an alternatives see {{[[Template:Editor note|Editor note]]}}, {{[[Template:Technote|Technote]]}}, {{[[Template:XNote|XNote]]}} or {{[[Template:Sidenote|Sidenote]]}}).

[[Category:Note templates|{{PAGENAME}}]]
[[pl:Szablon:NOTE]]
&lt;/noinclude&gt;</text>
      <sha1>6ta3vgv4oid6mijnjq4x0ldor2p4xuy</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Only in print</title>
    <ns>10</ns>
    <id>225339</id>
    <revision>
      <id>1778065</id>
      <parentid>1778057</parentid>
      <timestamp>2010-04-27T13:27:10Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Only in print]]": High-impact page ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="79" xml:space="preserve">{{#if:{{hide in print|1}}||{{{1|}}}}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>rm8emca34tsah296fr9jh9dzgyhnfxo</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Print version notice</title>
    <ns>10</ns>
    <id>27932</id>
    <revision>
      <id>3366073</id>
      <parentid>3364335</parentid>
      <timestamp>2018-01-24T16:58:41Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKNAME (new-style)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="402" xml:space="preserve">{{ambox|type=notice|image=[[File:Printer.svg|40x40px]]|text='''This is the [[Help:Print versions|print version]] of [[{{{1|{{BOOKNAME}}}}}]]'''&lt;br/&gt;You won't see this message or any elements not part of the book's content when you print or [{{fullurl:{{existlist|{{{2|{{{1|{{BOOKNAME}}}}}/Print version}}}|{{FULLPAGENAME}}}}|printable=yes}} preview] this page.}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>0t02h1isu1ka7z7xxb4wk9np5o5d7xn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Px</title>
    <ns>10</ns>
    <id>235176</id>
    <revision>
      <id>1890676</id>
      <parentid>1890675</parentid>
      <timestamp>2010-07-16T01:56:59Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Px]]": Uses complex features of wiki syntax ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="377" xml:space="preserve">&lt;includeonly&gt;{{#if:{{{1|}}}
| {{#iferror: {{#expr:{{{1|}}} &gt; 0 }} | {{{1|}}} | {{{1|}}}px }}
| {{#if:{{{2|}}}
  | {{#iferror: {{#expr:{{{2|}}} &gt; 0 }} | {{{2|}}} | {{{2|}}}px }}
  | {{#iferror: {{#expr:{{{3|}}} &gt; 0 }} | {{{3|}}} | {{{3|}}}px }}
  }}
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>6y4tzsbmr39k7axsek1k37c7ywg3y9p</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Quote</title>
    <ns>10</ns>
    <id>89472</id>
    <revision>
      <id>1887728</id>
      <parentid>1887727</parentid>
      <timestamp>2010-07-13T21:19:20Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Quote]]": High-impact page ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="502" xml:space="preserve">&lt;blockquote class="templatequote"&gt;&lt;div&gt;{{{text|{{{1|&lt;noinclude&gt;{{lorem ipsum}}&lt;/noinclude&gt;}}}}}}
&lt;/div&gt;{{#if:{{{sign|{{{2|&lt;noinclude&gt;TRUE&lt;/noinclude&gt;}}}}}}|&lt;div class="templatequotecite"&gt;&amp;#8212;{{{sign|{{{2|&lt;noinclude&gt;Someone&lt;/noinclude&gt;}}}}}}{{#if:{{{source|{{{3|&lt;noinclude&gt;TRUE&lt;/noinclude&gt;}}}}}}|,&amp;nbsp;&lt;cite&gt;{{{source|{{{3|&lt;noinclude&gt;''Source''&lt;/noinclude&gt;}}}}}}&lt;/cite&gt;}}&lt;/div &gt;}}&lt;/blockquote&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add cats and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>tg6tbas6ju9m79uu4ztv8lexjl10jvi</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Reflist</title>
    <ns>10</ns>
    <id>102914</id>
    <revision>
      <id>2017696</id>
      <parentid>2017608</parentid>
      <timestamp>2011-01-14T20:30:40Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <comment>fix class</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="591" xml:space="preserve">&lt;div class="reflist references &lt;!--
 --&gt;{{#if: {{{1|}}}
    | {{#iferror: {{#ifexpr: {{{1|1}}} &gt; 1 }}
      | references-column-width 
      | references-column-count references-column-count-{{{1}}} }}
    | {{#if: {{{colwidth|}}}
      | references-column-width }} }}" style="&lt;!--
 --&gt;{{#if: {{{1|}}}
    | {{#iferror: {{#ifexpr: {{{1|1}}} &gt; 1 }}
      | {{column-width|{{{1}}}}}
      | {{column-count|{{{1}}}}} }}
    | {{#if: {{{colwidth|}}}
      | {{column-width|{{{colwidth}}}}} }} }}"&gt;
{{#tag:references|{{{refs|}}}|group={{{group|}}}}}&lt;/div&gt;&lt;noinclude&gt;
{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>2ym9hjf4imgqkgn1igzsgqk5gkfii5z</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Sec link/relative url</title>
    <ns>10</ns>
    <id>224918</id>
    <revision>
      <id>2177845</id>
      <parentid>2177843</parentid>
      <timestamp>2011-10-08T12:44:55Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <comment>relative url</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1489" xml:space="preserve">//{{#switch: {{lc: {{{project|}}} }}
| wikipedia | w = {{#if:{{{lang|}}}|{{{lang}}}|{{CONTENTLANG}}}}.wikipedia
| wiktionary | wikt = {{#if:{{{lang|}}}|{{{lang}}}|{{CONTENTLANG}}}}.wiktionary
| wikinews | n = {{#if:{{{lang|}}}|{{{lang}}}|{{CONTENTLANG}}}}.wikinews
| wikibooks | b = {{#if:{{{lang|}}}|{{{lang}}}|{{CONTENTLANG}}}}.wikibooks
| wikiquote | q = {{#if:{{{lang|}}}|{{{lang}}}|{{CONTENTLANG}}}}.wikiquote
| wikiversity | v = {{#if:{{{lang|}}}|{{{lang}}}|{{CONTENTLANG}}}}.wikiversity
| wikisource | s = {{#if:{{{lang|}}}|{{{lang}}}|{{CONTENTLANG}}}}.wikisource
| oldwikisource = wikisource
| wikispecies | species = species.wikimedia
| wikimedia | foundation | wmf = wikimediafoundation
| commons = commons.wikimedia
| meta | metawikipedia | m = meta.wikimedia
| strategy = strategy.wikimedia
| incubator = incubator.wikimedia
| mw = www.mediawiki
| nost = nostalgia.wikimedia
| testwiki = test.wikipedia
| #default = 

&lt;!-- Other Wikibooks language fed, or no project fed.
     (If copying this template to a non-Wikibooks project,
     then update the below code line.) --&gt;
| #default = {{#if:{{{project|{{{lang|}}}}}}|{{{project|{{{lang}}}}}}|{{CONTENTLANG}}}}.wikibooks

}}.org/wiki/{{#if: {{{anchor|}}}
| {{PAGENAMEE:Template:{{{pagename|}}} }}#{{anchorencode:{{{anchor}}} }}
| {{PAGENAMEE:Template:{{{pagename|}}} }}{{#if: {{{query|}}}
  | ?{{{query|}}}
  }}
}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>iqa4lhftir8q1l98mi3d1yc5gmxs5gl</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Sec link/text</title>
    <ns>10</ns>
    <id>224916</id>
    <revision>
      <id>1769318</id>
      <parentid>1769317</parentid>
      <timestamp>2010-04-22T19:58:52Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Sec link/text]]": can/will be used in system messages ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="522" xml:space="preserve">{{#if: {{{text|}}}
| {{{text}}}
| {{#if: {{{project|}}} 
  | {{{project}}}:{{#if: {{{lang|}}}
    | {{{lang}}}:
    }}{{{pagename|}}}
  | &lt;!--No project, so a local link--&gt;
    {{#if: {{{pagename|}}}
    | {{{pagename}}}
    | {{MediaWiki:Mainpage}}   &lt;!--Main page name at the local project--&gt;
    }}
  }}{{
  #if: {{{query|}}}
  | ?{{{query|}}}
  | {{#if: {{{anchor|}}}
    | &amp;#35;{{{anchor}}}
    }}
  }}
}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>i09uy7kjf2sxoakgfjm7roehyq4op69</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Sec link auto</title>
    <ns>10</ns>
    <id>224910</id>
    <revision>
      <id>2177854</id>
      <parentid>1769365</parentid>
      <timestamp>2011-10-08T13:00:54Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <comment>updated using new implementation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="668" xml:space="preserve">{{#switch: {{lc: {{{padlock|}}} }}
  | yes    &lt;!--Supress CSS icon, to not get double icon--&gt;
  | no = &lt;span class="plainlinks"&gt;
}}[{{sec link/relative url
  | project = {{{1|}}}
  | pagename = {{{2|}}}
  | lang = {{{lang|}}}
  | query = {{{query|}}}
  | anchor = {{{anchor|}}}
}} {{sec link/text
  | project = {{{1|}}}
  | pagename = {{{2|}}}
  | text = {{{3|}}}
  | lang = {{{lang|}}}
  | query = {{{query|}}}
  | anchor = {{{anchor|}}}
}}]{{#switch: {{lc: {{{padlock|}}} }}
  | no = &lt;/span&gt;
  | yes = &lt;/span&gt;[[File:Lock icon blue.gif|16x13px|link=]]
}}&lt;noinclude&gt;

{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>k1a7lwtbp7vzny1xe81121hy8ymnmo6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Sectstub</title>
    <ns>10</ns>
    <id>21996</id>
    <revision>
      <id>2349794</id>
      <parentid>1862411</parentid>
      <timestamp>2012-05-20T09:32:47Z</timestamp>
      <contributor>
        <username>Liam987</username>
        <id>582918</id>
      </contributor>
      <comment>small parameter</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="365" xml:space="preserve">{{ambox|type=content|small={{{small|}}}|text='''This section is a stub.'''&lt;br/&gt;You can help Wikibooks by [{{fullurl:{{FULLPAGENAME}}|action=edit}} expanding it].}}&lt;includeonly&gt;{{#ifeq:{{{example|no}}}|no|[[Category:Section stubs]]}}&lt;/includeonly&gt;&lt;noinclude&gt;''This adds the page to [[:Category:Section stubs]].''
[[Category:Stub templates|{{PAGENAME}}]]
&lt;/noinclude&gt;</text>
      <sha1>4r0f8j2rnzv38jz5fur3rikmj71clge</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Shelves</title>
    <ns>10</ns>
    <id>397858</id>
    <revision>
      <id>3435770</id>
      <parentid>3434597</parentid>
      <timestamp>2018-06-13T01:06:49Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>x</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="460" xml:space="preserve">&lt;includeonly&gt;{{#invoke:TScope|override|Subjects}}&lt;!--

--&gt;{{#ifeq:{{BOOKNAME}}|{{FULLPAGENAME}}|{{#switch:{{NAMESPACE}}|Wikijunior|=
[[{{BOOKCATEGORY}}| ]]
[[{{BOOKCATEGORY|Shelf:}}/Books{{#if:{{{1|}}}||/Unshelved}}|{{FULLPAGENAME}}]]
}}
|&lt;!--{{color|red|'''&amp;lt;call {{tl|Shelves}} only from a book main page&amp;gt;'''}}
--&gt;}}&lt;!--

--&gt;{{#ifeq:{{BOOKPAGENAME}}||{{#invoke:TScope|map|Shelves/leaf}}}}&lt;!--

--&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>9npbxub4zefi7tzrkoiqe8p0u5ho0tc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Stage</title>
    <ns>10</ns>
    <id>20506</id>
    <restrictions>move=sysop:edit=sysop</restrictions>
    <revision>
      <id>2582990</id>
      <parentid>2556794</parentid>
      <timestamp>2013-11-19T21:07:12Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>copyedit(?)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="493" xml:space="preserve">&lt;includeonly&gt;&lt;span class="noprint"&gt;[[File:{{#switch:{{{1|}}}
 |0|00|0%|00%=00 percents
 |25|25%=25 percents
 |50|50%=50 percents
 |75|75%=75 percents
 |100|100%=100 percents
 |#default=00%
}}.svg|9px|{{#switch:{{{1|}}}
 |0|00|0%|00%=0%
 |25|25%=25%
 |50|50%=50%
 |75|75%=75%
 |100|100%=100%
 |#default=0%
}} developed{{#if:{{{2|}}}|&amp;nbsp; as of {{{2}}}}}|link=Help:Development stages]]{{#if:{{{2|}}}|&lt;small&gt;&amp;nbsp;({{{2}}})&lt;/small&gt;}}&lt;/span&gt;&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>mho16uti0dj8nne5o1yppmtqq5prg4p</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Stage short</title>
    <ns>10</ns>
    <id>20579</id>
    <restrictions>move=sysop:edit=sysop</restrictions>
    <revision>
      <id>2582989</id>
      <parentid>2556797</parentid>
      <timestamp>2013-11-19T20:59:53Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>copyedit(?)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="440" xml:space="preserve">&lt;includeonly&gt;&lt;span class="noprint"&gt;[[File:{{#switch:{{{1|}}}
 |0|00|0%|00%=00%
 |25|25%=25 percents
 |50|50%=50 percents
 |75|75%=75 percents
 |100|100%=100 percents
 |#default=00%
}}.svg|9x9px|{{#switch:{{{1|}}}
 |0|00|0%|00%=0%
 |25|25%=25%
 |50|50%=50%
 |75|75%=75%
 |100|100%=100%
 |#default=0%
}} developed{{#if:{{{2|}}}|&amp;nbsp; as of {{{2}}}}}|link=Help:Development stages]]&lt;/span&gt;&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>89vwsv0pbz1cfht04repvn3vnadgxim</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Subjects</title>
    <ns>10</ns>
    <id>132460</id>
    <revision>
      <id>3365867</id>
      <parentid>3364981</parentid>
      <timestamp>2018-01-24T03:10:03Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKNAME (new-style)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2276" xml:space="preserve">&lt;includeonly&gt;{{#ifeq:{{BOOKPAGENAME}}||&lt;!-- this isn't a subpage --&gt;
{{#switch:{{NAMESPACE}}|Wikijunior|=[[{{BOOKCATEGORY|book={{{bookcategory|{{NAIVEBOOKNAME}}}}}}}| ]]}}
{{#if:{{{1|}}}|{{Subjects/leaf|{{{1}}}|bookcategory={{{bookcategory|{{NAIVEBOOKNAME}}}}}|diagnose={{{diagnose|}}}}}|[[Category:Uncategorized books|{{BOOKSORTKEY}}]]}}
{{#if:{{{2|}}}|{{Subjects/leaf|{{{2}}}|bookcategory={{{bookcategory|{{NAIVEBOOKNAME}}}}}|diagnose={{{diagnose|}}}}}}}
{{#if:{{{3|}}}|{{Subjects/leaf|{{{3}}}|bookcategory={{{bookcategory|{{NAIVEBOOKNAME}}}}}|diagnose={{{diagnose|}}}}}}}
{{#if:{{{4|}}}|{{Subjects/leaf|{{{4}}}|bookcategory={{{bookcategory|{{NAIVEBOOKNAME}}}}}|diagnose={{{diagnose|}}}}}}}
{{#if:{{{5|}}}|{{Subjects/leaf|{{{5}}}|bookcategory={{{bookcategory|{{NAIVEBOOKNAME}}}}}|diagnose={{{diagnose|}}}}}}}
{{#if:{{{6|}}}|{{Subjects/leaf|{{{6}}}|bookcategory={{{bookcategory|{{NAIVEBOOKNAME}}}}}|diagnose={{{diagnose|}}}}}}}
{{#if:{{{7|}}}|{{Subjects/leaf|{{{7}}}|bookcategory={{{bookcategory|{{NAIVEBOOKNAME}}}}}|diagnose={{{diagnose|}}}}}}}
{{#if:{{{8|}}}|{{Subjects/leaf|{{{8}}}|bookcategory={{{bookcategory|{{NAIVEBOOKNAME}}}}}|diagnose={{{diagnose|}}}}}}}
{{#if:{{{9|}}}|{{Subjects/leaf|{{{9}}}|bookcategory={{{bookcategory|{{NAIVEBOOKNAME}}}}}|diagnose={{{diagnose|}}}}}}}
{{#if:{{{10|}}}|{{Subjects/leaf|{{{10}}}|bookcategory={{{bookcategory|{{NAIVEBOOKNAME}}}}}|diagnose={{{diagnose|}}}}}}}|&lt;!-- this is a subpage --&gt;
{{#switch:{{NAMESPACE}}|Wikijunior|=[[{{BOOKCATEGORY|{{{bookcategory|{{BOOKNAME}}}}}}}|{{BOOKSORTKEY}}]]|#default=
{{#if:{{{1|}}}|[[Category:{{{1}}}|{{BOOKSORTKEY}}]]|[[Category:Uncategorized books|{{BOOKSORTKEY}}]]}}
{{#if:{{{2|}}}|[[Category:{{{2}}}|{{BOOKSORTKEY}}]]}}
{{#if:{{{3|}}}|[[Category:{{{3}}}|{{BOOKSORTKEY}}]]}}
{{#if:{{{4|}}}|[[Category:{{{4}}}|{{BOOKSORTKEY}}]]}}
{{#if:{{{5|}}}|[[Category:{{{5}}}|{{BOOKSORTKEY}}]]}}
{{#if:{{{6|}}}|[[Category:{{{6}}}|{{BOOKSORTKEY}}]]}}
{{#if:{{{7|}}}|[[Category:{{{7}}}|{{BOOKSORTKEY}}]]}}
{{#if:{{{8|}}}|[[Category:{{{8}}}|{{BOOKSORTKEY}}]]}}
{{#if:{{{9|}}}|[[Category:{{{9}}}|{{BOOKSORTKEY}}]]}}
{{#if:{{{10|}}}|[[Category:{{{10}}}|{{BOOKSORTKEY}}]]}}}}}}
{{#if:{{{bookcategory|}}}|[[Category:Books that specify subjects bookcategory]]}}
&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>lo8bi8w1rneibppi628apgfav5gbm2l</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Tlx</title>
    <ns>10</ns>
    <id>109993</id>
    <revision>
      <id>2653774</id>
      <parentid>2501750</parentid>
      <timestamp>2014-05-12T04:18:50Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <comment>make safe to substitute</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="390" xml:space="preserve">&lt;includeonly&gt;{{{{{|safesubst:}}}#invoke:template|example}}{{{{{|safesubst:}}}#ifeq:{{{LANG|+}}}|{{{LANG|-}}}|[[Category:Pages needing tl updated]]}}{{{{{|safesubst:}}}#ifeq:{{{SISTER|+}}}|{{{SISTER|-}}}|[[Category:Pages needing tl updated]]}}{{{{{|safesubst:}}}#ifeq:{{{subst|+}}}|{{{subst|-}}}|[[Category:Pages needing tl updated]]}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>s8ka91auad3igthhd2r9y1xbptffl7f</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Wikipedia</title>
    <ns>10</ns>
    <id>140088</id>
    <revision>
      <id>3509735</id>
      <parentid>3233955</parentid>
      <timestamp>2019-01-14T16:29:02Z</timestamp>
      <contributor>
        <username>Thomas Linard</username>
        <id>1044626</id>
      </contributor>
      <comment>PNG --&gt; SVG</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="701" xml:space="preserve">{{mbox-side|type=notice|image=Wikipedia-logo-v2.svg|text= [[w:|Wikipedia]] has related information at {{sec link auto| wikipedia | {{{1| Special:Search/{{PAGENAME}} }}} | '''''{{{1|{{PAGENAME}}}}}''''' }}{{#if:{{{2|}}}|{{#if:{{{3|}}}|,|&amp;nbsp; and}}&amp;nbsp;{{sec link auto| wikipedia | Special:Search/{{{2}}} | '''''{{{2}}}''''' }}}}{{#if:{{{3|}}}|{{#if:{{{4|}}}|,|&amp;nbsp; and}}&amp;nbsp;{{sec link auto| wikipedia | Special:Search/{{{3}}} | '''''{{{3}}}''''' }}}}{{#if:{{{4|}}}|&amp;nbsp; and {{sec link auto| wikipedia | Special:Search/{{{4}}} | '''''{{{4}}}''''' }}}}
}}&lt;noinclude&gt;&lt;div style="width:250px; float:right; clear:right; margin:0px; margin-top:10px !important;"&gt;&lt;/div&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>gx4f87di78abt1tg4nq1tg3wfmen0ig</sha1>
    </revision>
  </page>
  <page>
    <title>Module:TScope</title>
    <ns>828</ns>
    <id>378746</id>
    <revision>
      <id>3149555</id>
      <parentid>3149438</parentid>
      <timestamp>2016-11-18T20:02:41Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Module:TScope]]": high-impact page ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="3756" xml:space="preserve">local export = {}

export.override = function( frame )
	local title = frame.args[1]
	local args = {}
	for v, k in pairs( frame:getParent().args ) do
		args[v] = k
	end
	for v, k in pairs( frame.args ) do
		if type( v ) == "number" then
			if v ~= 1 then
				args[ v - 1 ] = k
			end
		else
			args[v] = k
		end
	end
	return frame:expandTemplate{ title = title, args = args }
end

export.prepend = function( frame )
	local title = frame.args[1]
	local args = {}
	local displace = 0;
	for v, k in pairs( frame.args ) do
		if (type( v ) == "number") and (v ~= 1) then
			args[ v - 1 ] = k
			displace = math.max( displace, (v - 1) )
		end
	end
	for v, k in pairs( frame:getParent().args ) do
		if type( v ) == "number" then
			args[ displace + v ] = k
		else
			args[v] = k
		end
	end
	for v, k in pairs( frame.args ) do
		if type( v ) ~= "number" then
			args[v] = k
		end
	end
	return frame:expandTemplate{ title = title, args = args }
end

export.append = function( frame )
	local title = frame.args[1]
	local args = {}
	local displace = 0;
	for v, k in pairs( frame:getParent().args ) do
		if type( v ) == "number" then
			displace = math.max( displace, v )
		end
		args[v] = k
	end
	for v, k in pairs( frame.args ) do
		if type( v ) == "number" then
			if v ~= 1 then
				args[ displace + v - 1 ] = k
			end
		else
			args[v] = k
		end
	end
	return frame:expandTemplate{ title = title, args = args }
end

export.drop = function( frame )
	local title = frame.args[1]
	local args = {}
	for v, k in pairs( frame:getParent().args ) do
		if type( v ) ~= "number" then
			args[v] = k
		end
	end
	for v, k in pairs( frame.args ) do
		if type( v ) == "number" then
			if v ~= 1 then
				args[ v - 1 ] = k
			end
		else
			args[v] = k
		end
	end
	return frame:expandTemplate{ title = title, args = args }
end

export.shiftLeft = function( frame )
	local title = frame.args[1]
	local args = {}
	local displace = tonumber( frame.args[2] )
	if displace == nil then displace = 0 end
	for v, k in pairs( frame:getParent().args ) do
		if type( v ) == "number" then
			if v &gt;= displace then
				args[ v - displace ] = k
			end
		else
			args[v] = k
		end
	end
	for v, k in pairs( frame.args ) do
		if type( v ) == "number" then
			if v &gt; 2 then
				args[ v - 2 ] = k
			end
		else
			args[v] = k
		end
	end
	return frame:expandTemplate{ title = title, args = args }
end

export.map = function( frame )
	local title = frame.args[1]
	local displace = frame.args[2]
	if displace == nil then
		displace = 0
	else
		displace = tonumber( displace )
	end
	local args = {}
	local data = {}
	local maxv = 0
	for v, k in pairs( frame:getParent().args ) do
		if (type( v ) ~= "number") then
			args[v] = k
		elseif v &lt;= displace then
			args[v + 1] = k
		else
			data[v] = k
			maxv = math.max( v, maxv )
		end
	end
	for v, k in pairs( frame.args ) do
		if type( v ) ~= "number" then
			args[v] = k
		elseif v &gt; 2 then
			args[v - 1] = k
		end
	end
	local result = ""
	for v = 1, maxv do
		if data[v] ~= nil then
			args[1] = data[v]
			result = result .. frame:expandTemplate{ title = title, args = args }
		end
	end
	return result
end

export.static = function( frame )
	return frame:getParent():getTitle()
end

local function tabulate( args )
	local s = ''
	for k, v in pairs( args ) do
		s = s .. '|-\n| ' .. k .. '\n| &lt;code&gt;' .. v .. '&lt;/code&gt;\n'
	end
	if s ~= '' then
		s = '{| class="wikitable"\n|-\n! key\n! value\n' .. s .. '|}'
	end
	return s
end

export.echo = function( frame )
	local mp = tabulate( frame.args )
	local cp = tabulate( frame:getParent().args )
	if mp ~= '' then
		mp = 'module parameters:\n' .. mp .. '\n'
	end
	if cp ~= '' then
		cp = 'context parameters:\n' .. cp .. '\n'
	else
		cp = 'no context parameters.\n'
	end
	return mp .. cp
end

return export</text>
      <sha1>n3blx1g9jcetmcolf1n2fiuhyaql9nh</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Template</title>
    <ns>828</ns>
    <id>289144</id>
    <revision>
      <id>2658015</id>
      <parentid>2506169</parentid>
      <timestamp>2014-05-20T00:07:31Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <comment>use html encoded entities for ":", "|" and "=" to prevent accidental interpretation</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="1509" xml:space="preserve">local template = {}

function template.page(frame)
    local title, subst = frame.args[1] or frame:getParent().args[1] or ''
    
    -- whether title is subst:page, safesubst:page, or page
    title = mw.ustring.gsub( title, '^%s*(s?a?f?e?subst):', function(what)
        if what == 'subst' or what == 'safesubst' then subst = what; return '' end
    end, 1 )
    
    local success, page = pcall(function(title) return mw.title.new( title, 10 ) end, title or '' )
    
    if not success or not page then return '' end
    if page.interwiki ~= "" then title = mw.ustring.sub( title, page.interwiki:len()+2 ) end
    if page.fragment ~= "" then title = mw.ustring:sub( title, 1, -page.fragment:len()-2 ) end
    if subst then subst = table.concat({ '[[Help:Templates#Substitution|', subst, ']]&amp;#58;' }) end
    
    return table.concat({ subst or '', '[[:', page.fullText, '|', title, ']]'})
end

function template.example(frame)
    local args, page, result = frame.args[1] and frame.args or frame:getParent().args, template.page(frame), {}
    
    if page == '' then
        return ''
    end
    
    for name, value in pairs( args ) do
        if type( name ) == 'string' then
            table.insert( result, table.concat({ '&amp;#124;&lt;tt&gt;', name, '&amp;#61;', value, '&lt;/tt&gt;' }) )
        elseif name ~= 1 then
            table.insert( result, table.concat({ '&amp;#124;&lt;tt&gt;', value, '&lt;/tt&gt;' }) )
        end
    end
    
    return table.concat({ '{{', page, table.concat( result ), '}}' })
end

return template</text>
      <sha1>odj1o1lw0uqgjt8rdvejdsphoj61f5u</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Wikilisp</title>
    <ns>828</ns>
    <id>377838</id>
    <revision>
      <id>3182515</id>
      <parentid>3182514</parentid>
      <timestamp>2017-02-14T18:13:35Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:n:Module:Wikilisp]]: update</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="47989" xml:space="preserve">local export = {}

local wikilispversion = "0.18 (February 14, 2017)"

--[[ some basic abstractions ]]

local function stype( x ) -- type of sexpr
	local t = type( x )
	if t == "table" then t = x.type end
	return t
end

local function seterr( x, ... )
	if type(x) ~= "table" then
		return seterr( {}, x, ... )
	else
		x.type = "error"
		x.msg = mw.ustring.format( ... )
		return x
	end
end

--[[ parse text to a sequence of sexprs ]]

local function tok3( ls, t )
	-- tokenize lua string t, with no string literals comments or parens;
	--   append to ls
	local p1,p2 = mw.ustring.find( t, "[^%s]+" )
	while p1 ~= nil do
		local t1 = mw.ustring.sub(t, p1, p2)
		local n1 = tonumber(t1)
		if n1 ~= nil then
			ls[1 + #ls] = n1
		elseif t1 == "true" then
			ls[1 + #ls] = true
		elseif t1 == "false" then
			ls[1 + #ls] = false
		else
			ls[1 + #ls] = {
				type = "symbol",
				name = t1
			}
		end
		t = mw.ustring.sub(t, (p2 + 1))
		p1,p2 = mw.ustring.find( t, "[^%s]+" )
	end
end

local function tok2( ls, t )
	-- tokenize lua string t, with no string literals or comments; append to ls
	local p1 = mw.ustring.find( t, "[()\\]" )
	while p1 ~= nil do
		tok3( ls, mw.ustring.sub(t, 1, (p1 - 1)) )
		ls[1 + #ls] = { type = mw.ustring.sub(t, p1, p1) }
		if ls[#ls].type == "\\" then
			ls[#ls].name = ls[#ls].type
			ls[#ls].type = "symbol"
		end
		t = mw.ustring.sub(t, (p1 + 1))
		p1 = mw.ustring.find( t, "[()\\]" )
	end
	tok3( ls, t )
end

local function tok1( ls, t )
	-- tokenize lua string t, thru first string literal or comment; append to ls
	-- if not finished, append untokenized remainder string and return true
	local p0 = mw.ustring.find( t, ';' )
	local p1 = mw.ustring.find( t, '"' )
	local p2 = mw.ustring.find( t, "'" )
	if (p0 ~= nil) and (((p1 == nil) or (p0 &lt; p1)) and
						((p2 == nil) or (p0 &lt; p2))) then
		tok2( ls, mw.ustring.sub( t, 1, (p0 - 1) ) )
		p1 = mw.ustring.find( t, '\n', (p0 + 1) )
		if p1 == nil then
			return false
		else
			ls[1 + #ls] = mw.ustring.sub( t, (p1 + 1) )
			return true
		end
	elseif (p1 ~= nil) and ((p2 == nil) or (p1 &lt; p2)) then
		p2 = p1 + 1
		while true do
			p2 = mw.ustring.find( t, '"', p2 )
			if p2 == nil then
				seterr(ls, 'mismatched string-literal delimiter (")')
				return false
			elseif (p2 &lt; mw.ustring.len( t )) and
				(mw.ustring.codepoint( t, (p2 + 1) ) == 34)
			then
				p2 = (p2 + 2)
			else
				tok2( ls, mw.ustring.sub( t, 1, (p1 - 1) ) )
				ls[1 + #ls] = mw.ustring.gsub(
					mw.ustring.sub( t, (p1 + 1), (p2 - 1) ),
					'""', '"')
				ls[1 + #ls] = mw.ustring.sub( t, (p2 + 1) )
				return true
			end
		end
	elseif p2 ~= nil then
		-- side benefit: precludes Lisp shorthand for "suppress eval"
		p1 = p2
		p2 = mw.ustring.find( t, "'", (p1 + 1) )
		if p2 == nil then
			seterr(ls, "mismatched string-literal delimiter (')")
			return false
		else
			tok2( ls, mw.ustring.sub( t, 1, (p1 - 1) ) )
			ls[1 + #ls] = mw.ustring.sub( t, (p1 + 1), (p2 - 1) )
			ls[1 + #ls] = mw.ustring.sub( t, (p2 + 1) )
			return true
		end
	else
		tok2( ls, t )
		return false
	end
end

local function parse_next( x1, p1, x2 )
	-- parse one sexpr from token list x1 position p1, append sexpr to p2
	-- return new value for p1
	if stype(x1[p1]) == ")" then
		seterr(x2, "unmatched right-paren")
		return 1 + #x1
	elseif stype(x1[p1]) ~= "(" then
		x2[1 + #x2] = x1[p1]
		return p1 + 1
	else
		p1 = p1 + 1
		local x3 = { type = "list" }
		x2[1 + #x2] = x3
		while p1 &lt;= #x1 do
			if stype(x1[p1]) == ")" then
				return p1 + 1
			end
			p1 = parse_next( x1, p1, x3 )
		end
		seterr(x2, "unmatched left-paren")
		return p1
	end
end

local function parse_sexpr( x1 )
	-- x1 is an error or a list of tokens
	if x1.type ~= "list" then
		return x1
	else
		local p1 = 1 --next item to read from x1
		local x2 = { type = "list" }
		while p1 &lt;= #x1 do
			p1 = parse_next( x1, p1, x2 )
		end
		return x2
	end
end

local function text_to_sexpr( t )
	local ls = { type = "list" }
	while tok1( ls, t ) do
		t = ls[#ls]
		ls[#ls] = nil
	end
	ls = parse_sexpr( ls )
	return ls
end

--[[ write/display a sexpr ]]

local function write_sexpr( x )
	if type(x) == "number" then
		return tostring( x )
	elseif type(x) == "string" then
		return mw.ustring.format('"%s"', mw.ustring.gsub( x, '"', '""' ))
	elseif type(x) == "boolean" then
		if x then return "true" else return "false" end
	elseif type(x) ~= "table" then
		return mw.ustring.format("&amp;lt;unrecognized internal type: %s&amp;gt;", type(x))
	elseif x.type == "symbol" then
		return x.name
	elseif x.type == "fn" then
		return mw.ustring.format("&amp;lt;%s&amp;gt;", write_sexpr( x.comb ))
	elseif x.type == "op" then
		if x.name ~= nil then
			return mw.ustring.format("[op: %s]", x.name)
		else
			return "[op]"
		end
	elseif x.type == "list" then
		local r = {}
		r[1] = "("
		for k = 1, #x do
			r[k+1] = write_sexpr( x[k] )
		end
		r[#r + 1] = ")"
		return table.concat(r, " ")
	elseif x.type == "error" then
		return mw.ustring.format("&amp;lt;error: %s&amp;gt;", x.msg)
	elseif x.type == "pattern" then
		return mw.ustring.format('&amp;lt;pattern: "%s"&amp;gt;', x.pat)
	elseif x.type ~= nil then
		return mw.ustring.format("&amp;lt;unrecognized type: %s&amp;gt;", x.type)
	else
		return "&amp;lt;missing type&amp;gt;"
	end
end

local function display_sexpr( x )
	if stype(x) == "string" then
		return x
	else
		return write_sexpr( x )
	end
end

--[[ evaluation tools ]]

local maxdepth = 4 -- maximum call-nesting depth

local combine

local function eval( x, env, depth )
	if type(x) ~= "table" then -- literal
		return x
	elseif x.type == "symbol" then
		local v = env[x.name]
		if v == nil then
			return seterr("undefined symbol: %s", x.name)
		else
			return v
		end
	elseif x.type ~= "list" then -- literal
		return x
	elseif #x == 0 then -- empty list
		return x
	else -- combination
		local c = eval( x[1], env, depth )
		if stype(c) == "error" then return c end
		local ls = { type = "list" }
		for k = 2, #x do
			ls[k - 1] = x[k]
		end
		return combine( c, ls, env, depth )
	end
end

combine = function( c, ls, env, depth )
	while stype(c) == "fn" do
		local ls2 = { type = "list" }
		for k = 1, #ls do
			ls2[k] = eval( ls[k], env, depth )
			if stype(ls2[k]) == "error" then return ls2[k] end
		end
		c = c.comb
		ls = ls2
	end
	if stype(c) ~= "op" then
		return seterr("called object is not a combiner: %s", write_sexpr(c))
	elseif (c.shallow ~= nil) then
		return c.op(ls, env, depth)
	elseif (depth == nil) or (depth &lt; 1) then
		if maxdepth &gt; 1 then
			return seterr(
				"exceeded maximum call-nesting depth (%i)",
				maxdepth)
		else
			return seterr("exceeded maximum call-nesting depth")
		end
	else
		return c.op(ls, env, (depth - 1))
	end
end

local function eval_seq( ls, env, depth )
	-- ls must be an error or a list
	if ls.type == "error" then return ls end
	if #ls == 0 then return ls end
	for k = 1, (#ls - 1) do
		local x = eval( ls[k], env, depth )
		if stype(x) == "error" then return x end
	end
	return eval( ls[#ls], env, depth )
end

local function eval_all( ls, env, depth, cutoff )
	-- ls must be an error or a list
	if ls.type == "error" then return ls end
	local ls2 = { type="list" }
	for k = 1, #ls do
		ls2[k] = eval( ls[k], env, depth )
		if stype(ls2[k]) == "error" then return ls2[k] end
		if (cutoff ~= nil) and cutoff(ls2[k]) then return ls2 end
	end
	return ls2
end

local function combine_all( ops, args, env, depth, cutoff )
	-- ops must be a list; args must be an error or a list
	if args.type == "error" then return args end
	local ls2 = { type="list" }
	for k = 1, #ops do
		ls2[k] = combine( ops[k], args, env, depth )
		if stype(ls2[k]) == "error" then return ls2[k] end
		if (cutoff ~= nil) and cutoff(ls2[k]) then return ls2 end
	end
	return ls2
end

--[[ generic combiner constructors ]]

local function make_op( f, nm, sh )
	return {
		type = "op",
		op = f,
		name = nm,
		shallow = sh
	}
end

local function checktype( t, o, k ) -- types list, operands list, index
	if #t == 0 then return "" end
	o = o[k] -- particular operand
	if k &gt; #t then k = #t end
	t = t[k] -- particular type
	-- t should now be a string or internal function
	if type(t) == "string" then
		if stype(o) == t then t = "" end -- clear if no error
	else
		t = t(o) -- assume internal function works correctly
	end
	-- t should now be type name if error, empty string if okay
	return t
end

local function type_err( cname, tname, x )
	-- combiner name, type name(s), operand
	-- type name may be a string or an array of strings
	local where = ""
	if cname ~= nil then where = " to [op: " .. cname .. "]" end
	if type(tname) == "table" then
		if #tname == 0 then tname = "[unknown]"
		else
			for k = 1, #tname do
				while tname[k] == "" do
					for j = (k + 1), #tname do tname[j - 1] = tname[j] end
					tname[#tname] = nil
				end
				if tname[k] ~= nil then
					for j = (k + 1), #tname do
						if tname[k] == tname[j] then tname[j] = "" end
					end
				end
			end
			if #tname == 1 then tname = tname[1]
			else
				tname[#tname] = "or " .. tname[#tname]
				if #tname == 2
				then tname = table.concat( tname, " " )
				else tname = table.concat( tname, ", " )
				end
			end
		end
	end
	local what = write_sexpr(x)
	if #what &gt; 64 then what = stype(x) end
	return seterr(
		"bad operand%s: expected %s, got %s", where, tname, what)
end

local function typed_op( ... )
	-- alternating type (string or function) and op (table or function)
	-- strong recommendation: first op should be a table
	local ls0 = { ... }
	local n0 = select( '#', ... )
	local opname, shallow
	if type(ls0[2]) == "table" then
		opname = ls0[2].name
		shallow = ls0[2].shallow
	end
	local f = function(ls, env, depth)
		if #ls == 0 then
			local op = ls0[2]
			if type(op) == "table" then op = op.op end
			return op( ls, env, depth )
		end
		local ek = 1 -- operand number of accumulated error type names
		local enames = {} -- list of failed types for ls[ek]
		for j = 1, n0, 2 do
			local types = ls0[j]
			local op = ls0[j + 1]
			if type(op) == "table" then op = op.op end
			local t = ""
			for k = 1, #ls do
				if #t == 0 then
					t = checktype( types, ls, k )
					if #t &gt; 0 then
						if k &gt; ek then
							ek = k
							enames = { t }
						elseif k == ek then
							enames[1 + #enames] = t
						end
					end
				end
			end
			if #t == 0 then return op( ls, env, depth ) end
		end
		return type_err( opname, enames, ls[ek] )
	end
	return make_op( f, opname, shallow )
end

local function nary_op( c, n, m )
	local f = function(ls, env, depth)
		if n &lt; 0 then
			if #ls &lt; -n then
				local where = ""
				if c.name ~= nil then where = " to [op: " .. c.name .. "]" end
				return seterr(
					"too few operands%s: expected at least %i, got %i",
					where, -n, #ls)
			end
		elseif m == nil then
			if #ls ~= n then
				local where = ""
				if c.name ~= nil then where = " to [op: " .. c.name .. "]" end
				return seterr(
					"wrong number of operands%s: expected %i, got %i",
					where, n, #ls)
			end
		else
			if #ls &lt; n then
				local where = ""
				if c.name ~= nil then where = " to [op: " .. c.name .. "]" end
				return seterr(
					"too few operands%s: expected at least %i, got %i",
					where, n, #ls)
			elseif #ls &gt; m then
				local where = ""
				if c.name ~= nil then where = " to [op: " .. c.name .. "]" end
				return seterr(
					"too many operands%s: expected at most %i, got %i",
					where, m, #ls)
			end
		end
		return c.op( ls, env, depth )
	end
	return make_op( f, c.name, c.shallow )
end

local function binary_pred( test, nm )
	return make_op(function (ls)
			for k = 2, #ls do
				if not test(ls[k - 1], ls[k]) then
					return false
				end
			end
			return true
		end, nm, true)
end

local function unary_pred( test, nm )
	return make_op(function (ls)
			for k = 1, #ls do
				if not test(ls[k]) then
					return false
				end
			end
			return true
		end, nm, true)
end

local function wrap( c )
	return {
		type = "fn",
		comb = c
	}
end

--[[ wiki parsing stuff
	entry:  (char-code  (first-pos  last-pos  left-index))
	        (descriptor  (first-pos  last-pos  left-index)  entry  entry  ...)
	item entries contain part entries, part entries contain item entries
	left-index is removed at end of parse
]]

local lsquare,rsquare, lcurly,rcurly, pipe = 91,93, 123,125, 124

local function wikileft(e) -- is entry a left-delimiter?
	return ((e[1] == lsquare) or (e[1] == lcurly)) and (e[2][1] ~= e[2][2])
end

local function wikilen(e) -- how long is this entry?
	return 1 + e[2][2] - e[2][1]
end

local function wikisub( m, d ) -- parse, descriptor
	local k2 = #m          -- index of right delimiter
	local k1 = m[k2][2][3] -- index of left delimiter
	local p = { type = "list", "part", { type = "list" } } -- first part
	p[2][1] = (m[k1][2][2] + 1) -- start of first part
	local e = { -- entry containing parts
		type = "list",
		d,
		{ type = "list",
		  (m[k1][2][2] - (m[k2][2][2] - m[k2][2][1])),
		  m[k2][2][2],
		  k1
		},
		p
	}
	for k = (k1 + 1), (k2 - 1) do
		if type(m[k][1]) ~= "number" then
			m[k][2][3] = nil
			p[1 + #p] = m[k]
		elseif m[k][1] == pipe then
			p[2][2] = (m[k][2][1] - 1) -- end of current part
			p = { type = "list", "part", { type = "list" } } -- next part
			p[2][1] = (m[k][2][2] + 1) -- start of this part
			e[1 + #e] = p -- add to list of parts
		end
		m[k] = nil
	end
	p[2][2] = (m[k2][2][1] - 1) -- end of last part
	m[k2] = nil
	m[k1][2][2] = (e[2][1] - 1)
	if (m[k1][2][1] &gt; m[k1][2][2]) then
		e[2][3] = m[k1][2][3]
		m[k1] = nil
	end
	m[1 + #m] = e
end

local function parse_wiki( ls )
	local s = ls[1]                             -- string to parse
	local m = { type = "list" }                 -- result of parse
	local k = mw.ustring.find( s, "[%[%]{}|]" ) -- position in string
	while k ~= nil do
		local c = mw.ustring.codepoint(s,k)
		if #m == 0 then
			if (c == lsquare) or (c == lcurly) then
				m[1] = {type="list", c, {type="list", k, k, 0}}
			end
		elseif (k == (m[#m][2][2] + 1)) and (c == m[#m][1]) and (c ~= pipe) then
			m[#m][2][2] = k
			if m[#m][2][3] &gt; 0 then
				local e2 = m[#m]
				local e1 = m[e2[2][3]]
				if (e2[1] == rcurly) and (e1[1] == lcurly) and
					(wikilen(e2) == 3) and (wikilen(e1) &gt; 2)
				then
					wikisub( m, "param" )
				elseif (e2[1] == rsquare) and (e1[1] == lsquare) and
					(wikilen(e2) == 2) and (wikilen(e1) &gt; 1)
				then
					wikisub( m, "link" )
				end
			end
		else
			if m[#m][2][3] &gt; 0 then
				local e2 = m[#m]
				local e1 = m[e2[2][3]]
				if (e2[1] == rcurly) and (e1[1] == lcurly) and
					(wikilen(e2) == 2) and (wikilen(e1) &gt; 1)
				then
					wikisub( m, "call" )
				end
			end
			m[1 + #m] = {type="list", c, {type="list", k, k}}
			if wikileft(m[#m - 1]) then
				m[#m][2][3] = (#m - 1)
			else
				m[#m][2][3] = m[#m - 1][2][3]
			end
		end
		k = mw.ustring.find( s, "[%[%]{}|]", (k + 1) )
	end
	if #m == 0 then return m end
	if m[#m][2][3] &gt; 0 then
		local e2 = m[#m]
		local e1 = m[e2[2][3]]
		if (e2[1] == rcurly) and (e1[1] == lcurly) and
			(wikilen(e2) == 2) and (wikilen(e1) &gt; 1)
		then
			wikisub( m, "call" )
		end
	end
	local m2 = { type = "list" }
	for j = 1, #m do
		if type(m[j][1]) ~= "number" then
			m[j][2][3] = nil
			m2[1 + #m2] = m[j]
		end
	end
	return m2
end

--[[ miscellaneous ]]

local function int_tc(x)
	if (type(x) ~= "number") or (x ~= math.floor(x)) then
		return "integer"
	else
		return ""
	end
end

local function posint_tc(x)
	if (type(x) ~= "number") or (x ~= math.floor(x)) or (x &lt; 1) then
		return "positive integer"
	else
		return ""
	end
end

local function logical_and( ls ) -- for and?
	for k = 1, #ls do
		if stype(ls[k]) ~= "boolean" then
			return seterr(
				"bad operand to [op: and?]: expected boolean, got %s",
				write_sexpr(ls[k]))
		end
	end
	for k = 1, #ls do if not ls[k] then return false end end
	return true
end

local function logical_or( ls ) -- for or?
	for k = 1, #ls do
		if stype(ls[k]) ~= "boolean" then
			return seterr(
				"bad operand to [op: or?]: expected boolean, got %s",
				write_sexpr(ls[k]))
		end
	end
	for k = 1, #ls do if ls[k] then return true end end
	return false
end

local function and_fn(ls, env, depth)
	ls = eval_all( ls, env, depth,
		function (x)
			return (stype(x) == "boolean") and not x
		end)
	if stype(ls) == "error" then return ls end
	if (#ls == 0) or (stype(ls[1]) == "boolean") then
		return logical_and(ls)
	end
	local ops = { type="list" }
	for k = 1, #ls do
		if stype(ls[k]) == "fn" then ops[k] = ls[k].comb
		elseif stype(ls[k]) == "op" then ops[k] = ls[k]
		elseif k == 1 then
			return seterr(
				"bad operand to [op: and?]: expected boolean or combiner, got %s",
				write_sexpr(ls[k]))
		else
			return seterr(
				"bad operand to [op: and?]: expected combiner, got %s",
				write_sexpr(ls[k]))
		end
	end
	return wrap(make_op(function (ls, env, depth)
			ls = combine_all(ops, ls, env, depth,
				function (x)
					return (stype(x) ~= "boolean") or not x
				end)
			if ls.type == "error" then return ls end
			return logical_and(ls)
		end, "and?", true))
end

local function or_fn(ls, env, depth)
	ls = eval_all(ls, env, depth,
		function (x)
			return (stype(x) == "boolean") and x
		end)
	if stype(ls) == "error" then return ls end
	if (#ls == 0) or (stype(ls[1]) == "boolean") then
		return logical_or(ls)
	end
	local ops = { type="list" }
	for k = 1, #ls do
		if stype(ls[k]) == "fn" then ops[k] = ls[k].comb
		elseif stype(ls[k]) == "op" then ops[k] = ls[k]
		elseif k == 1 then
			return seterr(
				"bad operand to [op: or?]: expected boolean or combiner, got %s",
				write_sexpr(ls[k]))
		else
			return seterr(
				"bad operand to [op: or?]: expected combiner, got %s",
				write_sexpr(ls[k]))
		end
	end
	return wrap(make_op(function (ls, env, depth)
			ls = combine_all(ops, ls, env, depth,
				function (x)
					return (stype(x) ~= "boolean") or x
				end)
			if ls.type == "error" then return ls end
			return logical_or(ls)
		end, "or?", true))
end

local function valid_parmlist( ls ) -- for \
	if stype(ls) ~= "list" then return false end
	for k = 1, #ls do
		if stype(ls[k]) ~= "symbol" then return false end
	end
	return true
end

local function match_parmlist( parms, ls ) -- for \
	local env = {}
	for k = 1, #parms do env[parms[k].name] = ls[k] end
	return env
end

local function lambda_fn(ls, senv)
	local parms = ls[1]
	if stype(parms) == "symbol" then
		parms = { type="list", parms }
	elseif not valid_parmlist(parms) then
		return seterr(
			"bad parameter-list operand to [op: \\]: %s",
			write_sexpr(parms))
	end
	local body = { type = "list" }
	for k = 2, #ls do body[k - 1] = ls[k] end
	return wrap(nary_op(make_op(function (ls, denv, depth)
		-- denv is ignored
		local env = match_parmlist( parms, ls )
		setmetatable(env, { __index = senv })
		return eval_seq(body, env, depth)
	end), #parms))
end

local relevantFrame = mw.getCurrentFrame()

local function getarg_fn(ls)
	local args = relevantFrame.args
	local t = nil
	if stype(ls[1]) == "number" then
		t = ls[1]
	else -- must be number or string
		t = ls[1]
	end
	t = args[t]
	if t == nil then return { type = "list" } end
	return t
end

local function getargexpr_fn(ls)
	local args = relevantFrame.args
	local t = nil
	if stype(ls[1]) == "number" then
		t = ls[1]
	else -- must be number or string
		t = ls[1]
	end
	t = args[t]
	if t == nil then return { type = "list" } end
	t = text_to_sexpr(t)
	if stype(t) == "error" then return { type = "list" } end
	if #t ~= 1 then return { type = "list" } end
	return t[1]
end

local function filter_fn(ls, env, depth)
	local preds = { type = "list" }
	for k = 2, #ls do preds[k - 1] = ls[k].comb end -- predicates
	local function hof(ls, n, f, app)
		-- copy first n elements of ls, apply f to later elements
		-- if app, instead skip first n, and return result,app
		if app == nil then app = false end
		local ls2 = { type = "list" }
		if #ls &lt;= n then
			if app then return ls2,app else return ls end
		end
		if not app then for k = 1, n do ls2[k] = ls[k] end end
		for k = (n + 1), #ls do
			local x,app2 = f(ls[k])
			if stype(x) == "error" then return x end
			if app2 == nil then app2 = false end
			if app2 then
				for j = 1, #x do ls2[1 + #ls2] = x[j] end
			else
				ls2[1 + #ls2] = x
			end
		end
		return ls2,app
	end
	local function filter_entry(entry)
		local b = combine_all(preds, {type="list", entry}, env, depth,
			function (x)
				return (stype(x) ~= "boolean") or not x
			end)
		if stype(b) == "error" then return b end
		b = logical_and(b)
		if stype(b) == "error" then return b end
		if b then
			if stype(entry) == "list" then
				return hof(entry, 2, function (part)
						return hof(part, 2, filter_entry)
					end)
			else
				return entry
			end
		else
			if stype(entry) == "list" then
				return hof(entry, 2, function (part)
						return hof(part, 2, filter_entry, true)
					end, true)
			else
				return { type = "list" }, true
			end
		end
	end
	return hof(ls[1], 0, filter_entry)
end

local function item_tc(x)
	if (stype(x) == "list") and (#x &gt; 1) and
		(stype(x[1]) == "string") and (x[1] ~= "part") and
		(stype(x[2]) == "list") and (#x[2] == 2) and
		(int_tc(x[2][1]) == "") and (int_tc(x[2][2]) == "")
	then
		return ""
	else
		return "item"
	end
end

local function part_tc(x)
	if (stype(x) == "list") and (#x &gt; 1) and (x[1] == "part") and
		(stype(x[2]) == "list") and (#x[2] == 2) and
		(int_tc(x[2][1]) == "") and (int_tc(x[2][2]) == "")
	then
		return ""
	else
		return "part"
	end
end

local function cd_tc(x)
	if (stype(x) == "list") and (#x &gt; 0) then
		if stype(x[1]) == "string" then x = x[2] end
		if (x ~= nil) and (stype(x) == "list") and (#x == 2) and
			(int_tc(x[1]) == "") and (int_tc(x[2]) == "")
		then
			return ""
		end
	end
	return "coordinates descriptor"
end

local function cd_ls_tc(x)
	local ok = true
	if stype(x) ~= "list" then ok = false
	else for k = 1, #x do if cd_tc(x[k]) ~= "" then ok = false end end
	end
	if ok then return ""
	else return "list of coordinates descriptors"
	end
end

local function getsubstr_ntv(s, k1, k2) -- k1, k2 ints if provided
	if k1 == nil then return s end
	if k1 &lt; 1 then k1 = 1 end
	if k2 ~= nil then
		if k2 &gt;= mw.ustring.len(s) then k2 = nil end
	end
	return mw.ustring.sub( s, k1, k2 )
end

local function cd_norm(x) -- assumes cd_tc
	if stype(x[1]) == "number" then return x else return x[2] end
end

local function getsubstr_int_fn(ls)
	local s = ls[1]
	return getsubstr_ntv(s, ls[2], ls[3])
end

local function getsubstr_cd_fn(ls)
	local s = ls[1]
	local c = cd_norm(ls[2])
	return getsubstr_ntv(s, c[1], c[2])
end

local function getsubstr_ls_fn(ls)
	local s = ls[1]
	local r = { type = "list" }
	for k = 1, #ls[2] do
		r[k] = cd_norm(ls[2][k])
	end
	for k = 1, #r do r[k] = getsubstr_ntv(s, r[k][1], r[k][2]) end
	return r
end

local function setsubstr_ls(s, lsc, lss)
	-- string, array of cds, array of strings
	local n = math.min(#lsc, #lss) -- just ignore extras of either
	if n == 0 then return s end
	local function berr(...)
		return seterr("bounds violation in [op: set-substring]: %s",
			mw.ustring.format( ... ))
	end
	if lsc[1][1] &lt; 1 then
		return berr("segment starts left of string start (%i)", lsc[1][1])
	end
	if lsc[n][2] &gt; mw.ustring.len(s) then
		return berr("segment ends right of string end (%i, %i)",
			lsc[n][2], mw.ustring.len(s))
	end
	local r = {}
	for k = 1, n do
		if lsc[k][1] &gt; (lsc[k][2] + 1) then
			return berr("segment starts right of its own end (%i, %i)",
				lsc[k][1], lsc[k][2])
		end
		r[2 * k] = lss[k]
	end
	r[1] = mw.ustring.sub(s, 1, (lsc[1][1] - 1))
	r[1 + (2 * n)] = mw.ustring.sub(s, (lsc[n][2] + 1))
	for k = 2, n do
		if lsc[k - 1][2] &gt;= lsc[k][1] then
			return berr("segment ends right of next segment start (%i, %i)",
				lsc[k - 1][2], lsc[k][1])
		end
		r[(2 * k) - 1] = mw.ustring.sub(s,
			(lsc[k - 1][2] + 1),
			(lsc[k][1] - 1))
	end
	return table.concat(r)
end

local function str_ls_tc(x)
	local ok = true
	if stype(x) ~= "list" then ok = false
	else for k = 1, #x do if stype(x[k]) ~= "string" then ok = false end end
	end
	if ok then return ""
	else return "list of strings"
	end
end

local function getsublist_fn(ls)
	local n1 = ls[2]
	local n2 = ls[3]
	local ls = ls[1]
	local x = { type = "list" }
	if n1 &lt; 1 then n1 = 1 end
	if n2 == nil then n2 = #ls elseif n2 &gt; #ls then ns = #ls end
	for k = n1, n2 do x[1 + #x] = ls[k] end
	return x
end

local function setsublist_fn(ls)
	local base = ls[1]
	local n1 = ls[2] - 1
	local n2 = ls[3] + 1
	local seg = ls[4]
	if n1 &lt; 0 then n1 = 0 end
	if n2 &lt;= n1 then n2 = n1 + 1 end
	local r = { type = "list" }
	for k = 1, n1 do r[k] = base[k] end
	for k = 1, #seg do r[1 + #r] = seg[k] end
	for k = n2, #base do r[1 + #r] = base[k] end
	return r
end

local function findprd_fn(ls, env, depth)
	local x = ls[1]
	local p = ls[2].comb
	local x2 = { type = "list" }
	for k = 1, #x do
		local q = combine( p, { type="list", x[k] }, env, depth )
		if stype(q) == "error" then return q end
		if stype(q) ~= "boolean" then
			return seterr(
				"bad predicate result type to [op: find]: got %s",
				stype(q))
		end
		if q then x2[1 + #x2] = k end
	end
	return x2
end

local function findstr_fn(ls)
	local s = ls[1]
	local p = ls[2]
	local x2 = { type = "list" }
	if #p == 0 then return x2 end
	local k = 1
	repeat
		local x3 = { mw.ustring.find( s, p, k, true ) }
		if #x3 == 0 then return x2 end
		x2[1 + #x2] = { type = "list", x3[1], x3[2] }
		k = 1 + x3[2]
	until false
end

local function findpat_fn(ls)
	local s = ls[1]
	local p = ls[2].pat
	local x2 = { type = "list" }
	local k = 1
	repeat
		local x3 = { mw.ustring.find( s, p, k ) }
		if #x3 == 0 then return x2 end
		x2[1 + #x2] = { type = "list", x3[1], x3[2] }
		k = 1 + x3[2]
	until false
end

local function any_tc(x) return "" end
local function none_tc(x) return "no operand here" end

local function member_fn(ls) -- 1 or 2 operands, second must be a list
	local t = write_sexpr(ls[1])
	if ls[2] ~= nil then
		ls = ls[2]
		for k = 1, #ls do
			if write_sexpr(ls[k]) == t then return true end
		end
		return false
	else
		return wrap(nary_op(typed_op({ "list" }, make_op(function(ls)
			ls = ls[1]
			for k = 1, #ls do
				if write_sexpr(ls[k]) == t then return true end
			end
			return false
		end, nil, true)), 1))
	end
end

local lang = mw.language.getContentLanguage()

local function let_tc(x)
	if (stype(x) == "list") and (#x == 2) and (stype(x[1]) == "symbol")
	then return ""
	else return "symbol-value binding"
	end
end

local function sorp_tc(x)
	if (stype(x) == "string") or (stype(x) == "pattern")
	then return ""
	else return "string or pattern"
	end
end

local function split_tc(x)
	if (stype(x) == "list") and (#x &gt;= 1) and (sorp_tc(x[1]) == "") and
		((#x == 1) or
		 ((#x == 2) and ((sorp_tc(x[2]) == "") or (split_tc(x[2]) == ""))) or
		 ((#x == 3) and (sorp_tc(x[2]) == "") and (split_tc(x[3]) == "")))
	then
		return ""
	else
		return "valid string-split descriptor"
	end
end

local function strnest_tc(x)
	if stype(x) == "string" then return ""
	elseif stype(x) == "list" then
		for k = 1, #x do
			local msg = strnest_tc(x[k])
			if msg ~= "" then return msg end
		end
		return ""
	end
	return "string or tree of strings"
end

local function splitsep_fn(s, p)
	local x
	if (stype(p) == "string")
	then x = mw.text.split( s, p, true )
	else x = mw.text.split( s, p.pat )
	end
	x.type = "list"
	return x
end

local function splitdelim_fn(s, lt, rt)
	local lp = (stype(lt) == "string")
	local rp = (stype(rt) == "string")
	if not lp then lt = lt.pat end
	if not rp then rt = rt.pat end
	local snarf -- find next unmatched right-delimiter
	snarf = function (k)
		repeat
			local xl = { mw.ustring.find( s, lt, k, lp ) }
			local xr = { mw.ustring.find( s, rt, k, rp ) }
			if #xr == 0 then return xr end
			if #xl == 0 then return xr end
			if xr[1] &lt;= xl[1] then return xr end
			xr = snarf(xl[2] + 1)
			if #xr == 0 then return xr end
			k = (xr[2] + 1)
		until false
	end
	local results = { type = "list" }
	local k = 1 -- leftmost character of interest
	repeat
		local xl = { mw.ustring.find( s, lt, k, lp ) }
		if #xl == 0 then return results end
		k = xl[2] + 1
		local xr = snarf(k)
		if #xr &gt; 0 then
			results[1 + #results] = mw.ustring.sub( s, k, (xr[1] - 1) )
			k = xr[2] + 1
		end
	until false
end

local function splitrec_fn(s, rc)
	local ls
	if (#rc &gt; 1) and (stype(rc[2]) ~= "list") then
		ls = splitdelim_fn(s, rc[1], rc[2])
	else
		ls = splitsep_fn(s, rc[1])
	end
	ls.type = "list"
	rc = rc[#rc]
	if (stype(rc) == "list") then
		for k = 1, #ls do
			ls[k] = splitrec_fn(ls[k], rc)
		end
	end
	return ls
end

local function splitnest_fn(s, rc)
	if stype(s) == "string" then return splitrec_fn(s, rc) end
	local result = { type="list" }
	for k = 1, #s do
		result[k] = splitnest_fn(s[k], rc)
		if stype(result[k]) == "error" then return result[k] end
	end
	return result
end

local function split_fn(ls)
	local rc = { type = "list" }
	for k = 2, #ls do rc[k - 1] = ls[k] end
	return splitnest_fn(ls[1], rc)
end

local function join_tc(x)
	if (stype(x) == "list") and (#x &gt;= 1) and (stype(x[1]) == "string") and
		((#x == 1) or
		 ((#x == 2) and ((stype(x[2]) == "string") or (join_tc(x[2]) == ""))) or
		 ((#x == 3) and (stype(x[2]) == "string") and (join_tc(x[3]) == "")))
	then
		return ""
	else
		return "valid string-join descriptor"
	end
end

local function neststr_tc(x)
	if stype(x) == "list" then
		for k = 1, #x do
			if stype(x[k]) ~= "string" then
				local msg = neststr_tc(x[k])
				if msg ~= "" then return msg end
			end
		end
		return ""
	end
	return "tree of strings"
end

local function joinsep_fn(t, s)
	if #t == 0 then return "" end
	if stype(t[1]) == "string" then
		for k = 2, #t do if stype(t[k]) ~= "string" then
			return seterr("bad target for [op: join]: uneven tree depth")
		end end
		return table.concat( t, s )
	end
	for k = 2, #t do if stype(t[k]) == "string" then
		return seterr("bad target for [op: join]: uneven tree depth")
	end end
	local result = { type = "list" }
	for k = 1, #t do
		result[k] = joinsep_fn(t[k], s)
		if stype(result[k]) == "error" then return result[k] end
	end
	return result
end

local function joindelim_fn(t, lf, rg)
	if #t == 0 then return "" end
	if stype(t[1]) == "string" then
		for k = 2, #t do if stype(t[k]) ~= "string" then
			return seterr("bad target for [op: join]: uneven tree depth")
		end end
		return lf .. table.concat( t, (rg .. lf) ) .. rg
	end
	for k = 2, #t do if stype(t[k]) == "string" then
		return seterr("bad target for [op: join]: uneven tree depth")
	end end
	local result = { type = "list" }
	for k = 1, #t do
		result[k] = joindelim_fn(t[k], lf, rg)
		if stype(result[k]) == "error" then return result[k] end
	end
	return result
end

local function joinnest_fn(t, rc)
	if stype(t) == "error" then return t end
	if stype(t) == "string" then
		return seterr("bad target for [op: join]: tree not deep enough")
	end
	if #rc == 1 then
		return joinsep_fn(t, rc[1])
	elseif #rc == 3 then
		return joinnest_fn(joindelim_fn(t, rc[1], rc[2]), rc[3])
	elseif stype(rc[2]) == "string" then
		return joindelim_fn(t, rc[1], rc[2])
	else
		return joinnest_fn(joinsep_fn(t, rc[1]), rc[2])
	end
end

local function join_fn(ls)
	local rc = { type = "list" }
	for k = 2, #ls do rc[k - 1] = ls[k] end
	return joinnest_fn(ls[1], rc)
end

local function xformer_fn(pred, basis, succ, n)
	return wrap(nary_op(typed_op({ "fn", "fn", any_tc },
		make_op(function (ls, denv, depth)
			local leaf = ls[1]
			local parent = ls[2]
			local data = ls[3]
			local function xform(basis, data)
				local recurse = false
				if stype(data) == "list" then
					if stype(pred) ~= "fn" then
						recurse = true
					else
						recurse = combine( pred.comb, { type="list", data }, env, depth )
						if stype(recurse) ~= "boolean" then
							if stype(recurse) == "error" then return recurse end
							return seterr(
								"bad predicate result type to [op transform]: %s",
								stype(recurse))
						end
					end
				end
				local comb
				if recurse then
					local b2
					if stype(succ) == "fn"
					then b2 = combine( succ.comb, { type="list", basis }, env, depth )
					else b2 = basis
					end
					local d2 = { type="list" }
					for k = 1, #data do
						if k &lt;= n then
							d2[k] = data[k]
						else
							d2[k] = xform(b2, data[k])
							if stype(d2[k]) == "error" then return d2[k] end
						end
					end
					data = d2
					comb = parent.comb
				else
					comb = leaf.comb
				end
				if stype(succ) == "fn"
				then data = { type="list", basis, data }
				else data = { type="list",        data }
				end
				return combine( comb, data, env, depth )
			end
			return xform(basis, data)
		end, "transform", true)), 3))
end

--[[ standard environment ]]

local ground_env = {
	list = wrap(make_op(function (ls) return ls end, "list", true)),
	["+"] = wrap(typed_op(
		{ "number" }, make_op(function (ls)
			local sum = 0
			for k = 1, #ls do sum = sum + ls[k] end
			return sum
		end, "add", true),
		{ "string" }, function (ls)
			local s = {}
			for k = 1, #ls do s[k] = ls[k] end
			return table.concat(s)
		end,
		{ "boolean" }, function (ls)
			local sum = true
			for k = 1, #ls do sum = sum and ls[k] end
			return sum
		end,
		{ "list" }, function (ls)
			local x = { type = "list" }
			for j = 1, #ls do
				for k = 1, #ls[j] do
					x[1 + #x] = ls[j][k]
				end
			end
			return x
		end)),
	["*"] = wrap(typed_op({ "number" }, make_op(function (ls)
			local product = 1
			for k = 1, #ls do product = product * ls[k] end
			return product
		end, "multiply", true))),
	["-"] = wrap(nary_op(typed_op({ "number" }, make_op(function (ls)
			local result = ls[1]
			for k = 2, #ls do result = result - ls[k] end
			return result
		end, "subtract", true)), -2)),
	["/"] = wrap(nary_op(typed_op({ "number" }, make_op(function (ls)
			local result = ls[1]
			for k = 2, #ls do result = result / ls[k] end
			return result
		end, "divide", true)), -2)),
	["^"] = wrap(nary_op(typed_op({ "number" }, make_op(function  (ls)
			return ls[1] ^ ls[2]
		end, "exponentiation", true)), 2)),
	["\\"] = nary_op(make_op(lambda_fn, "\\", true), -1),
	abs = wrap(nary_op(typed_op({ "number" }, make_op(function (ls)
			return math.abs(ls[1])
		end, "abs", true)), 1)),
	anchorencode = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return mw.uri.anchorEncode( ls[1] )
		end, "anchorencode", true)), 1)),
	["and?"] = make_op(and_fn, "and?", true),
	apply = wrap(nary_op(typed_op(
		{ "fn", "list" }, make_op(function (ls, env, depth)
			return combine(ls[1].comb, ls[2], env, depth)
		end, "apply", "true")), 2)),
	["boolean?"] = wrap(unary_pred(function (x)
			return stype(x) == "boolean"
		end, "boolean?")),
	["call?"] = wrap(unary_pred(function (x)
			return (stype(x) == "list") and (#x &gt; 0) and
				(stype(x[1]) == "string") and (x[1] == "call")
		end, "call?")),
	canonicalurl = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			if #ls == 1
			then return tostring( mw.uri.canonicalUrl( ls[1] ) )
			else return tostring( mw.uri.canonicalUrl( ls[1], ls[2] ) )
			end
		end, "canonicalurl", true)), 1, 2)),
	ceil = wrap(nary_op(typed_op({ "number" }, make_op(function (ls)
			return math.ceil(ls[1])
		end, "ceil", true)), 1)),
	define = nary_op(make_op(function (ls, env, depth)
			if stype(ls[1]) ~= "symbol" then
				return seterr(
					"bad definiend to [op: define]: expected symbol, got %s",
					write_sexpr(ls[1]))
			end
			local x = eval(ls[2], env, depth)
			if stype(x) == "error" then return x end
			env[ls[1].name] = x
			while stype(x) == "fn" do x = x.comb end
			if stype(x) == "op" and x.name == nil then x.name = ls[1].name end
			return { type = "list" }
		end, "define", true), 2),
	["equal?"] = wrap(make_op(function (ls)
			if #ls &gt;= 2 then
				local t = write_sexpr(ls[1])
				for k = 2, #ls do
					if write_sexpr(ls[k]) ~= t then
						return false
					end
				end
			end
			return true
		end, "equal?", true)),
	filter = wrap(nary_op(typed_op({ "list", "fn" }, make_op(filter_fn,
		"filter", true)), -1)),
	find = wrap(nary_op(typed_op(
		{ "list", "fn" }, make_op(findprd_fn, "find", true),
		{ "string", "string" }, findstr_fn,
		{ "string", "pattern" }, findpat_fn
		), 2)),
	floor = wrap(nary_op(typed_op({ "number" }, make_op(function (ls)
			return math.floor(ls[1])
		end, "floor", true)), 1)),
	["fn?"] = wrap(unary_pred(function (x)
			return stype(x) == "fn"
		end, "fn?")),
	fullurl = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			if #ls == 1
			then return tostring( mw.uri.fullUrl( ls[1] ) )
			else return tostring( mw.uri.fullUrl( ls[1], ls[2] ) )
			end
		end, "fullurl", true)), 1, 2)),
	["ge?"] = wrap(typed_op(
		{ "number" }, binary_pred(function (x1, x2) return x1 &gt;= x2 end, "ge?"),
		{ "string" }, binary_pred(function (x1, x2) return x1 &gt;= x2 end))),
	['get-arg'] = wrap(nary_op(typed_op(
		{ "number" }, make_op(getarg_fn, "get-arg", true),
		{ "string" }, getarg_fn), 1)),
	['get-arg-expr'] = wrap(nary_op(typed_op(
		{ "number" }, make_op(getargexpr_fn, "get-arg-expr", true),
		{ "string" }, getargexpr_fn), 1)),
	['get-args'] = nary_op(make_op(function ()
			local ls = { type = "list" }
			for v, k in pairs( relevantFrame.args ) do
				ls[1 + #ls] = v
			end
			return ls
		end, "get-args"), 0),
	['get-coords'] = wrap(nary_op(typed_op({ cd_tc },make_op(function (ls)
			ls = ls[1]
			if stype(ls[1]) == "string" then ls = ls[2] end
			return { type="list", ls[1], ls[2] }
		end, "get-coords", true)), 1)),
	["get-items"] = wrap(nary_op(typed_op({ part_tc }, make_op(function (ls)
			ls = ls[1]
			local ls2 = { type="list" }
			for k = 3, #ls do ls2[k - 2] = ls[k] end
			return ls2
		end, "get-items", true)), 1)),
	["get-parts"] = wrap(nary_op(typed_op({ item_tc }, make_op(function (ls)
			ls = ls[1]
			local ls2 = { type="list" }
			for k = 3, #ls do ls2[k - 2] = ls[k] end
			return ls2
		end, "get-parts", true)), 1)),
	["get-sublist"] = wrap(nary_op(typed_op(
		{ "list", int_tc },
		make_op(getsublist_fn, "get-sublist", true)), 2, 3)),
	["get-substring"] = wrap(typed_op(
		{ "string", int_tc },
		nary_op(make_op(getsubstr_int_fn, "get-substring", true), 2, 3),
		{ "string", cd_tc },
		nary_op(make_op(getsubstr_cd_fn, "get-substring", true), 2),
		{ "string", cd_ls_tc },
		nary_op(make_op(getsubstr_ls_fn, "get-substring", true), 2))),
	["gt?"] = wrap(typed_op(
		{ "number" }, binary_pred(function (x1, x2) return x1 &gt; x2 end, "gt?"),
		{ "string" }, binary_pred(function (x1, x2) return x1 &gt; x2 end))),
	["if"] = nary_op(make_op(function (ls, env, depth)
			local test = eval(ls[1], env, depth)
			if stype(test) == "error" then return test end
			if stype(test) ~= "boolean" then
				return seterr(
					"bad test-result in [op: if]: %s",
					write_sexpr(test))
			elseif test then
				return eval(ls[2], env, depth)
			else
				return eval(ls[3], env, depth)
			end
		end, "if", true), 3),
	join = wrap(typed_op(
		{ neststr_tc, "string", join_tc },
		nary_op(make_op(join_fn, "join", true), 2, 3),
		{ neststr_tc, "string", "string", join_tc },
		nary_op(make_op(join_fn, "split", true), 3, 4))),
	lc = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return lang:lc(ls[1])
		end, "lc", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do r[k] = lang:lc(ls[k]) end
			return r
		end), 1)),
	lcfirst = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return lang:lcfirst(ls[1])
		end, "lcfirst", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do r[k] = lang:lcfirst(ls[k]) end
			return r
		end), 1)),
	["le?"] = wrap(typed_op(
		{ "number" }, binary_pred(function (x1, x2) return x1 &lt;= x2 end, "le?"),
		{ "string" }, binary_pred(function (x1, x2) return x1 &lt;= x2 end))),
	length = wrap(nary_op(typed_op(
		{ "list" }, make_op(function (ls)
			return #ls[1]
		end, "length", true),
		{ "string" }, function (ls)
			return mw.ustring.len( ls[1] )
		end), 1)),
	let = nary_op(typed_op({ let_tc, any_tc }, make_op(function (ls, env, depth)
			local p = ls[1][1]
			local v = eval( ls[1][2], env, depth )
			if stype(v) == "error" then return v end
			local body = { type = "list" }
			for k = 2, #ls do body[k - 1] = ls[k] end
			local e = {}
			e[p.name] = v
			setmetatable(e, { __index = env})
			return eval_seq(body, e, depth)
		end, "let", true)), -1),
	["link?"] = wrap(unary_pred(function (x)
			return (stype(x) == "list") and (#x &gt; 0) and
				(stype(x[1]) == "string") and (x[1] == "link")
		end, "link?")),
	["list?"] = wrap(unary_pred(function (x)
			return stype(x) == "list"
		end, "list?")),
	["lt?"] = wrap(typed_op(
		{ "number" }, binary_pred(function (x1, x2) return x1 &lt; x2 end, "lt?"),
		{ "string" }, binary_pred(function (x1, x2) return x1 &lt; x2 end))),
	map = wrap(nary_op(typed_op({ "fn", "list" }, make_op(
		function (ls, env, depth)
			local n = #ls[2]
			for k = 3, #ls do if #ls[k] &lt; n then n = #ls[k] end end
			local x = { type = "list" }
			for j = 1, n do
				local x2 = { type = "list" }
				for k = 2, #ls do x2[k - 1] = ls[k][j] end
				x[j] = combine( ls[1].comb, x2, env, depth )
				if stype(x[j]) == "error" then return x[j] end
			end
			return x
		end, "map", true)), -2)),
	["member?"] = wrap(nary_op(typed_op(
		{ any_tc, "list" }, make_op(member_fn, "member?", true)), 1, 2)),
	merge = wrap(nary_op(typed_op({ "fn", "list" }, make_op(
		function (ls, env, depth)
			local ks = {}
			for k = 2, #ls do ks[k] = 1 end
			local result = { type = "list" }
			while true do
				local j = nil
				for k = 2, #ls do
					if ks[k] &lt;= #ls[k] then
						if j == nil then j = k else
							local x = combine( ls[1].comb,
								{ ls[k][ks[k]], ls[j][ks[j]] }, env, depth )
							if stype(x) == "error" then return x end
							if x then j = k end
						end
					end
				end
				if j == nil then return result else
					result[#result + 1] = ls[j][ks[j]]
					ks[j] = ks[j] + 1
				end
			end
		end, "merge", true)), -2)),
	["not?"] = wrap(nary_op(typed_op({ "boolean" }, make_op(function (ls)
			return not ls[1]
		end, "not?", true)), 1)),
	nth = wrap(nary_op(typed_op({ "list", posint_tc }, make_op(function (ls)
			local x = ls[1]
			for k = 2, #ls do
				local n = ls[k]
				if #x &lt; n then
					return seterr(
						"bad index to [op: nth]: asked for %i, list length is %i",
						n, #x)
				end
				x = x[n]
				if (k &lt; #ls) and (stype(x) ~= "list") then
					return seterr("bad multi-index to [op: nth]: tree too shallow")
				end
			end
			return x
		end, "nth", true)), -2)),
	["number?"] = wrap(unary_pred(function (x)
			return stype(x) == "number"
		end, "number?")),
	["op?"] = wrap(unary_pred(function (x)
			return stype(x) == "op"
		end, "op?")),
	["or?"] = make_op(or_fn, "or?", true),
	["param?"] = wrap(unary_pred(function (x)
			return (stype(x) == "list") and (#x &gt; 0) and
				(stype(x[1]) == "string") and (x[1] == "param")
		end, "param?")),
	parse = wrap(nary_op(typed_op({ "string" }, make_op(parse_wiki,
		"parse", true)), 1)),
	pattern = wrap(nary_op(typed_op({ "string" }, make_op(function (ls)
			local p = ls[1]
			if #p == 0 then p = "[^%z%Z]" end -- disable null pattern
			return { type="pattern", pat=p }
		end, "pattern", true)), 1)),
	sequence = make_op(function (ls, env, depth)
			return eval_seq(ls, env, depth)
		end, "sequence", true),
	["set-sublist"] = wrap(nary_op(typed_op(
		{ "list", int_tc, int_tc, "list" },
		make_op(setsublist_fn, "set-sublist", true)), 4)),
	["set-substring"] = wrap(typed_op(
		{ "string", int_tc, int_tc, "string" },
		nary_op(make_op(function (ls)
				return setsubstr_ls(ls[1], { { ls[2], ls[3] } }, { ls[4] })
			end, "set-substring", true), 4),
		{ "string", cd_tc, "string" },
		nary_op(make_op(function (ls)
				return setsubstr_ls(ls[1], { cd_norm(ls[2]) }, { ls[3] })
			end, "set-substring", true), 3),
		{ "string", cd_ls_tc, str_ls_tc },
		nary_op(make_op(function (ls)
				local lsc = {}
				for k = 1, #ls[2] do lsc[k] = cd_norm(ls[2][k]) end
				return setsubstr_ls(ls[1], lsc, ls[3])
			end, "set-substring", true), 3)
		)),
	split = wrap(typed_op(
		{ strnest_tc, sorp_tc, split_tc },
		nary_op(make_op(split_fn, "split", true), 2, 3),
		{ strnest_tc, sorp_tc, sorp_tc, split_tc },
		nary_op(make_op(split_fn, "split", true), 3, 4))),
	["string?"] = wrap(unary_pred(function (x)
			return stype(x) == "string"
		end, "string?")),
	["symbol?"] = wrap(unary_pred(function (x)
			return stype(x) == "symbol"
		end, "symbol?")),
	["to-entity"] = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			local s = ls[1]
			if #s == 0 then return s end
			return "&amp;#" .. mw.ustring.codepoint(s, 1) .. ";"
		end, "to-entity", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do
				local s = ls[k]
				if #s == 0 then r[k] = s
				else r[k] = "&amp;#" .. mw.ustring.codepoint(s, 1) .. ";"
				end
			end
			return r
		end), 1)),
	["to-number"] = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			local n = tonumber(ls[1])
			if n == nil then return { type="list" } else return n end
		end, "to-number", true)), 1)),
	["to-string"] = wrap(nary_op(typed_op(
		{ "number" }, make_op(function (ls)
			return write_sexpr(ls[1])
		end, "to-string", true)),1)),
	transformer = wrap(typed_op(
		{ none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(    0,     0,     0,     0)
			end, "transformer", true),
		{ "fn", none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(ls[1],     0,     0,     0)
			end, "transformer", true),
		{ posint_tc, none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(    0,     0,     0, ls[1])
			end, "transformer", true),
		{ any_tc, "fn", none_tc },
		nary_op(make_op(function (ls, env, depth)
				return xformer_fn(    0, ls[1], ls[2],     0)
			end, "transformer", true), -2),
		{ "fn", posint_tc, none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(ls[1],     0,     0, ls[2])
			end, "transformer", true),
		{ "fn", any_tc, "fn", none_tc },
		nary_op(make_op(function (ls, env, depth)
				return xformer_fn(ls[1], ls[2], ls[3],     0)
			end, "transformer", true), -3),
		{ any_tc, "fn", posint_tc, none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(    0, ls[1], ls[2], ls[3])
			end, "transformer", true),
		{ "fn", any_tc, "fn", posint_tc, none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(ls[1], ls[2], ls[3], ls[4])
			end, "transformer", true)
		)),
	trim = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return mw.text.trim(ls[1])
		end, "trim", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do r[k] = mw.text.trim(ls[k]) end
			return r
		end), 1)),
	uc = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return lang:uc(ls[1])
		end, "uc", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do r[k] = lang:uc(ls[k]) end
			return r
		end), 1)),
	ucfirst = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return lang:ucfirst(ls[1])
		end, "ucfirst", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do r[k] = lang:ucfirst(ls[k]) end
			return r
		end), 1)),
	urlencode = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			if #ls == 1 then ls[2] = 'QUERY' end
			return mw.uri.encode( ls[1], ls[2] )
		end, "urlencode", true)), 1, 2)),
	["wikilisp-version"] = wrap(nary_op(make_op(function (ls)
			return wikilispversion
		end, "wikilisp-version", true), 0)),
	write = wrap(nary_op(make_op(function (ls)
			return write_sexpr(ls[1])
		end, "write", true), 1))
}

local function make_standard_env()
	local standard_env = {}
	setmetatable(standard_env, { __index = ground_env})
	return standard_env
end

--[[ read-eval-print]]

function export.rep( frame )
	local t = frame.args[1]
	if t == nil then t = "" end
	return display_sexpr(
		eval_seq(
			text_to_sexpr(t),
			make_standard_env(),
			maxdepth))
end

function export.trep( frame )
	relevantFrame = frame:getParent()
	return export.rep(frame)
end

return export</text>
      <sha1>pj4vm8qb5jh0xuqywm926aeq903pofc</sha1>
    </revision>
  </page>
</mediawiki>
