<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikibooks</sitename>
    <dbname>enwikibooks</dbname>
    <base>https://en.wikibooks.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.35.0-wmf.16</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikibooks</namespace>
      <namespace key="5" case="first-letter">Wikibooks talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="102" case="first-letter">Cookbook</namespace>
      <namespace key="103" case="first-letter">Cookbook talk</namespace>
      <namespace key="108" case="first-letter">Transwiki</namespace>
      <namespace key="109" case="first-letter">Transwiki talk</namespace>
      <namespace key="110" case="first-letter">Wikijunior</namespace>
      <namespace key="111" case="first-letter">Wikijunior talk</namespace>
      <namespace key="112" case="first-letter">Subject</namespace>
      <namespace key="113" case="first-letter">Subject talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Print version</title>
    <ns>0</ns>
    <id>107330</id>
    <revision>
      <id>2694443</id>
      <parentid>2501137</parentid>
      <timestamp>2014-08-25T01:26:29Z</timestamp>
      <contributor>
        <username>CommonsDelinker</username>
        <id>49843</id>
      </contributor>
      <minor/>
      <comment>Removing "Python3-powered_hello-world.svg", it has been deleted from Commons by [[commons:User:Fastily|Fastily]] because: [[commons:Commons:Deletion requests/Python logos]].</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2129" xml:space="preserve">&lt;noinclude&gt;
__NOTOC__ __NOEDITSECTION__

{{print version notice|Non-Programmer's Tutorial for Python 2.6|Non-Programmer's Tutorial for Python 2.6/Print_version}}
&lt;div style="text-align:center"&gt;&lt;/div&gt;

= Authors =
{{:Non-Programmer's Tutorial for Python 2.6/Authors}} 
&lt;/noinclude&gt; 
= Front matter =
{{:Non-Programmer's Tutorial for Python 2.6/Front matter}}

= Intro =
{{:Non-Programmer's Tutorial for Python 2.6/Intro}}

= Hello, World =
{{:Non-Programmer's Tutorial for Python 2.6/Hello, World}}

= Who Goes There? =
{{:Non-Programmer's Tutorial for Python 2.6/Who Goes There?}}

= Count to 10 =
{{:Non-Programmer's Tutorial for Python 2.6/Count to 10}}

= Decisions =
{{:Non-Programmer's Tutorial for Python 2.6/Decisions}}

= Debugging =
{{:Non-Programmer's Tutorial for Python 2.6/Debugging}}

= Defining Functions =
{{:Non-Programmer's Tutorial for Python 2.6/Defining Functions}}

= Advanced Functions Example =
{{:Non-Programmer's Tutorial for Python 2.6/Advanced Functions Example}}

= Lists =
{{:Non-Programmer's Tutorial for Python 2.6/Lists}}

= For Loops =
{{:Non-Programmer's Tutorial for Python 2.6/For Loops}}

= Boolean Expressions =
{{:Non-Programmer's Tutorial for Python 2.6/Boolean Expressions}}

= Dictionaries =
{{:Non-Programmer's Tutorial for Python 2.6/Dictionaries}}

= Using Modules =
{{:Non-Programmer's Tutorial for Python 2.6/Using Modules}}

= More on Lists =
{{:Non-Programmer's Tutorial for Python 2.6/More on Lists}}

= Revenge of the Strings =
{{:Non-Programmer's Tutorial for Python 2.6/Revenge of the Strings}}

= File IO =
{{:Non-Programmer's Tutorial for Python 2.6/File IO}}

= Dealing with the imperfect =
{{:Non-Programmer's Tutorial for Python 2.6/Dealing with the imperfect}}

= The End =
{{:Non-Programmer's Tutorial for Python 2.6/The End}}

= FAQ =
{{:Non-Programmer's Tutorial for Python 2.6/FAQ}}

&lt;noinclude&gt;
= License =

The Non-Programmer's Tutorial for Python is licensed under the GNU Free Documentation License.  All programming examples in the text are granted to the public domain.  

== GNU Free Documentation License ==

{{:GNU Free Documentation License}}
&lt;/noinclude&gt;</text>
      <sha1>3wo2f16qnxp6owj5qndpqmtj7yt9eqj</sha1>
    </revision>
  </page>
  <page>
    <title>GNU Free Documentation License</title>
    <ns>0</ns>
    <id>54348</id>
    <redirect title="Wikibooks:GNU Free Documentation License" />
    <restrictions>edit=sysop:move=sysop</restrictions>
    <revision>
      <id>320579</id>
      <timestamp>2005-12-28T03:45:55Z</timestamp>
      <contributor>
        <username>Guanaco</username>
        <id>1043</id>
      </contributor>
      <comment>[[GNU Free Documentation License]] moved to [[Wikibooks:GNU Free Documentation License]]: Wikibooks-related, not a textbook</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="54" xml:space="preserve">#REDIRECT [[Wikibooks:GNU Free Documentation License]]</text>
      <sha1>6wqnlr6v0gknm190bbhg79eg44ee5em</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Advanced Functions Example</title>
    <ns>0</ns>
    <id>107665</id>
    <revision>
      <id>3010953</id>
      <parentid>3010950</parentid>
      <timestamp>2015-10-29T22:31:11Z</timestamp>
      <contributor>
        <username>LesmanaZimmer</username>
        <id>42033</id>
      </contributor>
      <comment>replace multiplication with function call</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11457" xml:space="preserve">Some people find this section useful, and some find it confusing. If you find it confusing you can skip it (or just look at the examples.)  Now we will do a walk through for the following program:
&lt;source lang="python"&gt;
def mult(a, b):
    if b == 0:
        return 0
    rest = mult(a, b - 1)
    value = a + rest
    return value
result = mult(3, 2)
print "3 * 2 = ", result
&lt;/source&gt;
{{Solution|title=Output|text=
&lt;source lang="python"&gt;
3 * 2 =  6
&lt;/source&gt;
}}
Basically this program creates a positive integer multiplication function
(that is far slower than the built in multiplication function) and then
demonstrates this function with a use of the function. This program demonstrates the use of recursion, that is a form of iteration (repetition) in which there is a function that repeatedly calls itself until an exit condition is satisfied. It uses repeated additions to give the same result as mutiplication: e.g. 3&amp;nbsp;+&amp;nbsp;3 (addition) gives the same result as 3&amp;nbsp;*&amp;nbsp;2 (multiplication).
----
'''RUN 1'''
; ''Question:'' What is the first thing the program does?
: ''Answer:'' The first thing done is the function mult is defined with all the lines except the last one.

{{Solution|title=function mult defined|text=
&lt;source lang="python"&gt;
def mult(a, b):
    if b == 0:
        return 0
    rest = mult(a, b - 1)
    value = a + rest
    return value
&lt;/source&gt;
}}
: This creates a function that takes two parameters and returns a value when it is done.  Later this function can be run.
----
; What happens next?  
: The next line after the function, &lt;code&gt;result = mult(3, 2)&lt;/code&gt; is run.
----
; What does this line do?
: This line will assign the return value of &lt;code&gt;mult(3, 2)&lt;/code&gt; to the variable &lt;code&gt;result&lt;/code&gt;.
----
; And what does &lt;code&gt;mult(3, 2)&lt;/code&gt; return?
: We need to do a walkthrough of the &lt;code&gt;mult&lt;/code&gt; function to find out.
----
'''RUN 2'''
; What happens next?
: The variable &lt;code&gt;a&lt;/code&gt; gets the value 3 assigned to it and the variable &lt;code&gt;b&lt;/code&gt; gets the value 2 assigned to it.
----
; And then?
: The line &lt;code&gt;if b == 0:&lt;/code&gt; is run.  Since &lt;code&gt;b&lt;/code&gt; has the value 2 this is false so the line &lt;code&gt;return 0&lt;/code&gt; is skipped.
----
; And what then?
: The line &lt;code&gt;rest = mult(a, b - 1)&lt;/code&gt; is run.  This line sets the local variable &lt;code&gt;rest&lt;/code&gt; to the value of &lt;code&gt;mult(a, b - 1)&lt;/code&gt;.  The value of &lt;code&gt; a&lt;/code&gt; is 3 and the value of &lt;code&gt; b&lt;/code&gt; is 2 so the function call is &lt;code&gt;mult(3,1)&lt;/code&gt;
----
; So what is the value of &lt;code&gt;mult(3, 1)&lt;/code&gt; ?
: We will need to run the function &lt;code&gt; mult&lt;/code&gt; with the parameters 3 and 1.
{{Solution|title=RUN 2|text=
&lt;source lang="python"&gt;
def mult(3, 2):
    if b == 0:
        return 0
    rest = mult(3, 2 - 1)
    value = 3 + rest
    return value
&lt;/source&gt;
}}

----
'''RUN 3'''
; So what happens next?
: The local variables in the '' new'' run of the function are set so that &lt;code&gt;a&lt;/code&gt; has the value 3 and &lt;code&gt; b&lt;/code&gt; has the value 1. Since these are local values these do not affect the previous values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.
----
; And then?
: Since &lt;code&gt; b&lt;/code&gt; has the value 1 the if statement is false, so the next line becomes &lt;code&gt;rest = mult(a, b - 1)&lt;/code&gt;.
----
; What does this line do?
: This line will assign the value of &lt;code&gt;mult(3, 0)&lt;/code&gt; to rest.
----
; So what is that value?
: We will have to run the function one more time to find that out. This time &lt;code&gt;a&lt;/code&gt; has the value 3 and &lt;code&gt;b&lt;/code&gt; has the value 0.
----
; So what happens next?
: The first line in the function to run is &lt;code&gt;if b == 0:&lt;/code&gt;. &lt;code&gt; b&lt;/code&gt; has the value 0 so the next line to run is &lt;code&gt;return 0&lt;/code&gt; 
----
; And what does the line &lt;code&gt;return 0&lt;/code&gt; do?
: This line returns the value 0 out of the function. 
----
; So?
: So now we know that &lt;code&gt;mult(3, 0)&lt;/code&gt; has the value 0.  Now we know what the line &lt;code&gt;rest = mult(a, b - 1)&lt;/code&gt; did since we have run the function &lt;code&gt;mult&lt;/code&gt; with the parameters 3 and 0.  We have finished running &lt;code&gt;mult(3, 0)&lt;/code&gt; and are now back to running &lt;code&gt; mult(3, 1)&lt;/code&gt;. The variable &lt;code&gt;rest&lt;/code&gt; gets assigned the value 0.
----
; What line is run next?
: The line &lt;code&gt;value = a + rest&lt;/code&gt; is run next. In this run of the function, &lt;code&gt;a = 3&lt;/code&gt; and &lt;code&gt;rest = 0&lt;/code&gt; so now &lt;code&gt;value = 3&lt;/code&gt;.  
----
; What happens next?
: The line &lt;code&gt;return value&lt;/code&gt; is run.  This returns 3 from the function. This also exits from the run of the function &lt;code&gt; mult(3, 1)&lt;/code&gt;.  After &lt;code&gt;return&lt;/code&gt; is called, we go back to running &lt;code&gt; mult(3, 2)&lt;/code&gt;.
----
; Where were we in &lt;code&gt; mult(3, 2)&lt;/code&gt;?
: We had the variables &lt;code&gt;a = 3&lt;/code&gt; and &lt;code&gt;b = 2&lt;/code&gt; and were examining the line &lt;code&gt;rest = mult(a, b - 1)&lt;/code&gt;.
----
; So what happens now?
: The variable &lt;code&gt;rest&lt;/code&gt; get 3 assigned to it.  The next line &lt;code&gt;value = a + rest&lt;/code&gt; sets &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;3 + 3&lt;/code&gt; or 6.  
----
; So now what happens?
: The next line runs, this returns 6 from the function.  We are now back to running the line &lt;code&gt;result = mult(3, 2)&lt;/code&gt;. Now the return value can be assigned to the variable &lt;code&gt;result&lt;/code&gt;.
----
; What happens next?  
: The next line after the function, &lt;code&gt;print "3 * 2 = ", result&lt;/code&gt; is run.
----
; And what does this do?
: It prints &lt;code&gt;3 * 2 = &lt;/code&gt; and the value of &lt;code&gt;result&lt;/code&gt; which is 6. The complete line printed is &lt;code&gt;3 * 2 = 6&lt;/code&gt;
----
; What is happening overall?  
: Basically we used two facts to calculate the multiple of the two numbers.  The first is that any number times 0 is 0 (&lt;code&gt;x * 0 = 0&lt;/code&gt;).  The second is that a number times another number is equal to the first number plus the first number times one less than the second number (&lt;code&gt;x * y = x + x * (y - 1)&lt;/code&gt;).  So what happens is &lt;code&gt;3 * 2&lt;/code&gt; is first converted into &lt;code&gt; 3 + 3 * 1&lt;/code&gt;.  Then &lt;code&gt;3 * 1&lt;/code&gt; is converted into &lt;code&gt;3 + 3 * 0&lt;/code&gt;.  Then we know that any number times 0 is 0 so &lt;code&gt;3 * 0&lt;/code&gt; is 0.  Then we can calculate that &lt;code&gt;3 + 3 * 0&lt;/code&gt; is &lt;code&gt;3 + 0&lt;/code&gt; which is &lt;code&gt;3&lt;/code&gt;.  Now we know what &lt;code&gt;3 * 1&lt;/code&gt; is so we can calculate that &lt;code&gt;3 + 3 * 1&lt;/code&gt; is &lt;code&gt;3 + 3&lt;/code&gt; which is &lt;code&gt;6&lt;/code&gt;.
----
This is how the whole thing works:

 mult(3, 2)
 3 + mult(3, 1)
 3 + 3 + mult(3, 0)
 3 + 3 + 0
 3 + 3
 6

Should you still have problems with this example, look at the process backwards. What is the last
step that happens? We can easily make out that the result of &lt;code&gt;mult(3, 0)&lt;/code&gt; is
&lt;code&gt;0&lt;/code&gt;. Since &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, the function &lt;code&gt;mult(3, 0)&lt;/code&gt; 
will return &lt;code&gt;0&lt;/code&gt; and stop. 

So what does the previous step do? &lt;code&gt;mult(3, 1)&lt;/code&gt; does not return &lt;code&gt;0&lt;/code&gt;
because &lt;code&gt;b&lt;/code&gt; is not &lt;code&gt;0&lt;/code&gt;. So the next lines are executed:
&lt;code&gt;rest = mult (a, b - 1)&lt;/code&gt;, which is &lt;code&gt;rest = mult (3, 0)&lt;/code&gt;, 
which is &lt;code&gt;0&lt;/code&gt; as we just worked out. So now the variable &lt;code&gt;rest&lt;/code&gt; is set to &lt;code&gt;0&lt;/code&gt;.

The next line adds the value of &lt;code&gt;rest&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;, and since &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;rest&lt;/code&gt;
is &lt;code&gt;0&lt;/code&gt;, the result is &lt;code&gt;3&lt;/code&gt;.

Now we know that the function &lt;code&gt;mult(3, 1)&lt;/code&gt; returns &lt;code&gt;3&lt;/code&gt;. But we want to
know the result of &lt;code&gt;mult(3,2)&lt;/code&gt;. Therefore, we need to jump back to the
start of the program and execute it one more round: 
&lt;code&gt;mult(3, 2)&lt;/code&gt; sets &lt;code&gt;rest&lt;/code&gt; to the result of &lt;code&gt;mult(3, 1)&lt;/code&gt;. We know
from the last round that this result is &lt;code&gt;3&lt;/code&gt;. Then &lt;code&gt;value&lt;/code&gt; calculates as &lt;code&gt;a + rest&lt;/code&gt;,
i. e. &lt;code&gt;3 + 3&lt;/code&gt;. Then the result of 3 * 2 is printed as 6. 

The point of this example is that the function &lt;code&gt;mult(a, b)&lt;/code&gt; starts itself inside
itself. It does this until &lt;code&gt;b&lt;/code&gt; reaches &lt;code&gt;0&lt;/code&gt; and then calculates the result as explained above.

==== Recursion ====
Programming constructs of this kind are called ''recursive'' and probably the most intuitive definition of ''recursion'' is:
----
; Recursion
: If you still don't get it, see ''recursion''.
----

These last two sections were recently written.  If you have any
comments, found any errors or think I need more/clearer explanations
please email.  I have been known in the past to make simple things
incomprehensible.  If the rest of the tutorial has made sense, but this
section didn't, it is probably my fault and I would like to know.
Thanks.

=== Examples ===
'''factorial.py'''
&lt;source lang="python"&gt;
#defines a function that calculates the factorial

def factorial(n):
    if n &lt;= 1:
        return 1
    return n * factorial(n - 1)

print "2! =", factorial(2)
print "3! =", factorial(3)
print "4! =", factorial(4)
print "5! =", factorial(5)
&lt;/source&gt;

Output:
 
 2! = 2
 3! = 6
 4! = 24
 5! = 120

'''countdown.py'''
&lt;source lang="python"&gt;
def count_down(n):
    print n
    if n &gt; 0:
        return count_down(n-1)

count_down(5)
&lt;/source&gt;

Output:
 5
 4
 3
 2
 1
 0

'''Commented_mult.py'''
&lt;source lang="python"&gt;
# The comments below have been numbered as steps, to make explanation
# of the code easier. Please read according to those steps.
# (step number 1, for example, is at the bottom)


def mult(a, b): # (2.) This function will keep repeating itself, because....
    if b == 0:
        return 0
    rest = mult(a, b - 1) # (3.) ....Once it reaches THIS, the sequence starts over again and goes back to the top!
    value = a + rest
    return value # (4.) therefore, "return value" will not happen until the program gets past step 3 above

print "3 * 2 = ", mult(3, 2) # (1.) The "mult" function will first initiate here
                             

# The "return value" event at the end can therefore only happen
# once b equals zero (b decreases by 1 everytime step 3 happens).
# And only then can the print command at the bottom be displayed.

# See it as kind of a "jump-around" effect. Basically, all you
# should really understand is that the function is reinitiated
# WITHIN ITSELF at step 3. Therefore, the sequence "jumps" back
# to the top.
&lt;/source&gt;

'''Commented_factorial.py'''
&lt;source lang="python"&gt;
# Another "jump-around" function example:

def factorial(n): # (2.) So once again, this function will REPEAT itself....
    if n &lt;= 1:
        return 1
    return n * factorial(n - 1) # (3.) Because it RE-initiates HERE, and goes back to the top.

print "2! =", factorial(2) # (1.) The "factorial" function is initiated with this line
print "3! =", factorial(3)
print "4! =", factorial(4)
print "5! =", factorial(5)
&lt;/source&gt;

'''Commented_countdown.py'''
&lt;source lang="python"&gt;
# Another "jump-around", nice and easy:


def count_down(n): # (2.) Once again, this sequence will repeat itself....
    print n
    if n &gt; 0:
        return count_down(n-1) # (3.) Because it restarts here, and goes back to the top

count_down(5) # (1.) The "count_down" function initiates here
&lt;/source&gt;

&lt;!--Now try replacing the "if" with "while" (you are still typing these out, right?).  Now you've managed to turn your computer into a calculator which can't correctly count down from four.  In essence, "while" acts as combined "if" and "repeat."  Throwing in two recursions makes for some interesting counting.--&gt;

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Defining Functions|Lists}}</text>
      <sha1>gs191h23bs30pagq99pjx5f4kjm6ht2</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Authors</title>
    <ns>0</ns>
    <id>107333</id>
    <revision>
      <id>2009409</id>
      <parentid>2009340</parentid>
      <timestamp>2010-12-28T20:24:55Z</timestamp>
      <contributor>
        <username>QuiteUnusual</username>
        <id>134830</id>
      </contributor>
      <comment>Authors page typically lists major contributors only</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="232" xml:space="preserve">; Josh Cogliati
: [[User:Jrincayc]], jjcogliati-jan2007 AT yahoo.com

=== Contributors === 
* Kiah Morante ([[User:greenmanwitch]])
*Elizabeth Cogliati
*James A. Brown
*Joe Oppegaard
*Benjamin Hell ([[User:Siebengang]])

{{BookCat}}</text>
      <sha1>cp23kgprb2qlfauarmjpike3wc127un</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Boolean Expressions</title>
    <ns>0</ns>
    <id>9970</id>
    <revision>
      <id>3482127</id>
      <parentid>3481919</parentid>
      <timestamp>2018-10-30T20:01:48Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <comment>This page is about Boolean Expressions. Undid revision 3481919 by [[Special:Contributions/64.251.51.135|64.251.51.135]] ([[User talk:64.251.51.135|discuss]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="13293" xml:space="preserve">Here is a little example of boolean expressions (you don't have to type it in):
&lt;source lang="python"&gt;
a = 6
b = 7
c = 42
print 1, a == 6
print 2, a == 7
print 3, a == 6 and b == 7
print 4, a == 7 and b == 7
print 5, not a == 7 and b == 7
print 6, a == 7 or b == 7
print 7, a == 7 or b == 6
print 8, not (a == 7 and b == 6)
print 9, not a == 7 and b == 6
&lt;/source&gt;

With the output being:

 1 True
 2 False
 3 True
 4 False
 5 True
 6 True
 7 False
 8 True
 9 False

What is going on?  The program consists of a bunch of funny looking &lt;code&gt;print&lt;/code&gt; statements.  Each &lt;code&gt;print&lt;/code&gt; statement prints a number and an expression.  The number is to help keep track of which statement I am dealing with.  Notice how each expression ends up being either &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;True&lt;/code&gt;.  In Python, false can also be written as 0 and true as 1.  
&lt;!-- For example: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- &gt;&gt;&gt; if 1: --&gt;
&lt;!-- ...     print "true" --&gt;
&lt;!-- ... else: --&gt;
&lt;!-- ...     print "false" --&gt;
&lt;!-- ...  --&gt;
&lt;!-- true --&gt;
&lt;!-- &gt;&gt;&gt; if 0: --&gt;
&lt;!-- ...     print "true" --&gt;
&lt;!-- ... else: --&gt;
&lt;!-- ...     print "false" --&gt;
&lt;!-- ...  --&gt;
&lt;!-- false --&gt;
&lt;!-- &lt;/source&gt; --&gt;

The lines:

&lt;source lang="python"&gt;
print 1, a == 6
print 2, a == 7
&lt;/source&gt;

print out a &lt;code&gt;True&lt;/code&gt; and a &lt;code&gt;False&lt;/code&gt; respectively just as expected since the first is true and the second is false.  The third print, &lt;code&gt;print 3, a == 6 and b == 7&lt;/code&gt;, is a little different.  The operator &lt;code&gt;and&lt;/code&gt; means if both the statement before and the statement after are true then the whole expression is true otherwise the whole expression is false.  The next line, &lt;code&gt;print 4, a == 7 and b == 7&lt;/code&gt;, shows how if part of an &lt;code&gt;and&lt;/code&gt; expression is false, the whole thing is false.  The behavior of &lt;code&gt;and&lt;/code&gt; can be summarized as follows:

{| class="wikitable"
!expression 
!result 
|-  
|true &lt;code&gt;and&lt;/code&gt; true 
|true 
|-
|true &lt;code&gt;and&lt;/code&gt; false 
|false 
|-
|false &lt;code&gt;and&lt;/code&gt; true 
|false
|-
|false &lt;code&gt;and&lt;/code&gt; false 
|false
|}

Notice that if the first expression is false Python does not check the second expression since it knows the whole expression is false.  

The next line, &lt;code&gt;print 5, not a == 7 and b == 7&lt;/code&gt;, uses the &lt;code&gt;not&lt;/code&gt; operator.  &lt;code&gt;not&lt;/code&gt; just gives the opposite of the expression. (The expression could be rewritten as &lt;code&gt; print 5, a != 7 and b == 7&lt;/code&gt;).  Here is the table:

{| class="wikitable"
!expression 
!result
|-
|&lt;code&gt;not&lt;/code&gt; true 
|false 
|-
|&lt;code&gt;not&lt;/code&gt; false 
|true
|}

The two following lines, &lt;code&gt;print 6, a == 7 or b == 7&lt;/code&gt; and &lt;code&gt;print 7, a == 7 or b == 6&lt;/code&gt;, use the &lt;code&gt;or&lt;/code&gt; operator.  The &lt;code&gt;or&lt;/code&gt; operator returns true if the first expression is true, or if the second expression is true or both are true.  If neither are true it returns false.  Here's the table:

{| class="wikitable"
!expression 
!result
|-  
|true &lt;code&gt;or&lt;/code&gt; true 
| true
|-
|true &lt;code&gt;or&lt;/code&gt; false 
|true
|-
|false &lt;code&gt;or&lt;/code&gt; true 
| true  
|-
|false &lt;code&gt;or&lt;/code&gt; false 
| false 
|}

Notice that if the first expression is true Python doesn't check the second expression since it knows the whole expression is true.  This works since &lt;code&gt;or&lt;/code&gt; is true if at least one half of the expression is true.  The first part is true so the second part could be either false or true, but the whole expression is still true.

The next two lines, &lt;code&gt;print 8, not (a == 7 and b == 6)&lt;/code&gt; and &lt;code&gt;print 9, not a == 7 and b == 6&lt;/code&gt;, show that parentheses can be used to group expressions and force one part to be evaluated first.  Notice that the parentheses changed the expression from false to true. This occurred since the parentheses forced the &lt;code&gt;not&lt;/code&gt; to apply to the whole expression instead of just the &lt;code&gt;a == 7&lt;/code&gt; portion.

Here is an example of using a boolean expression:
&lt;source lang="python"&gt;
list = ["Life", "The Universe", "Everything", "Jack", "Jill", "Life", "Jill"]

# make a copy of the list. See the More on Lists chapter to explain what [:] means.
copy = list[:]
# sort the copy
copy.sort()
prev = copy[0]
del copy[0]

count = 0

# go through the list searching for a match
while count &lt; len(copy) and copy[count] != prev:
    prev = copy[count]
    count = count + 1

# If a match was not found then count can't be &lt; len
# since the while loop continues while count is &lt; len
# and no match is found

if count &lt; len(copy):
    print "First Match:", prev
&lt;/source&gt;

And here is the output:

 First Match: Jill

This program works by continuing to check for match &lt;code&gt;while count &lt; len(copy) and copy[count] is not equal to prev&lt;/code&gt;.  When either &lt;code&gt;count&lt;/code&gt; is greater than the last index of &lt;code&gt;copy&lt;/code&gt; or a match has been found the &lt;code&gt;and&lt;/code&gt; is no longer true so the loop exits.  The &lt;code&gt;if&lt;/code&gt; simply checks to make sure that the &lt;code&gt;while&lt;/code&gt; exited because a match was found.  

The other "trick" of &lt;code&gt;and&lt;/code&gt; is used in this example.  If you look at the table for &lt;code&gt;and&lt;/code&gt; notice that the third entry is "false and won't check".   If &lt;code&gt;count &gt;= len(copy)&lt;/code&gt; (in other words &lt;code&gt;count &lt; len(copy)&lt;/code&gt; is false) then &lt;code&gt;copy[count]&lt;/code&gt; is never looked at.  This is because Python knows that if the first is false then they can't both be true.  This is known as a short circuit and is useful if the second half of the &lt;code&gt;and&lt;/code&gt; will cause an error if something is wrong.  I used the first expression (&lt;code&gt;count &lt; len(copy)&lt;/code&gt;) to check and see if &lt;code&gt;count&lt;/code&gt; was a valid index for &lt;code&gt;copy&lt;/code&gt;.  (If you don't believe me remove the matches "Jill" and "Life", check that it still works and then reverse the order of &lt;code&gt;count &lt; len(copy) and copy[count] != prev&lt;/code&gt; to &lt;code&gt;copy[count] != prev and count &lt; len(copy)&lt;/code&gt;.)

Boolean expressions can be used when you need to check two or more different things at once.

=== A note on Boolean Operators ===
A common mistake for people new to programming is a misunderstanding of the way that boolean operators works, which stems from the way the python interpreter reads these expressions.  For example, after initially learning about "and " and "or" statements, one might assume that the expression &lt;code&gt;x == ('a' or 'b')&lt;/code&gt; would check to see if the variable &lt;code&gt;x&lt;/code&gt; was equivalent to one of the strings &lt;code&gt;'a'&lt;/code&gt; or &lt;code&gt;'b'&lt;/code&gt;.  This is not so.  To see what I'm talking about, start an interactive session with the interpreter and enter the following expressions:

 &gt;&gt;&gt; 'a' == ('a' or 'b')
 &gt;&gt;&gt; 'b' == ('a' or 'b')
 &gt;&gt;&gt; 'a' == ('a' and 'b')
 &gt;&gt;&gt; 'b' == ('a' and 'b')

And this will be the unintuitive result:

 &gt;&gt;&gt;''' 'a' == ('a' or 'b')'''
 True
 &gt;&gt;&gt;''' 'b' == ('a' or 'b')'''
 False
 &gt;&gt;&gt;''' 'a' == ('a' and 'b')'''
 False 
 &gt;&gt;&gt;''' 'b' == ('a' and 'b')'''
 True

At this point, the &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operators seem to be broken.  It doesn't make sense that, for the first two expressions, &lt;code&gt;'a'&lt;/code&gt; is equivalent to &lt;code&gt;'a'&lt;/code&gt; or &lt;code&gt;'b'&lt;/code&gt; while &lt;code&gt;'b'&lt;/code&gt; is not.  Furthermore, it doesn't make any sense that 'b' is equivalent to &lt;code&gt;'a'&lt;/code&gt; and &lt;code&gt;'b'&lt;/code&gt;.  After examining what the interpreter does with boolean operators, these results do in fact exactly what you are asking of them, it's just not the same as what you think you are asking.

When the Python interpreter looks at an &lt;code&gt;or&lt;/code&gt; expression, it takes the first statement and checks to see if it is true. If the first statement is true, then Python returns that object's value without checking the second statement.  This is because for an &lt;code&gt;or&lt;/code&gt; expression, the whole thing is true if one of the values is true; the program does not need to bother with the second statement. On the other hand, if the first value is evaluated as false Python checks the second half and returns that value. That second half determines the truth value of the whole expression since the first half was false.  This "laziness" on the part of the interpreter is called "short circuiting" and is a common way of evaluating boolean expressions in many programming languages.

Similarly, for an &lt;code&gt;and&lt;/code&gt; expression, Python uses a short circuit technique to speed truth value evaluation.  If the first statement is false then the whole thing must be false, so it returns that value.  Otherwise if the first value is true it checks the second and returns that value.

One thing to note at this point is that the boolean expression returns a value indicating &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, but that Python considers a number of different things to have a truth value assigned to them.  To check the truth value of any given object &lt;code&gt;x&lt;/code&gt;, you can use the function &lt;code&gt;bool(x)&lt;/code&gt; to see its truth value.  Below is a table with examples of the truth values of various objects:

{| class="wikitable"
|-
!True !!False
|-
|True ||False
|-
|1 ||0
|-
|Numbers other than zero ||The string 'None'
|-
|Nonempty strings ||Empty strings
|-
|Nonempty lists ||Empty lists 
|-
|Nonempty dictionaries ||Empty dictionaries
|}

Now it is possible to understand the perplexing results we were getting when we tested those boolean expressions before.  Let's take a look at what the interpreter "sees" as it goes through that code:

'''First case:'''
 &gt;&gt;&gt;''' 'a' == ('a' or 'b')'''  # Look at parentheses first, so evaluate expression "('a' or 'b')"
                            # 'a' is a nonempty string, so the first value is True
                            # Return that first value: 'a'
 &gt;&gt;&gt;''' 'a' == 'a' '''          # the string 'a' is equivalent to the string 'a', so expression is True
 True

'''Second case:'''
 &gt;&gt;&gt;''' 'b' == ('a' or 'b')'''  # Look at parentheses first, so evaluate expression "('a' or 'b')"
                            # 'a' is a nonempty string, so the first value is True
                            # Return that first value: 'a'
 &gt;&gt;&gt;''' 'b' == 'a' '''          # the string 'b' is not equivalent to the string 'a', so expression is False
 False 

'''Third case:'''
 &gt;&gt;&gt;''' 'a' == ('a' and 'b')''' # Look at parentheses first, so evaluate expression "('a' and 'b')"
                            # 'a' is a nonempty string, so the first value is True, examine second value
                            # 'b' is a nonempty string, so second value is True
                            # Return that second value as result of whole expression: 'b'
 &gt;&gt;&gt;''' 'a' == 'b' '''          # the string 'a' is not equivalent to the string 'b', so expression is False
 False

'''Fourth case:'''
 &gt;&gt;&gt;''' 'b' == ('a' and 'b')''' # Look at parentheses first, so evaluate expression "('a' and 'b')"
                            # 'a' is a nonempty string, so the first value is True, examine second value
                            # 'b' is a nonempty string, so second value is True
                            # Return that second value as result of whole expression: 'b'
 &gt;&gt;&gt;''' 'b' == 'b' '''          # the string 'b' is equivalent to the string 'b', so expression is True
 True 

So Python was really doing its job when it gave those apparently bogus results.  As mentioned previously, the important thing is to recognize what value your boolean expression will return when it is evaluated, because it isn't always obvious.  

Going back to those initial expressions, this is how you would write them out so they behaved in a way that you want:

 &gt;&gt;&gt;''' 'a' == 'a' or 'a' == 'b' '''
 True
 &gt;&gt;&gt;''' 'b' == 'a' or 'b' == 'b' '''
 True
 &gt;&gt;&gt;''' 'a' == 'a' and 'a' == 'b' '''
 False
 &gt;&gt;&gt; 'b' == 'a' and 'b' == 'b'
 False

When these comparisons are evaluated they return truth values in terms of True or False, not strings, so we get the proper results.

=== Examples ===
'''password1.py'''
&lt;source lang="python"&gt;
## This programs asks a user for a name and a password.
# It then checks them to make sure the user is allowed in.

name = raw_input("What is your name? ")
password = raw_input("What is the password? ")
if name == "Josh" and password == "Friday":
    print "Welcome Josh"
elif name == "Fred" and password == "Rock":
    print "Welcome Fred"
else:
    print "I don't know you."
&lt;/source&gt;

Sample runs

 What is your name? '''Josh'''
 What is the password? '''Friday'''
 Welcome Josh

 What is your name? '''Bill'''
 What is the password? '''Money'''
 I don't know you.

=== Exercises ===
Write a program that has a user guess your name, but they only get 3 chances 
to do so until the program quits.

{{Solution|title=Solution|text=

Write a program that has a user guess your name, but they only get 3 chances 
to do so until the program quits.

&lt;source lang="python"&gt;
print "Try to guess my name!"
count = 3
name = "Tony"
guess = raw_input("What is my name? ")
while count &gt; 1 and guess != name:
    print "You are wrong!"
    guess = raw_input("What is my name? ")
    count = count - 1

if guess != name:
    print "You are wrong!" # this message isn't printed in the third chance, so we print it now
    print "You ran out of chances."
    quit
else:
    print "Yes! My name is", name + "!"
&lt;/source&gt;

}}
{{Non-Programmer's Tutorial for Python 2.6/Navigation|For Loops|Dictionaries}}</text>
      <sha1>g7yi0ncpx5998314fgvyi27mk7i1vyb</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Count to 10</title>
    <ns>0</ns>
    <id>9932</id>
    <revision>
      <id>3652848</id>
      <parentid>3652847</parentid>
      <timestamp>2020-01-13T12:16:28Z</timestamp>
      <contributor>
        <username>Sotiale</username>
        <id>635914</id>
      </contributor>
      <minor/>
      <comment>[[WB:REVERT|Reverted]] edits by [[Special:Contributions/78.32.240.242|78.32.240.242]] ([[User talk:78.32.240.242|talk]]) to last version by WOSlinker</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7176" xml:space="preserve">=== While loops ===
Here we present our first ''control structure''.  Ordinarily, the computer starts with the first line and then goes down from there.  However, control structures change the order of how the statements are executed and/or decide if a certain statement(s) will be run.  Here's the source for a program that uses the &lt;code&gt;while&lt;/code&gt; control structure:
&lt;source lang="python"&gt;
a = 0
while a &lt; 10:
    a = a + 1
    print (a)
&lt;/source&gt;

And here is the extremely exciting output: 

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10

And you thought it couldn't get any worse after turning your computer into a five dollar calculator?

So what does the program do?  First, it sees the line &lt;code&gt;a = 0&lt;/code&gt; which tells the computer to sets &lt;code&gt;a&lt;/code&gt; to the value of zero. Then, it sees &lt;code&gt;while a &lt; 10:&lt;/code&gt; which tells the computer to check whether &lt;code&gt;a &lt; 10&lt;/code&gt;. The first time the computer sees this while statement, &lt;code&gt;a&lt;/code&gt; is equal to zero, which means &lt;code&gt;a&lt;/code&gt; is less than 10, so the computer proceeds to run the succeeding indented, or tabbed in, statements. After the last statement, &lt;code&gt;print (a)&lt;/code&gt;, within this while "loop" is run, the computer goes back up again to the &lt;code&gt;while a &lt; 10&lt;/code&gt; to check the current value of &lt;code&gt;a&lt;/code&gt;. In other words, as long as &lt;code&gt;a&lt;/code&gt; is less than ten, the computer will run the tabbed in statements. With &lt;code&gt;a = a + 1&lt;/code&gt; repeatedly adding one to &lt;code&gt;a&lt;/code&gt;, eventually the while loop makes &lt;code&gt;a&lt;/code&gt; equal to ten, and makes the &lt;code&gt;a &lt; 10&lt;/code&gt; no longer true. Reaching that point, the program will not run the indented lines any longer.

Always remember to put a colon ":" after the "while" statement!

Here is another example of the use of &lt;code&gt;while&lt;/code&gt;:
&lt;source lang="python"&gt;
a = 1
s = 0
print ('Enter Numbers to add to the sum.')
print ('Enter 0 to quit.')
while a != 0:
    print 'Current Sum:', s
    a = input('Number? ')
    s = s + a
print 'Total Sum =', round(s, 2)
&lt;/source&gt;

 Enter Numbers to add to the sum.
 Enter 0 to quit.
 Current Sum: 0
 Number? '''200'''
 Current Sum: 200
 Number? '''-15.25'''
 Current Sum: 184.75
 Number? '''-151.85'''
 Current Sum: 32.9
 Number? '''10.00'''
 Current Sum: 42.9
 Number? '''0'''
 Total Sum = 42.9

Notice how &lt;code&gt;print 'Total Sum =', s&lt;/code&gt; is only run at the end. The &lt;code&gt;while&lt;/code&gt; statement only affects the lines that are indented with whitespace. The &lt;code&gt;!=&lt;/code&gt; means "does not equal" so &lt;code&gt;"while a != 0:"&lt;/code&gt; means: "until &lt;code&gt;''a''&lt;/code&gt; is zero, run the tabbed statements that follow."  

==== Infinite loops ====
Now that we have while loops, it is possible to have programs that run forever. An easy way to do this is to write a program like this:
&lt;source lang="python"&gt;
while 1 == 1:
   print "Help, I'm stuck in a loop."
&lt;/source&gt;

The "&lt;tt&gt;==&lt;/tt&gt;" operator is used to test equality of the expressions on the two sides of the operator, just as "&lt;tt&gt;&amp;lt;&lt;/tt&gt;" was used for "less than" before (you will get a complete list of all comparison operators in the next chapter).

This program will output &lt;code&gt;Help, I'm stuck in a loop.&lt;/code&gt; until the heat death of the universe or until you stop it, because 1 will forever be equal to 1.  The way to stop it is to hit the Control (or ''Ctrl'') button and ''C'' (the letter) at the same time.  This will kill the program.  (Note: sometimes you will have to hit enter after the Control-C.)

=== Examples ===
'''Fibonacci.py'''
&lt;source lang="python"&gt;
# This program calculates the Fibonacci sequence
a = 0
b = 1
count = 0
max_count = 20
while count &lt; max_count:
    count = count + 1
    # we need to keep track of a since we change it
    old_a = a
    old_b = b
    a = old_b
    b = old_a + old_b
    # Notice that the , at the end of a print statement keeps it
    # from switching to a new line
    print(old_a),
&lt;/source&gt;

Output:

 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181

Note the output on a single line by use of a comma at the end of the &lt;code&gt;print&lt;/code&gt; statement.

'''Password.py'''
&lt;source lang="python"&gt;
# Waits until a password has been entered.  Use Control-C to break out without
# the password

# Note that this must not be the password so that the 
# while loop runs at least once.
password = "no password"

# note that != means not equal
while password != "unicorn":
    password = raw_input("Password: ")
print "Welcome in"
&lt;/source&gt;

Sample run:
 Password: '''auo'''
 Password: '''y22'''
 Password: '''password'''
 Password: '''open sesame'''
 Password: '''unicorn'''
 Welcome in

=== Exercises ===
Write a program that asks the user for a Login Name and password.  Then when they type "lock", they need to type in their name and password to unlock the program.
{{Solution|title=Solution|text=

Write a program that asks the user for a Login Name and password.  Then when they type "lock", they need to type in their name and password to unlock the program.
&lt;source lang="python"&gt;
name = raw_input("What is your UserName: ")
password = raw_input("What is your Password: ")
print "To lock your computer type lock."
command = ""
input1 = ""
input2 = ""
while command != "lock":
    command = raw_input("What is your command: ")
while input1 != name:
    input1 = raw_input("What is your username: ")
while input2 != password:
    input2 = raw_input("What is your password: ")
print "Welcome back to your system!"
&lt;/source&gt;

If you would like the program to run continuously, just add a &lt;code&gt;while 1 == 1:&lt;/code&gt; loop around the whole thing.
You will have to indent the rest of the program when you add this at the top of the code, but don't worry, you don't have to do it manually for each line! Just highlight everything you want to indent and click on "Indent" under "Format" in the top bar of the python window. Note that you can use empty strings like this: &lt;code&gt;""&lt;/code&gt;.

Another way of doing this could be:

&lt;source lang="python"&gt;
name = raw_input('Set name: ')
password = raw_input('Set password: ')
while 1 == 1:
    nameguess=passwordguess=key=""   # multiple assignment
    while (nameguess != name) or (passwordguess != password):
        nameguess = raw_input('Name? ')
        passwordguess = raw_input('Password? ')
    print "Welcome,", name, ". Type lock to lock."
    while key != "lock":
        key = raw_input("")
&lt;/source&gt;

Notice the &lt;code&gt;or&lt;/code&gt; in while &lt;code&gt;(name != "user") or (password != "pass"):&lt;/code&gt;, which we haven't yet introduced. You can probably figure out how it works.

&lt;source lang="python"&gt;
login = "john"
password = "tucker"
logged=2

while logged != 0:
    while login != "Phil":    
            login = raw_input("Login : ")
    while password != "McChicken":
            password = raw_input("Password: ")
    logged = 1

    print "Welcome!"
    print "To leave type lock "

    while logged == 1:
        leave = raw_input ("&gt;&gt; ")
        if leave == "lock":
            logged = 0
print "Goodbye!!"
&lt;/source&gt;

This method, although a bit more crude also works. Notice it uses the as of yet un-introduced &lt;code&gt;if&lt;/code&gt; function. 
}}

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Who Goes There?|Decisions}}</text>
      <sha1>5izu911377gnvaarzqoq365733dtrd8</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Dealing with the imperfect</title>
    <ns>0</ns>
    <id>10030</id>
    <revision>
      <id>3442624</id>
      <parentid>2561087</parentid>
      <timestamp>2018-07-15T03:30:30Z</timestamp>
      <contributor>
        <username>Holdoffhunger</username>
        <id>2983037</id>
      </contributor>
      <comment>Remove double "the."</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5503" xml:space="preserve">=== ...or how to handle errors ===

So you now have the perfect program, it runs flawlessly, except for one detail, it will crash on invalid user input.  Have no fear, for Python has a special control structure for you.  It's called &lt;code&gt;try&lt;/code&gt; and it tries to do something.  Here is an example of a program with a problem:
&lt;source lang="python"&gt;
print "Type Control C or -1 to exit"
number = 1
while number != -1:
    number = int(raw_input("Enter a number: "))
    print "You entered:", number
&lt;/source&gt;

Notice how when you enter &lt;code&gt;@#&amp;&lt;/code&gt; it outputs something like:

 Traceback (innermost last):
  File "try_less.py", line 4, in ?
     number = int(raw_input("Enter a number: "))&lt;/source&gt;
 
 ValueError: invalid literal for int(): @#&amp;

As you can see the &lt;code&gt;int()&lt;/code&gt; function is unhappy with the number &lt;code&gt;@#&amp;&lt;/code&gt; (as well it should be).  The last line shows what the problem is; Python found a &lt;code&gt;ValueError&lt;/code&gt;.   How can our program deal with this?  What we do is first: put the place where the errors occurs in a &lt;code&gt;try&lt;/code&gt; block, and second: tell Python how we want &lt;code&gt;ValueError&lt;/code&gt;s handled.  The following program does this:
&lt;source lang="python"&gt;
print "Type Control C or -1 to exit"
number = 1
while number != -1:
    try:
        number = int(raw_input("Enter a number: "))
        print "You entered:", number
    except ValueError:
        print "That was not a number."
&lt;/source&gt;

Now when we run the new program and give it &lt;code&gt;@#&amp;&lt;/code&gt; it tells us "That was not a number." and continues with what it was doing before.

When your program keeps having some error that you know how to handle, put code in a &lt;code&gt;try&lt;/code&gt; block, and put the way to handle the error in the &lt;code&gt;except&lt;/code&gt; block.

Here is a more complex example of Error Handling.
&lt;source lang="python"&gt;
# Program by Mitchell Aikens 2012
# No copyright.
import math

def main():
	success = 0
	while (success == 0):
		try:
			epact()
			success = 1
		except ValueError:
			print "Error. Please enter an integer value."
			year = 0
		except NameError:
			print "Error. Please enter an integer value."
			year = 0
		except SyntaxError:
			print "Error. Please enter an integer value."
			year = 0
		finally:
			print "Program Complete"

def epact():
    
    year = int(input("What year is it?\n"))
    C = year/100
    epactval = (8 + (C/4) - C + ((8*C + 13)/25) + 11 * (year%19))%30
    print "The Epact is: ",epactval

main()
&lt;/source&gt;

The program above uses concepts from previous lessons as well as the current lesson.
Let's look at the above program in sections.

After we define the function called "main", we tell it that we want to "try" function named "epact". It does so "while" there is no "success".   The interpreter then goes to the line &lt;code&gt;year = int(input("What year is it?\n"))&lt;/code&gt;.
The interpreter takes the value entered by the user and stores it in the variable named "year".

If the value entered is not an integer or a floating point number (which would be converted to an integer by the interpreter), an exception would be raised, and execution of the &lt;code&gt;try&lt;/code&gt; block ends, just before &lt;code&gt;success&lt;/code&gt; is assigned the value 1.

Let's look at some possible exceptions. the program above does not have an &lt;code&gt;except&lt;/code&gt; clause for every possible exception, as there are numerous types or exceptions.

If the value entered for year is an alphabetical character, a &lt;code&gt;NameError&lt;/code&gt; exception is raised. In the program above, this is caught by the &lt;code&gt;except NameError:&lt;/code&gt; line, and the interpreter executes the print statement below the &lt;code&gt;except NameError:&lt;/code&gt;, then it sets the value of "year" to 0 as a precaution, clearing it of any non-numeric number. The interpreter then jumps back to the first line of the &lt;code&gt;while&lt;/code&gt; loop, and the process restarts.

The process above would be the same for the other exceptions we have. If an exception is raised, and there is an except clause for it in our program, the interpreter will jump to the statements under the appropriate except clause, and execute them.

The &lt;code&gt;finally&lt;/code&gt; statement, is sometimes used in exception handling as well. 
Think of it as the trump card. Statements underneath the &lt;code&gt;finally&lt;/code&gt; clause will be executed regardless of if we raise and exception or not. The &lt;code&gt;finally&lt;/code&gt; statement will be executed after any &lt;code&gt;try&lt;/code&gt; or &lt;code&gt;except&lt;/code&gt; clauses prior to it. 

Below is a simpler example where we are not looped, and the &lt;code&gt;finally&lt;/code&gt; clause is executed regardless of exceptions.
&lt;source lang="python"&gt;
#Program By Mitchell Aikens 2012
#Not copyright.

def main():
    try:
        number = int(input("Please enter a number.\n"))
        half = number/2
        print "Half of the number you entered is ",half
    except NameError:
        print "Error."
    except ValueError:
        print "Error."
    except SyntaxError:
        print "Error."
    finally:
        print "I am executing the finally clause."
        
main()
&lt;/source&gt;

If we were to enter an alphabetic value for &lt;code&gt;number = int(input("Please enter a number.\n"))&lt;/code&gt;, the output would be as follows:

 Please enter a number.
 t
 Error.
 I am executing the finally clause.

=== Exercises ===
Update at least the phone numbers program (in section [[../File IO/]]) so it doesn't crash if a user doesn't enter any data at the menu.

{{Template:Non-Programmer's Tutorial for Python 2.6/Navigation|File IO|The End}}</text>
      <sha1>1x3jij3u8q4xzrzaj43nbyl75e46guv</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Debugging</title>
    <ns>0</ns>
    <id>9934</id>
    <revision>
      <id>2621057</id>
      <parentid>2568129</parentid>
      <timestamp>2014-03-25T16:56:47Z</timestamp>
      <contributor>
        <username>Fishpi</username>
        <id>366400</id>
      </contributor>
      <comment>Rejected the last text change (by [[Special:Contributions/142.204.141.54|142.204.141.54]]) and restored revision 1805114 by Adrignola</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10002" xml:space="preserve">=== What is debugging? ===
:"As soon as we started programming, we found to our surprise that it wasn't as easy  to get programs right as we had thought.  Debugging had to be discovered.  I can remember the exact instant when I realized that a large part of my life from then on was going to be spent in finding mistakes in my own programs." &amp;mdash; ''Maurice Wilkes discovers debugging'', 1949

By now if you have been messing around with the programs you have probably found that sometimes the program does something you didn't want it to do.  This is fairly common.  Debugging is the process of figuring out what the computer is doing and then getting it to do what you want it to do.  This can be tricky.  I once spent nearly a week tracking down and fixing a bug that was caused by someone putting an &lt;code&gt;x&lt;/code&gt; where a &lt;code&gt;y&lt;/code&gt; should have been.  

This chapter will be more abstract than previous chapters.

=== What should the program do? ===

The first thing to do (this sounds obvious) is to figure out what the
program should be doing if it is running correctly.  Come up with some
test cases and see what happens.  For example, let's say I have a
program to compute the perimeter of a rectangle (the sum of the length
of all the edges).  I have the following test cases:

{| class="wikitable"
|-
!height !! width !!perimeter
|-
|3 ||4 ||14
|--
|2 ||3 ||10
|-
|4 ||4 ||16
|-
|2 ||2 ||8
|-
|5 ||1 ||12
|-
|}

I now run my program on all of the test cases and see if the program does what 
I expect it to do.  If it doesn't then I need to find out what the computer is
doing.

More commonly some of the test cases will work and some will not.  If that is the case you should try and figure out what the working ones have in common. 
For example here is the output for a perimeter program (you get to see the code in a minute):

 Height: '''3'''
 Width: '''4'''
 perimeter = 15

 Height: '''2'''
 Width: '''3'''
 perimeter = 11

 Height: '''4'''
 Width: '''4'''
 perimeter = 16

 Height: '''2'''
 Width: '''2'''
 perimeter = 8

 Height: '''5'''
 Width: '''1'''
 perimeter = 8

Notice that it didn't work for the first two inputs, it worked for the next
two and it didn't work on the last one.  Try and figure out what is in common 
with the working ones.  Once you have some idea what the problem is finding the
cause is easier.  With your own programs you should try more test cases if you need them.

=== What does the program do? ===

The next thing to do is to look at the source code.  One of the most important things to do while programming is reading source code.  The primary way to do this is code walkthroughs.  

A code walkthrough starts at the first line, and works its way down until the program is done.  &lt;code&gt;While&lt;/code&gt; loops and &lt;code&gt;if&lt;/code&gt; statements mean that some lines may never be run and some lines are run many times.  At each line you figure out what Python has done.

Lets start with the simple perimeter program.  Don't type it in, you are going to read it, not run it.  The source code is:

&lt;source lang="python"&gt;
height = input("Height: ")
width = input("Width: ")
print "perimeter =", width + height + width + width
&lt;/source&gt;

; ''Question:'' What is the first line Python runs?
: ''Answer:'' The first line is always run first.  In this case it is: &lt;code&gt;height = input("Height: ")&lt;/code&gt;
; What does that line do?
: Prints &lt;code&gt; Height: &lt;/code&gt;, waits for the user to type a number in, and puts that in the variable height.
; What is the next line that runs?
: In general, it is the next line down which is: &lt;code&gt;width = input("Width: ")&lt;/code&gt;
; What does that line do?
: Prints &lt;code&gt;Width: &lt;/code&gt;, waits for the user to type a number in, and puts what the user types in the variable width.
; What is the next line that runs?
: When the next line is not indented more or less than the current line, it is the line right afterwards, so it is: &lt;code&gt;print "perimeter = ", width + height + width + width&lt;/code&gt; (It may also run a function in the current line, but that's a future chapter.)                                                                        What does that line do?
: First it prints &lt;code&gt;perimeter = &lt;/code&gt;, then it prints &lt;code&gt;width + height + width + width&lt;/code&gt;.
; Does &lt;code&gt;width + height + width + width&lt;/code&gt; calculate the perimeter properly?
: Let's see, perimeter of a rectangle is the bottom (width) plus the left side (height) plus the top (width) plus the right side (huh?). The last item should be the right side's length, or the height.
; Do you understand why some of the times the perimeter was calculated "correctly"?                                                                             : It was calculated correctly when the width and the height were equal.

The next program we will do a code walkthrough for is a program that is supposed to print out 5 dots on the screen.  However, this is what the program is outputting:

 . . . . 

And here is the program:
&lt;source lang="python"&gt;
number = 5
while number &gt; 1:
    print ".",
    number = number - 1
print
&lt;/source&gt;

This program will be more complex to walkthrough since it now has indented portions (or control structures).  Let us begin.
; What is the first line to be run?
: The first line of the file: &lt;code&gt;number = 5&lt;/code&gt;
; What does it do?
: Puts the number 5 in the variable number.
; What is the next line?
: The next line is: &lt;code&gt;while number &gt; 1:&lt;/code&gt;
; What does it do?
: Well, &lt;code&gt;while&lt;/code&gt; statements in general look at their expression, and if it is true they do the next indented block of code, otherwise they skip the next indented block of code.
; So what does it do right now?
: If &lt;code&gt;number &gt; 1&lt;/code&gt; is true then the next two lines will be run.
; So is &lt;code&gt;number &gt; 1&lt;/code&gt;?
: The last value put into &lt;code&gt;number&lt;/code&gt; was &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;5 &gt; 1&lt;/code&gt; so yes.
; So what is the next line?
: Since the &lt;code&gt; while&lt;/code&gt; was true the next line is: &lt;code&gt;print ".",&lt;/code&gt;
; What does that line do?
: Prints one dot and since the statement ends with a ',' the next print statement will not be on a different screen line.
; What is the next line?
: &lt;code&gt;number = number - 1&lt;/code&gt; since that is following line and there are no indent changes.
; What does it do?
: It calculates &lt;code&gt;number - 1&lt;/code&gt;, which is the current value of &lt;code&gt;number&lt;/code&gt; (or 5) subtracts 1 from it, and makes that the new value of number.  So basically it changes &lt;code&gt; number&lt;/code&gt;'s value from 5 to 4.
; What is the next line?
: Well, the indent level decreases so we have to look at what type of control structure it is.  It is a &lt;code&gt;while&lt;/code&gt; loop, so we have to go back to the &lt;code&gt;while&lt;/code&gt; clause which is &lt;code&gt;while number &gt; 1:&lt;/code&gt;
; What does it do?
: It looks at the value of number, which is 4, and compares it to 1 and since &lt;code&gt;4 &gt; 1&lt;/code&gt; the while loop continues.
; What is the next line?
: Since the while loop was true, the next line is: &lt;code&gt;print ".",&lt;/code&gt;
; What does it do?
: It prints a second dot on the line.
; What is the next line?
: No indent change so it is: &lt;code&gt;number = number - 1&lt;/code&gt;
; And what does it do?
: It takes the current value of number (4), subtracts 1 from it, which gives it 3 and then finally makes 3 the new value of number.
; What is the next line?
: Since there is an indent change caused by the end of the while loop, the next line is: &lt;code&gt;while number &gt; 1:&lt;/code&gt;
; What does it do?
: It compares the current value of number (3) to 1. &lt;code&gt;3 &gt; 1&lt;/code&gt; so the while loop continues.
; What is the next line?
: Since the while loop condition was true the next line is: &lt;code&gt;print ".",&lt;/code&gt;
; And it does what?
: A third dot is printed on the line.
; What is the next line?
: It is: &lt;code&gt;number = number - 1&lt;/code&gt;
; What does it do?
: It takes the current value of number (3) subtracts from it 1 and makes the 2 the new value of number.
; What is the next line?
: Back up to the start of the while loop: &lt;code&gt;while number &gt; 1:&lt;/code&gt;
; What does it do?
: It compares the current value of number (2) to 1.  Since &lt;code&gt;2 &gt; 1&lt;/code&gt; the while loop continues.
; What is the next line?
: Since the while loop is continuing: &lt;code&gt;print ".",&lt;/code&gt;
; What does it do?
: It discovers the meaning of life, the universe and everything.  I'm joking. (I had to make sure you were awake.)  The line prints a fourth dot on the screen.
; What is the next line?
: It's: &lt;code&gt;number = number - 1&lt;/code&gt;
; What does it do?
: Takes the current value of number (2) subtracts 1 and makes 1 the new value of number.
; What is the next line?
: Back up to the while loop: &lt;code&gt;while number &gt; 1:&lt;/code&gt;
; What does the line do?
: It compares the current value of number (1) to 1. Since &lt;code&gt;1 &gt; 1&lt;/code&gt; is false (one is not greater than one), the while loop exits.
; What is the next line?
: Since the while loop condition was false the next line is the line after the while loop exits, or: &lt;code&gt;print&lt;/code&gt;
; What does that line do?
: Makes the screen go to the next line.
; Why doesn't the program print 5 dots?
: The loop exits 1 dot too soon.
; How can we fix that?
: Make the loop exit 1 dot later.
; And how do we do that?
: There are several ways.  One way would be to change the while loop to: &lt;code&gt;while number &gt; 0:&lt;/code&gt;  Another way would be to change the conditional to: &lt;code&gt;number &gt;= 1&lt;/code&gt;  There are a couple others.

=== How do I fix the program? ===

You need to figure out what the program is doing.  You need to figure out what the program should do.  Figure out what the difference between the two is.  Debugging is a skill that has to be practiced to be learned. If you can't figure it out after an hour, take a break, talk to someone about the problem or contemplate the lint in your navel.  Come back in a while and you will probably have new ideas about the problem.  Good luck.

&lt;!-- TODO:  add code walkthrough for dots.py --&gt;

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Decisions|Defining Functions}}</text>
      <sha1>oiyl9zxmd6x20cpiy0m86yhqg18bkjr</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Decisions</title>
    <ns>0</ns>
    <id>9933</id>
    <revision>
      <id>3328748</id>
      <parentid>3323756</parentid>
      <timestamp>2017-11-16T05:31:14Z</timestamp>
      <contributor>
        <ip>2001:48F8:4052:A77:A10E:C5E3:B:2E54</ip>
      </contributor>
      <comment>/* If statement */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8090" xml:space="preserve">=== If statement ===
As always I believe I should start each chapter with a warm-up typing exercise, so here is a short program to compute the absolute value of a number:
&lt;source lang="python"&gt;
n = int(input("Type in a number: "))
if n &lt; 0:
   print('The absolute value of', int(n), 'is: ', abs(-n))
else:
   print('The absolute value of', int(n), 'is: ', abs(n))
&lt;/source&gt;

Here is the output from the two times that I ran this program:

 Type in a number: -14
 The absolute value of -14 is:  14

 Type in a number: 24
 The absolute value of 24 is:  24

So what does the computer do when it sees this piece of code?  First it prompts the user for a number with the statement "&lt;code&gt;n = input("Number? ")&lt;/code&gt;".  Next it reads the line "&lt;code&gt;if n &lt; 0:&lt;/code&gt;". If &lt;code&gt;n&lt;/code&gt; is less than zero Python runs the line "&lt;code&gt;print('The absolute value of', int(n), 'is: ', abs(-n))&lt;/code&gt;". Otherwise it runs the line "&lt;code&gt;print('The absolute value of', int(n), 'is: ', abs(n))&lt;/code&gt;".  

More formally Python looks at whether the ''expression'' &lt;code&gt;n &lt; 0&lt;/code&gt; is true or false.  An &lt;code&gt;if&lt;/code&gt; statement is followed by an indented ''block'' of statements that are run when the expression is true.  Optionally after the &lt;code&gt;if&lt;/code&gt; statement is an &lt;code&gt;else&lt;/code&gt; statement and another indented ''block'' of statements.  This second block of statements is run if the expression is false.  

There are a number of different tests that an expression can have.  Here is a table of all of them:

{| class="wikitable"
!operator 
!function
|-
|&lt;code&gt;&lt;&lt;/code&gt; 
|less than
|-
|&lt;code&gt;&lt;=&lt;/code&gt; 
|less than or equal to
|-
|&lt;code&gt;&gt;&lt;/code&gt; 
|greater than
|-
|&lt;code&gt;&gt;=&lt;/code&gt; 
|greater than or equal to
|-
|&lt;code&gt;==&lt;/code&gt; 
|equal
|-
|&lt;code&gt;!=&lt;/code&gt; 
|not equal
|-
|&lt;code&gt;&lt;&gt;&lt;/code&gt; 
|another way to say not equal (old style, not recommended)
|}

Another feature of the &lt;code&gt; if&lt;/code&gt; command is the &lt;code&gt; elif &lt;/code&gt; statement.  It stands for else if and means if the original &lt;code&gt; if&lt;/code&gt; statement is false but the &lt;code&gt; elif&lt;/code&gt; part is true, then do the &lt;code&gt;elif&lt;/code&gt; part. And if neither the &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;elif&lt;/code&gt; expressions are true, then do what's in the &lt;code&gt;else&lt;/code&gt; block. Here's an example:
&lt;source lang="python"&gt;
a = 0
while a &lt; 10:
    a = a + 1
    if a &gt; 5:
        print a, "&gt;", 5
    elif a &lt;= 7:
        print a, "&lt;=", 7
    else:
        print "Neither test was true"
&lt;/source&gt;

and the output:

 1 &lt;= 7
 2 &lt;= 7
 3 &lt;= 7
 4 &lt;= 7
 5 &lt;= 7
 6 &gt; 5
 7 &gt; 5
 8 &gt; 5
 9 &gt; 5
 10 &gt; 5

Notice how the &lt;code&gt;elif a &lt;= 7&lt;/code&gt; is only tested when the &lt;code&gt;if&lt;/code&gt; statement fails to be true. There can be more than one &lt;code&gt;elif&lt;/code&gt; expression, allowing multiple tests to be done in a single &lt;code&gt;if&lt;/code&gt; statement.

=== Examples ===
&lt;source lang="python"&gt;
# This Program Demonstrates the use of the == operator
# using numbers
print 5 == 6
# Using variables
x = 5
y = 8
print x == y
&lt;/source&gt;

And the output

 False
 False

'''High_low.py'''&lt;!--\label{firsthighlow}--&gt;
&lt;source lang="python"&gt;
# Plays the guessing game higher or lower 

# This should actually be something that is semi random like the
# last digits of the time or something else, but that will have to
# wait till a later chapter.  (Extra Credit, modify it to be random
# after the Modules chapter)
number = 78
guess = 0

while guess != number: 
    guess = input("Guess a number: ")
    if guess &gt; number:
        print "Too high"
    elif guess &lt; number:
        print "Too low"

print "Just right"
&lt;/source&gt;

Sample run:

 Guess a number: '''100'''
 Too high
 Guess a number: '''50'''
 Too low
 Guess a number: '''75'''
 Too low
 Guess a number: '''87'''
 Too high
 Guess a number: '''81'''
 Too high
 Guess a number: '''78'''
 Just right

'''even.py'''
&lt;source lang="python"&gt;
# Asks for a number.
# Prints if it is even or odd

number = input("Tell me a number: ")
if number % 2 == 0:
    print number, "is even."
elif number % 2 == 1:
    print number, "is odd."
else:
    print number, "is very strange."
&lt;/source&gt;

Sample runs:

 Tell me a number: '''3'''
 3 is odd.

 Tell me a number: '''2'''
 2 is even.

 Tell me a number: '''3.14159'''
 3.14159 is very strange.

'''average1.py'''
&lt;source lang="python"&gt;
# keeps asking for numbers until 0 is entered.
# Prints the average value.

count = 0
sum = 0.0
number = 1 # set to something that will not exit the while loop immediately.

print "Enter 0 to exit the loop"

while number != 0:
    number = input("Enter a number: ")
    if number != 0:
        count = count + 1
        sum = sum + number

print "The average was:", sum / count
&lt;/source&gt;

Sample runs:

 Enter 0 to exit the loop
 Enter a number: '''3'''
 Enter a number: '''5'''
 Enter a number: '''0'''
 The average was: 4.0

 Enter 0 to exit the loop
 Enter a number: '''1'''
 Enter a number: '''4'''
 Enter a number: '''3'''
 Enter a number: '''0'''
 The average was: 2.66666666667

'''average2.py'''
&lt;source lang="python"&gt;
# keeps asking for numbers until count numbers have been entered.
# Prints the average value.

sum = 0.0

print "This program will take several numbers then average them"
count = input("How many numbers would you like to average: ")
current_count = 0

while current_count &lt; count:
    current_count = current_count + 1
    print "Number", current_count
    number = input("Enter a number: ")
    sum = sum + number

print "The average was:", sum / count
&lt;/source&gt;

Sample runs:

 This program will take several numbers then average them
 How many numbers would you like to average: '''2'''
 Number 1
 Enter a number: '''3'''
 Number 2
 Enter a number: '''5'''
 The average was: 4.0

 This program will take several numbers then average them
 How many numbers would you like to average: '''3'''
 Number 1
 Enter a number: '''1'''
 Number 2
 Enter a number: '''4'''
 Number 3
 Enter a number: '''3'''
 The average was: 2.66666666667
&lt;!-- TODO: add another example --&gt;

=== Exercises ===
# Modify the higher or lower program from this section to keep track of how many times the user has entered the wrong number.  If it is more than 3 times, print "That must have been complicated."  Note that the program does not have to quit asking for the number before it is guessed, it just has to print this after the number is guessed.  
# Write a program that asks for two numbers.  If the sum of the numbers is greater than 100, print "That is a big number."
# Write a program that asks the user their name, if they enter your name say "That is a nice name", if they enter "John Cleese" or "Michael Palin", tell them how you feel about them ;), otherwise tell them "You have a nice name."

{{Solution|title=Solution|text=

Modify the higher or lower program from this section to keep track of how many times the user has entered the wrong number.  If it is more than 3 times, print
"That must have been complicated."
&lt;source lang="python"&gt;
number = 42
guess = 0
count = 0
while guess != number:
    count = count + 1
    guess = input('Guess a number: ')
    if guess &gt; number:
        print 'Too high'
    elif guess &lt; number:
        print 'Too low'
    else:
        print 'Just right'
        break
    if count &gt; 2:
        print 'That must have been complicated.'
        break
&lt;/source&gt;

Write a program that asks for two numbers.  If the sum of the numbers 
is greater than 100, print "That is a big number."
&lt;source lang="python"&gt;
number1 = input('1st number: ')
number2 = input('2nd number: ')
if number1 + number2 &gt; 100:
    print 'That is a big number.'
&lt;/source&gt;

Write a program that asks the user their name, if they enter your name
say "That is a nice name", if they enter "John Cleese" or "Michael
Palin", tell them how you feel about them ;), otherwise tell them "You
have a nice name."
&lt;source lang="python"&gt;
name = raw_input('Your name: ')
if name == 'Ada':
    print 'That is a nice name.'
elif name == 'John Cleese' or name == 'Michael Palin':
    print '... some funny text.'
else:
    print 'You have a nice name.'
&lt;/source&gt;
}}

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Count to 10|Debugging}}</text>
      <sha1>3tw2aurmm5uw2ha0nwwqh7dtjw82lkm</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Defining Functions</title>
    <ns>0</ns>
    <id>9966</id>
    <revision>
      <id>3399388</id>
      <parentid>3122336</parentid>
      <timestamp>2018-04-02T07:52:39Z</timestamp>
      <contributor>
        <username>Joshuasevilla</username>
        <id>3140106</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11375" xml:space="preserve">=== Creating Functions ===
To start off this chapter I am going to give you an example of what you could do but shouldn't (so don't type it in):
&lt;source lang=python&gt;
a = 23
b = -23

if a &lt; 0:
    a = -a
if b &lt; 0:
    b = -b                         #Or use the command: elif (if+else)
if a == b:
    print "The absolute values of", a, "and", b, "are equal"
else:
    print "The absolute values of", a, "and", b, "are different"
&lt;/source&gt;

with the output being:

 The absolute values of 23 and 23 are equal

The program seems a little repetitive. Programmers hate to repeat things -- that's what computers are for, after all! (Note also that finding the absolute value changed the value of the variable, which is why it is printing out 23, and not -23 in the output.) Fortunately Python allows you to create functions to remove duplication.  Here is the rewritten example:    
&lt;source lang=python&gt;
def absolute_value(n):
    if n &lt; 0:
        n = -n
    return n

a = 23
b = -23

if absolute_value(a) == absolute_value(b):
    print "The absolute values of", a, "and", b, "are equal"
else:
    print "The absolute values of", a, "and", b, "are different"
&lt;/source&gt;

with the output being:

 The absolute values of 23 and -23 are equal

The key feature of this program is the &lt;code&gt;def&lt;/code&gt; statement. The &lt;code&gt;def&lt;/code&gt; keyword
(short for "define") starts a function definition. "&lt;code&gt;def&lt;/code&gt;" is followed by the name of the function "&lt;code&gt;absolute_value&lt;/code&gt;". Next, comes the single function parameter named, "&lt;code&gt;n&lt;/code&gt;". A parameter holds a value passed into the function from the program that "calls" the function. Parameters of a function in the &lt;code&gt;def&lt;/code&gt; statement, must be enclosed within a parenthesis. The value that is passed to a function parameter is called an argument. So for now, a parameter and argument points to the same thing. The block of indented statements after the "&lt;code&gt;:&lt;/code&gt;" are then executed whenever the function is used. The statements within the function continue to be run until either the indented statements end, or a "&lt;code&gt;return&lt;/code&gt;" statement is encountered. The &lt;code&gt;return&lt;/code&gt; statement returns a value back to the place where the function was called in the calling program.

Notice how the values of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are not changed. Functions can be used to repeat tasks that don't return values. Here are some examples:
&lt;source lang="python"&gt;
def hello():
    print "Hello"

def area(w, h):
    return w * h

def print_welcome(name):
    print "Welcome", name

hello()
hello()

print_welcome("Fred")
w = 4
h = 5
print "width =", w, "height =", h, "area =", area(w, h)
&lt;/source&gt;

with output being:

 Hello
 Hello
 Welcome Fred
 width = 4 height = 5 area = 20

That example shows some more stuff that you can do with functions. Notice that you can use one or more parameters, or none at all. Notice also that a function doesn't necessarily need to "return" a value, so a &lt;code&gt;return&lt;/code&gt; statement is optional.
&lt;!-- Functions can be used to eliminate repeat code. --&gt;

=== Variables in functions ===
When eliminating repeated code, you often notice that variables are repeated in the code. In Python, these are dealt with in a special way. So far, all variables we have seen are global variables. Functions work with a special type of variables called local variables. These variables only exist within the function and only while the function is running.  When a local variable has the same name as another variable (such as a global variable), the local variable hides the other. Sound confusing?  Well, these next examples (which are a bit contrived) should help clear things up.

&lt;source lang="python"&gt;
a = 4
 
def print_func():
    a = 17
    print "in  print_func a = ", a

print_func()
print "a = ", a,"which is global variable assigned prior to the function print_func"
&lt;/source&gt;

When run, we will receive an output of:

 in print_func a = 17
 a = 4 which is global variable assigned prior to the function print_func

Variable assignments inside a function do not override global variables, they exist only inside the function.  Even though &lt;code&gt;a&lt;/code&gt; was assigned a new value inside the function, this newly assigned value exists only within the &lt;code&gt;print_func&lt;/code&gt; function. After the function finishes running and the value of an &lt;code&gt;a&lt;/code&gt; variable is printed again, we see the value assigned to the global &lt;code&gt;a&lt;/code&gt; variable being printed.

===Complex example===

&lt;source lang="python"&gt;
a_var = 10
b_var = 15
c_var = 25

def a_func(a_var):
    print "in a_func a_var = ", a_var
    b_var = 100 + a_var
    d_var = 2 * a_var
    print "in a_func b_var = ", b_var
    print "in a_func d_var = ", d_var
    print "in a_func c_var = ", c_var
    return b_var + 10

c_var = a_func(b_var)

print "a_var = ", a_var
print "b_var = ", b_var
print "c_var = ", c_var
print "d_var = ", d_var
&lt;/source&gt;

The output is:
&lt;pre&gt;
 in a_func a_var =  15
 in a_func b_var =  115
 in a_func d_var =  30
 in a_func c_var =  25
 a_var =  10
 b_var =  15
 c_var =  125
 d_var = 
 
 Traceback (most recent call last):
  File "C:\Python24\def2", line 19, in -toplevel-
     print "d_var = ", d_var
 
 NameError: name 'd_var' is not defined
&lt;/pre&gt;
In this example the variables &lt;code&gt;a_var&lt;/code&gt;, &lt;code&gt;b_var&lt;/code&gt;, and &lt;code&gt;d_var&lt;/code&gt; are all local variables when they are inside the function &lt;code&gt;a_func&lt;/code&gt;. After the statement &lt;code&gt;return b_var + 10&lt;/code&gt; is run, they all cease to 
exist. The variable &lt;code&gt;a_var&lt;/code&gt; is "automatically" a local variable since it is a parameter named by the function definition. The variables &lt;code&gt;b_var&lt;/code&gt; and &lt;code&gt;d_var&lt;/code&gt; are local variables since they appear on the left of an equals sign within the function in the statements: &lt;code&gt;b_var = 100 + a_var&lt;/code&gt; and &lt;code&gt;d_var = 2 * a_var&lt;/code&gt;.

Inside of the function &lt;code&gt;a_var&lt;/code&gt; has no value assigned to it. When the function is called with &lt;code&gt;c_var = a_func(b_var)&lt;/code&gt;, 15 is assigned to &lt;code&gt;a_var&lt;/code&gt; since at that point in time &lt;code&gt;b_var&lt;/code&gt; is 15, making the 
call to the function &lt;code&gt;a_func(15)&lt;/code&gt;.  This ends up setting the value of &lt;code&gt;a_var&lt;/code&gt; to 15 when it is inside of &lt;code&gt;a_func&lt;/code&gt; function.

As you can see, once the function finishes running, the local variables &lt;code&gt;a_var&lt;/code&gt; and &lt;code&gt;b_var&lt;/code&gt; that had hidden the global variables of the same name are gone. Then the statement &lt;code&gt;print "a_var = ", a_var&lt;/code&gt; prints the 
value &lt;code&gt;10&lt;/code&gt; rather than the value &lt;code&gt;15&lt;/code&gt; since the local variable that hid the global variable is gone.  

Another thing to notice is the &lt;code&gt;NameError&lt;/code&gt; that happens at the end. This appears since the variable &lt;code&gt;d_var&lt;/code&gt; no longer exists since &lt;code&gt;a_func&lt;/code&gt; finished.  All the local variables are deleted when the function
exits. If you want to get something back from a function, then you will have to use &lt;code&gt;return&lt;/code&gt; statement within the function.

One last thing to notice is that the value of &lt;code&gt;c_var&lt;/code&gt; remains unchanged inside &lt;code&gt;a_func&lt;/code&gt; since it is not a parameter and it never appears on the left of an equals sign inside of the function &lt;code&gt;a_func&lt;/code&gt;. When a global variable is accessed inside a function, the function uses only value of the global variable but it cannot change the value assigned to the global variable outside the function.

Functions allow local variables that exist only inside the function and can hide other variables that are outside the function.

=== Examples ===
'''temperature2.py'''
&lt;source lang="python"&gt;
# converts temperature to fahrenheit or celsius

def print_options():
    print "Options:"
    print " 'p' print options"
    print " 'c' convert from celsius"
    print " 'f' convert from fahrenheit"
    print " 'q' quit the program"

def celsius_to_fahrenheit(c_temp):
    return 9.0 / 5.0 * c_temp + 32

def fahrenheit_to_celsius(f_temp):
    return (f_temp - 32.0) * 5.0 / 9.0

choice = "p"
while choice != "q":
    if choice == "c":
        temp = input("Celsius temperature: ")
        print "Fahrenheit:", celsius_to_fahrenheit(temp)
    elif choice == "f":
        temp = input("Fahrenheit temperature: ")
        print "Celsius:", fahrenheit_to_celsius(temp)
    elif choice == "p":
        print_options()
    choice = raw_input("option: ")
&lt;/source&gt;

Sample Run:

 Options:
  'p' print options
  'c' convert from celsius
  'f' convert from fahrenheit
  'q' quit the program
 option: '''c'''
 Celsius temperature: '''30''' 
 Fahrenheit: 86.0
 option: '''f'''
 Fahrenheit temperature: '''60'''
 Celsius: 15.5555555556
 option: '''q'''

'''area2.py'''
&lt;source lang="python"&gt;
# By Amos Satterlee
print
def hello():
    print 'Hello!'

def area(width, height):
    return width * height

def print_welcome(name):
    print 'Welcome,', name

name = raw_input('Your Name: ')
hello(),
print_welcome(name)
print
print 'To find the area of a rectangle,'
print 'enter the width and height below.'
print
w = input('Width: ')
while w &lt;= 0:
    print 'Must be a positive number'
    w = input('Width: ')

h = input('Height: ')
while h &lt;= 0:
    print 'Must be a positive number'
    h = input('Height: ')

print 'Width =', w, 'Height =', h, 'so Area =', area(w, h)
&lt;/source&gt;

Sample Run:

 Your Name: '''Josh'''
 Hello!
 Welcome, Josh
 
 To find the area of a rectangle,
 enter the width and height below.
 
 Width: '''-4'''
 Must be a positive number
 Width: '''4'''
 Height: '''3'''
 Width = 4 Height = 3 so Area = 12

=== Exercises ===
Rewrite the area2.py program from the Examples above to have a separate function for the area of a square, the area of a rectangle, and the area of a circle (&lt;code&gt;3.14 * radius ** 2&lt;/code&gt;). This program should include a menu interface.

{{Solution|title=Solution|text=

Rewrite the area2.py program from the Examples above to have a separate function for the area of a square, the area of a rectangle, and the area of a circle (&lt;code&gt;3.14 * radius ** 2&lt;/code&gt;). This program should include a menu interface.

&lt;source lang="python"&gt;
def square(length):
    return length * length

def rectangle(width , height):
    return width * height

def circle(radius):
    return 3.14 * radius ** 2

def options():
    print
    print "Options:"
    print "s = calculate the area of a square."
    print "c = calculate the area of a circle."
    print "r = calculate the area of a rectangle."
    print "q = quit"
    print

print "This program will calculate the area of a square, circle or rectangle."
choice = "x"
options()
while choice != "q":
    choice = raw_input("Please enter your choice: ")
    if choice == "s":
        length = input("Length of square: ")
        print "The area of this square is", square(length)
        options()
    elif choice == "c":
        radius = input("Radius of the circle: ")
        print "The area of the circle is", circle(radius)
        options()
    elif choice == "r":
        width = input("Width of the rectangle: ")
        height = input("Height of the rectangle: ")
        print "The area of the rectangle is", rectangle(width, height)
        options()
    elif choice == "q":
        print "",
    else:
        print "Unrecognized option."
        options()
&lt;/source&gt;
}}

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Debugging|Advanced Functions Example}}</text>
      <sha1>h15gype5qbodsqcjxv0obyqbcka3ea3</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Dictionaries</title>
    <ns>0</ns>
    <id>10024</id>
    <revision>
      <id>3583126</id>
      <parentid>3583091</parentid>
      <timestamp>2019-10-04T00:28:22Z</timestamp>
      <contributor>
        <username>Matiia</username>
        <id>1770740</id>
      </contributor>
      <minor/>
      <comment>[[WB:REVERT|Reverted]] edits by [[Special:Contributions/159.146.14.218|159.146.14.218]] ([[User talk:159.146.14.218|talk]]) to last version by 70.180.138.106</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11010" xml:space="preserve">This chapter is about dictionaries. If you open a dictionary, you should notice every entry consists of two parts, a word and the word's definition. The word is the key to finding out what a word means, and what the word means is considered the value for that key. In Python, dictionaries have keys and values. Keys are used to find values. Here is an example of a dictionary in use:

&lt;source lang="python"&gt;
def print_menu():
    print '1. Print Dictionary'
    print '2. Add definition'
    print '3. Remove word'
    print '4. Lookup word'
    print '5. Quit'
    print

words = {}
menu_choice = 0
print_menu()

while menu_choice != 5:
    menu_choice = input("Type in a number (1-5): ")
    if menu_choice == 1:
        print "Definitions:"
        for x in words.keys():
            print x, ": ", words[x]
        print
    elif menu_choice == 2:
        print "Add definition"
        name = raw_input("Word: ")
        means = raw_input("Definition: ")
        words[name] = means
    elif menu_choice == 3:
        print "Remove word"
        name = raw_input("Word: ")
        if name in words:
            del words[name]
            print name, " was removed."
        else:
            print name, " was not found."
    elif menu_choice == 4:
        print "Lookup Word"
        name = raw_input("Word: ")
        if name in words:
            print "The definition of ", name, " is: ", words[name]
        else:
            print "No definition for ", name, " was found."
    elif menu_choice != 5:
        print_menu()
&lt;/source&gt;

And here is my output:

 1. Print Dictionary
 2. Add definition
 3. Remove word
 4. Lookup word
 5. Quit
 
 Type in a number (1-5): '''2'''
 Add definition
 Word: '''Python'''
 Definition: '''A snake, a programming language, and a British comedy.'''
 Type in a number (1-5): '''2'''
 Add definition
 Word: '''Dictionary'''
 Definition: '''A book where words are defined.'''
 Type in a number (1-5): '''1'''
 Definitions:
 Python: A snake, a programming language, and a British comedy.
 Dictionary: A book where words are defined.
 
 Type in a number (1-5): '''4'''
 Lookup Word
 Word: '''Python'''
 The definition of Python is: A snake, a programming language, and a British comedy.
 Type in a number (1-5): '''3'''
 Remove Word
 Word: '''Dictionary'''
 Dictionary was removed.
 Type in a number (1-5): '''1'''
 Definitions:
 Python: A snake, a programming language, and a British comedy. 
 Type in a number (1-5): '''5'''

This program is similar to the name list from the earlier chapter on lists (note that lists use indexes and dictionaries don't).  Here's how the program works: 

* First the function &lt;code&gt;print_menu&lt;/code&gt; is defined. &lt;code&gt;print_menu&lt;/code&gt; just prints a menu that is later used twice in the program.
* Next comes the funny looking line &lt;code&gt;words = {}&lt;/code&gt;.  All that line does is tell Python that &lt;code&gt;words&lt;/code&gt; is a dictionary. 
* The next few lines just make the menu work.

&lt;source lang="python"&gt;
for x in words.keys():
    print x, ": ", words[x]
&lt;/source&gt;

* This goes through the dictionary and prints all the information. The function &lt;code&gt; words.keys()&lt;/code&gt; returns a list that is then used by the &lt;code&gt;for&lt;/code&gt; loop.  The list returned by &lt;code&gt;keys()&lt;/code&gt; is not in any particular order so if you want it in alphabetic order it must be sorted.  Similar to lists the statement &lt;code&gt;words[x]&lt;/code&gt; is used to access a specific member of the dictionary.  Of course in this case &lt;code&gt;x&lt;/code&gt; is a string. 
* Next the line &lt;code&gt;words[name] = means&lt;/code&gt; adds a word and definition to the dictionary.  If &lt;code&gt;name&lt;/code&gt; is already in the dictionary &lt;code&gt;means&lt;/code&gt; replaces whatever was there before.

&lt;source lang="python"&gt;
if name in words:
    del words[name]
&lt;/source&gt;

* See if name is in words and remove it if it is.  The expression &lt;code&gt;name in words&lt;/code&gt; returns true if &lt;code&gt;name&lt;/code&gt; is a key in &lt;code&gt;words&lt;/code&gt; but otherwise returns false.  The line &lt;code&gt;del words[name]&lt;/code&gt; removes the key &lt;code&gt;name&lt;/code&gt; and the value associated with that key.

&lt;source lang="python"&gt;
if name in words:
    print "The definition of ", name, " is: ", words[name]
&lt;/source&gt;

* Check to see if words has a certain key and if it does prints out the definition associated with it.
* Lastly if the menu choice is invalid it reprints the menu for your viewing pleasure.

&lt;!-- \label{firstgrades}--&gt;
A recap: Dictionaries have keys and values.  Keys can be strings or
numbers.  Keys point to values.  Values can be any type of variable
(including lists or even dictionaries (those dictionaries or lists of
course can contain dictionaries or lists themselves (scary right? :-)
)).  Here is an example of using a list in a dictionary:

&lt;source lang="python"&gt;
max_points = [25, 25, 50, 25, 100]
assignments = ['hw ch 1', 'hw ch 2', 'quiz   ', 'hw ch 3', 'test']
students = {'#Max': max_points}

def print_menu():
    print "1. Add student"
    print "2. Remove student"
    print "3. Print grades"
    print "4. Record grade"
    print "5. Print Menu"
    print "6. Exit"

def print_all_grades():
    print '\t',
    for i in range(len(assignments)):
        print assignments[i], '\t',
    print
    keys = students.keys()
    keys.sort()
    for x in keys:
        print x, '\t',
        grades = students[x]
        print_grades(grades)

def print_grades(grades):
    for i in range(len(grades)):
        print grades[i], '\t', '\t',
    print

print_menu()
menu_choice = 0
while menu_choice != 6:
    print
    menu_choice = input("Menu Choice (1-6): ")
    if menu_choice == 1:
        name = raw_input("Student to add: ")
        students[name] = [0] * len(max_points)
    elif menu_choice == 2:
        name = raw_input("Student to remove: ")
        if name in students:
            del students[name]
        else:
            print "Student:", name, "not found"
    elif menu_choice == 3:
        print_all_grades()
    elif menu_choice == 4:
        print "Record Grade"
        name = raw_input("Student: ")
        if name in students:
            grades = students[name]
            print "Type in the number of the grade to record"
            print "Type a 0 (zero) to exit"
            for i in range(len(assignments)):
                print i + 1, assignments[i], '\t',
            print
            print_grades(grades)
            which = 1234
            while which != -1:
                which = input("Change which Grade: ")
                which = which - 1
                if 0 &lt;= which &lt; len(grades):
                    grade = input("Grade: ")
                    grades[which] = grade
                elif which != -1:
                    print "Invalid Grade Number"
        else:
            print "Student not found"
    elif menu_choice != 6:
        print_menu()
&lt;/source&gt;

and here is a sample output:

 1. Add student
 2. Remove student
 3. Print grades
 4. Record grade
 5. Print Menu
 6. Exit
 
 Menu Choice (1-6): '''3'''
        hw ch 1         hw ch 2         quiz            hw ch 3         test 
 #Max    25              25              50              25              100 
 
 Menu Choice (1-6): '''5'''
 1. Add student
 2. Remove student
 3. Print grades
 4. Record grade
 5. Print Menu
 6. Exit
 
 Menu Choice (1-6): '''1'''
 Student to add: '''Bill'''
 
 Menu Choice (1-6): '''4'''
 Record Grade
 Student: '''Bill'''
 Type in the number of the grade to record
 Type a 0 (zero) to exit
 1   hw ch 1     2   hw ch 2     3   quiz        4   hw ch 3     5   test 
 0               0               0               0               0 
 Change which Grade: '''1'''
 Grade: '''25'''
 Change which Grade: '''2'''
 Grade: '''24'''
 Change which Grade: '''3'''
 Grade: '''45'''
 Change which Grade: '''4'''
 Grade: '''23'''
 Change which Grade: '''5'''
 Grade: '''95'''
 Change which Grade: '''0'''
 
 Menu Choice (1-6): '''3'''
        hw ch 1         hw ch 2         quiz            hw ch 3         test 
 #Max    25              25              50              25              100
 Bill    25              24              45              23              95 
 
 Menu Choice (1-6): '''6'''

Here's how the program works.  Basically the variable &lt;code&gt;students&lt;/code&gt; is
a dictionary with the keys being the name of the students and the
values being their grades.  The first two lines just create two lists.
The next line &lt;code&gt;students = {'#Max': max_points}&lt;/code&gt; creates a new
dictionary with the key {&lt;code&gt;#Max&lt;/code&gt;} and the value is set to be &lt;code&gt;[25, 25, 50, 25, 100]&lt;/code&gt;, since thats what &lt;code&gt;max_points&lt;/code&gt; was when the assignment is made (I use the key &lt;code&gt;#Max&lt;/code&gt; since &lt;code&gt;#&lt;/code&gt; is sorted
ahead of any alphabetic characters).  Next &lt;code&gt;print_menu&lt;/code&gt; is
defined.  Next the &lt;code&gt;print_all_grades&lt;/code&gt; function is defined in the
lines:
&lt;source lang="python"&gt;
def print_all_grades():
    print '\t',
    for i in range(len(assignments)):
        print assignments[i], '\t',
    print
    keys = students.keys()
    keys.sort()
    for x in keys:
        print x, '\t',
        grades = students[x]
        print_grades(grades)
&lt;/source&gt;

Notice how first the keys are gotten out of the &lt;code&gt;students&lt;/code&gt; dictionary with the &lt;code&gt;keys&lt;/code&gt; function in the line &lt;code&gt;keys = students.keys()&lt;/code&gt;.  &lt;code&gt;keys&lt;/code&gt; is a list so all the functions for lists can be used on it.  Next the keys are sorted in the line &lt;code&gt;keys.sort()&lt;/code&gt; since it is a list.  &lt;code&gt;for&lt;/code&gt; is used to go through all the keys. The grades are stored as a list inside the dictionary so the assignment &lt;code&gt;grades = students[x]&lt;/code&gt; gives &lt;code&gt;grades&lt;/code&gt; the list that is stored at the key &lt;code&gt;x&lt;/code&gt;.  The function &lt;code&gt;print_grades&lt;/code&gt; just prints a list and is defined a few lines later.

The later lines of the program implement the various options of the menu.  The line &lt;code&gt;students[name] = [0] * len(max_points)&lt;/code&gt; adds a student to the key of their name.  The notation &lt;code&gt;[0] * len(max_points)&lt;/code&gt; just creates a list of 0's that is the same length as the &lt;code&gt;max_points&lt;/code&gt; list.  

The remove student entry just deletes a student similar to the telephone book example.  The record grades choice is a little more complex.  The grades are retrieved in the line &lt;code&gt;grades = students[name]&lt;/code&gt; gets a reference to the grades of the student &lt;code&gt;name&lt;/code&gt;.  A grade is then recorded in the line &lt;code&gt;grades[which] = grade&lt;/code&gt;.  You may notice that &lt;code&gt;grades&lt;/code&gt; is never put back into the students dictionary (as in no &lt;code&gt;students[name] = grades&lt;/code&gt;).  The reason for the missing statement is that &lt;code&gt;grades&lt;/code&gt; is actually another name for &lt;code&gt;students[name]&lt;/code&gt; and so changing &lt;code&gt;grades&lt;/code&gt; changes &lt;code&gt;student[name]&lt;/code&gt;.  

Dictionaries provide a easy way to link keys to values.  This can be used to easily keep track of data that is attached to various keys.

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Boolean Expressions|Using Modules}}</text>
      <sha1>ci25srgktiznlj1p1kxfjvb8effwkhx</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/FAQ</title>
    <ns>0</ns>
    <id>10032</id>
    <revision>
      <id>3051979</id>
      <parentid>3051965</parentid>
      <timestamp>2016-02-29T16:13:44Z</timestamp>
      <contributor>
        <username>QuiteUnusual</username>
        <id>134830</id>
      </contributor>
      <comment>Rejected the last text change (by [[Special:Contributions/Natbeem|Natbeem]]) and restored revision 2208312 by 75.31.109.192</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19626" xml:space="preserve">; ''Question:'' Can't use programs with input. : ''Answer:'' If you are using IDLE then try using command line.  This problem seems to be fixed in IDLE 0.6 and newer.  If you are using an older version of IDLE try upgrading to Python 2.0 or newer.
; Is there a printable version? : Yes, see the next question.
; Is there a PDF or zipped version? : Yes, go to http://www.honors.montana.edu/~jjc/easytut for several different versions.  Note that this will not always be up to date with the Wikibooks version. The Wikibook can be printed from the [[../Print version|print version]].
; What is the tutorial written with? : Originally, LaTeX, see the &lt;code&gt;easytut.tex&lt;/code&gt; file.
; I can't type in programs of more than one line. : If the programs that you type in run as soon as you are typing them in, you need to edit a file instead of typing them in interactive mode. (Hint: interactive mode is the mode with the &lt;code&gt;&gt;&gt;&gt;&lt;/code&gt; prompt in front of it.)
; My question is not answered here. : Ask on the talk page.  Please post source code if at all relevant (even, (or maybe especially) if it doesn't work). Helpful things to include are what you were trying to do, what happened, what you expected to happen, error messages, version of Python, Operating System, and whether or not your cat was stepping on the keyboard. (The cat in my house has a fondness for space bars and control keys.)
; I want to read it in a different language. : There are several translations that I know of.  One is in Korean and is available at http://home.hanmir.com/~johnsonj/easytut/easytut.html. Another is in Spanish and at http://www.honors.montana.edu/~jjc/easytut/easytut_es/.  Another is in Italian and is available at http://www.python.it/doc/tut_begin/index.html. Another is in Greek and available at http://www.honors.montana.edu/~jjc/easytut/easytut_gr/. Several people have said they are doing a translation in other languages such as French, but I never heard back from them.  If you have done a translation or know of any translations, please either send it to me or send me a link.
; How do I make a GUI in Python? : You can use either TKinter at http://www.python.org/topics/tkinter/ or WXPython at http://www.wxpython.org/
; How do I make a game in Python? : The best method is probably to use PYgame at http://pygame.org/
; How do I make an executable from a Python program? : Short answer: Python is an interpreted language so that is impossible. Long answer is that something similar to an executable can be created by taking the Python interpreter and the file and joining them together and distributing that.  For more on that problem see http://www.python.org/cgi-bin/faqw.py?req=all#4.28. A project that does make executable python files is py2exe - see http://www.py2exe.org.
; I need help with the exercises : Hint, the password program requires two variables, one to keep track of the number of times the password was typed in, and another to keep track of the last password typed in. Also you can download solutions from http://www.honors.montana.edu/~jjc/easytut/ 
; What and when was the last thing changed?

* 2000-Dec-16, added error handling chapter.
* 2000-Dec-22, Removed old install procedure.
* 2001-Jan-16, Fixed bug in program, Added example and data to lists section.
* 2001-Apr-5,  Spelling, grammar, added another how to break programs, url fix for PDF version.
* 2001-May-13, Added chapter on debugging.
* 2001-Nov-11, Added exercises, fixed grammar, spelling, and hopefully improved explanations of some things.
* 2001-Nov-19, Added password exercise, revised references section.
* 2002-Feb-23, Moved 3 times password exercise, changed l to list in list examples question.  Added a new example to Decisions chapter, added two new exercises.
* 2002-Mar-14, Changed abs to my_abs since python now defines a abs function.
* 2002-May-15, Added a faq about creating an executable.  Added a comment from about the list example.  Fixed typos from Axel Kleiboemer.
* 2002-Jun-14, Changed a program to use while true instead of while 1 to be more clear.
* 2002-Jul-5, Rewrote functions chapter.  Modified fib program to hopefully be clearer.
* 2003-Jan-3, Added average examples to the decisions chapter.
* 2003-Jan-19, Added comment about value of a_var.  Fixed mistake in average2.py program.
* 2003-Sep-5, Changed idle instruction to Run-&gt;Run Module.
* 2004-Jun-1, Put on Wikibooks
* Since then all changes are visible through the Wikibooks version keeping system.
&lt;!----&gt;
&lt;!-- == Command Line Install == --&gt;
&lt;!--  --&gt;
&lt;!-- This is here purely for historical reasons.   --&gt;
&lt;!--  --&gt;
&lt;!-- === Running Python === --&gt;
&lt;!-- This section is somewhat vague since I am trying to explain how to run Python in general and not on a specific machine (though I am writing from a Unix viewpoint).  If you have a Microsoft(tm) Windows machine see the next section for details.  If you have a Macintosh see http://www.python.org for other documentation. --&gt;
&lt;!--  --&gt;
&lt;!-- First you should check to see if you can run Python in interactive mode.  To do this go to a command prompt and type &lt;code&gt; python&lt;/code&gt;.  If everything is working you should see something like this: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- Python 1.5.1 (#1, Dec 17 1998, 20:58:15)  [GCC 2.7.2.3] on linux2 --&gt;
&lt;!-- Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam --&gt;
&lt;!-- &gt;&gt;&gt; --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!-- The &lt;code&gt; &gt;&gt;&gt;&lt;/code&gt; is Python's way of telling you it is waiting for you to type something in.   --&gt;
&lt;!--  --&gt;
&lt;!-- If you did not get the &lt;code&gt; &gt;&gt;&gt;&lt;/code&gt; prompt then something is wrong.  Check and make sure that you properly installed Python.  Check to see that the python executable is in the path.   --&gt;
&lt;!--  --&gt;
&lt;!-- Once you got the Python interpreter running you can play around with it.  Here are some things you could try: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- &gt;&gt;&gt; 1+1 --&gt;
&lt;!-- 2 --&gt;
&lt;!-- &gt;&gt;&gt; 3*4+5  --&gt;
&lt;!-- 17 --&gt;
&lt;!-- &gt;&gt;&gt; a=12 --&gt;
&lt;!-- &gt;&gt;&gt; a      --&gt;
&lt;!-- 12 --&gt;
&lt;!-- &gt;&gt;&gt; "Hi" --&gt;
&lt;!-- 'Hi' --&gt;
&lt;!-- &gt;&gt;&gt;  --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!--  --&gt;
&lt;!-- To exit try typing Ctrl+Z or Ctrl+D or if neither of those works type &lt;code&gt;import sys; sys.exit(0)&lt;/code&gt;.  Next, how to run Python programs.  First you need create a Python program.  To do that you should type in the following in a text editor:\footnote{A text editor is just a program that edits text.  If you are in Windows I recommend that you use Notepad or Editpad (http://www.jgsoft.com).  If you are in Unix I recommend that you use a text editor that you are comfortable with (if you haven't found one yet use pico, ae, or (x)emacs (emacs has a very nice Python mode BTW)).  } --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- print "Hello, World!" --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!--  --&gt;
&lt;!-- Now save the file in some convenient location as hello.py.  Next go to directory with the file that you save the file in and type &lt;code&gt; python hello.py&lt;/code&gt;.  The screen should look something like this: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- &gt;python hello.py --&gt;
&lt;!-- Hello, World! --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!--  --&gt;
&lt;!-- If you get some error message check to make sure you saved the file in the right place.   --&gt;
&lt;!--  --&gt;
&lt;!-- From now on I will mainly give you programs to type in that you should save and then run.   --&gt;
&lt;!-- %%If you didn't get that and get some error message like bad command or filename or command not found then either Python is not installed or the Python interpreter is not in your path.  With Windows you need to have the python.exe file locate in your path.  For example, if python.exe is in the directory &lt;code&gt;C:\PROGRA~1\PYTHON\&lt;/code&gt; then if you add &lt;code&gt;PATH=C:\PROGRA~1\PYTHON\;%PATH%&lt;/code&gt; to the end of your &lt;code&gt;AUTOEXEC.BAT&lt;/code&gt; file the next time you reboot your computer python.exe will be found in your path.  For Unix find Python with locate and add the directory to the path (or move python). --&gt;
&lt;!--  --&gt;
&lt;!-- %%There, you now should be able to type in and run a Python program.  The later chapters will show you more about how to create a Python program. --&gt;
&lt;!--  --&gt;
&lt;!-- === Windows === --&gt;
&lt;!-- First install Python.  Then go to a command line which can be done one of two ways: Click ''' Start&gt;&gt;Programs&gt;&gt;MS-DOS Prompt''', or click ''' Start&gt;&gt;Run''', then type ''' command''' and hit ''' Enter'''. --&gt;
&lt;!--  --&gt;
&lt;!-- This will open up a DOS screen with a prompt that probably looks like this: --&gt;
&lt;!--  --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- C:\WINDOWS&gt;    --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!--  --&gt;
&lt;!-- Type ''' python''' and hit ''' Enter'''.  If you get &lt;code&gt; Bad command or file name&lt;/code&gt; then either you forgot to install Python or &lt;code&gt; python.exe&lt;/code&gt; is not in the &lt;code&gt; PATH&lt;/code&gt; variable (to see what the &lt;code&gt; PATH&lt;/code&gt; variable has in it type ''' PATH''').   --&gt;
&lt;!--  --&gt;
&lt;!-- To fix the problem click ''' Start&gt;&gt;Find&gt;&gt;Files or Folders''' and then look for a file ''' Named''' &lt;code&gt; python.exe&lt;/code&gt;.  If it is found then the problem is the &lt;code&gt; PATH&lt;/code&gt;, otherwise Python was not properly installed.   --&gt;
&lt;!--  --&gt;
&lt;!-- To fix the &lt;code&gt; PATH&lt;/code&gt; problem the directory that includes &lt;code&gt; python.exe&lt;/code&gt; needs to be added to &lt;code&gt; PATH&lt;/code&gt;.  The directory that &lt;code&gt; python&lt;/code&gt; is in is the folder that &lt;code&gt; Find&lt;/code&gt; shows to the left of the name.  If the whole name is not shown Right click on the python icon and go to ''' Properties'''.  The &lt;code&gt; Properties&lt;/code&gt; dialog will have a line called &lt;code&gt; Location:&lt;/code&gt; that shows the directory where &lt;code&gt; python.exe&lt;/code&gt; is at.  Next go to the command prompt and type in &lt;code&gt;PATH="C:\Location of Python\";%PATH%&lt;/code&gt;.  For Example: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- C:\WINDOWS&gt;python --&gt;
&lt;!-- Bad command or file name --&gt;
&lt;!--  --&gt;
&lt;!-- C:\WINDOWS&gt;PATH="C:\Programe Files\Python";%PATH% --&gt;
&lt;!--  --&gt;
&lt;!-- C:\WINDOWS&gt;python --&gt;
&lt;!-- Python 1.5.1 (#0, Apr 13 1998, 20:22:04) [MSC 32 bit (Intel)] on win32 --&gt;
&lt;!-- Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam --&gt;
&lt;!-- &gt;&gt;&gt; --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!-- Type Ctrl+Z to get out of interactive mode (i.e. hold down the Ctrl Key and then press down on the Z key at the same time, then release both.). --&gt;
&lt;!--  --&gt;
&lt;!-- Next type this program in a text editor (such as Notepad): --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- print "Hello, World!" --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!-- and save it in a convenient location such as &lt;code&gt;C:\python\hello.py&lt;/code&gt;. --&gt;
&lt;!--  --&gt;
&lt;!-- From here you need to change the path to the Python directory where you saved your first program.  The command to do this is (Hit Enter): --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- cd \python       --&gt;
&lt;!-- &lt;/source&gt;  --&gt;
&lt;!-- which should give you a prompt like: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- C:\Python&gt; --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!--  --&gt;
&lt;!-- Now you are ready to run your first program.  Just type python hello.py --&gt;
&lt;!--  --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- &gt;python hello.py --&gt;
&lt;!-- Hello, World! --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!--  --&gt;
&lt;!-- From now on in the tutorial I will assume that you know how to create and run programs. --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- === Longer Windows install === --&gt;
&lt;!-- %%\newcommand{\file}[1]{&lt;code&gt;#1&lt;/code&gt;} --&gt;
&lt;!-- %%\newcommand{\url}[1]{&lt;code&gt;#1&lt;/code&gt;} --&gt;
&lt;!--  --&gt;
&lt;!-- \subsection{Download Python} --&gt;
&lt;!--  --&gt;
&lt;!-- Download &lt;code&gt;py152.exe&lt;/code&gt; from [http://www.python.org/download/download\_windows.html http://www.python.org/download/download\_windows.html]   The file is located at [ftp://ftp.python.org/pub/python/win32/py152.exe ftp://ftp.python.org/pub/python/win32/py152.exe]   Download this file and save it to your computer. --&gt;
&lt;!--  --&gt;
&lt;!-- \subsection{Install Python} --&gt;
&lt;!--  --&gt;
&lt;!-- Run &lt;code&gt;py152.exe&lt;/code&gt; by double clicking on the executable.  This will start the Python installation process.  Use the defaults for the install.  The computer will restart after this is done. --&gt;
&lt;!--  --&gt;
&lt;!-- %%The Python installation creates a folder &lt;code&gt;Python 1.5&lt;/code&gt;.  Go to Start$\to$ Programs$\to$ Python~1.5 --&gt;
&lt;!--  --&gt;
&lt;!-- \subsection{Add Python to Path} --&gt;
&lt;!--  --&gt;
&lt;!-- The next step is to add the Python executable to the path.  The path specifies how DOS finds commands.  First you will find where the Python executable was installed.  Next create a &lt;code&gt;PATH&lt;/code&gt; command to tell DOS where to find Python.  Lastly add the &lt;code&gt;PATH&lt;/code&gt; command to the autoexec.bat so that it will be permanent.  The following tells how to do this. --&gt;
&lt;!--  --&gt;
&lt;!-- This is what you should do to add Python to the path. First get to an MS-DOS Prompt.  The way to get to a MS-DOS Prompt is go to Start$\to$Run.  When the Run dialog pops up type &lt;code&gt;command&lt;/code&gt; and press Enter (Note: don't type the ``quotation marks'', just type the stuff between them)  (Note two: type Enter after everything that I put in this &lt;code&gt;font&lt;/code&gt;).  A window titled MS-DOS Prompt should appear.   --&gt;
&lt;!--  --&gt;
&lt;!-- Type &lt;code&gt;cd \textbackslash{&lt;/code&gt;}.  The command &lt;code&gt;cd&lt;/code&gt; stands for change directory.  When &lt;code&gt;cd&lt;/code&gt; is followed by a &lt;code&gt;\textbackslash{&lt;/code&gt;} it means change to the root directory.  The &lt;code&gt;C:\textbackslash{&lt;/code&gt;&gt;} prompt tells you that you are in the root directory.  Once in the root directory the next task is to find Python.  --&gt;
&lt;!--  --&gt;
&lt;!-- Type &lt;code&gt;dir /s python.exe&lt;/code&gt;  This should give you some output like: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!--  --&gt;
&lt;!--  Volume in drive C is WIN 95 --&gt;
&lt;!--  Volume Serial Number is 283F-12D9 --&gt;
&lt;!--  --&gt;
&lt;!-- Directory of C:\Program Files\Python --&gt;
&lt;!--  --&gt;
&lt;!-- PYTHON   EXE         5,120  04-13-99 11:31a python.exe --&gt;
&lt;!--          1 file(s)          5,120 bytes --&gt;
&lt;!--  --&gt;
&lt;!-- Total files listed: --&gt;
&lt;!--          1 file(s)          5,120 bytes --&gt;
&lt;!--          0 dir(s)     344,498,176 bytes free --&gt;
&lt;!--  --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!-- The important part of this is the line: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- Directory of C:\Program Files\Python --&gt;
&lt;!-- &lt;/source&gt;  --&gt;
&lt;!-- which shows the directory that &lt;code&gt;python.exe&lt;/code&gt; is located in. This can be used to create a &lt;code&gt;PATH&lt;/code&gt; variable that allows &lt;code&gt;python&lt;/code&gt; to be run from anywhere on the system.  The syntax is  &lt;code&gt;PATH=\%PATH\%;"directory"&lt;/code&gt; where directory is the directory that &lt;code&gt;python.exe&lt;/code&gt; is in.  For this example the command is: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- PATH=%PATH%;"C:\Program Files\Python" --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!--  --&gt;
&lt;!-- Type this in at the DOS Prompt and then you should be able to run Python with the &lt;code&gt;python&lt;/code&gt; command.  If you did everything right you should see (version numbers and dates may be different): --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- Python 1.5.2 (#4, Dec 16 1999, 18:55:39)  [GCC 2.7.2.3] on Win 95 --&gt;
&lt;!-- Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam --&gt;
&lt;!-- &gt;&gt;&gt;  --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!-- If you get the &lt;code&gt;$&gt;&gt;&gt;$&lt;/code&gt; prompt you have gotten into Python.  Try typing in it &lt;code&gt;print "Hello"&lt;/code&gt;.  You should see &lt;code&gt;Hello&lt;/code&gt; printed.  Try tying &lt;code&gt;print 1+1&lt;/code&gt;.  You should see &lt;code&gt;2&lt;/code&gt; printed.  Type &lt;code&gt;Ctrl-Z&lt;/code&gt; (i.e. type z while holding down the Ctrl key) to get out of Python's interactive mode.   --&gt;
&lt;!--  --&gt;
&lt;!-- If there is some problem with the &lt;code&gt;PATH&lt;/code&gt; then you will see something like: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- C:\&gt;python --&gt;
&lt;!-- Bad command or file name --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!--  --&gt;
&lt;!-- Right now the change you made is only temporary.  To get Python to be in the &lt;code&gt;PATH&lt;/code&gt; every time the computer starts you need to add it to the &lt;code&gt;autoexec.bat&lt;/code&gt; file.  The &lt;code&gt;autoexec.bat&lt;/code&gt; file is run every time the computer starts.  To do this open the &lt;code&gt;autoexec.bat&lt;/code&gt; in a text editor like &lt;code&gt;notepad&lt;/code&gt;.  Type the command &lt;code&gt;notepad c:\textbackslash{&lt;/code&gt;autoexec.bat} on the DOS Prompt.  If you don't have a &lt;code&gt;autoexec.bat&lt;/code&gt; notepad will ask you if you want to create one (say yes).  Add the line that you used above (i.e. something like: &lt;code&gt;PATH=\%PATH\%;"C:\textbackslash{&lt;/code&gt;Program Files\textbackslash{}Python"}) to the &lt;code&gt;autoexec.bat&lt;/code&gt;.  Add the line as close to the bottom as you can, just don't add the line after a line that tells windows to load: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- PATH=%PATH%;"C:\Program Files\Python" --&gt;
&lt;!-- win --&gt;
&lt;!-- &lt;/source&gt;  --&gt;
&lt;!-- The &lt;code&gt;win&lt;/code&gt; loads Windows so I added the path line above it.  If you don't see a &lt;code&gt;win&lt;/code&gt; line add the path line to the end.  Save the &lt;code&gt;autoexec.bat&lt;/code&gt; file, reboot your computer and it should be install. --&gt;
&lt;!--  --&gt;
&lt;!-- When your computer boots again go to the DOS Prompt and try to run &lt;code&gt;python&lt;/code&gt; again to see if the change was successful. --&gt;
&lt;!--  --&gt;
&lt;!-- \subsection{Running Programs} --&gt;
&lt;!--  --&gt;
&lt;!-- Now that Python is set up we need to use it to run programs.  Go to a DOS Prompt (Start$\to$Run, then type &lt;code&gt;command&lt;/code&gt;).  Change to the root directory (&lt;code&gt;cd \textbackslash{&lt;/code&gt; }).  Now make a directory with the command &lt;code&gt;mkdir prg&lt;/code&gt; which makes the directory &lt;code&gt;prg&lt;/code&gt;.  Switch into that directory with the &lt;code&gt;cd prg&lt;/code&gt; command.  Create a file there by typing the &lt;code&gt;notepad hello.py&lt;/code&gt; command.  That will open a &lt;code&gt;notepad&lt;/code&gt; window.  In Notepad type: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- print "Hello, World!" --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!-- Save the file and then go back to the DOS Prompt.  Now type &lt;code&gt;python hello.py&lt;/code&gt; in at the DOS Prompt.  Python should reply with &lt;code&gt;Hello, World!&lt;/code&gt; if everything is working right.  If you get the error:  --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- Bad command or file name --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!-- check to see if the path is correct.  Also check to make sure that you spelled &lt;code&gt;python&lt;/code&gt; correctly.  If you get the error: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- C:\PROGRA~1\PYTHON\PYTHON.EXE: can't open file 'hello.py' --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!-- check to see that you properly saved the &lt;code&gt;hello.py&lt;/code&gt; file and that you are in the correct directory. --&gt;
&lt;!--  --&gt;
&lt;!-- Once you have that working create another file with the &lt;code&gt;notepad ask.py&lt;/code&gt; command.  Put the following text in the file: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- data = raw_input("Type something here:") --&gt;
&lt;!-- print "You typed:",data --&gt;
&lt;!-- &lt;/source&gt;  --&gt;
&lt;!-- Save and then run with the &lt;code&gt;python ask.py&lt;/code&gt; command.  The program should ask you to type in data and after you hit Enter it will tell you what you type.  You should get something like this: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- Type something here:Hi --&gt;
&lt;!-- You typed: Hi --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!-- If you got that, congratulations, you now have a working Python environment. --&gt;
&lt;!----&gt;
&lt;!----&gt;
&lt;!-- == ... == --&gt;
&lt;!----&gt;
&lt;!-- My appendix. --&gt;
&lt;!----&gt;
&lt;!-- The \code{\e appendix} mark-up need not be repeated for additional --&gt;
&lt;!-- appendices. --&gt;
&lt;!----&gt;
&lt;!----&gt;
&lt;!--  --&gt;
&lt;!--   The ugly "%begin{latexonly}" pseudo-environments are really just to --&gt;
&lt;!--   keep LaTeX2HTML quiet during the \renewcommand{} macros; they're --&gt;
&lt;!--   not really valuable. --&gt;
&lt;!--  --&gt;
&lt;!--   If you don't want the Module Index, you can remove all of this up --&gt;
&lt;!--   until the second \input line. --&gt;
&lt;!--  --&gt;
&lt;!-- begin{latexonly} --&gt;
&lt;!-- \renewcommand{\indexname}{Module Index} --&gt;
&lt;!-- end{latexonly} --&gt;
&lt;!-- \input{mod\jobname.ind}                % Module Index --&gt;
&lt;!----&gt;
{{Non-Programmer's Tutorial for Python 2.6/Navigation|The End|Authors}}</text>
      <sha1>84tx5exltggi0vcilpz13aeqrbqi8zd</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/File I/O</title>
    <ns>0</ns>
    <id>10029</id>
    <revision>
      <id>3170854</id>
      <parentid>3170853</parentid>
      <timestamp>2016-12-21T21:30:55Z</timestamp>
      <contributor>
        <username>Mortense</username>
        <id>360489</id>
      </contributor>
      <minor/>
      <comment>Mortense moved page [[Non-Programmer's Tutorial for Python 2.6/File IO]] to [[Non-Programmer's Tutorial for Python 2.6/File I/O]]: Spelling Ref.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10569" xml:space="preserve">Here is a simple example of file I/O (input/output):
&lt;source lang="python"&gt;
# Write a file
out_file = open("test.txt", "w")
out_file.write("This Text is going to out file\nLook at it and see!")
out_file.close()

# Read a file
in_file = open("test.txt", "r")
text = in_file.read()
in_file.close()

print text
&lt;/source&gt;

The output and the contents of the file &lt;code&gt;test.txt&lt;/code&gt; are:

 This Text is going to out file
 Look at it and see!

Notice that it wrote a file called &lt;code&gt;test.txt&lt;/code&gt; in the directory that you ran the program from.  The &lt;code&gt;\n&lt;/code&gt; in the string tells Python to put a ''n''ewline where it is.  

A overview of file I/O is:
* Get a file object with the &lt;code&gt;open&lt;/code&gt; function.
* Read or write to the file object (depending on how it was opened)
* Close it

The first step is to get a file object.  The way to do this is to use the &lt;code&gt;open&lt;/code&gt; function.  The format is &lt;code&gt;file_object = open(filename, mode)&lt;/code&gt;  where &lt;code&gt;file_object&lt;/code&gt; is the variable to put the file object, &lt;code&gt;filename&lt;/code&gt; is a string with the filename, and &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;"r"&lt;/code&gt; to ''r''ead a file or &lt;code&gt;"w"&lt;/code&gt; to ''w''rite a file (and a few others we will skip here).  Next the file objects functions can be called.  The two most common functions are &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt;.  The &lt;code&gt;write&lt;/code&gt; function adds a string to the end of the file.  The &lt;code&gt;read&lt;/code&gt; function reads the next thing in the file and returns it as a string.  If no argument is given it will return the whole file (as done in the example).  

Now here is a new version of the phone numbers program that we made earlier:

&lt;source lang="python"&gt;
def print_numbers(numbers):
    print "Telephone Numbers:"
    for x in numbers.keys():
        print "Name:", x, "\tNumber:", numbers[x]
    print

def add_number(numbers, name, number):
    numbers[name] = number

def lookup_number(numbers, name):
    if name in numbers:
        return "The number is " + numbers[name]
    else:
        return name + " was not found"

def remove_number(numbers, name):
    if name in numbers:
        del numbers[name]
    else:
        print name," was not found"

def load_numbers(numbers, filename):
    in_file = open(filename, "r")
    for in_line in in_file:
        in_line = in_line.rstrip('\n') #Eliminate end of line or enter        
        name, number = in_line.split(",")
        numbers[name] = number
    in_file.close()

def save_numbers(numbers, filename):
    out_file = open(filename, "w")
    for x in numbers.keys():
        out_file.write(x + "," + numbers[x] + "\n")
    out_file.close()

def print_menu():
    print '1. Print Phone Numbers'
    print '2. Add a Phone Number'
    print '3. Remove a Phone Number'
    print '4. Lookup a Phone Number'
    print '5. Load numbers'
    print '6. Save numbers'
    print '7. Quit'
    print

phone_list = {}
menu_choice = 0
print_menu()
while True:
    menu_choice = input("Type in a number (1-7): ")
    if menu_choice == 1:
        print_numbers(phone_list)
    elif menu_choice == 2:
        print "Add Name and Number"
        name = raw_input("Name: ")
        phone = raw_input("Number: ")
        add_number(phone_list, name, phone)
    elif menu_choice == 3:
        print "Remove Name and Number"
        name = raw_input("Name: ")
        remove_number(phone_list, name)
    elif menu_choice == 4:
        print "Lookup Number"
        name = raw_input("Name: ")
        print lookup_number(phone_list, name)
    elif menu_choice == 5:
        filename = raw_input("Filename to load: ")
        load_numbers(phone_list, filename)
    elif menu_choice == 6:
        filename = raw_input("Filename to save: ")
        save_numbers(phone_list, filename)
    elif menu_choice == 7:
        break
    else:
        print_menu()

print "Goodbye"  
&lt;/source&gt;

Notice that it now includes saving and loading files.  Here is some output of my running it twice:

 1. Print Phone Numbers
 2. Add a Phone Number
 3. Remove a Phone Number
 4. Lookup a Phone Number
 5. Load numbers
 6. Save numbers
 7. Quit
 
 Type in a number (1-7): '''2'''
 Add Name and Number
 Name: '''Jill'''
 Number: '''1234'''
 Type in a number (1-7): '''2'''
 Add Name and Number
 Name: '''Fred'''
 Number: '''4321'''
 Type in a number (1-7): '''1'''
 Telephone Numbers:
 Name: Jill     Number: 1234
 Name: Fred     Number: 4321
 
 Type in a number (1-7): '''6'''
 Filename to save: '''numbers.txt'''
 Type in a number (1-7): '''7'''
 Goodbye

 1. Print Phone Numbers
 2. Add a Phone Number
 3. Remove a Phone Number
 4. Lookup a Phone Number
 5. Load numbers
 6. Save numbers
 7. Quit
 
 Type in a number (1-7): '''5'''
 Filename to load: '''numbers.txt'''
 Type in a number (1-7): '''1'''
 Telephone Numbers:
 Name: Jill     Number: 1234
 Name: Fred     Number: 4321
 
 Type in a number (1-7): '''7'''
 Goodbye

The new portions of this program are:
&lt;source lang="python"&gt;
def load_numbers(numbers, filename):
    in_file = open(filename, "r")
    while True:
        in_line = in_file.readline()
        if not in_line:
            break
        in_line = in_line[:-1]
        name, number = in_line.split(",")
        numbers[name] = number
    in_file.close()
def save_numbers(numbers, filename):
    out_file = open(filename, "w")
    for x in numbers.keys():
        out_file.write(x + "," + numbers[x] + "\n")
    out_file.close()
&lt;/source&gt;

First we will look at the save portion of the program.  First it creates a file object with the command &lt;code&gt;open(filename, "w")&lt;/code&gt;.  Next it goes through and creates a line for each of the phone numbers with the command &lt;code&gt;out_file.write(x + "," + numbers[x] + "\n")&lt;/code&gt;.  This writes out a line that contains the name, a comma, the number and follows it by a newline.

The loading portion is a little more complicated.  It starts by getting a file object.  Then it uses a &lt;code&gt;while True:&lt;/code&gt; loop to keep looping until a &lt;code&gt;break&lt;/code&gt; statement is encountered.  Next it gets a line with the line &lt;code&gt;in_line = in_file.readline()&lt;/code&gt;.  The &lt;code&gt;readline&lt;/code&gt; function will return a empty string when the end of the file is reached. The &lt;code&gt;if&lt;/code&gt; statement checks for this and &lt;code&gt;break&lt;/code&gt;s out of the &lt;code&gt;while&lt;/code&gt; loop when that happens.  Of course if the &lt;code&gt;readline&lt;/code&gt; function did not return the newline at the end of the line there would be no way to tell if an empty string was an empty line or the end of the file so the newline is left in what &lt;code&gt;readline&lt;/code&gt; returns.  Hence we have to get rid of the newline.  The line &lt;code&gt;in_line = in_line[:-1]&lt;/code&gt; does this for us by dropping the last character.  Next the line &lt;code&gt;name, number = in_line.split(",")&lt;/code&gt; splits the line at the comma into a name and a number.  This is then added to the &lt;code&gt;numbers&lt;/code&gt; dictionary.

=== Exercises ===
Now modify the grades program from section [[../Dictionaries/]] so that it uses file I/O to keep a record of the students.

{{Solution|title=Solution|text=
Now modify the grades program from section [[../Dictionaries/]] so that it uses file I/O to keep a record of the students.

&lt;source lang="python"&gt;
assignments = ['hw ch 1', 'hw ch 2', 'quiz   ', 'hw ch 3', 'test']
students = { }

def load_grades(gradesfile):
    inputfile = open(gradesfile, "r")
    grades = [ ]
    while True:
        student_and_grade = inputfile.readline()
        student_and_grade = student_and_grade[:-1]
        if not student_and_grade:
            break
        else:
            studentname, studentgrades = student_and_grade.split(",")
            studentgrades = studentgrades.split(" ")
            students[studentname] = studentgrades
    inputfile.close()
    print "Grades loaded."

def save_grades(gradesfile):
    outputfile = open(gradesfile, "w")
    for i in students.keys():
        outputfile.write(i + ",")
        for x in students[i]:
            outputfile.write(x + ",") #added missing comma
        outputfile.write("\n")
    outputfile.close()
    print "Grades saved."

def print_menu():
    print "1. Add student"
    print "2. Remove student"
    print "3. Load grades"
    print "4. Record grade"
    print "5. Print grades"
    print "6. Save grades"
    print "7. Print Menu"
    print "9. Quit"

def print_all_grades():
    keys = students.keys()
    if keys:
        keys.sort()
        print '\t',
        for i in range(len(assignments)):
            print assignments[i], '\t',
        print
        for x in keys:
            print x, '\t',
            grades = students[x]
            print_grades(grades)
    else:
        print "There are no grades to print."

def print_grades(grades):
    for i in range(len(grades)):
        print grades[i], '\t',
    print

print_menu()
menu_choice = 0
while menu_choice != 9:
    print
    menu_choice = input("Menu Choice: ")
    if menu_choice == 1:
        name = raw_input("Student to add: ")
        students[name] = [0] * len(assignments)
    elif menu_choice == 2:
        name = raw_input("Student to remove: ")
        if name in students:
            del students[name]
        else:
            print "Student:", name, "not found"
    elif menu_choice == 3:
        gradesfile = raw_input("Load grades from which file? ")
        load_grades(gradesfile)
    elif menu_choice == 4:
        print "Record Grade"
        name = raw_input("Student: ")
        if name in students:
            grades = students[name]
            print "Type in the number of the grade to record"
            print "Type a 0 (zero) to exit"
            for i in range(len(assignments)):
                print i + 1, assignments[i], '\t',
            print
            print_grades(grades)
            which = 1234
            while which != -1:
                which = input("Change which Grade: ")
                which = which - 1
                if 0 &lt;= which &lt; len(grades):
                    grade = raw_input("Grade: ") # Change from input() to raw_input() to avoid an error when saving
                    grades[which] = grade
                elif which != -1:
                    print "Invalid Grade Number"
        else:
            print "Student not found"
    elif menu_choice == 5:
        print_all_grades()
    elif menu_choice == 6:
        gradesfile = raw_input("Save grades to which file? ")
        save_grades(gradesfile)
    elif menu_choice != 9:
        print_menu()

&lt;/source&gt;
}}

{{Template:Non-Programmer's Tutorial for Python 2.6/Navigation|Revenge of the Strings|Dealing with the imperfect}}</text>
      <sha1>nsbpphf3x6suzfqdxoqne1vneh8goez</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/File IO</title>
    <ns>0</ns>
    <id>380381</id>
    <redirect title="Non-Programmer&#039;s Tutorial for Python 2.6/File I/O" />
    <revision>
      <id>3170855</id>
      <timestamp>2016-12-21T21:30:55Z</timestamp>
      <contributor>
        <username>Mortense</username>
        <id>360489</id>
      </contributor>
      <comment>Mortense moved page [[Non-Programmer's Tutorial for Python 2.6/File IO]] to [[Non-Programmer's Tutorial for Python 2.6/File I/O]]: Spelling Ref.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="63" xml:space="preserve">#REDIRECT [[Non-Programmer's Tutorial for Python 2.6/File I/O]]</text>
      <sha1>pdox4bk3dm3gptea9qmuk9qj10t2ucy</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/For Loops</title>
    <ns>0</ns>
    <id>9968</id>
    <revision>
      <id>3122804</id>
      <parentid>2616041</parentid>
      <timestamp>2016-09-21T10:21:46Z</timestamp>
      <contributor>
        <username>WA</username>
        <id>3038105</id>
      </contributor>
      <minor/>
      <comment>Small change to make the layout of the special debugging version the same.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6295" xml:space="preserve">And here is the new typing exercise for this chapter:
&lt;source lang="python"&gt;
onetoten = range(1, 11)
for count in onetoten:
    print count
&lt;/source&gt;

and the ever-present output:

 1
 2
 3
 4
 5
 6
 7
 8
 9
 10

The output looks awfully familiar but the program code looks different.  The first line uses the &lt;code&gt;range&lt;/code&gt; function.  The &lt;code&gt;range&lt;/code&gt; function uses two arguments like this &lt;code&gt;range(start, finish)&lt;/code&gt;.  &lt;code&gt;start&lt;/code&gt; is the first number that is produced.  &lt;code&gt;finish&lt;/code&gt; is one larger than the last number.  Note that this program could have been done in a shorter way:
&lt;source lang="python"&gt;
for count in range(1, 11):
    print count
&lt;/source&gt;

Here are some examples to show what happens with the &lt;code&gt;range&lt;/code&gt; command:

 &gt;&gt;&gt; '''range(1, 10)'''
 [1, 2, 3, 4, 5, 6, 7, 8, 9]
 &gt;&gt;&gt; '''range(-32, -20)'''
 [-32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21]
 &gt;&gt;&gt; '''range(5,21)'''
 [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
 &gt;&gt;&gt; '''range(5)'''
 [0, 1, 2, 3, 4]
 &gt;&gt;&gt; '''range(21, 5)'''
 []

The next line &lt;code&gt;for count in onetoten:&lt;/code&gt; uses the &lt;code&gt;for&lt;/code&gt; control structure.  A &lt;code&gt;for&lt;/code&gt; control structure looks like &lt;code&gt;for variable in list:&lt;/code&gt;.  &lt;code&gt;list&lt;/code&gt; is gone through starting with the first element of the list and going to the last.  As &lt;code&gt;for&lt;/code&gt; goes through each element in a list it puts each into &lt;code&gt;variable&lt;/code&gt;.  That allows &lt;code&gt;variable&lt;/code&gt; to be used in each successive time the &lt;code&gt;for&lt;/code&gt; loop is run through.  Here is another example (you don't have to type this) to demonstrate:
&lt;source lang="python"&gt;
demolist = ['life', 42, 'the universe', 6, 'and', 9, 'everything']
for item in demolist:
    print "The Current item is:",
    print item
&lt;/source&gt;

The output is:

 The Current item is: life
 The Current item is: 42
 The Current item is: the universe
 The Current item is: 6
 The Current item is: and
 The Current item is: 9
 The Current item is: everything

Notice how the &lt;code&gt;for&lt;/code&gt; loop goes through and sets item to each element in the list. Notice how if you don't want &lt;code&gt;print&lt;/code&gt; to go to the next line add a comma at the end of the statement (i.e. if you want to print something else on that line).  So, what is &lt;code&gt;for&lt;/code&gt; good for?  The first use is to go through all the elements of a list and do something with each of them.  Here's a quick way to add up all the elements:

&lt;source lang="python"&gt;
list = [2, 4, 6, 8]
sum = 0
for num in list:
    sum = sum + num

print "The sum is:", sum
&lt;/source&gt;

with the output simply being:

 The sum is: 20

Or you could write a program to find out if there are any duplicates in a list like this program does:

&lt;source lang="python"&gt;
list = [4, 5, 7, 8, 9, 1, 0, 7, 10]
list.sort()
prev = list[0]
del list[0]
for item in list:
    if prev == item:
        print "Duplicate of", prev, "found"
    prev = item
&lt;/source&gt;

and for good measure:

 Duplicate of 7 Found

Okay, so how does it work?  Here is a special debugging version to help you understand (you don't need to type this in):

&lt;source lang="python"&gt;
l = [4, 5, 7, 8, 9, 1, 0, 7, 10]
print "l = [4, 5, 7, 8, 9, 1, 0, 7, 10]", "\t\tl:", l
l.sort()
print "l.sort()", "\t\tl:", l
prev = l[0]
print "prev = l[0]", "\t\tprev:", prev
del l[0]
print "del l[0]", "\t\tl:", l
for item in l:
    if prev == item:
        print "Duplicate of", prev, "found"
    print "if prev == item:", "\tprev:", prev, "\titem:", item
    prev = item
    print "prev = item", "\t\tprev:", prev, "\titem:", item
&lt;/source&gt;

with the output being:

 l = [4, 5, 7, 8, 9, 1, 0, 7, 10]        l: [4, 5, 7, 8, 9, 1, 0, 7, 10]
 l.sort()                l: [0, 1, 4, 5, 7, 7, 8, 9, 10]
 prev = l[0]             prev: 0
 del l[0]                l: [1, 4, 5, 7, 7, 8, 9, 10]
 if prev == item:        prev: 0         item: 1
 prev = item             prev: 1         item: 1
 if prev == item:        prev: 1         item: 4
 prev = item             prev: 4         item: 4
 if prev == item:        prev: 4         item: 5
 prev = item             prev: 5         item: 5
 if prev == item:        prev: 5         item: 7
 prev = item             prev: 7         item: 7
 Duplicate of 7 found
 if prev == item:        prev: 7         item: 7
 prev = item             prev: 7         item: 7
 if prev == item:        prev: 7         item: 8
 prev = item             prev: 8         item: 8
 if prev == item:        prev: 8         item: 9
 prev = item             prev: 9         item: 9
 if prev == item:        prev: 9         item: 10
 prev = item             prev: 10        item: 10

The reason I put so many &lt;code&gt;print&lt;/code&gt; statements in the code was so that you can see what is happening in each line.  (By the way, if you can't figure out why a program is not working, try putting in lots of print statements so you can see what is happening.)  First the program starts with a boring old list.  Next the program sorts the list.  This is so that any duplicates get put next to each other.  The program then initializes a &lt;code&gt;prev&lt;/code&gt;(ious) variable.  Next the first element of the list is deleted so that the first item is not incorrectly thought to be a duplicate.  Next a &lt;code&gt;for&lt;/code&gt; loop is gone into.  Each item of the list is checked to see if it is the same as the previous.  If it is a duplicate was found.  The value of &lt;code&gt;prev&lt;/code&gt; is then changed so that the next time the &lt;code&gt;for&lt;/code&gt; loop is run through &lt;code&gt;prev&lt;/code&gt; is the previous item to the current.  Sure enough, the 7 is found to be a duplicate.  (Notice how &lt;code&gt;\t&lt;/code&gt; is used to print a tab.)  

The other way to use &lt;code&gt;for&lt;/code&gt; loops is to do something a certain number of times.  Here is some code to print out the first 9 numbers of the Fibonacci series:
&lt;source lang="python"&gt;
a = 1
b = 1
for c in range(1, 10):
    print a,
    n = a + b
    a = b
    b = n
&lt;/source&gt;

with the surprising output:

 1 1 2 3 5 8 13 21 34

Everything that can be done with &lt;code&gt;for&lt;/code&gt; loops can also be done with &lt;code&gt;while&lt;/code&gt; loops but &lt;code&gt;for&lt;/code&gt; loops give an easy way to go through all the elements in a list or to do something a certain number of times.

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Lists|Boolean Expressions}}</text>
      <sha1>2d5iul2uifkyryzzmov8nhjgsx0tp9n</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Front matter</title>
    <ns>0</ns>
    <id>9927</id>
    <revision>
      <id>3263062</id>
      <parentid>3037669</parentid>
      <timestamp>2017-08-12T02:14:50Z</timestamp>
      <contributor>
        <username>PokestarFanBot</username>
        <id>3066054</id>
      </contributor>
      <minor/>
      <comment>Bot: Automatic cosmetic changes, TEST EDIT</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2397" xml:space="preserve">All example Python source code in this tutorial is granted to the public domain. Therefore you may modify it and relicense it under any license you please. Since you are expected to learn programming, the GNU Free Documentation License would require you to keep all programs that are derived from the source code in this tutorial under that license. Since the python source code is granted to the public domain, that requirement is waived.

This tutorial was originally written in LaTeX and was available at: http://www.honors.montana.edu/~jjc/easytut/. It was moved here because the other server is going away and it was being read at least ten times a day. This document is available as LaTeX, HTML, PDF, and Postscript. Go to http://jjc.freeshell.org/easytut/ (Also could try http://web.archive.org/web/*/http://www.honors.montana.edu/~jjc/easytut/ or http://www.geocities.com/jrincayc/easytut.tar.gz ) to see all these forms.
There are also versions of this in Korean, Spanish, Italian and Greek in the tar file.

----

The ''Non-Programmers' Tutorial For Python'' is a tutorial designed to be an introduction to the Python programming language. This guide is for someone with no programming experience.

If you have programmed in other languages I recommend using [http://docs.python.org/tutorial/ Python Tutorial for Programmers] written by Guido van Rossum.

If you have any questions or comments please use the discussion pages or see [[../Authors]] for author contact information. I welcome questions and comments about this tutorial. I will try to answer any questions you have as best I can.

Thanks go to James A. Brown for writing most of the Windows install info. Thanks also to Elizabeth Cogliati for complaining enough :) about the original tutorial (that is almost unusable for a non-programmer), for proofreading, and for many ideas and comments on it. Thanks to Joe Oppegaard for writing almost all the exercises. Thanks to everyone I have missed.

=== Other resources ===
* [http://www.python.org Python Home Page]
* [http://www.python.org/doc/ Python Documentation]
* [http://www.python.org/doc/current/tut/tut.html Python Tutorial for Programmers]
* [http://www.honors.montana.edu/~jjc/easytut/ LaTeX, PDF, and Postscript, and Zip versions]
See also chapter [[../The End|The End]] for some more comments.

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Authors|Intro}}</text>
      <sha1>9di3ino26mxxhevm6krit4sajw1pjmj</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Hello, World</title>
    <ns>0</ns>
    <id>9929</id>
    <revision>
      <id>3037676</id>
      <parentid>3032981</parentid>
      <timestamp>2016-01-14T15:26:21Z</timestamp>
      <contributor>
        <username>QuiteUnusual</username>
        <id>134830</id>
      </contributor>
      <comment>Rejected the last text change (by [[Special:Contributions/211.243.171.39|211.243.171.39]]) and restored revision 2835013 by QuiteUnusual</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9217" xml:space="preserve">&lt;!-- Now for our first lesson, what is a computer program?  A computer program is a set of very detailed instructions that tell a computer what to do.   --&gt;
&lt;!-- TODO add section explaining how to run python programs --&gt;
=== What you should know ===
You should know how to edit programs in a text editor or IDLE, save the file and run the file once the files have been saved to your disk.

=== Printing ===
Programming tutorials since the beginning of time have started with a little program called "Hello, World!"&lt;ref&gt;[[Computer Programming/Hello world|List of "Hello, world!" programs in many programming languages]]&lt;/ref&gt; The syntax changed in Python 3.0. If you are using Python 3.0, you should be reading [[Non-Programmer's Tutorial for Python 3]] instead. So here is the Python 2.6 example:

&lt;source lang="python"&gt;
print "Hello, World!"
&lt;/source&gt;

If you are using the command line to run programs then type it in with a text editor, save it as &lt;code&gt;hello.py&lt;/code&gt; and run it with &lt;code&gt;python hello.py&lt;/code&gt;

Otherwise go into IDLE, create a new window, and create the program as
in section [[../Intro#Creating_and_Running_Programs|Creating and Running Programs]].

When this program is run here's what it prints:

 Hello, World!

Now I'm not going to tell you this every time, but when I show you a
program I recommend that you type it in and run it.  I learn better
when I type it in and you probably do too.

Now here is a more complicated program:

&lt;source lang="python"&gt;
print "Jack and Jill went up a hill"
print "to fetch a pail of water;"
print "Jack fell down, and broke his crown,"
print "and Jill came tumbling after."
&lt;/source&gt;

When you run this program it prints out:

 Jack and Jill went up a hill
 to fetch a pail of water;
 Jack fell down, and broke his crown,
 and Jill came tumbling after.

When the computer runs this program it first sees the line:

&lt;source lang="python"&gt;
print "Jack and Jill went up a hill"
&lt;/source&gt;

so the computer prints:

 Jack and Jill went up a hill

Then the computer goes down to the next line and sees:

&lt;source lang="python"&gt;
print "to fetch a pail of water;"
&lt;/source&gt;

So the computer prints to the screen:

 to fetch a pail of water;

The computer keeps looking at each line, follows the command and then goes on to the next line.  The computer keeps running commands until it reaches the end of the program.

==== Terminology ====
Now is probably a good time to give you a bit of an explanation of what is happening - and a little bit of programming terminology.

What we were doing above was using a ''command'' called &lt;code&gt;print&lt;/code&gt;.  The &lt;code&gt;print&lt;/code&gt; command is followed by one or more ''arguments''.  So in this example

&lt;source lang="python"&gt;
print "Hello, World!"
&lt;/source&gt;

there is one ''argument'', which is &lt;code&gt;"Hello, World!"&lt;/code&gt;.  Note that this argument is a group of characters enclosed in double quotes (").  This is commonly referred to as a ''string of characters'', or ''string'', for short.  Another example of a string is &lt;code&gt;"Jack and Jill went up a hill"&lt;/code&gt;.

A command and its arguments are collectively referred to as a ''statement'', so

&lt;source lang="python"&gt;
print "Hello, World!"
&lt;/source&gt;

is an example of a statement.

That's probably more than enough terminology for now.

=== Expressions ===
Here is another program:

&lt;source lang="python"&gt;
print "2 + 2 is", 2 + 2
print "3 * 4 is", 3 * 4
print "100 - 1 is", 100 - 1
print "(33 + 2) / 5 + 11.5 is", (33 + 2) / 5 + 11.5
&lt;/source&gt;

And here is the ''output'' when the program is run:

 2 + 2 is 4
 3 * 4 is 12
 100 - 1 is 99
 (33 + 2) / 5 + 11.5 is 18.5

As you can see, Python can turn your six hundred dollar computer into a 2 dollar calculator.

In this example, the print command is followed by two arguments, with each of the arguments separated by a comma.  So with the first line of the program

&lt;source lang="python"&gt;
print "2 + 2 is", 2 + 2
&lt;/source&gt;

The first argument is the string &lt;code&gt;"2 + 2 is"&lt;/code&gt; and the second argument is the ''mathematical expression'' &lt;code&gt;2 + 2&lt;/code&gt;, which is commonly referred to as an ''expression''.

What is important to note is that a string is printed as is (the string is what is within the double quotes but doesn't include the double quotes themselves. So the string is printed without the enclosing double quotes.) But an ''expression'' is ''evaluated'', (in other words, converted) to its actual value.

Python has six basic operations for numbers: 

{| class="wikitable"
! Operation 
! Symbol 
! Example
|-
|Power (exponentiation)
| &lt;code&gt;**&lt;/code&gt; 
| &lt;code&gt;5 ** 2 == 25&lt;/code&gt;
|-
|Multiplication 
| &lt;code&gt;*&lt;/code&gt; 
|&lt;code&gt;2 * 3 == 6&lt;/code&gt;
|-
|Division 
| &lt;code&gt;/&lt;/code&gt; 
| &lt;code&gt;14 / 3 == 4&lt;/code&gt; 
|-
|Remainder (modulo)
| &lt;code&gt;%&lt;/code&gt; 
| &lt;code&gt;14 % 3 == 2&lt;/code&gt; 
|-
|Addition 
| &lt;code&gt;+&lt;/code&gt; 
| &lt;code&gt;1 + 2 == 3&lt;/code&gt; 
|-
|Subtraction 
| &lt;code&gt;-&lt;/code&gt; 
| &lt;code&gt;4 - 3 == 1&lt;/code&gt;
|}

Notice that division follows the rule, '''if there are no decimals to start with, there will be no decimals to end with'''. The following program shows this:

&lt;source lang="python"&gt;
print "14 / 3 = ", 14 / 3
print "14 % 3 = ", 14 % 3
print
print "14.0 / 3.0 =", 14.0 / 3.0
print "14.0 % 3.0 =", 14.0 % 3.0
print
print "14.0 / 3 =", 14.0 / 3
print "14.0 % 3 =", 14.0 % 3
print
print "14 / 3.0 =", 14 / 3.0
print "14 % 3.0 =", 14 % 3.0
print 
&lt;/source&gt;

With the output:

 14 / 3 = 4
 14 % 3 = 2
 
 14.0 / 3.0 = 4.66666666667
 14.0 % 3.0 = 2.0
 
 14.0 / 3 = 4.66666666667
 14.0 % 3 = 2.0
 
 14 / 3.0 = 4.66666666667
 14 % 3.0 = 2.0

Notice how Python gives different answers for some problems depending on whether or not decimal values are used.  

The order of operations is the same as in math:
* parentheses &lt;code&gt;()&lt;/code&gt;
* exponents &lt;code&gt;**&lt;/code&gt;
* multiplication &lt;code&gt;*&lt;/code&gt;, division &lt;code&gt;/&lt;/code&gt;, and remainder &lt;code&gt;%&lt;/code&gt; 
* addition &lt;code&gt;+&lt;/code&gt; and subtraction &lt;code&gt;-&lt;/code&gt;
So use parentheses to structure your formulas when needed.

=== Talking to humans (and other intelligent beings) ===

Often in programming you are doing something complicated and may not in the future remember what you did.  When this happens, the program should probably be commented.  A ''comment'' is a note to you and other programmers explaining what is happening.  For example:

&lt;source lang="python"&gt;
# Not quite PI, but an incredible simulation
print 22.0 / 7.0    # 355/113 is even more incredible rational approx to PI
&lt;/source&gt;

Which outputs

 3.14285714286

Notice that the comment starts with a hash: &lt;code&gt;#&lt;/code&gt;. Comments are used to communicate with others who read the program and your future self to make clear what is complicated.

Note that any text can follow a comment, and that when the program is run, the text after the &lt;code&gt;#&lt;/code&gt; through to the end of that line is ignored. The &lt;code&gt;#&lt;/code&gt; does not have to be at the beginning of a new line:

&lt;source lang="python"&gt;
# Output PI on the screen
print 22.0 / 7.0 # Well, just a good approximation
&lt;/source&gt;

=== Examples ===
Each chapter (eventually) will contain examples of the programming features introduced in the chapter.  You should at least look over them and see if you understand them.  If you don't, you may want to type them in and see what happens.  Mess around with them, change them and see what happens.  

'''Denmark.py'''

&lt;source lang="python"&gt;
print "Something's rotten in the state of Denmark."
print "                -- Shakespeare"
&lt;/source&gt;

Output:

 Something's rotten in the state of Denmark.
                 -- Shakespeare

'''School.py'''

&lt;source lang="python"&gt;
# This is not quite true outside of USA
# and is based on my dim memories of my younger years
print "First Grade"
print "1 + 1 =", 1 + 1
print "2 + 4 =", 2 + 4
print "5 - 2 =", 5 - 2
print
print "Third Grade"
print "243 - 23 =", 243 - 23
print "12 * 4 =", 12 * 4
print "12 / 3 =", 12 / 3
print "13 / 3 =", 13 / 3, "R", 13 % 3
print
print "Junior High"
print "123.56 - 62.12 =", 123.56 - 62.12
print "(4 + 3) * 2 =", (4 + 3) * 2
print "4 + 3 * 2 =", 4 + 3 * 2
print "3 ** 2 =", 3 ** 2
print
&lt;/source&gt;

Output:

 First Grade
 1 + 1 = 2
 2 + 4 = 6
 5 - 2 = 3
 
 Third Grade
 243 - 23 = 220
 12 * 4 = 48
 12 / 3 = 4
 13 / 3 = 4 R 1
 
 Junior High
 123.56 - 62.12 = 61.44
 (4 + 3) * 2 = 14
 4 + 3 * 2 = 10
 3 ** 2 = 9

=== Exercises ===

# Write a program that prints your full name and your birthday as separate strings.
# Write a program that shows the use of all 6 math functions.


{{Solution|title=Solution|text=

1. Write a program that prints your full name and your birthday as separate strings.

&lt;source lang="python"&gt;
print "Ada Lovelace", "born on", "November 27, 1852"
&lt;/source&gt; 

2. Write a program that shows the use of all 6 math operations.

&lt;source lang="python"&gt;
#Anything along these lines is acceptable:

#Addition
print "2 + 5 = ", 2 + 5

#subtraction
print "9 - 3 = ", 9 - 3

#multiplication
print "3 * 3 = ", 3 * 3

#division
print "90 / 5 = ", 90 / 5

#exponents
print "7 to the power of 2 (squared) = ", 7 ** 2

#remainder
print "the remainder when doing 22 / 9 = ", 22 % 9
&lt;/source&gt;
}}

----
==== Footnotes ====
&lt;references/&gt;

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Intro|Who Goes There?}}</text>
      <sha1>7d7axzxybzlxdzf405ef94quwbr31ub</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Intro</title>
    <ns>0</ns>
    <id>9928</id>
    <revision>
      <id>3576401</id>
      <parentid>3575045</parentid>
      <timestamp>2019-09-18T20:27:30Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <comment>Rejected the last text change (by [[Special:Contributions/201.191.198.241|201.191.198.241]]) and restored revision 3558979 by JackPotte</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11062" xml:space="preserve">
== First things first ==
So, you've never programmed before.  As we go through this tutorial, I
will attempt to teach you how to program.  There really is only one
way to learn to program.  ''' You''' must read ''code'' and write ''code'' (as computer programs are often called).
I'm going to show you lots of code.  You should type in code that I
show you to see what happens.  Play around with it and make changes.
The worst that can happen is that it won't work.  When I type in code
it will be formatted like this:

&lt;source lang="python"&gt;
##Python is easy to learn
print "Hello, World!" 
&lt;/source&gt;

That's so it is easy to distinguish from the other text.  If you're reading this on the web, you'll notice the code is in color -- that's just to make it stand out, and to make the different parts of the code stand out from each other.  The code you enter will probably not be colored, or the colors may be different, but it won't affect the code as long as you enter it the same way as it's printed here. 

If the computer prints something out it will be formatted like this:

&lt;pre&gt;
Hello, World!
&lt;/pre&gt;

(Note that printed text goes to your screen, and does not involve paper. Before computers had screens, the output of computer programs would be printed on paper.)

If you try this program out and you get a syntax error, check and see what version of python you have.  If you have python 3.0, you should be using the [[Non-Programmer's Tutorial for Python 3.0]]. This article was made for Python 2.6

There will often be a mixture of the text you type (which is shown in '''bold''') and the text the program prints to the screen, which would look like this:

 Halt!
 Who Goes there? '''Josh'''
 You may pass, Josh

(Some of the tutorial has not been converted to this format. Since this is a wiki, you can convert it when you find it.)

I will also introduce you to the terminology of programming - for example, that programming is often referred to as ''coding''.  This will not only help you understand what programmers are talking about, but also help the learning process.

Now, on to more important things.  In order to program in Python you need the Python software.  If you don't already have the Python software go to http://www.python.org/download/ and get the proper version for your platform.  Download it, read the instructions and get it installed.

=== Installing Python ===
For Python programming you need a working Python installation and a text editor. Python comes with its own editor ''IDLE'', which is quite nice and totally sufficient for the beginning. As you get more into programming, you will probably switch to some other editor like ''emacs'', ''vi'' or another.

The Python download page is [http://www.python.org/download http://www.python.org/download]. The most recent version is 3.1, but any ''Python 2.x'' version since 2.2 will work for this tutorial. Be careful with the upcoming ''Python 3'', though, as some major details will change and break this tutorial's examples. A version of this tutorial for Python 3 is at [[Non-Programmer's Tutorial for Python 3]]. There are various different installation files for different computer platforms available on the download site. Here are some specific instructions for the most common operating systems:

==== Linux, BSD and Unix users ====
You are probably lucky and Python is already installed on your machine. To test it type &lt;tt&gt;python&lt;/tt&gt; on a command line. If you see something like that in the following section, you are set.

If you have to install Python, just use the operating system's package manager or go to the repository where your packages are available and get Python. Alternatively, you can compile Python from scratch after downloading the source code. If you get the source code make sure you compile in the Tk extension if you want to use IDLE.&lt;!-- Is this realistic for people who don't know how to program??? --&gt;

==== Mac users ====
Starting from Mac OS X (Tiger), Python ships by default with the operating system, but you  might want to update to the newer version (check the version by starting &lt;tt&gt;python&lt;/tt&gt; in a command line terminal). Also IDLE (the Python editor) might be missing in the standard installation. If you want to (re-)install Python, have a look at the [http://www.python.org/download/mac/ Mac page on the Python download site].

==== Windows users ====
Some computer manufacturers pre-install Python. To check if you already have it installed, open command prompt (cmd in run menu) or MS-DOS and type python. If it says "Bad command or file name" you will need to download the appropriate Windows installer (the normal one, if you do not have a 64-bit AMD or Intel chip). Start the installer by double-clicking it and follow the procedure.
Python for windows can be downloaded from the official [http://www.python.org/getit/ site of python]

=== Interactive Mode ===
Go into IDLE (also called the Python GUI).  You should see a window that has some text like this:
&lt;pre&gt;
Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.


   ****************************************************************
   Personal firewall software may warn about the connection IDLE
   makes to its subprocess using this computer's internal loopback
   interface.  This connection is not visible on any external
   interface and no data is sent to or received from the Internet.
   ****************************************************************


IDLE 1.2.1      
&gt;&gt;&gt;
&lt;/pre&gt;
The &lt;code&gt;&gt;&gt;&gt;&lt;/code&gt; is Python's way of telling you that you are in
interactive mode.  In interactive mode what you type is immediately
run.  Try typing &lt;code&gt;1+1&lt;/code&gt; in. Python will respond with &lt;code&gt;2&lt;/code&gt;.
Interactive mode allows you to test out and see what Python will do.
If you ever feel you need to play with new Python statements, go into
interactive mode and try them out.

=== Creating and Running Programs ===

Go into IDLE if you are not already.  In the menu at the top, select &lt;code&gt;File&lt;/code&gt; then &lt;code&gt;New Window&lt;/code&gt;.  In the new window that appears, type the following:

&lt;source lang="python"&gt;
print "Hello, World!"
&lt;/source&gt;

Now save the program: select &lt;code&gt;File&lt;/code&gt; from the menu, then &lt;code&gt;Save&lt;/code&gt;.  Save it as "&lt;code&gt;hello.py&lt;/code&gt;" (you can save it in any folder you want).  Now that it is saved it can be run.  

Next run the program by going to &lt;code&gt;Run&lt;/code&gt; then &lt;code&gt;Run Module&lt;/code&gt; (or if you have a older version of IDLE use &lt;code&gt;Edit&lt;/code&gt; then &lt;code&gt;Run script&lt;/code&gt;).  This will output &lt;code&gt;Hello, World!&lt;/code&gt; on the &lt;code&gt;*Python Shell*&lt;/code&gt; window.  

For a more in-depth introduction to IDLE, a longer tutorial with screenshots can be found at [http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html http://hkn.eecs.berkeley.edu/~dyoo/python/idle_intro/index.html]

==== Running Python Programs in Unix ====

If you are using Unix (such as Linux, Mac OSX, or BSD), if you make the program executable with &lt;code&gt;[[Guide_to_Unix/Commands/File_System_Utilities#chmod|chmod]]&lt;/code&gt;, and have as the first line:
&lt;source lang="python"&gt;
#!/usr/bin/env python2
&lt;/source&gt;
you can run the python program with &lt;code&gt;./hello.py&lt;/code&gt; like any other command.

Note: In some computer environments, you need to write: 
 &lt;source lang="python"&gt;
#!/usr/bin/env python
&lt;/source&gt;

Example for Solaris:
&lt;source lang="python"&gt;
#!/usr/bin/python
&lt;/source&gt;

==== Program file names ====
It is very useful to stick to some rules regarding the file names of Python programs. Otherwise some things ''might'' go wrong unexpectedly.  These don't matter as much for programs, but you can have weird problems if you don't follow them for module names (modules will be discussed later).

# Always save the program with the extension &lt;tt&gt;.py&lt;/tt&gt;. Do not put another dot somewhere else in the file name.
# Only use standard characters for file names: letters, numbers, dash (&lt;tt&gt;-&lt;/tt&gt;) and underscore (&lt;tt&gt;_&lt;/tt&gt;).
# White space ("&lt;tt&gt; &lt;/tt&gt;") should not be used at all (e.g. use underscores instead).
# Do not use anything other than a letter (particularly no numbers!) at the beginning of a file name.
# Do not use "non-english" characters (such as &lt;tt&gt;ä&lt;/tt&gt;, &lt;tt&gt;ö&lt;/tt&gt;, &lt;tt&gt;ü&lt;/tt&gt;, &lt;tt&gt;å&lt;/tt&gt; or &lt;tt&gt;ß&lt;/tt&gt;) in your file names, or, even better, do not use them at all when programming.

=== Using Python from the command line ===
If you don't want to use Python from the command line, you don't have to, just use IDLE.  To get into interactive mode just type &lt;code&gt;python&lt;/code&gt; without any arguments.  To run a program, create it with a text editor (Emacs has a good Python mode) and then run it with &lt;code&gt;python program_name&lt;/code&gt;.

Additionally, to use Python within Vim, you may want to visit [http://www.ibiblio.org/obp/pybiblio/tips/elkner/vim4python.php Using vim as a Python IDE]

=== Where to get help ===
At some point in your Python career you will probably get stuck and have no clue about how to solve the problem you are supposed to work on. This tutorial only covers the basics of Python programming, but there is a lot of further information available.

==== Python documentation ====
First of all, Python is very well documented. There might even be copies of these documents on your computer, which came with your Python installation:
'''* The official [http://docs.python.org/tut/tut.html Python Tutorial] by Guido van Rossum is often a good starting point for general questions'''.
* For questions about standard modules (you will learn what this is later), the [http://docs.python.org/lib/lib.html Python Library Reference] is the place to look.
* If you really want to get to know something about the details of the language, the [http://docs.python.org/ref/ref.html Python Reference Manual] is comprehensive but quite complex for beginners.

==== Python user community ====
There are a lot of other Python users out there, and usually they are nice and willing to help you. This very active user community is organised mostly through mailing lists and a newsgroup:
* The [http://mail.python.org/mailman/listinfo/tutor tutor mailing list] is for folks who want to ask questions regarding how to learn computer programming with the Python language.
* The [http://www.python.org/community/lists/#python-help python-help mailing list] is python.org's help desk. You can ask a group of knowledgeable volunteers questions about all your Python problems.
* The Python newsgroup [news:comp.lang.python comp.lang.python] ([http://groups.google.com/group/comp.lang.python/ Google groups archive]) is the place for general Python discussions, questions and the central meeting point of the community.

In order not to reinvent the wheel and discuss the same questions again and again, people will appreciate very much if you ''do a web search for a solution to your problem before contacting these lists!''

{{Template:Non-Programmer's Tutorial for Python 2.6/Navigation|Front matter|Hello, World}}</text>
      <sha1>07w9fodpbhe5w4cjd0l0k0xagrsu56e</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Lists</title>
    <ns>0</ns>
    <id>9967</id>
    <revision>
      <id>3150030</id>
      <parentid>3150029</parentid>
      <timestamp>2016-11-19T02:10:23Z</timestamp>
      <contributor>
        <ip>218.152.52.94</ip>
      </contributor>
      <comment>/* s== More features of lists == */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16234" xml:space="preserve">=== Variables with more than one value ===
You have already seen ordinary variables that store a single value.  However other variable types can hold more than one value.  The simplest type is called a list.  Here is an example of a list being used:
&lt;source lang="python"&gt;
which_one = input("What month (1-12)? ")
months = ['January', 'February', 'March', 'April', 'May', 'June', 'July',
          'August', 'September', 'October', 'November', 'December']

if 1 &lt;= which_one &lt;= 12:
    print "The month is", months[which_one - 1]
&lt;/source&gt;

and an output example:

 What month (1-12)? '''3'''
 The month is March

In this example the &lt;code&gt;months&lt;/code&gt; is a list.  &lt;code&gt;months&lt;/code&gt; is defined with the lines &lt;code&gt; months = ['January', 'February', 'March', 'April', 'May', 'June', 'July',&lt;/code&gt; and &lt;code&gt;'August', 'September', 'October', 'November', 'December']&lt;/code&gt; (note that a &lt;code&gt;\&lt;/code&gt; could also be used to split a long line, but that is not necessary in this case because Python is intelligent enough to recognize that everything within brackets belongs together).  The &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; start and end the list with commas (&lt;code&gt;,&lt;/code&gt;) separating the list items.  The list is used in &lt;code&gt;months[which_one - 1]&lt;/code&gt;.  A list consists of items that are numbered starting at 0.  In other words if you wanted January you would use &lt;code&gt;months[0]&lt;/code&gt;.  Give a list a number and it will return the value that is stored at that location.

The statement &lt;code&gt; if 1 &lt;= which_one &lt;= 12:&lt;/code&gt; will only be true if &lt;code&gt; which_one&lt;/code&gt; is between one and twelve inclusive (in other words it is what you would expect if you have seen that in algebra).

Lists can be thought of as a series of boxes. Each box has a different value. For example, the boxes created by  &lt;code&gt;demolist = ['life', 42, 'the universe', 6, 'and', 9]&lt;/code&gt; would look like this:

{| class="wikitable" 
!box number 
!0 
!1  
!2 
!3 
!4 
!5 
|-
|demolist 
|"life" 
|42 
|"the universe" 
|6 
|"and"
|9
|}

Each box is referenced by its number so the statement &lt;code&gt;demolist[0]&lt;/code&gt; would get &lt;code&gt;'life'&lt;/code&gt;, &lt;code&gt;demolist[1]&lt;/code&gt; would get &lt;code&gt;42&lt;/code&gt; and so on up to &lt;code&gt;demolist[5]&lt;/code&gt; getting &lt;code&gt;9&lt;/code&gt;.

=== More features of lists ===
The next example is just to show a lot of other stuff lists can do (for once I don't expect you to type it in, but you should probably play around with lists until you are comfortable with them.).  Here goes:
&lt;source lang="python"&gt;
demolist = ["life", 42, "the universe", 6, "and", 9]
print "demolist = ",demolist
demolist.append("everything")
print "after 'everything' was appended demolist is now:"
print demolist
print "len(demolist) =", len(demolist)
print "demolist.index(42) =", demolist.index(42)
print "demolist[1] =", demolist[1]

# Next we will loop through the list
c = 0
while c &lt; len(demolist):
    print "demolist[", c, "] =", demolist[c]
    c = c + 1

del demolist[2]
print "After 'the universe' was removed demolist is now:"
print demolist
if "life" in demolist:
    print "'life' was found in demolist"
else:
    print "'life' was not found in demolist"

if "amoeba" in demolist:
    print "'amoeba' was found in demolist"

if "amoeba" not in demolist:
    print "'amoeba' was not found in demolist"

demolist.sort()
print "The sorted demolist is", demolist
&lt;/source&gt;

The output is:

 demolist =  ['life', 42, 'the universe', 6, 'and', 9]
 after 'everything' was appended demolist is now:
 ['life', 42, 'the universe', 6, 'and', 9, 'everything']
 len(demolist) = 7
 demolist.index(42) = 1
 demolist[1] = 42
 demolist[ 0 ] = life
 demolist[ 1 ] = 42
 demolist[ 2 ] = the universe
 demolist[ 3 ] = 6
 demolist[ 4 ] = and
 demolist[ 5 ] = 9
 demolist[ 6 ] = everything
 After 'the universe' was removed demolist is now:
 ['life', 42, 6, 'and', 9, 'everything']
 'life' was found in demolist
 'amoeba' was not found in demolist
 The sorted demolist is [6, 9, 42, 'and', 'everything', 'life']

This example uses a whole bunch of new functions.  Notice that you can
just &lt;code&gt;print&lt;/code&gt; a whole list.  Next the &lt;code&gt;append&lt;/code&gt; function is used
to add a new item to the end of the list.  &lt;code&gt;len&lt;/code&gt; returns how many
items are in a list.  The valid indexes (as in numbers that can be
used inside of the &lt;code&gt;[]&lt;/code&gt;) of a list range from 0 to &lt;code&gt;len - 1&lt;/code&gt;. The
&lt;code&gt;index&lt;/code&gt; function tells where the first location of an item is
located in a list.  Notice how &lt;code&gt;demolist.index(42)&lt;/code&gt; returns 1, and
when &lt;code&gt;demolist[1]&lt;/code&gt; is run it returns 42.  The line &lt;code&gt;# Next we will loop through the list&lt;/code&gt; is a just a reminder to the programmer (also called a ''comment''). Python will ignore any lines that start with a &lt;code&gt;#&lt;/code&gt;.  Next the lines:
&lt;source lang="python"&gt;
c = 0
while c &lt; len(demolist):
    print 'demolist[', c, '] =', demolist[c]
    c = c + 1
&lt;/source&gt;

create a variable &lt;code&gt;c&lt;/code&gt;, which starts at 0 and is incremented until it reaches the last index of the list.  Meanwhile the &lt;code&gt;print&lt;/code&gt; statement prints out each element of the list. The &lt;code&gt;del&lt;/code&gt; command can be used to remove a given element in a list.  The next few lines use the &lt;code&gt;in&lt;/code&gt; operator to test if an element is in or is not in a list. The &lt;code&gt;sort&lt;/code&gt; function sorts the list. This is useful if you need a
list in order from smallest number to largest or alphabetical.  Note
that this rearranges the list. In summary, for a list, the following operations occur:

{| class="wikitable"
!example 
!explanation
|-
|&lt;code&gt;demolist[2]&lt;/code&gt; 
|accesses the element at index 2
|-
|&lt;code&gt;demolist[2] = 3&lt;/code&gt; 
|sets the element at index 2 to be 3
|-
|&lt;code&gt;del demolist[2]&lt;/code&gt; 
|removes the element at index 2
|-
|&lt;code&gt;len(demolist)&lt;/code&gt; 
|returns the length of &lt;code&gt;demolist&lt;/code&gt;
|-
|&lt;code&gt;"value" in demolist&lt;/code&gt; 
|is ''True'' if &lt;tt&gt;"value"&lt;/tt&gt; is an element in &lt;code&gt;demolist&lt;/code&gt;
|-
|&lt;code&gt;"value" not in demolist&lt;/code&gt; 
|is ''True'' if &lt;code&gt;"value"&lt;/code&gt; is not an element in &lt;code&gt;demolist&lt;/code&gt;
|-
|&lt;code&gt;demolist.sort()&lt;/code&gt; 
|sorts &lt;code&gt;demolist&lt;/code&gt;
|-
|&lt;code&gt;demolist.index("value")&lt;/code&gt; 
|returns the index of the first place that &lt;code&gt;"value"&lt;/code&gt; occurs
|-
|&lt;code&gt;demolist.append("value")&lt;/code&gt; 
|adds an element &lt;code&gt;"value"&lt;/code&gt; at the end of the list
|-
|&lt;code&gt;demolist.remove("value")&lt;/code&gt;
|removes the first occurrence of value from &lt;code&gt;demolist&lt;/code&gt; (same as &lt;code&gt;del demolist[demolist.index("value")]&lt;/code&gt;)
|}

This next example uses these features in a more useful way:
&lt;source lang="python"&gt;
menu_item = 0
namelist = []
while menu_item != 9:
    print "--------------------"
    print "1. Print the list"
    print "2. Add a name to the list"
    print "3. Remove a name from the list"
    print "4. Change an item in the list"
    print "9. Quit"
    menu_item = input("Pick an item from the menu: ")
    if menu_item == 1:
        current = 0
        if len(namelist) &gt; 0:
            while current &lt; len(namelist):
                print current, ".", namelist[current]
                current = current + 1
        else:
            print "List is empty"
    elif menu_item == 2:
        name = raw_input("Type in a name to add: ")
        namelist.append(name)
    elif menu_item == 3:
        del_name = raw_input("What name would you like to remove: ")
        if del_name in namelist:
            # namelist.remove(del_name) would work just as fine
            item_number = namelist.index(del_name)
            del namelist[item_number]
            # The code above only removes the first occurrence of
            # the name.  The code below from Gerald removes all.
            # while del_name in namelist:
            #       item_number = namelist.index(del_name)
            #       del namelist[item_number]
        else:
            print del_name, "was not found"
    elif menu_item == 4:
        old_name = raw_input("What name would you like to change: ")
        if old_name in namelist:
            item_number = namelist.index(old_name)
            new_name = raw_input("What is the new name: ")
            namelist[item_number] = new_name
        else:
            print old_name, "was not found"

print "Goodbye"
&lt;/source&gt;

And here is part of the output:

 --------------------
 1. Print the list
 2. Add a name to the list
 3. Remove a name from the list
 4. Change an item in the list
 9. Quit
 
 Pick an item from the menu: '''2'''
 Type in a name to add: '''Jack'''
 
 Pick an item from the menu: '''2'''
 Type in a name to add: '''Jill'''
 
 Pick an item from the menu: '''1'''
 0 . Jack
 1 . Jill
 
 Pick an item from the menu: '''3'''
 What name would you like to remove: '''Jack'''
 
 Pick an item from the menu: '''4'''
 What name would you like to change: '''Jill'''
 What is the new name: '''Jill Peters'''
 
 Pick an item from the menu: '''1'''
 0 . Jill Peters
 
 Pick an item from the menu: '''9'''
 Goodbye

That was a long program.  Let's take a look at the source code. The line &lt;code&gt;namelist = []&lt;/code&gt; makes the variable &lt;code&gt;namelist&lt;/code&gt; a list with no items (or elements).  The next important line is &lt;code&gt;while menu_item != 9:&lt;/code&gt;.  This line starts a loop that allows the menu system for this program.  The next few lines display a menu and decide which part of the program to run.

The section
&lt;source lang="python"&gt;
current = 0
if len(namelist) &gt; 0:
    while current &lt; len(namelist):
        print current, ".", namelist[current]
        current = current + 1
else:
    print "List is empty"
&lt;/source&gt;
goes through the list and prints each name.  &lt;code&gt;len(namelist)&lt;/code&gt; tells how many items are in the list.  If &lt;code&gt;len&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt;, then the list is empty.

Then, a few lines later, the statement &lt;code&gt;namelist.append(name)&lt;/code&gt; appears.  It uses the &lt;code&gt;append&lt;/code&gt; function to add an item to the end of the list.  Jump down another two lines, and notice this section of code:
&lt;source lang="python"&gt;
item_number = namelist.index(del_name)
del namelist[item_number]
&lt;/source&gt;
Here the &lt;code&gt;index&lt;/code&gt; function is used to find the index value that will be used later to remove the item.  &lt;code&gt;del namelist[item_number]&lt;/code&gt; is used to remove a element of the list.   

The next section
&lt;source lang="python"&gt;
old_name = raw_input("What name would you like to change: ")
if old_name in namelist:
    item_number = namelist.index(old_name)
    new_name = raw_input("What is the new name: ")
    namelist[item_number] = new_name
else:
   print old_name, "was not found"
&lt;/source&gt;
uses &lt;code&gt;index&lt;/code&gt; to find the &lt;code&gt;item_number&lt;/code&gt; and then puts &lt;code&gt;new_name&lt;/code&gt; where the &lt;code&gt;old_name&lt;/code&gt; was.

Congratulations, with lists under your belt, you now know enough of the language
that you could do any computations that a computer can do (this is technically known as Turing-Completeness).  Of course, there are still many features that
are used to make your life easier.

=== Examples ===
'''test.py'''
&lt;source lang="python"&gt;
## This program runs a test of knowledge

# First get the test questions
# Later this will be modified to use file io.
def get_questions():
    # notice how the data is stored as a list of lists
    return [["What color is the daytime sky on a clear day? ", "blue"],
            ["What is the answer to life, the universe and everything? ", "42"],
            ["What is a three letter word for mouse trap? ", "cat"]]

# This will test a single question
# it takes a single question in
# it returns True if the user typed the correct answer, otherwise False

def check_question(question_and_answer):
    # extract the question and the answer from the list
    question = question_and_answer[0]
    answer = question_and_answer[1]
    # give the question to the user
    given_answer = raw_input(question)
    # compare the user's answer to the testers answer
    if answer == given_answer:
        print "Correct"
        return True
    else:
        print "Incorrect, correct was:", answer
        return False

# This will run through all the questions
def run_test(questions):
    if len(questions) == 0:
        print "No questions were given."
        # the return exits the function
        return
    index = 0
    right = 0
    while index &lt; len(questions):
        # Check the question
        if check_question(questions[index]):
            right = right + 1
            index = index + 1
        # go to the next question
        else:
            index = index + 1
    # notice the order of the computation, first multiply, then divide
    print "You got", right * 100 / len(questions),\
           "% right out of", len(questions)

# now let's run the questions

run_test(get_questions())
&lt;/source&gt;

The values &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; point to 1 and 0, respectively. They are often used in sanity checks, loop conditions etc. You will learn more about this a little bit later (chapter [[../Boolean Expressions/]]).

Sample Output:

 What color is the daytime sky on a clear day?'''green'''
 Incorrect, correct was: blue
 What is the answer to life, the universe and everything?'''42'''
 Correct
 What is a three letter word for mouse trap?'''cat'''
 Correct
 You got 66 % right out of 3

=== Exercises ===
Expand the test.py program so it has a menu giving the option of taking
the test, viewing the list of questions and answers, and an option to
quit.  Also, add a new question to ask, "What noise does a truly
advanced machine make?" with the answer of "ping".

{{Solution|title=Solution|text=

Expand the test.py program so it has menu giving the option of taking
the test, viewing the list of questions and answers, and an option to
quit.  Also, add a new question to ask, "What noise does a truly
advanced machine make?" with the answer of "ping".

&lt;source lang="python"&gt;
## This program runs a test of knowledge

questions = [["What color is the daytime sky on a clear day? ", "blue"],
             ["What is the answer to life, the universe and everything? ", "42"],
             ["What is a three letter word for mouse trap? ", "cat"],
             ["What noise does a truly advanced machine make?", "ping"]]

# This will test a single question
# it takes a single question in
# it returns True if the user typed the correct answer, otherwise False

def check_question(question_and_answer):
    # extract the question and the answer from the list
    question = question_and_answer[0]
    answer = question_and_answer[1]
    # give the question to the user
    given_answer = raw_input(question)
    # compare the user's answer to the testers answer
    if answer == given_answer:
        print "Correct"
        return True
    else:
        print "Incorrect, correct was:", answer
        return False

# This will run through all the questions

def run_test(questions):

    if len(questions) == 0:
        print "No questions were given."
        # the return exits the function
        return
    index = 0
    right = 0
    while index &lt; len(questions):
        # Check the question
        if check_question(questions[index]):
            right = right + 1
        # go to the next question
        index = index + 1
    # notice the order of the computation, first multiply, then divide
    print "You got", right * 100 / len(questions),\
           "% right out of", len(questions)

#showing a list of questions and answers
def showquestions(questions):
    q = 0
    while q &lt; len(questions):
        a = 0
        print "Q:" , questions[q][a]
        a = 1
        print "A:" , questions[q][a]
        q = q + 1

# now let's define the menu function
def menu():
    print "-----------------"
    print "Menu:"
    print "1 - Take the test"
    print "2 - View a list of questions and answers"
    print "3 - View the menu"
    print "5 - Quit"
    print "-----------------"

choice = "3"
while choice != "5":
    if choice == "1":
        run_test(questions)
    elif choice == "2":
        showquestions(questions)
    elif choice == "3":
        menu()
    print
    choice = raw_input("Choose your option from the menu above: ") 
&lt;/source&gt;
}}

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Defining Functions|For Loops}}</text>
      <sha1>77l52kieggahk5na7rditwbbdxvll93</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/More on Lists</title>
    <ns>0</ns>
    <id>10026</id>
    <revision>
      <id>3611517</id>
      <parentid>2700435</parentid>
      <timestamp>2019-12-05T17:36:43Z</timestamp>
      <contributor>
        <username>Uziel302</username>
        <id>655051</id>
      </contributor>
      <minor/>
      <comment>inputed-&gt;inputted - [[Wikibooks:Correct typos in one click|Fix a typo in one click]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10536" xml:space="preserve">We have already seen lists and how they can be used.   Now that you have some more background I will go into more detail about lists.  First we will look at more ways to get at the elements in a list and then we will talk about copying them.  

Here are some examples of using indexing to access a single element of a list:

 &gt;&gt;&gt; '''some_numbers = ['zero', 'one', 'two', 'three', 'four', 'five']'''
 &gt;&gt;&gt; '''some_numbers[0]'''
 'zero'
 &gt;&gt;&gt; '''some_numbers[4]'''
 'four'
 &gt;&gt;&gt; '''some_numbers[5]'''
 'five'

All those examples should look familiar to you.  If you want the first item in the list just look at index 0.  The second item is index 1 and so on through the list.  However what if you want the last item in the list?  One way could be to use the &lt;code&gt;len()&lt;/code&gt; function like &lt;code&gt;some_numbers[len(some_numbers) - 1]&lt;/code&gt;.  This way works since the &lt;code&gt;len()&lt;/code&gt; function always returns the last index plus one.  The second from the last would then be &lt;code&gt;some_numbers[len(some_numbers) - 2]&lt;/code&gt;.  There is an easier way to do this.  In Python the last item is always index -1.  The second to the last is index -2 and so on.  Here are some more examples:

 &gt;&gt;&gt; '''some_numbers[len(some_numbers) - 1]'''
 'five'
 &gt;&gt;&gt; '''some_numbers[len(some_numbers) - 2]'''
 'four'
 &gt;&gt;&gt; '''some_numbers[-1]'''
 'five'
 &gt;&gt;&gt; '''some_numbers[-2]'''
 'four'
 &gt;&gt;&gt; '''some_numbers[-6]'''
 'zero'

Thus any item in the list can be indexed in two ways: from the front and from the back.

Another useful way to get into parts of lists is using slicing.  Here is another example to give you an idea what they can be used for:

 &gt;&gt;&gt; '''things = [0, 'Fred', 2, 'S.P.A.M.', 'Stocking', 42, "Jack", "Jill"]'''
 &gt;&gt;&gt; '''things[0]'''
 0
 &gt;&gt;&gt; '''things[7]'''
 'Jill'
 &gt;&gt;&gt; '''things[0:8]'''
 [0, 'Fred', 2, 'S.P.A.M.', 'Stocking', 42, 'Jack', 'Jill']
 &gt;&gt;&gt; '''things[2:4]'''
 [2, 'S.P.A.M.']
 &gt;&gt;&gt; '''things[4:7]'''
 ['Stocking', 42, 'Jack']
 &gt;&gt;&gt; '''things[1:5]'''
 ['Fred', 2, 'S.P.A.M.', 'Stocking']

Slicing is used to return part of a list.  The slicing operator is in the form &lt;code&gt;things[first_index:last_index]&lt;/code&gt;.  Slicing cuts the list before the &lt;code&gt;first_index&lt;/code&gt; and before the &lt;code&gt;last_index&lt;/code&gt; and returns the parts inbetween.  You can use both types of indexing:

 &gt;&gt;&gt; '''things[-4:-2]'''
 ['Stocking', 42]
 &gt;&gt;&gt; '''things[-4]'''
 'Stocking'
 &gt;&gt;&gt; '''things[-4:6]'''
 ['Stocking', 42]

Another trick with slicing is the unspecified index.  If the first index is not specified the beginning of the list is assumed.  If the last index is not specified the whole rest of the list is assumed.  Here are some examples:

 &gt;&gt;&gt; '''things[:2]'''
 [0, 'Fred']
 &gt;&gt;&gt; '''things[-2:]'''
 ['Jack', 'Jill']
 &gt;&gt;&gt; '''things[:3]'''
 [0, 'Fred', 2]
 &gt;&gt;&gt; '''things[:-5]'''
 [0, 'Fred', 2]

Here is a (HTML inspired) program example (copy and paste in the poem definition if you want):
&lt;source lang="python"&gt;
poem = ["&lt;B&gt;", "Jack", "and", "Jill", "&lt;/B&gt;", "went", "up", "the",
        "hill", "to", "&lt;B&gt;", "fetch", "a", "pail", "of", "&lt;/B&gt;",
        "water.", "Jack", "fell", "&lt;B&gt;", "down", "and", "broke",
        "&lt;/B&gt;", "his", "crown", "and", "&lt;B&gt;", "Jill", "came",
        "&lt;/B&gt;", "tumbling", "after"]

def get_bolds(text):
    true = 1
    false = 0
    ## is_bold tells whether or not we are currently looking at 
    ## a bold section of text.
    is_bold = false
    ## start_block is the index of the start of either an unbolded 
    ## segment of text or a bolded segment.
    start_block = 0
    for index in range(len(text)):
        ## Handle a starting of bold text
        if text[index] == "&lt;B&gt;":
            if is_bold:
                print "Error: Extra Bold"
            ## print "Not Bold:", text[start_block:index]
            is_bold = true
            start_block = index + 1
        ## Handle end of bold text
        ## Remember that the last number in a slice is the index 
        ## after the last index used.
        if text[index] == "&lt;/B&gt;":
            if not is_bold:
                print "Error: Extra Close Bold"
            print "Bold [", start_block, ":", index, "]", text[start_block:index]
            is_bold = false
            start_block = index + 1

get_bolds(poem)
&lt;/source&gt;

with the output being:

 Bold [ 1 : 4 ] ['Jack', 'and', 'Jill']
 Bold [ 11 : 15 ] ['fetch', 'a', 'pail', 'of']
 Bold [ 20 : 23 ] ['down', 'and', 'broke']
 Bold [ 28 : 30 ] ['Jill', 'came']

The &lt;code&gt;get_bold()&lt;/code&gt; function takes in a list that is broken into words
and tokens.  The tokens that it looks for are &lt;code&gt;&amp;lt;B&amp;gt;&lt;/code&gt; which starts
the bold text and &lt;code&gt;&amp;lt;/B&amp;gt;&lt;/code&gt; which ends bold text. The function
&lt;code&gt;get_bold()&lt;/code&gt; goes through and searches for the start and end
tokens.

The next feature of lists is copying them.  If you try something simple like:

 &gt;&gt;&gt; '''a = [1, 2, 3]'''
 &gt;&gt;&gt; '''b = a'''
 &gt;&gt;&gt; '''print b'''
 [1, 2, 3]
 &gt;&gt;&gt; '''b[1] = 10'''
 &gt;&gt;&gt; '''print b'''
 [1, 10, 3]
 &gt;&gt;&gt; '''print a'''
 [1, 10, 3]

This probably looks surprising since a modification to &lt;code&gt;b&lt;/code&gt;
resulted in &lt;code&gt;a&lt;/code&gt; being changed as well.  What happened is that the
statement &lt;code&gt;b = a&lt;/code&gt; makes &lt;code&gt;b&lt;/code&gt; a ''reference'' to &lt;code&gt;a&lt;/code&gt;.
This means that &lt;code&gt;b&lt;/code&gt; can be thought of as another name for &lt;code&gt;a&lt;/code&gt;.
Hence any modification to &lt;code&gt;b&lt;/code&gt; changes &lt;code&gt;a&lt;/code&gt; as well.  However
some assignments don't create two names for one list:

 &gt;&gt;&gt; '''a = [1, 2, 3]'''
 &gt;&gt;&gt; '''b = a * 2'''
 &gt;&gt;&gt; '''print a'''
 [1, 2, 3]
 &gt;&gt;&gt; '''print b'''
 [1, 2, 3, 1, 2, 3]
 &gt;&gt;&gt; '''a[1] = 10'''
 &gt;&gt;&gt; '''print a'''
 [1, 10, 3]
 &gt;&gt;&gt; '''print b'''
 [1, 2, 3, 1, 2, 3]

In this case &lt;code&gt;b&lt;/code&gt; is not a reference to &lt;code&gt;a&lt;/code&gt; since the
expression &lt;code&gt;a * 2&lt;/code&gt; creates a new list. Then the statement
&lt;code&gt;b = a * 2&lt;/code&gt; gives &lt;code&gt;b&lt;/code&gt; a reference to &lt;code&gt;a * 2&lt;/code&gt; rather than a
reference to &lt;code&gt;a&lt;/code&gt;.  All assignment operations create a reference.
When you pass a list as an argument to a function you create a
reference as well.  Most of the time you don't have to worry about
creating references rather than copies.  However when you need to make
modifications to one list without changing another name of the list
you have to make sure that you have actually created a copy.

There are several ways to make a copy of a list.  The simplest that
works most of the time is the slice operator since it always makes a
new list even if it is a slice of a whole list:

 &gt;&gt;&gt; '''a = [1, 2, 3]'''
 &gt;&gt;&gt; '''b = a[:]'''
 &gt;&gt;&gt; '''b[1] = 10'''
 &gt;&gt;&gt; '''print a'''
 [1, 2, 3]
 &gt;&gt;&gt; '''print b'''
 [1, 10, 3]

Taking the slice &lt;code&gt;[:]&lt;/code&gt; creates a new copy of the list. However it
only copies the outer list.  Any sublist inside is still a references
to the sublist in the original list.  Therefore, when the list
contains lists, the inner lists have to be copied as well.  You could
do that manually but Python already contains a module to do it.  You
use the &lt;code&gt;deepcopy&lt;/code&gt; function of the &lt;code&gt;copy&lt;/code&gt; module:

 &gt;&gt;&gt; '''import copy'''
 &gt;&gt;&gt; '''a = [[1, 2, 3], [4, 5, 6]]'''
 &gt;&gt;&gt; '''b = a[:]'''
 &gt;&gt;&gt; '''c = copy.deepcopy(a)'''
 &gt;&gt;&gt; '''b[0][1] = 10'''
 &gt;&gt;&gt; '''c[1][1] = 12'''
 &gt;&gt;&gt; '''print a'''
 [[1, 10, 3], [4, 5, 6]]
 &gt;&gt;&gt; '''print b'''
 [[1, 10, 3], [4, 5, 6]]
 &gt;&gt;&gt; '''print c'''
 [[1, 2, 3], [4, 12, 6]]

First of all notice that &lt;code&gt;a&lt;/code&gt; is a list of lists.  Then notice
that when &lt;code&gt;b[0][1] = 10&lt;/code&gt; is run both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are
changed, but &lt;code&gt;c&lt;/code&gt; is not.  This happens because the inner arrays
are still references when the slice operator is used.  However with
&lt;code&gt;deepcopy&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; was fully copied.

So, should I worry about references every time I use a function or
&lt;code&gt;=&lt;/code&gt;?  The good news is that you only have to worry about
references when using dictionaries and lists.  Numbers and strings
create references when assigned but every operation on numbers and
strings that modifies them creates a new copy so you can never modify
them unexpectedly.  You do have to think about references when you are
modifying a list or a dictionary.

By now you are probably wondering why are references used at all?  The
basic reason is speed.  It is much faster to make a reference to a
thousand element list than to copy all the elements.  The other reason
is that it allows you to have a function to modify the inputted list
or dictionary.  Just remember about references if you ever have some
weird problem with data being changed when it shouldn't be.

&lt;!--  On Sun, Sep 09, 2001 at 02:46:06PM +0100, Hamish Lawson wrote: --&gt;
&lt;!--  Hello Josh --&gt;
&lt;!--   --&gt;
&lt;!--  I think it's great that you have undertaken to write a non-programmer's --&gt;
&lt;!--  tutorial on Python. However may I suggest that a different approach to --&gt;
&lt;!--  the discussion of variables and references may make things easier for --&gt;
&lt;!--  both you and the reader, and lead to less potential confusion for the --&gt;
&lt;!--  novice when they explore Python further? --&gt;
&lt;!--   --&gt;
&lt;!--  Programming introductions that use a language like C or Pascal as the --&gt;
&lt;!--  medium often discuss variables in terms of boxes that store data. But --&gt;
&lt;!--  for a language like Python, I think this approach ends up making the --&gt;
&lt;!--  whole subject of variables and references more complicated than it need --&gt;
&lt;!--  be and means that the reader has a lot to unlearn later. --&gt;
&lt;!--  --&gt;
&lt;!--  Saying that "a = []" stores an empty list in 'a' and that "b = a" makes --&gt;
&lt;!--  'b' a reference to 'a' makes it appear that assignment is --&gt;
&lt;!--  context-dependent when it isn't really. Things get even trickier when --&gt;
&lt;!--  you have statements like "b = f()". Instead a more coherent approach --&gt;
&lt;!--  might be to say that assignment to a variable stores a reference to --&gt;
&lt;!--  some object. The difference between "a = []" and "b = a" then lies in --&gt;
&lt;!--  whether it is a newly created object that you are storing a reference --&gt;
&lt;!--  to (as produced by '[]') or an existing object (as produced by 'a'), --&gt;
&lt;!--  *not* in whether or not a reference gets stored in the variable - it --&gt;
&lt;!--  always does. I believe this approach leads to much less confusion --&gt;
&lt;!--  overall and less need for special explanations. --&gt;
&lt;!--   --&gt;
&lt;!--  Fredrik Lundh has a good explanation of objects and references in --&gt;
&lt;!--  Python at http://www.effbot.org/guides/python-objects.htm. --&gt;
&lt;!--   --&gt;
&lt;!--  I hope you have found this useful. --&gt;
{{Non-Programmer's Tutorial for Python 2.6/Navigation|Using Modules|Revenge of the Strings}}</text>
      <sha1>p9n19fn0t9vquwcqr13qhxy6fr1nref</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Revenge of the Strings</title>
    <ns>0</ns>
    <id>10028</id>
    <revision>
      <id>2281919</id>
      <parentid>1893350</parentid>
      <timestamp>2012-03-07T19:17:43Z</timestamp>
      <contributor>
        <ip>78.102.164.9</ip>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="13587" xml:space="preserve">&lt;!-- things to talk about: chr ord float int len repr s+b s[i] s[i:j] s*n find rfind replace strip --&gt;
&lt;!-- Start with indexing, user chr and ord to show how to do manual int&lt;-&gt;string --&gt;
&lt;!-- Repeate the &lt;B&gt; with slices and do actual html --&gt;
&lt;!-- Do some more phrasing --&gt;
&lt;!----&gt;
&lt;!-- Okay here is todays typing exercise: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- def to_string(in_int): --&gt;
&lt;!--     "Converts an integer to a string" --&gt;
&lt;!--     out_str = "" --&gt;
&lt;!--     prefix = "" --&gt;
&lt;!--     if in_int &lt; 0: --&gt;
&lt;!--         prefix = "-" --&gt;
&lt;!--         in_int = -in_int         --&gt;
&lt;!--     while in_int / 10 != 0: --&gt;
&lt;!--         out_str = chr(ord('0')+in_int % 10) + out_str --&gt;
&lt;!--         in_int = in_int / 10 --&gt;
&lt;!--     out_str = chr(ord('0')+in_int % 10) + out_str --&gt;
&lt;!--     return prefix + out_str --&gt;
&lt;!--  --&gt;
&lt;!-- def to_int(in_str): --&gt;
&lt;!--     "Converts a string to an integer" --&gt;
&lt;!--     out_num = 0 --&gt;
&lt;!--     if in_str[0] == "-": --&gt;
&lt;!--         multiplier = -1 --&gt;
&lt;!--         in_str = in_str[1:] --&gt;
&lt;!--     else: --&gt;
&lt;!--         multiplier = 1 --&gt;
&lt;!--     for x in range(0,len(in_str)): --&gt;
&lt;!--         out_num = out_num * 10 + ord(in_str[x]) - ord('0') --&gt;
&lt;!--     return out_num * multiplier --&gt;
&lt;!--  --&gt;
&lt;!-- print to_string(2) --&gt;
&lt;!-- print to_string(23445) --&gt;
&lt;!-- print to_string(-23445) --&gt;
&lt;!-- print to_int("14234") --&gt;
&lt;!-- print to_int("12345") --&gt;
&lt;!-- print to_int("-3512") --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!-- The output is: --&gt;
&lt;!-- &lt;source lang="python"&gt; --&gt;
&lt;!-- 2 --&gt;
&lt;!-- 23445 --&gt;
&lt;!-- -23445 --&gt;
&lt;!-- 14234 --&gt;
&lt;!-- 12345 --&gt;
&lt;!-- -3512 --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!--  --&gt;
&lt;!-- So how does it work?  The first detail to notice is that it defines two different functions, one that converts a string to a number and one that converts a number to a string.  Notice that this function does string manipulation similar to how lists can be manipulated.  For example the line &lt;code&gt;if in_str[0] == "-"&lt;/code&gt; uses indexing to look at the first letter in the string.  Another thing that strings can do that lists can is using slices.  The line &lt;code&gt;in_str = in_str[1:]&lt;/code&gt; uses slices to get all but the first character of in_str (or drops the first letter).  However you cannot use slices or indexing to assign to a letter or location in a string. --&gt;
&lt;!--  --&gt;
&lt;!-- Two new things to introduced are the functions &lt;code&gt;ord&lt;/code&gt; and &lt;code&gt;chr&lt;/code&gt;.  The  --&gt;
&lt;!-- &lt;code&gt;ord&lt;/code&gt; function takes a character (a string of length one) and returns the ASCII value of the character.  The function &lt;code&gt;chr&lt;/code&gt; is its inverse and takes a ASCII value and returns a character.  The expression &lt;code&gt;ord(in_str[x]) - ord('0')&lt;/code&gt; uses the &lt;code&gt;ord&lt;/code&gt; function to find the value of a string.  This works since '0' through '9' have ASCII values that are all in a row.  The ASCII value of '0' is 48 and the ASCII value of '9' is 57 so when we subtract 57-48 we get 9 and this works similarly with other numbers.  The expression &lt;code&gt;chr(ord('0')+in_int % 10)&lt;/code&gt; works in a similar manor but in reverse.
--&gt;
And now presenting a cool trick that can be done with strings:
&lt;source lang="python"&gt;
def shout(string):
    for character in string:
        print "Gimme a " + character
        print "'" + character + "'"
shout("Lose")

def middle(string):
    print "The middle character is:", string[len(string) / 2]

middle("abcdefg")
middle("The Python Programming Language")
middle("Atlanta")
&lt;/source&gt;

And the output is:

 Gimme a L
 'L'
 Gimme a o
 'o'
 Gimme a s
 's'
 Gimme a e
 'e'
 The middle character is: d
 The middle character is: r
 The middle character is: a

What these programs demonstrate is that strings are similar to lists in several ways.  The &lt;code&gt;shout()&lt;/code&gt; function shows that &lt;code&gt;for&lt;/code&gt; loops can be used with strings just as they can be used with lists.  The &lt;code&gt;middle&lt;/code&gt; procedure shows that that strings can also use the &lt;code&gt;len()&lt;/code&gt; function and array indexes and slices.  Most list features work on strings as well.

The next feature demonstrates some string specific features:
&lt;source lang="python"&gt;
def to_upper(string):
    ## Converts a string to upper case
    upper_case = ""
    for character in string:
        if 'a' &lt;= character &lt;= 'z':
            location = ord(character) - ord('a')
            new_ascii = location + ord('A')
            character = chr(new_ascii)
        upper_case = upper_case + character
    return upper_case

print to_upper("This is Text")
&lt;/source&gt;

with the output being:

 THIS IS TEXT

This works because the computer represents the characters of a string as numbers from 0 to 255.  Python has a function called &lt;code&gt;ord()&lt;/code&gt; (short for ordinal) that returns a character as a number.  There is also a corresponding function called &lt;code&gt;chr()&lt;/code&gt; that converts a number into a character.  With this in mind the program should start to be clear.  The first detail is the line: &lt;code&gt;if 'a' &lt;= character &lt;= 'z':&lt;/code&gt; which checks to see if a letter is lower case.  If it is then the next lines are used.  First it is converted into a location so that a&amp;nbsp;=&amp;nbsp;0, b&amp;nbsp;=&amp;nbsp;1, c&amp;nbsp;=&amp;nbsp;2 and so on with the line: &lt;code&gt;location = ord(character) - ord('a')&lt;/code&gt;.  Next the new value is found with &lt;code&gt;new_ascii = location + ord('A')&lt;/code&gt;.  This value is converted back to a character that is now upper case.

Now for some interactive typing exercise:

 &gt;&gt;&gt; '''# Integer to String'''
 &gt;&gt;&gt; '''2'''
 2
 &gt;&gt;&gt; '''repr(2)'''
 '2'
 &gt;&gt;&gt; '''-123'''
 -123
 &gt;&gt;&gt; '''repr(-123)'''
 '-123'
 &gt;&gt;&gt; '''`123`'''
 '123'
 &gt;&gt;&gt; '''# String to Integer'''
 &gt;&gt;&gt; '''"23"'''
 '23'
 &gt;&gt;&gt; '''int("23")'''
 23
 &gt;&gt;&gt; '''"23" * 2'''
 '2323'
 &gt;&gt;&gt; '''int("23") * 2'''
 46
 &gt;&gt;&gt; '''# Float to String'''
 &gt;&gt;&gt; '''1.23'''
 1.23
 &gt;&gt;&gt; '''repr(1.23)'''
 '1.23'
 &gt;&gt;&gt; '''# Float to Integer'''
 &gt;&gt;&gt; '''1.23'''
 1.23
 &gt;&gt;&gt; '''int(1.23)'''
 1
 &gt;&gt;&gt; '''int(-1.23)'''
 -1
 &gt;&gt;&gt; '''# String to Float'''
 &gt;&gt;&gt; '''float("1.23")'''
 1.23
 &gt;&gt;&gt; '''"1.23"''' 
 '1.23'
 &gt;&gt;&gt; '''float("123")'''
 123.0
 &gt;&gt;&gt; '''`float("1.23")`'''
 '1.23'

If you haven't guessed already the function &lt;code&gt;repr()&lt;/code&gt; can convert a integer to a string and the function &lt;code&gt;int()&lt;/code&gt; can convert a string to an integer. The function &lt;code&gt;float()&lt;/code&gt; can convert a string to a float.  The &lt;code&gt;repr()&lt;/code&gt; function returns a printable representation of something. &lt;code&gt;`...`&lt;/code&gt; converts almost everything into a string, too. Here are some examples of this:

 &gt;&gt;&gt; '''repr(1)'''
 '1'
 &gt;&gt;&gt; '''repr(234.14)'''
 '234.14'
 &gt;&gt;&gt; '''repr([4, 42, 10])'''
 '[4, 42, 10]'
 &gt;&gt;&gt; '''`[4, 42, 10]`'''
 '[4, 42, 10]'

The &lt;code&gt;int()&lt;/code&gt; function tries to convert a string (or a float) into a integer.  There is also a similar function called &lt;code&gt;float()&lt;/code&gt; that will convert a integer or a string into a float.  Another function that Python has is the &lt;code&gt;eval()&lt;/code&gt; function.  The &lt;code&gt;eval()&lt;/code&gt; function takes a string and returns data of the type that python thinks it found.  For example:

 &gt;&gt;&gt; '''v = eval('123')'''
 &gt;&gt;&gt; '''print v, type(v)'''
 123 &lt;type 'int'&gt;
 &gt;&gt;&gt; '''v = eval('645.123')'''
 &gt;&gt;&gt; '''print v, type(v)'''
 645.123 &lt;type 'float'&gt;
 &gt;&gt;&gt; '''v = eval('[1, 2, 3]')'''
 &gt;&gt;&gt; '''print v, type(v)'''
 [1, 2, 3] &lt;type 'list'&gt;

If you use the &lt;code&gt;eval()&lt;/code&gt; function you should check that it returns the type that you expect.

One useful string function is the &lt;code&gt;split()&lt;/code&gt; method. Here's an example:

 &gt;&gt;&gt; '''"This is a bunch of words".split()'''
 ['This', 'is', 'a', 'bunch', 'of', 'words']
 &gt;&gt;&gt; '''text = "First batch, second batch, third, fourth"'''
 &gt;&gt;&gt; '''text.split(",")'''
 ['First batch', ' second batch', ' third', ' fourth']

Notice how &lt;code&gt;split()&lt;/code&gt; converts a string into a list of strings.  The string is split by whitespace by default or by the optional argument (in this case a comma).
You can also add another argument that tells &lt;code&gt;split()&lt;/code&gt; how many times the separator will be used to split the text. For example:

 &gt;&gt;&gt; '''list = text.split(",")'''
 &gt;&gt;&gt; '''len(list)'''
 4
 &gt;&gt;&gt; '''list[-1]'''
 ' fourth'
 &gt;&gt;&gt; '''list = text.split(",", 2)'''
 &gt;&gt;&gt; '''len(list)'''
 3
 &gt;&gt;&gt; '''list[-1]'''
 ' third, fourth'

&lt;!-- TODO add more on strings --&gt;
=== Slicing strings (and lists) ===

Strings can be cut into pieces &amp;mdash; in the same way as it was shown for lists in the previous chapter &amp;mdash; by using the ''slicing'' "operator" &lt;tt&gt;[:]&lt;/tt&gt;. The slicing operator works in the same way as before: text[first_index:last_index] (in very rare cases there can be another colon and a third argument, as in the example shown below).

In order not to get confused by the index numbers, it is easiest to see them as ''clipping places'', possibilities to cut a string into parts. Here is an example, which shows the clipping places (in yellow) and their index numbers (red and blue) for a simple text string:

&lt;tt&gt;
{| style="text-align:center" cellspacing="0px"
|
| style="width:2ex" |
| style="width:2ex;color:red" |0
| style="width:2ex" |
| style="width:2ex;color:red" |1
| style="width:2ex" |
| style="width:2ex;color:red" |2
| style="width:2ex" |
| style="width:2ex" | ...
| style="width:2ex" |
| style="width:2ex;color:blue" | -2
| style="width:2ex" |
| style="width:2ex;color:blue" | -1
| style="width:2ex" |
| style="width:2ex" |
| style="width:2ex" |
|-
|
|
| style="background:#FFFF88" |&amp;darr;
|
| style="background:#FFFF88" |&amp;darr;
|
| style="background:#FFFF88" |&amp;darr;
|
| style="background:#FFFF88" |&amp;darr;
|
| style="background:#FFFF88" |&amp;darr;
|
| style="background:#FFFF88" |&amp;darr;
|
| style="background:#FFFF88" |&amp;darr;
|
|-
| text = 
|"
| style="background:#FFFF88" |
!S 
| style="background:#FFFF88" |
!T
| style="background:#FFFF88" |
!R
| style="background:#FFFF88" |
!I
| style="background:#FFFF88" |
!N
| style="background:#FFFF88" |
!G
| style="background:#FFFF88" |
|"
|-
|
|
| style="background:#FFFF88" |&amp;uarr;
|
| style="background:#FFFF88" |
|
| style="background:#FFFF88" |
|
| style="background:#FFFF88" |
|
| style="background:#FFFF88" |
|
| style="background:#FFFF88" |
|
| style="background:#FFFF88" |&amp;uarr;
|
|-
|
|
|[:
|
|
|
|
|
|
|
|
|
|
|
|:]
|
|}
&lt;/tt&gt;

Note that the red indexes are counted from the beginning of the string and the blue ones from the end of the string backwards. (Note that there is no blue -0, which could seem to be logical at the end of the string. Because &lt;tt&gt;-0 == 0&lt;/tt&gt;, (-0 means "beginning of the string" as well.)  Now we are ready to use the indexes for slicing operations:

&lt;tt&gt;
{|
|-
|text[1:4] || style="width:3em;text-align:center" | &amp;rarr; || "TRI"
|-
|text[:5] || style="width:3em;text-align:center" | &amp;rarr; || "STRIN"
|-
|text[:-1] || style="width:3em;text-align:center" | &amp;rarr; || "STRIN"
|-
|text[-4:] || style="width:3em;text-align:center" | &amp;rarr; || "RING"
|-
|text[2] || style="width:3em;text-align:center" | &amp;rarr; || "R"
|-
|text[:] || style="width:3em;text-align:center" | &amp;rarr; || "STRING"
|-
|text[::-1] || style="width:3em;text-align:center" | &amp;rarr; || "GNIRTS"
|}
&lt;/tt&gt;

&lt;tt&gt;text[1:4]&lt;/tt&gt; gives us all of the &lt;tt&gt;text&lt;/tt&gt; string between clipping places 1 and 4, "&lt;tt&gt;TRI&lt;/tt&gt;". If you omit one of the [first_index:last_index] arguments, you get the beginning or end of the string as default: &lt;tt&gt;text[:5]&lt;/tt&gt; gives "&lt;tt&gt;STRIN&lt;/tt&gt;". For both &lt;tt&gt;first_index&lt;/tt&gt; and &lt;tt&gt;last_index&lt;/tt&gt; we can use both the red and the blue numbering schema: &lt;tt&gt;text[:-1]&lt;/tt&gt; gives the same as &lt;tt&gt;text[:5]&lt;/tt&gt;, because the index -1 is at the same place as 5 in this case. If we do not use an argument containing a colon, the number is treated in a different way: &lt;tt&gt;text[2]&lt;/tt&gt; gives us one character following the second clipping point, "&lt;tt&gt;R&lt;/tt&gt;". The special slicing operation &lt;tt&gt;text[:]&lt;/tt&gt; means "from the beginning to the end" and produces a copy of the entire string (or list, as shown in the previous chapter).

Last but not least, the slicing operation can have a second colon and a third argument, which is interpreted as the "step size": &lt;tt&gt;text[::-1]&lt;/tt&gt; is &lt;tt&gt;text&lt;/tt&gt; from beginning to the end, with a step size of -1. -1 means "every character, but in the other direction". "&lt;tt&gt;STRING&lt;/tt&gt;" backwards is "&lt;tt&gt;GNIRTS&lt;/tt&gt;" (test a step length of 2, if you have not got the point here).

All these slicing operations work with lists as well. In that sense strings are just a special case of lists, where the list elements are single characters. Just remember the concept of ''clipping places'', and the indexes for slicing things will get a lot less confusing.

=== Examples ===
&lt;source lang="python"&gt;
# This program requires an excellent understanding of decimal numbers
def to_string(in_int):
    """Converts an integer to a string"""
    out_str = ""
    prefix = ""
    if in_int &lt; 0:
        prefix = "-"
        in_int = -in_int
    while in_int / 10 != 0:
        out_str = chr(ord('0') + in_int % 10) + out_str
        in_int = in_int / 10
    out_str = chr(ord('0') + in_int % 10) + out_str
    return prefix + out_str

def to_int(in_str):
    """Converts a string to an integer"""
    out_num = 0
    if in_str[0] == "-":
        multiplier = -1
        in_str = in_str[1:]
    else:
        multiplier = 1
    for x in range(0, len(in_str)):
        out_num = out_num * 10 + ord(in_str[x]) - ord('0')
    return out_num * multiplier

print to_string(2)
print to_string(23445)
print to_string(-23445)
print to_int("14234")
print to_int("12345")
print to_int("-3512")
&lt;/source&gt;

The output is:

 2
 23445
 -23445
 14234
 12345
 -3512

{{Non-Programmer's Tutorial for Python 2.6/Navigation|More on Lists|File IO}}</text>
      <sha1>snv6mrthve5ly1ve0v05s4lzs22lvwh</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/The End</title>
    <ns>0</ns>
    <id>10031</id>
    <revision>
      <id>3040047</id>
      <parentid>3038484</parentid>
      <timestamp>2016-01-22T19:21:22Z</timestamp>
      <contributor>
        <username>Chazz</username>
        <id>32521</id>
      </contributor>
      <comment>Rejected the last text change (by [[Special:Contributions/77.105.20.151|77.105.20.151]]) and restored revision 2676490 by 75.68.115.56</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1573" xml:space="preserve">&lt;!-- Road map\\ --&gt;
&lt;!-- boolean expressions\\ --&gt;
&lt;!-- defining functions\\ --&gt;
&lt;!-- more on lists --&gt;
&lt;!-- modules\\ --&gt;
&lt;!-- dictionaries --&gt;
&lt;!-- the end\\ --&gt;
&lt;!-- ######################################################################### --&gt;
&lt;!-- ##############        THE END OF THE BOOK           ##################### --&gt;
&lt;!-- ######################################################################### --&gt;
For the moment I recommend looking at [http://docs.python.org/2/tutorial/ The Python 2 Tutorial] by [http://www.python.org/~guido/ Guido van Rossum] for more topics. If you have been following this tutorial, you should be able to understand a fair amount of it. If you want to get deeper into Python, [http://learnpythonthehardway.org/book/ Learn Python the Hard Way] is a nice on-line textbook, although targeted at people with a more solid programming background. The [[Python Programming]] wikibook can be worth looking at, too.

This tutorial is very much a work in progress.  Thanks to everyone who has sent me emails about it.  I enjoyed reading them, even when I have not always been the best replier.  

Happy programming, may it change your life and the world.

{{TODO|
&lt;source lang="python"&gt;
TODO = ['errors',
        'how to make modules',
        'more on loops',
        'more on strings',
        'more on dictionaries',
        'file io',
        'how to use online help',
        'try',
        'pickle',
        'break and continue'] 
&lt;/source&gt;
}}

&amp;nbsp;

{{Non-Programmer's Tutorial for Python 2.0/Navigation|Dealing with the imperfect|FAQ}}</text>
      <sha1>cqkphknzq90ir9imt3pwcxp2y8pl340</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Using Modules</title>
    <ns>0</ns>
    <id>10025</id>
    <revision>
      <id>3420951</id>
      <parentid>2679926</parentid>
      <timestamp>2018-05-07T20:43:42Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>510943</id>
      </contributor>
      <comment>tag fix</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4205" xml:space="preserve">Here's this chapter's typing exercise (name it cal.py). &lt;code&gt;import&lt;/code&gt; actually looks for a file named calendar.py and reads it in.  If the file is named calendar.py and it sees an "import calendar" it tries to read in itself which works poorly at best.)):

&lt;source lang="python"&gt;
import calendar
year = input("Type in the year number: ")
calendar.prcal(year)
&lt;/source&gt;

And here is part of the output I got:

 Type in the year number: 2001
 
                                  2001                                  
 
        January                  February                    March      
 
 Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
 1  2  3  4  5  6  7                1  2  3  4                1  2  3  4     
 8  9 10 11 12 13 14       5  6  7  8  9 10 11       5  6  7  8  9 10 11
 15 16 17 18 19 20 21      12 13 14 15 16 17 18      12 13 14 15 16 17 18     
 22 23 24 25 26 27 28      19 20 21 22 23 24 25      19 20 21 22 23 24 25     
 29 30 31                  26 27 28                  26 27 28 29 30 31        

(I skipped some of the output, but I think you get the idea.) So what does the program do?  The first line &lt;code&gt;import calendar&lt;/code&gt; uses a new command &lt;code&gt;import&lt;/code&gt;.  The command &lt;code&gt;import&lt;/code&gt; loads a module (in this case the &lt;code&gt;calendar&lt;/code&gt; module).  To see the commands available in the standard modules either look in the library reference for python (if you downloaded it) or go to http://docs.python.org/library/.  If you look at the documentation for the calendar module, it lists a function called &lt;code&gt;prcal&lt;/code&gt; that prints a calendar for a year.  The line &lt;code&gt;calendar.prcal(year)&lt;/code&gt; uses this function.  In summary to use a module &lt;code&gt;import&lt;/code&gt; it and then use &lt;code&gt;module_name.function&lt;/code&gt; for functions in the module.  Another way to write the program is:

&lt;source lang="python"&gt;
from calendar import prcal

year = input("Type in the year number: ")
prcal(year)
&lt;/source&gt; 

This version imports a specific function from a module.  Here is another program that uses the Python Library (name it something like clock.py) (press Ctrl and the 'c' key at the same time to terminate the program):

&lt;source lang="python"&gt;
from time import time, ctime

prev_time = ""
while True:
    the_time = ctime(time())
    if prev_time != the_time:
        print "The time is:", ctime(time())
        prev_time = the_time
&lt;/source&gt;

With some output being:

 The time is: Sun Aug 20 13:40:04 2000
 The time is: Sun Aug 20 13:40:05 2000
 The time is: Sun Aug 20 13:40:06 2000
 The time is: Sun Aug 20 13:40:07 2000
 
 Traceback (innermost last):
  File "clock.py", line 5, in ?
     the_time = ctime(time())
 
 KeyboardInterrupt

The output is infinite of course so I canceled it (or the output at least continues until Ctrl+C is pressed).  The program just does a infinite loop (&lt;code&gt;True&lt;/code&gt; is always true, so &lt;code&gt;while True:&lt;/code&gt; goes forever) and each time checks to see if the time has changed and prints it if it has.  Notice how multiple names after the import statement are used in the line &lt;code&gt;from time import time, ctime&lt;/code&gt;.  

The Python Library contains many useful functions.  These functions give your programs more abilities and many of them can simplify programming in Python.

=== Exercises ===
Rewrite the High_low.py program from section [[../Decisions#Examples|Decisions]] to use a random integer between 0 and 99 instead of the hard-coded 78. Use the Python documentation to find an appropriate module and function to do this.

{{Solution|title=Solution|text=

Rewrite the High_low.py program from section [[../Decisions#Examples|Decisions]] to use an random integer between 0 and 99 instead of the hard-coded 78. Use the Python documentation to find an appropriate module and function to do this.

&lt;source lang="python"&gt;
from random import randint
number = randint(0, 99)
guess = -1
while guess != number: 
    guess = input ("Guess a number: ")
    if guess &gt; number:
        print "Too high"
    elif guess &lt; number:
            print "Too low"
print "Just right"

&lt;/source&gt;
}}

{{Template:Non-Programmer's Tutorial for Python 2.6/Navigation|Dictionaries|More on Lists}}</text>
      <sha1>87jxryxmlcujwpowcqnyzja3q6cj1ui</sha1>
    </revision>
  </page>
  <page>
    <title>Non-Programmer's Tutorial for Python 2.6/Who Goes There?</title>
    <ns>0</ns>
    <id>9930</id>
    <revision>
      <id>3483131</id>
      <parentid>3483130</parentid>
      <timestamp>2018-11-03T16:18:02Z</timestamp>
      <contributor>
        <ip>75.181.67.51</ip>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9717" xml:space="preserve">=== Input and Variables ===
Now I feel it is time for a really complicated program.  Here it is:
&lt;source lang="python"&gt;
print "Halt!"
user_reply = raw_input("Who goes there? ") 
print "You may pass,", user_reply
&lt;/source&gt;
(user response: using Linux and Geany editor...only option shown was 'user_return'...output was correct. However, when manually typed 'user_reply' also worked correctly, even though not displayed as a option in Geany...what is the functional difference between these two?)

When '''I''' ran it, here is what '''my''' screen showed:

 Halt!
 Who goes there? '''Josh'''
 You may pass, Josh

''Note: After running the code by pressing F5, the Python shell will only give output:''

 Halt!
 Who goes there?

''You need to enter your name in the Python shell, and then press Enter to get the rest of the output.''

Of course when you run the program your screen will look different
because of the &lt;code&gt;raw_input()&lt;/code&gt; statement. When you ran the program
you probably noticed (you did run the program, right?) that you had to
type in your name and then press Enter. Then the program printed out
some more text and also your name. This is an example of ''input''.  The
program reaches a certain point and then waits for the user to input
some data that the program can use later.

Of course, getting information from the user would be useless if we didn't have anywhere to put that information and this is where variables come in.  In the previous program, &lt;code&gt;user_reply&lt;/code&gt; is a ''variable''.  Variables are like a box that can store some piece of data.  Here is a program to show examples of variables:
&lt;source lang="python"&gt;
a = 123.4
b23 = 'Spam'
first_name = "Bill"
b = 432
c = a + b
print "a + b is", c
print "first_name is", first_name
print "Sorted Parts, After Midnight or", b23
&lt;/source&gt;

And here is the output:

 a + b is 555.4
 first_name is Bill
 Sorted Parts, After Midnight or Spam

The variables in the above program are &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b23&lt;/code&gt;, &lt;code&gt;first_name&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;.  A variable in Python can store any type of data - in this example we stored some strings (e.g. "Bill") and some numbers (e.g. 432).

Note the difference between strings and variable names.  Strings are marked with quotation marks, which tells the computer "don't try to understand, just take this text as it is":

&lt;source lang="python"&gt;
print "first_name"
&lt;/source&gt;

This would print the text:

 first_name

as-is.  Variable names are written without any quotation marks and instruct the computer "use the value I've previously stored under this name":

&lt;source lang="python"&gt;
print first_name
&lt;/source&gt;

which would print (after the previous example):

 Bill

=== Assignment ===

Okay, so we have these boxes called variables and also data that can go into the variable.  The computer will see a line like &lt;code&gt;first_name = "Bill"&lt;/code&gt; and it reads it as "Put the string &lt;code&gt;Bill&lt;/code&gt; into the box (or variable) &lt;code&gt;first_name&lt;/code&gt;". Later on it sees the statement &lt;code&gt;c = a + b&lt;/code&gt; and it reads it as "put the sum of &lt;code&gt;a + b&lt;/code&gt; or &lt;code&gt;123.4 + 432&lt;/code&gt; which equals &lt;code&gt;555.4&lt;/code&gt; into &lt;code&gt;c&lt;/code&gt;". The right hand side of the statement (&lt;code&gt;a + b&lt;/code&gt;) is ''evaluated'' and the result is stored in the variable on the left hand side (&lt;code&gt;c&lt;/code&gt;). This is called ''assignment'', and you should not confuse the assignment equal sign (&lt;code&gt;=&lt;/code&gt;) with "equality" in a mathematical sense here (that's what &lt;code&gt;==&lt;/code&gt; will be used for later).

Here is another example of variable usage:
&lt;source lang="python"&gt;
a = 1
print a
a = a + 1
print a
a = a * 2
print a
&lt;/source&gt;

And of course here is the output:

 1
 2
 4

Even if it is the same variable on both sides the computer still reads it as "First find out the data to store and then find out where the data goes".

One more program before I end this chapter:
&lt;source lang="python"&gt;
number = input("Type in a number: ")
text = raw_input("Type in a string: ")
print "number =", number
print "number is a", type(number)
print "number * 2 =", number * 2
print "text =", text
print "text is a", type(text)
print "text * 2 =", text * 2
&lt;/source&gt;

The output I got was:

 Type in a Number: '''12.34'''
 Type in a String: '''Hello'''
 number = 12.34
 number is a &lt;type 'float'&gt;
 number * 2 = 24.68
 text = Hello
 text is a &lt;type 'str'&gt;
 text * 2 = HelloHello

Notice that &lt;code&gt;number&lt;/code&gt; was gotten with &lt;code&gt;input()&lt;/code&gt; while &lt;code&gt;text&lt;/code&gt; was gotten with &lt;code&gt;raw_input()&lt;/code&gt;. &lt;code&gt;raw_input()&lt;/code&gt; returns a string while &lt;code&gt;input()&lt;/code&gt; returns a number. When you want the user to type in a number use &lt;code&gt;input()&lt;/code&gt; but if you want the user to type in a string use &lt;code&gt;raw_input()&lt;/code&gt;.

{{mbox
| image = [[File:Ambox_important.svg|40px|alt=Exclamation mark]]
| text  = Only use &lt;code&gt;input()&lt;/code&gt; when you trust your users with the computer the program runs on. &lt;br&gt;
Everything entered into &lt;code&gt;input()&lt;/code&gt; dialog is evaluated as a Python expression and thus allows the user to take control of your program. For example, entering &lt;code&gt;__import__('os').system('dir')&lt;/code&gt; executes the &lt;code&gt;dir&lt;/code&gt; command. You should instead get a string and convert it to the necessary type like &lt;code&gt;int(raw_input())&lt;/code&gt; or &lt;code&gt;float(raw_input())&lt;/code&gt;.
}}

The second half of the program uses &lt;code&gt;type()&lt;/code&gt; which tells what a
variable is. Numbers are of type &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt;, which are
short for ''integer'' and ''floating point'' (mostly used for decimal numbers), respectively. Text strings are of type &lt;code&gt;str&lt;/code&gt;, short for ''string''. Integers and floats can be worked on by mathematical functions, strings cannot. Notice how when python
multiplies a number by an integer the expected thing happens. However
when a string is multiplied by an integer the result is that multiple
copies of the string are produced (i.e., &lt;code&gt;text * 2 = HelloHello&lt;/code&gt;).

The operations with strings do different things than 
operations with numbers.  Here are some interactive mode examples
to show that some more.

&lt;pre&gt;
&gt;&gt;&gt; "This" + " " + "is" + " joined."
'This is joined.'
&gt;&gt;&gt; "Ha, " * 5
'Ha, Ha, Ha, Ha, Ha, '
&gt;&gt;&gt; "Ha, " * 5 + "ha!"
'Ha, Ha, Ha, Ha, Ha, ha!'
&gt;&gt;&gt; 
&lt;/pre&gt;

This could also be done as a program:

&lt;source lang="python"&gt;
print "This" + " " + "is" + " joined."
print "Ha, " * 5
print "Ha, " * 5 + "ha!"
&lt;/source&gt;

Here is the list of some string operations:

{| class="wikitable"
!Operation 
!Symbol 
!Example
|-
|Repetition 
|&lt;code&gt;*&lt;/code&gt; 
|&lt;code&gt;"i" * 5 == "iiiii"&lt;/code&gt;
|-
|Concatenation 
|&lt;code&gt;+&lt;/code&gt; 
|&lt;code&gt;"Hello, " + "World!" == "Hello, World!"&lt;/code&gt;
|}
&lt;!----&gt;
&lt;!-- n_1 = input("First Number? ") --&gt;
&lt;!-- n_2 = input("Second Number? ") --&gt;
&lt;!-- name = raw_input("Input your name: ") --&gt;
&lt;!-- print name,", the sum of the first number and the second number is", n_1 + n_2 --&gt;
&lt;!-- print "n_1 =",repr(n_1) --&gt;
&lt;!-- print "n_2 =",repr(n_2) --&gt;
&lt;!-- print "name =",repr(name) --&gt;
&lt;!-- &lt;/source&gt; --&gt;
&lt;!----&gt;
&lt;!----&gt;
&lt;!-- You use &lt;code&gt;raw_input&lt;/code&gt; when you want to get a string from the user. You use &lt;code&gt;int&lt;/code&gt; around the &lt;code&gt;raw_input&lt;/code&gt; when you want to get a number.   --&gt;

=== Examples ===

'''Rate_times.py'''
&lt;source lang="python"&gt;
# This program calculates rate and distance problems
print "Input a rate and a distance"
rate = input("Rate: ")
distance = input("Distance: ")
print "Time:", (distance / rate)
&lt;/source&gt;

Sample runs:

 Input a rate and a distance
 Rate: '''5'''
 Distance: '''10'''
 Time: 2

 Input a rate and a distance
 Rate: '''3.52'''
 Distance: '''45.6'''
 Time: 12.9545454545

'''Area.py'''
&lt;source lang="python"&gt;
# This program calculates the perimeter and area of a rectangle
print "Calculate information about a rectangle"
length = input("Length: ")
width = input("Width: ")
print "Area", length * width
print "Perimeter", 2 * length + 2 * width
&lt;/source&gt;

Sample runs:

 Calculate information about a rectangle
 Length: '''4'''
 Width: '''3'''
 Area 12
 Perimeter 14

 Calculate information about a rectangle
 Length: '''2.53'''
 Width: '''5.2'''
 Area 13.156
 Perimeter 15.46

'''temperature.py'''
&lt;source lang="python"&gt;
# Converts Fahrenheit to Celsius
temp = input("Fahrenheit temperature: ")
print (temp - 32.0) * 5.0 / 9.0
&lt;/source&gt;

Sample runs:

 Fahrenheit temperature: '''32'''
 0.0

 Fahrenheit temperature: '''-40'''
 -40.0

 Fahrenheit temperature: '''212'''
 100.0

 Fahrenheit temperature: '''98.6'''
 37.0

=== Exercises ===
# Write a program that gets 2 string variables and 2 integer variables from the user, concatenates (joins them together with no spaces) and displays the strings, then multiplies the two numbers on a new line.

{{Solution|title=Solution|text=

Write a program that gets 2 string variables and 2 integer variables
from the user, concatenates (joins them together with no spaces) and
displays the strings, then multiplies the two numbers on a new line.

&lt;source lang="python"&gt;  
string1 = raw_input('String 1: ')
string2 = raw_input('String 2: ')
int1 = input('Integer 1: ')
int2 = input('Integer 2: ')
print string1 + string2
print int1 * int2
&lt;/source&gt;

Another Solution
&lt;source lang="python"&gt;
print "this is an exercise"
number_1 = input("please input the first number: ")
number_2 = input("Please input the second number: ")

string_1 = raw_input("Please input the first half of the word: ")
string_2 = raw_input("please input the second half of the word: ")

print "the words you input is '" + string_1 + string_2 + "'"
print "the result of the 2 numbers is:", number_1 * number_2
&lt;/source&gt;
}}

{{Non-Programmer's Tutorial for Python 2.6/Navigation|Hello, World|Count to 10}}</text>
      <sha1>8x58ap92b4uufmo3bssrf1n1zb4lmds</sha1>
    </revision>
  </page>
  <page>
    <title>Wikibooks:GNU Free Documentation License</title>
    <ns>4</ns>
    <id>292</id>
    <restrictions>sysop</restrictions>
    <revision>
      <id>2151476</id>
      <parentid>1998962</parentid>
      <timestamp>2011-07-31T16:38:19Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <comment>update</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="23801" xml:space="preserve">__NOEDITSECTION__ __NOTOC__
&lt;noinclude&gt;{{pp-protected|small=yes}}
{{shortcut|WB:GFDL}}&lt;/noinclude&gt;
{{mbox
| type = style
| image =  [[Image:Ambox warning yellow.svg|40px|Caution|link=]]
| text = As of July 15, 2009 Wikibooks has moved to a dual-licensing system that supersedes the previous GFDL only licensing.  In short, this means that text licensed under the GFDL only can no longer be imported to Wikibooks, retroactive to 1 November 2008.  Additionally, Wikibooks text might or might not now be exportable under the GFDL depending on whether or not any content was added and not removed since July 15.
}}

Version 1.3, 3 November 2008
Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;

Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.

==0. PREAMBLE==

The purpose of this License is to make a manual, textbook, or other functional and useful document "free" in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others.

This License is a kind of "copyleft", which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software.

We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.

==1. APPLICABILITY AND DEFINITIONS==

This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The "Document", below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as "you". You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law.

A "Modified Version" of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them.

The "Invariant Sections" are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, "Title Page" means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of the Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as "Acknowledgements", "Dedications", "Endorsements", or "History".) To "Preserve the Title" of such a section when you modify the Document means that it remains a section "Entitled XYZ" according to this definition.

The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License.

==2. VERBATIM COPYING==

You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and you may publicly display copies.

==3. COPYING IN QUANTITY==

If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages.

If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public.

It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document.

==4. MODIFICATIONS==

You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version:

&lt;ol type="A"&gt;
&lt;li&gt;Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission.&lt;/li&gt;
&lt;li&gt;List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement.&lt;/li&gt;
&lt;li&gt;State on the Title page the name of the publisher of the Modified Version, as the publisher.&lt;/li&gt;
&lt;li&gt;Preserve all the copyright notices of the Document.&lt;/li&gt;
&lt;li&gt;Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.&lt;/li&gt;
&lt;li&gt;Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below.&lt;/li&gt;
&lt;li&gt;Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document's license notice.&lt;/li&gt;
&lt;li&gt;Include an unaltered copy of this License.&lt;/li&gt;
&lt;li&gt;Preserve the section Entitled "History", Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled "History" in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence.&lt;/li&gt;
&lt;li&gt;Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the "History" section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission.&lt;/li&gt;
&lt;li&gt;For any section Entitled "Acknowledgements" or "Dedications", Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.&lt;/li&gt;
&lt;li&gt;Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles.&lt;/li&gt;
&lt;li&gt;Delete any section Entitled "Endorsements". Such a section may not be included in the Modified version.&lt;/li&gt;
&lt;li&gt;Do not retitle any existing section to be Entitled "Endorsements" or to conflict in title with any Invariant Section.&lt;/li&gt;
&lt;li&gt;Preserve any Warranty Disclaimers.&lt;/li&gt;
&lt;/ol&gt;

If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles.

You may add a section Entitled "Endorsements", provided it contains nothing but endorsements of your Modified Version by various parties—for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard.

You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version.

==5. COMBINING DOCUMENTS==

You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History" in the various original documents, forming one section Entitled "History"; likewise combine any sections Entitled "Acknowledgements", and any sections Entitled "Dedications". You must delete all sections Entitled "Endorsements".

==6. COLLECTIONS OF DOCUMENTS==

You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document.

==7. AGGREGATION WITH INDEPENDENT WORKS==

A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an "aggregate" if the copyright resulting from the compilation is not used to limit the legal rights of the compilation's users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document's Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate.

==8. TRANSLATION==

Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail.

If a section in the Document is Entitled "Acknowledgements", "Dedications", or "History", the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title.

==9. TERMINATION==

You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.

Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.

Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it.

==10. FUTURE REVISIONS OF THIS LICENSE==

The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License "or any later version" applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Document.

==11. RELICENSING==

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A "Massive Multiauthor Collaboration" (or "MMC") contained in the site means any set of copyrightable works thus published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in part, as part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing.
= How to use this License for your documents =

To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page:

: Copyright (c)  YEAR  YOUR NAME.
: Permission is granted to copy, distribute and/or modify this document
: under the terms of the GNU Free Documentation License, Version 1.3
: or any later version published by the Free Software Foundation;
: with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
: A copy of the license is included in the section entitled "GNU
: Free Documentation License".

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the "with...Texts." line with this:

: with the Invariant Sections being LIST THEIR TITLES, with the
: Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation.

If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.&lt;noinclude&gt;
[[Category:Wikibooks copyright|{{PAGENAME}}]]
[[de:Wikibooks:GNU Free Documentation License]]
[[es:Wikilibros:GNU Free Documentation License]]
[[it:Wikibooks:Testo della GNU Free Documentation License]]
[[ja:Wikibooks:Text of GNU Free Documentation License]]
[[pt:Wikilivros:GNU Free Documentation License]]&lt;/noinclude&gt;</text>
      <sha1>514r8ejplb851lttp6nfqcqub2ljqi1</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ambox</title>
    <ns>10</ns>
    <id>384875</id>
    <redirect title="Template:Bmbox" />
    <revision>
      <id>3228920</id>
      <timestamp>2017-06-12T23:26:41Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <comment>JackPotte moved page [[Template:Ambox]] to [[Template:Bmbox]] over redirect: per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="28" xml:space="preserve">#REDIRECT [[Template:Bmbox]]</text>
      <sha1>dxps9o5us57jnv4ru2ijugfl7l7m3fr</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Ambox/core</title>
    <ns>10</ns>
    <id>384876</id>
    <redirect title="Template:Bmbox/core" />
    <revision>
      <id>3228922</id>
      <timestamp>2017-06-12T23:26:42Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <comment>JackPotte moved page [[Template:Ambox/core]] to [[Template:Bmbox/core]]: per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33" xml:space="preserve">#REDIRECT [[Template:Bmbox/core]]</text>
      <sha1>h9ijn3lsvc1xiywalc32i94xf9ujsdf</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BOOKCATEGORY</title>
    <ns>10</ns>
    <id>378612</id>
    <revision>
      <id>3365859</id>
      <parentid>3318591</parentid>
      <timestamp>2018-01-24T02:52:43Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKNAME (new-style)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="131" xml:space="preserve">&lt;includeonly&gt;Category:Book:{{{book|{{BOOKNAME|{{{1|{{FULLPAGENAME}}}}}}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>lloy4fm1jzvf8hvj4tiuynvt6q10c3o</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Bmbox</title>
    <ns>10</ns>
    <id>151630</id>
    <revision>
      <id>3228919</id>
      <parentid>1764517</parentid>
      <timestamp>2017-06-12T23:26:41Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <minor/>
      <comment>JackPotte moved page [[Template:Ambox]] to [[Template:Bmbox]] over redirect: per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="944" xml:space="preserve">&lt;!--{{Ambox}} begin--&gt;{{#switch:{{{small|}}}
| left = 
  {{Ambox/core
  | small      = left
  | type       = {{{type|}}}
  | image      = {{#if:{{{smallimage|}}}
                 | {{{smallimage}}}
                 | {{{image|}}}
                 }}
  | imageright = {{#if:{{{smallimageright|}}}
                 | {{{smallimageright}}}
                 | {{{imageright|}}}
                 }}
  | style      = {{{style|}}}
  | textstyle  = {{{textstyle|}}}
  | text       = {{#if:{{{smalltext|}}}
                 | {{{smalltext}}} 
                 | {{{text}}} 
                 }}
  }}
| #default = 
  {{Ambox/core
  | type       = {{{type|}}}
  | image      = {{{image|}}}
  | imageright = {{{imageright|}}}
  | style      = {{{style|}}}
  | textstyle  = {{{textstyle|}}}
  | text       = {{{text}}}
  }}
}}&lt;!--{{Ambox}} end--&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>71dedvqsi5zx5gybeme7bvom2cuhqki</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Bmbox/core</title>
    <ns>10</ns>
    <id>224716</id>
    <revision>
      <id>3228921</id>
      <parentid>2054530</parentid>
      <timestamp>2017-06-12T23:26:42Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <minor/>
      <comment>JackPotte moved page [[Template:Ambox/core]] to [[Template:Bmbox/core]]: per discussion</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2195" xml:space="preserve">&lt;table class="metadata plainlinks ambox {{#switch:{{{small|}}}
| left = mbox-small-left
}} {{#switch:{{{type|}}}
| speedy     = ambox-speedy
| delete     = ambox-delete
| content    = ambox-content
| style      = ambox-style
| move       = ambox-move
| protection = ambox-protection
| notice     &lt;!-- notice = default --&gt;
| #default   = ambox-notice
}}" style="{{{style|}}}"&gt;
&lt;tr&gt;
{{#switch:{{{image|}}}
| blank    &lt;!-- Fall back to "none", since deprecated. --&gt;
| none = &lt;td class="mbox-empty-cell"&gt;&lt;/td&gt;   &lt;!-- No image. Cell with some width or padding necessary for text cell to have 100% width. --&gt;
| #default = 
  &lt;td class="mbox-image"&gt;{{
  #switch:{{{small|}}}
  | left = &lt;!-- Don't use the DIV --&gt; 
  | #default = &lt;div style="width: 52px;"&gt; 
  }}
  {{#if:{{{image|}}}
  | {{{image}}}
  | [[File:{{#switch:{{{type|}}}
    | speedy     = Ambox warning pn.svg
    | delete     = Ambox warning pn.svg
    | content    = Book important2.svg
    | style      = Edit-clear.svg
    | move       = Merge-split-transwiki default.svg
    | protection = Padlock-silver-medium.svg
    | notice          &lt;!-- notice = default --&gt;
    | #default   = Information icon4.svg
    }} | {{#switch:{{{small|}}} 
      | left = 20x20px 
      | #default = 40x40px 
      }} |link=|alt=]]
  }}{{#switch:{{{small|}}}
  | left = &lt;!-- Don't use the /DIV --&gt;
  | #default = &lt;/div&gt; 
  }}&lt;/td&gt;
}}
&lt;td class="mbox-text" style="{{{textstyle|}}}"&gt; {{{text}}} &lt;/td&gt;
{{#if:{{{imageright|}}}
| {{#ifeq:{{{imageright|}}}|none
  | &lt;!-- No image. --&gt;
  | &lt;td class="mbox-imageright"&gt;{{#switch:{{{small|}}}
    | left = {{{imageright}}}
    | #default = &lt;div style="width: 52px;"&gt; {{{imageright}}} &lt;/div&gt;
    }}&lt;/td&gt;
  }}
}}
&lt;/tr&gt;
&lt;/table&gt;&lt;!-- 
Detect and report usage with faulty "type" parameter:
--&gt;{{#switch:{{{type|}}}
|   &lt;!-- No type fed, is also valid input --&gt;
| speedy
| delete
| content
| style
| move
| protection
| notice     = &lt;!-- Do nothing, valid "type" --&gt;
| #default   = &lt;div style="text-align: center;"&gt;This message box is using an invalid "type={{{type|}}}" parameter and needs fixing.&lt;/div&gt;
}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>tb1vy56jqr2f8rxcta3c3zxkitwyn88</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BookCat</title>
    <ns>10</ns>
    <id>133076</id>
    <revision>
      <id>3369509</id>
      <parentid>3369369</parentid>
      <timestamp>2018-01-30T00:44:35Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>fix</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="511" xml:space="preserve">&lt;includeonly&gt;{{#invoke:TScope|shiftLeft|BookCat/core|1
|namespace   ={{#if:{{{1|}}}|{{NAMESPACE:{{{1}}}}}|{{NAMESPACE}}}}
|pagename    ={{#if:{{{1|}}}|{{PAGENAME:{{{1}}}}}|{{PAGENAME}}}}
|fullpagename={{#if:{{{1|}}}|{{{1}}}|{{FULLPAGENAME}}}}
|sortkey     ={{{sort|{{{sortkey|}}}}}}
}}{{#if:{{{1|}}}                  |[[Category:Pages passing page name to BookCat]]}}&lt;!--
--&gt;{{#if:{{{sort|{{{sortkey|}}}}}}|[[Category:Pages passing sort key to BookCat]]}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>nw1barqxaok3ax2jtswg2fq40n07xkm</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BookCat/core</title>
    <ns>10</ns>
    <id>395128</id>
    <revision>
      <id>3415301</id>
      <parentid>3369280</parentid>
      <timestamp>2018-04-22T20:06:41Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>department, shelf</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="550" xml:space="preserve">&lt;includeonly&gt;{{#invoke:TScope|override|BookCat/{{#switch:{{{namespace}}}
|{{TALKSPACE:{{{namespace}}}:{{{pagename}}}}}=talk
|Category =category
|Subject  =subject
|Template =template
|User     =user
|Wikibooks=category
|={{evalx|
    (let (x (get-arg 2))
      (if (equal? (get-substring x 1 11) "Department:")
          "department"
          (if (equal? (get-substring x 1 6) "Shelf:")
              "shelf"
              "default")))
    |{{ucfirst:{{{pagename}}}}}}}
|#default =default
}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>8tn25ac4mqo1m1z6kwtwsnkadjnnq8d</sha1>
    </revision>
  </page>
  <page>
    <title>Template:BookCat/default</title>
    <ns>10</ns>
    <id>377931</id>
    <revision>
      <id>3369433</id>
      <parentid>3364961</parentid>
      <timestamp>2018-01-29T21:02:08Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="563" xml:space="preserve">&lt;includeonly&gt;{{#ifeq: {{{filing|}}} | deep
|[[{{BOOKCATEGORY|{{{fullpagename}}}|book={{#if:{{#titleparts:{{{fullpagename}}}||2}}|{{#titleparts:{{{fullpagename}}}|-1}}|{{{fullpagename}}}}}}}|{{#if:{{{sortkey|}}}|{{{sortkey}}}|{{#if:{{#titleparts:{{{fullpagename}}}||2}}|{{#titleparts:{{{pagename}}}||-1}}}}}} ]][[Category:Pages with deep filing]]
|[[{{BOOKCATEGORY|{{{fullpagename}}}|book={{NAIVEBOOKNAME|{{{fullpagename}}}}}}}|{{#if:{{{sortkey|}}}|{{{sortkey}}}|{{#titleparts:{{{fullpagename}}}||2}}}} ]]
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>19zdiuubcgqk688r91b773tk23n2n05</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Clear</title>
    <ns>10</ns>
    <id>66016</id>
    <revision>
      <id>1869650</id>
      <parentid>1869626</parentid>
      <timestamp>2010-06-30T17:52:24Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>22 revisions from [[:w:Template:Clear]]: History merge.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="71" xml:space="preserve">&lt;div style="clear: both"&gt;&lt;/div&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>jaabf7wcm14wgw815ggkx670v69i77e</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Evalx</title>
    <ns>10</ns>
    <id>377857</id>
    <revision>
      <id>3149922</id>
      <parentid>3140393</parentid>
      <timestamp>2016-11-18T23:55:55Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Template:Evalx]]": high-impact page ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="116" xml:space="preserve">{{#invoke:{{#if:{{{test-eval|}}}|{{{test-eval}}}|Wikilisp}}|trep|{{{1|}}}}}&lt;noinclude&gt;
{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>gi5tdyhnger0muaubi6cl480g1rg8rt</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Existlist</title>
    <ns>10</ns>
    <id>122484</id>
    <revision>
      <id>1618516</id>
      <parentid>988019</parentid>
      <timestamp>2009-08-29T03:34:35Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>+category</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1663" xml:space="preserve">&lt;includeonly&gt;&lt;!--
--&gt;{{#ifeq:{{{1|}}}|{{{1|+}}}|{{#ifexist:{{#rel2abs:{{{1}}}}}|{{#rel2abs:{{{1}}}}}|&lt;!--
--&gt;{{#ifeq:{{{2|}}}|{{{2|+}}}|{{#ifexist:{{#rel2abs:{{{2}}}}}|{{#rel2abs:{{{2}}}}}|&lt;!--
--&gt;{{#ifeq:{{{3|}}}|{{{3|+}}}|{{#ifexist:{{#rel2abs:{{{3}}}}}|{{#rel2abs:{{{3}}}}}|&lt;!--
--&gt;{{#ifeq:{{{4|}}}|{{{4|+}}}|{{#ifexist:{{#rel2abs:{{{4}}}}}|{{#rel2abs:{{{4}}}}}|&lt;!--
--&gt;{{#ifeq:{{{5|}}}|{{{5|+}}}|{{#ifexist:{{#rel2abs:{{{5}}}}}|{{#rel2abs:{{{5}}}}}|&lt;!--
--&gt;{{#ifeq:{{{6|}}}|{{{6|+}}}|{{#ifexist:{{#rel2abs:{{{6}}}}}|{{#rel2abs:{{{6}}}}}|&lt;!--
--&gt;{{#ifeq:{{{7|}}}|{{{7|+}}}|{{#ifexist:{{#rel2abs:{{{7}}}}}|{{#rel2abs:{{{7}}}}}|&lt;!--
--&gt;{{#ifeq:{{{8|}}}|{{{8|+}}}|{{#ifexist:{{#rel2abs:{{{8}}}}}|{{#rel2abs:{{{8}}}}}|&lt;!--
--&gt;{{#ifeq:{{{9|}}}|{{{9|+}}}|{{#ifexist:{{#rel2abs:{{{9}}}}}|{{#rel2abs:{{{9}}}}}|&lt;!--
--&gt;{{#ifeq:{{{10|}}}|{{{10|+}}}|{{#ifexist:{{#rel2abs:{{{10}}}}}|{{#rel2abs:{{{10}}}}}|&lt;!--
--&gt;{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|&lt;!--
--&gt;{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|&lt;!--
--&gt;{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|{{{else|}}}}}|&lt;!--
--&gt;{{{else|}}}}}|{{{else|}}}}}&lt;!--
--&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{esoteric}}

;Example Usage: [[{{tlx|existlist|A|B|C|Wikibooks:Sandbox|E|F|G}}]]
;Result: [[{{existlist|A|B|C|Wikibooks:Sandbox|E|F|G}}]]

;Example Usage: [[{{tlx|existlist|A|B|C|Wikibooks:Sandbox|E|F|G}}|click here]]
;Result: [[{{existlist|A|B|C|Wikibooks:Sandbox|E|F|G}}|click here]]

;What it does: returns the name of the first page which exists up to 10 max.
[[Category:Utility templates|{{PAGENAME}}]]
&lt;/noinclude&gt;</text>
      <sha1>ky5n5d7c3w6km147ef9nw9iawcrdar3</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Mbox</title>
    <ns>10</ns>
    <id>133968</id>
    <revision>
      <id>1785845</id>
      <parentid>1785843</parentid>
      <timestamp>2010-05-03T12:48:44Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <minor/>
      <comment>default to blank if not given</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="675" xml:space="preserve">&lt;includeonly&gt;{{
  {{namespace detect 
  | demospace = {{{demospace|}}}
  | main = ambox
  | wikijunior = ambox
  | cookbook  = ambox
  | talk      = tmbox
  | file      = imbox
  | category  = cmbox
  | other     = ombox
  }}
| type       = {{{type|}}}
| image      = {{{image|}}}
| imageright = {{{imageright|}}}
| style      = {{{style|}}}
| textstyle  = {{{textstyle|}}}
| text       = {{{text|{{{msg|}}}}}}
| small      = {{{small|}}}
| smallimage = {{{smallimage|}}}
| smallimageright = {{{smallimageright|}}}
| smalltext  = {{{smalltext|}}}
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>pfjrr0v5iqhsxhse6qg9nokplti58t5</sha1>
    </revision>
  </page>
  <page>
    <title>Template:NAIVEBOOKNAME</title>
    <ns>10</ns>
    <id>153997</id>
    <revision>
      <id>3364930</id>
      <parentid>1767387</parentid>
      <timestamp>2018-01-22T17:55:27Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>Pi zero moved page [[Template:FULLBOOKNAME]] to [[Template:NAIVEBOOKNAME]]: description</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="109" xml:space="preserve">&lt;includeonly&gt;{{#titleparts:{{{1|{{FULLPAGENAME}}}}}|1}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>p6elrbww9zt8w5vven8h68v7asswoj9</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Namespace detect</title>
    <ns>10</ns>
    <id>225046</id>
    <revision>
      <id>2181525</id>
      <parentid>1773589</parentid>
      <timestamp>2011-10-14T20:19:39Z</timestamp>
      <contributor>
        <username>Adrignola</username>
        <id>169232</id>
      </contributor>
      <comment>transwiki</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1562" xml:space="preserve">{{#switch:
  {{lc:               &lt;!--Lower case the result--&gt;
    &lt;!--If no or empty "demospace" parameter then detect namespace--&gt;
    {{#if:{{{demospace|}}} 
    | {{{demospace}}}
    | {{#if:{{{page|}}} 
      | &lt;!--Detect the namespace in the "page" parameter--&gt;
        {{#ifeq:{{NAMESPACE:{{{page}}} }}|{{TALKSPACE:{{{page}}} }}
        | talk
        | {{SUBJECTSPACE:{{{page}}} }} 
        }}
      | &lt;!--No "demospace" or "page" parameters, so detect actual namespace--&gt;
        {{#ifeq:{{NAMESPACE}}|{{TALKSPACE}}
        | talk
        | {{SUBJECTSPACE}} 
        }}
      }}
    }}
  }}
&lt;!-- Only one of the lines below will be executed --&gt;
&lt;!-- Respecting empty parameters on purpose --&gt;
| main        &lt;!--"demospace=main" or {{SUBJECTSPACE}}={{ns:0}}=""--&gt;
|           = {{{main| {{{other|}}} }}}
| talk      = {{{talk| {{{other|}}} }}}
| user      = {{{user| {{{other|}}} }}}
| wikibooks = {{{wikibooks| {{{other|}}} }}}
| file
| image     = {{{file| {{{image| {{{other|}}} }}} }}}
| mediawiki = {{{mediawiki| {{{other|}}} }}}
| template  = {{{template| {{{other|}}} }}}
| help      = {{{help| {{{other|}}} }}}
| subject   = {{{subject| {{{other|}}} }}}
| category  = {{{category| {{{other|}}} }}}
| wikijunior = {{{wikijunior| {{{other|}}} }}}
| cookbook  = {{{cookbook| {{{other|}}} }}}
| transwiki = {{{transwiki| {{{other|}}} }}}
| other
| #default  = {{{other|}}}   &lt;!--"demospace=other" or a new namespace--&gt;

}}&lt;!--End switch--&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>sm3jo7sylwxikvmc9l7or66sq8rafu6</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Non-Programmer's Tutorial for Python 2.0/Navigation</title>
    <ns>10</ns>
    <id>223993</id>
    <redirect title="Template:Non-Programmer&#039;s Tutorial for Python 2.6/Navigation" />
    <revision>
      <id>1754551</id>
      <timestamp>2010-04-11T18:51:27Z</timestamp>
      <contributor>
        <username>33rogers</username>
        <id>239975</id>
      </contributor>
      <comment>moved [[Template:Non-Programmer's Tutorial for Python 2.0/Navigation]] to [[Template:Non-Programmer's Tutorial for Python 2.6/Navigation]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="74" xml:space="preserve">#REDIRECT [[Template:Non-Programmer's Tutorial for Python 2.6/Navigation]]</text>
      <sha1>3ubq8znnkf1msx81j4dg3bm75r9ae0n</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Non-Programmer's Tutorial for Python 2.6/Navigation</title>
    <ns>10</ns>
    <id>203027</id>
    <revision>
      <id>1754663</id>
      <parentid>1754550</parentid>
      <timestamp>2010-04-11T20:09:40Z</timestamp>
      <contributor>
        <username>33rogers</username>
        <id>239975</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="498" xml:space="preserve">&lt;!-- Navigation tools
--&gt;&lt;div class="noprint PrettyTextBox" style="background-color:#ffffe0;padding:0.5ex"&gt;
{| width=100% cellspacing=0 cellpadding=2 
| width=33% bgcolor=#ffffe0 | [[Non-Programmer's Tutorial for Python 2.6/{{{1}}}|'''Previous:''' {{{1}}}]]
| width=33% bgcolor=#ffffe0 align=center | [[Non-Programmer's Tutorial for Python 2.6|'''Front Page''']]
| width=33% bgcolor=#ffffe0 align=right | [[Non-Programmer's Tutorial for Python 2.6/{{{2}}}|'''Next:''' {{{2}}}]]
|}
&lt;/div&gt;{{BookCat}}</text>
      <sha1>b4bo5w7wfy6qc2bt2jd6jj8beuqpfi0</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Print version notice</title>
    <ns>10</ns>
    <id>27932</id>
    <revision>
      <id>3366073</id>
      <parentid>3364335</parentid>
      <timestamp>2018-01-24T16:58:41Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <comment>BOOKNAME (new-style)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="402" xml:space="preserve">{{ambox|type=notice|image=[[File:Printer.svg|40x40px]]|text='''This is the [[Help:Print versions|print version]] of [[{{{1|{{BOOKNAME}}}}}]]'''&lt;br/&gt;You won't see this message or any elements not part of the book's content when you print or [{{fullurl:{{existlist|{{{2|{{{1|{{BOOKNAME}}}}}/Print version}}}|{{FULLPAGENAME}}}}|printable=yes}} preview] this page.}}&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>0t02h1isu1ka7z7xxb4wk9np5o5d7xn</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Solution</title>
    <ns>10</ns>
    <id>65016</id>
    <revision>
      <id>3120420</id>
      <parentid>2007701</parentid>
      <timestamp>2016-09-15T22:20:13Z</timestamp>
      <contributor>
        <username>JackPotte</username>
        <id>99248</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="921" xml:space="preserve">&lt;div style="clear:both;width:{{{width|100%}}};color:#000000;" class="collapsible"&gt;
&lt;div class="title" align="{{{alignT|center}}}"&gt;{{{title|Solution}}}&lt;/div&gt;
&lt;div class="body" align="{{{align|left}}}"&gt;
{{{text|{{{1|}}}}}}
&lt;/div&gt;
&lt;/div&gt;
&lt;noinclude&gt;
&lt;br /&gt;

=Documentation=
==Usage==
This template is named ''solution'' with the first argument being the ''Title'' and the second argument being the ''Text''.

== Examples ==
Let's say the problem is '''1) 2x=4, solve for x.''' 

In this example, the problem is called '''Problem One: Solution''' and the text is the solution to the problem. Make sure to put arguments in quotes.

  &lt;nowiki&gt;{{solution|title="Problem One: Solution"|text="Divide both sides by 2 to get x=2"}}&lt;/nowiki&gt;

This produces: {{solution|title="Problem One: Solution"|text="Divide both sides by 2 to get x=2"}}

[[Category:Collapse templates|{{PAGENAME}}]]

[[ca:Template:Caixa ocultable]]
&lt;/noinclude&gt;</text>
      <sha1>pes5tdh73aa2jjpb1431083qn1g07z4</sha1>
    </revision>
  </page>
  <page>
    <title>Template:TODO</title>
    <ns>10</ns>
    <id>106920</id>
    <redirect title="Template:Todo" />
    <revision>
      <id>710694</id>
      <timestamp>2007-01-07T08:28:23Z</timestamp>
      <contributor>
        <username>Darklama</username>
        <id>7662</id>
      </contributor>
      <comment>[[Template:TODO]] moved to [[Template:Todo]]: so capitalization isn't required.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" xml:space="preserve">#REDIRECT [[Template:Todo]]</text>
      <sha1>fem4f2slp3gk2iijdzkjyy1q611qfis</sha1>
    </revision>
  </page>
  <page>
    <title>Template:Todo</title>
    <ns>10</ns>
    <id>29044</id>
    <revision>
      <id>2458775</id>
      <parentid>2458428</parentid>
      <timestamp>2012-12-11T20:04:37Z</timestamp>
      <contributor>
        <username>Ftiercel</username>
        <id>239666</id>
      </contributor>
      <comment>Fix the model.</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="511" xml:space="preserve">&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;{{clear}}
{| style="background: {{{background|#ffd}}}; border: 1px solid #aaaaaa; padding: 6pt; margin: 12pt 8%; width: 60%; margin: auto;" class="notice noprint notice-todo" 
 | style="width: 58px;" | [[Image:Clipboard.svg|45 px|left|alt=Clipboard|link=]]
 |
'''{{{header|{{{title|To do:}}}}}}'''&lt;br /&gt;{{{1&lt;includeonly&gt;|&lt;/includeonly&gt;}}}
|}
&lt;includeonly&gt;{{clear}}&lt;/includeonly&gt;&lt;noinclude&gt;
[[Category:Maintenance templates|{{PAGENAME}}]]
[[pl:Szablon:TODO]]&lt;/noinclude&gt;</text>
      <sha1>a3cduhaiixs20bco9vmdkmjke08v0mq</sha1>
    </revision>
  </page>
  <page>
    <title>Module:TScope</title>
    <ns>828</ns>
    <id>378746</id>
    <revision>
      <id>3149555</id>
      <parentid>3149438</parentid>
      <timestamp>2016-11-18T20:02:41Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>Protected "[[Module:TScope]]": high-impact page ([Edit=Allow only administrators] (indefinite) [Move=Allow only administrators] (indefinite))</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="3756" xml:space="preserve">local export = {}

export.override = function( frame )
	local title = frame.args[1]
	local args = {}
	for v, k in pairs( frame:getParent().args ) do
		args[v] = k
	end
	for v, k in pairs( frame.args ) do
		if type( v ) == "number" then
			if v ~= 1 then
				args[ v - 1 ] = k
			end
		else
			args[v] = k
		end
	end
	return frame:expandTemplate{ title = title, args = args }
end

export.prepend = function( frame )
	local title = frame.args[1]
	local args = {}
	local displace = 0;
	for v, k in pairs( frame.args ) do
		if (type( v ) == "number") and (v ~= 1) then
			args[ v - 1 ] = k
			displace = math.max( displace, (v - 1) )
		end
	end
	for v, k in pairs( frame:getParent().args ) do
		if type( v ) == "number" then
			args[ displace + v ] = k
		else
			args[v] = k
		end
	end
	for v, k in pairs( frame.args ) do
		if type( v ) ~= "number" then
			args[v] = k
		end
	end
	return frame:expandTemplate{ title = title, args = args }
end

export.append = function( frame )
	local title = frame.args[1]
	local args = {}
	local displace = 0;
	for v, k in pairs( frame:getParent().args ) do
		if type( v ) == "number" then
			displace = math.max( displace, v )
		end
		args[v] = k
	end
	for v, k in pairs( frame.args ) do
		if type( v ) == "number" then
			if v ~= 1 then
				args[ displace + v - 1 ] = k
			end
		else
			args[v] = k
		end
	end
	return frame:expandTemplate{ title = title, args = args }
end

export.drop = function( frame )
	local title = frame.args[1]
	local args = {}
	for v, k in pairs( frame:getParent().args ) do
		if type( v ) ~= "number" then
			args[v] = k
		end
	end
	for v, k in pairs( frame.args ) do
		if type( v ) == "number" then
			if v ~= 1 then
				args[ v - 1 ] = k
			end
		else
			args[v] = k
		end
	end
	return frame:expandTemplate{ title = title, args = args }
end

export.shiftLeft = function( frame )
	local title = frame.args[1]
	local args = {}
	local displace = tonumber( frame.args[2] )
	if displace == nil then displace = 0 end
	for v, k in pairs( frame:getParent().args ) do
		if type( v ) == "number" then
			if v &gt;= displace then
				args[ v - displace ] = k
			end
		else
			args[v] = k
		end
	end
	for v, k in pairs( frame.args ) do
		if type( v ) == "number" then
			if v &gt; 2 then
				args[ v - 2 ] = k
			end
		else
			args[v] = k
		end
	end
	return frame:expandTemplate{ title = title, args = args }
end

export.map = function( frame )
	local title = frame.args[1]
	local displace = frame.args[2]
	if displace == nil then
		displace = 0
	else
		displace = tonumber( displace )
	end
	local args = {}
	local data = {}
	local maxv = 0
	for v, k in pairs( frame:getParent().args ) do
		if (type( v ) ~= "number") then
			args[v] = k
		elseif v &lt;= displace then
			args[v + 1] = k
		else
			data[v] = k
			maxv = math.max( v, maxv )
		end
	end
	for v, k in pairs( frame.args ) do
		if type( v ) ~= "number" then
			args[v] = k
		elseif v &gt; 2 then
			args[v - 1] = k
		end
	end
	local result = ""
	for v = 1, maxv do
		if data[v] ~= nil then
			args[1] = data[v]
			result = result .. frame:expandTemplate{ title = title, args = args }
		end
	end
	return result
end

export.static = function( frame )
	return frame:getParent():getTitle()
end

local function tabulate( args )
	local s = ''
	for k, v in pairs( args ) do
		s = s .. '|-\n| ' .. k .. '\n| &lt;code&gt;' .. v .. '&lt;/code&gt;\n'
	end
	if s ~= '' then
		s = '{| class="wikitable"\n|-\n! key\n! value\n' .. s .. '|}'
	end
	return s
end

export.echo = function( frame )
	local mp = tabulate( frame.args )
	local cp = tabulate( frame:getParent().args )
	if mp ~= '' then
		mp = 'module parameters:\n' .. mp .. '\n'
	end
	if cp ~= '' then
		cp = 'context parameters:\n' .. cp .. '\n'
	else
		cp = 'no context parameters.\n'
	end
	return mp .. cp
end

return export</text>
      <sha1>n3blx1g9jcetmcolf1n2fiuhyaql9nh</sha1>
    </revision>
  </page>
  <page>
    <title>Module:Wikilisp</title>
    <ns>828</ns>
    <id>377838</id>
    <revision>
      <id>3182515</id>
      <parentid>3182514</parentid>
      <timestamp>2017-02-14T18:13:35Z</timestamp>
      <contributor>
        <username>Pi zero</username>
        <id>75960</id>
      </contributor>
      <minor/>
      <comment>1 revision imported from [[:n:Module:Wikilisp]]: update</comment>
      <model>Scribunto</model>
      <format>text/plain</format>
      <text bytes="47989" xml:space="preserve">local export = {}

local wikilispversion = "0.18 (February 14, 2017)"

--[[ some basic abstractions ]]

local function stype( x ) -- type of sexpr
	local t = type( x )
	if t == "table" then t = x.type end
	return t
end

local function seterr( x, ... )
	if type(x) ~= "table" then
		return seterr( {}, x, ... )
	else
		x.type = "error"
		x.msg = mw.ustring.format( ... )
		return x
	end
end

--[[ parse text to a sequence of sexprs ]]

local function tok3( ls, t )
	-- tokenize lua string t, with no string literals comments or parens;
	--   append to ls
	local p1,p2 = mw.ustring.find( t, "[^%s]+" )
	while p1 ~= nil do
		local t1 = mw.ustring.sub(t, p1, p2)
		local n1 = tonumber(t1)
		if n1 ~= nil then
			ls[1 + #ls] = n1
		elseif t1 == "true" then
			ls[1 + #ls] = true
		elseif t1 == "false" then
			ls[1 + #ls] = false
		else
			ls[1 + #ls] = {
				type = "symbol",
				name = t1
			}
		end
		t = mw.ustring.sub(t, (p2 + 1))
		p1,p2 = mw.ustring.find( t, "[^%s]+" )
	end
end

local function tok2( ls, t )
	-- tokenize lua string t, with no string literals or comments; append to ls
	local p1 = mw.ustring.find( t, "[()\\]" )
	while p1 ~= nil do
		tok3( ls, mw.ustring.sub(t, 1, (p1 - 1)) )
		ls[1 + #ls] = { type = mw.ustring.sub(t, p1, p1) }
		if ls[#ls].type == "\\" then
			ls[#ls].name = ls[#ls].type
			ls[#ls].type = "symbol"
		end
		t = mw.ustring.sub(t, (p1 + 1))
		p1 = mw.ustring.find( t, "[()\\]" )
	end
	tok3( ls, t )
end

local function tok1( ls, t )
	-- tokenize lua string t, thru first string literal or comment; append to ls
	-- if not finished, append untokenized remainder string and return true
	local p0 = mw.ustring.find( t, ';' )
	local p1 = mw.ustring.find( t, '"' )
	local p2 = mw.ustring.find( t, "'" )
	if (p0 ~= nil) and (((p1 == nil) or (p0 &lt; p1)) and
						((p2 == nil) or (p0 &lt; p2))) then
		tok2( ls, mw.ustring.sub( t, 1, (p0 - 1) ) )
		p1 = mw.ustring.find( t, '\n', (p0 + 1) )
		if p1 == nil then
			return false
		else
			ls[1 + #ls] = mw.ustring.sub( t, (p1 + 1) )
			return true
		end
	elseif (p1 ~= nil) and ((p2 == nil) or (p1 &lt; p2)) then
		p2 = p1 + 1
		while true do
			p2 = mw.ustring.find( t, '"', p2 )
			if p2 == nil then
				seterr(ls, 'mismatched string-literal delimiter (")')
				return false
			elseif (p2 &lt; mw.ustring.len( t )) and
				(mw.ustring.codepoint( t, (p2 + 1) ) == 34)
			then
				p2 = (p2 + 2)
			else
				tok2( ls, mw.ustring.sub( t, 1, (p1 - 1) ) )
				ls[1 + #ls] = mw.ustring.gsub(
					mw.ustring.sub( t, (p1 + 1), (p2 - 1) ),
					'""', '"')
				ls[1 + #ls] = mw.ustring.sub( t, (p2 + 1) )
				return true
			end
		end
	elseif p2 ~= nil then
		-- side benefit: precludes Lisp shorthand for "suppress eval"
		p1 = p2
		p2 = mw.ustring.find( t, "'", (p1 + 1) )
		if p2 == nil then
			seterr(ls, "mismatched string-literal delimiter (')")
			return false
		else
			tok2( ls, mw.ustring.sub( t, 1, (p1 - 1) ) )
			ls[1 + #ls] = mw.ustring.sub( t, (p1 + 1), (p2 - 1) )
			ls[1 + #ls] = mw.ustring.sub( t, (p2 + 1) )
			return true
		end
	else
		tok2( ls, t )
		return false
	end
end

local function parse_next( x1, p1, x2 )
	-- parse one sexpr from token list x1 position p1, append sexpr to p2
	-- return new value for p1
	if stype(x1[p1]) == ")" then
		seterr(x2, "unmatched right-paren")
		return 1 + #x1
	elseif stype(x1[p1]) ~= "(" then
		x2[1 + #x2] = x1[p1]
		return p1 + 1
	else
		p1 = p1 + 1
		local x3 = { type = "list" }
		x2[1 + #x2] = x3
		while p1 &lt;= #x1 do
			if stype(x1[p1]) == ")" then
				return p1 + 1
			end
			p1 = parse_next( x1, p1, x3 )
		end
		seterr(x2, "unmatched left-paren")
		return p1
	end
end

local function parse_sexpr( x1 )
	-- x1 is an error or a list of tokens
	if x1.type ~= "list" then
		return x1
	else
		local p1 = 1 --next item to read from x1
		local x2 = { type = "list" }
		while p1 &lt;= #x1 do
			p1 = parse_next( x1, p1, x2 )
		end
		return x2
	end
end

local function text_to_sexpr( t )
	local ls = { type = "list" }
	while tok1( ls, t ) do
		t = ls[#ls]
		ls[#ls] = nil
	end
	ls = parse_sexpr( ls )
	return ls
end

--[[ write/display a sexpr ]]

local function write_sexpr( x )
	if type(x) == "number" then
		return tostring( x )
	elseif type(x) == "string" then
		return mw.ustring.format('"%s"', mw.ustring.gsub( x, '"', '""' ))
	elseif type(x) == "boolean" then
		if x then return "true" else return "false" end
	elseif type(x) ~= "table" then
		return mw.ustring.format("&amp;lt;unrecognized internal type: %s&amp;gt;", type(x))
	elseif x.type == "symbol" then
		return x.name
	elseif x.type == "fn" then
		return mw.ustring.format("&amp;lt;%s&amp;gt;", write_sexpr( x.comb ))
	elseif x.type == "op" then
		if x.name ~= nil then
			return mw.ustring.format("[op: %s]", x.name)
		else
			return "[op]"
		end
	elseif x.type == "list" then
		local r = {}
		r[1] = "("
		for k = 1, #x do
			r[k+1] = write_sexpr( x[k] )
		end
		r[#r + 1] = ")"
		return table.concat(r, " ")
	elseif x.type == "error" then
		return mw.ustring.format("&amp;lt;error: %s&amp;gt;", x.msg)
	elseif x.type == "pattern" then
		return mw.ustring.format('&amp;lt;pattern: "%s"&amp;gt;', x.pat)
	elseif x.type ~= nil then
		return mw.ustring.format("&amp;lt;unrecognized type: %s&amp;gt;", x.type)
	else
		return "&amp;lt;missing type&amp;gt;"
	end
end

local function display_sexpr( x )
	if stype(x) == "string" then
		return x
	else
		return write_sexpr( x )
	end
end

--[[ evaluation tools ]]

local maxdepth = 4 -- maximum call-nesting depth

local combine

local function eval( x, env, depth )
	if type(x) ~= "table" then -- literal
		return x
	elseif x.type == "symbol" then
		local v = env[x.name]
		if v == nil then
			return seterr("undefined symbol: %s", x.name)
		else
			return v
		end
	elseif x.type ~= "list" then -- literal
		return x
	elseif #x == 0 then -- empty list
		return x
	else -- combination
		local c = eval( x[1], env, depth )
		if stype(c) == "error" then return c end
		local ls = { type = "list" }
		for k = 2, #x do
			ls[k - 1] = x[k]
		end
		return combine( c, ls, env, depth )
	end
end

combine = function( c, ls, env, depth )
	while stype(c) == "fn" do
		local ls2 = { type = "list" }
		for k = 1, #ls do
			ls2[k] = eval( ls[k], env, depth )
			if stype(ls2[k]) == "error" then return ls2[k] end
		end
		c = c.comb
		ls = ls2
	end
	if stype(c) ~= "op" then
		return seterr("called object is not a combiner: %s", write_sexpr(c))
	elseif (c.shallow ~= nil) then
		return c.op(ls, env, depth)
	elseif (depth == nil) or (depth &lt; 1) then
		if maxdepth &gt; 1 then
			return seterr(
				"exceeded maximum call-nesting depth (%i)",
				maxdepth)
		else
			return seterr("exceeded maximum call-nesting depth")
		end
	else
		return c.op(ls, env, (depth - 1))
	end
end

local function eval_seq( ls, env, depth )
	-- ls must be an error or a list
	if ls.type == "error" then return ls end
	if #ls == 0 then return ls end
	for k = 1, (#ls - 1) do
		local x = eval( ls[k], env, depth )
		if stype(x) == "error" then return x end
	end
	return eval( ls[#ls], env, depth )
end

local function eval_all( ls, env, depth, cutoff )
	-- ls must be an error or a list
	if ls.type == "error" then return ls end
	local ls2 = { type="list" }
	for k = 1, #ls do
		ls2[k] = eval( ls[k], env, depth )
		if stype(ls2[k]) == "error" then return ls2[k] end
		if (cutoff ~= nil) and cutoff(ls2[k]) then return ls2 end
	end
	return ls2
end

local function combine_all( ops, args, env, depth, cutoff )
	-- ops must be a list; args must be an error or a list
	if args.type == "error" then return args end
	local ls2 = { type="list" }
	for k = 1, #ops do
		ls2[k] = combine( ops[k], args, env, depth )
		if stype(ls2[k]) == "error" then return ls2[k] end
		if (cutoff ~= nil) and cutoff(ls2[k]) then return ls2 end
	end
	return ls2
end

--[[ generic combiner constructors ]]

local function make_op( f, nm, sh )
	return {
		type = "op",
		op = f,
		name = nm,
		shallow = sh
	}
end

local function checktype( t, o, k ) -- types list, operands list, index
	if #t == 0 then return "" end
	o = o[k] -- particular operand
	if k &gt; #t then k = #t end
	t = t[k] -- particular type
	-- t should now be a string or internal function
	if type(t) == "string" then
		if stype(o) == t then t = "" end -- clear if no error
	else
		t = t(o) -- assume internal function works correctly
	end
	-- t should now be type name if error, empty string if okay
	return t
end

local function type_err( cname, tname, x )
	-- combiner name, type name(s), operand
	-- type name may be a string or an array of strings
	local where = ""
	if cname ~= nil then where = " to [op: " .. cname .. "]" end
	if type(tname) == "table" then
		if #tname == 0 then tname = "[unknown]"
		else
			for k = 1, #tname do
				while tname[k] == "" do
					for j = (k + 1), #tname do tname[j - 1] = tname[j] end
					tname[#tname] = nil
				end
				if tname[k] ~= nil then
					for j = (k + 1), #tname do
						if tname[k] == tname[j] then tname[j] = "" end
					end
				end
			end
			if #tname == 1 then tname = tname[1]
			else
				tname[#tname] = "or " .. tname[#tname]
				if #tname == 2
				then tname = table.concat( tname, " " )
				else tname = table.concat( tname, ", " )
				end
			end
		end
	end
	local what = write_sexpr(x)
	if #what &gt; 64 then what = stype(x) end
	return seterr(
		"bad operand%s: expected %s, got %s", where, tname, what)
end

local function typed_op( ... )
	-- alternating type (string or function) and op (table or function)
	-- strong recommendation: first op should be a table
	local ls0 = { ... }
	local n0 = select( '#', ... )
	local opname, shallow
	if type(ls0[2]) == "table" then
		opname = ls0[2].name
		shallow = ls0[2].shallow
	end
	local f = function(ls, env, depth)
		if #ls == 0 then
			local op = ls0[2]
			if type(op) == "table" then op = op.op end
			return op( ls, env, depth )
		end
		local ek = 1 -- operand number of accumulated error type names
		local enames = {} -- list of failed types for ls[ek]
		for j = 1, n0, 2 do
			local types = ls0[j]
			local op = ls0[j + 1]
			if type(op) == "table" then op = op.op end
			local t = ""
			for k = 1, #ls do
				if #t == 0 then
					t = checktype( types, ls, k )
					if #t &gt; 0 then
						if k &gt; ek then
							ek = k
							enames = { t }
						elseif k == ek then
							enames[1 + #enames] = t
						end
					end
				end
			end
			if #t == 0 then return op( ls, env, depth ) end
		end
		return type_err( opname, enames, ls[ek] )
	end
	return make_op( f, opname, shallow )
end

local function nary_op( c, n, m )
	local f = function(ls, env, depth)
		if n &lt; 0 then
			if #ls &lt; -n then
				local where = ""
				if c.name ~= nil then where = " to [op: " .. c.name .. "]" end
				return seterr(
					"too few operands%s: expected at least %i, got %i",
					where, -n, #ls)
			end
		elseif m == nil then
			if #ls ~= n then
				local where = ""
				if c.name ~= nil then where = " to [op: " .. c.name .. "]" end
				return seterr(
					"wrong number of operands%s: expected %i, got %i",
					where, n, #ls)
			end
		else
			if #ls &lt; n then
				local where = ""
				if c.name ~= nil then where = " to [op: " .. c.name .. "]" end
				return seterr(
					"too few operands%s: expected at least %i, got %i",
					where, n, #ls)
			elseif #ls &gt; m then
				local where = ""
				if c.name ~= nil then where = " to [op: " .. c.name .. "]" end
				return seterr(
					"too many operands%s: expected at most %i, got %i",
					where, m, #ls)
			end
		end
		return c.op( ls, env, depth )
	end
	return make_op( f, c.name, c.shallow )
end

local function binary_pred( test, nm )
	return make_op(function (ls)
			for k = 2, #ls do
				if not test(ls[k - 1], ls[k]) then
					return false
				end
			end
			return true
		end, nm, true)
end

local function unary_pred( test, nm )
	return make_op(function (ls)
			for k = 1, #ls do
				if not test(ls[k]) then
					return false
				end
			end
			return true
		end, nm, true)
end

local function wrap( c )
	return {
		type = "fn",
		comb = c
	}
end

--[[ wiki parsing stuff
	entry:  (char-code  (first-pos  last-pos  left-index))
	        (descriptor  (first-pos  last-pos  left-index)  entry  entry  ...)
	item entries contain part entries, part entries contain item entries
	left-index is removed at end of parse
]]

local lsquare,rsquare, lcurly,rcurly, pipe = 91,93, 123,125, 124

local function wikileft(e) -- is entry a left-delimiter?
	return ((e[1] == lsquare) or (e[1] == lcurly)) and (e[2][1] ~= e[2][2])
end

local function wikilen(e) -- how long is this entry?
	return 1 + e[2][2] - e[2][1]
end

local function wikisub( m, d ) -- parse, descriptor
	local k2 = #m          -- index of right delimiter
	local k1 = m[k2][2][3] -- index of left delimiter
	local p = { type = "list", "part", { type = "list" } } -- first part
	p[2][1] = (m[k1][2][2] + 1) -- start of first part
	local e = { -- entry containing parts
		type = "list",
		d,
		{ type = "list",
		  (m[k1][2][2] - (m[k2][2][2] - m[k2][2][1])),
		  m[k2][2][2],
		  k1
		},
		p
	}
	for k = (k1 + 1), (k2 - 1) do
		if type(m[k][1]) ~= "number" then
			m[k][2][3] = nil
			p[1 + #p] = m[k]
		elseif m[k][1] == pipe then
			p[2][2] = (m[k][2][1] - 1) -- end of current part
			p = { type = "list", "part", { type = "list" } } -- next part
			p[2][1] = (m[k][2][2] + 1) -- start of this part
			e[1 + #e] = p -- add to list of parts
		end
		m[k] = nil
	end
	p[2][2] = (m[k2][2][1] - 1) -- end of last part
	m[k2] = nil
	m[k1][2][2] = (e[2][1] - 1)
	if (m[k1][2][1] &gt; m[k1][2][2]) then
		e[2][3] = m[k1][2][3]
		m[k1] = nil
	end
	m[1 + #m] = e
end

local function parse_wiki( ls )
	local s = ls[1]                             -- string to parse
	local m = { type = "list" }                 -- result of parse
	local k = mw.ustring.find( s, "[%[%]{}|]" ) -- position in string
	while k ~= nil do
		local c = mw.ustring.codepoint(s,k)
		if #m == 0 then
			if (c == lsquare) or (c == lcurly) then
				m[1] = {type="list", c, {type="list", k, k, 0}}
			end
		elseif (k == (m[#m][2][2] + 1)) and (c == m[#m][1]) and (c ~= pipe) then
			m[#m][2][2] = k
			if m[#m][2][3] &gt; 0 then
				local e2 = m[#m]
				local e1 = m[e2[2][3]]
				if (e2[1] == rcurly) and (e1[1] == lcurly) and
					(wikilen(e2) == 3) and (wikilen(e1) &gt; 2)
				then
					wikisub( m, "param" )
				elseif (e2[1] == rsquare) and (e1[1] == lsquare) and
					(wikilen(e2) == 2) and (wikilen(e1) &gt; 1)
				then
					wikisub( m, "link" )
				end
			end
		else
			if m[#m][2][3] &gt; 0 then
				local e2 = m[#m]
				local e1 = m[e2[2][3]]
				if (e2[1] == rcurly) and (e1[1] == lcurly) and
					(wikilen(e2) == 2) and (wikilen(e1) &gt; 1)
				then
					wikisub( m, "call" )
				end
			end
			m[1 + #m] = {type="list", c, {type="list", k, k}}
			if wikileft(m[#m - 1]) then
				m[#m][2][3] = (#m - 1)
			else
				m[#m][2][3] = m[#m - 1][2][3]
			end
		end
		k = mw.ustring.find( s, "[%[%]{}|]", (k + 1) )
	end
	if #m == 0 then return m end
	if m[#m][2][3] &gt; 0 then
		local e2 = m[#m]
		local e1 = m[e2[2][3]]
		if (e2[1] == rcurly) and (e1[1] == lcurly) and
			(wikilen(e2) == 2) and (wikilen(e1) &gt; 1)
		then
			wikisub( m, "call" )
		end
	end
	local m2 = { type = "list" }
	for j = 1, #m do
		if type(m[j][1]) ~= "number" then
			m[j][2][3] = nil
			m2[1 + #m2] = m[j]
		end
	end
	return m2
end

--[[ miscellaneous ]]

local function int_tc(x)
	if (type(x) ~= "number") or (x ~= math.floor(x)) then
		return "integer"
	else
		return ""
	end
end

local function posint_tc(x)
	if (type(x) ~= "number") or (x ~= math.floor(x)) or (x &lt; 1) then
		return "positive integer"
	else
		return ""
	end
end

local function logical_and( ls ) -- for and?
	for k = 1, #ls do
		if stype(ls[k]) ~= "boolean" then
			return seterr(
				"bad operand to [op: and?]: expected boolean, got %s",
				write_sexpr(ls[k]))
		end
	end
	for k = 1, #ls do if not ls[k] then return false end end
	return true
end

local function logical_or( ls ) -- for or?
	for k = 1, #ls do
		if stype(ls[k]) ~= "boolean" then
			return seterr(
				"bad operand to [op: or?]: expected boolean, got %s",
				write_sexpr(ls[k]))
		end
	end
	for k = 1, #ls do if ls[k] then return true end end
	return false
end

local function and_fn(ls, env, depth)
	ls = eval_all( ls, env, depth,
		function (x)
			return (stype(x) == "boolean") and not x
		end)
	if stype(ls) == "error" then return ls end
	if (#ls == 0) or (stype(ls[1]) == "boolean") then
		return logical_and(ls)
	end
	local ops = { type="list" }
	for k = 1, #ls do
		if stype(ls[k]) == "fn" then ops[k] = ls[k].comb
		elseif stype(ls[k]) == "op" then ops[k] = ls[k]
		elseif k == 1 then
			return seterr(
				"bad operand to [op: and?]: expected boolean or combiner, got %s",
				write_sexpr(ls[k]))
		else
			return seterr(
				"bad operand to [op: and?]: expected combiner, got %s",
				write_sexpr(ls[k]))
		end
	end
	return wrap(make_op(function (ls, env, depth)
			ls = combine_all(ops, ls, env, depth,
				function (x)
					return (stype(x) ~= "boolean") or not x
				end)
			if ls.type == "error" then return ls end
			return logical_and(ls)
		end, "and?", true))
end

local function or_fn(ls, env, depth)
	ls = eval_all(ls, env, depth,
		function (x)
			return (stype(x) == "boolean") and x
		end)
	if stype(ls) == "error" then return ls end
	if (#ls == 0) or (stype(ls[1]) == "boolean") then
		return logical_or(ls)
	end
	local ops = { type="list" }
	for k = 1, #ls do
		if stype(ls[k]) == "fn" then ops[k] = ls[k].comb
		elseif stype(ls[k]) == "op" then ops[k] = ls[k]
		elseif k == 1 then
			return seterr(
				"bad operand to [op: or?]: expected boolean or combiner, got %s",
				write_sexpr(ls[k]))
		else
			return seterr(
				"bad operand to [op: or?]: expected combiner, got %s",
				write_sexpr(ls[k]))
		end
	end
	return wrap(make_op(function (ls, env, depth)
			ls = combine_all(ops, ls, env, depth,
				function (x)
					return (stype(x) ~= "boolean") or x
				end)
			if ls.type == "error" then return ls end
			return logical_or(ls)
		end, "or?", true))
end

local function valid_parmlist( ls ) -- for \
	if stype(ls) ~= "list" then return false end
	for k = 1, #ls do
		if stype(ls[k]) ~= "symbol" then return false end
	end
	return true
end

local function match_parmlist( parms, ls ) -- for \
	local env = {}
	for k = 1, #parms do env[parms[k].name] = ls[k] end
	return env
end

local function lambda_fn(ls, senv)
	local parms = ls[1]
	if stype(parms) == "symbol" then
		parms = { type="list", parms }
	elseif not valid_parmlist(parms) then
		return seterr(
			"bad parameter-list operand to [op: \\]: %s",
			write_sexpr(parms))
	end
	local body = { type = "list" }
	for k = 2, #ls do body[k - 1] = ls[k] end
	return wrap(nary_op(make_op(function (ls, denv, depth)
		-- denv is ignored
		local env = match_parmlist( parms, ls )
		setmetatable(env, { __index = senv })
		return eval_seq(body, env, depth)
	end), #parms))
end

local relevantFrame = mw.getCurrentFrame()

local function getarg_fn(ls)
	local args = relevantFrame.args
	local t = nil
	if stype(ls[1]) == "number" then
		t = ls[1]
	else -- must be number or string
		t = ls[1]
	end
	t = args[t]
	if t == nil then return { type = "list" } end
	return t
end

local function getargexpr_fn(ls)
	local args = relevantFrame.args
	local t = nil
	if stype(ls[1]) == "number" then
		t = ls[1]
	else -- must be number or string
		t = ls[1]
	end
	t = args[t]
	if t == nil then return { type = "list" } end
	t = text_to_sexpr(t)
	if stype(t) == "error" then return { type = "list" } end
	if #t ~= 1 then return { type = "list" } end
	return t[1]
end

local function filter_fn(ls, env, depth)
	local preds = { type = "list" }
	for k = 2, #ls do preds[k - 1] = ls[k].comb end -- predicates
	local function hof(ls, n, f, app)
		-- copy first n elements of ls, apply f to later elements
		-- if app, instead skip first n, and return result,app
		if app == nil then app = false end
		local ls2 = { type = "list" }
		if #ls &lt;= n then
			if app then return ls2,app else return ls end
		end
		if not app then for k = 1, n do ls2[k] = ls[k] end end
		for k = (n + 1), #ls do
			local x,app2 = f(ls[k])
			if stype(x) == "error" then return x end
			if app2 == nil then app2 = false end
			if app2 then
				for j = 1, #x do ls2[1 + #ls2] = x[j] end
			else
				ls2[1 + #ls2] = x
			end
		end
		return ls2,app
	end
	local function filter_entry(entry)
		local b = combine_all(preds, {type="list", entry}, env, depth,
			function (x)
				return (stype(x) ~= "boolean") or not x
			end)
		if stype(b) == "error" then return b end
		b = logical_and(b)
		if stype(b) == "error" then return b end
		if b then
			if stype(entry) == "list" then
				return hof(entry, 2, function (part)
						return hof(part, 2, filter_entry)
					end)
			else
				return entry
			end
		else
			if stype(entry) == "list" then
				return hof(entry, 2, function (part)
						return hof(part, 2, filter_entry, true)
					end, true)
			else
				return { type = "list" }, true
			end
		end
	end
	return hof(ls[1], 0, filter_entry)
end

local function item_tc(x)
	if (stype(x) == "list") and (#x &gt; 1) and
		(stype(x[1]) == "string") and (x[1] ~= "part") and
		(stype(x[2]) == "list") and (#x[2] == 2) and
		(int_tc(x[2][1]) == "") and (int_tc(x[2][2]) == "")
	then
		return ""
	else
		return "item"
	end
end

local function part_tc(x)
	if (stype(x) == "list") and (#x &gt; 1) and (x[1] == "part") and
		(stype(x[2]) == "list") and (#x[2] == 2) and
		(int_tc(x[2][1]) == "") and (int_tc(x[2][2]) == "")
	then
		return ""
	else
		return "part"
	end
end

local function cd_tc(x)
	if (stype(x) == "list") and (#x &gt; 0) then
		if stype(x[1]) == "string" then x = x[2] end
		if (x ~= nil) and (stype(x) == "list") and (#x == 2) and
			(int_tc(x[1]) == "") and (int_tc(x[2]) == "")
		then
			return ""
		end
	end
	return "coordinates descriptor"
end

local function cd_ls_tc(x)
	local ok = true
	if stype(x) ~= "list" then ok = false
	else for k = 1, #x do if cd_tc(x[k]) ~= "" then ok = false end end
	end
	if ok then return ""
	else return "list of coordinates descriptors"
	end
end

local function getsubstr_ntv(s, k1, k2) -- k1, k2 ints if provided
	if k1 == nil then return s end
	if k1 &lt; 1 then k1 = 1 end
	if k2 ~= nil then
		if k2 &gt;= mw.ustring.len(s) then k2 = nil end
	end
	return mw.ustring.sub( s, k1, k2 )
end

local function cd_norm(x) -- assumes cd_tc
	if stype(x[1]) == "number" then return x else return x[2] end
end

local function getsubstr_int_fn(ls)
	local s = ls[1]
	return getsubstr_ntv(s, ls[2], ls[3])
end

local function getsubstr_cd_fn(ls)
	local s = ls[1]
	local c = cd_norm(ls[2])
	return getsubstr_ntv(s, c[1], c[2])
end

local function getsubstr_ls_fn(ls)
	local s = ls[1]
	local r = { type = "list" }
	for k = 1, #ls[2] do
		r[k] = cd_norm(ls[2][k])
	end
	for k = 1, #r do r[k] = getsubstr_ntv(s, r[k][1], r[k][2]) end
	return r
end

local function setsubstr_ls(s, lsc, lss)
	-- string, array of cds, array of strings
	local n = math.min(#lsc, #lss) -- just ignore extras of either
	if n == 0 then return s end
	local function berr(...)
		return seterr("bounds violation in [op: set-substring]: %s",
			mw.ustring.format( ... ))
	end
	if lsc[1][1] &lt; 1 then
		return berr("segment starts left of string start (%i)", lsc[1][1])
	end
	if lsc[n][2] &gt; mw.ustring.len(s) then
		return berr("segment ends right of string end (%i, %i)",
			lsc[n][2], mw.ustring.len(s))
	end
	local r = {}
	for k = 1, n do
		if lsc[k][1] &gt; (lsc[k][2] + 1) then
			return berr("segment starts right of its own end (%i, %i)",
				lsc[k][1], lsc[k][2])
		end
		r[2 * k] = lss[k]
	end
	r[1] = mw.ustring.sub(s, 1, (lsc[1][1] - 1))
	r[1 + (2 * n)] = mw.ustring.sub(s, (lsc[n][2] + 1))
	for k = 2, n do
		if lsc[k - 1][2] &gt;= lsc[k][1] then
			return berr("segment ends right of next segment start (%i, %i)",
				lsc[k - 1][2], lsc[k][1])
		end
		r[(2 * k) - 1] = mw.ustring.sub(s,
			(lsc[k - 1][2] + 1),
			(lsc[k][1] - 1))
	end
	return table.concat(r)
end

local function str_ls_tc(x)
	local ok = true
	if stype(x) ~= "list" then ok = false
	else for k = 1, #x do if stype(x[k]) ~= "string" then ok = false end end
	end
	if ok then return ""
	else return "list of strings"
	end
end

local function getsublist_fn(ls)
	local n1 = ls[2]
	local n2 = ls[3]
	local ls = ls[1]
	local x = { type = "list" }
	if n1 &lt; 1 then n1 = 1 end
	if n2 == nil then n2 = #ls elseif n2 &gt; #ls then ns = #ls end
	for k = n1, n2 do x[1 + #x] = ls[k] end
	return x
end

local function setsublist_fn(ls)
	local base = ls[1]
	local n1 = ls[2] - 1
	local n2 = ls[3] + 1
	local seg = ls[4]
	if n1 &lt; 0 then n1 = 0 end
	if n2 &lt;= n1 then n2 = n1 + 1 end
	local r = { type = "list" }
	for k = 1, n1 do r[k] = base[k] end
	for k = 1, #seg do r[1 + #r] = seg[k] end
	for k = n2, #base do r[1 + #r] = base[k] end
	return r
end

local function findprd_fn(ls, env, depth)
	local x = ls[1]
	local p = ls[2].comb
	local x2 = { type = "list" }
	for k = 1, #x do
		local q = combine( p, { type="list", x[k] }, env, depth )
		if stype(q) == "error" then return q end
		if stype(q) ~= "boolean" then
			return seterr(
				"bad predicate result type to [op: find]: got %s",
				stype(q))
		end
		if q then x2[1 + #x2] = k end
	end
	return x2
end

local function findstr_fn(ls)
	local s = ls[1]
	local p = ls[2]
	local x2 = { type = "list" }
	if #p == 0 then return x2 end
	local k = 1
	repeat
		local x3 = { mw.ustring.find( s, p, k, true ) }
		if #x3 == 0 then return x2 end
		x2[1 + #x2] = { type = "list", x3[1], x3[2] }
		k = 1 + x3[2]
	until false
end

local function findpat_fn(ls)
	local s = ls[1]
	local p = ls[2].pat
	local x2 = { type = "list" }
	local k = 1
	repeat
		local x3 = { mw.ustring.find( s, p, k ) }
		if #x3 == 0 then return x2 end
		x2[1 + #x2] = { type = "list", x3[1], x3[2] }
		k = 1 + x3[2]
	until false
end

local function any_tc(x) return "" end
local function none_tc(x) return "no operand here" end

local function member_fn(ls) -- 1 or 2 operands, second must be a list
	local t = write_sexpr(ls[1])
	if ls[2] ~= nil then
		ls = ls[2]
		for k = 1, #ls do
			if write_sexpr(ls[k]) == t then return true end
		end
		return false
	else
		return wrap(nary_op(typed_op({ "list" }, make_op(function(ls)
			ls = ls[1]
			for k = 1, #ls do
				if write_sexpr(ls[k]) == t then return true end
			end
			return false
		end, nil, true)), 1))
	end
end

local lang = mw.language.getContentLanguage()

local function let_tc(x)
	if (stype(x) == "list") and (#x == 2) and (stype(x[1]) == "symbol")
	then return ""
	else return "symbol-value binding"
	end
end

local function sorp_tc(x)
	if (stype(x) == "string") or (stype(x) == "pattern")
	then return ""
	else return "string or pattern"
	end
end

local function split_tc(x)
	if (stype(x) == "list") and (#x &gt;= 1) and (sorp_tc(x[1]) == "") and
		((#x == 1) or
		 ((#x == 2) and ((sorp_tc(x[2]) == "") or (split_tc(x[2]) == ""))) or
		 ((#x == 3) and (sorp_tc(x[2]) == "") and (split_tc(x[3]) == "")))
	then
		return ""
	else
		return "valid string-split descriptor"
	end
end

local function strnest_tc(x)
	if stype(x) == "string" then return ""
	elseif stype(x) == "list" then
		for k = 1, #x do
			local msg = strnest_tc(x[k])
			if msg ~= "" then return msg end
		end
		return ""
	end
	return "string or tree of strings"
end

local function splitsep_fn(s, p)
	local x
	if (stype(p) == "string")
	then x = mw.text.split( s, p, true )
	else x = mw.text.split( s, p.pat )
	end
	x.type = "list"
	return x
end

local function splitdelim_fn(s, lt, rt)
	local lp = (stype(lt) == "string")
	local rp = (stype(rt) == "string")
	if not lp then lt = lt.pat end
	if not rp then rt = rt.pat end
	local snarf -- find next unmatched right-delimiter
	snarf = function (k)
		repeat
			local xl = { mw.ustring.find( s, lt, k, lp ) }
			local xr = { mw.ustring.find( s, rt, k, rp ) }
			if #xr == 0 then return xr end
			if #xl == 0 then return xr end
			if xr[1] &lt;= xl[1] then return xr end
			xr = snarf(xl[2] + 1)
			if #xr == 0 then return xr end
			k = (xr[2] + 1)
		until false
	end
	local results = { type = "list" }
	local k = 1 -- leftmost character of interest
	repeat
		local xl = { mw.ustring.find( s, lt, k, lp ) }
		if #xl == 0 then return results end
		k = xl[2] + 1
		local xr = snarf(k)
		if #xr &gt; 0 then
			results[1 + #results] = mw.ustring.sub( s, k, (xr[1] - 1) )
			k = xr[2] + 1
		end
	until false
end

local function splitrec_fn(s, rc)
	local ls
	if (#rc &gt; 1) and (stype(rc[2]) ~= "list") then
		ls = splitdelim_fn(s, rc[1], rc[2])
	else
		ls = splitsep_fn(s, rc[1])
	end
	ls.type = "list"
	rc = rc[#rc]
	if (stype(rc) == "list") then
		for k = 1, #ls do
			ls[k] = splitrec_fn(ls[k], rc)
		end
	end
	return ls
end

local function splitnest_fn(s, rc)
	if stype(s) == "string" then return splitrec_fn(s, rc) end
	local result = { type="list" }
	for k = 1, #s do
		result[k] = splitnest_fn(s[k], rc)
		if stype(result[k]) == "error" then return result[k] end
	end
	return result
end

local function split_fn(ls)
	local rc = { type = "list" }
	for k = 2, #ls do rc[k - 1] = ls[k] end
	return splitnest_fn(ls[1], rc)
end

local function join_tc(x)
	if (stype(x) == "list") and (#x &gt;= 1) and (stype(x[1]) == "string") and
		((#x == 1) or
		 ((#x == 2) and ((stype(x[2]) == "string") or (join_tc(x[2]) == ""))) or
		 ((#x == 3) and (stype(x[2]) == "string") and (join_tc(x[3]) == "")))
	then
		return ""
	else
		return "valid string-join descriptor"
	end
end

local function neststr_tc(x)
	if stype(x) == "list" then
		for k = 1, #x do
			if stype(x[k]) ~= "string" then
				local msg = neststr_tc(x[k])
				if msg ~= "" then return msg end
			end
		end
		return ""
	end
	return "tree of strings"
end

local function joinsep_fn(t, s)
	if #t == 0 then return "" end
	if stype(t[1]) == "string" then
		for k = 2, #t do if stype(t[k]) ~= "string" then
			return seterr("bad target for [op: join]: uneven tree depth")
		end end
		return table.concat( t, s )
	end
	for k = 2, #t do if stype(t[k]) == "string" then
		return seterr("bad target for [op: join]: uneven tree depth")
	end end
	local result = { type = "list" }
	for k = 1, #t do
		result[k] = joinsep_fn(t[k], s)
		if stype(result[k]) == "error" then return result[k] end
	end
	return result
end

local function joindelim_fn(t, lf, rg)
	if #t == 0 then return "" end
	if stype(t[1]) == "string" then
		for k = 2, #t do if stype(t[k]) ~= "string" then
			return seterr("bad target for [op: join]: uneven tree depth")
		end end
		return lf .. table.concat( t, (rg .. lf) ) .. rg
	end
	for k = 2, #t do if stype(t[k]) == "string" then
		return seterr("bad target for [op: join]: uneven tree depth")
	end end
	local result = { type = "list" }
	for k = 1, #t do
		result[k] = joindelim_fn(t[k], lf, rg)
		if stype(result[k]) == "error" then return result[k] end
	end
	return result
end

local function joinnest_fn(t, rc)
	if stype(t) == "error" then return t end
	if stype(t) == "string" then
		return seterr("bad target for [op: join]: tree not deep enough")
	end
	if #rc == 1 then
		return joinsep_fn(t, rc[1])
	elseif #rc == 3 then
		return joinnest_fn(joindelim_fn(t, rc[1], rc[2]), rc[3])
	elseif stype(rc[2]) == "string" then
		return joindelim_fn(t, rc[1], rc[2])
	else
		return joinnest_fn(joinsep_fn(t, rc[1]), rc[2])
	end
end

local function join_fn(ls)
	local rc = { type = "list" }
	for k = 2, #ls do rc[k - 1] = ls[k] end
	return joinnest_fn(ls[1], rc)
end

local function xformer_fn(pred, basis, succ, n)
	return wrap(nary_op(typed_op({ "fn", "fn", any_tc },
		make_op(function (ls, denv, depth)
			local leaf = ls[1]
			local parent = ls[2]
			local data = ls[3]
			local function xform(basis, data)
				local recurse = false
				if stype(data) == "list" then
					if stype(pred) ~= "fn" then
						recurse = true
					else
						recurse = combine( pred.comb, { type="list", data }, env, depth )
						if stype(recurse) ~= "boolean" then
							if stype(recurse) == "error" then return recurse end
							return seterr(
								"bad predicate result type to [op transform]: %s",
								stype(recurse))
						end
					end
				end
				local comb
				if recurse then
					local b2
					if stype(succ) == "fn"
					then b2 = combine( succ.comb, { type="list", basis }, env, depth )
					else b2 = basis
					end
					local d2 = { type="list" }
					for k = 1, #data do
						if k &lt;= n then
							d2[k] = data[k]
						else
							d2[k] = xform(b2, data[k])
							if stype(d2[k]) == "error" then return d2[k] end
						end
					end
					data = d2
					comb = parent.comb
				else
					comb = leaf.comb
				end
				if stype(succ) == "fn"
				then data = { type="list", basis, data }
				else data = { type="list",        data }
				end
				return combine( comb, data, env, depth )
			end
			return xform(basis, data)
		end, "transform", true)), 3))
end

--[[ standard environment ]]

local ground_env = {
	list = wrap(make_op(function (ls) return ls end, "list", true)),
	["+"] = wrap(typed_op(
		{ "number" }, make_op(function (ls)
			local sum = 0
			for k = 1, #ls do sum = sum + ls[k] end
			return sum
		end, "add", true),
		{ "string" }, function (ls)
			local s = {}
			for k = 1, #ls do s[k] = ls[k] end
			return table.concat(s)
		end,
		{ "boolean" }, function (ls)
			local sum = true
			for k = 1, #ls do sum = sum and ls[k] end
			return sum
		end,
		{ "list" }, function (ls)
			local x = { type = "list" }
			for j = 1, #ls do
				for k = 1, #ls[j] do
					x[1 + #x] = ls[j][k]
				end
			end
			return x
		end)),
	["*"] = wrap(typed_op({ "number" }, make_op(function (ls)
			local product = 1
			for k = 1, #ls do product = product * ls[k] end
			return product
		end, "multiply", true))),
	["-"] = wrap(nary_op(typed_op({ "number" }, make_op(function (ls)
			local result = ls[1]
			for k = 2, #ls do result = result - ls[k] end
			return result
		end, "subtract", true)), -2)),
	["/"] = wrap(nary_op(typed_op({ "number" }, make_op(function (ls)
			local result = ls[1]
			for k = 2, #ls do result = result / ls[k] end
			return result
		end, "divide", true)), -2)),
	["^"] = wrap(nary_op(typed_op({ "number" }, make_op(function  (ls)
			return ls[1] ^ ls[2]
		end, "exponentiation", true)), 2)),
	["\\"] = nary_op(make_op(lambda_fn, "\\", true), -1),
	abs = wrap(nary_op(typed_op({ "number" }, make_op(function (ls)
			return math.abs(ls[1])
		end, "abs", true)), 1)),
	anchorencode = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return mw.uri.anchorEncode( ls[1] )
		end, "anchorencode", true)), 1)),
	["and?"] = make_op(and_fn, "and?", true),
	apply = wrap(nary_op(typed_op(
		{ "fn", "list" }, make_op(function (ls, env, depth)
			return combine(ls[1].comb, ls[2], env, depth)
		end, "apply", "true")), 2)),
	["boolean?"] = wrap(unary_pred(function (x)
			return stype(x) == "boolean"
		end, "boolean?")),
	["call?"] = wrap(unary_pred(function (x)
			return (stype(x) == "list") and (#x &gt; 0) and
				(stype(x[1]) == "string") and (x[1] == "call")
		end, "call?")),
	canonicalurl = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			if #ls == 1
			then return tostring( mw.uri.canonicalUrl( ls[1] ) )
			else return tostring( mw.uri.canonicalUrl( ls[1], ls[2] ) )
			end
		end, "canonicalurl", true)), 1, 2)),
	ceil = wrap(nary_op(typed_op({ "number" }, make_op(function (ls)
			return math.ceil(ls[1])
		end, "ceil", true)), 1)),
	define = nary_op(make_op(function (ls, env, depth)
			if stype(ls[1]) ~= "symbol" then
				return seterr(
					"bad definiend to [op: define]: expected symbol, got %s",
					write_sexpr(ls[1]))
			end
			local x = eval(ls[2], env, depth)
			if stype(x) == "error" then return x end
			env[ls[1].name] = x
			while stype(x) == "fn" do x = x.comb end
			if stype(x) == "op" and x.name == nil then x.name = ls[1].name end
			return { type = "list" }
		end, "define", true), 2),
	["equal?"] = wrap(make_op(function (ls)
			if #ls &gt;= 2 then
				local t = write_sexpr(ls[1])
				for k = 2, #ls do
					if write_sexpr(ls[k]) ~= t then
						return false
					end
				end
			end
			return true
		end, "equal?", true)),
	filter = wrap(nary_op(typed_op({ "list", "fn" }, make_op(filter_fn,
		"filter", true)), -1)),
	find = wrap(nary_op(typed_op(
		{ "list", "fn" }, make_op(findprd_fn, "find", true),
		{ "string", "string" }, findstr_fn,
		{ "string", "pattern" }, findpat_fn
		), 2)),
	floor = wrap(nary_op(typed_op({ "number" }, make_op(function (ls)
			return math.floor(ls[1])
		end, "floor", true)), 1)),
	["fn?"] = wrap(unary_pred(function (x)
			return stype(x) == "fn"
		end, "fn?")),
	fullurl = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			if #ls == 1
			then return tostring( mw.uri.fullUrl( ls[1] ) )
			else return tostring( mw.uri.fullUrl( ls[1], ls[2] ) )
			end
		end, "fullurl", true)), 1, 2)),
	["ge?"] = wrap(typed_op(
		{ "number" }, binary_pred(function (x1, x2) return x1 &gt;= x2 end, "ge?"),
		{ "string" }, binary_pred(function (x1, x2) return x1 &gt;= x2 end))),
	['get-arg'] = wrap(nary_op(typed_op(
		{ "number" }, make_op(getarg_fn, "get-arg", true),
		{ "string" }, getarg_fn), 1)),
	['get-arg-expr'] = wrap(nary_op(typed_op(
		{ "number" }, make_op(getargexpr_fn, "get-arg-expr", true),
		{ "string" }, getargexpr_fn), 1)),
	['get-args'] = nary_op(make_op(function ()
			local ls = { type = "list" }
			for v, k in pairs( relevantFrame.args ) do
				ls[1 + #ls] = v
			end
			return ls
		end, "get-args"), 0),
	['get-coords'] = wrap(nary_op(typed_op({ cd_tc },make_op(function (ls)
			ls = ls[1]
			if stype(ls[1]) == "string" then ls = ls[2] end
			return { type="list", ls[1], ls[2] }
		end, "get-coords", true)), 1)),
	["get-items"] = wrap(nary_op(typed_op({ part_tc }, make_op(function (ls)
			ls = ls[1]
			local ls2 = { type="list" }
			for k = 3, #ls do ls2[k - 2] = ls[k] end
			return ls2
		end, "get-items", true)), 1)),
	["get-parts"] = wrap(nary_op(typed_op({ item_tc }, make_op(function (ls)
			ls = ls[1]
			local ls2 = { type="list" }
			for k = 3, #ls do ls2[k - 2] = ls[k] end
			return ls2
		end, "get-parts", true)), 1)),
	["get-sublist"] = wrap(nary_op(typed_op(
		{ "list", int_tc },
		make_op(getsublist_fn, "get-sublist", true)), 2, 3)),
	["get-substring"] = wrap(typed_op(
		{ "string", int_tc },
		nary_op(make_op(getsubstr_int_fn, "get-substring", true), 2, 3),
		{ "string", cd_tc },
		nary_op(make_op(getsubstr_cd_fn, "get-substring", true), 2),
		{ "string", cd_ls_tc },
		nary_op(make_op(getsubstr_ls_fn, "get-substring", true), 2))),
	["gt?"] = wrap(typed_op(
		{ "number" }, binary_pred(function (x1, x2) return x1 &gt; x2 end, "gt?"),
		{ "string" }, binary_pred(function (x1, x2) return x1 &gt; x2 end))),
	["if"] = nary_op(make_op(function (ls, env, depth)
			local test = eval(ls[1], env, depth)
			if stype(test) == "error" then return test end
			if stype(test) ~= "boolean" then
				return seterr(
					"bad test-result in [op: if]: %s",
					write_sexpr(test))
			elseif test then
				return eval(ls[2], env, depth)
			else
				return eval(ls[3], env, depth)
			end
		end, "if", true), 3),
	join = wrap(typed_op(
		{ neststr_tc, "string", join_tc },
		nary_op(make_op(join_fn, "join", true), 2, 3),
		{ neststr_tc, "string", "string", join_tc },
		nary_op(make_op(join_fn, "split", true), 3, 4))),
	lc = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return lang:lc(ls[1])
		end, "lc", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do r[k] = lang:lc(ls[k]) end
			return r
		end), 1)),
	lcfirst = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return lang:lcfirst(ls[1])
		end, "lcfirst", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do r[k] = lang:lcfirst(ls[k]) end
			return r
		end), 1)),
	["le?"] = wrap(typed_op(
		{ "number" }, binary_pred(function (x1, x2) return x1 &lt;= x2 end, "le?"),
		{ "string" }, binary_pred(function (x1, x2) return x1 &lt;= x2 end))),
	length = wrap(nary_op(typed_op(
		{ "list" }, make_op(function (ls)
			return #ls[1]
		end, "length", true),
		{ "string" }, function (ls)
			return mw.ustring.len( ls[1] )
		end), 1)),
	let = nary_op(typed_op({ let_tc, any_tc }, make_op(function (ls, env, depth)
			local p = ls[1][1]
			local v = eval( ls[1][2], env, depth )
			if stype(v) == "error" then return v end
			local body = { type = "list" }
			for k = 2, #ls do body[k - 1] = ls[k] end
			local e = {}
			e[p.name] = v
			setmetatable(e, { __index = env})
			return eval_seq(body, e, depth)
		end, "let", true)), -1),
	["link?"] = wrap(unary_pred(function (x)
			return (stype(x) == "list") and (#x &gt; 0) and
				(stype(x[1]) == "string") and (x[1] == "link")
		end, "link?")),
	["list?"] = wrap(unary_pred(function (x)
			return stype(x) == "list"
		end, "list?")),
	["lt?"] = wrap(typed_op(
		{ "number" }, binary_pred(function (x1, x2) return x1 &lt; x2 end, "lt?"),
		{ "string" }, binary_pred(function (x1, x2) return x1 &lt; x2 end))),
	map = wrap(nary_op(typed_op({ "fn", "list" }, make_op(
		function (ls, env, depth)
			local n = #ls[2]
			for k = 3, #ls do if #ls[k] &lt; n then n = #ls[k] end end
			local x = { type = "list" }
			for j = 1, n do
				local x2 = { type = "list" }
				for k = 2, #ls do x2[k - 1] = ls[k][j] end
				x[j] = combine( ls[1].comb, x2, env, depth )
				if stype(x[j]) == "error" then return x[j] end
			end
			return x
		end, "map", true)), -2)),
	["member?"] = wrap(nary_op(typed_op(
		{ any_tc, "list" }, make_op(member_fn, "member?", true)), 1, 2)),
	merge = wrap(nary_op(typed_op({ "fn", "list" }, make_op(
		function (ls, env, depth)
			local ks = {}
			for k = 2, #ls do ks[k] = 1 end
			local result = { type = "list" }
			while true do
				local j = nil
				for k = 2, #ls do
					if ks[k] &lt;= #ls[k] then
						if j == nil then j = k else
							local x = combine( ls[1].comb,
								{ ls[k][ks[k]], ls[j][ks[j]] }, env, depth )
							if stype(x) == "error" then return x end
							if x then j = k end
						end
					end
				end
				if j == nil then return result else
					result[#result + 1] = ls[j][ks[j]]
					ks[j] = ks[j] + 1
				end
			end
		end, "merge", true)), -2)),
	["not?"] = wrap(nary_op(typed_op({ "boolean" }, make_op(function (ls)
			return not ls[1]
		end, "not?", true)), 1)),
	nth = wrap(nary_op(typed_op({ "list", posint_tc }, make_op(function (ls)
			local x = ls[1]
			for k = 2, #ls do
				local n = ls[k]
				if #x &lt; n then
					return seterr(
						"bad index to [op: nth]: asked for %i, list length is %i",
						n, #x)
				end
				x = x[n]
				if (k &lt; #ls) and (stype(x) ~= "list") then
					return seterr("bad multi-index to [op: nth]: tree too shallow")
				end
			end
			return x
		end, "nth", true)), -2)),
	["number?"] = wrap(unary_pred(function (x)
			return stype(x) == "number"
		end, "number?")),
	["op?"] = wrap(unary_pred(function (x)
			return stype(x) == "op"
		end, "op?")),
	["or?"] = make_op(or_fn, "or?", true),
	["param?"] = wrap(unary_pred(function (x)
			return (stype(x) == "list") and (#x &gt; 0) and
				(stype(x[1]) == "string") and (x[1] == "param")
		end, "param?")),
	parse = wrap(nary_op(typed_op({ "string" }, make_op(parse_wiki,
		"parse", true)), 1)),
	pattern = wrap(nary_op(typed_op({ "string" }, make_op(function (ls)
			local p = ls[1]
			if #p == 0 then p = "[^%z%Z]" end -- disable null pattern
			return { type="pattern", pat=p }
		end, "pattern", true)), 1)),
	sequence = make_op(function (ls, env, depth)
			return eval_seq(ls, env, depth)
		end, "sequence", true),
	["set-sublist"] = wrap(nary_op(typed_op(
		{ "list", int_tc, int_tc, "list" },
		make_op(setsublist_fn, "set-sublist", true)), 4)),
	["set-substring"] = wrap(typed_op(
		{ "string", int_tc, int_tc, "string" },
		nary_op(make_op(function (ls)
				return setsubstr_ls(ls[1], { { ls[2], ls[3] } }, { ls[4] })
			end, "set-substring", true), 4),
		{ "string", cd_tc, "string" },
		nary_op(make_op(function (ls)
				return setsubstr_ls(ls[1], { cd_norm(ls[2]) }, { ls[3] })
			end, "set-substring", true), 3),
		{ "string", cd_ls_tc, str_ls_tc },
		nary_op(make_op(function (ls)
				local lsc = {}
				for k = 1, #ls[2] do lsc[k] = cd_norm(ls[2][k]) end
				return setsubstr_ls(ls[1], lsc, ls[3])
			end, "set-substring", true), 3)
		)),
	split = wrap(typed_op(
		{ strnest_tc, sorp_tc, split_tc },
		nary_op(make_op(split_fn, "split", true), 2, 3),
		{ strnest_tc, sorp_tc, sorp_tc, split_tc },
		nary_op(make_op(split_fn, "split", true), 3, 4))),
	["string?"] = wrap(unary_pred(function (x)
			return stype(x) == "string"
		end, "string?")),
	["symbol?"] = wrap(unary_pred(function (x)
			return stype(x) == "symbol"
		end, "symbol?")),
	["to-entity"] = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			local s = ls[1]
			if #s == 0 then return s end
			return "&amp;#" .. mw.ustring.codepoint(s, 1) .. ";"
		end, "to-entity", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do
				local s = ls[k]
				if #s == 0 then r[k] = s
				else r[k] = "&amp;#" .. mw.ustring.codepoint(s, 1) .. ";"
				end
			end
			return r
		end), 1)),
	["to-number"] = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			local n = tonumber(ls[1])
			if n == nil then return { type="list" } else return n end
		end, "to-number", true)), 1)),
	["to-string"] = wrap(nary_op(typed_op(
		{ "number" }, make_op(function (ls)
			return write_sexpr(ls[1])
		end, "to-string", true)),1)),
	transformer = wrap(typed_op(
		{ none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(    0,     0,     0,     0)
			end, "transformer", true),
		{ "fn", none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(ls[1],     0,     0,     0)
			end, "transformer", true),
		{ posint_tc, none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(    0,     0,     0, ls[1])
			end, "transformer", true),
		{ any_tc, "fn", none_tc },
		nary_op(make_op(function (ls, env, depth)
				return xformer_fn(    0, ls[1], ls[2],     0)
			end, "transformer", true), -2),
		{ "fn", posint_tc, none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(ls[1],     0,     0, ls[2])
			end, "transformer", true),
		{ "fn", any_tc, "fn", none_tc },
		nary_op(make_op(function (ls, env, depth)
				return xformer_fn(ls[1], ls[2], ls[3],     0)
			end, "transformer", true), -3),
		{ any_tc, "fn", posint_tc, none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(    0, ls[1], ls[2], ls[3])
			end, "transformer", true),
		{ "fn", any_tc, "fn", posint_tc, none_tc },
		make_op(function (ls, env, depth)
				return xformer_fn(ls[1], ls[2], ls[3], ls[4])
			end, "transformer", true)
		)),
	trim = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return mw.text.trim(ls[1])
		end, "trim", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do r[k] = mw.text.trim(ls[k]) end
			return r
		end), 1)),
	uc = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return lang:uc(ls[1])
		end, "uc", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do r[k] = lang:uc(ls[k]) end
			return r
		end), 1)),
	ucfirst = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			return lang:ucfirst(ls[1])
		end, "ucfirst", true),
		{ str_ls_tc }, function (ls)
			ls = ls[1]
			local r = { type = "list" }
			for k = 1, #ls do r[k] = lang:ucfirst(ls[k]) end
			return r
		end), 1)),
	urlencode = wrap(nary_op(typed_op(
		{ "string" }, make_op(function (ls)
			if #ls == 1 then ls[2] = 'QUERY' end
			return mw.uri.encode( ls[1], ls[2] )
		end, "urlencode", true)), 1, 2)),
	["wikilisp-version"] = wrap(nary_op(make_op(function (ls)
			return wikilispversion
		end, "wikilisp-version", true), 0)),
	write = wrap(nary_op(make_op(function (ls)
			return write_sexpr(ls[1])
		end, "write", true), 1))
}

local function make_standard_env()
	local standard_env = {}
	setmetatable(standard_env, { __index = ground_env})
	return standard_env
end

--[[ read-eval-print]]

function export.rep( frame )
	local t = frame.args[1]
	if t == nil then t = "" end
	return display_sexpr(
		eval_seq(
			text_to_sexpr(t),
			make_standard_env(),
			maxdepth))
end

function export.trep( frame )
	relevantFrame = frame:getParent()
	return export.rep(frame)
end

return export</text>
      <sha1>pj4vm8qb5jh0xuqywm926aeq903pofc</sha1>
    </revision>
  </page>
</mediawiki>
